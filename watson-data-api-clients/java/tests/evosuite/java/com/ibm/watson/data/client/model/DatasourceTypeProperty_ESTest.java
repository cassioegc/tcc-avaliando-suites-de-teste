/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 14:36:13 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.DatasourceTypeProperty;
import com.ibm.watson.data.client.model.DatasourceTypePropertyValues;
import com.ibm.watson.data.client.model.enums.DatasourceTypePropertyType;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatasourceTypeProperty_ESTest extends DatasourceTypeProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Vector<DatasourceTypePropertyValues> vector0 = new Vector<DatasourceTypePropertyValues>();
      DatasourceTypeProperty datasourceTypeProperty1 = datasourceTypeProperty0.values(vector0);
      List<DatasourceTypePropertyValues> list0 = datasourceTypeProperty1.getValues();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypePropertyValues datasourceTypePropertyValues0 = new DatasourceTypePropertyValues();
      datasourceTypeProperty0.addValuesItem(datasourceTypePropertyValues0);
      List<DatasourceTypePropertyValues> list0 = datasourceTypeProperty0.getValues();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypePropertyType datasourceTypePropertyType0 = DatasourceTypePropertyType.STRING;
      DatasourceTypeProperty datasourceTypeProperty1 = datasourceTypeProperty0.type(datasourceTypePropertyType0);
      DatasourceTypePropertyType datasourceTypePropertyType1 = datasourceTypeProperty1.getType();
      assertSame(datasourceTypePropertyType0, datasourceTypePropertyType1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Stack<String> stack0 = new Stack<String>();
      datasourceTypeProperty0.tags(stack0);
      List<String> list0 = datasourceTypeProperty0.getTags();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.addTagsItem("R12_\":2p02#>Q0Ye@qt");
      List<String> list0 = datasourceTypeProperty0.getTags();
      assertTrue(list0.contains("R12_\":2p02#>Q0Ye@qt"));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.addSupportedEnvironmentsItem("\n  Running:");
      List<String> list0 = datasourceTypeProperty0.getSupportedEnvironments();
      assertTrue(list0.contains("\n  Running:"));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = Boolean.valueOf(true);
      datasourceTypeProperty0.required(boolean0);
      Boolean boolean1 = datasourceTypeProperty0.getRequired();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      XmlSuite xmlSuite0 = new XmlSuite();
      datasourceTypeProperty0.setReadonly(xmlSuite0.DEFAULT_PRESERVE_ORDER);
      Boolean boolean0 = datasourceTypeProperty0.getReadonly();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = Boolean.valueOf("Cookie");
      datasourceTypeProperty0.setReadonly(boolean0);
      Boolean boolean1 = datasourceTypeProperty0.getReadonly();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.placeholder("0N'xjW");
      String string0 = datasourceTypeProperty0.getPlaceholder();
      assertEquals("0N'xjW", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.placeholder("");
      String string0 = datasourceTypeProperty0.getPlaceholder();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypeProperty datasourceTypeProperty1 = datasourceTypeProperty0.name("9; o|T7'p=");
      String string0 = datasourceTypeProperty1.getName();
      assertEquals("9; o|T7'p=", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.setName("");
      String string0 = datasourceTypeProperty0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = new Boolean("cP(Jl");
      DatasourceTypeProperty datasourceTypeProperty1 = datasourceTypeProperty0.multiline(boolean0);
      Boolean boolean1 = datasourceTypeProperty1.getMultiline();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = Boolean.TRUE;
      datasourceTypeProperty0.setMasked(boolean0);
      Boolean boolean1 = datasourceTypeProperty0.getMasked();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = new Boolean(false);
      datasourceTypeProperty0.masked(boolean0);
      Boolean boolean1 = datasourceTypeProperty0.getMasked();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.label("$@?`");
      String string0 = datasourceTypeProperty0.getLabel();
      assertEquals("$@?`", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = new Boolean("cP(Jl");
      DatasourceTypeProperty datasourceTypeProperty1 = datasourceTypeProperty0.hidden(boolean0);
      Boolean boolean1 = datasourceTypeProperty1.getHidden();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypeProperty datasourceTypeProperty1 = datasourceTypeProperty0.group("fd~A");
      String string0 = datasourceTypeProperty1.getGroup();
      assertEquals("fd~A", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.group("");
      String string0 = datasourceTypeProperty0.getGroup();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.setDescription("_* vc\"Gh+m_0");
      String string0 = datasourceTypeProperty0.getDescription();
      assertEquals("_* vc\"Gh+m_0", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.description("");
      String string0 = datasourceTypeProperty0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.defaultValue("null");
      String string0 = datasourceTypeProperty0.getDefaultValue();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.setDefaultValue("");
      String string0 = datasourceTypeProperty0.getDefaultValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getIncludedGroups();
      DatasourceTypeProperty datasourceTypeProperty1 = datasourceTypeProperty0.supportedEnvironments(list0);
      // Undeclared exception!
      try { 
        datasourceTypeProperty1.addSupportedEnvironmentsItem("kw6W^");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypePropertyValues datasourceTypePropertyValues0 = new DatasourceTypePropertyValues();
      datasourceTypeProperty0.addValuesItem(datasourceTypePropertyValues0);
      String string0 = datasourceTypeProperty0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      boolean boolean0 = datasourceTypeProperty0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      boolean boolean0 = datasourceTypeProperty0.equals(datasourceTypeProperty0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      XmlSuite xmlSuite0 = new XmlSuite();
      boolean boolean0 = datasourceTypeProperty0.equals(xmlSuite0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypePropertyValues datasourceTypePropertyValues0 = new DatasourceTypePropertyValues();
      datasourceTypeProperty0.addValuesItem(datasourceTypePropertyValues0);
      DatasourceTypeProperty datasourceTypeProperty1 = datasourceTypeProperty0.addValuesItem((DatasourceTypePropertyValues) null);
      assertNull(datasourceTypeProperty1.getHidden());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      String string0 = datasourceTypeProperty0.getDefaultValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.label("");
      String string0 = datasourceTypeProperty0.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypeProperty datasourceTypeProperty1 = datasourceTypeProperty0.readonly((Boolean) null);
      assertSame(datasourceTypeProperty0, datasourceTypeProperty1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypePropertyType datasourceTypePropertyType0 = DatasourceTypePropertyType.STRING;
      datasourceTypeProperty0.setType(datasourceTypePropertyType0);
      assertNull(datasourceTypeProperty0.getDescription());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      List<DatasourceTypePropertyValues> list0 = datasourceTypeProperty0.getValues();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = XmlSuite.DEFAULT_PRESERVE_ORDER;
      datasourceTypeProperty0.setHidden(boolean0);
      Boolean boolean1 = datasourceTypeProperty0.getHidden();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getExcludedGroups();
      datasourceTypeProperty0.setSupportedEnvironments(list0);
      assertNull(datasourceTypeProperty0.getDescription());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = datasourceTypeProperty0.getReadonly();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      String string0 = datasourceTypeProperty0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Vector<DatasourceTypePropertyValues> vector0 = new Vector<DatasourceTypePropertyValues>();
      datasourceTypeProperty0.setValues(vector0);
      assertNull(datasourceTypeProperty0.getPlaceholder());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = XmlSuite.DEFAULT_PRESERVE_ORDER;
      datasourceTypeProperty0.setRequired(boolean0);
      assertNull(datasourceTypeProperty0.getGroup());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = datasourceTypeProperty0.getMultiline();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getIncludedGroups();
      datasourceTypeProperty0.tags(list0);
      // Undeclared exception!
      try { 
        datasourceTypeProperty0.addTagsItem("class DatasourceTypePropertyValues {\n    value: java.lang.String@0000000006\n    label: null\n}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypePropertyType datasourceTypePropertyType0 = datasourceTypeProperty0.getType();
      DatasourceTypeProperty datasourceTypeProperty1 = datasourceTypeProperty0.type(datasourceTypePropertyType0);
      assertNull(datasourceTypeProperty1.getLabel());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      String string0 = datasourceTypeProperty0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = datasourceTypeProperty0.getHidden();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      List<String> list0 = datasourceTypeProperty0.getTags();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getExcludedGroups();
      datasourceTypeProperty0.setTags(list0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = datasourceTypeProperty0.getRequired();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.setGroup((String) null);
      assertNull(datasourceTypeProperty0.getHidden());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      String string0 = datasourceTypeProperty0.getLabel();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = datasourceTypeProperty0.getMasked();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.setLabel("k=_ed)5oUZEIoWlAo");
      assertEquals("k=_ed)5oUZEIoWlAo", datasourceTypeProperty0.getLabel());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getExcludedGroups();
      datasourceTypeProperty0.supportedEnvironments(list0);
      List<String> list1 = datasourceTypeProperty0.getSupportedEnvironments();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperty0.setPlaceholder("*W^|GM9j6Zk");
      assertNull(datasourceTypeProperty0.getMasked());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Boolean boolean0 = XmlSuite.DEFAULT_PRESERVE_ORDER;
      datasourceTypeProperty0.setMultiline(boolean0);
      Boolean boolean1 = datasourceTypeProperty0.getMultiline();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      List<String> list0 = datasourceTypeProperty0.getSupportedEnvironments();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      XmlSuite xmlSuite0 = new XmlSuite();
      datasourceTypeProperty0.required(xmlSuite0.DEFAULT_JUNIT);
      Boolean boolean0 = datasourceTypeProperty0.getRequired();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      String string0 = datasourceTypeProperty0.getPlaceholder();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      String string0 = datasourceTypeProperty0.getGroup();
      assertNull(string0);
  }
}
