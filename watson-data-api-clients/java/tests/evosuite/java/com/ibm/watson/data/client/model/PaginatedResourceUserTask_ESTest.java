/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 00:18:33 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.PaginatedResourceUserTask;
import com.ibm.watson.data.client.model.UserTask;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaginatedResourceUserTask_ESTest extends PaginatedResourceUserTask_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      LinkedList<UserTask> linkedList0 = new LinkedList<UserTask>();
      PaginatedResourceUserTask paginatedResourceUserTask1 = paginatedResourceUserTask0.resources(linkedList0);
      List<UserTask> list0 = paginatedResourceUserTask1.getResources();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      UserTask userTask0 = new UserTask();
      paginatedResourceUserTask0.addResourcesItem(userTask0);
      List<UserTask> list0 = paginatedResourceUserTask0.getResources();
      assertTrue(list0.contains(userTask0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      PaginatedResourceUserTask paginatedResourceUserTask1 = new PaginatedResourceUserTask();
      boolean boolean0 = paginatedResourceUserTask0.equals(paginatedResourceUserTask1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      PaginatedResourceUserTask paginatedResourceUserTask1 = new PaginatedResourceUserTask();
      Integer integer0 = new Integer(303);
      paginatedResourceUserTask1.setLimit(integer0);
      boolean boolean0 = paginatedResourceUserTask0.equals(paginatedResourceUserTask1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      boolean boolean0 = paginatedResourceUserTask0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      boolean boolean0 = paginatedResourceUserTask0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      boolean boolean0 = paginatedResourceUserTask0.equals(paginatedResourceUserTask0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      PaginatedResourceUserTask paginatedResourceUserTask1 = paginatedResourceUserTask0.addResourcesItem((UserTask) null);
      PaginatedResourceUserTask paginatedResourceUserTask2 = new PaginatedResourceUserTask();
      boolean boolean0 = paginatedResourceUserTask1.equals(paginatedResourceUserTask2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      paginatedResourceUserTask0.addResourcesItem((UserTask) null);
      PaginatedResourceUserTask paginatedResourceUserTask1 = paginatedResourceUserTask0.addResourcesItem((UserTask) null);
      assertNull(paginatedResourceUserTask1.getLimit());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      paginatedResourceUserTask0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      List<UserTask> list0 = paginatedResourceUserTask0.getResources();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      LinkedList<UserTask> linkedList0 = new LinkedList<UserTask>();
      paginatedResourceUserTask0.setResources(linkedList0);
      assertNull(paginatedResourceUserTask0.getOffset());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaginatedResourceUserTask paginatedResourceUserTask0 = new PaginatedResourceUserTask();
      String string0 = paginatedResourceUserTask0.toString();
      assertEquals("class PaginatedResourceUserTask {\n    limit: null\n    count: null\n    first: null\n    next: null\n    offset: null\n    last: null\n    previous: null\n    resources: null\n}", string0);
  }
}
