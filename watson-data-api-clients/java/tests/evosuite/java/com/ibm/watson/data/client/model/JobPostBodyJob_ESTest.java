/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:57:32 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.JobEntityJobScheduleInfo;
import com.ibm.watson.data.client.model.JobPostBodyJob;
import com.ibm.watson.data.client.model.JobRuntimeConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JobPostBodyJob_ESTest extends JobPostBodyJob_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobEntityJobScheduleInfo jobEntityJobScheduleInfo0 = new JobEntityJobScheduleInfo();
      jobPostBodyJob0.scheduleInfo(jobEntityJobScheduleInfo0);
      JobEntityJobScheduleInfo jobEntityJobScheduleInfo1 = jobPostBodyJob0.getScheduleInfo();
      assertNull(jobEntityJobScheduleInfo1.getStartOn());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobPostBodyJob jobPostBodyJob1 = jobPostBodyJob0.schedule("");
      String string0 = jobPostBodyJob1.getSchedule();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      jobPostBodyJob0.name("");
      String string0 = jobPostBodyJob0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      jobPostBodyJob0.description("Java @Annotation class for '");
      String string0 = jobPostBodyJob0.getDescription();
      assertEquals("Java @Annotation class for '", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobPostBodyJob jobPostBodyJob1 = jobPostBodyJob0.description("");
      String string0 = jobPostBodyJob1.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      jobPostBodyJob0.assetRef("\n");
      String string0 = jobPostBodyJob0.getAssetRef();
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobEntityJobScheduleInfo jobEntityJobScheduleInfo0 = new JobEntityJobScheduleInfo();
      JobPostBodyJob jobPostBodyJob1 = jobPostBodyJob0.scheduleInfo(jobEntityJobScheduleInfo0);
      String string0 = jobPostBodyJob1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobPostBodyJob jobPostBodyJob1 = new JobPostBodyJob();
      boolean boolean0 = jobPostBodyJob0.equals(jobPostBodyJob1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      jobPostBodyJob0.setSchedule("qKlo");
      JobPostBodyJob jobPostBodyJob1 = new JobPostBodyJob();
      jobPostBodyJob0.name("eRdaa@b-xg{>(RhM");
      jobPostBodyJob1.setName("eRdaa@b-xg{>(RhM");
      boolean boolean0 = jobPostBodyJob1.equals(jobPostBodyJob0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobPostBodyJob jobPostBodyJob1 = new JobPostBodyJob();
      assertTrue(jobPostBodyJob1.equals((Object)jobPostBodyJob0));
      
      JobPostBodyJob jobPostBodyJob2 = jobPostBodyJob1.description("reactor.core.publisher.luxMapFuseable$MaFuseableSuscribe");
      boolean boolean0 = jobPostBodyJob0.equals(jobPostBodyJob2);
      assertFalse(jobPostBodyJob1.equals((Object)jobPostBodyJob0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobPostBodyJob jobPostBodyJob1 = new JobPostBodyJob();
      assertTrue(jobPostBodyJob1.equals((Object)jobPostBodyJob0));
      
      JobPostBodyJob jobPostBodyJob2 = jobPostBodyJob1.name("    assetRef: ");
      boolean boolean0 = jobPostBodyJob2.equals(jobPostBodyJob0);
      assertFalse(jobPostBodyJob1.equals((Object)jobPostBodyJob0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobPostBodyJob jobPostBodyJob1 = new JobPostBodyJob();
      jobPostBodyJob1.setAssetRef("");
      boolean boolean0 = jobPostBodyJob1.equals(jobPostBodyJob0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      Object object0 = new Object();
      boolean boolean0 = jobPostBodyJob0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      boolean boolean0 = jobPostBodyJob0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      boolean boolean0 = jobPostBodyJob0.equals(jobPostBodyJob0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobEntityJobScheduleInfo jobEntityJobScheduleInfo0 = new JobEntityJobScheduleInfo();
      jobPostBodyJob0.scheduleInfo(jobEntityJobScheduleInfo0);
      JobPostBodyJob jobPostBodyJob1 = new JobPostBodyJob();
      boolean boolean0 = jobPostBodyJob1.equals(jobPostBodyJob0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobEntityJobScheduleInfo jobEntityJobScheduleInfo0 = jobPostBodyJob0.getScheduleInfo();
      assertNull(jobEntityJobScheduleInfo0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      String string0 = jobPostBodyJob0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobRuntimeConfiguration jobRuntimeConfiguration0 = jobPostBodyJob0.getConfiguration();
      assertNull(jobRuntimeConfiguration0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      jobPostBodyJob0.schedule("Java @Annotation class for '");
      String string0 = jobPostBodyJob0.getSchedule();
      assertEquals("Java @Annotation class for '", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      String string0 = jobPostBodyJob0.getSchedule();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobRuntimeConfiguration jobRuntimeConfiguration0 = new JobRuntimeConfiguration();
      jobPostBodyJob0.setConfiguration(jobRuntimeConfiguration0);
      assertNull(jobPostBodyJob0.getAssetRef());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      jobPostBodyJob0.setAssetRef("");
      String string0 = jobPostBodyJob0.getAssetRef();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      String string0 = jobPostBodyJob0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobEntityJobScheduleInfo jobEntityJobScheduleInfo0 = new JobEntityJobScheduleInfo();
      jobPostBodyJob0.setScheduleInfo(jobEntityJobScheduleInfo0);
      assertNull(jobEntityJobScheduleInfo0.getRepeat());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      JobRuntimeConfiguration jobRuntimeConfiguration0 = new JobRuntimeConfiguration();
      jobPostBodyJob0._configuration(jobRuntimeConfiguration0);
      JobRuntimeConfiguration jobRuntimeConfiguration1 = jobPostBodyJob0.getConfiguration();
      assertNull(jobRuntimeConfiguration1.getEnvId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      jobPostBodyJob0.name("    assetRef: ");
      String string0 = jobPostBodyJob0.getName();
      assertEquals("    assetRef: ", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      jobPostBodyJob0.setDescription("");
      assertNull(jobPostBodyJob0.getSchedule());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      String string0 = jobPostBodyJob0.getAssetRef();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JobPostBodyJob jobPostBodyJob0 = new JobPostBodyJob();
      jobPostBodyJob0.hashCode();
  }
}
