/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 14:03:27 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.EntityTag;
import com.ibm.watson.data.client.model.Link;
import com.ibm.watson.data.client.model.Locale;
import com.ibm.watson.data.client.model.MediaType;
import com.ibm.watson.data.client.model.NewCookie;
import com.ibm.watson.data.client.model.Response;
import com.ibm.watson.data.client.model.StatusType;
import com.ibm.watson.data.client.model.enums.StatusFamily;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.LinkedTransferQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.testng.IClassListener;
import org.testng.IInvokedMethodListener;
import org.testng.ITestNGMethod;
import org.testng.ITestRunnerFactory;
import org.testng.SuiteRunner;
import org.testng.TestRunner;
import org.testng.internal.Configuration;
import org.testng.internal.DynamicGraph;
import org.testng.internal.annotations.DataProviderAnnotation;
import org.testng.xml.XmlClass;
import org.testng.xml.XmlRun;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Response_ESTest extends Response_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Response response0 = new Response();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      URI uRI0 = MockURI.aHttpURI;
      response0.getStatus();
      Response response1 = response0.length((Integer) null);
      Response response2 = new Response();
      response2.location(uRI0);
      response2.equals(response1);
      response1.location(uRI0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Response response0 = new Response();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      URI uRI0 = MockURI.aHttpURI;
      response0.getStatus();
      Response response1 = response0.length((Integer) null);
      Stack<Link> stack0 = new Stack<Link>();
      response1.setLinks(stack0);
      Response response2 = new Response();
      response2.equals(response1);
      Response response3 = response1.location(uRI0);
      response3.getLocation();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      response0.getLinks();
      response0.getStatus();
      response0.hashCode();
      MockDate mockDate0 = new MockDate((-323), (-323), 0);
      Response response1 = response0.lastModified(mockDate0);
      MockDate mockDate1 = new MockDate(0, 40, 40);
      response0.date(mockDate1);
      Response response2 = new Response();
      response2.equals(response1);
      response0.getLinks();
      response1.getAllowedMethods();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      response0.getStatus();
      MockDate mockDate0 = new MockDate((-323), (-323), (-323));
      Response response1 = new Response();
      response1.setDate(mockDate0);
      response1.equals(response0);
      response0.getLinks();
      response0.location(uRI0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Response response0 = new Response();
      response0.setAllowedMethods((List<String>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      response0.equals((Object) null);
      response0.getStatus();
      MockDate mockDate0 = new MockDate((-323), (-323), 0);
      Response response1 = response0.lastModified(mockDate0);
      mockDate0.toInstant();
      Response response2 = new Response();
      Response response3 = response2.addAllowedMethodsItem("?@#QNVF#9QBR|/E'o");
      Locale locale0 = new Locale();
      Locale locale1 = locale0.iso3Language("?@#QNVF#9QBR|/E'o");
      Locale locale2 = locale1.displayVariant((String) null);
      Locale locale3 = locale2.unicodeLocaleKeys((List<String>) null);
      Locale locale4 = locale3.unicodeLocaleAttributes((List<String>) null);
      response3.language(locale4);
      response2.equals(response1);
      response0.getLinks();
      response1.location(uRI0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Response response0 = new Response();
      Locale locale0 = new Locale();
      Locale locale1 = locale0.displayName("aS|2Qo4");
      Locale locale2 = locale1.displayLanguage("aS|2Qo4");
      Locale locale3 = locale2.addExtensionKeysItem("clazz");
      Locale locale4 = locale3.variant("clazz");
      response0.setLanguage(locale4);
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      response0.getStatus();
      MockDate mockDate0 = new MockDate((-323), (-323), (-323));
      Response response1 = new Response();
      response1.equals(response0);
      response0.getLinks();
      response0.location(uRI0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      response0.getLinks();
      response0.equals((Object) null);
      response0.getStatus();
      EntityTag entityTag0 = new EntityTag();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      Boolean boolean0 = xmlSuite1.getPreserveOrder();
      EntityTag entityTag1 = entityTag0.weak(boolean0);
      response0.entityTag(entityTag1);
      MockDate mockDate0 = new MockDate((-323), (-323), 0);
      Response response1 = response0.lastModified(mockDate0);
      Response response2 = new Response();
      response0.allowedMethods((List<String>) null);
      response2.equals(response1);
      response0.getLinks();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      response0.getStatus();
      MockDate mockDate0 = new MockDate((-323), (-323), (-323));
      Response response1 = new Response();
      Response response2 = response1.allowedMethods((List<String>) null);
      EntityTag entityTag0 = new EntityTag();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      Boolean boolean0 = xmlSuite1.getAllowReturnValues();
      EntityTag entityTag1 = entityTag0.weak(boolean0);
      response2.entityTag(entityTag1);
      response1.equals(response0);
      response0.getLinks();
      response0.location(uRI0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Response response0 = new Response();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 1);
      List<String> list0 = xmlTest0.getIncludedGroups();
      Response response1 = response0.putStringHeadersItem((String) null, list0);
      Locale locale0 = new Locale();
      Response response2 = response1.language(locale0);
      Response response3 = response2.allowedMethods(list0);
      Response response4 = response3.entity(xmlTest0);
      // Undeclared exception!
      try { 
        response4.addAllowedMethodsItem((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      response0.equals((Object) null);
      response0.getStatus();
      MockDate mockDate0 = new MockDate((-323), (-323), 0);
      Response response1 = response0.length((Integer) null);
      response1.getStringHeaders();
      response1.stringHeaders((Map<String, List<String>>) null);
      Response response2 = new Response();
      Vector<Object> vector0 = new Vector<Object>();
      response2.putHeadersItem("o{44dE$>*MW_33j<;bO", vector0);
      response2.equals(response1);
      response0.getLinks();
      response1.location(uRI0);
      response0.getMetadata();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      response0.equals((Object) null);
      response0.getStatus();
      Response response1 = response0.length((Integer) null);
      Response response2 = new Response();
      Vector<Object> vector0 = new Vector<Object>();
      response1.putHeadersItem("xm2GtY", vector0);
      response2.equals(response1);
      response1.location(uRI0);
      response0.putMetadataItem("xm2GtY", vector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      response0.equals((Object) null);
      MockDate mockDate0 = new MockDate((-298), (-298), 0);
      Response response1 = response0.lastModified(mockDate0);
      Response response2 = new Response();
      response0.status(integer0);
      response2.equals(response1);
      response0.getLinks();
      response1.location(uRI0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Response response0 = new Response();
      response0.getMetadata();
      Response response1 = response0.headers((Map<String, List<Object>>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Response response2 = response1.length(integer0);
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getIncludes();
      EntityTag entityTag0 = new EntityTag();
      Response response3 = response2.entityTag(entityTag0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      response3.setStringHeaders(hashMap0);
      response2.putStringHeadersItem((String) null, list0);
      Response response4 = new Response();
      MediaType mediaType0 = new MediaType();
      Response response5 = response4.mediaType(mediaType0);
      response5.equals(response2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      response0.equals((Object) null);
      response0.getStatus();
      MockDate mockDate0 = new MockDate((-323), (-323), 0);
      Response response1 = response0.length((Integer) null);
      Response response2 = new Response();
      response2.equals(response1);
      response0.getLinks();
      response1.location(uRI0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      response0.equals((Object) null);
      response0.getStatus();
      MockDate mockDate0 = new MockDate((-323), (-323), 0);
      Response response1 = response0.lastModified(mockDate0);
      Response response2 = new Response();
      response2.equals(response1);
      response0.getLinks();
      response1.location(uRI0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      boolean boolean0 = response0.equals((Object) null);
      assertFalse(boolean0);
      
      response0.getStatus();
      MockDate mockDate0 = new MockDate((-323), (-323), 0);
      Response response1 = response0.lastModified(mockDate0);
      Response response2 = new Response();
      Response response3 = response2.addAllowedMethodsItem("?@#QNVF#9QBR|/E'o");
      response2.equals(response1);
      response0.getLinks();
      response1.location(uRI0);
      assertFalse(response0.equals((Object)response3));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Response response0 = new Response();
      ArrayList<Link> arrayList0 = new ArrayList<Link>();
      Response response1 = response0.links(arrayList0);
      Response response2 = response1.addAllowedMethodsItem("H2}E/bq$S+%");
      Link link0 = new Link();
      Response response3 = response2.entity(link0);
      EntityTag entityTag0 = response3.getEntityTag();
      assertNull(entityTag0);
      
      response2.getAllowedMethods();
      Integer integer0 = new Integer(0);
      response1.status(integer0);
      response1.getStatus();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Response response0 = new Response();
      MockDate mockDate0 = new MockDate(2714L);
      Response response1 = response0.lastModified(mockDate0);
      response1.getCookies();
      response0.getCookies();
      Response response2 = response1.cookies((Map<String, NewCookie>) null);
      Integer integer0 = new Integer(0);
      response0.getMetadata();
      Response response3 = response0.metadata((Map<String, List<Object>>) null);
      response2.setLength(integer0);
      response0.getLinks();
      StatusType statusType0 = new StatusType();
      response1.statusInfo(statusType0);
      Response response4 = response1.links((List<Link>) null);
      response1.status(integer0);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      List<String> list0 = xmlSuite1.getExcludedGroups();
      Response response5 = response1.putStringHeadersItem("z4?Sx#y", list0);
      response5.setStatus(integer0);
      response1.statusInfo((StatusType) null);
      response4.getLength();
      Vector<Object> vector0 = new Vector<Object>();
      xmlSuite0.onListenerElement("z4?Sx#y");
      response3.putHeadersItem("com.ibm.watson.data.client.model.Response", vector0);
      Map<String, List<String>> map0 = response1.getStringHeaders();
      response5.stringHeaders(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Response response0 = new Response();
      DynamicGraph<String> dynamicGraph0 = new DynamicGraph<String>();
      List<String> list0 = dynamicGraph0.getFreeNodes();
      Response response1 = response0.putStringHeadersItem(",1O[KvThs\"J_F", list0);
      Integer integer0 = new Integer((-583));
      Response response2 = response1.length(integer0);
      Locale locale0 = new Locale();
      Locale locale1 = locale0.country(",1O[KvThs\"J_F");
      Locale locale2 = locale1.unicodeLocaleAttributes(list0);
      Locale locale3 = locale2.displayName(",1O[KvThs\"J_F");
      Locale locale4 = locale3.script("GC2.!T=Qxb%Anq");
      locale4.setUnicodeLocaleKeys(list0);
      response2.setLanguage(locale4);
      Response response3 = response2.metadata((Map<String, List<Object>>) null);
      response3.getLength();
      response1.getStringHeaders();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Response response0 = new Response();
      StatusType statusType0 = new StatusType();
      Response response1 = response0.statusInfo(statusType0);
      MockDate mockDate0 = new MockDate((-1608), (-1608), 6, (-1608), (-1608), (-1608));
      Response response2 = response1.date(mockDate0);
      Vector<String> vector0 = new Vector<String>();
      Response response3 = response2.allowedMethods(vector0);
      Response response4 = response3.putStringHeadersItem("com.google.common.util.concurrent.ForwardingFuture", vector0);
      Response response5 = response4.location((URI) null);
      List<String> list0 = response5.getAllowedMethods();
      assertFalse(list0.contains("com.google.common.util.concurrent.ForwardingFuture"));
      
      response5.getDate();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Response response0 = new Response();
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getIncludes();
      Response response1 = response0.putStringHeadersItem("", list0);
      Response response2 = response1.entity((Object) null);
      URI uRI0 = MockURI.aFileURI;
      Response response3 = response2.location(uRI0);
      NewCookie newCookie0 = new NewCookie();
      MockDate mockDate0 = new MockDate();
      NewCookie newCookie1 = newCookie0.expiry(mockDate0);
      Boolean boolean0 = XmlSuite.DEFAULT_PRESERVE_ORDER;
      NewCookie newCookie2 = newCookie1.httpOnly(boolean0);
      Response response4 = response3.putCookiesItem("Z^jLkQMla4jB/", newCookie2);
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      Response response5 = response0.metadata(hashMap0);
      response5.getHeaders();
      response0.setMetadata((Map<String, List<Object>>) null);
      Vector<Link> vector0 = new Vector<Link>();
      Response response6 = response4.links(vector0);
      response4.getHeaders();
      response6.headers((Map<String, List<Object>>) null);
      response2.getAllowedMethods();
      response2.getLocation();
      response4.getStatus();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Response response0 = new Response();
      MediaType mediaType0 = new MediaType();
      Response response1 = response0.mediaType(mediaType0);
      MockDate mockDate0 = new MockDate(1954L);
      Response response2 = response1.lastModified(mockDate0);
      LinkedList<Link> linkedList0 = new LinkedList<Link>();
      response0.getStringHeaders();
      response2.stringHeaders((Map<String, List<String>>) null);
      URI uRI0 = MockURI.URI((String) null, (String) null, "AL{q{gQe7Ufc8@~{u");
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      response2.setLocation(uRI1);
      Response response3 = response2.links(linkedList0);
      response2.getMetadata();
      response1.setMetadata((Map<String, List<Object>>) null);
      Response response4 = response1.entityTag((EntityTag) null);
      response4.getLocation();
      response4.getLinks();
      response1.getCookies();
      response2.getLength();
      Response response5 = response3.status((Integer) null);
      response1.equals(response5);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Response response0 = new Response();
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      Response response1 = response0.headers(hashMap0);
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      Response response2 = response1.length(integer0);
      response1.getCookies();
      response2.setCookies((Map<String, NewCookie>) null);
      response2.getDate();
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      List<Link> list0 = null;
      Response response3 = response0.links((List<Link>) null);
      Response response4 = response3.entity("#^v");
      response1.setEntity(response4);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Response response5 = response3.putMetadataItem("#^v", arrayList0);
      response5.getAllowedMethods();
      DataProviderAnnotation dataProviderAnnotation0 = new DataProviderAnnotation();
      arrayList0.add((Object) dataProviderAnnotation0);
      response1.getStringHeaders();
      HashMap<String, List<Object>> hashMap1 = new HashMap<String, List<Object>>();
      arrayList0.add((Object) null);
      response5.headers(hashMap1);
      response3.hashCode();
      arrayList0.add((Object) response1);
      response3.links(list0);
      System.setCurrentTimeMillis(long0);
      MediaType mediaType0 = new MediaType();
      XmlTest xmlTest0 = new XmlTest();
      xmlTest0.getAllParameters();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Response response0 = new Response();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      Response response1 = response0.status(integer0);
      EntityTag entityTag0 = new EntityTag();
      Response response2 = response1.entityTag(entityTag0);
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      Response response3 = response2.headers(hashMap0);
      response1.setHeaders(hashMap0);
      Response response4 = response3.length(integer0);
      Response response5 = response4.metadata(hashMap0);
      entityTag0.weak((Boolean) null);
      response5.headers(hashMap0);
      Response response6 = response2.status(integer0);
      Response response7 = response2.status(integer0);
      response6.setDate((Date) null);
      response6.getCookies();
      Response response8 = response2.cookies((Map<String, NewCookie>) null);
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      Response response9 = response7.stringHeaders(hashMap1);
      response9.cookies((Map<String, NewCookie>) null);
      response6.setCookies((Map<String, NewCookie>) null);
      response6.getStatus();
      response8.getStringHeaders();
      response0.getMetadata();
      response3.cookies((Map<String, NewCookie>) null);
      try { 
        MockURI.URI("k9JcZ{u");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 5: k9JcZ{u
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Response response0 = new Response();
      MockDate mockDate0 = new MockDate((-1716), 0, (-2284));
      Response response1 = response0.date(mockDate0);
      response1.getStringHeaders();
      Response response2 = response0.stringHeaders((Map<String, List<String>>) null);
      Response response3 = response2.cookies((Map<String, NewCookie>) null);
      Integer integer0 = Integer.getInteger("Bd$PU}5", (-2284));
      Response response4 = response3.status(integer0);
      response4.setLength(integer0);
      NewCookie newCookie0 = new NewCookie();
      NewCookie newCookie1 = newCookie0.path("Bd$PU}5");
      NewCookie newCookie2 = newCookie1.comment(". #JeIb4#tz");
      Response response5 = response4.putCookiesItem("", newCookie2);
      Link link0 = new Link();
      Link link1 = link0.putParamsItem("", "");
      Link link2 = link1.type("");
      URI uRI0 = MockURI.aFileURI;
      Link link3 = link2.uri(uRI0);
      Response response6 = response5.addLinksItem(link3);
      response6.status(integer0);
      Response response7 = response2.putCookiesItem("?-", newCookie1);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      response4.putMetadataItem(":Tf]te?", arrayList0);
      response2.getLength();
      response7.getLocation();
      boolean boolean0 = response0.equals(arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Response response0 = new Response();
      Vector<Object> vector0 = new Stack<Object>();
      response0.putMetadataItem("\"`I2", vector0);
      Object object0 = new Object();
      vector0.add(object0);
      Response response1 = response0.putMetadataItem("\"`I2", vector0);
      vector0.add((Object) null);
      response0.getHeaders();
      response1.toString();
      Response response2 = response0.addAllowedMethodsItem("\"`I2");
      HashMap<String, NewCookie> hashMap0 = new HashMap<String, NewCookie>();
      response0.setCookies(hashMap0);
      ArrayList<Link> arrayList0 = new ArrayList<Link>();
      Link link0 = new Link();
      Link link1 = link0.rel("]Dhb_50;<9S`(_2,");
      Link link2 = link1.putParamsItem("", "]Dhb_50;<9S`(_2,");
      Link link3 = link2.type("    lastModified: ");
      XmlSuite xmlSuite0 = new XmlSuite();
      xmlSuite0.setThreadCount(0);
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      List<String> list0 = xmlTest0.getIncludedGroups();
      Link link4 = link3.rels(list0);
      arrayList0.add(link4);
      response1.setLinks(arrayList0);
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      Response response3 = response2.stringHeaders(hashMap1);
      response3.entity("");
      response0.hashCode();
      response1.getCookies();
      response1.toString();
      response1.getLastModified();
      Date date0 = response2.getDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Response response0 = new Response();
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      response0.headers(hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Response response1 = response0.putStringHeadersItem("nvqw54>Ub/N+[cn_Vn", (List<String>) null);
      EntityTag entityTag0 = new EntityTag();
      Boolean boolean0 = new Boolean("AwuJ`G<n}KQ*d,K+J");
      HashMap<String, NewCookie> hashMap1 = new HashMap<String, NewCookie>();
      response0.setCookies(hashMap1);
      EntityTag entityTag1 = entityTag0.weak(boolean0);
      EntityTag entityTag2 = entityTag1.value("AwuJ`G<n}KQ*d,K+J");
      Response response2 = response1.entityTag(entityTag2);
      NewCookie newCookie0 = new NewCookie();
      HashMap<String, NewCookie> hashMap2 = new HashMap<String, NewCookie>();
      Response response3 = response2.cookies(hashMap2);
      NewCookie newCookie1 = newCookie0.version((Integer) null);
      Boolean boolean1 = new Boolean(true);
      NewCookie newCookie2 = newCookie1.secure(boolean1);
      newCookie2.domain("AwuJ`G<n}KQ*d,K+J");
      NewCookie newCookie3 = newCookie2.comment("");
      Response response4 = response2.putCookiesItem("AwuJ`G<n}KQ*d,K+J", newCookie3);
      response4.getHeaders();
      Response response5 = response3.putStringHeadersItem("AwuJ`G<n}KQ*d,K+J", (List<String>) null);
      assertSame(response5, response2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Response response0 = new Response();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getLocalListeners();
      Response response1 = response0.allowedMethods(list0);
      Link link0 = new Link();
      Response response2 = response1.addLinksItem(link0);
      Vector<Object> vector0 = new Vector<Object>((int) xmlSuite0.DEFAULT_THREAD_COUNT, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      response0.getStringHeaders();
      Response response3 = response2.stringHeaders((Map<String, List<String>>) null);
      EntityTag entityTag0 = new EntityTag();
      EntityTag entityTag1 = entityTag0.weak(xmlSuite0.DEFAULT_GROUP_BY_INSTANCES);
      entityTag1.value((String) null);
      Response response4 = response3.entityTag(entityTag1);
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      Response response5 = response4.metadata(hashMap0);
      response5.getLength();
      response4.getMetadata();
      Response response6 = response1.putMetadataItem(".`$Mn5PtDE?Uou", vector0);
      assertSame(response6, response5);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Response response0 = new Response();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getLocalListeners();
      Response response1 = response0.allowedMethods(list0);
      Link link0 = new Link();
      Response response2 = response1.addLinksItem(link0);
      Vector<Object> vector0 = new Vector<Object>((int) xmlSuite0.DEFAULT_THREAD_COUNT, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      Response response3 = response2.putHeadersItem((String) null, vector0);
      response3.getStringHeaders();
      Response response4 = response3.addLinksItem(link0);
      EntityTag entityTag0 = new EntityTag();
      EntityTag entityTag1 = entityTag0.weak(xmlSuite0.DEFAULT_GROUP_BY_INSTANCES);
      EntityTag entityTag2 = entityTag1.value("");
      Response response5 = response4.entityTag(entityTag2);
      response5.stringHeaders((Map<String, List<String>>) null);
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      Integer integer0 = new Integer((int) xmlSuite0.DEFAULT_VERBOSE);
      response5.setLength(integer0);
      Response response6 = response5.metadata(hashMap0);
      response6.getLength();
      Vector<Link> vector1 = new Vector<Link>();
      Response response7 = response4.links(vector1);
      assertSame(response7, response1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Response response0 = new Response();
      Link link0 = new Link();
      link0.setRels((List<String>) null);
      Vector<String> vector0 = new Vector<String>();
      Link link1 = link0.rels(vector0);
      List<String> list0 = link1.getRels();
      Response response1 = response0.putStringHeadersItem("GVqN? ", list0);
      response0.getCookies();
      response1.setCookies((Map<String, NewCookie>) null);
      Response response2 = response1.addAllowedMethodsItem("");
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.type("cRhZ");
      MediaType mediaType2 = mediaType1.putParametersItem("", "GVqN? ");
      Boolean boolean0 = XmlSuite.DEFAULT_PRESERVE_ORDER;
      MediaType mediaType3 = mediaType2.wildcardType(boolean0);
      mediaType3.wildcardType(boolean0);
      response0.setMediaType(mediaType3);
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      NewCookie newCookie1 = newCookie0.maxAge(integer0);
      newCookie0.domain("");
      Response response3 = response1.putCookiesItem("", newCookie1);
      response3.hashCode();
      response3.getHeaders();
      response1.setHeaders((Map<String, List<Object>>) null);
      Date date0 = response2.getLastModified();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Response response0 = new Response();
      Link link0 = new Link();
      XmlTest xmlTest0 = new XmlTest();
      Map<String, String> map0 = xmlTest0.getXmlDependencyGroups();
      Link link1 = link0.params(map0);
      link0.setTitle("");
      Link link2 = link1.putParamsItem("s]Q#d$O} xsHl$rtH", "s]Q#d$O} xsHl$rtH");
      link2.getRels();
      Link link3 = link2.rels((List<String>) null);
      Response response1 = response0.addLinksItem(link3);
      StatusType statusType0 = new StatusType();
      StatusType statusType1 = statusType0.statusCode((Integer) Integer.MAX_VALUE);
      StatusFamily statusFamily0 = StatusFamily.SUCCESSFUL;
      link1.params(map0);
      StatusType statusType2 = statusType1.family(statusFamily0);
      StatusType statusType3 = statusType2.reasonPhrase("");
      StatusType statusType4 = statusType2.reasonPhrase("s]Q#d$O} xsHl$rtH");
      Response response2 = response1.statusInfo(statusType4);
      response0.setStatusInfo(statusType1);
      response1.getEntity();
      Locale locale0 = new Locale();
      Locale locale1 = locale0.unicodeLocaleAttributes((List<String>) null);
      Locale locale2 = locale1.iso3Language(" cy(L}lUe'%RlWt");
      locale2.equals(statusType3);
      Locale locale3 = locale2.displayName("NEC3,jpb_5");
      Locale locale4 = locale3.displayScript("");
      Response response3 = response2.language(locale4);
      response1.getStatusInfo();
      response2.getMetadata();
      response3.headers((Map<String, List<Object>>) null);
      response3.addLinksItem(link0);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Response response0 = new Response();
      MockDate mockDate0 = new MockDate();
      Response response1 = response0.lastModified(mockDate0);
      HashMap<String, NewCookie> hashMap0 = new HashMap<String, NewCookie>();
      Response response2 = response1.cookies(hashMap0);
      EntityTag entityTag0 = new EntityTag();
      EntityTag entityTag1 = entityTag0.value(";q3[ O86PLoZpRA\"$q_");
      Response response3 = response2.entityTag(entityTag1);
      Response response4 = response3.putMetadataItem(";q3[ O86PLoZpRA\"$q_", (List<Object>) null);
      Link link0 = new Link();
      Link link1 = link0.uriBuilder(mockDate0);
      Response response5 = response4.addLinksItem(link1);
      EntityTag entityTag2 = response5.getEntityTag();
      assertSame(entityTag0, entityTag2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Response response0 = new Response();
      Link link0 = new Link();
      XmlSuite xmlSuite0 = new XmlSuite();
      xmlSuite0.shallowCopy();
      List<String> list0 = xmlSuite0.getListeners();
      link0.rels(list0);
      Response response1 = response0.addLinksItem(link0);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Response response2 = response1.length(integer0);
      Stack<Object> stack0 = new Stack<Object>();
      XmlClass xmlClass0 = new XmlClass("", false);
      List<String> list1 = xmlClass0.getExcludedMethods();
      stack0.add((Object) list1);
      Response response3 = response2.putHeadersItem("TSi^rDw~l", stack0);
      response2.getMetadata();
      Response response4 = response3.headers((Map<String, List<Object>>) null);
      Response response5 = response4.putMetadataItem((String) null, stack0);
      response5.allowedMethods((List<String>) null);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("", list0);
      Response response6 = response2.stringHeaders(hashMap0);
      response6.getLinks();
      response5.putHeadersItem((String) null, stack0);
      Integer integer1 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      Response response7 = response1.entity(integer1);
      assertSame(response1, response7);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Response response0 = new Response();
      MockDate mockDate0 = new MockDate(3L);
      Response response1 = response0.date(mockDate0);
      Integer integer0 = new Integer((-168));
      Response response2 = response1.status(integer0);
      Locale locale0 = new Locale();
      Locale locale1 = locale0.addUnicodeLocaleKeysItem("/T8Xh2-");
      Response response3 = response2.language(locale1);
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.subtype("");
      mediaType1.type("");
      MediaType mediaType2 = mediaType1.type("");
      Response response4 = response3.mediaType(mediaType2);
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      Response response5 = response4.headers(hashMap0);
      Locale locale2 = response5.getLanguage();
      assertNull(locale2.getDisplayCountry());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Response response0 = new Response();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Response response1 = response0.allowedMethods(linkedList0);
      Link link0 = new Link();
      Link link1 = link0.uriBuilder(linkedList0);
      Response response2 = response1.entity(link1);
      URI uRI0 = MockURI.aFileURI;
      Response response3 = response2.location(uRI0);
      response1.getMetadata();
      Response response4 = response3.headers((Map<String, List<Object>>) null);
      ArrayList<Link> arrayList0 = new ArrayList<Link>();
      Response response5 = response4.links(arrayList0);
      StatusType statusType0 = new StatusType();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      StatusType statusType1 = statusType0.statusCode(integer0);
      response5.statusInfo(statusType1);
      response1.getLinks();
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("oTs2^l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Response response0 = new Response();
      Stack<Object> stack0 = new Stack<Object>();
      Response response1 = response0.putHeadersItem("~-h^", stack0);
      response1.getCookies();
      response1.setCookies((Map<String, NewCookie>) null);
      MediaType mediaType0 = new MediaType();
      Response response2 = response1.mediaType(mediaType0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Response response3 = response2.stringHeaders(hashMap0);
      Link link0 = new Link();
      Response response4 = response3.addLinksItem(link0);
      Map<String, List<Object>> map0 = response4.getHeaders();
      Response response5 = response3.metadata(map0);
      response3.putMetadataItem("~-h^", stack0);
      NewCookie newCookie0 = new NewCookie();
      Response response6 = response5.putCookiesItem("~-h^", newCookie0);
      response6.getLength();
      response5.getHeaders();
      response4.getDate();
      String string0 = "\\8-*Lj+wXh:\\pSUB>:j";
      java.util.Locale.FilteringMode locale_FilteringMode0 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) null, (Collection<String>) null, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Response response0 = new Response();
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.subtype("-O*?)Dtg`G](");
      mediaType1.subtype("-O*?)Dtg`G](");
      mediaType0.setParameters((Map<String, String>) null);
      mediaType0.putParametersItem("-O*?)Dtg`G](", "y)b${2+9sU");
      MediaType mediaType2 = mediaType1.type("-O*?)Dtg`G](");
      Response response1 = response0.mediaType(mediaType2);
      Locale locale0 = new Locale();
      Locale locale1 = locale0.displayVariant("-O*?)Dtg`G](");
      response1.language(locale1);
      MediaType mediaType3 = response0.getMediaType();
      assertSame(mediaType3, mediaType2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Response response0 = new Response();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Response response1 = response0.putMetadataItem("Jf5DC\"f", linkedList0);
      HashMap<String, NewCookie> hashMap0 = new HashMap<String, NewCookie>();
      Response response2 = response1.cookies(hashMap0);
      EntityTag entityTag0 = new EntityTag();
      Boolean boolean0 = new Boolean(false);
      EntityTag entityTag1 = entityTag0.weak(boolean0);
      Response response3 = response2.entityTag(entityTag1);
      Response response4 = response3.putHeadersItem("Jf5DC\"f", linkedList0);
      Response response5 = response2.addAllowedMethodsItem("");
      Link link0 = new Link();
      Response response6 = response5.addLinksItem(link0);
      Map<String, List<Object>> map0 = response6.getHeaders();
      Response response7 = response4.headers(map0);
      response7.setCookies(hashMap0);
      assertSame(response7, response3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Response response0 = new Response();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 0);
      Map<String, List<String>> map0 = xmlTest0.getMetaGroups();
      Response response1 = response0.stringHeaders(map0);
      Response response2 = response1.length((Integer) Integer.MAX_VALUE);
      List<XmlClass> list0 = xmlTest0.getClasses();
      xmlTest0.setXmlClasses(list0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      response0.getHeaders();
      response2.metadata((Map<String, List<Object>>) null);
      // Undeclared exception!
      try { 
        response2.putStringHeadersItem(" ,:<i%+ KT]VQo1rx-s", arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Response response0 = new Response();
      ArrayList<Link> arrayList0 = new ArrayList<Link>();
      Response response1 = response0.links(arrayList0);
      response1.getMetadata();
      Response response2 = response1.metadata((Map<String, List<Object>>) null);
      Integer integer0 = new Integer(0);
      Response response3 = response2.length(integer0);
      NewCookie newCookie0 = new NewCookie();
      NewCookie newCookie1 = newCookie0.domain("");
      NewCookie newCookie2 = newCookie1.value("null key found");
      Response response4 = response3.putCookiesItem("H,$t15vC5e=", newCookie2);
      MockDate mockDate0 = new MockDate();
      Response response5 = response4.lastModified(mockDate0);
      Locale locale0 = response5.getLanguage();
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Response response1 = response0.length(integer0);
      URI uRI0 = MockURI.aHttpURI;
      Response response2 = response1.location(uRI0);
      response0.getLinks();
      response0.getStatus();
      MockDate mockDate0 = new MockDate((-333), (-333), 0);
      Response response3 = response2.lastModified(mockDate0);
      Response response4 = response3.lastModified(mockDate0);
      assertSame(response4, response1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Response response0 = new Response();
      NewCookie newCookie0 = new NewCookie();
      NewCookie newCookie1 = newCookie0.domain("|+pA");
      NewCookie newCookie2 = newCookie1.name("reactor.core.publisher.FluxMetrics");
      NewCookie newCookie3 = newCookie2.comment("reactor.core.publisher.FluxMetrics");
      Response response1 = response0.putCookiesItem("reactor.core.publisher.FluxMetrics", newCookie3);
      Boolean boolean0 = XmlSuite.DEFAULT_JUNIT;
      String string0 = "Ps0nX^@LfeoVldVuhZ";
      response1.putCookiesItem("Ps0nX^@LfeoVldVuhZ", newCookie0);
      newCookie2.setSecure(boolean0);
      Integer integer0 = new Integer((-769));
      response1.length(integer0);
      try { 
        Integer.valueOf("reactor.core.publisher.FluxMetrics", (-769));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -769 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Response response0 = new Response();
      Response response1 = response0.putHeadersItem("", (List<Object>) null);
      Link link0 = new Link();
      Response response2 = response1.addLinksItem(link0);
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      Response response3 = response2.location(uRI1);
      LinkedList<Link> linkedList0 = new LinkedList<Link>();
      Response response4 = response3.links(linkedList0);
      Response response5 = response4.putMetadataItem("#OU", (List<Object>) null);
      response5.putHeadersItem("#OU", (List<Object>) null);
      response5.getMetadata();
      Response response6 = response1.putMetadataItem("aK]", (List<Object>) null);
      System.setCurrentTimeMillis(45L);
      Response response7 = response6.addAllowedMethodsItem("#OU");
      assertSame(response7, response6);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Response response0 = new Response();
      NewCookie newCookie0 = new NewCookie();
      Response response1 = response0.putCookiesItem("N~TuW", newCookie0);
      EntityTag entityTag0 = new EntityTag();
      Response response2 = response1.entityTag(entityTag0);
      Map<String, NewCookie> map0 = response2.getCookies();
      Response response3 = response1.cookies(map0);
      Link link0 = new Link();
      link0.getRels();
      Response response4 = response3.allowedMethods((List<String>) null);
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.subtype("8YFQ^");
      Response response5 = response4.mediaType(mediaType1);
      response5.status((Integer) null);
      try { 
        MockURI.URI("", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Response response0 = new Response();
      StatusType statusType0 = new StatusType();
      Response response1 = response0.statusInfo(statusType0);
      Response response2 = response1.entity(statusType0);
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      Response response3 = response2.metadata(hashMap0);
      MockDate mockDate0 = new MockDate((-956), (-1604), 0);
      Response response4 = response3.date(mockDate0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      hashMap0.put("N_q2\"0e&Z9o +zYl?", arrayList0);
      ArrayList<Link> arrayList1 = new ArrayList<Link>();
      response4.setLinks(arrayList1);
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      Integer.sum(2367, (-1604));
      response4.status(integer0);
      MockDate mockDate1 = new MockDate(2367, 4, (-1604), 0, 0);
      mockDate0.after(mockDate1);
      HashMap<String, NewCookie> hashMap1 = new HashMap<String, NewCookie>();
      Response response5 = response4.cookies(hashMap1);
      response5.getLocation();
      response5.hashCode();
      Response response6 = response4.lastModified(mockDate0);
      response6.getStatus();
      MediaType mediaType0 = response5.getMediaType();
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Response response0 = new Response();
      Link link0 = new Link();
      Response response1 = response0.addLinksItem(link0);
      Response response2 = response1.addAllowedMethodsItem("");
      EntityTag entityTag0 = new EntityTag();
      EntityTag entityTag1 = entityTag0.value("");
      Response response3 = response2.entityTag(entityTag1);
      Integer integer0 = new Integer(15);
      Response response4 = response3.status(integer0);
      List<String> list0 = response3.getAllowedMethods();
      Response response5 = response4.allowedMethods(list0);
      Response response6 = response5.status(integer0);
      assertSame(response6, response4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Response response0 = new Response();
      EntityTag entityTag0 = new EntityTag();
      Response response1 = response0.entityTag(entityTag0);
      MockDate mockDate0 = new MockDate(2314, 12, 404, 2314, 2, 0);
      Response response2 = response1.lastModified(mockDate0);
      Response response3 = response2.status((Integer) null);
      response0.getHeaders();
      Response response4 = response3.metadata((Map<String, List<Object>>) null);
      Response response5 = response4.addLinksItem((Link) null);
      URI uRI0 = response5.getLocation();
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Response response0 = new Response();
      response0.getMetadata();
      Response response1 = response0.metadata((Map<String, List<Object>>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Response response2 = response1.length(integer0);
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getIncludes();
      EntityTag entityTag0 = new EntityTag();
      Response response3 = response2.entityTag(entityTag0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale locale0 = new Locale();
      Locale locale1 = locale0.displayCountry((String) null);
      Locale locale2 = locale1.unicodeLocaleAttributes(list0);
      Locale locale3 = locale2.addUnicodeLocaleAttributesItem((String) null);
      Locale locale4 = locale3.script((String) null);
      response2.setLanguage(locale4);
      response3.setStringHeaders(hashMap0);
      Response response4 = response2.putStringHeadersItem((String) null, list0);
      Response response5 = response4.addAllowedMethodsItem((String) null);
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.parameters((Map<String, String>) null);
      Response response6 = response5.mediaType(mediaType1);
      boolean boolean0 = response6.equals(response2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Response response0 = new Response();
      Response response1 = response0.addAllowedMethodsItem("    entity: ");
      MockDate mockDate0 = new MockDate((-1391), (-1391), (-1391));
      Response response2 = response1.date(mockDate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Response response3 = response2.putMetadataItem("    entity: ", linkedList0);
      response2.getAllowedMethods();
      Response response4 = response1.lastModified(mockDate0);
      response4.getHeaders();
      response3.setMetadata((Map<String, List<Object>>) null);
      response1.hashCode();
      Vector<Link> vector0 = new Vector<Link>();
      response3.setLinks(vector0);
      assertNull(response3.getLength());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Response response0 = new Response();
      Response response1 = response0.links((List<Link>) null);
      Class<String> class0 = String.class;
      XmlClass xmlClass0 = new XmlClass(class0);
      List<String> list0 = xmlClass0.getExcludedMethods();
      Response response2 = response1.allowedMethods(list0);
      HashMap<String, NewCookie> hashMap0 = new HashMap<String, NewCookie>();
      Response response3 = response2.cookies(hashMap0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Response response4 = response3.putMetadataItem("Mlv!", arrayList0);
      Link link0 = new Link();
      Link link1 = link0.type("Mlv!");
      Link link2 = link1.rel("Mlv!");
      Response response5 = response4.addLinksItem(link2);
      EntityTag entityTag0 = response5.getEntityTag();
      assertNull(entityTag0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Response response0 = new Response();
      Response response1 = response0.statusInfo((StatusType) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Response response2 = response1.status(integer0);
      Response response3 = response2.location((URI) null);
      NewCookie newCookie0 = new NewCookie();
      Boolean boolean0 = new Boolean(false);
      NewCookie newCookie1 = newCookie0.httpOnly(boolean0);
      NewCookie newCookie2 = newCookie1.domain("qH=.~H6e");
      Response response4 = response3.putCookiesItem("qH=.~H6e", newCookie2);
      Response response5 = response4.length(integer0);
      response5.setLocation((URI) null);
      assertSame(response5, response2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Response response0 = new Response();
      response0.equals((Object) null);
      MediaType mediaType0 = response0.getMediaType();
      assertNull(mediaType0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Response response0 = new Response();
      response0.getHeaders();
      response0.getLength();
      List<Link> list0 = response0.getLinks();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Response response0 = new Response();
      Response response1 = response0.addAllowedMethodsItem("\" header");
      StatusType statusType0 = new StatusType();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      StatusType statusType1 = statusType0.statusCode(integer0);
      StatusType statusType2 = statusType1.reasonPhrase("com.ibm.watson.data.client.model.Response");
      response1.setStatusInfo(statusType2);
      assertSame(response0, response1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Response response0 = new Response();
      MediaType mediaType0 = new MediaType();
      MediaType mediaType1 = mediaType0.putParametersItem((String) null, (String) null);
      EntityTag entityTag0 = new EntityTag();
      Boolean boolean0 = XmlSuite.DEFAULT_JUNIT;
      entityTag0.setValue("org.testng.IDynamicGraph$Status");
      mediaType1.toString();
      Boolean.logicalOr(true, true);
      EntityTag entityTag1 = entityTag0.weak(boolean0);
      response0.setEntityTag(entityTag1);
      MediaType mediaType2 = mediaType1.subtype("");
      Boolean boolean1 = XmlSuite.DEFAULT_MIXED;
      LinkedList<Link> linkedList0 = new LinkedList<Link>();
      response0.setLinks(linkedList0);
      mediaType2.putParametersItem("", "");
      MediaType mediaType3 = mediaType2.wildcardType(boolean1);
      response0.setMediaType(mediaType3);
      response0.setMediaType(mediaType2);
      response0.getHeaders();
      Response response1 = response0.metadata((Map<String, List<Object>>) null);
      Vector<Object> vector0 = new Vector<Object>();
      Integer integer0 = new Integer((-979));
      Response response2 = response0.entity(integer0);
      vector0.add((Object) response2);
      Response response3 = response1.putMetadataItem((String) null, vector0);
      response3.getEntity();
      NewCookie newCookie0 = new NewCookie();
      NewCookie newCookie1 = newCookie0.maxAge(integer0);
      NewCookie newCookie2 = newCookie1.domain("");
      NewCookie newCookie3 = newCookie2.path("oEric:3MkP]H#&vk4O");
      Boolean boolean2 = XmlSuite.DEFAULT_GROUP_BY_INSTANCES;
      NewCookie newCookie4 = newCookie3.httpOnly(boolean2);
      Response response4 = response1.putCookiesItem((String) null, newCookie4);
      assertSame(response4, response0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Response response0 = new Response();
      Vector<String> vector0 = new Vector<String>();
      Response response1 = response0.putStringHeadersItem("}Vk", vector0);
      Response response2 = response1.putHeadersItem("}Vk", (List<Object>) null);
      Map<String, List<String>> map0 = response1.getStringHeaders();
      Response response3 = response2.stringHeaders(map0);
      HashMap<String, NewCookie> hashMap0 = new HashMap<String, NewCookie>();
      Response response4 = response3.cookies(hashMap0);
      MediaType mediaType0 = new MediaType();
      mediaType0.getParameters();
      MediaType mediaType1 = mediaType0.parameters((Map<String, String>) null);
      Boolean boolean0 = XmlSuite.DEFAULT_SKIP_FAILED_INVOCATION_COUNTS;
      MediaType mediaType2 = mediaType1.wildcardSubtype(boolean0);
      MediaType mediaType3 = mediaType2.putParametersItem("}Vk", "}Vk");
      Response response5 = response4.mediaType(mediaType3);
      response5.getMetadata();
      Response response6 = response5.metadata((Map<String, List<Object>>) null);
      assertSame(response6, response0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Response response0 = new Response();
      DynamicGraph<String> dynamicGraph0 = new DynamicGraph<String>();
      List<String> list0 = dynamicGraph0.getFreeNodes();
      Response response1 = response0.allowedMethods(list0);
      Response response2 = response1.putStringHeadersItem("reactor.core.publisher.OnNextFailureStrategy$ResumeDropStrategy", list0);
      Response response3 = response2.addAllowedMethodsItem("reactor.core.publisher.OnNextFailureStrategy$ResumeDropStrategy");
      Response response4 = response3.metadata((Map<String, List<Object>>) null);
      Locale locale0 = new Locale();
      Locale locale1 = locale0.iso3Language("reactor.core.publisher.OnNextFailureStrategy$ResumeDropStrategy");
      response1.language(locale1);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      List<String> list1 = xmlSuite1.getSuiteFiles();
      response4.allowedMethods(list1);
      Response response5 = response4.length((Integer) null);
      Object object0 = response5.getEntity();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Response response0 = new Response();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getLocalListeners();
      Response response1 = response0.allowedMethods(list0);
      Link link0 = new Link();
      Response response2 = response1.addLinksItem(link0);
      Vector<Object> vector0 = new Vector<Object>((int) xmlSuite0.DEFAULT_THREAD_COUNT, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      Response response3 = response2.putHeadersItem((String) null, vector0);
      response3.getStringHeaders();
      Response response4 = response2.stringHeaders((Map<String, List<String>>) null);
      EntityTag entityTag0 = new EntityTag();
      EntityTag entityTag1 = entityTag0.weak(xmlSuite0.DEFAULT_GROUP_BY_INSTANCES);
      EntityTag entityTag2 = entityTag1.value("");
      Response response5 = response4.entityTag(entityTag2);
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      Response response6 = response5.metadata(hashMap0);
      Integer integer0 = response6.getLength();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Response response0 = new Response();
      Locale locale0 = new Locale();
      Response response1 = response0.language(locale0);
      Response response2 = response1.stringHeaders((Map<String, List<String>>) null);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      Response response3 = response2.location(uRI1);
      Integer integer0 = Integer.getInteger("", 668);
      Response response4 = response3.status(integer0);
      HashMap<String, NewCookie> hashMap0 = new HashMap<String, NewCookie>();
      Response response5 = response4.cookies(hashMap0);
      Integer integer1 = XmlSuite.DEFAULT_VERBOSE;
      response5.setLength(integer1);
      assertSame(response3, response5);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Response response0 = new Response();
      response0.getHeaders();
      Response response1 = response0.headers((Map<String, List<Object>>) null);
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      Response response2 = response1.status(integer0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Response response3 = response2.putMetadataItem("    mediaType: ", arrayList0);
      Response response4 = response3.putHeadersItem((String) null, arrayList0);
      response2.getCookies();
      Response response5 = response4.cookies((Map<String, NewCookie>) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      response5.setAllowedMethods(linkedList0);
      assertNull(response5.getLength());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Response response0 = new Response();
      Response response1 = response0.location((URI) null);
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Response response2 = response1.date(mockDate0);
      Integer integer0 = new Integer(0);
      Response response3 = response2.status(integer0);
      response2.setLastModified(mockDate0);
      NewCookie newCookie0 = new NewCookie();
      Boolean boolean0 = new Boolean("");
      NewCookie newCookie1 = newCookie0.secure(boolean0);
      NewCookie newCookie2 = newCookie1.path("");
      NewCookie newCookie3 = newCookie2.httpOnly(boolean0);
      newCookie0.expiry(mockDate0);
      Response response4 = response3.putCookiesItem("", newCookie3);
      EntityTag entityTag0 = new EntityTag();
      entityTag0.setValue("");
      Response response5 = response4.entityTag(entityTag0);
      response5.toString();
      Date date0 = response4.getLastModified();
      response3.length(integer0);
      response1.setLastModified(date0);
      assertSame(mockDate0, date0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Response response0 = new Response();
      Locale locale0 = new Locale();
      Locale locale1 = locale0.country("io.netty.machineId");
      Locale locale2 = locale1.displayCountry("com.ibm.watson.data.client.model.Response");
      locale2.setLanguage("Unable to parse port");
      response0.setLanguage(locale2);
      response0.equals(locale0);
      Map<String, NewCookie> map0 = response0.getCookies();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Response response0 = new Response();
      Integer integer0 = new Integer(0);
      Response response1 = response0.length(integer0);
      response1.setStringHeaders((Map<String, List<String>>) null);
      response0.getLinks();
      Response response2 = response0.links((List<Link>) null);
      Integer integer1 = new Integer(28);
      Response response3 = response2.length(integer1);
      Integer integer2 = new Integer(28);
      response3.status(integer2);
      response2.getDate();
      Integer.toUnsignedLong(0);
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        MockURI.resolve((URI) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Response response0 = new Response();
      Link link0 = new Link();
      Response response1 = response0.addLinksItem(link0);
      StatusType statusType0 = new StatusType();
      Response response2 = response1.statusInfo(statusType0);
      Response response3 = response2.entity("");
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      Response response4 = response3.length(integer0);
      response2.getAllowedMethods();
      Response response5 = response4.allowedMethods((List<String>) null);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Response response6 = response5.stringHeaders(hashMap0);
      assertSame(response6, response4);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Response response0 = new Response();
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      Response response1 = response0.headers(hashMap0);
      Response response2 = response1.metadata(hashMap0);
      Response response3 = response2.addAllowedMethodsItem("");
      Response response4 = response3.length((Integer) null);
      Link link0 = new Link();
      Response response5 = response4.addLinksItem(link0);
      MockDate mockDate0 = new MockDate(2188L);
      response5.setDate(mockDate0);
      assertSame(response3, response5);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Response response0 = new Response();
      Response response1 = response0.putCookiesItem("SL", (NewCookie) null);
      LinkedList<Link> linkedList0 = new LinkedList<Link>();
      Response response2 = response1.links(linkedList0);
      Link link0 = new Link();
      URI uRI0 = MockURI.aFileURI;
      Link link1 = link0.uri(uRI0);
      Response response3 = response2.addLinksItem(link1);
      Locale locale0 = new Locale();
      Locale locale1 = locale0.variant("    entity: ");
      Stack<String> stack0 = new Stack<String>();
      Locale locale2 = locale1.unicodeLocaleAttributes(stack0);
      Response response4 = response3.language(locale2);
      HashMap<String, NewCookie> hashMap0 = new HashMap<String, NewCookie>();
      Response response5 = response4.cookies(hashMap0);
      response5.hashCode();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Response response0 = new Response();
      response0.getHeaders();
      Response response1 = response0.headers((Map<String, List<Object>>) null);
      StatusType statusType0 = new StatusType();
      Response response2 = response1.statusInfo(statusType0);
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      Response response3 = response2.status(integer0);
      LinkedList<Link> linkedList0 = new LinkedList<Link>();
      Response response4 = response3.links(linkedList0);
      Response response5 = response4.putCookiesItem("    lastModified: ", (NewCookie) null);
      response5.setLinks(linkedList0);
      assertSame(response4, response5);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Response response0 = new Response();
      Locale locale0 = new Locale();
      Response response1 = response0.language(locale0);
      Response response2 = response1.entity(locale0);
      Vector<Link> vector0 = new Vector<Link>();
      Response response3 = response2.links(vector0);
      Response response4 = response3.putMetadataItem("", (List<Object>) null);
      Integer integer0 = new Integer((-3396));
      Response response5 = response4.status(integer0);
      response5.getStatus();
      response0.setEntityTag((EntityTag) null);
      assertSame(response0, response5);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Response response0 = new Response();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Response response1 = response0.putMetadataItem((String) null, arrayList0);
      Map<String, List<Object>> map0 = response0.getMetadata();
      response1.setHeaders(map0);
      HashMap<String, NewCookie> hashMap0 = new HashMap<String, NewCookie>();
      response0.setCookies(hashMap0);
      Map<String, List<String>> map1 = response0.getStringHeaders();
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Response response0 = new Response();
      MediaType mediaType0 = new MediaType();
      Response response1 = response0.mediaType(mediaType0);
      MockDate mockDate0 = new MockDate(0, 48, 0, 0, (-644), 48);
      Response response2 = response1.lastModified(mockDate0);
      Response response3 = response2.addAllowedMethodsItem((String) null);
      StatusType statusType0 = new StatusType();
      Response response4 = response3.statusInfo(statusType0);
      EntityTag entityTag0 = new EntityTag();
      Response response5 = response4.entityTag(entityTag0);
      Map<String, NewCookie> map0 = response5.getCookies();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Response response0 = new Response();
      Locale locale0 = new Locale();
      Response response1 = response0.language(locale0);
      response1.getMetadata();
      Response response2 = response1.metadata((Map<String, List<Object>>) null);
      response2.headers((Map<String, List<Object>>) null);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Response response0 = new Response();
      Link link0 = new Link();
      Response response1 = response0.addLinksItem(link0);
      Locale locale0 = new Locale();
      Locale locale1 = locale0.displayCountry("");
      Locale locale2 = locale1.variant("");
      Locale locale3 = locale2.displayVariant("BD'e'");
      Response response2 = response1.language(locale3);
      response2.setEntity(link0);
      assertSame(response0, response2);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Response response0 = new Response();
      MockDate mockDate0 = new MockDate();
      Response response1 = response0.date(mockDate0);
      EntityTag entityTag0 = new EntityTag();
      Response response2 = response1.entityTag(entityTag0);
      Response response3 = response2.cookies((Map<String, NewCookie>) null);
      Integer integer0 = new Integer(0);
      Response response4 = response3.status(integer0);
      Response response5 = response4.lastModified(mockDate0);
      response5.setStatus((Integer) null);
      assertNull(response5.getStatus());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Response response0 = new Response();
      Response response1 = response0.entityTag((EntityTag) null);
      response1.entity((Object) null);
      response1.setMediaType((MediaType) null);
      response1.getStringHeaders();
      response1.entityTag((EntityTag) null);
      Response response2 = response0.stringHeaders((Map<String, List<String>>) null);
      assertNull(response2.getStatus());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Response response0 = new Response();
      Locale locale0 = new Locale();
      Locale locale1 = locale0.displayCountry("");
      Locale locale2 = locale1.variant("");
      Locale locale3 = locale2.displayVariant("BD'e'");
      Response response1 = response0.language(locale3);
      assertNull(response1.getLength());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Response response0 = new Response();
      Stack<Object> stack0 = new Stack<Object>();
      response0.putMetadataItem("\"`I2", stack0);
      Object object0 = new Object();
      stack0.add(object0);
      Response response1 = response0.putMetadataItem("\"`I2", stack0);
      stack0.add((Object) null);
      response0.getHeaders();
      response1.toString();
      Response response2 = response0.addAllowedMethodsItem("\"`I2");
      HashMap<String, NewCookie> hashMap0 = new HashMap<String, NewCookie>();
      response0.setCookies(hashMap0);
      ArrayList<Link> arrayList0 = new ArrayList<Link>();
      Link link0 = new Link();
      Link link1 = link0.rel("]Dhb_50;<9S`(_2,");
      Link link2 = link1.putParamsItem("", "]Dhb_50;<9S`(_2,");
      Link link3 = link2.type("    lastModified: ");
      XmlSuite xmlSuite0 = new XmlSuite();
      xmlSuite0.setThreadCount(0);
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      List<String> list0 = xmlTest0.getIncludedGroups();
      Link link4 = link3.rels(list0);
      arrayList0.add(link4);
      response1.setLinks(arrayList0);
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      Response response3 = response2.stringHeaders(hashMap1);
      response3.addLinksItem(link3);
      response3.entity("");
      response0.hashCode();
      response1.getCookies();
      response1.toString();
      response1.getLastModified();
      response2.getDate();
      URI uRI0 = response2.getLocation();
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Response response0 = new Response();
      Configuration configuration0 = new Configuration();
      XmlSuite xmlSuite0 = new XmlSuite();
      ITestRunnerFactory iTestRunnerFactory0 = mock(ITestRunnerFactory.class, new ViolatedAssumptionAnswer());
      Comparator<ITestNGMethod> comparator0 = (Comparator<ITestNGMethod>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SuiteRunner suiteRunner0 = new SuiteRunner(configuration0, xmlSuite0, "JxX2.u$Tn*>", iTestRunnerFactory0, true, comparator0);
      suiteRunner0.getExcludedMethods();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      LinkedTransferQueue<IInvokedMethodListener> linkedTransferQueue0 = new LinkedTransferQueue<IInvokedMethodListener>();
      Vector<IClassListener> vector0 = new Vector<IClassListener>();
      TestRunner testRunner0 = new TestRunner(configuration0, suiteRunner0, xmlTest0, (boolean) xmlSuite0.DEFAULT_GROUP_BY_INSTANCES, linkedTransferQueue0, vector0);
      testRunner0.setVerbose(Integer.MAX_VALUE);
      Date date0 = testRunner0.getStartDate();
      response0.setDate(date0);
      ArrayList<Link> arrayList0 = new ArrayList<Link>();
      System.setCurrentTimeMillis(0L);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      response0.length(integer0);
      response0.getCookies();
      try { 
        MockURI.URI("JxX2.u$Tn*>", "JxX2.u$Tn*>", "reactor.core.publisher.FluxLift", "reactor.core.publisher.FluxLift", "/\"Q}7%lgklX(kKI");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: JxX2.u$Tn*>://JxX2.u$Tn*%3Ereactor.core.publisher.FluxLift?reactor.core.publisher.FluxLift#/%22Q%7D7%25lgklX(kKI
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      boolean boolean0 = response0.equals((Object) null);
      assertFalse(boolean0);
      
      response0.getStatus();
      MockDate mockDate0 = new MockDate((-323), (-323), 0);
      Response response1 = response0.length(integer0);
      response1.putMetadataItem("H6!q%/.R,)N<'sq77Pa", (List<Object>) null);
      Response response2 = new Response();
      response2.addAllowedMethodsItem("?@#QNVF#9QBR|/E'o");
      response2.equals(response1);
      response0.getLinks();
      response1.location(uRI0);
      assertFalse(response0.equals((Object)response2));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Response response0 = new Response();
      StatusType statusType0 = new StatusType();
      Response response1 = response0.statusInfo(statusType0);
      Response response2 = response1.entity(statusType0);
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      Response response3 = response2.metadata(hashMap0);
      MockDate mockDate0 = new MockDate((-956), (-1604), 14);
      Response response4 = response3.date(mockDate0);
      ArrayList<Link> arrayList0 = new ArrayList<Link>();
      response4.setLinks(arrayList0);
      Integer.sum(2367, (-1604));
      MockDate mockDate1 = new MockDate(2367, 4, (-1604), 0, 14);
      mockDate0.after(mockDate1);
      HashMap<String, NewCookie> hashMap1 = new HashMap<String, NewCookie>();
      Response response5 = response4.cookies(hashMap1);
      response5.hashCode();
      response5.hashCode();
      response4.lastModified(mockDate0);
      response5.getMediaType();
      URI uRI0 = response2.getLocation();
      assertNull(uRI0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Response response0 = new Response();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Response response1 = response0.putHeadersItem((String) null, linkedList0);
      Link link0 = new Link();
      Response response2 = response1.addLinksItem(link0);
      Stack<String> stack0 = new Stack<String>();
      Response response3 = response2.allowedMethods(stack0);
      response3.addAllowedMethodsItem((String) null);
      MediaType mediaType0 = new MediaType();
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      MockDate mockDate0 = new MockDate((-323), (-323), 0);
      Response response1 = response0.lastModified(mockDate0);
      Response response2 = new Response();
      response0.allowedMethods((List<String>) null);
      boolean boolean0 = response2.equals(response1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatusInfo();
      response0.setAllowedMethods((List<String>) null);
      URI uRI0 = MockURI.aHttpURI;
      response0.getLinks();
      response0.getStatus();
      MockDate mockDate0 = new MockDate((-323), (-323), (-323));
      Response response1 = new Response();
      response1.equals(response0);
      response0.getLinks();
      assertTrue(response0.equals((Object)response1));
      
      Response response2 = response0.location(uRI0);
      assertFalse(response2.equals((Object)response1));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Response response0 = new Response();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      URI uRI0 = MockURI.aHttpURI;
      response0.getStatus();
      Response response1 = response0.length((Integer) null);
      Response response2 = new Response();
      response2.equals(response1);
      assertTrue(response1.equals((Object)response2));
      
      Response response3 = response1.location(uRI0);
      assertFalse(response3.equals((Object)response2));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Response response0 = new Response();
      Locale locale0 = new Locale();
      response0.language(locale0);
      Link link0 = new Link();
      Link link1 = link0.title("Y");
      Response response1 = response0.addLinksItem(link1);
      EntityTag entityTag0 = new EntityTag();
      Boolean boolean0 = XmlSuite.DEFAULT_SKIP_FAILED_INVOCATION_COUNTS;
      URI uRI0 = MockURI.aHttpURI;
      MockDate mockDate0 = new MockDate(0, 0, 834, 4091, 0);
      StatusType statusType0 = new StatusType();
      StatusType statusType1 = statusType0.reasonPhrase("    headers: ");
      Integer integer0 = new Integer(834);
      StatusType statusType2 = statusType1.statusCode(integer0);
      response0.setStatusInfo(statusType2);
      Integer integer1 = XmlSuite.DEFAULT_THREAD_COUNT;
      Response response2 = response1.length(integer1);
      assertSame(response2, response0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Response response0 = new Response();
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      Response response1 = new Response();
      assertTrue(response1.equals((Object)response0));
      
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      Response response2 = response1.length(integer0);
      response1.getCookies();
      response2.setCookies((Map<String, NewCookie>) null);
      response2.getDate();
      System.setCurrentTimeMillis(0L);
      Response response3 = response0.links((List<Link>) null);
      Response response4 = response3.entity("#^v");
      response1.setEntity(response4);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Response response5 = response3.putMetadataItem("#^v", arrayList0);
      response5.getAllowedMethods();
      boolean boolean0 = response2.equals(response3);
      assertFalse(boolean0);
      
      response1.getStringHeaders();
      response5.headers(hashMap0);
      arrayList0.add((Object) response1);
      response3.links((List<Link>) null);
      System.setCurrentTimeMillis(0L);
      MediaType mediaType0 = new MediaType();
      response5.putMetadataItem("we/4u.", arrayList0);
      assertFalse(response0.equals((Object)response2));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Response response0 = new Response();
      MediaType mediaType0 = new MediaType();
      Response response1 = response0.mediaType(mediaType0);
      MockDate mockDate0 = new MockDate(1954L);
      Response response2 = response1.lastModified(mockDate0);
      LinkedList<Link> linkedList0 = new LinkedList<Link>();
      URI uRI0 = MockURI.URI((String) null, (String) null, "AL{q{gQe7Ufc8@~{u");
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      response2.setLocation(uRI1);
      Response response3 = response2.links(linkedList0);
      Response response4 = response3.location(uRI0);
      response2.getMetadata();
      response1.setMetadata((Map<String, List<Object>>) null);
      Response response5 = response4.entityTag((EntityTag) null);
      response5.getLocation();
      response5.getLinks();
      response1.getCookies();
      Integer integer0 = response4.getLength();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Response response0 = new Response();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getLocalListeners();
      Response response1 = response0.putStringHeadersItem("", list0);
      ArrayList<Link> arrayList0 = new ArrayList<Link>();
      Response response2 = response1.links(arrayList0);
      MockDate mockDate0 = new MockDate((int) xmlSuite0.DEFAULT_THREAD_COUNT, (int) xmlSuite0.DEFAULT_VERBOSE, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      Response response3 = response2.lastModified(mockDate0);
      NewCookie newCookie0 = new NewCookie();
      newCookie0.setMaxAge((Integer) null);
      NewCookie newCookie1 = newCookie0.path("");
      NewCookie newCookie2 = newCookie1.domain("");
      Response response4 = response3.putCookiesItem("", newCookie2);
      Locale locale0 = new Locale();
      mockDate0.toInstant();
      Locale locale1 = locale0.addExtensionKeysItem("");
      locale1.variant("");
      Response response5 = response4.putCookiesItem("", newCookie1);
      response5.lastModified(mockDate0);
      HashMap<String, NewCookie> hashMap0 = new HashMap<String, NewCookie>();
      HashMap<String, NewCookie> hashMap1 = new HashMap<String, NewCookie>(hashMap0);
      DataProviderAnnotation dataProviderAnnotation0 = new DataProviderAnnotation();
      response3.equals(dataProviderAnnotation0);
      Boolean boolean0 = new Boolean("");
      xmlSuite0.getAllParameters();
      Map<String, NewCookie> map0 = response0.getCookies();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Response response0 = new Response();
      StatusType statusType0 = new StatusType();
      NewCookie newCookie0 = new NewCookie();
      Response response1 = response0.statusInfo(statusType0);
      Response response2 = response1.links((List<Link>) null);
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      Response response3 = response2.status(integer0);
      Link link0 = new Link();
      response1.toString();
      Link link1 = link0.addRelsItem("$f3");
      link1.uri((URI) null);
      Link link2 = link1.type(">x*wENf=zLdd.R");
      response2.setLinks((List<Link>) null);
      response0.hashCode();
      Link link3 = link2.putParamsItem("TS3c1WWWI}8M7Zt4,Q", "rWI(C_;D:ZXgC([");
      Response response4 = response3.addLinksItem(link3);
      MockDate mockDate0 = new MockDate();
      Response response5 = response0.addLinksItem(link3);
      Instant instant0 = mockDate0.toInstant();
      Date date0 = Date.from(instant0);
      response4.setLastModified(date0);
      response3.getStringHeaders();
      response1.setStringHeaders((Map<String, List<String>>) null);
      HashMap<String, List<Object>> hashMap0 = new HashMap<String, List<Object>>();
      response3.setHeaders(hashMap0);
      response2.getAllowedMethods();
      response4.getLanguage();
      response3.setLanguage((Locale) null);
      response0.putHeadersItem("$f3", (List<Object>) null);
      response1.setLinks((List<Link>) null);
      HashMap<String, NewCookie> hashMap1 = new HashMap<String, NewCookie>();
      response5.cookies(hashMap1);
      Response response6 = response2.stringHeaders((Map<String, List<String>>) null);
      assertSame(response0, response6);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Response response0 = new Response();
      response0.getMetadata();
      Response response1 = response0.metadata((Map<String, List<Object>>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Response response2 = response1.length(integer0);
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getIncludes();
      EntityTag entityTag0 = new EntityTag();
      Response response3 = response2.entityTag(entityTag0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      response3.setStringHeaders(hashMap0);
      Response response4 = response2.putStringHeadersItem((String) null, list0);
      Response response5 = response4.addAllowedMethodsItem((String) null);
      MediaType mediaType0 = new MediaType();
      Response response6 = response5.mediaType(mediaType0);
      boolean boolean0 = response6.equals(response2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Response response0 = new Response();
      EntityTag entityTag0 = new EntityTag();
      Response response1 = response0.entityTag(entityTag0);
      Response response2 = response1.entity(entityTag0);
      response1.getHeaders();
      Response response3 = response2.metadata((Map<String, List<Object>>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Response response4 = response3.status(integer0);
      Locale locale0 = new Locale();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      response2.setStatus(integer0);
      response3.setLength(integer0);
      StatusType statusType0 = new StatusType();
      response4.setHeaders((Map<String, List<Object>>) null);
      response4.setCookies((Map<String, NewCookie>) null);
      Response response5 = response0.addAllowedMethodsItem("fM!v*B");
      assertSame(response0, response5);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Response response0 = new Response();
      MediaType mediaType0 = new MediaType();
      EntityTag entityTag0 = new EntityTag();
      Boolean boolean0 = XmlSuite.DEFAULT_JUNIT;
      entityTag0.setValue("org.testng.IDynamicGraph$Status");
      Boolean.logicalOr(true, true);
      EntityTag entityTag1 = entityTag0.weak(boolean0);
      response0.setEntityTag(entityTag1);
      Boolean boolean1 = XmlSuite.DEFAULT_JUNIT;
      mediaType0.putParametersItem("", "");
      MediaType mediaType1 = mediaType0.wildcardType(boolean1);
      response0.setMediaType(mediaType1);
      response0.getMetadata();
      Response response1 = new Response();
      Vector<Object> vector0 = new Vector<Object>();
      response0.getEntity();
      NewCookie newCookie0 = new NewCookie();
      Boolean boolean2 = XmlSuite.DEFAULT_GROUP_BY_INSTANCES;
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      XmlSuite xmlSuite0 = new XmlSuite();
      System.setCurrentTimeMillis((long) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      assertNull(xmlSuite0.getTimeOut());
  }
}
