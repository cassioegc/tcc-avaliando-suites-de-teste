/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:17:29 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.CommitInfo;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CommitInfo_ESTest extends CommitInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      Long long0 = new Long(0L);
      commitInfo0.setPreviousRevision(long0);
      Long long1 = commitInfo0.getPreviousRevision();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      Long long0 = new Long((-480L));
      commitInfo0.setPreviousRevision(long0);
      Long long1 = commitInfo0.getPreviousRevision();
      assertEquals((-480L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      Long long0 = new Long(1183L);
      commitInfo0.previousRevision(long0);
      Long long1 = commitInfo0.getPreviousRevision();
      assertEquals(1183L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      CommitInfo commitInfo1 = commitInfo0.commitMessage("The wildcard must not be null");
      String string0 = commitInfo1.getCommitMessage();
      assertEquals("The wildcard must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      CommitInfo commitInfo1 = commitInfo0.commitMessage("");
      String string0 = commitInfo1.getCommitMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      Long long0 = new Long(0);
      CommitInfo commitInfo1 = new CommitInfo();
      assertTrue(commitInfo1.equals((Object)commitInfo0));
      
      commitInfo1.previousRevision(long0);
      boolean boolean0 = commitInfo0.equals(commitInfo1);
      assertFalse(commitInfo1.equals((Object)commitInfo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      CommitInfo commitInfo1 = new CommitInfo();
      assertTrue(commitInfo1.equals((Object)commitInfo0));
      
      commitInfo0.commitMessage("    commitMessage: ");
      boolean boolean0 = commitInfo1.equals(commitInfo0);
      assertFalse(commitInfo1.equals((Object)commitInfo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      MockDate mockDate0 = new MockDate();
      CommitInfo commitInfo1 = new CommitInfo();
      CommitInfo commitInfo2 = commitInfo0.committedAt(mockDate0);
      assertFalse(commitInfo2.equals((Object)commitInfo1));
      
      commitInfo1.setCommittedAt(mockDate0);
      boolean boolean0 = commitInfo1.equals(commitInfo2);
      assertTrue(commitInfo2.equals((Object)commitInfo1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      Object object0 = new Object();
      boolean boolean0 = commitInfo0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      boolean boolean0 = commitInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      boolean boolean0 = commitInfo0.equals(commitInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      MockDate mockDate0 = new MockDate();
      CommitInfo commitInfo1 = new CommitInfo();
      assertTrue(commitInfo1.equals((Object)commitInfo0));
      
      commitInfo0.committedAt(mockDate0);
      boolean boolean0 = commitInfo0.equals(commitInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      commitInfo0.setCommitMessage("\n    ");
      assertEquals("\n    ", commitInfo0.getCommitMessage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      commitInfo0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      Long long0 = commitInfo0.getPreviousRevision();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      MockDate mockDate0 = new MockDate();
      commitInfo0.setCommittedAt(mockDate0);
      Date date0 = commitInfo0.getCommittedAt();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      String string0 = commitInfo0.getCommitMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      MockDate mockDate0 = new MockDate();
      CommitInfo commitInfo1 = commitInfo0.committedAt(mockDate0);
      String string0 = commitInfo1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CommitInfo commitInfo0 = new CommitInfo();
      Date date0 = commitInfo0.getCommittedAt();
      assertNull(date0);
  }
}
