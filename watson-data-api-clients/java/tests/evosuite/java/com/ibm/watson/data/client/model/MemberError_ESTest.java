/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:38:44 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.ErrorModel;
import com.ibm.watson.data.client.model.ErrorTargetModel;
import com.ibm.watson.data.client.model.MemberError;
import com.ibm.watson.data.client.model.enums.TargetModelType;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MemberError_ESTest extends MemberError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      MemberError memberError1 = memberError0.accessGroupId("");
      memberError0.userIamId("null");
      MemberError memberError2 = memberError1.accessGroupId("");
      MemberError memberError3 = new MemberError();
      memberError3.setAccessGroupId("P1@i=zr'z5ijTEa2c");
      boolean boolean0 = memberError2.equals(memberError3);
      assertFalse(boolean0);
      
      memberError0.setUserIamId("{CW6V)h9DT");
      memberError1.getAccessGroupId();
      memberError1.getReason();
      memberError0.userIamId("");
      memberError0.hashCode();
      assertFalse(memberError0.equals((Object)memberError3));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      ErrorModel errorModel0 = new ErrorModel();
      MemberError memberError1 = memberError0.reason(errorModel0);
      MemberError memberError2 = memberError1.accessGroupId("3");
      MemberError memberError3 = new MemberError();
      boolean boolean0 = memberError0.equals(memberError3);
      errorModel0.put("3", "");
      Object object0 = new Object();
      errorModel0.remove((Object) "RFAgP='yL=DKjXO%|G", object0);
      memberError0.userIamId("3");
      MemberError memberError4 = memberError2.accessGroupId("%+It");
      memberError2.getAccessGroupId();
      errorModel0.put("%+It", "%+It");
      memberError1.setUserIamId("vWJoD'`7rHc|CN&{");
      memberError1.setUserIamId("reactor.netty.logChannelInfo");
      memberError2.setReason(errorModel0);
      memberError0.hashCode();
      MemberError memberError5 = memberError0.userIamId("onWritePossible");
      MemberError memberError6 = memberError2.accessGroupId("%+It");
      memberError5.setReason(errorModel0);
      memberError2.setUserIamId("vWJoD'`7rHc|CN&{");
      memberError6.setReason(errorModel0);
      memberError2.getReason();
      memberError5.setReason(errorModel0);
      memberError5.toString();
      memberError2.getReason();
      MemberError memberError7 = memberError0.accessGroupId("vWJoD'`7rHc|CN&{");
      boolean boolean1 = memberError4.equals(memberError7);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      memberError0.getUserIamId();
      MemberError memberError1 = new MemberError();
      memberError0.equals(memberError1);
      memberError0.getUserIamId();
      memberError0.toString();
      ErrorModel errorModel0 = new ErrorModel();
      memberError0.setReason(errorModel0);
      assertTrue(memberError0.equals((Object)memberError1));
      
      MemberError memberError2 = memberError1.userIamId("Not Acceptable");
      assertFalse(memberError2.equals((Object)memberError0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      ErrorModel errorModel0 = new ErrorModel();
      ErrorModel errorModel1 = errorModel0.moreInfo("k5OCKly&}");
      errorModel1.put("k5OCKly&}", memberError0);
      memberError0.accessGroupId("k5OCKly&}");
      ErrorModel errorModel2 = errorModel1.target((ErrorTargetModel) null);
      ErrorModel errorModel3 = errorModel2.moreInfo("k5OCKly&}");
      MemberError memberError1 = memberError0.reason(errorModel3);
      MemberError memberError2 = memberError1.accessGroupId("k5OCKly&}");
      MemberError memberError3 = memberError2.userIamId("k5OCKly&}");
      memberError3.getUserIamId();
      errorModel0.put("QB", memberError1);
      errorModel2.put("o@IK", errorModel1);
      errorModel2.put("O)s~I8d]sFVE{Fq", "4w$RVZz0");
      memberError0.equals(errorModel2);
      memberError1.setReason(errorModel1);
      memberError1.setAccessGroupId("k5OCKly&}");
      MemberError memberError4 = memberError1.reason(errorModel1);
      memberError4.setAccessGroupId("null");
      errorModel1.put("\"ZCHM", "k5OCKly&}");
      memberError0.setUserIamId("K'uc?j");
      // Undeclared exception!
      try { 
        memberError4.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      ErrorModel errorModel0 = new ErrorModel();
      ErrorModel errorModel1 = errorModel0.moreInfo("");
      errorModel0.put("", errorModel1);
      Object object0 = new Object();
      errorModel0.put("", object0);
      ErrorModel errorModel2 = errorModel1.moreInfo("");
      MemberError memberError1 = memberError0.reason(errorModel2);
      memberError0.hashCode();
      MemberError memberError2 = memberError1.accessGroupId("");
      memberError2.getUserIamId();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        errorModel0.forEach((BiConsumer<? super String, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      ErrorModel errorModel0 = new ErrorModel();
      ErrorModel errorModel1 = errorModel0.moreInfo("");
      ErrorModel errorModel2 = errorModel1.code("");
      ErrorModel errorModel3 = errorModel2.message("");
      MemberError memberError1 = memberError0.reason(errorModel3);
      MemberError memberError2 = memberError1.accessGroupId("jBM?-~~H");
      MemberError memberError3 = memberError2.userIamId("jBM?-~~H");
      ErrorModel errorModel4 = memberError3.getReason();
      assertEquals(0, errorModel4.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      MemberError memberError1 = memberError0.reason((ErrorModel) null);
      MemberError memberError2 = memberError1.accessGroupId("ZYb&]%sznO");
      MemberError memberError3 = memberError2.userIamId("uA");
      memberError2.reason((ErrorModel) null);
      memberError3.setAccessGroupId("");
      memberError3.toString();
      memberError3.setAccessGroupId("Y<.*p");
      MemberError memberError4 = memberError2.accessGroupId("class MemberError {\n    userIamId: java.lang.String@0000000004\n    accessGroupId: java.lang.String@0000000005\n    reason: null\n}");
      Object object0 = new Object();
      memberError3.equals(object0);
      memberError0.toString();
      memberError1.setAccessGroupId("ZYb&]%sznO");
      memberError1.hashCode();
      memberError2.toString();
      memberError3.setAccessGroupId("");
      Integer integer0 = new Integer(0);
      memberError3.equals(integer0);
      memberError1.setAccessGroupId((String) null);
      memberError1.getUserIamId();
      memberError4.userIamId("class MemberError {\n    userIamId: java.lang.String@0000000004\n    accessGroupId: java.lang.String@0000000005\n    reason: null\n}");
      memberError3.toString();
      memberError4.getReason();
      MemberError memberError5 = memberError3.reason((ErrorModel) null);
      assertSame(memberError3, memberError5);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      MemberError memberError1 = memberError0.userIamId((String) null);
      memberError1.hashCode();
      memberError1.setUserIamId("*<$)ujy");
      ErrorModel errorModel0 = memberError1.getReason();
      assertTrue(errorModel0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      MemberError memberError1 = memberError0.accessGroupId("s+3P4fSdy@TI");
      MemberError memberError2 = memberError1.userIamId("io.netty.channel.epoll.AbstractEpollStreamChannel");
      MemberError memberError3 = memberError1.accessGroupId("io.netty.channel.epoll.AbstractEpollStreamChannel");
      MemberError memberError4 = memberError3.accessGroupId((String) null);
      memberError4.setAccessGroupId("s+3P4fSdy@TI");
      memberError2.hashCode();
      MemberError memberError5 = memberError2.accessGroupId((String) null);
      memberError2.toString();
      memberError2.equals("s+3P4fSdy@TI");
      memberError2.setUserIamId("io.netty.channel.epoll.AbstractEpollStreamChannel");
      memberError0.getAccessGroupId();
      ErrorModel errorModel0 = new ErrorModel();
      Object object0 = new Object();
      errorModel0.put((String) null, object0);
      memberError5.setReason(errorModel0);
      errorModel0.entrySet();
      MemberError memberError6 = memberError0.reason(errorModel0);
      memberError4.accessGroupId((String) null);
      memberError6.userIamId("dRx0Z>Q#8Dz5cDg");
      Integer integer0 = new Integer((-2271));
      memberError6.equals(integer0);
      errorModel0.put("reactor.core.publisher.MonoFilterWhen", "s+3P4fSdy@TI");
      memberError0.setReason(errorModel0);
      memberError0.setAccessGroupId("reactor.core.publisher.MonoFilterWhen");
      memberError5.toString();
      memberError2.getReason();
      memberError1.getUserIamId();
      memberError4.setUserIamId((String) null);
      MemberError memberError7 = memberError4.accessGroupId("reactor.core.publisher.FluxGroupJoin$LeftRightEndSubscriber");
      assertSame(memberError0, memberError7);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      MemberError memberError1 = memberError0.accessGroupId((String) null);
      memberError0.toString();
      ErrorModel errorModel0 = new ErrorModel();
      ErrorModel errorModel1 = errorModel0.code("class MemberError {\n    userIamId: null\n    accessGroupId: null\n    reason: com.ibm.watson.data.client.model.ErrorModel@0000000001\n}");
      ErrorModel errorModel2 = errorModel1.code("S");
      ErrorModel errorModel3 = errorModel2.code((String) null);
      ErrorModel errorModel4 = errorModel3.target((ErrorTargetModel) null);
      ErrorModel errorModel5 = errorModel4.code((String) null);
      ErrorModel errorModel6 = errorModel5.message("");
      ErrorModel errorModel7 = errorModel6.moreInfo((String) null);
      ErrorModel errorModel8 = errorModel7.code((String) null);
      memberError1.reason(errorModel8);
      memberError1.setUserIamId("doOnBound");
      memberError0.hashCode();
      memberError1.equals((Object) null);
      memberError0.hashCode();
      MemberError memberError2 = memberError1.accessGroupId("");
      memberError2.userIamId("");
      memberError0.toString();
      memberError0.setUserIamId("}");
      memberError1.toString();
      memberError1.getReason();
      MemberError memberError3 = memberError2.userIamId("");
      memberError3.hashCode();
      memberError1.toString();
      memberError1.getAccessGroupId();
      memberError2.setUserIamId("\"$}klt2Qw}#aJZ");
      MemberError memberError4 = memberError0.accessGroupId("\u0001bfR2ecEI");
      memberError4.setUserIamId("");
      assertSame(memberError4, memberError3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      ErrorModel errorModel0 = new ErrorModel();
      ErrorModel errorModel1 = errorModel0.code("");
      ErrorTargetModel errorTargetModel0 = new ErrorTargetModel();
      errorTargetModel0.toString();
      ErrorModel errorModel2 = errorModel1.target(errorTargetModel0);
      ErrorModel errorModel3 = errorModel2.message("");
      ErrorModel errorModel4 = errorModel3.message("    reason: ");
      TargetModelType targetModelType0 = TargetModelType.FIELD;
      ErrorTargetModel errorTargetModel1 = errorTargetModel0.type(targetModelType0);
      errorTargetModel1.equals("");
      ErrorModel errorModel5 = errorModel4.target(errorTargetModel1);
      errorTargetModel1.setType(targetModelType0);
      errorModel5.setMoreInfo("Does not have an InetSocketAddress");
      errorModel2.put("", errorModel5);
      TargetModelType targetModelType1 = TargetModelType.FIELD;
      errorModel1.put("`|PUMSyu9(-", "    reason: ");
      errorTargetModel1.setType(targetModelType1);
      ErrorModel errorModel6 = errorModel5.moreInfo("");
      MemberError memberError1 = memberError0.reason(errorModel6);
      memberError1.setUserIamId("    reason: ");
      memberError1.equals(errorModel3);
      errorModel6.setMoreInfo("Y}=$9OohTZET(>DX");
      memberError0.setAccessGroupId("");
      memberError1.toString();
      memberError1.getUserIamId();
      memberError0.setReason(errorModel4);
      memberError0.getUserIamId();
      MemberError memberError2 = memberError0.userIamId((String) null);
      memberError1.setAccessGroupId("    reason: ");
      memberError0.getAccessGroupId();
      memberError2.setReason(errorModel2);
      memberError2.setReason(errorModel3);
      assertEquals("    reason: ", errorModel3.getMessage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      MemberError memberError1 = memberError0.userIamId("");
      ErrorModel errorModel0 = new ErrorModel();
      ErrorTargetModel errorTargetModel0 = new ErrorTargetModel();
      ErrorModel errorModel1 = errorModel0.target(errorTargetModel0);
      ErrorModel errorModel2 = errorModel1.moreInfo("");
      ErrorModel errorModel3 = errorModel2.code("");
      ErrorTargetModel errorTargetModel1 = errorTargetModel0.name("RDzF{");
      TargetModelType targetModelType0 = TargetModelType.PARAMETER;
      ErrorTargetModel errorTargetModel2 = errorTargetModel1.type(targetModelType0);
      ErrorModel errorModel4 = errorModel3.target(errorTargetModel2);
      ErrorModel errorModel5 = errorModel4.code("RDzF{");
      ErrorModel errorModel6 = errorModel5.message("");
      memberError1.reason(errorModel6);
      ErrorModel errorModel7 = new ErrorModel();
      MemberError memberError2 = memberError1.reason(errorModel7);
      String string0 = memberError2.getUserIamId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MemberError memberError0 = new MemberError();
      MemberError memberError1 = memberError0.userIamId("org.springframework.core.annotation.MergedAnnotationPredicates$UniquePredicate");
      memberError0.setAccessGroupId("org.springframework.core.annotation.MergedAnnotationPredicates$UniquePredicate");
      Object object0 = new Object();
      memberError1.equals(object0);
      memberError0.equals("=");
      memberError1.setUserIamId("=");
      MemberError memberError2 = memberError0.accessGroupId("org.springframework.core.annotation.MergedAnnotationPredicates$UniquePredicate");
      ErrorModel errorModel0 = new ErrorModel();
      ErrorModel errorModel1 = errorModel0.message("=");
      ErrorModel errorModel2 = errorModel1.code("");
      ErrorModel errorModel3 = errorModel2.message("=");
      ErrorModel errorModel4 = errorModel3.message("org.springframework.core.annotation.MergedAnnotationPredicates$UniquePredicate");
      ErrorModel errorModel5 = errorModel4.message("reactor.core.publisher.MonoAll");
      ErrorModel errorModel6 = errorModel5.code("oDT*\"c,mXIVi!<uez&");
      ErrorTargetModel errorTargetModel0 = new ErrorTargetModel();
      TargetModelType targetModelType0 = TargetModelType.HEADER;
      ErrorTargetModel errorTargetModel1 = errorTargetModel0.type(targetModelType0);
      errorModel2.target(errorTargetModel1);
      ErrorModel errorModel7 = errorModel6.message("");
      Integer integer0 = new Integer(0);
      errorModel7.put("", integer0);
      errorModel7.moreInfo("oDT*\"c,mXIVi!<uez&");
      memberError2.setReason(errorModel7);
      memberError0.equals(memberError1);
      // Undeclared exception!
      try { 
        errorModel5.forEach((BiConsumer<? super String, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }
}
