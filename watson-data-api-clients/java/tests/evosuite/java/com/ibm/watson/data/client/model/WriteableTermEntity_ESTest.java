/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 13:42:19 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.CustomAttribute;
import com.ibm.watson.data.client.model.CustomAttributeValueObject;
import com.ibm.watson.data.client.model.GlossaryObjectMetadata;
import com.ibm.watson.data.client.model.NewRelationship;
import com.ibm.watson.data.client.model.RelationshipObject;
import com.ibm.watson.data.client.model.WriteableTermEntity;
import com.ibm.watson.data.client.model.enums.GlossaryObjectState;
import io.netty.channel.epoll.EpollServerDomainSocketChannel;
import io.netty.handler.logging.LoggingHandler;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.testng.xml.XmlClass;
import org.testng.xml.XmlDefine;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WriteableTermEntity_ESTest extends WriteableTermEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      writeableTermEntity0.addReplacedByTermsItem(newRelationship0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      WriteableTermEntity writeableTermEntity1 = new WriteableTermEntity();
      writeableTermEntity1.equals(writeableTermEntity0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addSynonymTermsItem(newRelationship0);
      XmlDefine xmlDefine0 = new XmlDefine();
      List<String> list0 = xmlDefine0.getIncludes();
      writeableTermEntity2.abbreviations(list0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTermsItem(newRelationship0);
      Vector<RelationshipObject> vector0 = new Vector<RelationshipObject>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.relatedTermRelationships(vector0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addRelatedTermRelationshipsItem(relationshipObject0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity0.addHasTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addIsATypeOfTermsItem(newRelationship0);
      relationshipObject0.entity(writeableTermEntity4);
      writeableTermEntity5.hashCode();
      writeableTermEntity4.addIsOfTermsItem(newRelationship0);
      List<NewRelationship> list0 = writeableTermEntity2.getIsOfTerms();
      writeableTermEntity5.setIsATypeOfTerms(list0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "4;~l";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      String string1 = "";
      writeableTermEntity2.setExample(string1);
      writeableTermEntity3.getClassifications();
      writeableTermEntity4.getSynonymTerms();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getCategories();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_THREAD_COUNT);
      List<String> list0 = xmlTest0.getExcludedGroups();
      List<String> list1 = xmlTest0.getExcludedGroups();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.abbreviations(list0);
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.description("    hasTerms: ");
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addReplacedByTermsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.replacesTerms((List<NewRelationship>) null);
      LinkedList<RelationshipObject> linkedList0 = new LinkedList<RelationshipObject>();
      UnaryOperator<RelationshipObject> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.relatedTermRelationships(linkedList0);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity2.replacedByTerms((List<NewRelationship>) null);
      String string0 = "~ [cYm+>z";
      writeableTermEntity1.addHasTypeTermsItem(newRelationship1);
      writeableTermEntity6.tags(list1);
      // Undeclared exception!
      try { 
        writeableTermEntity5.addAbbreviationsItem("~ [cYm+>z");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity0.addSynonymTermsItem((NewRelationship) null);
      writeableTermEntity3.addReplacesTermsItem((NewRelationship) null);
      writeableTermEntity3.addHasTermsItem((NewRelationship) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = new WriteableTermEntity();
      writeableTermEntity4.getImportSourceCreatedOn();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity4.equals(writeableTermEntity2);
      assertFalse(boolean0);
      
      writeableTermEntity5.toString();
      assertFalse(writeableTermEntity0.equals((Object)writeableTermEntity4));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.replacesTerms((List<NewRelationship>) null);
      writeableTermEntity0.hasTerms((List<NewRelationship>) null);
      writeableTermEntity2.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity3 = new WriteableTermEntity();
      writeableTermEntity3.getImportSourceCreatedOn();
      assertTrue(writeableTermEntity3.equals((Object)writeableTermEntity1));
      
      writeableTermEntity3.addRelatedTermsItem((NewRelationship) null);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity3.equals(writeableTermEntity0);
      assertFalse(boolean0);
      
      writeableTermEntity3.toString();
      assertFalse(writeableTermEntity3.equals((Object)writeableTermEntity2));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      writeableTermEntity0.addRelatedTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity1 = new WriteableTermEntity();
      boolean boolean0 = writeableTermEntity1.equals(writeableTermEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.importSourceUsage("kxe");
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addRelatedTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addSynonymTermsItem(newRelationship0);
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.hasTerms(stack0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.replacesTerms(stack0);
      List<NewRelationship> list0 = writeableTermEntity5.getHasTerms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.hashCode();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addRelatedTermRelationshipsItem((RelationshipObject) null);
      NewRelationship newRelationship0 = new NewRelationship();
      newRelationship0.setId("channelResources");
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.isATypeOfTerms(stack0);
      NewRelationship newRelationship1 = newRelationship0.description("channelResources");
      writeableTermEntity1.addClassificationsItem(newRelationship1);
      NewRelationship newRelationship2 = newRelationship1.description("=[ClEe@j");
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity1.addReplacedByTermsItem(newRelationship2);
      writeableTermEntity1.getAbbreviations();
      newRelationship1.setDescription("reactor.core.publisher.MonoHasElement");
      newRelationship0.setDescription("=[ClEe@j");
      NewRelationship newRelationship3 = newRelationship1.description("reactor.core.publisher.MonoHasElement");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity0.addReplacedByTermsItem(newRelationship0);
      writeableTermEntity3.getExample();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity0.addReplacesTermsItem(newRelationship1);
      List<NewRelationship> list0 = writeableTermEntity3.getIsATypeOfTerms();
      newRelationship0.equals("channelResources");
      writeableTermEntity5.setIsOfTerms(list0);
      writeableTermEntity5.getDataClasses();
      writeableTermEntity3.setSynonymTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity1.importSourceCreatedBy("    relctedTermRela1ionships: ");
      writeableTermEntity6.addIsATypeOfTermsItem(newRelationship3);
      writeableTermEntity5.getReplacedByTerms();
      writeableTermEntity2.addClassificationsItem(newRelationship2);
      writeableTermEntity4.addAbbreviationsItem("");
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity4.addReplacesTermsItem(newRelationship2);
      assertNull(writeableTermEntity7.getExample());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.addReplacesTermsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      writeableTermEntity0.hasTerms((List<NewRelationship>) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      writeableTermEntity0.setImportSourceUsage("|x");
      WriteableTermEntity writeableTermEntity4 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity4.addIsATypeOfTermsItem((NewRelationship) null);
      writeableTermEntity1.toString();
      writeableTermEntity4.equals(writeableTermEntity2);
      writeableTermEntity5.relatedTerms((List<NewRelationship>) null);
      assertFalse(writeableTermEntity5.equals((Object)writeableTermEntity4));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.example(".errors");
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.importSourceUsage(".errors");
      WriteableTermEntity writeableTermEntity3 = new WriteableTermEntity();
      boolean boolean0 = writeableTermEntity3.equals(writeableTermEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = new WriteableTermEntity();
      writeableTermEntity4.getImportSourceCreatedOn();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      LinkedList<java.util.Locale.LanguageRange> linkedList0 = new LinkedList<java.util.Locale.LanguageRange>();
      Vector<String> vector0 = new Vector<String>();
      java.util.Locale.FilteringMode locale_FilteringMode0 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) linkedList0, (Collection<String>) vector0, locale_FilteringMode0);
      writeableTermEntity4.abbreviations(list0);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity4.equals(writeableTermEntity2);
      assertFalse(boolean0);
      
      Stack<RelationshipObject> stack0 = new Stack<RelationshipObject>();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.relatedTermRelationships(stack0);
      assertFalse(writeableTermEntity6.equals((Object)writeableTermEntity4));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      writeableTermEntity2.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity3 = new WriteableTermEntity();
      writeableTermEntity3.getImportSourceCreatedOn();
      writeableTermEntity0.synonymTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      Vector<RelationshipObject> vector0 = new Vector<RelationshipObject>();
      writeableTermEntity3.setRelatedTermRelationships(vector0);
      boolean boolean0 = writeableTermEntity3.equals(writeableTermEntity2);
      assertFalse(boolean0);
      
      writeableTermEntity3.getRelatedTerms();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity2.addAbbreviationsItem((String) null);
      writeableTermEntity4.addSynonymTermsItem((NewRelationship) null);
      assertFalse(writeableTermEntity0.equals((Object)writeableTermEntity3));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.replacesTerms((List<NewRelationship>) null);
      writeableTermEntity0.hasTerms((List<NewRelationship>) null);
      writeableTermEntity2.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity3 = new WriteableTermEntity();
      writeableTermEntity3.getImportSourceCreatedOn();
      writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      String string0 = writeableTermEntity1.toString();
      assertEquals("class WriteableTermEntity {\n    longDescription: null\n    state: null\n    customAttributes: null\n    name: null\n    shortDescription: null\n    effectiveStartDate: null\n    effectiveEndDate: null\n    tags: null\n    stewardIds: null\n    parentCategory: null\n    categories: null\n    abbreviations: null\n    importSourceCreatedBy: null\n    importSourceCreatedOn: null\n    importSourceUsage: null\n    example: null\n    relatedTermRelationships: null\n    isATypeOfTerms: null\n    hasTypeTerms: null\n    isOfTerms: null\n    hasTerms: null\n    synonymTerms: null\n    relatedTerms: null\n    replacesTerms: null\n    replacedByTerms: null\n    dataClasses: null\n    classifications: null\n}", string0);
      
      boolean boolean0 = writeableTermEntity3.equals(writeableTermEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity0.addSynonymTermsItem((NewRelationship) null);
      writeableTermEntity3.addReplacesTermsItem((NewRelationship) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = new WriteableTermEntity();
      writeableTermEntity4.getImportSourceCreatedOn();
      writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity4.equals(writeableTermEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      writeableTermEntity3.addReplacesTermsItem((NewRelationship) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = new WriteableTermEntity();
      MockDate mockDate0 = new MockDate(1, 1, 50, 50, 307, (-754));
      writeableTermEntity4.importSourceCreatedOn(mockDate0);
      writeableTermEntity4.getImportSourceCreatedOn();
      writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      boolean boolean0 = writeableTermEntity4.equals(writeableTermEntity2);
      assertFalse(boolean0);
      
      writeableTermEntity4.getReplacesTerms();
      assertFalse(writeableTermEntity4.equals((Object)writeableTermEntity1));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      MockDate mockDate0 = new MockDate(0, 0, (-3054), 211, 256, 256);
      writeableTermEntity0.setImportSourceCreatedOn(mockDate0);
      WriteableTermEntity writeableTermEntity1 = new WriteableTermEntity();
      boolean boolean0 = writeableTermEntity1.equals(writeableTermEntity0);
      assertFalse(boolean0);
      
      writeableTermEntity1.getIsOfTerms();
      assertFalse(writeableTermEntity1.equals((Object)writeableTermEntity0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addHasTypeTermsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = new WriteableTermEntity();
      writeableTermEntity4.getImportSourceCreatedOn();
      writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity4.equals(writeableTermEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addClassificationsItem(newRelationship0);
      NewRelationship newRelationship1 = newRelationship0.description("q&%<|E@G76zR(H@064(");
      NewRelationship newRelationship2 = newRelationship1.id("9l>'301%o4");
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addSynonymTermsItem(newRelationship2);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addHasTermsItem(newRelationship2);
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      writeableTermEntity2.setIsOfTerms(linkedList0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.isATypeOfTerms(linkedList0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.example("9l>'301%o4");
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.example("9E5_S!*bm.e");
      List<NewRelationship> list0 = writeableTermEntity3.getIsATypeOfTerms();
      writeableTermEntity4.setDataClasses(list0);
      writeableTermEntity6.setReplacedByTerms(linkedList0);
      writeableTermEntity4.addReplacedByTermsItem(newRelationship1);
      writeableTermEntity2.example("9l>'301%o4");
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity3.example("");
      Random.setNextRandom((-1597));
      WriteableTermEntity writeableTermEntity8 = writeableTermEntity2.addSynonymTermsItem(newRelationship2);
      assertSame(writeableTermEntity8, writeableTermEntity7);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = new WriteableTermEntity();
      writeableTermEntity4.getImportSourceCreatedOn();
      writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity4.equals(writeableTermEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addDataClassesItem((NewRelationship) null);
      writeableTermEntity3.relatedTerms((List<NewRelationship>) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = new WriteableTermEntity();
      writeableTermEntity4.getImportSourceCreatedOn();
      writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity4.equals(writeableTermEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addReplacesTermsItem((NewRelationship) null);
      writeableTermEntity4.importSourceCreatedBy("No sendHeaders() called before complete, sending zero-length header");
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = new WriteableTermEntity();
      writeableTermEntity5.getImportSourceCreatedOn();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity5.importSourceCreatedBy("7AnA)0ud-{\bJn@hk>");
      writeableTermEntity6.setSynonymTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity5.equals(writeableTermEntity2);
      assertFalse(boolean0);
      
      writeableTermEntity4.hasTerms((List<NewRelationship>) null);
      assertFalse(writeableTermEntity0.equals((Object)writeableTermEntity7));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity2 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity3 = new WriteableTermEntity();
      writeableTermEntity3.setImportSourceCreatedBy("");
      boolean boolean0 = writeableTermEntity3.equals(writeableTermEntity2);
      assertFalse(writeableTermEntity3.equals((Object)writeableTermEntity2));
      assertTrue(writeableTermEntity2.equals((Object)writeableTermEntity1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addReplacesTermsItem((NewRelationship) null);
      writeableTermEntity3.addIsATypeOfTermsItem((NewRelationship) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = new WriteableTermEntity();
      writeableTermEntity5.getImportSourceCreatedOn();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity5.equals(writeableTermEntity2);
      assertFalse(boolean0);
      
      writeableTermEntity4.getIsATypeOfTerms();
      writeableTermEntity6.hasTerms((List<NewRelationship>) null);
      assertFalse(writeableTermEntity0.equals((Object)writeableTermEntity5));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      writeableTermEntity3.addReplacesTermsItem((NewRelationship) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = new WriteableTermEntity();
      writeableTermEntity2.example("S[IIzeXX?b,:Q8Z");
      writeableTermEntity4.getImportSourceCreatedOn();
      writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity4.equals(writeableTermEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.replacesTerms(linkedList0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.importSourceCreatedOn((Date) null);
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.id("io.netty.channel.epoll.EpollServerSocketChannel");
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addRelatedTermsItem(newRelationship1);
      newRelationship0.toString();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.importSourceUsage("RD93+aD1E`M;?SW6");
      XmlDefine xmlDefine0 = new XmlDefine();
      writeableTermEntity4.setSynonymTerms(linkedList0);
      writeableTermEntity4.importSourceCreatedOn((Date) null);
      List<String> list0 = xmlDefine0.getIncludes();
      writeableTermEntity0.relatedTerms(linkedList0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.abbreviations(list0);
      Stack<RelationshipObject> stack0 = new Stack<RelationshipObject>();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.relatedTermRelationships(stack0);
      writeableTermEntity6.setCustomAttributes((List<CustomAttribute>) null);
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity0.hasTypeTerms(linkedList0);
      writeableTermEntity2.getRelatedTermRelationships();
      WriteableTermEntity writeableTermEntity8 = writeableTermEntity7.addHasTypeTermsItem(newRelationship1);
      assertSame(writeableTermEntity8, writeableTermEntity2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      writeableTermEntity2.longDescription("    relatedTerms: ");
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addReplacesTermsItem((NewRelationship) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = new WriteableTermEntity();
      MockDate mockDate0 = new MockDate();
      writeableTermEntity4.importSourceCreatedOn(mockDate0);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity5.equals(writeableTermEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.relatedTerms(stack0);
      NewRelationship newRelationship0 = new NewRelationship();
      stack0.add(newRelationship0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.replacedByTerms(stack0);
      NewRelationship newRelationship1 = new NewRelationship();
      NewRelationship newRelationship2 = newRelationship1.id("");
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addIsOfTermsItem(newRelationship2);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.isATypeOfTerms(stack0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addReplacedByTermsItem(newRelationship2);
      newRelationship1.setDescription("");
      LinkedList<RelationshipObject> linkedList0 = new LinkedList<RelationshipObject>();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.relatedTermRelationships(linkedList0);
      writeableTermEntity5.relatedTermRelationships(linkedList0);
      writeableTermEntity5.hashCode();
      writeableTermEntity5.getSynonymTerms();
      writeableTermEntity2.getDataClasses();
      writeableTermEntity4.addHasTermsItem(newRelationship1);
      writeableTermEntity1.setCategories((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity6.hasTerms(stack0);
      writeableTermEntity7.getDataClasses();
      WriteableTermEntity writeableTermEntity8 = writeableTermEntity7.isATypeOfTerms((List<NewRelationship>) null);
      newRelationship2.equals("");
      writeableTermEntity8.longDescription("");
      WriteableTermEntity writeableTermEntity9 = writeableTermEntity4.addIsOfTermsItem(newRelationship2);
      writeableTermEntity1.relatedTermRelationships(linkedList0);
      WriteableTermEntity writeableTermEntity10 = writeableTermEntity0.hasTerms((List<NewRelationship>) null);
      writeableTermEntity10.parentCategory(newRelationship0);
      writeableTermEntity7.getClassifications();
      writeableTermEntity8.getRelatedTermRelationships();
      writeableTermEntity9.toString();
      MockDate mockDate0 = new MockDate((-3232L));
      writeableTermEntity9.importSourceCreatedOn(mockDate0);
      List<NewRelationship> list0 = writeableTermEntity0.getReplacedByTerms();
      writeableTermEntity3.isATypeOfTerms(list0);
      WriteableTermEntity writeableTermEntity11 = writeableTermEntity2.addDataClassesItem(newRelationship1);
      assertNull(writeableTermEntity11.getShortDescription());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      writeableTermEntity3.addReplacesTermsItem((NewRelationship) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = new WriteableTermEntity();
      writeableTermEntity4.getImportSourceCreatedOn();
      writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity4.equals(writeableTermEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      writeableTermEntity3.addReplacesTermsItem((NewRelationship) null);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = new WriteableTermEntity();
      writeableTermEntity4.getImportSourceCreatedOn();
      writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity3.addIsOfTermsItem((NewRelationship) null);
      boolean boolean0 = writeableTermEntity4.equals(writeableTermEntity5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      writeableTermEntity0.setDataClasses(stack0);
      writeableTermEntity0.setAbbreviations((List<String>) null);
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.classifications((List<NewRelationship>) null);
      writeableTermEntity1.setImportSourceUsage("");
      List<NewRelationship> list0 = writeableTermEntity0.getDataClasses();
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.description("");
      writeableTermEntity1.addRelatedTermsItem(newRelationship1);
      NewRelationship newRelationship2 = new NewRelationship();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.addHasTypeTermsItem(newRelationship2);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity0.hasTerms(stack0);
      writeableTermEntity3.dataClasses(list0);
      Random.setNextRandom(0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity0.synonymTerms(list0);
      List<NewRelationship> list1 = writeableTermEntity1.getDataClasses();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity2.hasTerms(list1);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.addReplacesTermsItem(newRelationship2);
      writeableTermEntity3.equals(writeableTermEntity6);
      writeableTermEntity4.setIsOfTerms(list0);
      writeableTermEntity4.importSourceCreatedBy("v");
      writeableTermEntity4.getReplacesTerms();
      writeableTermEntity5.getRelatedTermRelationships();
      MockDate mockDate0 = new MockDate(0, 0, 14);
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity4.importSourceCreatedOn(mockDate0);
      assertSame(writeableTermEntity4, writeableTermEntity7);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NewRelationship newRelationship0 = new NewRelationship();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      StringBuilder stringBuilder0 = new StringBuilder();
      newRelationship0.id("%F=|_N");
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      ArrayList<RelationshipObject> arrayList0 = new ArrayList<RelationshipObject>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.relatedTermRelationships(arrayList0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addRelatedTermRelationshipsItem((RelationshipObject) null);
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getSuiteFiles();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.abbreviations(list0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.importSourceUsage("'{K{-U");
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.hasTypeTerms(stack0);
      List<NewRelationship> list1 = writeableTermEntity5.getHasTypeTerms();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addDataClassesItem(newRelationship0);
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.hasTerms(arrayList0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addRelatedTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.importSourceCreatedBy((String) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.isOfTerms(arrayList0);
      List<NewRelationship> list0 = writeableTermEntity5.getIsOfTerms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.hasTypeTerms(vector0);
      MockDate mockDate0 = new MockDate((-1094), (-1094), (-1094), 0, (-1094));
      Instant instant0 = MockInstant.ofEpochMilli((-1094));
      Instant instant1 = MockInstant.plusSeconds(instant0, 2911L);
      Instant instant2 = MockInstant.plusMillis(instant1, (-417L));
      Date date0 = Date.from(instant2);
      writeableTermEntity1.setCategories(vector0);
      mockDate0.after(date0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.importSourceCreatedOn(mockDate0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.isATypeOfTerms(vector0);
      ArrayList<RelationshipObject> arrayList0 = new ArrayList<RelationshipObject>();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.relatedTermRelationships(arrayList0);
      writeableTermEntity3.classifications(vector0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity0.replacedByTerms(vector0);
      mockDate0.setTime(0);
      writeableTermEntity4.setHasTerms(vector0);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity4.hasTerms(vector0);
      writeableTermEntity3.addTagsItem((String) null);
      writeableTermEntity6.getIsOfTerms();
      writeableTermEntity2.setReplacesTerms((List<NewRelationship>) null);
      writeableTermEntity4.dataClasses(vector0);
      writeableTermEntity6.getClassifications();
      writeableTermEntity0.hasTypeTerms(vector0);
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.id("a+");
      NewRelationship newRelationship2 = newRelationship1.description("a+");
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity5.addHasTypeTermsItem(newRelationship2);
      assertSame(writeableTermEntity5, writeableTermEntity7);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      Vector<CustomAttribute> vector0 = new Vector<CustomAttribute>();
      writeableTermEntity1.setCustomAttributes(vector0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addIsATypeOfTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.example("");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.replacedByTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addSynonymTermsItem(newRelationship0);
      NewRelationship newRelationship1 = newRelationship0.id("");
      CustomAttribute customAttribute0 = new CustomAttribute();
      CustomAttribute customAttribute1 = customAttribute0.customAttributeDefinitionId("");
      CustomAttribute customAttribute2 = customAttribute1.name("");
      CustomAttributeValueObject customAttributeValueObject0 = new CustomAttributeValueObject();
      LoggingHandler loggingHandler0 = new LoggingHandler("");
      CustomAttributeValueObject customAttributeValueObject1 = customAttributeValueObject0.value(loggingHandler0);
      CustomAttribute customAttribute3 = customAttribute2.addValuesItem(customAttributeValueObject1);
      writeableTermEntity5.addCustomAttributesItem(customAttribute3);
      writeableTermEntity3.setIsOfTerms((List<NewRelationship>) null);
      writeableTermEntity5.synonymTerms((List<NewRelationship>) null);
      writeableTermEntity0.stewardIds((List<String>) null);
      Object object0 = new Object();
      newRelationship0.equals(object0);
      writeableTermEntity2.getHasTypeTerms();
      writeableTermEntity3.getImportSourceCreatedOn();
      writeableTermEntity4.getAbbreviations();
      writeableTermEntity3.synonymTerms((List<NewRelationship>) null);
      writeableTermEntity0.addDataClassesItem(newRelationship1);
      String string0 = writeableTermEntity4.getExample();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getSynonymTerms();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.addIsATypeOfTermsItem(newRelationship0);
      writeableTermEntity2.setCategories((List<NewRelationship>) null);
      writeableTermEntity2.getReplacesTerms();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity0.hasTypeTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.synonymTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.importSourceUsage("    hasTypeTerms: ");
      MockDate mockDate0 = new MockDate(2007, 2007, 2007);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.importSourceCreatedOn(mockDate0);
      writeableTermEntity6.addCategoriesItem(newRelationship0);
      newRelationship0.equals(writeableTermEntity0);
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity6.addReplacesTermsItem(newRelationship0);
      writeableTermEntity7.setImportSourceCreatedOn(mockDate0);
      writeableTermEntity7.setClassifications((List<NewRelationship>) null);
      writeableTermEntity3.setDataClasses((List<NewRelationship>) null);
      MockDate.UTC(0, 11, 2007, 11, 0, 10);
      writeableTermEntity4.setImportSourceUsage((String) null);
      writeableTermEntity5.setHasTypeTerms((List<NewRelationship>) null);
      writeableTermEntity7.toIndentedString((Object) null);
      writeableTermEntity0.getIsOfTerms();
      writeableTermEntity5.isATypeOfTerms((List<NewRelationship>) null);
      writeableTermEntity6.getImportSourceCreatedBy();
      writeableTermEntity7.equals((Object) null);
      writeableTermEntity6.getAbbreviations();
      WriteableTermEntity writeableTermEntity8 = writeableTermEntity6.addReplacedByTermsItem(newRelationship0);
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.DELETED;
      writeableTermEntity8.setState(glossaryObjectState0);
      writeableTermEntity1.getExample();
      writeableTermEntity3.hasTypeTerms((List<NewRelationship>) null);
      writeableTermEntity8.toString();
      List<RelationshipObject> list0 = writeableTermEntity7.getRelatedTermRelationships();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTypeTermsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addReplacedByTermsItem(newRelationship0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addRelatedTermRelationshipsItem(relationshipObject0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addAbbreviationsItem((String) null);
      newRelationship0.id((String) null);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.classifications((List<NewRelationship>) null);
      writeableTermEntity4.hasTerms((List<NewRelationship>) null);
      writeableTermEntity2.addStewardIdsItem((String) null);
      writeableTermEntity6.getImportSourceCreatedBy();
      writeableTermEntity6.setHasTypeTerms((List<NewRelationship>) null);
      writeableTermEntity0.getRelatedTermRelationships();
      writeableTermEntity3.getHasTerms();
      writeableTermEntity3.addRelatedTermRelationshipsItem(relationshipObject0);
      writeableTermEntity6.getIsATypeOfTerms();
      writeableTermEntity1.dataClasses((List<NewRelationship>) null);
      writeableTermEntity1.setReplacedByTerms((List<NewRelationship>) null);
      assertSame(writeableTermEntity1, writeableTermEntity0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.relatedTerms(linkedList0);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addIsATypeOfTermsItem(newRelationship0);
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacedByTerms(arrayList0);
      String string0 = "    isATypeOfTerms: ";
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addAbbreviationsItem("    isATypeOfTerms: ");
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addHasTermsItem(newRelationship0);
      writeableTermEntity5.addReplacesTermsItem(newRelationship0);
      writeableTermEntity5.setClassifications(linkedList0);
      writeableTermEntity4.getReplacedByTerms();
      writeableTermEntity0.getAbbreviations();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1977), (long) (-1977));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1977
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTermsItem(newRelationship0);
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.synonymTerms(stack0);
      List<NewRelationship> list0 = writeableTermEntity2.getSynonymTerms();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.hasTerms(list0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addRelatedTermRelationshipsItem(relationshipObject0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addDataClassesItem(newRelationship0);
      writeableTermEntity5.addHasTypeTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity1.addReplacedByTermsItem(newRelationship0);
      assertNull(writeableTermEntity6.getShortDescription());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      RelationshipObject relationshipObject0 = new RelationshipObject();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addRelatedTermRelationshipsItem(relationshipObject0);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addSynonymTermsItem(newRelationship0);
      writeableTermEntity0.getIsOfTerms();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacedByTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addIsOfTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addDataClassesItem(newRelationship0);
      writeableTermEntity4.getHasTerms();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity1.parentCategory(newRelationship0);
      writeableTermEntity6.setClassifications((List<NewRelationship>) null);
      XmlSuite xmlSuite0 = new XmlSuite();
      writeableTermEntity6.setSynonymTerms((List<NewRelationship>) null);
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      xmlSuite0.setGuiceStage("");
      List<String> list0 = xmlSuite1.getExcludedGroups();
      writeableTermEntity1.abbreviations(list0);
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity6.addIsOfTermsItem(newRelationship0);
      List<NewRelationship> list1 = writeableTermEntity6.getDataClasses();
      writeableTermEntity2.getAbbreviations();
      NewRelationship newRelationship1 = newRelationship0.description((String) null);
      WriteableTermEntity writeableTermEntity8 = writeableTermEntity5.addSynonymTermsItem(newRelationship1);
      writeableTermEntity8.setExample((String) null);
      writeableTermEntity8.addReplacedByTermsItem(newRelationship1);
      writeableTermEntity7.setIsOfTerms(list1);
      assertNull(writeableTermEntity7.getImportSourceUsage());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getDataClasses();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.dataClasses((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addSynonymTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addClassificationsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.replacedByTerms((List<NewRelationship>) null);
      newRelationship0.setDescription("");
      newRelationship0.setDescription("r?ow2'MwY8%Ie");
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.relatedTerms(arrayList0);
      newRelationship0.id("");
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.hasTerms((List<NewRelationship>) null);
      writeableTermEntity5.setSynonymTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity1.dataClasses(arrayList0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      writeableTermEntity6.addRelatedTermRelationshipsItem(relationshipObject0);
      WriteableTermEntity writeableTermEntity8 = writeableTermEntity6.example("r?ow2'MwY8%Ie");
      writeableTermEntity6.setReplacesTerms((List<NewRelationship>) null);
      writeableTermEntity0.setReplacesTerms(arrayList0);
      writeableTermEntity7.getHasTypeTerms();
      writeableTermEntity1.getReplacesTerms();
      MockDate mockDate0 = new MockDate((-548), (-548), (-548), 16, 0, 16);
      WriteableTermEntity writeableTermEntity9 = writeableTermEntity8.importSourceCreatedOn(mockDate0);
      assertSame(writeableTermEntity9, writeableTermEntity4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getCategories();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      LinkedList<RelationshipObject> linkedList0 = new LinkedList<RelationshipObject>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.relatedTermRelationships(linkedList0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      writeableTermEntity0.setStewardIds((List<String>) null);
      NewRelationship newRelationship1 = newRelationship0.id("");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addHasTermsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addIsATypeOfTermsItem(newRelationship1);
      writeableTermEntity5.addReplacedByTermsItem(newRelationship1);
      writeableTermEntity5.setParentCategory(newRelationship0);
      writeableTermEntity5.toString();
      writeableTermEntity1.getIsATypeOfTerms();
      writeableTermEntity4.setImportSourceUsage("class WriteableTermEntity {\n    longDescription: null\n    state: null\n    customAttributes: null\n    name: null\n    shortDescription: null\n    effectiveStartDate: null\n    effectiveEndDate: null\n    tags: null\n    stewardIds: null\n    parentCategory: com.ibm.watson.data.client.model.NewRelationship@0000000003\n    categories: null\n    abbreviations: null\n    importSourceCreatedBy: null\n    importSourceCreatedOn: null\n    importSourceUsage: null\n    example: null\n    relatedTermRelationships: java.util.LinkedList@0000000002\n    isATypeOfTerms: java.util.ArrayList@0000000005\n    hasTypeTerms: null\n    isOfTerms: null\n    hasTerms: java.util.ArrayList@0000000004\n    synonymTerms: null\n    relatedTerms: null\n    replacesTerms: null\n    replacedByTerms: java.util.ArrayList@0000000006\n    dataClasses: null\n    classifications: null\n}");
      List<NewRelationship> list0 = writeableTermEntity3.getReplacedByTerms();
      writeableTermEntity5.isOfTerms(list0);
      NewRelationship newRelationship2 = newRelationship1.id("\tB");
      writeableTermEntity2.addHasTermsItem(newRelationship2);
      writeableTermEntity3.hashCode();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTypeTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addRelatedTermsItem((NewRelationship) null);
      writeableTermEntity0.getDataClasses();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.hasTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addHasTermsItem(newRelationship0);
      writeableTermEntity0.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity1.importSourceUsage("");
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity3.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity6.classifications((List<NewRelationship>) null);
      NewRelationship newRelationship1 = newRelationship0.description("hu");
      WriteableTermEntity writeableTermEntity8 = writeableTermEntity7.addIsATypeOfTermsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity9 = writeableTermEntity2.addIsOfTermsItem((NewRelationship) null);
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.ARCHIVED;
      writeableTermEntity8.state(glossaryObjectState0);
      MockDate mockDate0 = new MockDate((-3422L));
      writeableTermEntity8.setImportSourceCreatedOn(mockDate0);
      WriteableTermEntity writeableTermEntity10 = writeableTermEntity9.example("");
      writeableTermEntity5.getHasTypeTerms();
      writeableTermEntity3.getImportSourceCreatedBy();
      ArrayList<RelationshipObject> arrayList0 = new ArrayList<RelationshipObject>();
      writeableTermEntity9.setRelatedTermRelationships(arrayList0);
      writeableTermEntity2.relatedTerms((List<NewRelationship>) null);
      writeableTermEntity10.setExample("    classifications: ");
      writeableTermEntity3.getAbbreviations();
      writeableTermEntity4.abbreviations((List<String>) null);
      writeableTermEntity10.getImportSourceUsage();
      WriteableTermEntity writeableTermEntity11 = writeableTermEntity7.example("");
      assertSame(writeableTermEntity11, writeableTermEntity4);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.classifications(stack0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.dataClasses(stack0);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addDataClassesItem(newRelationship0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      RelationshipObject relationshipObject1 = relationshipObject0.entity(writeableTermEntity1);
      GlossaryObjectMetadata glossaryObjectMetadata0 = new GlossaryObjectMetadata();
      glossaryObjectMetadata0.setSourceRepositoryId("");
      RelationshipObject relationshipObject2 = relationshipObject1.metadata(glossaryObjectMetadata0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addRelatedTermRelationshipsItem(relationshipObject2);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.isATypeOfTerms(stack0);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.replacesTerms(stack0);
      assertNull(writeableTermEntity6.getImportSourceCreatedBy());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.dataClasses((List<NewRelationship>) null);
      writeableTermEntity1.replacesTerms((List<NewRelationship>) null);
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.DELETED;
      writeableTermEntity0.setState(glossaryObjectState0);
      writeableTermEntity0.getRelatedTerms();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.dataClasses((List<NewRelationship>) null);
      writeableTermEntity2.getIsATypeOfTerms();
      writeableTermEntity2.setIsOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity0.synonymTerms((List<NewRelationship>) null);
      writeableTermEntity3.getHasTerms();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity2.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity2.setExample("Connecting new channel: {}");
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.id("Connecting new channel: {}");
      NewRelationship newRelationship2 = newRelationship1.description("Connecting new channel: {}");
      newRelationship2.description("@");
      writeableTermEntity0.addReplacesTermsItem(newRelationship2);
      writeableTermEntity0.getRelatedTermRelationships();
      StringBuilder stringBuilder0 = new StringBuilder();
      writeableTermEntity3.toString(stringBuilder0);
      writeableTermEntity4.setReplacedByTerms((List<NewRelationship>) null);
      assertNull(writeableTermEntity4.getImportSourceUsage());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      newRelationship0.setId("k:/d9,g");
      NewRelationship newRelationship1 = newRelationship0.id("w~u@ODcds");
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addIsATypeOfTermsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem(newRelationship0);
      writeableTermEntity1.getRelatedTermRelationships();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity0.relatedTermRelationships((List<RelationshipObject>) null);
      newRelationship0.description("w~u@ODcds");
      newRelationship0.toString();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      writeableTermEntity1.setIsOfTerms(arrayList0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity2.hasTerms((List<NewRelationship>) null);
      writeableTermEntity4.hashCode();
      writeableTermEntity4.getHasTerms();
      writeableTermEntity0.setHasTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity0.relatedTerms(arrayList0);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.isATypeOfTerms((List<NewRelationship>) null);
      writeableTermEntity3.setImportSourceUsage("w~u@ODcds");
      writeableTermEntity5.categories(arrayList0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      relationshipObject0.equals("?j+3o[g.mJozfP@~)");
      writeableTermEntity5.isATypeOfTerms((List<NewRelationship>) null);
      writeableTermEntity3.addRelatedTermRelationshipsItem(relationshipObject0);
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity5.addAbbreviationsItem("ZRCb-`bLB/PTuNZ.sos");
      writeableTermEntity5.getRelatedTerms();
      writeableTermEntity3.getImportSourceCreatedOn();
      writeableTermEntity7.importSourceCreatedBy("-\"cTr+Hlr+!ZL;mop-K");
      writeableTermEntity6.getExample();
      writeableTermEntity0.getExample();
      writeableTermEntity3.getSynonymTerms();
      List<NewRelationship> list0 = writeableTermEntity5.getDataClasses();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.synonymTerms(arrayList0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.hasTerms(arrayList0);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addReplacesTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.importSourceUsage((String) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addIsOfTermsItem(newRelationship0);
      String string0 = writeableTermEntity5.getExample();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addSynonymTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addDataClassesItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addHasTypeTermsItem(newRelationship0);
      writeableTermEntity1.getRelatedTermRelationships();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.relatedTermRelationships((List<RelationshipObject>) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity2.addHasTypeTermsItem(newRelationship0);
      writeableTermEntity4.setImportSourceUsage("    dataClasses: ");
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getLocalListeners();
      writeableTermEntity3.setTags(list0);
      List<NewRelationship> list1 = writeableTermEntity1.getHasTypeTerms();
      writeableTermEntity1.equals(writeableTermEntity0);
      writeableTermEntity4.addHasTypeTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity3.replacedByTerms(list1);
      writeableTermEntity4.setHasTypeTerms(list1);
      writeableTermEntity4.getHasTerms();
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity2.addIsOfTermsItem(newRelationship0);
      writeableTermEntity6.getSynonymTerms();
      writeableTermEntity5.addSynonymTermsItem(newRelationship0);
      writeableTermEntity4.setExample("");
      writeableTermEntity7.importSourceCreatedBy("    replacedByTerms: ");
      WriteableTermEntity writeableTermEntity8 = writeableTermEntity4.relatedTerms(list1);
      assertNull(writeableTermEntity8.getLongDescription());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addIsATypeOfTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addAbbreviationsItem("");
      Class<EpollServerDomainSocketChannel> class0 = EpollServerDomainSocketChannel.class;
      XmlClass xmlClass0 = new XmlClass(class0);
      List<String> list0 = xmlClass0.getExcludedMethods();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.abbreviations(list0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addSynonymTermsItem(newRelationship0);
      writeableTermEntity1.getIsOfTerms();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.dataClasses((List<NewRelationship>) null);
      List<NewRelationship> list1 = writeableTermEntity5.getIsATypeOfTerms();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.hasTypeTerms(list1);
      assertSame(writeableTermEntity2, writeableTermEntity6);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addDataClassesItem(newRelationship0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addIsOfTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.importSourceCreatedBy("");
      NewRelationship newRelationship1 = newRelationship0.id("");
      NewRelationship newRelationship2 = newRelationship1.description("");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addReplacesTermsItem(newRelationship2);
      writeableTermEntity3.getClassifications();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.relatedTerms((List<NewRelationship>) null);
      String string0 = writeableTermEntity5.toString();
      List<NewRelationship> list0 = new Vector<NewRelationship>();
      String string1 = writeableTermEntity3.getImportSourceCreatedBy();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTermsItem(newRelationship0);
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      UnaryOperator<NewRelationship> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.hasTerms(stack0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacedByTerms(stack0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.replacesTerms(stack0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.isOfTerms(stack0);
      writeableTermEntity4.getRelatedTermRelationships();
      writeableTermEntity5.setRelatedTermRelationships((List<RelationshipObject>) null);
      writeableTermEntity3.getImportSourceCreatedOn();
      List<NewRelationship> list0 = writeableTermEntity0.getReplacedByTerms();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity0.synonymTerms(list0);
      writeableTermEntity6.setSynonymTerms(stack0);
      List<NewRelationship> list1 = writeableTermEntity0.getIsATypeOfTerms();
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.synonymTerms(vector0);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addReplacesTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.isATypeOfTerms(vector0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addSynonymTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addRelatedTermsItem(newRelationship0);
      Stack<String> stack0 = new Stack<String>();
      writeableTermEntity5.setAbbreviations(stack0);
      writeableTermEntity4.getReplacesTerms();
      String string0 = "    dataClasses: ";
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("    dataClasses: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addSynonymTermsItem(newRelationship0);
      writeableTermEntity0.getReplacedByTerms();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.replacesTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.importSourceCreatedBy("UC5&1;e%'Y*E30");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.classifications((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.dataClasses((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.addReplacesTermsItem(newRelationship0);
      writeableTermEntity5.setIsATypeOfTerms((List<NewRelationship>) null);
      writeableTermEntity5.addStewardIdsItem("UC5&1;e%'Y*E30");
      writeableTermEntity4.relatedTerms((List<NewRelationship>) null);
      writeableTermEntity6.getExample();
      writeableTermEntity5.addHasTermsItem(newRelationship0);
      writeableTermEntity2.getHasTerms();
      List<NewRelationship> list0 = writeableTermEntity0.getHasTerms();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.synonymTerms(vector0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.dataClasses(vector0);
      NewRelationship newRelationship0 = new NewRelationship();
      newRelationship0.equals(vector0);
      NewRelationship newRelationship1 = newRelationship0.description("u2DH5z[X;kgg1m-o");
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addIsOfTermsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.importSourceCreatedBy("u2DH5z[X;kgg1m-o");
      LinkedList<CustomAttribute> linkedList0 = new LinkedList<CustomAttribute>();
      linkedList0.pollLast();
      writeableTermEntity4.customAttributes(linkedList0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.hasTypeTerms(vector0);
      writeableTermEntity5.getImportSourceUsage();
      writeableTermEntity3.getImportSourceCreatedBy();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.example("u2DH5z[X;kgg1m-o");
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity6.addRelatedTermsItem(newRelationship0);
      writeableTermEntity1.setReplacesTerms(vector0);
      writeableTermEntity7.setSynonymTerms(vector0);
      writeableTermEntity7.hashCode();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      writeableTermEntity0.getDataClasses();
      writeableTermEntity0.setHasTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addIsATypeOfTermsItem(newRelationship0);
      NewRelationship newRelationship1 = newRelationship0.description("Yw:bq/EDWDe9eWU");
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addHasTermsItem(newRelationship0);
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      newRelationship0.description("Yw:bq/EDWDe9eWU");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.isATypeOfTerms(linkedList0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addAbbreviationsItem("Du");
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity2.synonymTerms(linkedList0);
      writeableTermEntity5.setImportSourceUsage("Du");
      linkedList0.add(newRelationship1);
      writeableTermEntity1.setImportSourceUsage("");
      writeableTermEntity5.toString();
      writeableTermEntity6.setReplacedByTerms(linkedList0);
      writeableTermEntity2.addIsATypeOfTermsItem(newRelationship0);
      String string0 = writeableTermEntity4.getImportSourceCreatedBy();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getImportSourceCreatedBy();
      writeableTermEntity0.addReplacesTermsItem((NewRelationship) null);
      XmlSuite xmlSuite0 = new XmlSuite();
      xmlSuite0.shallowCopy();
      List<NewRelationship> list0 = writeableTermEntity0.getDataClasses();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getSynonymTerms();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.classifications((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addReplacesTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addReplacedByTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addDataClassesItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.example("");
      List<NewRelationship> list0 = writeableTermEntity5.getDataClasses();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      Vector<RelationshipObject> vector0 = new Vector<RelationshipObject>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.relatedTermRelationships(vector0);
      writeableTermEntity0.getIsATypeOfTerms();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.hasTypeTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.description("?-/^%");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addIsATypeOfTermsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addDataClassesItem(newRelationship0);
      List<NewRelationship> list0 = writeableTermEntity5.getClassifications();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addClassificationsItem(newRelationship0);
      writeableTermEntity0.getHasTypeTerms();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.hasTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addHasTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.importSourceUsage("");
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addReplacedByTermsItem(newRelationship0);
      List<NewRelationship> list0 = writeableTermEntity5.getIsOfTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getIsATypeOfTerms();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.replacesTerms((List<NewRelationship>) null);
      assertNull(writeableTermEntity1.getExample());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getCategories();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.replacesTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.importSourceCreatedBy("g/k2Q@nPULPx+VU;!d");
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.example("");
      writeableTermEntity1.getReplacedByTerms();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.relatedTerms((List<NewRelationship>) null);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addRelatedTermRelationshipsItem(relationshipObject0);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.isOfTerms((List<NewRelationship>) null);
      assertNull(writeableTermEntity6.getName());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getReplacesTerms();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.classifications((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.replacedByTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addRelatedTermRelationshipsItem((RelationshipObject) null);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addSynonymTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.synonymTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.addReplacesTermsItem(newRelationship0);
      assertNull(writeableTermEntity6.getName());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.id("");
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addReplacedByTermsItem(newRelationship1);
      assertNull(writeableTermEntity1.getExample());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      writeableTermEntity1.getCategories();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.classifications((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      writeableTermEntity2.setParentCategory(newRelationship0);
      Object object0 = new Object();
      writeableTermEntity2.equals(object0);
      writeableTermEntity1.addIsOfTermsItem((NewRelationship) null);
      List<NewRelationship> list0 = writeableTermEntity1.getIsOfTerms();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.replacesTerms(arrayList0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addRelatedTermRelationshipsItem(relationshipObject0);
      NewRelationship newRelationship0 = new NewRelationship();
      newRelationship0.setId((String) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addRelatedTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.synonymTerms(arrayList0);
      writeableTermEntity0.addSynonymTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addClassificationsItem(newRelationship0);
      writeableTermEntity5.addRelatedTermsItem(newRelationship0);
      MockDate mockDate0 = new MockDate(4018, 4018, 4018);
      writeableTermEntity5.setImportSourceCreatedOn(mockDate0);
      LinkedList<RelationshipObject> linkedList0 = new LinkedList<RelationshipObject>();
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.synonymTerms(vector0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.replacedByTerms(vector0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.hasTypeTerms(vector0);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addHasTypeTermsItem(newRelationship0);
      writeableTermEntity4.replacesTerms(vector0);
      ArrayList<RelationshipObject> arrayList0 = new ArrayList<RelationshipObject>();
      // Undeclared exception!
      try { 
        arrayList0.subList(416, (-2303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(416) > toIndex(-2303)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTermsItem((NewRelationship) null);
      MockDate mockDate0 = new MockDate(2257, 2257, 1, 1, 0, 0);
      writeableTermEntity1.setImportSourceCreatedOn(mockDate0);
      assertSame(writeableTermEntity1, writeableTermEntity0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getRelatedTerms();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.dataClasses((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      writeableTermEntity1.setAbbreviations(arrayList0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addHasTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.synonymTerms((List<NewRelationship>) null);
      writeableTermEntity1.setSynonymTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addSynonymTermsItem(newRelationship0);
      writeableTermEntity4.setRelatedTerms((List<NewRelationship>) null);
      writeableTermEntity0.classifications((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity0.example("");
      assertSame(writeableTermEntity0, writeableTermEntity5);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getSynonymTerms();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.synonymTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.hasTypeTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.importSourceUsage("e)dF2>qH,A");
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addReplacedByTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addHasTermsItem(newRelationship0);
      NewRelationship newRelationship1 = new NewRelationship();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.addReplacedByTermsItem(newRelationship1);
      assertNull(writeableTermEntity6.getExample());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addReplacesTermsItem(newRelationship0);
      ArrayList<RelationshipObject> arrayList0 = new ArrayList<RelationshipObject>();
      writeableTermEntity1.setImportSourceCreatedBy("    example: ");
      newRelationship0.description("");
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.addHasTypeTermsItem(newRelationship0);
      writeableTermEntity2.addReplacesTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity0.importSourceUsage("VERc$0d-_t.");
      assertSame(writeableTermEntity0, writeableTermEntity3);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTermsItem(newRelationship0);
      Vector<RelationshipObject> vector0 = new Vector<RelationshipObject>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.relatedTermRelationships(vector0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addRelatedTermRelationshipsItem(relationshipObject0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addIsOfTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addIsATypeOfTermsItem(newRelationship0);
      writeableTermEntity5.hashCode();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.addIsOfTermsItem(newRelationship0);
      writeableTermEntity4.addIsOfTermsItem(newRelationship0);
      writeableTermEntity0.setImportSourceUsage("@ >v<J'=cmNTAL'");
      List<NewRelationship> list0 = writeableTermEntity2.getIsOfTerms();
      writeableTermEntity5.relatedTermRelationships(vector0);
      writeableTermEntity5.setIsATypeOfTerms(list0);
      writeableTermEntity6.addClassificationsItem(newRelationship0);
      writeableTermEntity2.setExample("");
      writeableTermEntity3.getClassifications();
      List<NewRelationship> list1 = writeableTermEntity1.getRelatedTerms();
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isOfTerms(stack0);
      List<NewRelationship> list0 = writeableTermEntity1.getIsOfTerms();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.hasTypeTerms(list0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.classifications(list0);
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.id((String) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addClassificationsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addHasTermsItem(newRelationship1);
      writeableTermEntity5.addReplacedByTermsItem(newRelationship0);
      writeableTermEntity4.setDataClasses(list0);
      writeableTermEntity2.setIsOfTerms(stack0);
      assertTrue(stack0.contains(newRelationship1));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.replacesTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addHasTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addRelatedTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addDataClassesItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.synonymTerms((List<NewRelationship>) null);
      writeableTermEntity5.setClassifications((List<NewRelationship>) null);
      assertNull(writeableTermEntity5.getImportSourceCreatedBy());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.addAbbreviationsItem("rV>9e4?|s\"Q1");
      writeableTermEntity0.getIsOfTerms();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.classifications((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.importSourceUsage("rV>9e4?|s\"Q1");
      writeableTermEntity1.getSynonymTerms();
      writeableTermEntity2.setReplacedByTerms((List<NewRelationship>) null);
      writeableTermEntity0.hasTypeTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity1.example("n >= 0 required but it was ");
      writeableTermEntity1.getIsATypeOfTerms();
      writeableTermEntity3.setDataClasses((List<NewRelationship>) null);
      String string0 = writeableTermEntity3.getExample();
      String string1 = writeableTermEntity1.getImportSourceUsage();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.relatedTerms(linkedList0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.isATypeOfTerms(linkedList0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.example("task");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addDataClassesItem((NewRelationship) null);
      writeableTermEntity1.getHasTerms();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.dataClasses((List<NewRelationship>) null);
      writeableTermEntity5.setHasTerms(linkedList0);
      assertSame(writeableTermEntity3, writeableTermEntity5);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getAbbreviations();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.abbreviations((List<String>) null);
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.hasTerms(vector0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addRelatedTermRelationshipsItem(relationshipObject0);
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.description("");
      NewRelationship newRelationship2 = newRelationship1.id("h@sf|xq#B+^b#ACOO");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addClassificationsItem(newRelationship2);
      writeableTermEntity4.example("h@sf|xq#B+^b#ACOO");
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("h@sf|xq#B+^b#ACOO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addRelatedTermsItem(newRelationship0);
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.isATypeOfTerms(arrayList0);
      writeableTermEntity2.addHasTermsItem(newRelationship0);
      // Undeclared exception!
      try { 
        writeableTermEntity1.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.GlossaryObjectEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addReplacesTermsItem(newRelationship0);
      writeableTermEntity1.addIsATypeOfTermsItem(newRelationship0);
      newRelationship0.description("");
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.importSourceUsage("VERc$0d-_t.");
      assertNull(writeableTermEntity2.getShortDescription());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addRelatedTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addHasTermsItem(newRelationship0);
      List<NewRelationship> list0 = writeableTermEntity2.getRelatedTerms();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity1.classifications(list0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addReplacesTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.importSourceUsage((String) null);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.replacedByTerms(list0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity6.addRelatedTermRelationshipsItem(relationshipObject0);
      assertSame(writeableTermEntity5, writeableTermEntity7);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.replacedByTerms(arrayList0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.importSourceCreatedBy("    replacesTerms: ");
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addRelatedTermRelationshipsItem((RelationshipObject) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.dataClasses(arrayList0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.example("    replacesTerms: ");
      writeableTermEntity5.setDataClasses(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTypeTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addSynonymTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addClassificationsItem(newRelationship0);
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      writeableTermEntity3.setRelatedTerms(stack0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.hasTerms(stack0);
      stack0.add(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addAbbreviationsItem((String) null);
      writeableTermEntity3.toString();
      writeableTermEntity5.setCategories(stack0);
      writeableTermEntity5.customAttributes((List<CustomAttribute>) null);
      stack0.subList(0, 0);
      List<NewRelationship> list0 = writeableTermEntity2.getHasTypeTerms();
      newRelationship0.equals(writeableTermEntity1);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity1.hasTypeTerms(list0);
      Vector<String> vector0 = new Vector<String>();
      writeableTermEntity6.stewardIds(vector0);
      writeableTermEntity5.setImportSourceUsage("");
      writeableTermEntity5.toString();
      writeableTermEntity4.addAbbreviationsItem("com.ibm.watson.data.client.model.WriteableTermEntity");
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity2.addHasTermsItem(newRelationship0);
      assertSame(writeableTermEntity7, writeableTermEntity0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTermsItem((NewRelationship) null);
      writeableTermEntity1.getClassifications();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.isOfTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.description("");
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addReplacedByTermsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.synonymTerms((List<NewRelationship>) null);
      LinkedList<RelationshipObject> linkedList0 = new LinkedList<RelationshipObject>();
      writeableTermEntity4.setRelatedTermRelationships(linkedList0);
      assertSame(writeableTermEntity0, writeableTermEntity4);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getCategories();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.synonymTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.isATypeOfTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addDataClassesItem(newRelationship0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.isOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.hasTerms((List<NewRelationship>) null);
      LinkedList<RelationshipObject> linkedList0 = new LinkedList<RelationshipObject>();
      writeableTermEntity5.setRelatedTermRelationships(linkedList0);
      assertSame(writeableTermEntity5, writeableTermEntity4);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTypeTermsItem(newRelationship0);
      NewRelationship newRelationship1 = newRelationship0.id("cE\"I4cGC_?^fZ|");
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.importSourceCreatedOn((Date) null);
      List<NewRelationship> list0 = writeableTermEntity0.getHasTypeTerms();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.dataClasses(list0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.hasTerms(list0);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.dataClasses(list0);
      assertSame(writeableTermEntity6, writeableTermEntity1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addReplacesTermsItem((NewRelationship) null);
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.PUBLISHED;
      writeableTermEntity4.setState(glossaryObjectState0);
      writeableTermEntity3.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addIsOfTermsItem((NewRelationship) null);
      writeableTermEntity5.getImportSourceCreatedOn();
      String string0 = writeableTermEntity1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getDataClasses();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.hasTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addHasTypeTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addSynonymTermsItem(newRelationship0);
      ArrayList<RelationshipObject> arrayList0 = new ArrayList<RelationshipObject>();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.relatedTermRelationships(arrayList0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.isOfTerms((List<NewRelationship>) null);
      writeableTermEntity5.setImportSourceUsage("Sm|,gxo)|");
      assertNull(writeableTermEntity5.getState());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addReplacedByTermsItem(newRelationship0);
      HashSet<NewRelationship> hashSet0 = new HashSet<NewRelationship>();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>(hashSet0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.hasTypeTerms(vector0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addAbbreviationsItem("13Oh");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.dataClasses(vector0);
      writeableTermEntity4.setHasTypeTerms(vector0);
      assertSame(writeableTermEntity3, writeableTermEntity4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getRelatedTerms();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.hasTerms((List<NewRelationship>) null);
      assertNull(writeableTermEntity1.getName());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.id("4oK;h");
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addRelatedTermsItem(newRelationship1);
      List<NewRelationship> list0 = writeableTermEntity1.getReplacesTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addDataClassesItem(newRelationship0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addHasTypeTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.example("lR");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addReplacedByTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.classifications((List<NewRelationship>) null);
      String string0 = writeableTermEntity5.getImportSourceCreatedBy();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms(linkedList0);
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.synonymTerms(stack0);
      writeableTermEntity2.setHasTypeTerms(stack0);
      writeableTermEntity1.setExample(" 5a=hWz9`;U");
      GlossaryObjectMetadata glossaryObjectMetadata0 = new GlossaryObjectMetadata();
      GlossaryObjectMetadata glossaryObjectMetadata1 = glossaryObjectMetadata0.globalId(" 5a=hWz9`;U");
      Boolean boolean0 = Boolean.valueOf(false);
      GlossaryObjectMetadata glossaryObjectMetadata2 = glossaryObjectMetadata1.userAccess(boolean0);
      GlossaryObjectMetadata glossaryObjectMetadata3 = glossaryObjectMetadata2.revision(" 5a=hWz9`;U");
      glossaryObjectMetadata3.getTags();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity0.abbreviations((List<String>) null);
      assertNull(writeableTermEntity3.getImportSourceCreatedBy());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getReplacedByTerms();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.synonymTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.isATypeOfTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addReplacesTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addHasTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.classifications((List<NewRelationship>) null);
      writeableTermEntity2.getAbbreviations();
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity5.abbreviations((List<String>) null);
      assertNull(writeableTermEntity6.getLongDescription());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addIsOfTermsItem(newRelationship0);
      Stack<RelationshipObject> stack0 = new Stack<RelationshipObject>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.relatedTermRelationships(stack0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.example("");
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      writeableTermEntity1.categories(arrayList0);
      Stack<NewRelationship> stack1 = new Stack<NewRelationship>();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.isATypeOfTerms(stack1);
      Stack<String> stack2 = new Stack<String>();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.abbreviations(stack2);
      writeableTermEntity5.getRelatedTermRelationships();
      writeableTermEntity1.addDataClassesItem(newRelationship0);
      String string0 = writeableTermEntity5.getImportSourceUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.description("Bk$=~*HM");
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTermsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.example((String) null);
      LinkedList<RelationshipObject> linkedList0 = new LinkedList<RelationshipObject>();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.relatedTermRelationships(linkedList0);
      List<NewRelationship> list0 = writeableTermEntity3.getHasTypeTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getReplacesTerms();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.classifications((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.relatedTerms((List<NewRelationship>) null);
      XmlDefine xmlDefine0 = new XmlDefine();
      List<String> list0 = xmlDefine0.getIncludes();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.abbreviations(list0);
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.id("}M~>_X");
      NewRelationship newRelationship2 = newRelationship1.description("}M~>_X");
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addClassificationsItem(newRelationship2);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.importSourceCreatedBy("}M~>_X");
      String string0 = writeableTermEntity5.getImportSourceUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getDataClasses();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      LinkedList<java.util.Locale.LanguageRange> linkedList0 = new LinkedList<java.util.Locale.LanguageRange>();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) linkedList0, (Collection<String>) linkedBlockingDeque0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.abbreviations(list0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.importSourceCreatedBy("    relatedTermRelationships: ");
      assertNull(writeableTermEntity3.getName());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getIsOfTerms();
      writeableTermEntity0.setReplacesTerms((List<NewRelationship>) null);
      assertNull(writeableTermEntity0.getState());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.replacesTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addReplacesTermsItem((NewRelationship) null);
      writeableTermEntity3.addIsATypeOfTermsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity5 = new WriteableTermEntity();
      writeableTermEntity5.getImportSourceCreatedOn();
      writeableTermEntity1.isOfTerms((List<NewRelationship>) null);
      writeableTermEntity1.toString();
      boolean boolean0 = writeableTermEntity5.equals(writeableTermEntity2);
      assertFalse(boolean0);
      
      writeableTermEntity4.getIsATypeOfTerms();
      writeableTermEntity0.hasTerms((List<NewRelationship>) null);
      assertFalse(writeableTermEntity0.equals((Object)writeableTermEntity5));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addIsOfTermsItem(newRelationship0);
      newRelationship0.toString();
      WriteableTermEntity writeableTermEntity2 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity1.addIsOfTermsItem(newRelationship0);
      boolean boolean0 = writeableTermEntity3.equals(writeableTermEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addReplacedByTermsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity2 = new WriteableTermEntity();
      boolean boolean0 = writeableTermEntity2.equals(writeableTermEntity1);
      assertFalse(boolean0);
      
      writeableTermEntity1.getAbbreviations();
      writeableTermEntity0.importSourceCreatedBy("T=AcA]ye]");
      assertFalse(writeableTermEntity0.equals((Object)writeableTermEntity2));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity2 = new WriteableTermEntity();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      writeableTermEntity1.setDataClasses(linkedList0);
      writeableTermEntity1.equals(writeableTermEntity0);
      writeableTermEntity1.getRelatedTerms();
      NewRelationship newRelationship0 = new NewRelationship();
      assertNull(newRelationship0.getDescription());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTypeTermsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity2 = new WriteableTermEntity();
      writeableTermEntity2.getImportSourceCreatedOn();
      boolean boolean0 = writeableTermEntity2.equals(writeableTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      writeableTermEntity0.addHasTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity1 = new WriteableTermEntity();
      boolean boolean0 = writeableTermEntity1.equals(writeableTermEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.isATypeOfTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      writeableTermEntity0.addReplacesTermsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = new WriteableTermEntity();
      writeableTermEntity3.getImportSourceCreatedOn();
      writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      boolean boolean0 = writeableTermEntity3.equals(writeableTermEntity2);
      assertFalse(boolean0);
      
      writeableTermEntity3.getReplacesTerms();
      writeableTermEntity1.toString();
      assertFalse(writeableTermEntity0.equals((Object)writeableTermEntity3));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addClassificationsItem((NewRelationship) null);
      writeableTermEntity1.replacesTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = new WriteableTermEntity();
      writeableTermEntity2.getImportSourceCreatedOn();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      writeableTermEntity3.addAbbreviationsItem("");
      boolean boolean0 = writeableTermEntity2.equals(writeableTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = new WriteableTermEntity();
      writeableTermEntity0.toString();
      assertTrue(writeableTermEntity0.equals((Object)writeableTermEntity1));
      
      writeableTermEntity0.addAbbreviationsItem("class WriteableTermEntity {\n    longDescription: null\n    state: null\n    customAttributes: null\n    name: null\n    shortDescription: null\n    effectiveStartDate: null\n    effectiveEndDate: null\n    tags: null\n    stewardIds: null\n    parentCategory: null\n    categories: null\n    abbreviations: null\n    importSourceCreatedBy: null\n    importSourceCreatedOn: null\n    importSourceUsage: null\n    example: null\n    relatedTermRelationships: null\n    isATypeOfTerms: null\n    hasTypeTerms: null\n    isOfTerms: null\n    hasTerms: null\n    synonymTerms: null\n    relatedTerms: null\n    replacesTerms: null\n    replacedByTerms: null\n    dataClasses: null\n    classifications: null\n}");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      writeableTermEntity1.setTags(linkedList0);
      writeableTermEntity1.equals(writeableTermEntity0);
      writeableTermEntity1.toString();
      assertFalse(writeableTermEntity1.equals((Object)writeableTermEntity0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      Vector<RelationshipObject> vector0 = new Vector<RelationshipObject>();
      writeableTermEntity0.setRelatedTermRelationships(vector0);
      WriteableTermEntity writeableTermEntity1 = new WriteableTermEntity();
      writeableTermEntity1.getImportSourceCreatedOn();
      writeableTermEntity0.toString();
      boolean boolean0 = writeableTermEntity1.equals(writeableTermEntity0);
      assertFalse(boolean0);
      
      boolean boolean1 = writeableTermEntity0.equals(vector0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addClassificationsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.addSynonymTermsItem((NewRelationship) null);
      writeableTermEntity2.addReplacesTermsItem((NewRelationship) null);
      WriteableTermEntity writeableTermEntity3 = new WriteableTermEntity();
      writeableTermEntity3.getImportSourceCreatedOn();
      writeableTermEntity0.toString();
      boolean boolean0 = writeableTermEntity3.equals(writeableTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.example(".errors");
      WriteableTermEntity writeableTermEntity1 = new WriteableTermEntity();
      boolean boolean0 = writeableTermEntity1.equals(writeableTermEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      Stack<RelationshipObject> stack0 = new Stack<RelationshipObject>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addDataClassesItem(newRelationship0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity0.addClassificationsItem(newRelationship0);
      Stack<NewRelationship> stack1 = new Stack<NewRelationship>();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addClassificationsItem(newRelationship0);
      Stack<String> stack2 = new Stack<String>();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.abbreviations(stack2);
      writeableTermEntity4.getRelatedTermRelationships();
      writeableTermEntity0.addDataClassesItem(newRelationship0);
      writeableTermEntity4.getImportSourceUsage();
      writeableTermEntity1.replacedByTerms(stack1);
      writeableTermEntity3.getIsOfTerms();
      RelationshipObject relationshipObject0 = new RelationshipObject();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getSynonymTerms();
      NewRelationship newRelationship0 = new NewRelationship();
      writeableTermEntity0.setCategories((List<NewRelationship>) null);
      writeableTermEntity0.getReplacesTerms();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addIsATypeOfTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.synonymTerms((List<NewRelationship>) null);
      MockDate mockDate0 = new MockDate(2007, 2007, 2007);
      writeableTermEntity1.addCategoriesItem(newRelationship0);
      newRelationship0.equals(writeableTermEntity0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity0.addReplacesTermsItem(newRelationship0);
      writeableTermEntity3.setImportSourceCreatedOn(mockDate0);
      writeableTermEntity1.setClassifications((List<NewRelationship>) null);
      writeableTermEntity2.setImportSourceUsage((String) null);
      writeableTermEntity3.toIndentedString((Object) null);
      writeableTermEntity1.getImportSourceCreatedBy();
      writeableTermEntity3.equals((Object) null);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity2.addReplacedByTermsItem(newRelationship0);
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.DELETED;
      writeableTermEntity4.setState(glossaryObjectState0);
      writeableTermEntity4.toString();
      List<String> list0 = writeableTermEntity2.getAbbreviations();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.hasTypeTerms(vector0);
      MockDate mockDate0 = new MockDate((-1094), (-1094), (-1094), (-1094), (-1094));
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.importSourceCreatedOn(mockDate0);
      ArrayList<RelationshipObject> arrayList0 = new ArrayList<RelationshipObject>();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity0.relatedTermRelationships(arrayList0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity2.addReplacesTermsItem(newRelationship0);
      mockDate0.setTime((-1094));
      writeableTermEntity3.setHasTerms(vector0);
      writeableTermEntity0.addTagsItem((String) null);
      writeableTermEntity3.getIsOfTerms();
      writeableTermEntity2.setReplacesTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity3.dataClasses(vector0);
      writeableTermEntity2.getClassifications();
      NewRelationship newRelationship1 = new NewRelationship();
      NewRelationship newRelationship2 = newRelationship1.id((String) null);
      writeableTermEntity4.addHasTypeTermsItem(newRelationship1);
      writeableTermEntity4.addDataClassesItem(newRelationship2);
      List<NewRelationship> list0 = writeableTermEntity5.getDataClasses();
      assertTrue(list0.contains(newRelationship2));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.importSourceUsage("    hasTerms: ");
      assertEquals("    hasTerms: ", writeableTermEntity1.getImportSourceUsage());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.synonymTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      writeableTermEntity1.addHasTypeTermsItem(newRelationship0);
      writeableTermEntity0.equals(writeableTermEntity0);
      writeableTermEntity0.addHasTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addHasTermsItem(newRelationship0);
      assertNull(writeableTermEntity2.getExample());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      writeableTermEntity0.getClassifications();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.hasTypeTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.replacedByTerms((List<NewRelationship>) null);
      NewRelationship newRelationship0 = new NewRelationship();
      NewRelationship newRelationship1 = newRelationship0.description("(8x^JA!]:PDJ^~H*");
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity1.addHasTypeTermsItem(newRelationship1);
      NewRelationship newRelationship2 = new NewRelationship();
      writeableTermEntity2.addRelatedTermsItem(newRelationship0);
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      NewRelationship newRelationship3 = new NewRelationship();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addRelatedTermsItem(newRelationship3);
      assertNull(writeableTermEntity4.getLongDescription());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addHasTermsItem(newRelationship0);
      Vector<RelationshipObject> vector0 = new Vector<RelationshipObject>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.relatedTermRelationships(vector0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addRelatedTermRelationshipsItem(relationshipObject0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.addIsOfTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity4.addIsATypeOfTermsItem(newRelationship0);
      writeableTermEntity2.addHasTermsItem(newRelationship0);
      List<NewRelationship> list0 = writeableTermEntity2.getIsOfTerms();
      writeableTermEntity5.setIsATypeOfTerms(list0);
      writeableTermEntity2.setExample("");
      writeableTermEntity3.getDataClasses();
      List<NewRelationship> list1 = writeableTermEntity1.getRelatedTerms();
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      XmlDefine xmlDefine0 = new XmlDefine();
      List<String> list0 = xmlDefine0.getIncludes();
      writeableTermEntity0.setAbbreviations(list0);
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addRelatedTermsItem((NewRelationship) null);
      writeableTermEntity1.getDataClasses();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.hasTypeTerms((List<NewRelationship>) null);
      writeableTermEntity0.getCategories();
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.isATypeOfTerms((List<NewRelationship>) null);
      writeableTermEntity1.setHasTypeTerms((List<NewRelationship>) null);
      writeableTermEntity1.setReplacedByTerms((List<NewRelationship>) null);
      writeableTermEntity2.hashCode();
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity0.addHasTermsItem((NewRelationship) null);
      assertSame(writeableTermEntity4, writeableTermEntity3);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addRelatedTermsItem(newRelationship0);
      writeableTermEntity0.getHasTypeTerms();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addSynonymTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity2.addClassificationsItem(newRelationship0);
      writeableTermEntity3.setDataClasses((List<NewRelationship>) null);
      writeableTermEntity1.addIsATypeOfTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity3.isOfTerms((List<NewRelationship>) null);
      writeableTermEntity2.getAbbreviations();
      writeableTermEntity2.setHasTypeTerms((List<NewRelationship>) null);
      writeableTermEntity1.setImportSourceCreatedBy("ctcyG{V>*R}");
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity1.addSynonymTermsItem(newRelationship0);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity2.addDataClassesItem(newRelationship0);
      writeableTermEntity6.classifications((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity5.addDataClassesItem(newRelationship0);
      assertSame(writeableTermEntity7, writeableTermEntity4);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.replacedByTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.addClassificationsItem((NewRelationship) null);
      writeableTermEntity2.setRelatedTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity3 = new WriteableTermEntity();
      writeableTermEntity3.getImportSourceCreatedOn();
      writeableTermEntity0.synonymTerms((List<NewRelationship>) null);
      boolean boolean0 = writeableTermEntity3.equals(writeableTermEntity2);
      assertFalse(boolean0);
      
      writeableTermEntity3.getRelatedTerms();
      assertFalse(writeableTermEntity3.equals((Object)writeableTermEntity0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = new WriteableTermEntity();
      boolean boolean0 = writeableTermEntity1.equals(writeableTermEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      WriteableTermEntity writeableTermEntity0 = new WriteableTermEntity();
      WriteableTermEntity writeableTermEntity1 = writeableTermEntity0.addRelatedTermRelationshipsItem((RelationshipObject) null);
      NewRelationship newRelationship0 = new NewRelationship();
      newRelationship0.setId("channelResources");
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      WriteableTermEntity writeableTermEntity2 = writeableTermEntity1.isATypeOfTerms(stack0);
      writeableTermEntity1.addClassificationsItem(newRelationship0);
      NewRelationship newRelationship1 = newRelationship0.description("=[ClEe@j");
      WriteableTermEntity writeableTermEntity3 = writeableTermEntity1.addReplacedByTermsItem(newRelationship1);
      WriteableTermEntity writeableTermEntity4 = writeableTermEntity0.addReplacedByTermsItem(newRelationship0);
      writeableTermEntity3.getExample();
      WriteableTermEntity writeableTermEntity5 = writeableTermEntity0.addReplacesTermsItem(newRelationship0);
      newRelationship0.equals("channelResources");
      writeableTermEntity5.setIsOfTerms(stack0);
      writeableTermEntity5.getDataClasses();
      writeableTermEntity3.setSynonymTerms((List<NewRelationship>) null);
      WriteableTermEntity writeableTermEntity6 = writeableTermEntity1.importSourceCreatedBy("    relatedTermRelationships: ");
      writeableTermEntity6.addIsATypeOfTermsItem(newRelationship1);
      writeableTermEntity5.getReplacedByTerms();
      writeableTermEntity2.addClassificationsItem(newRelationship1);
      writeableTermEntity4.addAbbreviationsItem("");
      WriteableTermEntity writeableTermEntity7 = writeableTermEntity4.addReplacesTermsItem(newRelationship1);
      assertNull(writeableTermEntity7.getLongDescription());
  }
}
