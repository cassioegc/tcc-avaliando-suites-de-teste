/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 02:20:18 GMT 2021
 */

package com.ibm.watson.data.client.model.enums;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.enums.DataSchemaFieldType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataSchemaFieldType_ESTest extends DataSchemaFieldType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DataSchemaFieldType dataSchemaFieldType0 = DataSchemaFieldType.fromValue("date");
      assertEquals(DataSchemaFieldType.DATE, dataSchemaFieldType0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DataSchemaFieldType[] dataSchemaFieldTypeArray0 = DataSchemaFieldType.values();
      assertEquals(11, dataSchemaFieldTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DataSchemaFieldType dataSchemaFieldType0 = DataSchemaFieldType.valueOf("FLOAT64");
      assertEquals(DataSchemaFieldType.FLOAT64, dataSchemaFieldType0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DataSchemaFieldType dataSchemaFieldType0 = DataSchemaFieldType.fromValue("integer");
      assertEquals(DataSchemaFieldType.INTEGER, dataSchemaFieldType0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        DataSchemaFieldType.fromValue(",d:(  3TG.xc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value ',d:(  3TG.xc'
         //
         verifyException("com.ibm.watson.data.client.model.enums.DataSchemaFieldType", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DataSchemaFieldType dataSchemaFieldType0 = DataSchemaFieldType.INTEGER;
      String string0 = dataSchemaFieldType0.getValue();
      assertEquals("integer", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DataSchemaFieldType dataSchemaFieldType0 = DataSchemaFieldType.DATE;
      String string0 = dataSchemaFieldType0.toString();
      assertEquals("date", string0);
  }
}
