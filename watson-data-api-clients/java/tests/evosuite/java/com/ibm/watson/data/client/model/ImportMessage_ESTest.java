/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:35:20 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.ImportMessage;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlDefine;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImportMessage_ESTest extends ImportMessage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      Long long0 = new Long(0L);
      ImportMessage importMessage1 = importMessage0.recordNumber(long0);
      Long long1 = importMessage1.getRecordNumber();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      Long long0 = new Long(784L);
      ImportMessage importMessage1 = importMessage0.recordNumber(long0);
      Long long1 = importMessage1.getRecordNumber();
      assertEquals(784L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      Long long0 = new Long((-1L));
      importMessage0.recordNumber(long0);
      Long long1 = importMessage0.getRecordNumber();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      XmlDefine xmlDefine0 = new XmlDefine();
      List<String> list0 = xmlDefine0.getIncludes();
      ImportMessage importMessage1 = importMessage0.parameters(list0);
      List<String> list1 = importMessage1.getParameters();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      ImportMessage importMessage1 = importMessage0.addParametersItem("");
      List<String> list0 = importMessage1.getParameters();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      importMessage0.messageTemplate("com.ibm.watson.data.client.model.ImportMessage");
      String string0 = importMessage0.getMessageTemplate();
      assertEquals("com.ibm.watson.data.client.model.ImportMessage", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      Long long0 = new Long(0L);
      importMessage0.lineNumber(long0);
      Long long1 = importMessage0.getLineNumber();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      Long long0 = new Long(2151L);
      importMessage0.lineNumber(long0);
      Long long1 = importMessage0.getLineNumber();
      assertEquals(2151L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      Long long0 = new Long((-4213L));
      importMessage0.lineNumber(long0);
      Long long1 = importMessage0.getLineNumber();
      assertEquals((-4213L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      importMessage0.code("reactor.core.publisher.FluxConcatIterable");
      String string0 = importMessage0.getCode();
      assertEquals("reactor.core.publisher.FluxConcatIterable", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      importMessage0.code("");
      String string0 = importMessage0.getCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (-2049));
      List<String> list0 = xmlTest0.getExcludedGroups();
      ImportMessage importMessage1 = importMessage0.parameters(list0);
      // Undeclared exception!
      try { 
        importMessage1.addParametersItem("6?n");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      importMessage0.setMessageTemplate("");
      String string0 = importMessage0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      ImportMessage importMessage1 = new ImportMessage();
      boolean boolean0 = importMessage0.equals(importMessage1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      importMessage0.setMessageTemplate("");
      ImportMessage importMessage1 = new ImportMessage();
      ImportMessage importMessage2 = importMessage0.addParametersItem("");
      boolean boolean0 = importMessage2.equals(importMessage1);
      assertFalse(importMessage1.equals((Object)importMessage0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      importMessage0.setCode("org.testng.internal.WrappedTestNGMethod");
      ImportMessage importMessage1 = new ImportMessage();
      boolean boolean0 = importMessage1.equals(importMessage0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      ImportMessage importMessage1 = new ImportMessage();
      assertTrue(importMessage1.equals((Object)importMessage0));
      
      Long long0 = new Long(0L);
      importMessage1.setRecordNumber(long0);
      boolean boolean0 = importMessage0.equals(importMessage1);
      assertFalse(importMessage1.equals((Object)importMessage0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      boolean boolean0 = importMessage0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      boolean boolean0 = importMessage0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      boolean boolean0 = importMessage0.equals(importMessage0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      ImportMessage importMessage1 = new ImportMessage();
      assertTrue(importMessage1.equals((Object)importMessage0));
      
      ImportMessage importMessage2 = importMessage0.addParametersItem("");
      boolean boolean0 = importMessage2.equals(importMessage1);
      assertFalse(importMessage1.equals((Object)importMessage0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      importMessage0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      Long long0 = importMessage0.getRecordNumber();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      List<String> list0 = importMessage0.getParameters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      String string0 = importMessage0.getCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      String string0 = importMessage0.getMessageTemplate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      importMessage0.setLineNumber((Long) null);
      assertNull(importMessage0.getLineNumber());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      Long long0 = new Long(0L);
      importMessage0.lineNumber(long0);
      ImportMessage importMessage1 = new ImportMessage();
      boolean boolean0 = importMessage1.equals(importMessage0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      Long long0 = importMessage0.getLineNumber();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      importMessage0.messageTemplate("");
      String string0 = importMessage0.getMessageTemplate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImportMessage importMessage0 = new ImportMessage();
      importMessage0.setParameters((List<String>) null);
      assertNull(importMessage0.getRecordNumber());
  }
}
