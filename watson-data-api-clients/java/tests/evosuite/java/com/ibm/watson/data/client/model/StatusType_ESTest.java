/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:56:23 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.StatusType;
import com.ibm.watson.data.client.model.enums.StatusFamily;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StatusType_ESTest extends StatusType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      Integer integer0 = new Integer((-3894));
      StatusType statusType1 = statusType0.statusCode(integer0);
      Integer integer1 = statusType1.getStatusCode();
      assertEquals((-3894), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      Integer integer0 = new Integer(0);
      statusType0.statusCode(integer0);
      Integer integer1 = statusType0.getStatusCode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      Integer integer0 = new Integer(2382);
      statusType0.statusCode(integer0);
      Integer integer1 = statusType0.getStatusCode();
      assertEquals(2382, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      StatusType statusType1 = statusType0.reasonPhrase("[z0e");
      String string0 = statusType1.getReasonPhrase();
      assertEquals("[z0e", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      statusType0.reasonPhrase("");
      String string0 = statusType0.getReasonPhrase();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      StatusType statusType1 = new StatusType();
      boolean boolean0 = statusType0.equals(statusType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      StatusType statusType1 = new StatusType();
      assertTrue(statusType1.equals((Object)statusType0));
      
      StatusFamily statusFamily0 = StatusFamily.INFORMATIONAL;
      statusType1.family(statusFamily0);
      boolean boolean0 = statusType0.equals(statusType1);
      assertFalse(statusType1.equals((Object)statusType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      StatusType statusType1 = new StatusType();
      Integer integer0 = new Integer(1);
      statusType1.setStatusCode(integer0);
      boolean boolean0 = statusType0.equals(statusType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      StatusFamily statusFamily0 = StatusFamily.OTHER;
      boolean boolean0 = statusType0.equals(statusFamily0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      boolean boolean0 = statusType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      boolean boolean0 = statusType0.equals(statusType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      statusType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      statusType0.getFamily();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      Integer integer0 = statusType0.getStatusCode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      String string0 = statusType0.toString();
      assertEquals("class StatusType {\n    statusCode: null\n    family: null\n    reasonPhrase: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      StatusFamily statusFamily0 = StatusFamily.SUCCESSFUL;
      statusType0.setFamily(statusFamily0);
      assertEquals(StatusFamily.SUCCESSFUL, statusType0.getFamily());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      StatusFamily statusFamily0 = StatusFamily.INFORMATIONAL;
      StatusType statusType1 = statusType0.family(statusFamily0);
      StatusFamily statusFamily1 = statusType1.getFamily();
      assertSame(statusFamily0, statusFamily1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      statusType0.setReasonPhrase("");
      StatusType statusType1 = new StatusType();
      boolean boolean0 = statusType0.equals(statusType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      statusType0.reasonPhrase("");
      String string0 = statusType0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatusType statusType0 = new StatusType();
      String string0 = statusType0.getReasonPhrase();
      assertNull(string0);
  }
}
