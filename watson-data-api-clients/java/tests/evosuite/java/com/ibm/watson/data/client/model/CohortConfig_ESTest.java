/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:39:23 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.CohortConfig;
import com.ibm.watson.data.client.model.Connection;
import com.ibm.watson.data.client.model.TypeDefSummary;
import com.ibm.watson.data.client.model.enums.EventTypeFilter;
import com.ibm.watson.data.client.model.enums.OMRSProtocolVersion;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.internal.DynamicGraph;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CohortConfig_ESTest extends CohortConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      Stack<TypeDefSummary> stack0 = new Stack<TypeDefSummary>();
      cohortConfig0.selectedTypesToProcess(stack0);
      List<TypeDefSummary> list0 = cohortConfig0.getSelectedTypesToProcess();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      TypeDefSummary typeDefSummary0 = new TypeDefSummary();
      cohortConfig0.addSelectedTypesToProcessItem(typeDefSummary0);
      List<TypeDefSummary> list0 = cohortConfig0.getSelectedTypesToProcess();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      EventTypeFilter eventTypeFilter0 = EventTypeFilter.ALL;
      cohortConfig0.setEventsToProcessRule(eventTypeFilter0);
      EventTypeFilter eventTypeFilter1 = cohortConfig0.getEventsToProcessRule();
      assertEquals("ALL", eventTypeFilter1.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      Connection connection0 = new Connection();
      CohortConfig cohortConfig1 = cohortConfig0.cohortRegistryConnection(connection0);
      Connection connection1 = cohortConfig1.getCohortRegistryConnection();
      assertNull(connection1.getDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      OMRSProtocolVersion oMRSProtocolVersion0 = OMRSProtocolVersion.V1;
      cohortConfig0.cohortOMRSTopicProtocolVersion(oMRSProtocolVersion0);
      OMRSProtocolVersion oMRSProtocolVersion1 = cohortConfig0.getCohortOMRSTopicProtocolVersion();
      assertSame(oMRSProtocolVersion1, oMRSProtocolVersion0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      cohortConfig0.cohortName(";-85pS3#P<&3q5");
      String string0 = cohortConfig0.getCohortName();
      assertEquals(";-85pS3#P<&3q5", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      Connection connection0 = new Connection();
      Connection connection1 = connection0.putSecuredPropertiesItem("    selectedTypesToProcess: ", connection0);
      CohortConfig cohortConfig1 = cohortConfig0.cohortOMRSTopicConnection(connection1);
      // Undeclared exception!
      try { 
        cohortConfig1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      TypeDefSummary typeDefSummary0 = new TypeDefSummary();
      cohortConfig0.addSelectedTypesToProcessItem(typeDefSummary0);
      CohortConfig cohortConfig1 = new CohortConfig();
      boolean boolean0 = cohortConfig0.equals(cohortConfig1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      Connection connection0 = new Connection();
      CohortConfig cohortConfig1 = new CohortConfig();
      assertTrue(cohortConfig1.equals((Object)cohortConfig0));
      
      cohortConfig1.cohortOMRSTopicConnection(connection0);
      boolean boolean0 = cohortConfig0.equals(cohortConfig1);
      assertFalse(cohortConfig1.equals((Object)cohortConfig0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      cohortConfig0.cohortName("CLASSES");
      CohortConfig cohortConfig1 = new CohortConfig();
      boolean boolean0 = cohortConfig0.equals(cohortConfig1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      TypeDefSummary typeDefSummary0 = new TypeDefSummary();
      boolean boolean0 = cohortConfig0.equals(typeDefSummary0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      CohortConfig cohortConfig1 = new CohortConfig();
      boolean boolean0 = cohortConfig0.equals(cohortConfig1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      boolean boolean0 = cohortConfig0.equals(cohortConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      boolean boolean0 = cohortConfig0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      TypeDefSummary typeDefSummary0 = new TypeDefSummary();
      CohortConfig cohortConfig1 = cohortConfig0.addSelectedTypesToProcessItem((TypeDefSummary) null);
      CohortConfig cohortConfig2 = cohortConfig1.addSelectedTypesToProcessItem(typeDefSummary0);
      assertNull(cohortConfig2.getCohortOMRSTopicProtocolVersion());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      List<TypeDefSummary> list0 = cohortConfig0.getSelectedTypesToProcess();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      cohortConfig0.getCohortOMRSTopicProtocolVersion();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      Connection connection0 = new Connection();
      cohortConfig0.setCohortRegistryConnection(connection0);
      assertNull(cohortConfig0.getCohortOMRSTopicProtocolVersion());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      TypeDefSummary typeDefSummary0 = new TypeDefSummary();
      DynamicGraph<TypeDefSummary> dynamicGraph0 = new DynamicGraph<TypeDefSummary>();
      List<TypeDefSummary> list0 = dynamicGraph0.getDependenciesFor(typeDefSummary0);
      cohortConfig0.setSelectedTypesToProcess(list0);
      assertNull(cohortConfig0.getCohortOMRSTopicProtocolVersion());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      cohortConfig0.setCohortName("");
      assertNull(cohortConfig0.getCohortOMRSTopicProtocolVersion());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      cohortConfig0.cohortName("");
      String string0 = cohortConfig0.getCohortName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      cohortConfig0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      EventTypeFilter eventTypeFilter0 = EventTypeFilter.ALL;
      CohortConfig cohortConfig1 = cohortConfig0.eventsToProcessRule(eventTypeFilter0);
      assertSame(cohortConfig1, cohortConfig0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      cohortConfig0.getEventsToProcessRule();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      String string0 = cohortConfig0.getCohortName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      OMRSProtocolVersion oMRSProtocolVersion0 = OMRSProtocolVersion.V1;
      cohortConfig0.setCohortOMRSTopicProtocolVersion(oMRSProtocolVersion0);
      CohortConfig cohortConfig1 = new CohortConfig();
      boolean boolean0 = cohortConfig0.equals(cohortConfig1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      Connection connection0 = cohortConfig0.getCohortOMRSTopicConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      Connection connection0 = new Connection();
      cohortConfig0.setCohortOMRSTopicConnection(connection0);
      Connection connection1 = cohortConfig0.getCohortOMRSTopicConnection();
      assertNull(connection1.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      Connection connection0 = cohortConfig0.getCohortRegistryConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      EventTypeFilter eventTypeFilter0 = EventTypeFilter.ALL;
      cohortConfig0.setEventsToProcessRule(eventTypeFilter0);
      CohortConfig cohortConfig1 = new CohortConfig();
      boolean boolean0 = cohortConfig0.equals(cohortConfig1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      Connection connection0 = new Connection();
      cohortConfig0.cohortRegistryConnection(connection0);
      CohortConfig cohortConfig1 = new CohortConfig();
      boolean boolean0 = cohortConfig0.equals(cohortConfig1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      String string0 = cohortConfig0.toString();
      assertEquals("class CohortConfig {\n    cohortName: null\n    cohortRegistryConnection: null\n    cohortOMRSTopicConnection: null\n    cohortOMRSTopicProtocolVersion: null\n    eventsToProcessRule: null\n    selectedTypesToProcess: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CohortConfig cohortConfig0 = new CohortConfig();
      OMRSProtocolVersion oMRSProtocolVersion0 = OMRSProtocolVersion.V1;
      cohortConfig0.cohortOMRSTopicProtocolVersion(oMRSProtocolVersion0);
      String string0 = cohortConfig0.toString();
      assertNotNull(string0);
  }
}
