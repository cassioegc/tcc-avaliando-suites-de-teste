/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 19:29:13 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.Catalog;
import com.ibm.watson.data.client.model.Catalogs;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Catalogs_ESTest extends Catalogs_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      Integer integer0 = new Integer(0);
      catalogs0.nextSkip(integer0);
      Integer integer1 = catalogs0.getNextSkip();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      Integer integer0 = new Integer((-1411));
      catalogs0.nextSkip(integer0);
      Integer integer1 = catalogs0.getNextSkip();
      assertEquals((-1411), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      Integer integer0 = new Integer(1529);
      catalogs0.setNextSkip(integer0);
      Integer integer1 = catalogs0.getNextSkip();
      assertEquals(1529, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      Catalogs catalogs1 = catalogs0.nextBookmark("");
      String string0 = catalogs1.getNextBookmark();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      Stack<Catalog> stack0 = new Stack<Catalog>();
      Catalogs catalogs1 = catalogs0.catalogs(stack0);
      List<Catalog> list0 = catalogs1.getCatalogs();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      Catalog catalog0 = new Catalog();
      Catalogs catalogs1 = catalogs0.addCatalogsItem(catalog0);
      List<Catalog> list0 = catalogs1.getCatalogs();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      Catalogs catalogs1 = catalogs0.nextBookmark("R723^--fX");
      catalogs1.hashCode();
      catalogs1.toString();
      boolean boolean0 = catalogs0.equals("class Catalogs {\n    catalogs: null\n    nextBookmark: java.lang.String@0000000003\n    nextSkip: null\n}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      Catalogs catalogs1 = catalogs0.nextSkip(integer0);
      catalogs0.setCatalogs((List<Catalog>) null);
      Catalogs catalogs2 = new Catalogs();
      boolean boolean0 = catalogs1.equals(catalogs2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      catalogs0.nextBookmark("R723^--fX");
      catalogs0.getNextSkip();
      Catalogs catalogs1 = new Catalogs();
      catalogs1.setNextSkip((Integer) null);
      boolean boolean0 = catalogs0.equals(catalogs1);
      assertFalse(boolean0);
      
      boolean boolean1 = catalogs0.equals("class Catalogs {\n    catalogs: null\n    nextBookmark: java.lang.String@0000000003\n    nextSkip: null\n}");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      Catalog catalog0 = new Catalog();
      Catalogs catalogs1 = new Catalogs();
      catalogs0.addCatalogsItem(catalog0);
      catalogs1.equals(catalogs0);
      assertFalse(catalogs1.equals((Object)catalogs0));
      
      catalogs0.getNextBookmark();
      assertFalse(catalogs0.equals((Object)catalogs1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      catalogs0.getNextSkip();
      Catalogs catalogs1 = new Catalogs();
      catalogs1.setNextSkip((Integer) null);
      boolean boolean0 = catalogs0.equals(catalogs1);
      assertTrue(boolean0);
      
      boolean boolean1 = catalogs0.equals("class Catalogs {\n    catalogs: null\n    nextBookmark: java.lang.String@0000000003\n    nextSkip: null\n}");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      LinkedList<Catalog> linkedList0 = new LinkedList<Catalog>();
      Catalogs catalogs1 = catalogs0.catalogs(linkedList0);
      catalogs1.setNextBookmark("CcYH,Gq");
      Catalog catalog0 = new Catalog();
      Catalogs catalogs2 = new Catalogs();
      catalogs1.addCatalogsItem(catalog0);
      String string0 = catalogs0.getNextBookmark();
      assertEquals("CcYH,Gq", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      catalogs0.getCatalogs();
      catalogs0.setCatalogs((List<Catalog>) null);
      boolean boolean0 = catalogs0.equals(catalogs0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Catalogs catalogs0 = new Catalogs();
      catalogs0.getCatalogs();
      boolean boolean0 = catalogs0.equals((Object) null);
      assertFalse(boolean0);
  }
}
