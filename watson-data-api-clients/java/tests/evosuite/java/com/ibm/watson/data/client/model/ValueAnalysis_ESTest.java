/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 13:34:19 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.DateStats;
import com.ibm.watson.data.client.model.DiscoveredClass;
import com.ibm.watson.data.client.model.DiscoveredClassDetails;
import com.ibm.watson.data.client.model.DiscoveredFormat;
import com.ibm.watson.data.client.model.DiscoveredFormatDetails;
import com.ibm.watson.data.client.model.DiscoveredNumericDetails;
import com.ibm.watson.data.client.model.DiscoveredStringDetails;
import com.ibm.watson.data.client.model.DiscoveredType;
import com.ibm.watson.data.client.model.DiscoveredTypeDetails;
import com.ibm.watson.data.client.model.NumericStats;
import com.ibm.watson.data.client.model.ScoreStats;
import com.ibm.watson.data.client.model.ValueAnalysis;
import com.ibm.watson.data.client.model.ValueCount;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ValueAnalysis_ESTest extends ValueAnalysis_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ScoreStats scoreStats0 = new ScoreStats();
      valueAnalysis0.setWordStats(scoreStats0);
      ScoreStats scoreStats1 = valueAnalysis0.getWordStats();
      assertNull(scoreStats1.getMin());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Vector<Object> vector0 = new Vector<Object>();
      valueAnalysis0.setWordDistribution(vector0);
      List<Object> list0 = valueAnalysis0.getWordDistribution();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Stack<Object> stack0 = new Stack<Object>();
      valueAnalysis0.setValueProblemDistribution(stack0);
      List<Object> list0 = valueAnalysis0.getValueProblemDistribution();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) null);
      valueAnalysis0.setValueProblemDistribution(vector0);
      List<Object> list0 = valueAnalysis0.getValueProblemDistribution();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<ValueCount> arrayList0 = new ArrayList<ValueCount>();
      ValueCount valueCount0 = new ValueCount();
      arrayList0.add(valueCount0);
      valueAnalysis0.setValueDistribution(arrayList0);
      List<ValueCount> list0 = valueAnalysis0.getValueDistribution();
      assertTrue(list0.contains(valueCount0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(1L);
      valueAnalysis0.setUniqueCount(long0);
      Long long1 = valueAnalysis0.getUniqueCount();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long((-342L));
      valueAnalysis0.setUniqueCount(long0);
      Long long1 = valueAnalysis0.getUniqueCount();
      assertEquals((-342L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Vector<DiscoveredTypeDetails> vector0 = new Vector<DiscoveredTypeDetails>();
      valueAnalysis0.setTypeDistribution(vector0);
      List<DiscoveredTypeDetails> list0 = valueAnalysis0.getTypeDistribution();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<DiscoveredTypeDetails> arrayList0 = new ArrayList<DiscoveredTypeDetails>();
      DiscoveredTypeDetails discoveredTypeDetails0 = new DiscoveredTypeDetails();
      arrayList0.add(discoveredTypeDetails0);
      valueAnalysis0.setTypeDistribution(arrayList0);
      List<DiscoveredTypeDetails> list0 = valueAnalysis0.getTypeDistribution();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Stack<DiscoveredNumericDetails> stack0 = new Stack<DiscoveredNumericDetails>();
      DiscoveredNumericDetails discoveredNumericDetails0 = new DiscoveredNumericDetails();
      stack0.add(discoveredNumericDetails0);
      valueAnalysis0.setScaleDistribution(stack0);
      List<DiscoveredNumericDetails> list0 = valueAnalysis0.getScaleDistribution();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<DiscoveredNumericDetails> arrayList0 = new ArrayList<DiscoveredNumericDetails>();
      valueAnalysis0.setPrecisionDistribution(arrayList0);
      List<DiscoveredNumericDetails> list0 = valueAnalysis0.getPrecisionDistribution();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Stack<DiscoveredNumericDetails> stack0 = new Stack<DiscoveredNumericDetails>();
      DiscoveredNumericDetails discoveredNumericDetails0 = new DiscoveredNumericDetails();
      stack0.add(discoveredNumericDetails0);
      valueAnalysis0.setPrecisionDistribution(stack0);
      List<DiscoveredNumericDetails> list0 = valueAnalysis0.getPrecisionDistribution();
      assertTrue(list0.contains(discoveredNumericDetails0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ScoreStats scoreStats0 = new ScoreStats();
      valueAnalysis0.setOtherCharacterStats(scoreStats0);
      ScoreStats scoreStats1 = valueAnalysis0.getOtherCharacterStats();
      assertSame(scoreStats1, scoreStats0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(0L);
      valueAnalysis0.setNullCount(long0);
      Long long1 = valueAnalysis0.getNullCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long((-1429L));
      valueAnalysis0.setNullCount(long0);
      Long long1 = valueAnalysis0.getNullCount();
      assertEquals((-1429L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(4247L);
      valueAnalysis0.setNullCount(long0);
      Long long1 = valueAnalysis0.getNullCount();
      assertEquals(4247L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      valueAnalysis0.setMinString("C-KD:o");
      String string0 = valueAnalysis0.getMinString();
      assertEquals("C-KD:o", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      valueAnalysis0.setMinString("");
      String string0 = valueAnalysis0.getMinString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      valueAnalysis0.setMinHashSignature(unaryOperator0);
      Object object0 = valueAnalysis0.getMinHashSignature();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(0L);
      valueAnalysis0.setMaxValueFrequency(long0);
      Long long1 = valueAnalysis0.getMaxValueFrequency();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(2411L);
      valueAnalysis0.setMaxValueFrequency(long0);
      Long long1 = valueAnalysis0.getMaxValueFrequency();
      assertEquals(2411L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long((-1L));
      valueAnalysis0.setMaxValueFrequency(long0);
      Long long1 = valueAnalysis0.getMaxValueFrequency();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      valueAnalysis0.setMaxString("Szi#xm'q");
      String string0 = valueAnalysis0.getMaxString();
      assertEquals("Szi#xm'q", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      valueAnalysis0.setMaxString("");
      String string0 = valueAnalysis0.getMaxString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<DiscoveredStringDetails> arrayList0 = new ArrayList<DiscoveredStringDetails>();
      valueAnalysis0.setLogicalTypeDistribution(arrayList0);
      List<DiscoveredStringDetails> list0 = valueAnalysis0.getLogicalTypeDistribution();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Vector<DiscoveredStringDetails> vector0 = new Vector<DiscoveredStringDetails>();
      DiscoveredStringDetails discoveredStringDetails0 = new DiscoveredStringDetails();
      vector0.add(discoveredStringDetails0);
      valueAnalysis0.setLogicalTypeDistribution(vector0);
      List<DiscoveredStringDetails> list0 = valueAnalysis0.getLogicalTypeDistribution();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ScoreStats scoreStats0 = new ScoreStats();
      valueAnalysis0.setLengthStats(scoreStats0);
      ScoreStats scoreStats1 = valueAnalysis0.getLengthStats();
      assertNull(scoreStats1.getMax());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Vector<DiscoveredNumericDetails> vector0 = new Vector<DiscoveredNumericDetails>();
      valueAnalysis0.setLengthDistribution(vector0);
      List<DiscoveredNumericDetails> list0 = valueAnalysis0.getLengthDistribution();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Stack<DiscoveredNumericDetails> stack0 = new Stack<DiscoveredNumericDetails>();
      DiscoveredNumericDetails discoveredNumericDetails0 = new DiscoveredNumericDetails();
      stack0.add(discoveredNumericDetails0);
      valueAnalysis0.setLengthDistribution(stack0);
      List<DiscoveredNumericDetails> list0 = valueAnalysis0.getLengthDistribution();
      assertTrue(list0.contains(discoveredNumericDetails0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DiscoveredType discoveredType0 = new DiscoveredType();
      valueAnalysis0.setInferredType(discoveredType0);
      DiscoveredType discoveredType1 = valueAnalysis0.getInferredType();
      assertSame(discoveredType1, discoveredType0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DiscoveredFormat discoveredFormat0 = new DiscoveredFormat();
      valueAnalysis0.setInferredFormat(discoveredFormat0);
      DiscoveredFormat discoveredFormat1 = valueAnalysis0.getInferredFormat();
      assertSame(discoveredFormat1, discoveredFormat0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      valueAnalysis0.setInferredClass(discoveredClass0);
      DiscoveredClass discoveredClass1 = valueAnalysis0.getInferredClass();
      assertSame(discoveredClass1, discoveredClass0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<DiscoveredFormatDetails> arrayList0 = new ArrayList<DiscoveredFormatDetails>();
      valueAnalysis0.setFormatDistribution(arrayList0);
      List<DiscoveredFormatDetails> list0 = valueAnalysis0.getFormatDistribution();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      HashSet<DiscoveredFormatDetails> hashSet0 = new HashSet<DiscoveredFormatDetails>();
      Vector<DiscoveredFormatDetails> vector0 = new Vector<DiscoveredFormatDetails>(hashSet0);
      DiscoveredFormatDetails discoveredFormatDetails0 = new DiscoveredFormatDetails();
      vector0.add(discoveredFormatDetails0);
      valueAnalysis0.setFormatDistribution(vector0);
      List<DiscoveredFormatDetails> list0 = valueAnalysis0.getFormatDistribution();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(0L);
      valueAnalysis0.setEmptyCount(long0);
      Long long1 = valueAnalysis0.getEmptyCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long((-1947L));
      valueAnalysis0.setEmptyCount(long0);
      Long long1 = valueAnalysis0.getEmptyCount();
      assertEquals((-1947L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(2767L);
      valueAnalysis0.setEmptyCount(long0);
      Long long1 = valueAnalysis0.getEmptyCount();
      assertEquals(2767L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(0L);
      valueAnalysis0.setDistinctCount(long0);
      Long long1 = valueAnalysis0.getDistinctCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(2101L);
      valueAnalysis0.setDistinctCount(long0);
      Long long1 = valueAnalysis0.getDistinctCount();
      assertEquals(2101L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long((-3177L));
      valueAnalysis0.setDistinctCount(long0);
      Long long1 = valueAnalysis0.getDistinctCount();
      assertEquals((-3177L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ScoreStats scoreStats0 = new ScoreStats();
      valueAnalysis0.setDigitCharacterStats(scoreStats0);
      ScoreStats scoreStats1 = valueAnalysis0.getDigitCharacterStats();
      assertNull(scoreStats1.getMin());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DateStats dateStats0 = new DateStats();
      valueAnalysis0.setDateStats(dateStats0);
      DateStats dateStats1 = valueAnalysis0.getDateStats();
      assertNull(dateStats1.getCount());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<DiscoveredClassDetails> arrayList0 = new ArrayList<DiscoveredClassDetails>();
      valueAnalysis0.setClassDistribution(arrayList0);
      List<DiscoveredClassDetails> list0 = valueAnalysis0.getClassDistribution();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Stack<DiscoveredClassDetails> stack0 = new Stack<DiscoveredClassDetails>();
      DiscoveredClassDetails discoveredClassDetails0 = new DiscoveredClassDetails();
      stack0.add(discoveredClassDetails0);
      valueAnalysis0.setClassDistribution(stack0);
      List<DiscoveredClassDetails> list0 = valueAnalysis0.getClassDistribution();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Stack<DiscoveredStringDetails> stack0 = new Stack<DiscoveredStringDetails>();
      valueAnalysis0.setCaseDistribution(stack0);
      List<DiscoveredStringDetails> list0 = valueAnalysis0.getCaseDistribution();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Stack<DiscoveredStringDetails> stack0 = new Stack<DiscoveredStringDetails>();
      stack0.add((DiscoveredStringDetails) null);
      valueAnalysis0.setCaseDistribution(stack0);
      List<DiscoveredStringDetails> list0 = valueAnalysis0.getCaseDistribution();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      valueAnalysis0.setBigramDistribution(arrayList0);
      List<Object> list0 = valueAnalysis0.getBigramDistribution();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) valueAnalysis0);
      valueAnalysis0.setBigramDistribution(stack0);
      List<Object> list0 = valueAnalysis0.getBigramDistribution();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ScoreStats scoreStats0 = new ScoreStats();
      valueAnalysis0.setAlphaCharacterStats(scoreStats0);
      ScoreStats scoreStats1 = valueAnalysis0.getAlphaCharacterStats();
      assertNull(scoreStats1.getMax());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Vector<DiscoveredTypeDetails> vector0 = new Vector<DiscoveredTypeDetails>();
      valueAnalysis0.setTypeDistribution(vector0);
      String string0 = valueAnalysis0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      NumericStats numericStats0 = new NumericStats();
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      assertTrue(valueAnalysis1.equals((Object)valueAnalysis0));
      
      valueAnalysis1.setNumericStats(numericStats0);
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      LinkedList<DiscoveredNumericDetails> linkedList0 = new LinkedList<DiscoveredNumericDetails>();
      valueAnalysis0.setPrecisionDistribution(linkedList0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<DiscoveredNumericDetails> arrayList0 = new ArrayList<DiscoveredNumericDetails>();
      valueAnalysis0.setLengthDistribution(arrayList0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      valueAnalysis0.setValueProblemDistribution(linkedList0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      assertTrue(valueAnalysis1.equals((Object)valueAnalysis0));
      
      Stack<ValueCount> stack0 = new Stack<ValueCount>();
      valueAnalysis1.setValueDistribution(stack0);
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DiscoveredFormat discoveredFormat0 = new DiscoveredFormat();
      valueAnalysis0.setInferredFormat(discoveredFormat0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      assertTrue(valueAnalysis1.equals((Object)valueAnalysis0));
      
      valueAnalysis1.setMinString("    typeDistribution: ");
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(1670L);
      valueAnalysis0.setMaxValueFrequency(long0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      assertTrue(valueAnalysis1.equals((Object)valueAnalysis0));
      
      Long long0 = new Long(0L);
      valueAnalysis1.setUniqueCount(long0);
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(2767L);
      valueAnalysis0.setEmptyCount(long0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      Long long0 = new Long((-1740L));
      valueAnalysis1.setDistinctCount(long0);
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(1670L);
      boolean boolean0 = valueAnalysis0.equals(long0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      NumericStats numericStats0 = valueAnalysis0.getNumericStats();
      assertNull(numericStats0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<DiscoveredFormatDetails> list0 = valueAnalysis0.getFormatDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DateStats dateStats0 = valueAnalysis0.getDateStats();
      assertNull(dateStats0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      String string0 = valueAnalysis0.getMaxString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DiscoveredClass discoveredClass0 = valueAnalysis0.getInferredClass();
      assertNull(discoveredClass0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DateStats dateStats0 = new DateStats();
      valueAnalysis0.setDateStats(dateStats0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ScoreStats scoreStats0 = valueAnalysis0.getLengthStats();
      assertNull(scoreStats0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      LinkedList<DiscoveredStringDetails> linkedList0 = new LinkedList<DiscoveredStringDetails>();
      valueAnalysis0.setCaseDistribution(linkedList0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ScoreStats scoreStats0 = valueAnalysis0.getAlphaCharacterStats();
      assertNull(scoreStats0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = valueAnalysis0.getMaxValueFrequency();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<DiscoveredClassDetails> arrayList0 = new ArrayList<DiscoveredClassDetails>();
      valueAnalysis0.setClassDistribution(arrayList0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      valueAnalysis0.setBigramDistribution(arrayList0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<DiscoveredStringDetails> arrayList0 = new ArrayList<DiscoveredStringDetails>();
      valueAnalysis0.setLogicalTypeDistribution(arrayList0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Stack<ValueCount> stack0 = new Stack<ValueCount>();
      valueAnalysis0.setValueDistribution(stack0);
      List<ValueCount> list0 = valueAnalysis0.getValueDistribution();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<DiscoveredClassDetails> list0 = valueAnalysis0.getClassDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      valueAnalysis0.setWordDistribution(arrayList0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      valueAnalysis0.hashCode();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = valueAnalysis0.getEmptyCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(0L);
      valueAnalysis0.setNullCount(long0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<DiscoveredNumericDetails> list0 = valueAnalysis0.getPrecisionDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<DiscoveredNumericDetails> list0 = valueAnalysis0.getScaleDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Object object0 = valueAnalysis0.getMinHashSignature();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      NumericStats numericStats0 = new NumericStats();
      valueAnalysis0.setNumericStats(numericStats0);
      NumericStats numericStats1 = valueAnalysis0.getNumericStats();
      assertSame(numericStats1, numericStats0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Stack<DiscoveredNumericDetails> stack0 = new Stack<DiscoveredNumericDetails>();
      valueAnalysis0.setScaleDistribution(stack0);
      List<DiscoveredNumericDetails> list0 = valueAnalysis0.getScaleDistribution();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<ValueCount> list0 = valueAnalysis0.getValueDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      valueAnalysis0.setMinHashSignature("");
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Stack<DiscoveredFormatDetails> stack0 = new Stack<DiscoveredFormatDetails>();
      valueAnalysis0.setFormatDistribution(stack0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ScoreStats scoreStats0 = new ScoreStats();
      valueAnalysis0.setAlphaCharacterStats(scoreStats0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ScoreStats scoreStats0 = valueAnalysis0.getDigitCharacterStats();
      assertNull(scoreStats0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<DiscoveredStringDetails> list0 = valueAnalysis0.getCaseDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<DiscoveredStringDetails> list0 = valueAnalysis0.getLogicalTypeDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DiscoveredFormat discoveredFormat0 = valueAnalysis0.getInferredFormat();
      assertNull(discoveredFormat0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<Object> list0 = valueAnalysis0.getWordDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      String string0 = valueAnalysis0.getMinString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      valueAnalysis0.setMaxString("Szi#xm'q");
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ScoreStats scoreStats0 = valueAnalysis0.getOtherCharacterStats();
      assertNull(scoreStats0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = new Long(0L);
      valueAnalysis0.setUniqueCount(long0);
      Long long1 = valueAnalysis0.getUniqueCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      LinkedList<DiscoveredTypeDetails> linkedList0 = new LinkedList<DiscoveredTypeDetails>();
      valueAnalysis0.setTypeDistribution(linkedList0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      ScoreStats scoreStats0 = valueAnalysis0.getWordStats();
      assertNull(scoreStats0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<Object> list0 = valueAnalysis0.getBigramDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<DiscoveredTypeDetails> list0 = valueAnalysis0.getTypeDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<Object> list0 = valueAnalysis0.getValueProblemDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DiscoveredType discoveredType0 = new DiscoveredType();
      valueAnalysis0.setInferredType(discoveredType0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = valueAnalysis0.getNullCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DiscoveredType discoveredType0 = valueAnalysis0.getInferredType();
      assertNull(discoveredType0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      List<DiscoveredNumericDetails> list0 = valueAnalysis0.getLengthDistribution();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = valueAnalysis0.getDistinctCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      valueAnalysis0.setInferredClass(discoveredClass0);
      ValueAnalysis valueAnalysis1 = new ValueAnalysis();
      boolean boolean0 = valueAnalysis0.equals(valueAnalysis1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ValueAnalysis valueAnalysis0 = new ValueAnalysis();
      Long long0 = valueAnalysis0.getUniqueCount();
      assertNull(long0);
  }
}
