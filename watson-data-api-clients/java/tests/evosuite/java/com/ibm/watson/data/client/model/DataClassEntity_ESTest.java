/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 13:30:28 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.CustomAttribute;
import com.ibm.watson.data.client.model.DataClassEntity;
import com.ibm.watson.data.client.model.enums.GlossaryObjectState;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataClassEntity_ESTest extends DataClassEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.toIndentedString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.addValidValuesItem((String) null);
      List<String> list0 = dataClassEntity0.getValidValues();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.validValueReferenceFile("'ZD9:'MVuj}6t");
      String string0 = dataClassEntity1.getValidValueReferenceFile();
      assertEquals("'ZD9:'MVuj}6t", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setValidValueReferenceFile("");
      String string0 = dataClassEntity0.getValidValueReferenceFile();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = Integer.getInteger("]y.~", 0);
      dataClassEntity0.threshold(integer0);
      Integer integer1 = dataClassEntity0.getThreshold();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = new Integer((-1264));
      dataClassEntity0.threshold(integer0);
      Integer integer1 = dataClassEntity0.getThreshold();
      assertEquals((-1264), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = new Integer(147);
      DataClassEntity dataClassEntity1 = dataClassEntity0.threshold(integer0);
      Integer integer1 = dataClassEntity1.getThreshold();
      assertEquals(147, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.ARCHIVED;
      dataClassEntity0.state(glossaryObjectState0);
      GlossaryObjectState glossaryObjectState1 = dataClassEntity0.getState();
      assertEquals(GlossaryObjectState.ARCHIVED, glossaryObjectState1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Boolean boolean0 = Boolean.TRUE;
      dataClassEntity0.setSqueezeConsecutiveWhiteSpaces(boolean0);
      Boolean boolean1 = dataClassEntity0.getSqueezeConsecutiveWhiteSpaces();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      dataClassEntity0.squeezeConsecutiveWhiteSpaces(xmlSuite0.DEFAULT_GROUP_BY_INSTANCES);
      Boolean boolean0 = dataClassEntity0.getSqueezeConsecutiveWhiteSpaces();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.script("com.ibm.watson.data.client.model.DataClassEntity");
      String string0 = dataClassEntity0.getScript();
      assertEquals("com.ibm.watson.data.client.model.DataClassEntity", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.script("");
      String string0 = dataClassEntity0.getScript();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.scope("CLOSED");
      String string0 = dataClassEntity1.getScope();
      assertEquals("CLOSED", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.regularExpression("U#p$IP8>N6Pp");
      String string0 = dataClassEntity1.getRegularExpression();
      assertEquals("U#p$IP8>N6Pp", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.regularExpression("");
      String string0 = dataClassEntity0.getRegularExpression();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.referenceColumnsMetadata("1ym2S#k9p~#@?P");
      String string0 = dataClassEntity0.getReferenceColumnsMetadata();
      assertEquals("1ym2S#k9p~#@?P", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.referenceColumnsMetadata("");
      String string0 = dataClassEntity1.getReferenceColumnsMetadata();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setProvider("g;7~9@");
      String string0 = dataClassEntity0.getProvider();
      assertEquals("g;7~9@", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.provider("");
      String string0 = dataClassEntity1.getProvider();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.properties("sG\"~KzVr32a_0t");
      String string0 = dataClassEntity1.getProperties();
      assertEquals("sG\"~KzVr32a_0t", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.properties("");
      String string0 = dataClassEntity0.getProperties();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Float float0 = new Float(0.0F);
      dataClassEntity0.priority(float0);
      Float float1 = dataClassEntity0.getPriority();
      assertEquals(0.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Float float0 = new Float((-1.0));
      dataClassEntity0.priority(float0);
      Float float1 = dataClassEntity0.getPriority();
      assertEquals((-1.0F), (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = new Integer((-701));
      dataClassEntity0.minimumDataLength(integer0);
      Integer integer1 = dataClassEntity0.getMinimumDataLength();
      assertEquals((-701), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = new Integer(0);
      dataClassEntity0.minimumDataLength(integer0);
      Integer integer1 = dataClassEntity0.getMinimumDataLength();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      dataClassEntity0.minimumDataLength(integer0);
      Integer integer1 = dataClassEntity0.getMinimumDataLength();
      assertEquals(5, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = new Integer(416);
      dataClassEntity0.minimumDataLength(integer0);
      Integer integer1 = dataClassEntity0.getMinimumDataLength();
      assertEquals(416, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      dataClassEntity0.maximumDataLength(xmlSuite0.DEFAULT_VERBOSE);
      Integer integer0 = dataClassEntity0.getMaximumDataLength();
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.longDescription("8])J,!AMaN3(:&7F");
      String string0 = dataClassEntity0.getLongDescription();
      assertEquals("8])J,!AMaN3(:&7F", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.longDescription("");
      String string0 = dataClassEntity0.getLongDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setLanguage("CLOSED");
      String string0 = dataClassEntity0.getLanguage();
      assertEquals("CLOSED", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.language("");
      String string0 = dataClassEntity1.getLanguage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.javaClassName("websocketServerSpec");
      String string0 = dataClassEntity1.getJavaClassName();
      assertEquals("websocketServerSpec", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.javaClassName("");
      String string0 = dataClassEntity1.getJavaClassName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.expression("    squeezeConsecutiveWhiteSpaces: ");
      String string0 = dataClassEntity0.getExpression();
      assertEquals("    squeezeConsecutiveWhiteSpaces: ", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.expression("");
      String string0 = dataClassEntity1.getExpression();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.example("CLOSED");
      String string0 = dataClassEntity0.getExample();
      assertEquals("CLOSED", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.example("");
      String string0 = dataClassEntity1.getExample();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Boolean boolean0 = Boolean.valueOf("java.lang.String@0000000002");
      dataClassEntity0.enabled(boolean0);
      Boolean boolean1 = dataClassEntity0.getEnabled();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      DataClassEntity dataClassEntity1 = dataClassEntity0.dataType(arrayList0);
      List<String> list0 = dataClassEntity1.getDataType();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.addDataTypeItem("_");
      List<String> list0 = dataClassEntity0.getDataType();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.dataClassType("F-^V");
      String string0 = dataClassEntity0.getDataClassType();
      assertEquals("F-^V", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setDataClassType("");
      String string0 = dataClassEntity0.getDataClassType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      CustomAttribute customAttribute0 = new CustomAttribute();
      dataClassEntity0.addCustomAttributesItem(customAttribute0);
      List<CustomAttribute> list0 = dataClassEntity0.getCustomAttributes();
      assertTrue(list0.contains(customAttribute0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.columnNameMatch("0~'nw.)wKtND#`&");
      String string0 = dataClassEntity0.getColumnNameMatch();
      assertEquals("0~'nw.)wKtND#`&", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.columnNameMatch("");
      String string0 = dataClassEntity1.getColumnNameMatch();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.classCode("1ym2S#k9p~#@?P");
      String string0 = dataClassEntity0.getClassCode();
      assertEquals("1ym2S#k9p~#@?P", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.classCode("");
      String string0 = dataClassEntity0.getClassCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Boolean boolean0 = Boolean.TRUE;
      dataClassEntity0.caseSensitive(boolean0);
      Boolean boolean1 = dataClassEntity0.getCaseSensitive();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      dataClassEntity0.caseSensitive(xmlSuite0.DEFAULT_JUNIT);
      Boolean boolean0 = dataClassEntity0.getCaseSensitive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.applicableFor("r}^RUh<tMa");
      String string0 = dataClassEntity1.getApplicableFor();
      assertEquals("r}^RUh<tMa", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.applicableFor("");
      String string0 = dataClassEntity1.getApplicableFor();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Boolean boolean0 = Boolean.TRUE;
      dataClassEntity0.allowSubstringMatch(boolean0);
      Boolean boolean1 = dataClassEntity0.getAllowSubstringMatch();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Boolean boolean0 = XmlSuite.DEFAULT_SKIP_FAILED_INVOCATION_COUNTS;
      dataClassEntity0.allowSubstringMatch(boolean0);
      Boolean boolean1 = dataClassEntity0.getAllowSubstringMatch();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.additionalRegularExpression("statusAndHeadersSent");
      String string0 = dataClassEntity0.getAdditionalRegularExpression();
      assertEquals("statusAndHeadersSent", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setAdditionalRegularExpression("");
      String string0 = dataClassEntity0.getAdditionalRegularExpression();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.additionalApplicableFor("    enabled: ");
      String string0 = dataClassEntity1.getAdditionalApplicableFor();
      assertEquals("    enabled: ", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setAdditionalApplicableFor("");
      String string0 = dataClassEntity0.getAdditionalApplicableFor();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      // Undeclared exception!
      try { 
        dataClassEntity0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.DataClassEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 38);
      List<String> list0 = xmlTest0.getExcludedGroups();
      DataClassEntity dataClassEntity1 = dataClassEntity0.dataType(list0);
      // Undeclared exception!
      try { 
        dataClassEntity1.addDataTypeItem("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      StringBuilder stringBuilder0 = new StringBuilder(917);
      dataClassEntity0.toString(stringBuilder0);
      assertEquals("    longDescription: null\n    state: null\n    customAttributes: null\n    classCode: null\n    provider: null\n    dataClassType: null\n    example: null\n    priority: null\n    threshold: null\n    enabled: null\n    dataType: null\n    minimumDataLength: null\n    maximumDataLength: null\n    columnNameMatch: null\n    script: null\n    scope: null\n    language: null\n    properties: null\n    javaClassName: null\n    validValues: null\n    caseSensitive: null\n    allowSubstringMatch: null\n    squeezeConsecutiveWhiteSpaces: null\n    validValueReferenceFile: null\n    regularExpression: null\n    applicableFor: null\n    additionalRegularExpression: null\n    additionalApplicableFor: null\n    referenceColumnsMetadata: null\n    expression: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.expression("    enabled: ");
      DataClassEntity dataClassEntity2 = new DataClassEntity();
      boolean boolean0 = dataClassEntity2.equals(dataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.referenceColumnsMetadata("");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.additionalApplicableFor("sG\"~KzVr32a_0t");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.additionalRegularExpression("");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.applicableFor("sG\"~KzVr32a_0t");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.regularExpression("");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setValidValueReferenceFile("sG\"~KzVr32a_0t");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.addValidValuesItem("    enabled: ");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.javaClassName("    enabled: ");
      DataClassEntity dataClassEntity2 = new DataClassEntity();
      boolean boolean0 = dataClassEntity2.equals(dataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.properties("sG\"~KzVr32a_0t");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.language("    enabled: ");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.script("    enabled: ");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setColumnNameMatch("KWipJYUs+wTTH8");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      dataClassEntity0.setMaximumDataLength(integer0);
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      dataClassEntity0.setMinimumDataLength(integer0);
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.addDataTypeItem("    enabled: ");
      DataClassEntity dataClassEntity2 = new DataClassEntity();
      boolean boolean0 = dataClassEntity2.equals(dataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setExample(",nT0NdZqq");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      assertTrue(dataClassEntity1.equals((Object)dataClassEntity0));
      
      dataClassEntity0.setProvider("    validValueReferenceFile: ");
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.classCode("    enabled: ");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.DELETED;
      dataClassEntity0.setState(glossaryObjectState0);
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setLongDescription("");
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Object object0 = new Object();
      boolean boolean0 = dataClassEntity0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      boolean boolean0 = dataClassEntity0.equals(dataClassEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      boolean boolean0 = dataClassEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getExcludedGroups();
      dataClassEntity0.validValues(list0);
      DataClassEntity dataClassEntity1 = dataClassEntity0.addValidValuesItem("z}2oJ\u0001tBLm2Fj");
      assertNull(dataClassEntity1.getMaximumDataLength());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.addCustomAttributesItem((CustomAttribute) null);
      DataClassEntity dataClassEntity1 = new DataClassEntity();
      boolean boolean0 = dataClassEntity1.equals(dataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      ArrayList<CustomAttribute> arrayList0 = new ArrayList<CustomAttribute>();
      dataClassEntity0.customAttributes(arrayList0);
      DataClassEntity dataClassEntity1 = dataClassEntity0.addCustomAttributesItem((CustomAttribute) null);
      assertNull(dataClassEntity1.getJavaClassName());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Vector<String> vector0 = new Vector<String>();
      dataClassEntity0.setValidValues(vector0);
      assertEquals("[]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Boolean boolean0 = XmlSuite.DEFAULT_ALLOW_RETURN_VALUES;
      dataClassEntity0.setCaseSensitive(boolean0);
      assertFalse(dataClassEntity0.getCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Boolean boolean0 = dataClassEntity0.getSqueezeConsecutiveWhiteSpaces();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setProperties("0Nq##'|hGd%,9#ZYp9");
      assertNull(dataClassEntity0.getMaximumDataLength());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getScope();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getLongDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.scope("");
      String string0 = dataClassEntity0.getScope();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getProvider();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setReferenceColumnsMetadata("Q{U0zw)T");
      assertNull(dataClassEntity0.getEnabled());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      dataClassEntity0.setEnabled(xmlSuite0.DEFAULT_ALLOW_RETURN_VALUES);
      assertNull(dataClassEntity0.getExample());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setApplicableFor("");
      assertNull(dataClassEntity0.getValidValueReferenceFile());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getApplicableFor();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      List<String> list0 = dataClassEntity0.getDataType();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getExpression();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Boolean boolean0 = dataClassEntity0.getEnabled();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      Float float0 = new Float((double) xmlSuite0.DEFAULT_VERBOSE);
      dataClassEntity0.setPriority(float0);
      assertNull(dataClassEntity0.getMinimumDataLength());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getReferenceColumnsMetadata();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getDataClassType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setScript("0Nq##'|hGd%,9#ZYp9");
      assertNull(dataClassEntity0.getAdditionalApplicableFor());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Boolean boolean0 = dataClassEntity0.getCaseSensitive();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Stack<CustomAttribute> stack0 = new Stack<CustomAttribute>();
      dataClassEntity0.setCustomAttributes(stack0);
      assertNull(dataClassEntity0.getExample());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getListeners();
      dataClassEntity0.validValues(list0);
      List<String> list1 = dataClassEntity0.getValidValues();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getProperties();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getColumnNameMatch();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      DataClassEntity dataClassEntity1 = dataClassEntity0.enabled(xmlSuite0.DEFAULT_PRESERVE_ORDER);
      Boolean boolean0 = dataClassEntity1.getEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getValidValueReferenceFile();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setAllowSubstringMatch((Boolean) null);
      assertNull(dataClassEntity0.getAdditionalApplicableFor());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Float float0 = dataClassEntity0.getPriority();
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      DataClassEntity dataClassEntity1 = dataClassEntity0.applicableFor(")eDv+$Pc4N,g2E3#>");
      String string0 = dataClassEntity1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      ArrayList<java.util.Locale.LanguageRange> arrayList0 = new ArrayList<java.util.Locale.LanguageRange>();
      java.util.Locale.FilteringMode locale_FilteringMode0 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      dataClassEntity0.setDataType(list0);
      assertNull(dataClassEntity0.getProperties());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = dataClassEntity0.getMaximumDataLength();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getAdditionalApplicableFor();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setExpression((String) null);
      assertNull(dataClassEntity0.getDataClassType());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = dataClassEntity0.getMinimumDataLength();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      List<String> list0 = dataClassEntity0.getValidValues();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      Float float0 = new Float((double) xmlSuite0.DEFAULT_VERBOSE);
      dataClassEntity0.priority(float0);
      Float float1 = dataClassEntity0.getPriority();
      assertEquals(1.0F, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setScope("Q{U0zw)T");
      assertNull(dataClassEntity0.getMinimumDataLength());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Stack<CustomAttribute> stack0 = new Stack<CustomAttribute>();
      dataClassEntity0.customAttributes(stack0);
      List<CustomAttribute> list0 = dataClassEntity0.getCustomAttributes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getExample();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getClassCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setClassCode("Q{U0zw)T");
      assertNull(dataClassEntity0.getLongDescription());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getRegularExpression();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Boolean boolean0 = dataClassEntity0.getAllowSubstringMatch();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getAdditionalRegularExpression();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setRegularExpression("io.netty.util.concurrent.AbstractEventExecutor");
      assertNull(dataClassEntity0.getAdditionalApplicableFor());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.getState();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      List<CustomAttribute> list0 = dataClassEntity0.getCustomAttributes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      dataClassEntity0.setThreshold(integer0);
      assertNull(dataClassEntity0.getReferenceColumnsMetadata());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      Integer integer0 = dataClassEntity0.getThreshold();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      dataClassEntity0.setJavaClassName("reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire");
      assertNull(dataClassEntity0.getProvider());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DataClassEntity dataClassEntity0 = new DataClassEntity();
      String string0 = dataClassEntity0.getJavaClassName();
      assertNull(string0);
  }
}
