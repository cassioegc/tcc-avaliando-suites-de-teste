/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:50:14 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.NewRelationship;
import com.ibm.watson.data.client.model.WriteableClassificationEntity;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WriteableClassificationEntity_ESTest extends WriteableClassificationEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      StringBuilder stringBuilder0 = new StringBuilder("");
      writeableClassificationEntity0.toString(stringBuilder0);
      assertEquals("    longDescription: null\n    state: null\n    customAttributes: null\n    name: null\n    shortDescription: null\n    effectiveStartDate: null\n    effectiveEndDate: null\n    tags: null\n    stewardIds: null\n    parentCategory: null\n    categories: null\n    isATypeOfClassification: null\n    hasTypesClassifications: null\n    terms: null\n    dataClasses: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      writeableClassificationEntity0.terms(arrayList0);
      List<NewRelationship> list0 = writeableClassificationEntity0.getTerms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      writeableClassificationEntity0.addTermsItem(newRelationship0);
      List<NewRelationship> list0 = writeableClassificationEntity0.getTerms();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      writeableClassificationEntity0.isATypeOfClassification(newRelationship0);
      NewRelationship newRelationship1 = writeableClassificationEntity0.getIsATypeOfClassification();
      assertSame(newRelationship1, newRelationship0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      writeableClassificationEntity0.hasTypesClassifications(arrayList0);
      List<NewRelationship> list0 = writeableClassificationEntity0.getHasTypesClassifications();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableClassificationEntity writeableClassificationEntity1 = writeableClassificationEntity0.addHasTypesClassificationsItem(newRelationship0);
      List<NewRelationship> list0 = writeableClassificationEntity1.getHasTypesClassifications();
      assertTrue(list0.contains(newRelationship0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      writeableClassificationEntity0.setDataClasses(vector0);
      List<NewRelationship> list0 = writeableClassificationEntity0.getDataClasses();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      writeableClassificationEntity0.addDataClassesItem((NewRelationship) null);
      List<NewRelationship> list0 = writeableClassificationEntity0.getDataClasses();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      // Undeclared exception!
      try { 
        writeableClassificationEntity0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.GlossaryObjectEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      WriteableClassificationEntity writeableClassificationEntity1 = new WriteableClassificationEntity();
      boolean boolean0 = writeableClassificationEntity1.equals(writeableClassificationEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      WriteableClassificationEntity writeableClassificationEntity1 = new WriteableClassificationEntity();
      assertTrue(writeableClassificationEntity1.equals((Object)writeableClassificationEntity0));
      
      writeableClassificationEntity1.addTermsItem((NewRelationship) null);
      boolean boolean0 = writeableClassificationEntity1.equals(writeableClassificationEntity0);
      assertFalse(writeableClassificationEntity1.equals((Object)writeableClassificationEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      WriteableClassificationEntity writeableClassificationEntity1 = new WriteableClassificationEntity();
      MockDate mockDate0 = new MockDate((-795), (-795), (-795), (-2023), (-2023));
      writeableClassificationEntity0.effectiveEndDate(mockDate0);
      boolean boolean0 = writeableClassificationEntity1.equals(writeableClassificationEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      boolean boolean0 = writeableClassificationEntity0.equals("}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      boolean boolean0 = writeableClassificationEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      boolean boolean0 = writeableClassificationEntity0.equals(writeableClassificationEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      WriteableClassificationEntity writeableClassificationEntity1 = writeableClassificationEntity0.addDataClassesItem((NewRelationship) null);
      WriteableClassificationEntity writeableClassificationEntity2 = new WriteableClassificationEntity();
      boolean boolean0 = writeableClassificationEntity2.equals(writeableClassificationEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      WriteableClassificationEntity writeableClassificationEntity1 = writeableClassificationEntity0.dataClasses(linkedList0);
      writeableClassificationEntity1.addDataClassesItem(newRelationship0);
      assertTrue(linkedList0.contains(newRelationship0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableClassificationEntity writeableClassificationEntity1 = writeableClassificationEntity0.addTermsItem(newRelationship0);
      WriteableClassificationEntity writeableClassificationEntity2 = writeableClassificationEntity1.addTermsItem(newRelationship0);
      assertSame(writeableClassificationEntity0, writeableClassificationEntity2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      WriteableClassificationEntity writeableClassificationEntity1 = writeableClassificationEntity0.addHasTypesClassificationsItem(newRelationship0);
      WriteableClassificationEntity writeableClassificationEntity2 = writeableClassificationEntity1.addHasTypesClassificationsItem(newRelationship0);
      assertSame(writeableClassificationEntity0, writeableClassificationEntity2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      NewRelationship newRelationship0 = writeableClassificationEntity0.getIsATypeOfClassification();
      assertNull(newRelationship0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      List<NewRelationship> list0 = writeableClassificationEntity0.getHasTypesClassifications();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      writeableClassificationEntity0.setIsATypeOfClassification((NewRelationship) null);
      assertNull(writeableClassificationEntity0.getLongDescription());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      List<NewRelationship> list0 = writeableClassificationEntity0.getDataClasses();
      writeableClassificationEntity0.setTerms(list0);
      assertNull(writeableClassificationEntity0.getState());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      String string0 = writeableClassificationEntity0.toString();
      assertEquals("class WriteableClassificationEntity {\n    longDescription: null\n    state: null\n    customAttributes: null\n    name: null\n    shortDescription: null\n    effectiveStartDate: null\n    effectiveEndDate: null\n    tags: null\n    stewardIds: null\n    parentCategory: null\n    categories: null\n    isATypeOfClassification: null\n    hasTypesClassifications: null\n    terms: null\n    dataClasses: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      writeableClassificationEntity0.isATypeOfClassification(newRelationship0);
      WriteableClassificationEntity writeableClassificationEntity1 = new WriteableClassificationEntity();
      boolean boolean0 = writeableClassificationEntity0.equals(writeableClassificationEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      List<NewRelationship> list0 = writeableClassificationEntity0.getTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      writeableClassificationEntity0.setHasTypesClassifications((List<NewRelationship>) null);
      assertNull(writeableClassificationEntity0.getShortDescription());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      WriteableClassificationEntity writeableClassificationEntity1 = writeableClassificationEntity0.hasTypesClassifications(linkedList0);
      WriteableClassificationEntity writeableClassificationEntity2 = new WriteableClassificationEntity();
      boolean boolean0 = writeableClassificationEntity2.equals(writeableClassificationEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WriteableClassificationEntity writeableClassificationEntity0 = new WriteableClassificationEntity();
      writeableClassificationEntity0.hashCode();
  }
}
