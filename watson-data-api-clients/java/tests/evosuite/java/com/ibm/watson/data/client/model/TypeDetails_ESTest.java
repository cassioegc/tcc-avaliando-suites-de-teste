/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 20:27:03 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.TypeDetails;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeDetails_ESTest extends TypeDetails_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      typeDetails0.setType("F+SqB\"e=ouh[");
      String string0 = typeDetails0.getType();
      assertEquals("F+SqB\"e=ouh[", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      typeDetails0.setType("");
      String string0 = typeDetails0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer(0);
      typeDetails0.setScale(integer0);
      Integer integer1 = typeDetails0.getScale();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer(2934);
      typeDetails0.setScale(integer0);
      Integer integer1 = typeDetails0.getScale();
      assertEquals(2934, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer((-623));
      typeDetails0.setScale(integer0);
      Integer integer1 = typeDetails0.getScale();
      assertEquals((-623), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer(0);
      typeDetails0.setPrecision(integer0);
      Integer integer1 = typeDetails0.getPrecision();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer(2934);
      typeDetails0.setPrecision(integer0);
      Integer integer1 = typeDetails0.getPrecision();
      assertEquals(2934, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer((-1593));
      typeDetails0.setPrecision(integer0);
      Integer integer1 = typeDetails0.getPrecision();
      assertEquals((-1593), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer(0);
      typeDetails0.setLength(integer0);
      Integer integer1 = typeDetails0.getLength();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer(2);
      typeDetails0.setLength(integer0);
      Integer integer1 = typeDetails0.getLength();
      assertEquals(2, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer((-2827));
      typeDetails0.setLength(integer0);
      Integer integer1 = typeDetails0.getLength();
      assertEquals((-2827), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer((-472));
      typeDetails0.setLength(integer0);
      String string0 = typeDetails0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      typeDetails0.setType("*ta;:fQ\")UXo3hk&W");
      TypeDetails typeDetails1 = new TypeDetails();
      boolean boolean0 = typeDetails0.equals(typeDetails1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      TypeDetails typeDetails1 = new TypeDetails();
      assertTrue(typeDetails1.equals((Object)typeDetails0));
      
      Integer integer0 = new Integer(19);
      typeDetails0.setScale(integer0);
      boolean boolean0 = typeDetails0.equals(typeDetails1);
      assertFalse(typeDetails1.equals((Object)typeDetails0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      TypeDetails typeDetails1 = new TypeDetails();
      assertTrue(typeDetails1.equals((Object)typeDetails0));
      
      Integer integer0 = new Integer(15);
      typeDetails1.setPrecision(integer0);
      boolean boolean0 = typeDetails0.equals(typeDetails1);
      assertFalse(typeDetails1.equals((Object)typeDetails0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      TypeDetails typeDetails1 = new TypeDetails();
      boolean boolean0 = typeDetails0.equals(typeDetails1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      boolean boolean0 = typeDetails0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      boolean boolean0 = typeDetails0.equals(typeDetails0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer((-472));
      boolean boolean0 = typeDetails0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = new Integer((-472));
      typeDetails0.setLength(integer0);
      TypeDetails typeDetails1 = new TypeDetails();
      boolean boolean0 = typeDetails0.equals(typeDetails1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = typeDetails0.getScale();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = typeDetails0.getPrecision();
      typeDetails0.setPrecision(integer0);
      assertNull(typeDetails0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      String string0 = typeDetails0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      typeDetails0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeDetails typeDetails0 = new TypeDetails();
      Integer integer0 = typeDetails0.getLength();
      assertNull(integer0);
  }
}
