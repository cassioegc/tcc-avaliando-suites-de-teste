/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 22:38:38 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.Space;
import com.ibm.watson.data.client.model.SpaceEntity;
import com.ibm.watson.data.client.model.SpaceMetadata;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Space_ESTest extends Space_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Space space0 = new Space();
      SpaceEntity spaceEntity0 = new SpaceEntity();
      space0.entity(spaceEntity0);
      SpaceEntity spaceEntity1 = space0.getEntity();
      assertNull(spaceEntity1.getDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Space space0 = new Space();
      SpaceEntity spaceEntity0 = new SpaceEntity();
      space0.entity(spaceEntity0);
      String string0 = space0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Space space0 = new Space();
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      Space space1 = new Space();
      assertTrue(space1.equals((Object)space0));
      
      Space space2 = space1.metadata(spaceMetadata0);
      boolean boolean0 = space2.equals(space0);
      assertFalse(space1.equals((Object)space0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Space space0 = new Space();
      Space space1 = new Space();
      boolean boolean0 = space0.equals(space1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Space space0 = new Space();
      boolean boolean0 = space0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Space space0 = new Space();
      boolean boolean0 = space0.equals(space0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Space space0 = new Space();
      MockDate mockDate0 = new MockDate((-3554), (-3554), (-3554), (-3554), (-3554), (-3554));
      boolean boolean0 = space0.equals(mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Space space0 = new Space();
      SpaceMetadata spaceMetadata0 = space0.getMetadata();
      assertNull(spaceMetadata0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Space space0 = new Space();
      space0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Space space0 = new Space();
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      space0.setMetadata(spaceMetadata0);
      SpaceMetadata spaceMetadata1 = space0.getMetadata();
      assertNull(spaceMetadata1.getUrl());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Space space0 = new Space();
      SpaceEntity spaceEntity0 = new SpaceEntity();
      Space space1 = space0.entity(spaceEntity0);
      Space space2 = new Space();
      boolean boolean0 = space1.equals(space2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Space space0 = new Space();
      SpaceEntity spaceEntity0 = new SpaceEntity();
      space0.setEntity(spaceEntity0);
      assertNull(spaceEntity0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Space space0 = new Space();
      SpaceEntity spaceEntity0 = space0.getEntity();
      assertNull(spaceEntity0);
  }
}
