/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:23:23 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.AssetTypeField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AssetTypeField_ESTest extends AssetTypeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      assetTypeField0.setType("GoLT}C)qkO}z<4TG");
      String string0 = assetTypeField0.getType();
      assertEquals("GoLT}C)qkO}z<4TG", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      assetTypeField0.type("");
      String string0 = assetTypeField0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      assetTypeField0.setSearchPath("$VALUES");
      String string0 = assetTypeField0.getSearchPath();
      assertEquals("$VALUES", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      assetTypeField0.setSearchPath("");
      String string0 = assetTypeField0.getSearchPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      assetTypeField0.key("HoiL\"L#tbu3*\"x&2");
      String string0 = assetTypeField0.getKey();
      assertEquals("HoiL\"L#tbu3*\"x&2", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      assetTypeField0.key("");
      String string0 = assetTypeField0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = new Boolean("$VALUES");
      assetTypeField0.isSearchableAcrossTypes(boolean0);
      Boolean boolean1 = assetTypeField0.getIsSearchableAcrossTypes();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = new Boolean(true);
      assetTypeField0.isArray(boolean0);
      Boolean boolean1 = assetTypeField0.getIsArray();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = Boolean.FALSE;
      AssetTypeField assetTypeField1 = assetTypeField0.isArray(boolean0);
      Boolean boolean1 = assetTypeField1.getIsArray();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = new Boolean(true);
      assetTypeField0.facet(boolean0);
      Boolean boolean1 = assetTypeField0.getFacet();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = Boolean.valueOf(false);
      assetTypeField0.facet(boolean0);
      Boolean boolean1 = assetTypeField0.getFacet();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = Boolean.valueOf("4");
      AssetTypeField assetTypeField1 = new AssetTypeField();
      assertTrue(assetTypeField1.equals((Object)assetTypeField0));
      
      assetTypeField1.setIsSearchableAcrossTypes(boolean0);
      boolean boolean1 = assetTypeField0.equals(assetTypeField1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      assetTypeField0.searchPath("Y");
      AssetTypeField assetTypeField1 = new AssetTypeField();
      boolean boolean0 = assetTypeField0.equals(assetTypeField1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      AssetTypeField assetTypeField1 = new AssetTypeField();
      assertTrue(assetTypeField1.equals((Object)assetTypeField0));
      
      Boolean boolean0 = Boolean.TRUE;
      AssetTypeField assetTypeField2 = assetTypeField1.isArray(boolean0);
      boolean boolean1 = assetTypeField0.equals(assetTypeField2);
      assertFalse(assetTypeField1.equals((Object)assetTypeField0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = new Boolean(true);
      AssetTypeField assetTypeField1 = assetTypeField0.facet(boolean0);
      AssetTypeField assetTypeField2 = new AssetTypeField();
      boolean boolean1 = assetTypeField1.equals(assetTypeField2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      AssetTypeField assetTypeField1 = assetTypeField0.key("CG\"\"e2?qQjS'Qbk^x");
      AssetTypeField assetTypeField2 = new AssetTypeField();
      boolean boolean0 = assetTypeField1.equals(assetTypeField2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Object object0 = new Object();
      boolean boolean0 = assetTypeField0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      AssetTypeField assetTypeField1 = new AssetTypeField();
      boolean boolean0 = assetTypeField0.equals(assetTypeField1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      boolean boolean0 = assetTypeField0.equals(assetTypeField0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      boolean boolean0 = assetTypeField0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = assetTypeField0.getFacet();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      String string0 = assetTypeField0.getSearchPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = assetTypeField0.getIsSearchableAcrossTypes();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      String string0 = assetTypeField0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = assetTypeField0.getIsArray();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      AssetTypeField assetTypeField1 = assetTypeField0.type("class AssetTypeField {\n    key: null\n    type: null\n    facet: java.lang.Boolean@0000000002\n    isArray: null\n    searchPath: null\n    isSearchableAcrossTypes: java.lang.Boolean@0000000002\n}");
      AssetTypeField assetTypeField2 = new AssetTypeField();
      boolean boolean0 = assetTypeField1.equals(assetTypeField2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = Boolean.TRUE;
      assetTypeField0.setFacet(boolean0);
      assertNull(assetTypeField0.getKey());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      assetTypeField0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      String string0 = assetTypeField0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = new Boolean(true);
      assetTypeField0.setIsArray(boolean0);
      assertNull(assetTypeField0.getType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      assetTypeField0.setKey((String) null);
      assertNull(assetTypeField0.getType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = Boolean.valueOf("4");
      assetTypeField0.setIsSearchableAcrossTypes(boolean0);
      String string0 = assetTypeField0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AssetTypeField assetTypeField0 = new AssetTypeField();
      Boolean boolean0 = new Boolean(true);
      AssetTypeField assetTypeField1 = assetTypeField0.isSearchableAcrossTypes(boolean0);
      Boolean boolean1 = assetTypeField1.getIsSearchableAcrossTypes();
      assertTrue(boolean1);
  }
}
