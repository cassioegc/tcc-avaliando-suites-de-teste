/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 20:18:15 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.DataSchema;
import com.ibm.watson.data.client.model.DataSchemaField;
import com.ibm.watson.data.client.model.FunctionEntitySchemas;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FunctionEntitySchemas_ESTest extends FunctionEntitySchemas_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      functionEntitySchemas0.getInput();
      functionEntitySchemas0.getInput();
      FunctionEntitySchemas functionEntitySchemas1 = new FunctionEntitySchemas();
      functionEntitySchemas0.equals(functionEntitySchemas1);
      functionEntitySchemas1.output((List<DataSchema>) null);
      functionEntitySchemas1.hashCode();
      functionEntitySchemas1.input((List<DataSchema>) null);
      functionEntitySchemas1.getInput();
      functionEntitySchemas0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      dataSchema0.setName("M$U6&<8");
      DataSchema dataSchema1 = dataSchema0.id((String) null);
      dataSchema1.id((String) null);
      dataSchema1.setId("");
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addOutputItem(dataSchema1);
      Vector<DataSchema> vector0 = new Vector<DataSchema>();
      functionEntitySchemas1.input(vector0);
      List<DataSchema> list0 = functionEntitySchemas0.getInput();
      functionEntitySchemas0.getInput();
      FunctionEntitySchemas functionEntitySchemas2 = new FunctionEntitySchemas();
      functionEntitySchemas0.equals(functionEntitySchemas2);
      functionEntitySchemas2.output(list0);
      functionEntitySchemas0.hashCode();
      functionEntitySchemas2.hashCode();
      functionEntitySchemas2.input(list0);
      functionEntitySchemas2.getInput();
      functionEntitySchemas0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      dataSchema0.setName("M$U6&<8");
      DataSchema dataSchema1 = dataSchema0.id((String) null);
      DataSchema dataSchema2 = dataSchema1.id((String) null);
      dataSchema1.setId("^1<:sD");
      functionEntitySchemas0.addInputItem(dataSchema2);
      List<DataSchema> list0 = functionEntitySchemas0.getInput();
      functionEntitySchemas0.getInput();
      FunctionEntitySchemas functionEntitySchemas1 = new FunctionEntitySchemas();
      functionEntitySchemas0.equals(functionEntitySchemas1);
      functionEntitySchemas1.output(list0);
      functionEntitySchemas1.hashCode();
      functionEntitySchemas1.input(list0);
      functionEntitySchemas1.getInput();
      functionEntitySchemas0.toString();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      ArrayList<DataSchema> arrayList0 = new ArrayList<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.input(arrayList0);
      DataSchema dataSchema0 = new DataSchema();
      DataSchemaField dataSchemaField0 = new DataSchemaField();
      DataSchema dataSchema1 = dataSchema0.addFieldsItem(dataSchemaField0);
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.addOutputItem(dataSchema1);
      List<DataSchema> list0 = functionEntitySchemas2.getInput();
      functionEntitySchemas0.setOutput(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      DataSchema dataSchema1 = dataSchema0.name("X8xqJq*3q0M");
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addOutputItem(dataSchema1);
      Vector<DataSchema> vector0 = new Vector<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.input(vector0);
      FunctionEntitySchemas functionEntitySchemas3 = functionEntitySchemas2.addInputItem(dataSchema0);
      functionEntitySchemas3.getOutput();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      Stack<DataSchema> stack0 = new Stack<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.input(stack0);
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.output(stack0);
      functionEntitySchemas2.toString();
      functionEntitySchemas1.getOutput();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchemaField dataSchemaField0 = new DataSchemaField();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      Boolean boolean0 = xmlSuite1.getPreserveOrder();
      DataSchemaField dataSchemaField1 = dataSchemaField0.nullable(boolean0);
      functionEntitySchemas0.equals(dataSchemaField1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      List<DataSchema> list0 = new Vector<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addInputItem((DataSchema) null);
      functionEntitySchemas1.equals((Object) null);
      functionEntitySchemas0.getInput();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      functionEntitySchemas0.getOutput();
      functionEntitySchemas0.setInput((List<DataSchema>) null);
      functionEntitySchemas0.toString();
      functionEntitySchemas0.addOutputItem((DataSchema) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addOutputItem(dataSchema0);
      Vector<DataSchema> vector0 = new Vector<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.output(vector0);
      FunctionEntitySchemas functionEntitySchemas3 = functionEntitySchemas2.input(vector0);
      FunctionEntitySchemas functionEntitySchemas4 = functionEntitySchemas3.addInputItem(dataSchema0);
      functionEntitySchemas4.toString();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      Vector<DataSchema> vector0 = new Vector<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.input(vector0);
      functionEntitySchemas1.equals(functionEntitySchemas0);
      functionEntitySchemas0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addOutputItem(dataSchema0);
      ArrayList<DataSchema> arrayList0 = new ArrayList<DataSchema>();
      dataSchema0.setName("5");
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      delayQueue0.poll(1803L, timeUnit0);
      functionEntitySchemas1.equals((Object) null);
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.output(arrayList0);
      FunctionEntitySchemas functionEntitySchemas3 = functionEntitySchemas2.input(arrayList0);
      FunctionEntitySchemas functionEntitySchemas4 = functionEntitySchemas3.addInputItem(dataSchema0);
      FunctionEntitySchemas functionEntitySchemas5 = functionEntitySchemas4.addInputItem(dataSchema0);
      FunctionEntitySchemas functionEntitySchemas6 = functionEntitySchemas3.output(arrayList0);
      functionEntitySchemas6.setInput(arrayList0);
      functionEntitySchemas5.getOutput();
      functionEntitySchemas5.hashCode();
      functionEntitySchemas6.hashCode();
      FunctionEntitySchemas functionEntitySchemas7 = functionEntitySchemas3.addOutputItem(dataSchema0);
      functionEntitySchemas7.setOutput(arrayList0);
      LinkedList<DataSchema> linkedList0 = new LinkedList<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas8 = functionEntitySchemas2.output(linkedList0);
      assertSame(functionEntitySchemas0, functionEntitySchemas8);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<DataSchema> arrayList0 = new ArrayList<DataSchema>();
      DataSchema dataSchema0 = new DataSchema();
      assertNull(dataSchema0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      dataSchema0.setName("M$U6&<8");
      DataSchema dataSchema1 = dataSchema0.id((String) null);
      dataSchema1.id((String) null);
      dataSchema1.setId("");
      functionEntitySchemas0.addOutputItem(dataSchema1);
      functionEntitySchemas0.getInput();
      functionEntitySchemas0.getInput();
      FunctionEntitySchemas functionEntitySchemas1 = new FunctionEntitySchemas();
      boolean boolean0 = functionEntitySchemas0.equals(functionEntitySchemas1);
      assertFalse(boolean0);
      
      functionEntitySchemas1.output((List<DataSchema>) null);
      functionEntitySchemas1.hashCode();
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.input((List<DataSchema>) null);
      functionEntitySchemas1.getInput();
      functionEntitySchemas0.toString();
      assertFalse(functionEntitySchemas0.equals((Object)functionEntitySchemas2));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      dataSchema0.setName("M$U6&<8");
      DataSchema dataSchema1 = dataSchema0.id((String) null);
      dataSchema1.id((String) null);
      dataSchema1.setId("");
      functionEntitySchemas0.addOutputItem(dataSchema1);
      functionEntitySchemas0.getInput();
      functionEntitySchemas0.getInput();
      FunctionEntitySchemas functionEntitySchemas1 = new FunctionEntitySchemas();
      boolean boolean0 = functionEntitySchemas0.equals(functionEntitySchemas1);
      assertFalse(boolean0);
      
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.output((List<DataSchema>) null);
      functionEntitySchemas1.hashCode();
      functionEntitySchemas1.hashCode();
      functionEntitySchemas1.input((List<DataSchema>) null);
      functionEntitySchemas1.getInput();
      functionEntitySchemas0.toString();
      assertFalse(functionEntitySchemas0.equals((Object)functionEntitySchemas2));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      Stack<DataSchemaField> stack0 = new Stack<DataSchemaField>();
      DataSchema dataSchema1 = new DataSchema();
      DataSchema dataSchema2 = dataSchema1.name("OTx]Hyoj[#yGh:uy");
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addInputItem(dataSchema2);
      DataSchema dataSchema3 = dataSchema1.id("OTx]Hyoj[#yGh:uy");
      dataSchema0.equals(functionEntitySchemas0);
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.addOutputItem(dataSchema2);
      FunctionEntitySchemas functionEntitySchemas3 = functionEntitySchemas2.addInputItem(dataSchema2);
      Object object0 = stack0.clone();
      functionEntitySchemas2.equals(functionEntitySchemas3);
      DataSchema dataSchema4 = dataSchema3.type("OTx]Hyoj[#yGh:uy");
      Object object1 = new Object();
      FunctionEntitySchemas functionEntitySchemas4 = functionEntitySchemas2.addInputItem(dataSchema4);
      functionEntitySchemas0.equals(functionEntitySchemas2);
      functionEntitySchemas0.equals(functionEntitySchemas2);
      FunctionEntitySchemas functionEntitySchemas5 = functionEntitySchemas2.addInputItem(dataSchema0);
      List<DataSchema> list0 = functionEntitySchemas3.getOutput();
      dataSchema3.setFields(stack0);
      FunctionEntitySchemas functionEntitySchemas6 = functionEntitySchemas5.output(list0);
      functionEntitySchemas6.hashCode();
      functionEntitySchemas4.toString();
      functionEntitySchemas6.toString();
      functionEntitySchemas2.setOutput(list0);
      functionEntitySchemas4.input(list0);
      DataSchema dataSchema5 = new DataSchema();
      dataSchema5.setFields(stack0);
      dataSchema0.id("class FunctionEntitySchemas {\n    input: java.util.ArrayList@0000000004\n    output: java.util.ArrayList@0000000005\n}");
      FunctionEntitySchemas functionEntitySchemas7 = functionEntitySchemas4.addInputItem(dataSchema4);
      FunctionEntitySchemas functionEntitySchemas8 = functionEntitySchemas7.output(list0);
      functionEntitySchemas5.getOutput();
      functionEntitySchemas0.equals(object0);
      functionEntitySchemas8.setOutput(list0);
      assertSame(functionEntitySchemas1, functionEntitySchemas8);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      functionEntitySchemas0.getInput();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.output((List<DataSchema>) null);
      DataSchema dataSchema0 = new DataSchema();
      functionEntitySchemas1.addInputItem(dataSchema0);
      functionEntitySchemas0.input((List<DataSchema>) null);
      functionEntitySchemas0.hashCode();
      functionEntitySchemas0.hashCode();
  }
}
