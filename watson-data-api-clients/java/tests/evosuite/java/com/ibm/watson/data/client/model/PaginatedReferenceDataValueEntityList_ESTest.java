/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 00:21:18 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.HrefModel;
import com.ibm.watson.data.client.model.PaginatedReferenceDataValueEntityList;
import com.ibm.watson.data.client.model.RelationshipObject;
import com.ibm.watson.data.client.model.ResponseReferenceDataValueEntity;
import io.netty.channel.ChannelOutboundHandlerAdapter;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import io.netty.util.concurrent.DefaultEventExecutorGroup;
import io.netty.util.concurrent.RejectedExecutionHandler;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.mockserver.scheduler.Scheduler;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaginatedReferenceDataValueEntityList_ESTest extends PaginatedReferenceDataValueEntityList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      LinkedList<ResponseReferenceDataValueEntity> linkedList0 = new LinkedList<ResponseReferenceDataValueEntity>();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.resources(linkedList0);
      linkedList0.pollLast();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList2 = paginatedReferenceDataValueEntityList1.addResourcesItem(responseReferenceDataValueEntity0);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList3 = paginatedReferenceDataValueEntityList2.resources(linkedList0);
      paginatedReferenceDataValueEntityList0.resources(linkedList0);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList4 = new PaginatedReferenceDataValueEntityList();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      paginatedReferenceDataValueEntityList4.setOffset(integer0);
      paginatedReferenceDataValueEntityList1.equals(paginatedReferenceDataValueEntityList4);
      paginatedReferenceDataValueEntityList3.equals(paginatedReferenceDataValueEntityList4);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.addResourcesItem((ResponseReferenceDataValueEntity) null);
      List<ResponseReferenceDataValueEntity> list0 = paginatedReferenceDataValueEntityList1.getResources();
      paginatedReferenceDataValueEntityList1.hashCode();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList2 = paginatedReferenceDataValueEntityList1.resources(list0);
      LinkedList<ResponseReferenceDataValueEntity> linkedList0 = new LinkedList<ResponseReferenceDataValueEntity>();
      paginatedReferenceDataValueEntityList2.setResources(linkedList0);
      paginatedReferenceDataValueEntityList2.getResources();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList3 = paginatedReferenceDataValueEntityList2.addResourcesItem((ResponseReferenceDataValueEntity) null);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList4 = paginatedReferenceDataValueEntityList3.resources(list0);
      paginatedReferenceDataValueEntityList4.setResources(list0);
      assertSame(paginatedReferenceDataValueEntityList4, paginatedReferenceDataValueEntityList1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      paginatedReferenceDataValueEntityList0.getResources();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.resources((List<ResponseReferenceDataValueEntity>) null);
      assertNull(paginatedReferenceDataValueEntityList1.getLimit());
      
      paginatedReferenceDataValueEntityList0.hashCode();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList2 = new PaginatedReferenceDataValueEntityList();
      paginatedReferenceDataValueEntityList1.equals(paginatedReferenceDataValueEntityList2);
      String string0 = "{$J:R)A,YP@\\e";
      Scheduler.SchedulerThreadFactory scheduler_SchedulerThreadFactory0 = new Scheduler.SchedulerThreadFactory("{$J:R)A,YP@e");
      int int0 = 51;
      RejectedExecutionHandler rejectedExecutionHandler0 = mock(RejectedExecutionHandler.class, new ViolatedAssumptionAnswer());
      DefaultEventExecutorGroup defaultEventExecutorGroup0 = null;
      try {
        defaultEventExecutorGroup0 = new DefaultEventExecutorGroup(0, scheduler_SchedulerThreadFactory0, 51, rejectedExecutionHandler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nThreads: 0 (expected: > 0)
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      LinkedList<ResponseReferenceDataValueEntity> linkedList0 = new LinkedList<ResponseReferenceDataValueEntity>();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.resources(linkedList0);
      linkedList0.pollLast();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList2 = paginatedReferenceDataValueEntityList1.addResourcesItem(responseReferenceDataValueEntity0);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList3 = paginatedReferenceDataValueEntityList2.resources(linkedList0);
      paginatedReferenceDataValueEntityList0.resources(linkedList0);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList4 = new PaginatedReferenceDataValueEntityList();
      paginatedReferenceDataValueEntityList1.equals(paginatedReferenceDataValueEntityList4);
      boolean boolean0 = paginatedReferenceDataValueEntityList3.equals(paginatedReferenceDataValueEntityList4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.addResourcesItem(responseReferenceDataValueEntity0);
      assertNull(paginatedReferenceDataValueEntityList1.getLimit());
      
      LinkedList<ResponseReferenceDataValueEntity> linkedList0 = new LinkedList<ResponseReferenceDataValueEntity>();
      linkedList0.add(responseReferenceDataValueEntity0);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList2 = paginatedReferenceDataValueEntityList1.resources(linkedList0);
      paginatedReferenceDataValueEntityList0.getLast();
      paginatedReferenceDataValueEntityList2.prev((HrefModel) null);
      paginatedReferenceDataValueEntityList2.equals(paginatedReferenceDataValueEntityList0);
      paginatedReferenceDataValueEntityList1.addResourcesItem(responseReferenceDataValueEntity0);
      paginatedReferenceDataValueEntityList1.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      LinkedList<ResponseReferenceDataValueEntity> linkedList0 = new LinkedList<ResponseReferenceDataValueEntity>();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.resources(linkedList0);
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity1 = responseReferenceDataValueEntity0.revision("");
      LinkedList<RelationshipObject> linkedList1 = new LinkedList<RelationshipObject>();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity2 = responseReferenceDataValueEntity1.termRelationships(linkedList1);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      RelationshipObject relationshipObject1 = relationshipObject0.entity(paginatedReferenceDataValueEntityList1);
      responseReferenceDataValueEntity0.equals(paginatedReferenceDataValueEntityList0);
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity3 = responseReferenceDataValueEntity2.addTermRelationshipsItem(relationshipObject1);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList2 = paginatedReferenceDataValueEntityList1.addResourcesItem(responseReferenceDataValueEntity3);
      Class<Object> class0 = Object.class;
      linkedList0.add(responseReferenceDataValueEntity1);
      relationshipObject0.entity(responseReferenceDataValueEntity0);
      LinkedList<RelationshipObject> linkedList2 = new LinkedList<RelationshipObject>();
      responseReferenceDataValueEntity3.setTermRelationships(linkedList2);
      LogLevel logLevel0 = LogLevel.TRACE;
      LoggingHandler loggingHandler0 = new LoggingHandler(class0, logLevel0);
      relationshipObject0.equals(loggingHandler0);
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity4 = responseReferenceDataValueEntity2.addTermRelationshipsItem(relationshipObject0);
      linkedList0.add(responseReferenceDataValueEntity4);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "$Nw5uc%s");
      linkedList1.removeIf(predicate0);
      responseReferenceDataValueEntity0.revision("$Nw5uc%s");
      paginatedReferenceDataValueEntityList2.addResourcesItem(responseReferenceDataValueEntity2);
      paginatedReferenceDataValueEntityList0.getPrev();
      paginatedReferenceDataValueEntityList2.setLast((HrefModel) null);
      // Undeclared exception!
      try { 
        paginatedReferenceDataValueEntityList1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      LinkedList<RelationshipObject> linkedList0 = new LinkedList<RelationshipObject>();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity1 = responseReferenceDataValueEntity0.termRelationships(linkedList0);
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity2 = responseReferenceDataValueEntity1.revision("handshakeTimeoutMillis: ");
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.addResourcesItem(responseReferenceDataValueEntity2);
      List<ResponseReferenceDataValueEntity> list0 = paginatedReferenceDataValueEntityList1.getResources();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList2 = paginatedReferenceDataValueEntityList1.resources(list0);
      String string0 = paginatedReferenceDataValueEntityList2.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      String string0 = paginatedReferenceDataValueEntityList0.toString();
      assertEquals("class PaginatedReferenceDataValueEntityList {\n    limit: null\n    count: null\n    first: null\n    next: null\n    offset: null\n    last: null\n    prev: null\n    resources: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      LinkedList<ResponseReferenceDataValueEntity> linkedList0 = new LinkedList<ResponseReferenceDataValueEntity>();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.resources(linkedList0);
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      responseReferenceDataValueEntity0.revision((String) null);
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity1 = responseReferenceDataValueEntity0.revision((String) null);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList2 = paginatedReferenceDataValueEntityList1.addResourcesItem(responseReferenceDataValueEntity1);
      paginatedReferenceDataValueEntityList2.resources(linkedList0);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      boolean boolean0 = paginatedReferenceDataValueEntityList2.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      LinkedList<RelationshipObject> linkedList0 = new LinkedList<RelationshipObject>();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity1 = responseReferenceDataValueEntity0.termRelationships(linkedList0);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.addResourcesItem(responseReferenceDataValueEntity1);
      LinkedList<ResponseReferenceDataValueEntity> linkedList1 = new LinkedList<ResponseReferenceDataValueEntity>();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList2 = paginatedReferenceDataValueEntityList1.resources(linkedList1);
      paginatedReferenceDataValueEntityList2.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      paginatedReferenceDataValueEntityList0.getResources();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.resources((List<ResponseReferenceDataValueEntity>) null);
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      paginatedReferenceDataValueEntityList1.equals(channelOutboundHandlerAdapter0);
      paginatedReferenceDataValueEntityList1.hashCode();
      List<ResponseReferenceDataValueEntity> list0 = paginatedReferenceDataValueEntityList0.getResources();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      String string0 = paginatedReferenceDataValueEntityList0.toString();
      assertEquals("class PaginatedReferenceDataValueEntityList {\n    limit: null\n    count: null\n    first: null\n    next: null\n    offset: null\n    last: null\n    prev: null\n    resources: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.addResourcesItem((ResponseReferenceDataValueEntity) null);
      paginatedReferenceDataValueEntityList1.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      paginatedReferenceDataValueEntityList0.getResources();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.resources((List<ResponseReferenceDataValueEntity>) null);
      paginatedReferenceDataValueEntityList0.toIndentedString(paginatedReferenceDataValueEntityList1);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList2 = paginatedReferenceDataValueEntityList0.resources((List<ResponseReferenceDataValueEntity>) null);
      boolean boolean0 = paginatedReferenceDataValueEntityList2.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      paginatedReferenceDataValueEntityList0.getResources();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.resources((List<ResponseReferenceDataValueEntity>) null);
      paginatedReferenceDataValueEntityList0.setResources((List<ResponseReferenceDataValueEntity>) null);
      boolean boolean0 = paginatedReferenceDataValueEntityList1.equals(paginatedReferenceDataValueEntityList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      paginatedReferenceDataValueEntityList0.getResources();
      paginatedReferenceDataValueEntityList0.setResources((List<ResponseReferenceDataValueEntity>) null);
      assertNull(paginatedReferenceDataValueEntityList0.getLimit());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      paginatedReferenceDataValueEntityList0.setOffset(integer0);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = new PaginatedReferenceDataValueEntityList();
      boolean boolean0 = paginatedReferenceDataValueEntityList0.equals(paginatedReferenceDataValueEntityList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      paginatedReferenceDataValueEntityList0.getResources();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = new PaginatedReferenceDataValueEntityList();
      boolean boolean0 = paginatedReferenceDataValueEntityList0.equals(paginatedReferenceDataValueEntityList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      LinkedList<ResponseReferenceDataValueEntity> linkedList0 = new LinkedList<ResponseReferenceDataValueEntity>();
      paginatedReferenceDataValueEntityList0.resources(linkedList0);
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = new PaginatedReferenceDataValueEntityList();
      boolean boolean0 = paginatedReferenceDataValueEntityList0.equals(paginatedReferenceDataValueEntityList1);
      assertFalse(boolean0);
      
      paginatedReferenceDataValueEntityList0.toString();
      assertFalse(paginatedReferenceDataValueEntityList0.equals((Object)paginatedReferenceDataValueEntityList1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList0 = new PaginatedReferenceDataValueEntityList();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList1 = paginatedReferenceDataValueEntityList0.addResourcesItem((ResponseReferenceDataValueEntity) null);
      LinkedList<ResponseReferenceDataValueEntity> linkedList0 = new LinkedList<ResponseReferenceDataValueEntity>();
      paginatedReferenceDataValueEntityList1.equals((Object) null);
      paginatedReferenceDataValueEntityList1.equals(paginatedReferenceDataValueEntityList0);
      paginatedReferenceDataValueEntityList0.equals(linkedList0);
      paginatedReferenceDataValueEntityList0.hashCode();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      PaginatedReferenceDataValueEntityList paginatedReferenceDataValueEntityList2 = paginatedReferenceDataValueEntityList1.addResourcesItem(responseReferenceDataValueEntity0);
      paginatedReferenceDataValueEntityList2.setResources(linkedList0);
      assertSame(paginatedReferenceDataValueEntityList1, paginatedReferenceDataValueEntityList2);
  }
}
