/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 01:19:44 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.FileDeleteResponse;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileDeleteResponse_ESTest extends FileDeleteResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      LinkedList<List<Object>> linkedList0 = new LinkedList<List<Object>>();
      fileDeleteResponse0.results(linkedList0);
      List<List<Object>> list0 = fileDeleteResponse0.getResults();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileDeleteResponse fileDeleteResponse1 = fileDeleteResponse0.addResultsItem(linkedList0);
      List<List<Object>> list0 = fileDeleteResponse1.getResults();
      linkedList0.add((Object) list0);
      // Undeclared exception!
      try { 
        fileDeleteResponse1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      FileDeleteResponse fileDeleteResponse1 = new FileDeleteResponse();
      boolean boolean0 = fileDeleteResponse0.equals(fileDeleteResponse1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      boolean boolean0 = fileDeleteResponse0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      boolean boolean0 = fileDeleteResponse0.equals(fileDeleteResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      boolean boolean0 = fileDeleteResponse0.equals("class FileDeleteResponse {\n    results: java.util.ArrayList@0000000002\n}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      fileDeleteResponse0.addResultsItem(linkedList0);
      String string0 = fileDeleteResponse0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      String string0 = fileDeleteResponse0.toString();
      assertEquals("class FileDeleteResponse {\n    results: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      fileDeleteResponse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      List<List<Object>> list0 = fileDeleteResponse0.getResults();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      LinkedList<List<Object>> linkedList0 = new LinkedList<List<Object>>();
      FileDeleteResponse fileDeleteResponse1 = fileDeleteResponse0.results(linkedList0);
      fileDeleteResponse1.addResultsItem((List<Object>) null);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileDeleteResponse fileDeleteResponse0 = new FileDeleteResponse();
      LinkedList<List<Object>> linkedList0 = new LinkedList<List<Object>>();
      fileDeleteResponse0.setResults(linkedList0);
      assertEquals(0, linkedList0.size());
  }
}
