/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 02:29:36 GMT 2021
 */

package com.ibm.watson.data.client.serde;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.ibm.watson.data.client.model.AbstractRelationshipEntity;
import com.ibm.watson.data.client.model.RelationshipEntity;
import com.ibm.watson.data.client.serde.AbstractRelationshipEntityDeserializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractRelationshipEntityDeserializer_ESTest extends AbstractRelationshipEntityDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractRelationshipEntityDeserializer abstractRelationshipEntityDeserializer0 = new AbstractRelationshipEntityDeserializer();
      ShortNode shortNode0 = mock(ShortNode.class, new ViolatedAssumptionAnswer());
      doReturn((JsonNode) null, (JsonNode) null).when(shortNode0).get(anyString());
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(objectCodec0).treeToValue(any(com.fasterxml.jackson.core.TreeNode.class) , nullable(java.lang.Class.class));
      JsonParser jsonParser0 = mock(JsonParser.class, new ViolatedAssumptionAnswer());
      doReturn(objectCodec0).when(jsonParser0).getCodec();
      doReturn(shortNode0).when(jsonParser0).readValueAsTree();
      DeserializationContext deserializationContext0 = mock(DeserializationContext.class, new ViolatedAssumptionAnswer());
      AbstractRelationshipEntity abstractRelationshipEntity0 = abstractRelationshipEntityDeserializer0.deserialize(jsonParser0, deserializationContext0);
      assertNull(abstractRelationshipEntity0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractRelationshipEntityDeserializer abstractRelationshipEntityDeserializer0 = new AbstractRelationshipEntityDeserializer();
      JsonNode jsonNode0 = mock(JsonNode.class, new ViolatedAssumptionAnswer());
      ShortNode shortNode0 = mock(ShortNode.class, new ViolatedAssumptionAnswer());
      doReturn(jsonNode0).when(shortNode0).get(anyString());
      RelationshipEntity relationshipEntity0 = mock(RelationshipEntity.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(relationshipEntity0).toString();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn(relationshipEntity0).when(objectCodec0).treeToValue(any(com.fasterxml.jackson.core.TreeNode.class) , nullable(java.lang.Class.class));
      JsonParser jsonParser0 = mock(JsonParser.class, new ViolatedAssumptionAnswer());
      doReturn(objectCodec0).when(jsonParser0).getCodec();
      doReturn(shortNode0).when(jsonParser0).readValueAsTree();
      DeserializationContext deserializationContext0 = mock(DeserializationContext.class, new ViolatedAssumptionAnswer());
      AbstractRelationshipEntity abstractRelationshipEntity0 = abstractRelationshipEntityDeserializer0.deserialize(jsonParser0, deserializationContext0);
      assertNull(abstractRelationshipEntity0.getSourceType());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractRelationshipEntityDeserializer abstractRelationshipEntityDeserializer0 = new AbstractRelationshipEntityDeserializer();
      JsonNode jsonNode0 = mock(JsonNode.class, new ViolatedAssumptionAnswer());
      ShortNode shortNode0 = mock(ShortNode.class, new ViolatedAssumptionAnswer());
      doReturn(jsonNode0).when(shortNode0).get(anyString());
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn("?$om$JL;JntB'8").when(objectCodec0).treeToValue(any(com.fasterxml.jackson.core.TreeNode.class) , nullable(java.lang.Class.class));
      JsonParser jsonParser0 = mock(JsonParser.class, new ViolatedAssumptionAnswer());
      doReturn(objectCodec0).when(jsonParser0).getCodec();
      doReturn(shortNode0).when(jsonParser0).readValueAsTree();
      DeserializationContext deserializationContext0 = mock(DeserializationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        abstractRelationshipEntityDeserializer0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.ibm.watson.data.client.model.AbstractRelationshipEntity
         //
         verifyException("com.ibm.watson.data.client.serde.AbstractRelationshipEntityDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AbstractRelationshipEntityDeserializer abstractRelationshipEntityDeserializer0 = new AbstractRelationshipEntityDeserializer();
      ShortNode shortNode0 = mock(ShortNode.class, new ViolatedAssumptionAnswer());
      doReturn((JsonNode) null, (JsonNode) null).when(shortNode0).get(anyString());
      JsonParser jsonParser0 = mock(JsonParser.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectCodec) null).when(jsonParser0).getCodec();
      doReturn(shortNode0).when(jsonParser0).readValueAsTree();
      DeserializationContext deserializationContext0 = mock(DeserializationContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        abstractRelationshipEntityDeserializer0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.serde.AbstractRelationshipEntityDeserializer", e);
      }
  }
}
