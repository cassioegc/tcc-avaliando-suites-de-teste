/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 00:04:42 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.AttachmentIncRes;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AttachmentIncRes_ESTest extends AttachmentIncRes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      Boolean boolean0 = new Boolean(true);
      AttachmentIncRes attachmentIncRes1 = attachmentIncRes0.privateUrl(boolean0);
      Boolean boolean1 = attachmentIncRes1.getPrivateUrl();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      Boolean boolean0 = Boolean.FALSE;
      attachmentIncRes0.privateUrl(boolean0);
      Boolean boolean1 = attachmentIncRes0.getPrivateUrl();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      Integer integer0 = new Integer(0);
      AttachmentIncRes attachmentIncRes1 = attachmentIncRes0.dataPartitions(integer0);
      Integer integer1 = attachmentIncRes1.getDataPartitions();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      Integer integer0 = new Integer((-1731));
      AttachmentIncRes attachmentIncRes1 = attachmentIncRes0.dataPartitions(integer0);
      Integer integer1 = attachmentIncRes1.getDataPartitions();
      assertEquals((-1731), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      Integer integer0 = new Integer(394);
      AttachmentIncRes attachmentIncRes1 = attachmentIncRes0.dataPartitions(integer0);
      Integer integer1 = attachmentIncRes1.getDataPartitions();
      assertEquals(394, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      Integer integer0 = new Integer((-116));
      attachmentIncRes0.setDataPartitions(integer0);
      String string0 = attachmentIncRes0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      Boolean boolean0 = Boolean.TRUE;
      AttachmentIncRes attachmentIncRes1 = new AttachmentIncRes();
      assertTrue(attachmentIncRes1.equals((Object)attachmentIncRes0));
      
      attachmentIncRes1.setPrivateUrl(boolean0);
      boolean boolean1 = attachmentIncRes0.equals(attachmentIncRes1);
      assertFalse(attachmentIncRes1.equals((Object)attachmentIncRes0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      Integer integer0 = new Integer(3);
      attachmentIncRes0.dataPartitions(integer0);
      AttachmentIncRes attachmentIncRes1 = new AttachmentIncRes();
      boolean boolean0 = attachmentIncRes0.equals(attachmentIncRes1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      boolean boolean0 = attachmentIncRes0.equals("ALWAYS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      AttachmentIncRes attachmentIncRes1 = new AttachmentIncRes();
      boolean boolean0 = attachmentIncRes0.equals(attachmentIncRes1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      boolean boolean0 = attachmentIncRes0.equals(attachmentIncRes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      boolean boolean0 = attachmentIncRes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      Boolean boolean0 = attachmentIncRes0.getPrivateUrl();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      Integer integer0 = attachmentIncRes0.getDataPartitions();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttachmentIncRes attachmentIncRes0 = new AttachmentIncRes();
      attachmentIncRes0.hashCode();
  }
}
