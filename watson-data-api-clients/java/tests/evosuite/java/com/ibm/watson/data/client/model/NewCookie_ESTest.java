/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:19:15 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.NewCookie;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NewCookie_ESTest extends NewCookie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = new Integer(0);
      NewCookie newCookie1 = newCookie0.version(integer0);
      Integer integer1 = newCookie1.getVersion();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = new Integer(4);
      newCookie0.version(integer0);
      Integer integer1 = newCookie0.getVersion();
      assertEquals(4, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = new Integer((-333));
      NewCookie newCookie1 = newCookie0.version(integer0);
      Integer integer1 = newCookie1.getVersion();
      assertEquals((-333), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.setValue("[");
      String string0 = newCookie0.getValue();
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.setValue("");
      String string0 = newCookie0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Boolean boolean0 = Boolean.TRUE;
      NewCookie newCookie1 = newCookie0.secure(boolean0);
      Boolean boolean1 = newCookie1.getSecure();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Boolean boolean0 = Boolean.valueOf("O&Sl");
      newCookie0.secure(boolean0);
      Boolean boolean1 = newCookie0.getSecure();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.setPath("reactor.netty.http.server.accessLogEnabled");
      String string0 = newCookie0.getPath();
      assertEquals("reactor.netty.http.server.accessLogEnabled", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      NewCookie newCookie1 = newCookie0.path("");
      String string0 = newCookie1.getPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      NewCookie newCookie1 = newCookie0.name("class NewCookie {\n");
      String string0 = newCookie1.getName();
      assertEquals("class NewCookie {\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.name("");
      String string0 = newCookie0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = new Integer((-1995));
      NewCookie newCookie1 = newCookie0.maxAge(integer0);
      Integer integer1 = newCookie1.getMaxAge();
      assertEquals((-1995), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = new Integer(0);
      newCookie0.maxAge(integer0);
      Integer integer1 = newCookie0.getMaxAge();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = new Integer(4196);
      newCookie0.maxAge(integer0);
      Integer integer1 = newCookie0.getMaxAge();
      assertEquals(4196, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = new Integer(508);
      newCookie0.maxAge(integer0);
      Integer integer1 = newCookie0.getMaxAge();
      assertEquals(508, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Boolean boolean0 = Boolean.valueOf(true);
      NewCookie newCookie1 = newCookie0.httpOnly(boolean0);
      Boolean boolean1 = newCookie1.getHttpOnly();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Boolean boolean0 = Boolean.FALSE;
      newCookie0.httpOnly(boolean0);
      Boolean boolean1 = newCookie0.getHttpOnly();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      MockDate mockDate0 = new MockDate((-1125), 297, 297, 297, (-1125), (-1125));
      NewCookie newCookie1 = newCookie0.expiry(mockDate0);
      Date date0 = newCookie1.getExpiry();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.domain("java.util.concurrent.ThreadPoolExecutor");
      String string0 = newCookie0.getDomain();
      assertEquals("java.util.concurrent.ThreadPoolExecutor", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.domain("");
      String string0 = newCookie0.getDomain();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.comment("    version: ");
      String string0 = newCookie0.getComment();
      assertEquals("    version: ", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.domain("[");
      String string0 = newCookie0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      NewCookie newCookie1 = new NewCookie();
      assertTrue(newCookie1.equals((Object)newCookie0));
      
      newCookie1.setPath("~RV;]");
      boolean boolean0 = newCookie0.equals(newCookie1);
      assertFalse(newCookie1.equals((Object)newCookie0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = new Integer((-3934));
      newCookie0.version(integer0);
      NewCookie newCookie1 = new NewCookie();
      boolean boolean0 = newCookie0.equals(newCookie1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      NewCookie newCookie1 = new NewCookie();
      assertTrue(newCookie1.equals((Object)newCookie0));
      
      newCookie0.setValue("Q-r`N!");
      boolean boolean0 = newCookie0.equals(newCookie1);
      assertFalse(newCookie1.equals((Object)newCookie0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      NewCookie newCookie1 = new NewCookie();
      newCookie1.name(")P,");
      boolean boolean0 = newCookie0.equals(newCookie1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      boolean boolean0 = newCookie0.equals("    domain: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      boolean boolean0 = newCookie0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      boolean boolean0 = newCookie0.equals(newCookie0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      String string0 = newCookie0.getComment();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = new Integer(0);
      newCookie0.setVersion(integer0);
      assertNull(newCookie0.getHttpOnly());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.comment("");
      String string0 = newCookie0.getComment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Boolean boolean0 = Boolean.valueOf(true);
      newCookie0.setSecure(boolean0);
      assertNull(newCookie0.getDomain());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      String string0 = newCookie0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.setName("");
      assertNull(newCookie0.getPath());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.setComment("Channel released, now {} active connections and {} inactive connections");
      assertNull(newCookie0.getMaxAge());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      String string0 = newCookie0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = newCookie0.getMaxAge();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      NewCookie newCookie1 = newCookie0.value("");
      assertSame(newCookie1, newCookie0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Boolean boolean0 = newCookie0.getSecure();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Boolean boolean0 = newCookie0.getHttpOnly();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = newCookie0.getVersion();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      String string0 = newCookie0.getDomain();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.domain("");
      NewCookie newCookie1 = new NewCookie();
      boolean boolean0 = newCookie0.equals(newCookie1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.setExpiry((Date) null);
      assertNull(newCookie0.getDomain());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.setDomain("");
      assertNull(newCookie0.getPath());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Date date0 = newCookie0.getExpiry();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Boolean boolean0 = Boolean.TRUE;
      newCookie0.setHttpOnly(boolean0);
      assertNull(newCookie0.getSecure());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      newCookie0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      Integer integer0 = new Integer(414);
      newCookie0.setMaxAge(integer0);
      assertNull(newCookie0.getVersion());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NewCookie newCookie0 = new NewCookie();
      String string0 = newCookie0.getName();
      assertNull(string0);
  }
}
