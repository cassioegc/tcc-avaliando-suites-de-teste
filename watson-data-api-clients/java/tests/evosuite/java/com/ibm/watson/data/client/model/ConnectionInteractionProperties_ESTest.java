/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 20:09:34 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.ConnectionInteractionProperties;
import com.ibm.watson.data.client.model.DatasourceTypeProperty;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.internal.DynamicGraph;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConnectionInteractionProperties_ESTest extends ConnectionInteractionProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      DynamicGraph<DatasourceTypeProperty> dynamicGraph0 = new DynamicGraph<DatasourceTypeProperty>();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      List<DatasourceTypeProperty> list0 = dynamicGraph0.getDependenciesFor(datasourceTypeProperty0);
      connectionInteractionProperties0.target(list0);
      List<DatasourceTypeProperty> list1 = connectionInteractionProperties0.getTarget();
      assertFalse(list1.contains(datasourceTypeProperty0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      ConnectionInteractionProperties connectionInteractionProperties1 = connectionInteractionProperties0.addTargetItem(datasourceTypeProperty0);
      List<DatasourceTypeProperty> list0 = connectionInteractionProperties1.getTarget();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      ArrayList<DatasourceTypeProperty> arrayList0 = new ArrayList<DatasourceTypeProperty>();
      ConnectionInteractionProperties connectionInteractionProperties1 = connectionInteractionProperties0.source(arrayList0);
      List<DatasourceTypeProperty> list0 = connectionInteractionProperties1.getSource();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      connectionInteractionProperties0.addSourceItem(datasourceTypeProperty0);
      List<DatasourceTypeProperty> list0 = connectionInteractionProperties0.getSource();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      connectionInteractionProperties0.addTargetItem(datasourceTypeProperty0);
      String string0 = connectionInteractionProperties0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      ConnectionInteractionProperties connectionInteractionProperties1 = new ConnectionInteractionProperties();
      boolean boolean0 = connectionInteractionProperties0.equals(connectionInteractionProperties1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      connectionInteractionProperties0.addSourceItem((DatasourceTypeProperty) null);
      ConnectionInteractionProperties connectionInteractionProperties1 = new ConnectionInteractionProperties();
      boolean boolean0 = connectionInteractionProperties0.equals(connectionInteractionProperties1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      boolean boolean0 = connectionInteractionProperties0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      boolean boolean0 = connectionInteractionProperties0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      boolean boolean0 = connectionInteractionProperties0.equals(connectionInteractionProperties0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      ConnectionInteractionProperties connectionInteractionProperties1 = connectionInteractionProperties0.addTargetItem(datasourceTypeProperty0);
      ConnectionInteractionProperties connectionInteractionProperties2 = new ConnectionInteractionProperties();
      boolean boolean0 = connectionInteractionProperties1.equals(connectionInteractionProperties2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      connectionInteractionProperties0.addTargetItem(datasourceTypeProperty0);
      ConnectionInteractionProperties connectionInteractionProperties1 = connectionInteractionProperties0.addTargetItem(datasourceTypeProperty0);
      assertSame(connectionInteractionProperties1, connectionInteractionProperties0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      connectionInteractionProperties0.addSourceItem(datasourceTypeProperty0);
      ConnectionInteractionProperties connectionInteractionProperties1 = connectionInteractionProperties0.addSourceItem(datasourceTypeProperty0);
      assertSame(connectionInteractionProperties1, connectionInteractionProperties0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      connectionInteractionProperties0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      List<DatasourceTypeProperty> list0 = connectionInteractionProperties0.getTarget();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      connectionInteractionProperties0.setSource((List<DatasourceTypeProperty>) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      List<DatasourceTypeProperty> list0 = connectionInteractionProperties0.getSource();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConnectionInteractionProperties connectionInteractionProperties0 = new ConnectionInteractionProperties();
      connectionInteractionProperties0.setTarget((List<DatasourceTypeProperty>) null);
  }
}
