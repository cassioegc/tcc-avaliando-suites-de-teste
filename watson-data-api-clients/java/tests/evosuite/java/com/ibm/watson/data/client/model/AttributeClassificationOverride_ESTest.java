/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 23:13:38 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.AttributeClassificationOverride;
import com.ibm.watson.data.client.model.ClassificationOverride;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AttributeClassificationOverride_ESTest extends AttributeClassificationOverride_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      ClassificationOverride classificationOverride0 = new ClassificationOverride();
      attributeClassificationOverride0.setOverwrittenClass(classificationOverride0);
      ClassificationOverride classificationOverride1 = attributeClassificationOverride0.getOverwrittenClass();
      assertSame(classificationOverride1, classificationOverride0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      attributeClassificationOverride0.setName("WRITE_ONLY");
      String string0 = attributeClassificationOverride0.getName();
      assertEquals("WRITE_ONLY", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      attributeClassificationOverride0.setName("");
      String string0 = attributeClassificationOverride0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      ClassificationOverride classificationOverride0 = new ClassificationOverride();
      attributeClassificationOverride0.setOverwrittenClass(classificationOverride0);
      String string0 = attributeClassificationOverride0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      AttributeClassificationOverride attributeClassificationOverride1 = new AttributeClassificationOverride();
      boolean boolean0 = attributeClassificationOverride0.equals(attributeClassificationOverride1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      attributeClassificationOverride0.setName("+");
      AttributeClassificationOverride attributeClassificationOverride1 = new AttributeClassificationOverride();
      boolean boolean0 = attributeClassificationOverride0.equals(attributeClassificationOverride1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      boolean boolean0 = attributeClassificationOverride0.equals("\n    ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      boolean boolean0 = attributeClassificationOverride0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      boolean boolean0 = attributeClassificationOverride0.equals(attributeClassificationOverride0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      attributeClassificationOverride0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      ClassificationOverride classificationOverride0 = attributeClassificationOverride0.getOverwrittenClass();
      assertNull(classificationOverride0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      String string0 = attributeClassificationOverride0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttributeClassificationOverride attributeClassificationOverride0 = new AttributeClassificationOverride();
      ClassificationOverride classificationOverride0 = new ClassificationOverride();
      attributeClassificationOverride0.setOverwrittenClass(classificationOverride0);
      AttributeClassificationOverride attributeClassificationOverride1 = new AttributeClassificationOverride();
      boolean boolean0 = attributeClassificationOverride0.equals(attributeClassificationOverride1);
      assertFalse(boolean0);
  }
}
