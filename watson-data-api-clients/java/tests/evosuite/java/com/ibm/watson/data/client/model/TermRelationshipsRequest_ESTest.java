/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 13:59:45 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.NewRelationship;
import com.ibm.watson.data.client.model.TermRelationshipsRequest;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TermRelationshipsRequest_ESTest extends TermRelationshipsRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addSynonymTermsItem((NewRelationship) null);
      List<NewRelationship> list0 = termRelationshipsRequest1.getSynonymTerms();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest0.replacesTerms(arrayList0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getReplacesTerms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addReplacesTermsItem(newRelationship0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getReplacesTerms();
      assertTrue(list0.contains(newRelationship0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest0.replacedByTerms(arrayList0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getReplacedByTerms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addReplacedByTermsItem(newRelationship0);
      List<NewRelationship> list0 = termRelationshipsRequest1.getReplacedByTerms();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest0.setRelatedTerms(arrayList0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getRelatedTerms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      termRelationshipsRequest0.addRelatedTermsItem((NewRelationship) null);
      List<NewRelationship> list0 = termRelationshipsRequest0.getRelatedTerms();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.parentCategory(newRelationship0);
      NewRelationship newRelationship1 = termRelationshipsRequest0.getParentCategory();
      assertNull(newRelationship1.getDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest0.isOfTerms(arrayList0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getIsOfTerms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addIsOfTermsItem(newRelationship0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getIsOfTerms();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      termRelationshipsRequest0.isATypeOfTerms(vector0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getIsATypeOfTerms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      termRelationshipsRequest0.setHasTypeTerms(vector0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getHasTypeTerms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addHasTypeTermsItem(newRelationship0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getHasTypeTerms();
      assertTrue(list0.contains(newRelationship0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.hasTerms(stack0);
      List<NewRelationship> list0 = termRelationshipsRequest1.getHasTerms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addHasTermsItem(newRelationship0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getHasTerms();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      termRelationshipsRequest0.dataClasses(vector0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getDataClasses();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addDataClassesItem(newRelationship0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getDataClasses();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.classifications(arrayList0);
      List<NewRelationship> list0 = termRelationshipsRequest1.getClassifications();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addClassificationsItem(newRelationship0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getClassifications();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest0.categories(arrayList0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getCategories();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addCategoriesItem((NewRelationship) null);
      List<NewRelationship> list0 = termRelationshipsRequest1.getCategories();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest0.hasTerms(arrayList0);
      String string0 = termRelationshipsRequest0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      TermRelationshipsRequest termRelationshipsRequest1 = new TermRelationshipsRequest();
      assertTrue(termRelationshipsRequest1.equals((Object)termRelationshipsRequest0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest1.addClassificationsItem(newRelationship0);
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addReplacedByTermsItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest1 = new TermRelationshipsRequest();
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      TermRelationshipsRequest termRelationshipsRequest1 = new TermRelationshipsRequest();
      assertTrue(termRelationshipsRequest1.equals((Object)termRelationshipsRequest0));
      
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest1.setRelatedTerms(arrayList0);
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      TermRelationshipsRequest termRelationshipsRequest1 = new TermRelationshipsRequest();
      assertTrue(termRelationshipsRequest1.equals((Object)termRelationshipsRequest0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addSynonymTermsItem(newRelationship0);
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      TermRelationshipsRequest termRelationshipsRequest1 = new TermRelationshipsRequest();
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addIsOfTermsItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest2 = new TermRelationshipsRequest();
      boolean boolean0 = termRelationshipsRequest1.equals(termRelationshipsRequest2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addHasTypeTermsItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest1 = new TermRelationshipsRequest();
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      TermRelationshipsRequest termRelationshipsRequest1 = new TermRelationshipsRequest();
      assertTrue(termRelationshipsRequest1.equals((Object)termRelationshipsRequest0));
      
      termRelationshipsRequest0.addIsATypeOfTermsItem(newRelationship0);
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest1);
      assertFalse(termRelationshipsRequest1.equals((Object)termRelationshipsRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest0.categories(arrayList0);
      TermRelationshipsRequest termRelationshipsRequest1 = new TermRelationshipsRequest();
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      boolean boolean0 = termRelationshipsRequest0.equals(arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      boolean boolean0 = termRelationshipsRequest0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addHasTermsItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest2 = new TermRelationshipsRequest();
      boolean boolean0 = termRelationshipsRequest1.equals(termRelationshipsRequest2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addClassificationsItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest2 = termRelationshipsRequest1.addClassificationsItem(newRelationship0);
      assertSame(termRelationshipsRequest0, termRelationshipsRequest2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addDataClassesItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest1 = new TermRelationshipsRequest();
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      termRelationshipsRequest0.setDataClasses(stack0);
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addDataClassesItem(newRelationship0);
      assertSame(termRelationshipsRequest1, termRelationshipsRequest0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addReplacedByTermsItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addReplacedByTermsItem(newRelationship0);
      assertSame(termRelationshipsRequest0, termRelationshipsRequest1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addReplacesTermsItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addReplacesTermsItem(newRelationship0);
      assertSame(termRelationshipsRequest0, termRelationshipsRequest1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addRelatedTermsItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addRelatedTermsItem(newRelationship0);
      assertSame(termRelationshipsRequest0, termRelationshipsRequest1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addSynonymTermsItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest2 = termRelationshipsRequest1.addSynonymTermsItem(newRelationship0);
      assertSame(termRelationshipsRequest2, termRelationshipsRequest1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addHasTermsItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest2 = termRelationshipsRequest1.addHasTermsItem(newRelationship0);
      assertSame(termRelationshipsRequest0, termRelationshipsRequest2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addIsOfTermsItem((NewRelationship) null);
      TermRelationshipsRequest termRelationshipsRequest2 = termRelationshipsRequest0.addIsOfTermsItem((NewRelationship) null);
      assertSame(termRelationshipsRequest2, termRelationshipsRequest1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addHasTypeTermsItem(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.addHasTypeTermsItem(newRelationship0);
      assertSame(termRelationshipsRequest1, termRelationshipsRequest0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.addIsATypeOfTermsItem(newRelationship0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getIsATypeOfTerms();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.isATypeOfTerms(linkedList0);
      termRelationshipsRequest1.addIsATypeOfTermsItem(newRelationship0);
      assertTrue(linkedList0.contains(newRelationship0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      termRelationshipsRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest0.setIsOfTerms(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      termRelationshipsRequest0.setParentCategory((NewRelationship) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.categories(arrayList0);
      termRelationshipsRequest1.addCategoriesItem((NewRelationship) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      List<NewRelationship> list0 = termRelationshipsRequest0.getSynonymTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      List<NewRelationship> list0 = termRelationshipsRequest0.getDataClasses();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      List<NewRelationship> list0 = termRelationshipsRequest0.getClassifications();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      List<NewRelationship> list0 = termRelationshipsRequest0.getReplacedByTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest0.synonymTerms(arrayList0);
      List<NewRelationship> list0 = termRelationshipsRequest0.getSynonymTerms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.relatedTerms(arrayList0);
      assertSame(termRelationshipsRequest1, termRelationshipsRequest0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      termRelationshipsRequest0.setHasTerms((List<NewRelationship>) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest0.setCategories(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = termRelationshipsRequest0.getParentCategory();
      assertNull(newRelationship0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      List<NewRelationship> list0 = termRelationshipsRequest0.getRelatedTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      List<NewRelationship> list0 = termRelationshipsRequest0.getIsATypeOfTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      termRelationshipsRequest0.setClassifications(stack0);
      assertEquals("[]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      termRelationshipsRequest0.setSynonymTerms(stack0);
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      List<NewRelationship> list0 = termRelationshipsRequest0.getReplacesTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      List<NewRelationship> list0 = termRelationshipsRequest0.getHasTypeTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      TermRelationshipsRequest termRelationshipsRequest1 = termRelationshipsRequest0.hasTypeTerms((List<NewRelationship>) null);
      assertSame(termRelationshipsRequest0, termRelationshipsRequest1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      List<NewRelationship> list0 = termRelationshipsRequest0.getCategories();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      termRelationshipsRequest0.setReplacedByTerms(stack0);
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      List<NewRelationship> list0 = termRelationshipsRequest0.getIsOfTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      termRelationshipsRequest0.parentCategory(newRelationship0);
      TermRelationshipsRequest termRelationshipsRequest1 = new TermRelationshipsRequest();
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      List<NewRelationship> list0 = termRelationshipsRequest0.getHasTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      termRelationshipsRequest0.setReplacesTerms(linkedList0);
      TermRelationshipsRequest termRelationshipsRequest1 = new TermRelationshipsRequest();
      boolean boolean0 = termRelationshipsRequest0.equals(termRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TermRelationshipsRequest termRelationshipsRequest0 = new TermRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      termRelationshipsRequest0.setIsATypeOfTerms(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }
}
