/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 14:12:25 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.FormProperty;
import com.ibm.watson.data.client.model.UserTaskEntity;
import com.ibm.watson.data.client.model.Variable;
import java.time.chrono.ThaiBuddhistEra;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingDeque;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserTaskEntity_ESTest extends UserTaskEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      UserTaskEntity userTaskEntity1 = userTaskEntity0.workflowTemplateId("null");
      String string0 = userTaskEntity1.getWorkflowTemplateId();
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Variable variable0 = new Variable();
      userTaskEntity0.addVariablesItem(variable0);
      List<Variable> list0 = userTaskEntity0.getVariables();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      UserTaskEntity userTaskEntity1 = userTaskEntity0.taskTitle("ORhoi");
      String string0 = userTaskEntity1.getTaskTitle();
      assertEquals("ORhoi", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.taskInstruction("    taskDefinitionKey: ");
      String string0 = userTaskEntity0.getTaskInstruction();
      assertEquals("    taskDefinitionKey: ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.setTaskDefinitionKey("~{/");
      String string0 = userTaskEntity0.getTaskDefinitionKey();
      assertEquals("~{/", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.taskDefinitionKey("");
      String string0 = userTaskEntity0.getTaskDefinitionKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Integer integer0 = new Integer(0);
      userTaskEntity0.priority(integer0);
      Integer integer1 = userTaskEntity0.getPriority();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      UserTaskEntity userTaskEntity1 = userTaskEntity0.priority(integer0);
      Integer integer1 = userTaskEntity1.getPriority();
      assertEquals(10, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Integer integer0 = new Integer((-553));
      userTaskEntity0.priority(integer0);
      Integer integer1 = userTaskEntity0.getPriority();
      assertEquals((-553), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.setParentTaskId("    formKey: ");
      String string0 = userTaskEntity0.getParentTaskId();
      assertEquals("    formKey: ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      UserTaskEntity userTaskEntity1 = userTaskEntity0.parentTaskId("");
      String string0 = userTaskEntity1.getParentTaskId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      UserTaskEntity userTaskEntity1 = userTaskEntity0.owner("(");
      String string0 = userTaskEntity1.getOwner();
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      ArrayList<FormProperty> arrayList0 = new ArrayList<FormProperty>();
      userTaskEntity0.formProperties(arrayList0);
      List<FormProperty> list0 = userTaskEntity0.getFormProperties();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.addFormPropertiesItem((FormProperty) null);
      List<FormProperty> list0 = userTaskEntity0.getFormProperties();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.setFormKey("~{/");
      String string0 = userTaskEntity0.getFormKey();
      assertEquals("~{/", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      MockDate mockDate0 = new MockDate(2576L);
      userTaskEntity0.setDueDate(mockDate0);
      Date date0 = userTaskEntity0.getDueDate();
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      MockDate mockDate0 = new MockDate();
      UserTaskEntity userTaskEntity1 = userTaskEntity0.completedAt(mockDate0);
      Date date0 = userTaskEntity1.getCompletedAt();
      assertSame(mockDate0, date0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      MockDate mockDate0 = new MockDate(509, 509, 509, 454, 511);
      UserTaskEntity userTaskEntity1 = userTaskEntity0.claimedAt(mockDate0);
      Date date0 = userTaskEntity1.getClaimedAt();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      LinkedBlockingDeque<java.util.Locale.LanguageRange> linkedBlockingDeque0 = new LinkedBlockingDeque<java.util.Locale.LanguageRange>();
      Vector<java.util.Locale.LanguageRange> vector0 = new Vector<java.util.Locale.LanguageRange>(linkedBlockingDeque0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      java.util.Locale.FilteringMode locale_FilteringMode0 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) vector0, (Collection<String>) linkedBlockingDeque1, locale_FilteringMode0);
      userTaskEntity0.setCandidateUsers(list0);
      List<String> list1 = userTaskEntity0.getCandidateUsers();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.addCandidateUsersItem("}e73SF`.5^yEx04f(Y");
      List<String> list0 = userTaskEntity0.getCandidateUsers();
      assertTrue(list0.contains("}e73SF`.5^yEx04f(Y"));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getSuiteFiles();
      userTaskEntity0.candidateGroups(list0);
      List<String> list1 = userTaskEntity0.getCandidateGroups();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.addCandidateGroupsItem("; numThreadLocalCaches: ");
      List<String> list0 = userTaskEntity0.getCandidateGroups();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.assignee("}p)");
      String string0 = userTaskEntity0.getAssignee();
      assertEquals("}p)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.assignee("");
      String string0 = userTaskEntity0.getAssignee();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Variable variable0 = new Variable();
      variable0.setValue(variable0);
      UserTaskEntity userTaskEntity1 = userTaskEntity0.addVariablesItem(variable0);
      // Undeclared exception!
      try { 
        userTaskEntity1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getIncludedGroups();
      userTaskEntity0.candidateUsers(list0);
      // Undeclared exception!
      try { 
        userTaskEntity0.addCandidateUsersItem(" not allowed in a pipeline");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      ArrayList<FormProperty> arrayList0 = new ArrayList<FormProperty>();
      UserTaskEntity userTaskEntity1 = userTaskEntity0.formProperties(arrayList0);
      String string0 = userTaskEntity1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.workflowTemplateId(">mN0");
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.taskTitle(">mN3");
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.taskInstruction(">mN0");
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.taskDefinitionKey(">mN0");
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      userTaskEntity0.priority(integer0);
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.parentTaskId(">mN0");
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.owner("#f1hv:3(=ov:IB@H0h}");
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      assertTrue(userTaskEntity1.equals((Object)userTaskEntity0));
      
      ArrayList<FormProperty> arrayList0 = new ArrayList<FormProperty>();
      userTaskEntity1.formProperties(arrayList0);
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      assertTrue(userTaskEntity1.equals((Object)userTaskEntity0));
      
      userTaskEntity0.formKey("#f1hv:3(=ov:IB@H0h}");
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      MockDate mockDate0 = new MockDate();
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      assertTrue(userTaskEntity1.equals((Object)userTaskEntity0));
      
      UserTaskEntity userTaskEntity2 = userTaskEntity1.dueDate(mockDate0);
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      MockDate mockDate0 = new MockDate(1002, 0, 1002);
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      assertTrue(userTaskEntity1.equals((Object)userTaskEntity0));
      
      userTaskEntity1.completedAt(mockDate0);
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      MockDate mockDate0 = new MockDate(1002, 0, 1002);
      userTaskEntity0.claimedAt(mockDate0);
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      assertTrue(userTaskEntity1.equals((Object)userTaskEntity0));
      
      userTaskEntity1.addCandidateUsersItem("s<!F'#R8");
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(userTaskEntity1.equals((Object)userTaskEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      boolean boolean0 = userTaskEntity0.equals(thaiBuddhistEra0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.addCandidateGroupsItem("    taskInstruction: ");
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Variable variable0 = new Variable();
      userTaskEntity0.addVariablesItem(variable0);
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      LinkedList<Variable> linkedList0 = new LinkedList<Variable>();
      UserTaskEntity userTaskEntity1 = userTaskEntity0.variables(linkedList0);
      Variable variable0 = new Variable();
      userTaskEntity1.addVariablesItem(variable0);
      assertTrue(linkedList0.contains(variable0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      UserTaskEntity userTaskEntity1 = userTaskEntity0.addCandidateGroupsItem("U#:bQ-8no{2j5b^*`CP");
      UserTaskEntity userTaskEntity2 = userTaskEntity1.addCandidateGroupsItem("-Dio.netty.processId: {} (auto-detected)");
      assertSame(userTaskEntity2, userTaskEntity0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.setWorkflowTemplateId("");
      String string0 = userTaskEntity0.getWorkflowTemplateId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      MockDate mockDate0 = new MockDate(2368L);
      userTaskEntity0.setClaimedAt(mockDate0);
      assertNull(userTaskEntity0.getPriority());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      String string0 = userTaskEntity0.getOwner();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      String string0 = userTaskEntity0.getTaskTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Stack<Variable> stack0 = new Stack<Variable>();
      userTaskEntity0.variables(stack0);
      List<Variable> list0 = userTaskEntity0.getVariables();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      String string0 = userTaskEntity0.getTaskDefinitionKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Date date0 = userTaskEntity0.getClaimedAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      LinkedHashSet<Variable> linkedHashSet0 = new LinkedHashSet<Variable>();
      Vector<Variable> vector0 = new Vector<Variable>(linkedHashSet0);
      userTaskEntity0.setVariables(vector0);
      assertNull(userTaskEntity0.getWorkflowTemplateId());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      ArrayList<FormProperty> arrayList0 = new ArrayList<FormProperty>();
      UserTaskEntity userTaskEntity1 = userTaskEntity0.formProperties(arrayList0);
      FormProperty formProperty0 = new FormProperty();
      UserTaskEntity userTaskEntity2 = userTaskEntity0.addFormPropertiesItem(formProperty0);
      assertSame(userTaskEntity2, userTaskEntity1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Date date0 = userTaskEntity0.getDueDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      String string0 = userTaskEntity0.getTaskInstruction();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      String string0 = userTaskEntity0.getParentTaskId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.setOwner((String) null);
      assertNull(userTaskEntity0.getFormKey());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Date date0 = userTaskEntity0.getCompletedAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.owner("");
      String string0 = userTaskEntity0.getOwner();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      String string0 = userTaskEntity0.getWorkflowTemplateId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      List<String> list0 = userTaskEntity0.getCandidateUsers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.assignee("fOgdOUe Y-(G");
      UserTaskEntity userTaskEntity1 = new UserTaskEntity();
      boolean boolean0 = userTaskEntity0.equals(userTaskEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      List<Variable> list0 = userTaskEntity0.getVariables();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.setTaskTitle("");
      String string0 = userTaskEntity0.getTaskTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      userTaskEntity0.setPriority(integer0);
      assertNull(userTaskEntity0.getTaskDefinitionKey());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      String string0 = userTaskEntity0.getFormKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      List<String> list0 = userTaskEntity0.getCandidateGroups();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      String string0 = userTaskEntity0.getAssignee();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 0);
      List<String> list0 = xmlTest0.getExcludedGroups();
      userTaskEntity0.candidateGroups(list0);
      // Undeclared exception!
      try { 
        userTaskEntity0.addCandidateGroupsItem("-Dio.netty.processId: {} (auto-detected)");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.setAssignee("H[4x`XLf <");
      assertEquals("H[4x`XLf <", userTaskEntity0.getAssignee());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      LinkedList<FormProperty> linkedList0 = new LinkedList<FormProperty>();
      userTaskEntity0.setFormProperties(linkedList0);
      assertNull(userTaskEntity0.getFormKey());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      MockDate mockDate0 = new MockDate();
      userTaskEntity0.setCompletedAt(mockDate0);
      assertNull(userTaskEntity0.getParentTaskId());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.setTaskInstruction("");
      String string0 = userTaskEntity0.getTaskInstruction();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.setCandidateGroups((List<String>) null);
      assertNull(userTaskEntity0.getParentTaskId());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      List<FormProperty> list0 = userTaskEntity0.getFormProperties();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.setFormKey("");
      String string0 = userTaskEntity0.getFormKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Integer integer0 = userTaskEntity0.getPriority();
      assertNull(integer0);
  }
}
