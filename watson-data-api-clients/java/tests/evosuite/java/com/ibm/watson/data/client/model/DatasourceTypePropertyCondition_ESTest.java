/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 20:34:22 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.DatasourceTypeCondition;
import com.ibm.watson.data.client.model.DatasourceTypePropertyCondition;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.internal.DynamicGraph;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatasourceTypePropertyCondition_ESTest extends DatasourceTypePropertyCondition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      datasourceTypePropertyCondition0.setPropertyName("/f");
      String string0 = datasourceTypePropertyCondition0.getPropertyName();
      assertEquals("/f", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      datasourceTypePropertyCondition0.propertyName("");
      String string0 = datasourceTypePropertyCondition0.getPropertyName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      Stack<DatasourceTypeCondition> stack0 = new Stack<DatasourceTypeCondition>();
      datasourceTypePropertyCondition0.setConditions(stack0);
      List<DatasourceTypeCondition> list0 = datasourceTypePropertyCondition0.getConditions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      DatasourceTypeCondition datasourceTypeCondition0 = new DatasourceTypeCondition();
      DatasourceTypePropertyCondition datasourceTypePropertyCondition1 = datasourceTypePropertyCondition0.addConditionsItem(datasourceTypeCondition0);
      List<DatasourceTypeCondition> list0 = datasourceTypePropertyCondition1.getConditions();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      Boolean boolean0 = new Boolean(true);
      datasourceTypePropertyCondition0.allConditionsRequired(boolean0);
      Boolean boolean1 = datasourceTypePropertyCondition0.getAllConditionsRequired();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      datasourceTypePropertyCondition0.setPropertyName("Cannot find class in classpath: ");
      Boolean boolean0 = Boolean.valueOf("com.ibm.watson.data.client.model.DatasourceTypePropertyCondition");
      DatasourceTypePropertyCondition datasourceTypePropertyCondition1 = datasourceTypePropertyCondition0.allConditionsRequired(boolean0);
      datasourceTypePropertyCondition1.toString();
      Boolean boolean1 = datasourceTypePropertyCondition1.getAllConditionsRequired();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      Boolean boolean0 = XmlSuite.DEFAULT_GROUP_BY_INSTANCES;
      boolean boolean1 = datasourceTypePropertyCondition0.equals(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      datasourceTypePropertyCondition0.hashCode();
      DatasourceTypePropertyCondition datasourceTypePropertyCondition1 = new DatasourceTypePropertyCondition();
      DynamicGraph<DatasourceTypeCondition> dynamicGraph0 = new DynamicGraph<DatasourceTypeCondition>();
      DatasourceTypeCondition datasourceTypeCondition0 = new DatasourceTypeCondition();
      List<DatasourceTypeCondition> list0 = dynamicGraph0.getDependenciesFor(datasourceTypeCondition0);
      datasourceTypePropertyCondition1.conditions(list0);
      DatasourceTypePropertyCondition datasourceTypePropertyCondition2 = datasourceTypePropertyCondition0.conditions(list0);
      datasourceTypePropertyCondition1.equals(datasourceTypePropertyCondition2);
      assertTrue(datasourceTypePropertyCondition1.equals((Object)datasourceTypePropertyCondition0));
      
      DatasourceTypePropertyCondition datasourceTypePropertyCondition3 = datasourceTypePropertyCondition1.propertyName(">[PI&");
      assertFalse(datasourceTypePropertyCondition3.equals((Object)datasourceTypePropertyCondition2));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      DatasourceTypePropertyCondition datasourceTypePropertyCondition1 = datasourceTypePropertyCondition0.propertyName("}");
      DatasourceTypePropertyCondition datasourceTypePropertyCondition2 = new DatasourceTypePropertyCondition();
      boolean boolean0 = datasourceTypePropertyCondition1.equals(datasourceTypePropertyCondition2);
      assertFalse(boolean0);
      
      datasourceTypePropertyCondition1.getAllConditionsRequired();
      assertFalse(datasourceTypePropertyCondition0.equals((Object)datasourceTypePropertyCondition2));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      datasourceTypePropertyCondition0.hashCode();
      DatasourceTypePropertyCondition datasourceTypePropertyCondition1 = new DatasourceTypePropertyCondition();
      assertTrue(datasourceTypePropertyCondition1.equals((Object)datasourceTypePropertyCondition0));
      
      DynamicGraph<DatasourceTypeCondition> dynamicGraph0 = new DynamicGraph<DatasourceTypeCondition>();
      DatasourceTypeCondition datasourceTypeCondition0 = new DatasourceTypeCondition();
      DatasourceTypeCondition datasourceTypeCondition1 = datasourceTypeCondition0.propertyName("Error while acquiring from ");
      List<DatasourceTypeCondition> list0 = dynamicGraph0.getDependenciesFor(datasourceTypeCondition1);
      DatasourceTypePropertyCondition datasourceTypePropertyCondition2 = datasourceTypePropertyCondition0.conditions(list0);
      datasourceTypePropertyCondition1.equals(datasourceTypePropertyCondition2);
      assertFalse(datasourceTypePropertyCondition1.equals((Object)datasourceTypePropertyCondition0));
      
      datasourceTypePropertyCondition0.propertyName("    allConditionsRequired: ");
      assertFalse(datasourceTypePropertyCondition0.equals((Object)datasourceTypePropertyCondition1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      Boolean boolean0 = Boolean.valueOf(true);
      DatasourceTypePropertyCondition datasourceTypePropertyCondition1 = datasourceTypePropertyCondition0.allConditionsRequired(boolean0);
      DatasourceTypeCondition datasourceTypeCondition0 = new DatasourceTypeCondition();
      DatasourceTypePropertyCondition datasourceTypePropertyCondition2 = datasourceTypePropertyCondition1.propertyName("");
      datasourceTypePropertyCondition2.addConditionsItem(datasourceTypeCondition0);
      DatasourceTypePropertyCondition datasourceTypePropertyCondition3 = datasourceTypePropertyCondition1.addConditionsItem(datasourceTypeCondition0);
      assertSame(datasourceTypePropertyCondition0, datasourceTypePropertyCondition3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      Boolean boolean0 = XmlSuite.DEFAULT_GROUP_BY_INSTANCES;
      DatasourceTypePropertyCondition datasourceTypePropertyCondition1 = datasourceTypePropertyCondition0.allConditionsRequired(boolean0);
      datasourceTypePropertyCondition1.getConditions();
      boolean boolean1 = datasourceTypePropertyCondition0.equals(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      datasourceTypePropertyCondition0.equals((Object) null);
      datasourceTypePropertyCondition0.getAllConditionsRequired();
      Vector<DatasourceTypeCondition> vector0 = new Vector<DatasourceTypeCondition>();
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      DynamicGraph<DatasourceTypeCondition> dynamicGraph0 = new DynamicGraph<DatasourceTypeCondition>();
      DatasourceTypeCondition datasourceTypeCondition0 = new DatasourceTypeCondition();
      DatasourceTypeCondition datasourceTypeCondition1 = datasourceTypeCondition0.propertyName("Error while acquiring from ");
      List<DatasourceTypeCondition> list0 = dynamicGraph0.getDependenciesFor(datasourceTypeCondition1);
      datasourceTypePropertyCondition0.equals(datasourceTypePropertyCondition0);
      datasourceTypePropertyCondition0.setConditions(list0);
      DatasourceTypePropertyCondition datasourceTypePropertyCondition1 = datasourceTypePropertyCondition0.propertyName("    allConditionsRequired: ");
      assertSame(datasourceTypePropertyCondition1, datasourceTypePropertyCondition0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatasourceTypePropertyCondition datasourceTypePropertyCondition0 = new DatasourceTypePropertyCondition();
      datasourceTypePropertyCondition0.getPropertyName();
      XmlSuite xmlSuite0 = new XmlSuite();
      xmlSuite0.setJunit(xmlSuite0.DEFAULT_JUNIT);
      datasourceTypePropertyCondition0.setAllConditionsRequired(xmlSuite0.DEFAULT_JUNIT);
      DatasourceTypePropertyCondition datasourceTypePropertyCondition1 = datasourceTypePropertyCondition0.propertyName("#)AKQJ$>h8ASh#7]");
      assertSame(datasourceTypePropertyCondition0, datasourceTypePropertyCondition1);
  }
}
