/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:46:10 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.InputDataArray;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InputDataArray_ESTest extends InputDataArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      StringBuilder stringBuilder0 = new StringBuilder(0);
      inputDataArray0.toString(stringBuilder0);
      assertEquals("    id: null\n    fields: null\n    values: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String string0 = inputDataArray0.toIndentedString(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      ArrayList<List<Object>> arrayList0 = new ArrayList<List<Object>>();
      inputDataArray0.values(arrayList0);
      List<List<Object>> list0 = inputDataArray0.getValues();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      InputDataArray inputDataArray1 = inputDataArray0.addValuesItem(arrayList0);
      List<List<Object>> list0 = inputDataArray1.getValues();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      InputDataArray inputDataArray1 = inputDataArray0.id("7%9");
      String string0 = inputDataArray1.getId();
      assertEquals("7%9", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      InputDataArray inputDataArray1 = inputDataArray0.id("");
      String string0 = inputDataArray1.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      InputDataArray inputDataArray1 = inputDataArray0.addFieldsItem("reactor.core.publisher.FluxErrorOnRequest$ErrorSubscription");
      List<String> list0 = inputDataArray1.getFields();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getIncludedGroups();
      InputDataArray inputDataArray1 = inputDataArray0.fields(list0);
      // Undeclared exception!
      try { 
        inputDataArray1.addFieldsItem("IHv+Ch4/=[^DlDvP");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      // Undeclared exception!
      try { 
        inputDataArray0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.InputDataArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      LinkedList<List<Object>> linkedList0 = new LinkedList<List<Object>>();
      inputDataArray0.setValues(linkedList0);
      String string0 = inputDataArray0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      InputDataArray inputDataArray1 = new InputDataArray();
      boolean boolean0 = inputDataArray0.equals(inputDataArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      InputDataArray inputDataArray1 = new InputDataArray();
      assertTrue(inputDataArray1.equals((Object)inputDataArray0));
      
      inputDataArray1.addFieldsItem("");
      boolean boolean0 = inputDataArray0.equals(inputDataArray1);
      assertFalse(inputDataArray1.equals((Object)inputDataArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      boolean boolean0 = inputDataArray0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      boolean boolean0 = inputDataArray0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      boolean boolean0 = inputDataArray0.equals(inputDataArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      Vector<List<Object>> vector0 = new Vector<List<Object>>();
      InputDataArray inputDataArray1 = inputDataArray0.values(vector0);
      inputDataArray1.addValuesItem((List<Object>) null);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      String string0 = inputDataArray0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      inputDataArray0.setId("H 'OVHSKxZ/zYtA7T!");
      assertEquals("H 'OVHSKxZ/zYtA7T!", inputDataArray0.getId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      LinkedList<List<Object>> linkedList0 = new LinkedList<List<Object>>();
      inputDataArray0.setValues(linkedList0);
      InputDataArray inputDataArray1 = new InputDataArray();
      boolean boolean0 = inputDataArray0.equals(inputDataArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      Stack<String> stack0 = new Stack<String>();
      inputDataArray0.setFields(stack0);
      List<String> list0 = inputDataArray0.getFields();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      InputDataArray inputDataArray1 = inputDataArray0.id("H 'OVHSKxZ/zYtA7T!");
      InputDataArray inputDataArray2 = new InputDataArray();
      boolean boolean0 = inputDataArray1.equals(inputDataArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      List<String> list0 = inputDataArray0.getFields();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      inputDataArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InputDataArray inputDataArray0 = new InputDataArray();
      List<List<Object>> list0 = inputDataArray0.getValues();
      assertNull(list0);
  }
}
