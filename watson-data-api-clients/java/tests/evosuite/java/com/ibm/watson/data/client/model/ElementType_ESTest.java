/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 15:38:39 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.ElementType;
import com.ibm.watson.data.client.model.enums.ElementOrigin;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ElementType_ESTest extends ElementType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      Long long0 = new Long((-2199L));
      elementType0.elementTypeVersion(long0);
      Long long1 = elementType0.getElementTypeVersion();
      assertEquals((-2199L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      Long long0 = new Long(410L);
      ElementType elementType1 = elementType0.elementTypeVersion(long0);
      Long long1 = elementType1.getElementTypeVersion();
      assertEquals(410L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = elementType0.elementTypeName("L8:JL.=8%AD5vYq");
      String string0 = elementType1.getElementTypeName();
      assertEquals("L8:JL.=8%AD5vYq", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = elementType0.elementTypeId("class ElementType {\n    elementTypeId: null\n    elementTypeName: null\n    elementSuperTypeNames: java.util.ArrayList@0000000004\n    elementTypeVersion: null\n    elementTypeDescription: null\n    elementSourceServer: null\n    elementOrigin: com.ibm.watson.data.client.model.enums.ElementOrigin@0000000005\n    elementHomeMetadataCollectionId: null\n    elementHomeMetadataCollectionName: null\n    elementLicense: null\n}");
      String string0 = elementType1.getElementTypeId();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = elementType0.elementTypeDescription("    elementOrigin: ");
      String string0 = elementType1.getElementTypeDescription();
      assertEquals("    elementOrigin: ", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.elementTypeDescription("");
      String string0 = elementType0.getElementTypeDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getListeners();
      elementType0.elementSuperTypeNames(list0);
      List<String> list1 = elementType0.getElementSuperTypeNames();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.addElementSuperTypeNamesItem("");
      List<String> list0 = elementType0.getElementSuperTypeNames();
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.elementSourceServer("xBW18!X#I1NAd");
      String string0 = elementType0.getElementSourceServer();
      assertEquals("xBW18!X#I1NAd", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.elementLicense("");
      String string0 = elementType0.getElementLicense();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.elementHomeMetadataCollectionName("    elementTypeVersion: ");
      String string0 = elementType0.getElementHomeMetadataCollectionName();
      assertEquals("    elementTypeVersion: ", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.elementHomeMetadataCollectionName("");
      String string0 = elementType0.getElementHomeMetadataCollectionName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = elementType0.elementHomeMetadataCollectionId("Ji");
      String string0 = elementType1.getElementHomeMetadataCollectionId();
      assertEquals("Ji", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_VERBOSE);
      List<String> list0 = xmlTest0.getExcludedGroups();
      ElementType elementType1 = elementType0.elementSuperTypeNames(list0);
      // Undeclared exception!
      try { 
        elementType1.addElementSuperTypeNamesItem("u9*).");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = new ElementType();
      assertTrue(elementType1.equals((Object)elementType0));
      
      ElementType elementType2 = elementType1.elementTypeId("    elementTypeVersion: ");
      elementType2.elementLicense("    elementTypeVersion: ");
      elementType0.setElementTypeId("    elementTypeVersion: ");
      boolean boolean0 = elementType0.equals(elementType2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = new ElementType();
      elementType0.setElementSourceServer("    elementOrigin: ");
      elementType1.elementSourceServer("    elementOrigin: ");
      assertTrue(elementType1.equals((Object)elementType0));
      
      ElementType elementType2 = elementType1.elementHomeMetadataCollectionName("    elementTypeVersion: ");
      ElementType elementType3 = elementType2.elementTypeId("    elementTypeVersion: ");
      elementType0.setElementTypeId("    elementTypeVersion: ");
      boolean boolean0 = elementType0.equals(elementType3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = new ElementType();
      assertTrue(elementType1.equals((Object)elementType0));
      
      ElementType elementType2 = elementType1.elementTypeId("    elementTypeVersion: ");
      elementType0.setElementHomeMetadataCollectionId("    elementTypeVersion: ");
      elementType0.setElementTypeId("    elementTypeVersion: ");
      boolean boolean0 = elementType0.equals(elementType2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = new ElementType();
      assertTrue(elementType1.equals((Object)elementType0));
      
      ElementType elementType2 = elementType1.elementTypeId("    elementTypeVersion: ");
      ElementOrigin elementOrigin0 = ElementOrigin.UNKNOWN;
      elementType2.elementOrigin(elementOrigin0);
      elementType0.setElementTypeId("    elementTypeVersion: ");
      boolean boolean0 = elementType0.equals(elementType2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = new ElementType();
      assertTrue(elementType1.equals((Object)elementType0));
      
      elementType0.setElementSourceServer("    elementOrigin: ");
      elementType0.elementTypeId("    elementOrigin: ");
      ElementType elementType2 = elementType1.elementTypeId("    elementOrigin: ");
      boolean boolean0 = elementType0.equals(elementType2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = new ElementType();
      assertTrue(elementType1.equals((Object)elementType0));
      
      elementType1.elementTypeDescription("    elementOrigin: ");
      elementType0.setElementTypeId("    elementOrigin: ");
      ElementType elementType2 = elementType1.elementTypeId("    elementOrigin: ");
      boolean boolean0 = elementType0.equals(elementType2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = new ElementType();
      assertTrue(elementType1.equals((Object)elementType0));
      
      Long long0 = new Long(0L);
      elementType1.elementTypeVersion(long0);
      ElementType elementType2 = elementType1.elementTypeId("    elementTypeVersion: ");
      elementType0.setElementTypeId("    elementTypeVersion: ");
      boolean boolean0 = elementType0.equals(elementType2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ElementType elementType1 = new ElementType();
      assertTrue(elementType1.equals((Object)elementType0));
      
      elementType0.elementSuperTypeNames(linkedList0);
      ElementType elementType2 = elementType1.elementTypeId("    elementTypeVersion: ");
      elementType0.setElementTypeId("    elementTypeVersion: ");
      boolean boolean0 = elementType0.equals(elementType2);
      assertFalse(elementType1.equals((Object)elementType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = new ElementType();
      ElementType elementType2 = elementType1.elementTypeId("   elementTypeVersion: ");
      elementType0.setElementTypeId("   elementTypeVersion: ");
      elementType2.setElementTypeName("   elementTypeVersion: ");
      boolean boolean0 = elementType0.equals(elementType2);
      assertFalse(elementType2.equals((Object)elementType0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = new ElementType();
      elementType0.setElementTypeId("    elementOrigin: ");
      boolean boolean0 = elementType0.equals(elementType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = new ElementType();
      boolean boolean0 = elementType0.equals(elementType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      boolean boolean0 = elementType0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      boolean boolean0 = elementType0.equals(elementType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      Object object0 = new Object();
      boolean boolean0 = elementType0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = elementType0.elementTypeId("");
      String string0 = elementType1.getElementTypeId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.elementTypeName("");
      String string0 = elementType0.getElementTypeName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      String string0 = elementType0.getElementSourceServer();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      Vector<String> vector0 = new Vector<String>();
      elementType0.setElementSuperTypeNames(vector0);
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      Long long0 = elementType0.getElementTypeVersion();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementOrigin elementOrigin0 = ElementOrigin.UNKNOWN;
      elementType0.elementOrigin(elementOrigin0);
      ElementOrigin elementOrigin1 = elementType0.getElementOrigin();
      assertSame(elementOrigin1, elementOrigin0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      String string0 = elementType0.getElementHomeMetadataCollectionName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      String string0 = elementType0.getElementTypeDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      String string0 = elementType0.getElementTypeName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.setElementTypeDescription("reactor.core.publisher.QueueDrainSubscriberPad3");
      assertNull(elementType0.getElementTypeVersion());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.getElementOrigin();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      Long long0 = new Long(0L);
      elementType0.elementTypeVersion(long0);
      Long long1 = elementType0.getElementTypeVersion();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.setElementHomeMetadataCollectionName("");
      assertNull(elementType0.getElementTypeVersion());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.hashCode();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = elementType0.elementHomeMetadataCollectionName("");
      String string0 = elementType1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.setElementLicense("JH$sxG)UV");
      String string0 = elementType0.getElementLicense();
      assertEquals("JH$sxG)UV", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      ElementOrigin elementOrigin0 = ElementOrigin.CONTENT_PACK;
      elementType0.setElementOrigin(elementOrigin0);
      assertNull(elementType0.getElementSourceServer());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      List<String> list0 = elementType0.getElementSuperTypeNames();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.elementHomeMetadataCollectionId("");
      String string0 = elementType0.getElementHomeMetadataCollectionId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.elementSourceServer("");
      String string0 = elementType0.getElementSourceServer();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      String string0 = elementType0.getElementHomeMetadataCollectionId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      String string0 = elementType0.getElementTypeId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      String string0 = elementType0.getElementLicense();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ElementType elementType0 = new ElementType();
      elementType0.setElementTypeVersion((Long) null);
      assertNull(elementType0.getElementSourceServer());
  }
}
