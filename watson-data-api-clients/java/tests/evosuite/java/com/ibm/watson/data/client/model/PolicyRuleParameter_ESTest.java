/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 22:50:57 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.ibm.watson.data.client.model.PolicyRuleParameter;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import reactor.core.CoreSubscriber;
import reactor.core.publisher.Operators;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PolicyRuleParameter_ESTest extends PolicyRuleParameter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PolicyRuleParameter policyRuleParameter1 = policyRuleParameter0.value(linkedList0);
      linkedList0.add("1Ao;0N;B");
      List<String> list0 = policyRuleParameter1.getValue();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      policyRuleParameter0.name("AjW[XAF/7>:w'FJHk_");
      String string0 = policyRuleParameter0.getName();
      assertEquals("AjW[XAF/7>:w'FJHk_", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      policyRuleParameter0.setName("");
      String string0 = policyRuleParameter0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      policyRuleParameter0.name("~");
      PolicyRuleParameter policyRuleParameter1 = new PolicyRuleParameter();
      boolean boolean0 = policyRuleParameter0.equals(policyRuleParameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      PolicyRuleParameter policyRuleParameter1 = new PolicyRuleParameter();
      boolean boolean0 = policyRuleParameter0.equals(policyRuleParameter1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      boolean boolean0 = policyRuleParameter0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      boolean boolean0 = policyRuleParameter0.equals(policyRuleParameter0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      java.util.Locale.FilteringMode locale_FilteringMode0 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean0 = policyRuleParameter0.equals(locale_FilteringMode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      String string0 = policyRuleParameter0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      List<String> list0 = policyRuleParameter0.getValue();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      LinkedList<java.util.Locale.LanguageRange> linkedList0 = new LinkedList<java.util.Locale.LanguageRange>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      java.util.Locale.FilteringMode locale_FilteringMode0 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) linkedList0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      policyRuleParameter0.setValue(list0);
      PolicyRuleParameter policyRuleParameter1 = new PolicyRuleParameter();
      boolean boolean0 = policyRuleParameter0.equals(policyRuleParameter1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PolicyRuleParameter policyRuleParameter0 = new PolicyRuleParameter();
      policyRuleParameter0.hashCode();
  }
}
