/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:46:44 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.DatasourceTypeProperties;
import com.ibm.watson.data.client.model.DatasourceTypeProperty;
import com.ibm.watson.data.client.model.DatasourceTypePropertyConditions;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatasourceTypeProperties_ESTest extends DatasourceTypeProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      Vector<DatasourceTypeProperty> vector0 = new Vector<DatasourceTypeProperty>();
      DatasourceTypeProperties datasourceTypeProperties1 = datasourceTypeProperties0.source(vector0);
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties1.getSource();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      ArrayList<DatasourceTypeProperty> arrayList0 = new ArrayList<DatasourceTypeProperty>();
      DatasourceTypeProperties datasourceTypeProperties1 = datasourceTypeProperties0.filter(arrayList0);
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties1.getFilter();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      ArrayList<DatasourceTypeProperty> arrayList0 = new ArrayList<DatasourceTypeProperty>();
      DatasourceTypeProperties datasourceTypeProperties1 = datasourceTypeProperties0.connection(arrayList0);
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties1.getConnection();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperties0.addConnectionItem(datasourceTypeProperty0);
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties0.getConnection();
      assertTrue(list0.contains(datasourceTypeProperty0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperties datasourceTypeProperties1 = new DatasourceTypeProperties();
      assertTrue(datasourceTypeProperties1.equals((Object)datasourceTypeProperties0));
      
      DatasourceTypePropertyConditions datasourceTypePropertyConditions0 = new DatasourceTypePropertyConditions();
      datasourceTypeProperties1.setConditions(datasourceTypePropertyConditions0);
      boolean boolean0 = datasourceTypeProperties1.equals(datasourceTypeProperties0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperties datasourceTypeProperties1 = new DatasourceTypeProperties();
      assertTrue(datasourceTypeProperties1.equals((Object)datasourceTypeProperties0));
      
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperties0.addFilterItem(datasourceTypeProperty0);
      boolean boolean0 = datasourceTypeProperties1.equals(datasourceTypeProperties0);
      assertFalse(datasourceTypeProperties1.equals((Object)datasourceTypeProperties0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperties datasourceTypeProperties1 = new DatasourceTypeProperties();
      assertTrue(datasourceTypeProperties1.equals((Object)datasourceTypeProperties0));
      
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperties0.addTargetItem(datasourceTypeProperty0);
      DatasourceTypeProperties datasourceTypeProperties2 = datasourceTypeProperties1.source((List<DatasourceTypeProperty>) null);
      boolean boolean0 = datasourceTypeProperties2.equals(datasourceTypeProperties0);
      assertFalse(datasourceTypeProperties1.equals((Object)datasourceTypeProperties0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperties datasourceTypeProperties1 = new DatasourceTypeProperties();
      boolean boolean0 = datasourceTypeProperties1.equals(datasourceTypeProperties0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      boolean boolean0 = datasourceTypeProperties0.equals("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      boolean boolean0 = datasourceTypeProperties0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      boolean boolean0 = datasourceTypeProperties0.equals(datasourceTypeProperties0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperties0.addFilterItem(datasourceTypeProperty0);
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties0.getFilter();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      ArrayList<DatasourceTypeProperty> arrayList0 = new ArrayList<DatasourceTypeProperty>();
      DatasourceTypeProperties datasourceTypeProperties1 = datasourceTypeProperties0.filter(arrayList0);
      DatasourceTypeProperties datasourceTypeProperties2 = datasourceTypeProperties0.addFilterItem(datasourceTypeProperty0);
      assertSame(datasourceTypeProperties2, datasourceTypeProperties1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperties0.addTargetItem(datasourceTypeProperty0);
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties0.getTarget();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      ArrayList<DatasourceTypeProperty> arrayList0 = new ArrayList<DatasourceTypeProperty>();
      DatasourceTypeProperties datasourceTypeProperties1 = datasourceTypeProperties0.target(arrayList0);
      datasourceTypeProperties1.addTargetItem(datasourceTypeProperty0);
      assertTrue(arrayList0.contains(datasourceTypeProperty0));
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperties0.addSourceItem(datasourceTypeProperty0);
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties0.getSource();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      ArrayList<DatasourceTypeProperty> arrayList0 = new ArrayList<DatasourceTypeProperty>();
      datasourceTypeProperties0.setSource(arrayList0);
      DatasourceTypeProperties datasourceTypeProperties1 = datasourceTypeProperties0.addSourceItem(datasourceTypeProperty0);
      assertSame(datasourceTypeProperties1, datasourceTypeProperties0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperties0.addConnectionItem(datasourceTypeProperty0);
      DatasourceTypeProperties datasourceTypeProperties1 = new DatasourceTypeProperties();
      boolean boolean0 = datasourceTypeProperties0.equals(datasourceTypeProperties1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      Vector<DatasourceTypeProperty> vector0 = new Vector<DatasourceTypeProperty>();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      datasourceTypeProperties0.setConnection(vector0);
      DatasourceTypeProperties datasourceTypeProperties1 = datasourceTypeProperties0.addConnectionItem(datasourceTypeProperty0);
      assertSame(datasourceTypeProperties0, datasourceTypeProperties1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      Vector<DatasourceTypeProperty> vector0 = new Vector<DatasourceTypeProperty>();
      DatasourceTypeProperties datasourceTypeProperties1 = datasourceTypeProperties0.target(vector0);
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties1.getTarget();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties0.getFilter();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      String string0 = datasourceTypeProperties0.toString();
      assertEquals("class DatasourceTypeProperties {\n    connection: null\n    source: null\n    target: null\n    filter: null\n    conditions: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypeProperties datasourceTypeProperties1 = datasourceTypeProperties0.conditions((DatasourceTypePropertyConditions) null);
      assertSame(datasourceTypeProperties0, datasourceTypeProperties1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      Vector<DatasourceTypeProperty> vector0 = new Vector<DatasourceTypeProperty>();
      datasourceTypeProperties0.setTarget(vector0);
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypePropertyConditions datasourceTypePropertyConditions0 = new DatasourceTypePropertyConditions();
      datasourceTypeProperties0.setConditions(datasourceTypePropertyConditions0);
      DatasourceTypePropertyConditions datasourceTypePropertyConditions1 = datasourceTypeProperties0.getConditions();
      assertSame(datasourceTypePropertyConditions1, datasourceTypePropertyConditions0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      datasourceTypeProperties0.setFilter((List<DatasourceTypeProperty>) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties0.getConnection();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties0.getTarget();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      Stack<DatasourceTypeProperty> stack0 = new Stack<DatasourceTypeProperty>();
      datasourceTypeProperties0.connection(stack0);
      String string0 = datasourceTypeProperties0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      datasourceTypeProperties0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      DatasourceTypePropertyConditions datasourceTypePropertyConditions0 = datasourceTypeProperties0.getConditions();
      assertNull(datasourceTypePropertyConditions0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      List<DatasourceTypeProperty> list0 = datasourceTypeProperties0.getSource();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DatasourceTypeProperties datasourceTypeProperties0 = new DatasourceTypeProperties();
      ArrayList<DatasourceTypeProperty> arrayList0 = new ArrayList<DatasourceTypeProperty>();
      datasourceTypeProperties0.setSource(arrayList0);
      DatasourceTypeProperties datasourceTypeProperties1 = new DatasourceTypeProperties();
      boolean boolean0 = datasourceTypeProperties0.equals(datasourceTypeProperties1);
      assertFalse(boolean0);
  }
}
