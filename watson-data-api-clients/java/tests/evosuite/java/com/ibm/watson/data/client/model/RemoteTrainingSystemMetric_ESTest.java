/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:28:29 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.RemoteTrainingSystemMetric;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemoteTrainingSystemMetric_ESTest extends RemoteTrainingSystemMetric_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      remoteTrainingSystemMetric0.local(bigDecimal0);
      BigDecimal bigDecimal1 = remoteTrainingSystemMetric0.getLocal();
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      BigDecimal bigDecimal0 = new BigDecimal(587L);
      RemoteTrainingSystemMetric remoteTrainingSystemMetric1 = remoteTrainingSystemMetric0.local(bigDecimal0);
      BigDecimal bigDecimal1 = remoteTrainingSystemMetric1.getLocal();
      assertEquals((short)587, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-1L), 0);
      remoteTrainingSystemMetric0.setLocal(bigDecimal0);
      BigDecimal bigDecimal1 = remoteTrainingSystemMetric0.getLocal();
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      remoteTrainingSystemMetric0.setId("H=fPIK.C");
      String string0 = remoteTrainingSystemMetric0.getId();
      assertEquals("H=fPIK.C", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      remoteTrainingSystemMetric0.id("");
      String string0 = remoteTrainingSystemMetric0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      remoteTrainingSystemMetric0.setFused(bigDecimal0);
      BigDecimal bigDecimal1 = remoteTrainingSystemMetric0.getFused();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      BigDecimal bigDecimal0 = new BigDecimal(3);
      RemoteTrainingSystemMetric remoteTrainingSystemMetric1 = remoteTrainingSystemMetric0.fused(bigDecimal0);
      BigDecimal bigDecimal1 = remoteTrainingSystemMetric1.getFused();
      assertEquals((byte)3, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-1L), 0);
      remoteTrainingSystemMetric0.fused(bigDecimal0);
      BigDecimal bigDecimal1 = remoteTrainingSystemMetric0.getFused();
      assertEquals((short) (-1), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      remoteTrainingSystemMetric0.id("null");
      RemoteTrainingSystemMetric remoteTrainingSystemMetric1 = new RemoteTrainingSystemMetric();
      boolean boolean0 = remoteTrainingSystemMetric0.equals(remoteTrainingSystemMetric1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      RemoteTrainingSystemMetric remoteTrainingSystemMetric1 = new RemoteTrainingSystemMetric();
      boolean boolean0 = remoteTrainingSystemMetric0.equals(remoteTrainingSystemMetric1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      boolean boolean0 = remoteTrainingSystemMetric0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      boolean boolean0 = remoteTrainingSystemMetric0.equals(remoteTrainingSystemMetric0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean0 = remoteTrainingSystemMetric0.equals(bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      remoteTrainingSystemMetric0.setId("H=fPIK.C");
      String string0 = remoteTrainingSystemMetric0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      BigDecimal bigDecimal0 = remoteTrainingSystemMetric0.getLocal();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      BigDecimal bigDecimal0 = remoteTrainingSystemMetric0.getFused();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      String string0 = remoteTrainingSystemMetric0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      remoteTrainingSystemMetric0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      RemoteTrainingSystemMetric remoteTrainingSystemMetric1 = remoteTrainingSystemMetric0.fused(bigDecimal0);
      RemoteTrainingSystemMetric remoteTrainingSystemMetric2 = new RemoteTrainingSystemMetric();
      boolean boolean0 = remoteTrainingSystemMetric1.equals(remoteTrainingSystemMetric2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      RemoteTrainingSystemMetric remoteTrainingSystemMetric1 = remoteTrainingSystemMetric0.local(bigDecimal0);
      RemoteTrainingSystemMetric remoteTrainingSystemMetric2 = new RemoteTrainingSystemMetric();
      boolean boolean0 = remoteTrainingSystemMetric2.equals(remoteTrainingSystemMetric1);
      assertFalse(boolean0);
  }
}
