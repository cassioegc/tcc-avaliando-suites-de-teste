/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 15:17:06 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.DeploymentEntityRequest;
import com.ibm.watson.data.client.model.DeploymentEntityRequestPhysical;
import com.ibm.watson.data.client.model.DeploymentEntityRequestVirtual;
import com.ibm.watson.data.client.model.HardwareSpecRel;
import com.ibm.watson.data.client.model.Rel;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlDefine;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeploymentEntityRequest_ESTest extends DeploymentEntityRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      StringBuilder stringBuilder0 = new StringBuilder();
      deploymentEntityRequest0.toString(stringBuilder0);
      assertEquals("    tags: null\n    spaceId: null\n    name: null\n    description: null\n    custom: null\n    asset: null\n    hardwareSpec: null\n    hybridPipelineHardwareSpecs: null\n    online: null\n    batch: null\n    virtual: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      String string0 = deploymentEntityRequest0.toIndentedString(deploymentEntityRequest0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getIncludedGroups();
      deploymentEntityRequest0.tags(list0);
      List<String> list1 = deploymentEntityRequest0.getTags();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequest deploymentEntityRequest1 = deploymentEntityRequest0.addTagsItem("k:w2@$i;UX;Q|[ft1");
      List<String> list0 = deploymentEntityRequest1.getTags();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequest deploymentEntityRequest1 = deploymentEntityRequest0.spaceId("0?");
      String string0 = deploymentEntityRequest1.getSpaceId();
      assertEquals("0?", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      deploymentEntityRequest0.spaceId("");
      String string0 = deploymentEntityRequest0.getSpaceId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestPhysical deploymentEntityRequestPhysical0 = new DeploymentEntityRequestPhysical();
      DeploymentEntityRequest deploymentEntityRequest1 = deploymentEntityRequest0.online(deploymentEntityRequestPhysical0);
      DeploymentEntityRequestPhysical deploymentEntityRequestPhysical1 = deploymentEntityRequest1.getOnline();
      assertSame(deploymentEntityRequestPhysical1, deploymentEntityRequestPhysical0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      deploymentEntityRequest0.setName("q'Z+u");
      String string0 = deploymentEntityRequest0.getName();
      assertEquals("q'Z+u", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      deploymentEntityRequest0.name("");
      String string0 = deploymentEntityRequest0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      Stack<Object> stack0 = new Stack<Object>();
      deploymentEntityRequest0.setHybridPipelineHardwareSpecs(stack0);
      List<Object> list0 = deploymentEntityRequest0.getHybridPipelineHardwareSpecs();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) deploymentEntityRequest0);
      deploymentEntityRequest0.hybridPipelineHardwareSpecs(stack0);
      List<Object> list0 = deploymentEntityRequest0.getHybridPipelineHardwareSpecs();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequest deploymentEntityRequest1 = deploymentEntityRequest0.description("pk");
      String string0 = deploymentEntityRequest1.getDescription();
      assertEquals("pk", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      deploymentEntityRequest0.description("");
      String string0 = deploymentEntityRequest0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      deploymentEntityRequest0.custom(hashMap0);
      Map<String, Object> map0 = deploymentEntityRequest0.getCustom();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      deploymentEntityRequest0.custom(hashMap0);
      hashMap0.put("", "");
      Map<String, Object> map0 = deploymentEntityRequest0.getCustom();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      HardwareSpecRel hardwareSpecRel0 = new HardwareSpecRel();
      DeploymentEntityRequest deploymentEntityRequest1 = deploymentEntityRequest0.asset(hardwareSpecRel0);
      HardwareSpecRel hardwareSpecRel1 = (HardwareSpecRel)deploymentEntityRequest1.getAsset();
      assertNull(hardwareSpecRel1.getNumNodes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getIncludedGroups();
      deploymentEntityRequest0.tags(list0);
      // Undeclared exception!
      try { 
        deploymentEntityRequest0.addTagsItem("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      Stack<Object> stack0 = new Stack<Object>();
      DeploymentEntityRequest deploymentEntityRequest1 = deploymentEntityRequest0.hybridPipelineHardwareSpecs(stack0);
      String string0 = deploymentEntityRequest1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      DeploymentEntityRequest deploymentEntityRequest1 = new DeploymentEntityRequest();
      assertTrue(deploymentEntityRequest1.equals((Object)deploymentEntityRequest0));
      
      deploymentEntityRequest1.setVirtual(deploymentEntityRequestVirtual0);
      boolean boolean0 = deploymentEntityRequest1.equals(deploymentEntityRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      DeploymentEntityRequest deploymentEntityRequest1 = new DeploymentEntityRequest();
      assertTrue(deploymentEntityRequest1.equals((Object)deploymentEntityRequest0));
      
      deploymentEntityRequest0.setBatch(deploymentEntityRequestVirtual0);
      boolean boolean0 = deploymentEntityRequest1.equals(deploymentEntityRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequest deploymentEntityRequest1 = new DeploymentEntityRequest();
      assertTrue(deploymentEntityRequest1.equals((Object)deploymentEntityRequest0));
      
      HardwareSpecRel hardwareSpecRel0 = new HardwareSpecRel();
      deploymentEntityRequest1.hardwareSpec(hardwareSpecRel0);
      boolean boolean0 = deploymentEntityRequest1.equals(deploymentEntityRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequest deploymentEntityRequest1 = new DeploymentEntityRequest();
      assertTrue(deploymentEntityRequest1.equals((Object)deploymentEntityRequest0));
      
      HardwareSpecRel hardwareSpecRel0 = new HardwareSpecRel();
      deploymentEntityRequest1.asset(hardwareSpecRel0);
      boolean boolean0 = deploymentEntityRequest1.equals(deploymentEntityRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequest deploymentEntityRequest1 = new DeploymentEntityRequest();
      assertTrue(deploymentEntityRequest1.equals((Object)deploymentEntityRequest0));
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(1);
      deploymentEntityRequest0.setCustom(hashMap0);
      boolean boolean0 = deploymentEntityRequest1.equals(deploymentEntityRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequest deploymentEntityRequest1 = new DeploymentEntityRequest();
      assertTrue(deploymentEntityRequest1.equals((Object)deploymentEntityRequest0));
      
      deploymentEntityRequest1.setDescription("");
      boolean boolean0 = deploymentEntityRequest1.equals(deploymentEntityRequest0);
      assertFalse(deploymentEntityRequest1.equals((Object)deploymentEntityRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequest deploymentEntityRequest1 = new DeploymentEntityRequest();
      assertTrue(deploymentEntityRequest1.equals((Object)deploymentEntityRequest0));
      
      deploymentEntityRequest0.setName("");
      boolean boolean0 = deploymentEntityRequest1.equals(deploymentEntityRequest0);
      assertFalse(deploymentEntityRequest1.equals((Object)deploymentEntityRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      XmlDefine xmlDefine0 = new XmlDefine();
      List<String> list0 = xmlDefine0.getIncludes();
      DeploymentEntityRequest deploymentEntityRequest1 = deploymentEntityRequest0.tags(list0);
      DeploymentEntityRequest deploymentEntityRequest2 = new DeploymentEntityRequest();
      DeploymentEntityRequest deploymentEntityRequest3 = deploymentEntityRequest2.tags(list0);
      deploymentEntityRequest3.spaceId("]!*@,WK1uAu,9^0");
      boolean boolean0 = deploymentEntityRequest2.equals(deploymentEntityRequest0);
      assertFalse(deploymentEntityRequest2.equals((Object)deploymentEntityRequest1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequest deploymentEntityRequest1 = new DeploymentEntityRequest();
      deploymentEntityRequest1.addTagsItem("c|");
      boolean boolean0 = deploymentEntityRequest1.equals(deploymentEntityRequest0);
      assertFalse(deploymentEntityRequest1.equals((Object)deploymentEntityRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequest deploymentEntityRequest1 = new DeploymentEntityRequest();
      boolean boolean0 = deploymentEntityRequest1.equals(deploymentEntityRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      boolean boolean0 = deploymentEntityRequest0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      boolean boolean0 = deploymentEntityRequest0.equals(deploymentEntityRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      boolean boolean0 = deploymentEntityRequest0.equals(deploymentEntityRequestVirtual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      Object object0 = new Object();
      deploymentEntityRequest0.addHybridPipelineHardwareSpecsItem(object0);
      DeploymentEntityRequest deploymentEntityRequest1 = new DeploymentEntityRequest();
      boolean boolean0 = deploymentEntityRequest1.equals(deploymentEntityRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      Stack<Object> stack0 = new Stack<Object>();
      deploymentEntityRequest0.hybridPipelineHardwareSpecs(stack0);
      DeploymentEntityRequest deploymentEntityRequest1 = deploymentEntityRequest0.addHybridPipelineHardwareSpecsItem(deploymentEntityRequest0);
      assertNull(deploymentEntityRequest1.getSpaceId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      List<Object> list0 = deploymentEntityRequest0.getHybridPipelineHardwareSpecs();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      HardwareSpecRel hardwareSpecRel0 = new HardwareSpecRel();
      deploymentEntityRequest0.setAsset(hardwareSpecRel0);
      assertNull(hardwareSpecRel0.getId());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      DeploymentEntityRequest deploymentEntityRequest1 = deploymentEntityRequest0.batch(deploymentEntityRequestVirtual0);
      assertNull(deploymentEntityRequest1.getDescription());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      List<String> list0 = deploymentEntityRequest0.getTags();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      deploymentEntityRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      HardwareSpecRel hardwareSpecRel0 = deploymentEntityRequest0.getHardwareSpec();
      assertNull(hardwareSpecRel0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      String string0 = deploymentEntityRequest0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      String string0 = deploymentEntityRequest0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      String string0 = deploymentEntityRequest0.getSpaceId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      deploymentEntityRequest0.setSpaceId((String) null);
      assertNull(deploymentEntityRequest0.getSpaceId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      DeploymentEntityRequest deploymentEntityRequest1 = deploymentEntityRequest0.virtual(deploymentEntityRequestVirtual0);
      assertNull(deploymentEntityRequest1.getDescription());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestPhysical deploymentEntityRequestPhysical0 = deploymentEntityRequest0.getOnline();
      assertNull(deploymentEntityRequestPhysical0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      Map<String, Object> map0 = deploymentEntityRequest0.getCustom();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      deploymentEntityRequest0.setOnline(deploymentEntityRequestVirtual0);
      assertNull(deploymentEntityRequest0.getName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      deploymentEntityRequest0.setTags((List<String>) null);
      assertNull(deploymentEntityRequest0.getSpaceId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      // Undeclared exception!
      try { 
        deploymentEntityRequest0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.DeploymentEntityRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      deploymentEntityRequest0.setVirtual(deploymentEntityRequestVirtual0);
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual1 = deploymentEntityRequest0.getVirtual();
      assertSame(deploymentEntityRequestVirtual1, deploymentEntityRequestVirtual0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = deploymentEntityRequest0.getVirtual();
      assertNull(deploymentEntityRequestVirtual0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      HardwareSpecRel hardwareSpecRel0 = new HardwareSpecRel();
      DeploymentEntityRequest deploymentEntityRequest1 = deploymentEntityRequest0.hardwareSpec(hardwareSpecRel0);
      HardwareSpecRel hardwareSpecRel1 = deploymentEntityRequest1.getHardwareSpec();
      assertNull(hardwareSpecRel1.getRev());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestPhysical deploymentEntityRequestPhysical0 = deploymentEntityRequest0.getBatch();
      assertNull(deploymentEntityRequestPhysical0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      deploymentEntityRequest0.setBatch(deploymentEntityRequestVirtual0);
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual1 = (DeploymentEntityRequestVirtual)deploymentEntityRequest0.getBatch();
      assertNull(deploymentEntityRequestVirtual1.getExportFormat());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      HardwareSpecRel hardwareSpecRel0 = new HardwareSpecRel();
      deploymentEntityRequest0.setHardwareSpec(hardwareSpecRel0);
      assertNull(deploymentEntityRequest0.getDescription());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DeploymentEntityRequest deploymentEntityRequest0 = new DeploymentEntityRequest();
      Rel rel0 = deploymentEntityRequest0.getAsset();
      assertNull(rel0);
  }
}
