/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 00:35:16 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.CodeValue;
import com.ibm.watson.data.client.model.DiscoveredClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiscoveredClass_ESTest extends DiscoveredClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      Integer integer0 = new Integer(0);
      discoveredClass0.setPriority(integer0);
      Integer integer1 = discoveredClass0.getPriority();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      Integer integer0 = new Integer(1);
      discoveredClass0.setPriority(integer0);
      Integer integer1 = discoveredClass0.getPriority();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      Integer integer0 = new Integer((-1));
      discoveredClass0.setPriority(integer0);
      Integer integer1 = discoveredClass0.getPriority();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      DiscoveredClass discoveredClass1 = new DiscoveredClass();
      assertTrue(discoveredClass1.equals((Object)discoveredClass0));
      
      Integer integer0 = new Integer((-1));
      discoveredClass1.setPriority(integer0);
      boolean boolean0 = discoveredClass1.equals(discoveredClass0);
      assertFalse(discoveredClass1.equals((Object)discoveredClass0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      DiscoveredClass discoveredClass1 = new DiscoveredClass();
      CodeValue codeValue0 = new CodeValue();
      discoveredClass1.setDataClass(codeValue0);
      boolean boolean0 = discoveredClass0.equals(discoveredClass1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      boolean boolean0 = discoveredClass0.equals("class DiscoveredClass {\n    class: null\n    priority: null\n}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      DiscoveredClass discoveredClass1 = new DiscoveredClass();
      boolean boolean0 = discoveredClass0.equals(discoveredClass1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      boolean boolean0 = discoveredClass0.equals(discoveredClass0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      boolean boolean0 = discoveredClass0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      CodeValue codeValue0 = new CodeValue();
      discoveredClass0.setDataClass(codeValue0);
      CodeValue codeValue1 = discoveredClass0.getDataClass();
      assertSame(codeValue1, codeValue0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      String string0 = discoveredClass0.toString();
      assertEquals("class DiscoveredClass {\n    class: null\n    priority: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      discoveredClass0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      CodeValue codeValue0 = discoveredClass0.getDataClass();
      assertNull(codeValue0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      Integer integer0 = new Integer((-1));
      discoveredClass0.setPriority(integer0);
      String string0 = discoveredClass0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DiscoveredClass discoveredClass0 = new DiscoveredClass();
      Integer integer0 = discoveredClass0.getPriority();
      assertNull(integer0);
  }
}
