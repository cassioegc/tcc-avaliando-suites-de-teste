/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:59:12 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.PaginatedDataClassRelationships;
import com.ibm.watson.data.client.model.PaginatedParentRelationshipsList;
import com.ibm.watson.data.client.model.PaginatedRelationshipsList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaginatedDataClassRelationships_ESTest extends PaginatedDataClassRelationships_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      paginatedDataClassRelationships0.parentCategory(paginatedParentRelationshipsList0);
      PaginatedParentRelationshipsList paginatedParentRelationshipsList1 = paginatedDataClassRelationships0.getParentCategory();
      assertSame(paginatedParentRelationshipsList1, paginatedParentRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      PaginatedDataClassRelationships paginatedDataClassRelationships1 = paginatedDataClassRelationships0.classifications(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = paginatedDataClassRelationships1.getClassifications();
      assertNull(paginatedRelationshipsList1.getOffset());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      PaginatedDataClassRelationships paginatedDataClassRelationships1 = paginatedDataClassRelationships0.categories(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = paginatedDataClassRelationships1.getCategories();
      assertSame(paginatedRelationshipsList0, paginatedRelationshipsList1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      PaginatedDataClassRelationships paginatedDataClassRelationships1 = paginatedDataClassRelationships0.classifications(paginatedRelationshipsList0);
      String string0 = paginatedDataClassRelationships1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      PaginatedDataClassRelationships paginatedDataClassRelationships1 = new PaginatedDataClassRelationships();
      paginatedDataClassRelationships1.setTerms(paginatedRelationshipsList0);
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      paginatedDataClassRelationships0.setTerms(paginatedRelationshipsList0);
      paginatedDataClassRelationships0.setParentCategory(paginatedParentRelationshipsList0);
      PaginatedDataClassRelationships paginatedDataClassRelationships2 = paginatedDataClassRelationships1.parentCategory(paginatedParentRelationshipsList0);
      assertTrue(paginatedDataClassRelationships1.equals((Object)paginatedDataClassRelationships0));
      
      paginatedDataClassRelationships2.classifications(paginatedRelationshipsList0);
      boolean boolean0 = paginatedDataClassRelationships0.equals(paginatedDataClassRelationships1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      PaginatedDataClassRelationships paginatedDataClassRelationships1 = paginatedDataClassRelationships0.categories(paginatedRelationshipsList0);
      PaginatedDataClassRelationships paginatedDataClassRelationships2 = new PaginatedDataClassRelationships();
      boolean boolean0 = paginatedDataClassRelationships1.equals(paginatedDataClassRelationships2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedDataClassRelationships paginatedDataClassRelationships1 = new PaginatedDataClassRelationships();
      assertTrue(paginatedDataClassRelationships1.equals((Object)paginatedDataClassRelationships0));
      
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      paginatedDataClassRelationships0.setHasTypesDataClasses(paginatedRelationshipsList0);
      boolean boolean0 = paginatedDataClassRelationships1.equals(paginatedDataClassRelationships0);
      assertFalse(paginatedDataClassRelationships1.equals((Object)paginatedDataClassRelationships0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      boolean boolean0 = paginatedDataClassRelationships0.equals(paginatedRelationshipsList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedDataClassRelationships paginatedDataClassRelationships1 = new PaginatedDataClassRelationships();
      boolean boolean0 = paginatedDataClassRelationships0.equals(paginatedDataClassRelationships1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      boolean boolean0 = paginatedDataClassRelationships0.equals(paginatedDataClassRelationships0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      boolean boolean0 = paginatedDataClassRelationships0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = paginatedDataClassRelationships0.getTerms();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = paginatedDataClassRelationships0.getClassifications();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      paginatedDataClassRelationships0.parentCategory(paginatedParentRelationshipsList0);
      PaginatedDataClassRelationships paginatedDataClassRelationships1 = new PaginatedDataClassRelationships();
      boolean boolean0 = paginatedDataClassRelationships0.equals(paginatedDataClassRelationships1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = paginatedDataClassRelationships0.getIsATypeOfDataClass();
      assertNull(paginatedParentRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      paginatedDataClassRelationships0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      paginatedDataClassRelationships0.setHasTypesDataClasses(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = paginatedDataClassRelationships0.getHasTypesDataClasses();
      assertSame(paginatedRelationshipsList1, paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      paginatedDataClassRelationships0.isATypeOfDataClass(paginatedParentRelationshipsList0);
      PaginatedDataClassRelationships paginatedDataClassRelationships1 = new PaginatedDataClassRelationships();
      boolean boolean0 = paginatedDataClassRelationships0.equals(paginatedDataClassRelationships1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      paginatedDataClassRelationships0.setIsATypeOfDataClass(paginatedParentRelationshipsList0);
      PaginatedParentRelationshipsList paginatedParentRelationshipsList1 = paginatedDataClassRelationships0.getIsATypeOfDataClass();
      assertNull(paginatedParentRelationshipsList1.getLimit());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      paginatedDataClassRelationships0.setClassifications(paginatedRelationshipsList0);
      assertNull(paginatedRelationshipsList0.getLimit());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      paginatedDataClassRelationships0.terms(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = paginatedDataClassRelationships0.getTerms();
      assertNull(paginatedRelationshipsList1.getOffset());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      paginatedDataClassRelationships0.setCategories(paginatedRelationshipsList0);
      assertNull(paginatedRelationshipsList0.getCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = paginatedDataClassRelationships0.getHasTypesDataClasses();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = paginatedDataClassRelationships0.getParentCategory();
      assertNull(paginatedParentRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedDataClassRelationships paginatedDataClassRelationships1 = paginatedDataClassRelationships0.hasTypesDataClasses((PaginatedRelationshipsList) null);
      assertSame(paginatedDataClassRelationships1, paginatedDataClassRelationships0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      paginatedDataClassRelationships0.setTerms(paginatedRelationshipsList0);
      PaginatedDataClassRelationships paginatedDataClassRelationships1 = new PaginatedDataClassRelationships();
      boolean boolean0 = paginatedDataClassRelationships0.equals(paginatedDataClassRelationships1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PaginatedDataClassRelationships paginatedDataClassRelationships0 = new PaginatedDataClassRelationships();
      PaginatedRelationshipsList paginatedRelationshipsList0 = paginatedDataClassRelationships0.getCategories();
      assertNull(paginatedRelationshipsList0);
  }
}
