/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 20:41:32 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.GetPermissionsResponse;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GetPermissionsResponse_ESTest extends GetPermissionsResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      Stack<String> stack0 = new Stack<String>();
      getPermissionsResponse0.setPermissions(stack0);
      List<String> list0 = getPermissionsResponse0.getPermissions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      getPermissionsResponse0.addPermissionsItem("");
      List<String> list0 = getPermissionsResponse0.getPermissions();
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      getPermissionsResponse0.setMessageCode(";qs^tRL[(y(U}W9h");
      String string0 = getPermissionsResponse0.getMessageCode();
      assertEquals(";qs^tRL[(y(U}W9h", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      GetPermissionsResponse getPermissionsResponse1 = getPermissionsResponse0.message("msg");
      String string0 = getPermissionsResponse1.getMessage();
      assertEquals("msg", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      GetPermissionsResponse getPermissionsResponse1 = getPermissionsResponse0.message("");
      String string0 = getPermissionsResponse1.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      List<String> list0 = xmlTest0.getIncludedGroups();
      getPermissionsResponse0.setPermissions(list0);
      // Undeclared exception!
      try { 
        getPermissionsResponse0.addPermissionsItem("}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      GetPermissionsResponse getPermissionsResponse1 = new GetPermissionsResponse();
      assertTrue(getPermissionsResponse1.equals((Object)getPermissionsResponse0));
      
      getPermissionsResponse1.addPermissionsItem("");
      boolean boolean0 = getPermissionsResponse1.equals(getPermissionsResponse0);
      assertFalse(getPermissionsResponse1.equals((Object)getPermissionsResponse0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      GetPermissionsResponse getPermissionsResponse1 = new GetPermissionsResponse();
      boolean boolean0 = getPermissionsResponse0.equals(getPermissionsResponse1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      GetPermissionsResponse getPermissionsResponse1 = new GetPermissionsResponse();
      getPermissionsResponse1.messageCode("");
      boolean boolean0 = getPermissionsResponse0.equals(getPermissionsResponse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      boolean boolean0 = getPermissionsResponse0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      boolean boolean0 = getPermissionsResponse0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      boolean boolean0 = getPermissionsResponse0.equals(getPermissionsResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      GetPermissionsResponse getPermissionsResponse1 = new GetPermissionsResponse();
      assertTrue(getPermissionsResponse1.equals((Object)getPermissionsResponse0));
      
      getPermissionsResponse1.message("");
      boolean boolean0 = getPermissionsResponse0.equals(getPermissionsResponse1);
      assertFalse(getPermissionsResponse1.equals((Object)getPermissionsResponse0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      String string0 = getPermissionsResponse0.toString();
      assertEquals("class GetPermissionsResponse {\n    messageCode: null\n    message: null\n    permissions: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      GetPermissionsResponse getPermissionsResponse1 = getPermissionsResponse0.messageCode("");
      String string0 = getPermissionsResponse1.getMessageCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      getPermissionsResponse0.setMessage((String) null);
      assertNull(getPermissionsResponse0.getMessageCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      String string0 = getPermissionsResponse0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      List<String> list0 = getPermissionsResponse0.getPermissions();
      GetPermissionsResponse getPermissionsResponse1 = getPermissionsResponse0.permissions(list0);
      assertNull(getPermissionsResponse1.getMessageCode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      getPermissionsResponse0.message("");
      String string0 = getPermissionsResponse0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      String string0 = getPermissionsResponse0.getMessageCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GetPermissionsResponse getPermissionsResponse0 = new GetPermissionsResponse();
      getPermissionsResponse0.hashCode();
  }
}
