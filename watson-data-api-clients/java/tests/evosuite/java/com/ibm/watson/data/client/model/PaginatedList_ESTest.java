/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:44:58 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.HrefModel;
import com.ibm.watson.data.client.model.PaginatedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaginatedList_ESTest extends PaginatedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      String string0 = paginatedList0.toIndentedString(paginatedList0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Integer integer0 = new Integer((-1573));
      paginatedList0.offset(integer0);
      Integer integer1 = paginatedList0.getOffset();
      assertEquals((-1573), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Integer integer0 = new Integer(0);
      paginatedList0.offset(integer0);
      Integer integer1 = paginatedList0.getOffset();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Integer integer0 = new Integer(1743);
      paginatedList0.setOffset(integer0);
      Integer integer1 = paginatedList0.getOffset();
      assertEquals(1743, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = new HrefModel();
      PaginatedList paginatedList1 = paginatedList0.next(hrefModel0);
      HrefModel hrefModel1 = paginatedList1.getNext();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Integer integer0 = new Integer(6374);
      PaginatedList paginatedList1 = paginatedList0.limit(integer0);
      Integer integer1 = paginatedList1.getLimit();
      assertEquals(6374, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Integer integer0 = new Integer(0);
      paginatedList0.limit(integer0);
      Integer integer1 = paginatedList0.getLimit();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Integer integer0 = new Integer((-135));
      paginatedList0.setLimit(integer0);
      Integer integer1 = paginatedList0.getLimit();
      assertEquals((-135), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Long long0 = new Long(0L);
      PaginatedList paginatedList1 = paginatedList0.count(long0);
      Long long1 = paginatedList1.getCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Long long0 = new Long((-498L));
      PaginatedList paginatedList1 = paginatedList0.count(long0);
      Long long1 = paginatedList1.getCount();
      assertEquals((-498L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Long long0 = new Long(694L);
      paginatedList0.count(long0);
      Long long1 = paginatedList0.getCount();
      assertEquals(694L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      // Undeclared exception!
      try { 
        paginatedList0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.PaginatedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      paginatedList0.toString(stringBuilder0);
      assertEquals("    limit: null\n    count: null\n    first: null\n    next: null\n    offset: null\n    last: null\n    prev: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = new HrefModel();
      PaginatedList paginatedList1 = new PaginatedList();
      assertTrue(paginatedList1.equals((Object)paginatedList0));
      
      paginatedList1.prev(hrefModel0);
      boolean boolean0 = paginatedList1.equals(paginatedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      PaginatedList paginatedList1 = new PaginatedList();
      assertTrue(paginatedList1.equals((Object)paginatedList0));
      
      Integer integer0 = new Integer(0);
      paginatedList0.offset(integer0);
      boolean boolean0 = paginatedList1.equals(paginatedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      PaginatedList paginatedList1 = new PaginatedList();
      assertTrue(paginatedList1.equals((Object)paginatedList0));
      
      HrefModel hrefModel0 = new HrefModel();
      paginatedList1.setFirst(hrefModel0);
      boolean boolean0 = paginatedList1.equals(paginatedList0);
      assertFalse(paginatedList1.equals((Object)paginatedList0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Long long0 = new Long(11L);
      PaginatedList paginatedList1 = paginatedList0.count(long0);
      PaginatedList paginatedList2 = new PaginatedList();
      boolean boolean0 = paginatedList1.equals(paginatedList2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Integer integer0 = new Integer((-1));
      paginatedList0.setLimit(integer0);
      PaginatedList paginatedList1 = new PaginatedList();
      boolean boolean0 = paginatedList0.equals(paginatedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      PaginatedList paginatedList1 = new PaginatedList();
      boolean boolean0 = paginatedList0.equals(paginatedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      boolean boolean0 = paginatedList0.equals("class PaginatedList {\n    limit: java.lang.Integer@0000000003\n    count: null\n    first: null\n    next: com.ibm.watson.data.client.model.HrefModel@0000000002\n    offset: null\n    last: com.ibm.watson.data.client.model.HrefModel@0000000002\n    prev: null\n}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      boolean boolean0 = paginatedList0.equals(paginatedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      boolean boolean0 = paginatedList0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = new HrefModel();
      paginatedList0.prev(hrefModel0);
      HrefModel hrefModel1 = paginatedList0.getPrev();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = paginatedList0.getLast();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = new HrefModel();
      paginatedList0.setNext(hrefModel0);
      String string0 = paginatedList0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = paginatedList0.getPrev();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = new HrefModel();
      paginatedList0.first(hrefModel0);
      HrefModel hrefModel1 = paginatedList0.getFirst();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = new HrefModel();
      paginatedList0.setPrev(hrefModel0);
      assertNull(paginatedList0.getOffset());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = paginatedList0.getNext();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Integer integer0 = paginatedList0.getLimit();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Integer integer0 = paginatedList0.getOffset();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Long long0 = paginatedList0.getCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = new HrefModel();
      paginatedList0.last(hrefModel0);
      PaginatedList paginatedList1 = new PaginatedList();
      boolean boolean0 = paginatedList0.equals(paginatedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = new HrefModel();
      paginatedList0.setLast(hrefModel0);
      HrefModel hrefModel1 = paginatedList0.getLast();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Integer integer0 = new Integer(6);
      paginatedList0.offset(integer0);
      Integer integer1 = paginatedList0.getOffset();
      assertEquals(6, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = paginatedList0.getFirst();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      paginatedList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      HrefModel hrefModel0 = new HrefModel();
      paginatedList0.next(hrefModel0);
      PaginatedList paginatedList1 = new PaginatedList();
      boolean boolean0 = paginatedList0.equals(paginatedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PaginatedList paginatedList0 = new PaginatedList();
      Long long0 = new Long((-1L));
      paginatedList0.setCount(long0);
      assertNull(paginatedList0.getOffset());
  }
}
