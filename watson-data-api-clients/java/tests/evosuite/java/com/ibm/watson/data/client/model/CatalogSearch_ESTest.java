/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:54:07 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.CatalogSearch;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlClass;
import org.testng.xml.XmlRun;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CatalogSearch_ESTest extends CatalogSearch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      CatalogSearch catalogSearch1 = catalogSearch0.sort("io.netty.util.concurrent.ScheduledFutureTask");
      String string0 = catalogSearch1.getSort();
      assertEquals("io.netty.util.concurrent.ScheduledFutureTask", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      catalogSearch0.sort("");
      String string0 = catalogSearch0.getSort();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      CatalogSearch catalogSearch1 = catalogSearch0.query("8y{d8JXk$;I");
      String string0 = catalogSearch1.getQuery();
      assertEquals("8y{d8JXk$;I", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      catalogSearch0.setQuery("");
      String string0 = catalogSearch0.getQuery();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      Integer integer0 = new Integer(0);
      CatalogSearch catalogSearch1 = catalogSearch0.limit(integer0);
      Integer integer1 = catalogSearch1.getLimit();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      Integer integer0 = new Integer((-3123));
      catalogSearch0.limit(integer0);
      Integer integer1 = catalogSearch0.getLimit();
      assertEquals((-3123), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      catalogSearch0.include("\n    ");
      String string0 = catalogSearch0.getInclude();
      assertEquals("\n    ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      CatalogSearch catalogSearch1 = catalogSearch0.include("");
      String string0 = catalogSearch1.getInclude();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      Vector<Map<String, List<String>>> vector0 = new Vector<Map<String, List<String>>>();
      CatalogSearch catalogSearch1 = catalogSearch0.drilldown(vector0);
      List<Map<String, List<String>>> list0 = catalogSearch1.getDrilldown();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      catalogSearch0.addDrilldownItem(hashMap0);
      List<Map<String, List<String>>> list0 = catalogSearch0.getDrilldown();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      Class<Object> class0 = Object.class;
      XmlClass xmlClass0 = new XmlClass(class0);
      List<String> list0 = xmlClass0.getExcludedMethods();
      catalogSearch0.counts(list0);
      List<String> list1 = catalogSearch0.getCounts();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      catalogSearch0.addCountsItem("");
      List<String> list0 = catalogSearch0.getCounts();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 8192);
      List<String> list0 = xmlTest0.getExcludedGroups();
      catalogSearch0.counts(list0);
      // Undeclared exception!
      try { 
        catalogSearch0.addCountsItem("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      catalogSearch0.setSort("n");
      String string0 = catalogSearch0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      catalogSearch0.setSort("n");
      CatalogSearch catalogSearch1 = new CatalogSearch();
      boolean boolean0 = catalogSearch1.equals(catalogSearch0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      Stack<Map<String, List<String>>> stack0 = new Stack<Map<String, List<String>>>();
      CatalogSearch catalogSearch1 = catalogSearch0.drilldown(stack0);
      CatalogSearch catalogSearch2 = new CatalogSearch();
      boolean boolean0 = catalogSearch2.equals(catalogSearch1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      CatalogSearch catalogSearch1 = new CatalogSearch();
      boolean boolean0 = catalogSearch1.equals(catalogSearch0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      CatalogSearch catalogSearch1 = new CatalogSearch();
      assertTrue(catalogSearch1.equals((Object)catalogSearch0));
      
      CatalogSearch catalogSearch2 = catalogSearch1.limit((Integer) Integer.MAX_VALUE);
      boolean boolean0 = catalogSearch0.equals(catalogSearch2);
      assertFalse(catalogSearch1.equals((Object)catalogSearch0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      CatalogSearch catalogSearch1 = new CatalogSearch();
      catalogSearch0.setQuery("E_O;Sq~-0a");
      boolean boolean0 = catalogSearch1.equals(catalogSearch0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      boolean boolean0 = catalogSearch0.equals(xmlTest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      boolean boolean0 = catalogSearch0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      boolean boolean0 = catalogSearch0.equals(catalogSearch0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getExcludes();
      CatalogSearch catalogSearch1 = catalogSearch0.counts(list0);
      CatalogSearch catalogSearch2 = new CatalogSearch();
      boolean boolean0 = catalogSearch2.equals(catalogSearch1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      Stack<Map<String, List<String>>> stack0 = new Stack<Map<String, List<String>>>();
      catalogSearch0.drilldown(stack0);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 1794);
      Map<String, List<String>> map0 = xmlTest0.getMetaGroups();
      CatalogSearch catalogSearch1 = catalogSearch0.addDrilldownItem(map0);
      assertNull(catalogSearch1.getLimit());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      Stack<Map<String, List<String>>> stack0 = new Stack<Map<String, List<String>>>();
      catalogSearch0.setDrilldown(stack0);
      assertNull(catalogSearch0.getInclude());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      catalogSearch0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      List<Map<String, List<String>>> list0 = catalogSearch0.getDrilldown();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      catalogSearch0.setLimit(integer0);
      Integer integer1 = catalogSearch0.getLimit();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getExcludedGroups();
      catalogSearch0.setCounts(list0);
      assertNull(catalogSearch0.getLimit());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      String string0 = catalogSearch0.getSort();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      String string0 = catalogSearch0.getQuery();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      catalogSearch0.setInclude("");
      assertNull(catalogSearch0.getSort());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      String string0 = catalogSearch0.getInclude();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      List<String> list0 = catalogSearch0.getCounts();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CatalogSearch catalogSearch0 = new CatalogSearch();
      Integer integer0 = catalogSearch0.getLimit();
      assertNull(integer0);
  }
}
