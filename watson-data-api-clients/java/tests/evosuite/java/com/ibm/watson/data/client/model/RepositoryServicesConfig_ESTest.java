/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:52:14 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.CohortConfig;
import com.ibm.watson.data.client.model.Connection;
import com.ibm.watson.data.client.model.EnterpriseAccessConfig;
import com.ibm.watson.data.client.model.LocalRepositoryConfig;
import com.ibm.watson.data.client.model.RepositoryServicesConfig;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.internal.DynamicGraph;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RepositoryServicesConfig_ESTest extends RepositoryServicesConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      ArrayList<Connection> arrayList0 = new ArrayList<Connection>();
      repositoryServicesConfig0.setOpenMetadataArchiveConnections(arrayList0);
      List<Connection> list0 = repositoryServicesConfig0.getOpenMetadataArchiveConnections();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      Connection connection0 = new Connection();
      repositoryServicesConfig0.addOpenMetadataArchiveConnectionsItem(connection0);
      List<Connection> list0 = repositoryServicesConfig0.getOpenMetadataArchiveConnections();
      assertTrue(list0.contains(connection0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      RepositoryServicesConfig repositoryServicesConfig1 = repositoryServicesConfig0.localRepositoryConfig(localRepositoryConfig0);
      LocalRepositoryConfig localRepositoryConfig1 = repositoryServicesConfig1.getLocalRepositoryConfig();
      assertNull(localRepositoryConfig1.getMetadataCollectionId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      CohortConfig cohortConfig0 = new CohortConfig();
      DynamicGraph<CohortConfig> dynamicGraph0 = new DynamicGraph<CohortConfig>();
      List<CohortConfig> list0 = dynamicGraph0.getDependenciesFor(cohortConfig0);
      repositoryServicesConfig0.cohortConfigList(list0);
      List<CohortConfig> list1 = repositoryServicesConfig0.getCohortConfigList();
      assertFalse(list1.contains(cohortConfig0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      CohortConfig cohortConfig0 = new CohortConfig();
      repositoryServicesConfig0.addCohortConfigListItem(cohortConfig0);
      List<CohortConfig> list0 = repositoryServicesConfig0.getCohortConfigList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      DynamicGraph<Connection> dynamicGraph0 = new DynamicGraph<Connection>();
      List<Connection> list0 = dynamicGraph0.getFreeNodes();
      repositoryServicesConfig0.auditLogConnections(list0);
      List<Connection> list1 = repositoryServicesConfig0.getAuditLogConnections();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      Connection connection0 = new Connection();
      RepositoryServicesConfig repositoryServicesConfig1 = repositoryServicesConfig0.addAuditLogConnectionsItem(connection0);
      List<Connection> list0 = repositoryServicesConfig1.getAuditLogConnections();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      Connection connection0 = new Connection();
      CohortConfig cohortConfig0 = new CohortConfig();
      CohortConfig cohortConfig1 = cohortConfig0.cohortOMRSTopicConnection(connection0);
      Connection connection1 = connection0.putSecuredPropertiesItem("", cohortConfig1);
      repositoryServicesConfig0.addOpenMetadataArchiveConnectionsItem(connection1);
      // Undeclared exception!
      try { 
        repositoryServicesConfig0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      CohortConfig cohortConfig0 = new CohortConfig();
      RepositoryServicesConfig repositoryServicesConfig1 = repositoryServicesConfig0.addCohortConfigListItem(cohortConfig0);
      RepositoryServicesConfig repositoryServicesConfig2 = new RepositoryServicesConfig();
      boolean boolean0 = repositoryServicesConfig2.equals(repositoryServicesConfig1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      EnterpriseAccessConfig enterpriseAccessConfig0 = new EnterpriseAccessConfig();
      RepositoryServicesConfig repositoryServicesConfig1 = new RepositoryServicesConfig();
      assertTrue(repositoryServicesConfig1.equals((Object)repositoryServicesConfig0));
      
      repositoryServicesConfig1.enterpriseAccessConfig(enterpriseAccessConfig0);
      boolean boolean0 = repositoryServicesConfig0.equals(repositoryServicesConfig1);
      assertFalse(repositoryServicesConfig1.equals((Object)repositoryServicesConfig0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      RepositoryServicesConfig repositoryServicesConfig1 = new RepositoryServicesConfig();
      assertTrue(repositoryServicesConfig1.equals((Object)repositoryServicesConfig0));
      
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      repositoryServicesConfig1.setLocalRepositoryConfig(localRepositoryConfig0);
      boolean boolean0 = repositoryServicesConfig0.equals(repositoryServicesConfig1);
      assertFalse(repositoryServicesConfig1.equals((Object)repositoryServicesConfig0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      LinkedList<Connection> linkedList0 = new LinkedList<Connection>();
      RepositoryServicesConfig repositoryServicesConfig1 = new RepositoryServicesConfig();
      assertTrue(repositoryServicesConfig1.equals((Object)repositoryServicesConfig0));
      
      repositoryServicesConfig0.openMetadataArchiveConnections(linkedList0);
      boolean boolean0 = repositoryServicesConfig1.equals(repositoryServicesConfig0);
      assertFalse(repositoryServicesConfig1.equals((Object)repositoryServicesConfig0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      RepositoryServicesConfig repositoryServicesConfig1 = new RepositoryServicesConfig();
      DynamicGraph<Connection> dynamicGraph0 = new DynamicGraph<Connection>();
      List<Connection> list0 = dynamicGraph0.getFreeNodes();
      repositoryServicesConfig0.setAuditLogConnections(list0);
      boolean boolean0 = repositoryServicesConfig0.equals(repositoryServicesConfig1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      RepositoryServicesConfig repositoryServicesConfig1 = new RepositoryServicesConfig();
      boolean boolean0 = repositoryServicesConfig1.equals(repositoryServicesConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      boolean boolean0 = repositoryServicesConfig0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      boolean boolean0 = repositoryServicesConfig0.equals(repositoryServicesConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      boolean boolean0 = repositoryServicesConfig0.equals("    openMetadataArchiveConnections: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      CohortConfig cohortConfig0 = new CohortConfig();
      RepositoryServicesConfig repositoryServicesConfig1 = repositoryServicesConfig0.addCohortConfigListItem(cohortConfig0);
      RepositoryServicesConfig repositoryServicesConfig2 = repositoryServicesConfig1.addCohortConfigListItem(cohortConfig0);
      assertSame(repositoryServicesConfig2, repositoryServicesConfig0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      Connection connection0 = new Connection();
      RepositoryServicesConfig repositoryServicesConfig1 = repositoryServicesConfig0.addOpenMetadataArchiveConnectionsItem(connection0);
      RepositoryServicesConfig repositoryServicesConfig2 = repositoryServicesConfig1.addOpenMetadataArchiveConnectionsItem(connection0);
      assertSame(repositoryServicesConfig2, repositoryServicesConfig0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      Connection connection0 = new Connection();
      repositoryServicesConfig0.addAuditLogConnectionsItem(connection0);
      String string0 = repositoryServicesConfig0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      Connection connection0 = new Connection();
      Stack<Connection> stack0 = new Stack<Connection>();
      RepositoryServicesConfig repositoryServicesConfig1 = repositoryServicesConfig0.auditLogConnections(stack0);
      repositoryServicesConfig1.addAuditLogConnectionsItem(connection0);
      assertTrue(stack0.contains(connection0));
      assertEquals(1, stack0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      List<Connection> list0 = repositoryServicesConfig0.getOpenMetadataArchiveConnections();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      EnterpriseAccessConfig enterpriseAccessConfig0 = repositoryServicesConfig0.getEnterpriseAccessConfig();
      assertNull(enterpriseAccessConfig0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      List<Connection> list0 = repositoryServicesConfig0.getAuditLogConnections();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      EnterpriseAccessConfig enterpriseAccessConfig0 = new EnterpriseAccessConfig();
      repositoryServicesConfig0.enterpriseAccessConfig(enterpriseAccessConfig0);
      EnterpriseAccessConfig enterpriseAccessConfig1 = repositoryServicesConfig0.getEnterpriseAccessConfig();
      assertNull(enterpriseAccessConfig1.getEnterpriseMetadataCollectionName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      List<CohortConfig> list0 = repositoryServicesConfig0.getCohortConfigList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      repositoryServicesConfig0.setEnterpriseAccessConfig((EnterpriseAccessConfig) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      LocalRepositoryConfig localRepositoryConfig0 = repositoryServicesConfig0.getLocalRepositoryConfig();
      assertNull(localRepositoryConfig0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      repositoryServicesConfig0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RepositoryServicesConfig repositoryServicesConfig0 = new RepositoryServicesConfig();
      Stack<CohortConfig> stack0 = new Stack<CohortConfig>();
      repositoryServicesConfig0.setCohortConfigList(stack0);
      assertEquals(0, stack0.size());
  }
}
