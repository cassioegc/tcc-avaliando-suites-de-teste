/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:55:37 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.BootstrapStatus;
import com.ibm.watson.data.client.model.enums.BootstrapState;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlDefine;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BootstrapStatus_ESTest extends BootstrapStatus_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      Integer integer0 = new Integer((-1519));
      bootstrapStatus0.setTotalRecords(integer0);
      Integer integer1 = bootstrapStatus0.getTotalRecords();
      assertEquals((-1519), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      Integer integer0 = new Integer(0);
      bootstrapStatus0.totalRecords(integer0);
      Integer integer1 = bootstrapStatus0.getTotalRecords();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      bootstrapStatus0.setTotalRecords(integer0);
      Integer integer1 = bootstrapStatus0.getTotalRecords();
      assertEquals(10, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      Integer integer0 = new Integer(3241);
      bootstrapStatus0.totalRecords(integer0);
      Integer integer1 = bootstrapStatus0.getTotalRecords();
      assertEquals(3241, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      BootstrapState bootstrapState0 = BootstrapState.NOT_STARTED;
      bootstrapStatus0.setStatus(bootstrapState0);
      BootstrapState bootstrapState1 = bootstrapStatus0.getStatus();
      assertEquals(BootstrapState.NOT_STARTED, bootstrapState1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      XmlDefine xmlDefine0 = new XmlDefine();
      List<String> list0 = xmlDefine0.getIncludes();
      BootstrapStatus bootstrapStatus1 = bootstrapStatus0.errors(list0);
      List<String> list1 = bootstrapStatus1.getErrors();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      bootstrapStatus0.addErrorsItem("\n");
      List<String> list0 = bootstrapStatus0.getErrors();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      bootstrapStatus0.currentStep("reactor.core.publisher.FluxWindowWhen$WindowOperation");
      String string0 = bootstrapStatus0.getCurrentStep();
      assertEquals("reactor.core.publisher.FluxWindowWhen$WindowOperation", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      bootstrapStatus0.currentStep("");
      String string0 = bootstrapStatus0.getCurrentStep();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      bootstrapStatus0.completionMessage("maxMessagesPerRead");
      String string0 = bootstrapStatus0.getCompletionMessage();
      assertEquals("maxMessagesPerRead", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      bootstrapStatus0.setCompletionMessage("");
      String string0 = bootstrapStatus0.getCompletionMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      Integer integer0 = new Integer((-1));
      bootstrapStatus0.setCompletedRecords(integer0);
      Integer integer1 = bootstrapStatus0.getCompletedRecords();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      List<String> list0 = xmlTest0.getIncludedGroups();
      bootstrapStatus0.errors(list0);
      // Undeclared exception!
      try { 
        bootstrapStatus0.addErrorsItem((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      BootstrapState bootstrapState0 = BootstrapState.NOT_STARTED;
      bootstrapStatus0.status(bootstrapState0);
      String string0 = bootstrapStatus0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      BootstrapStatus bootstrapStatus1 = new BootstrapStatus();
      assertTrue(bootstrapStatus1.equals((Object)bootstrapStatus0));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      bootstrapStatus1.setErrors(linkedList0);
      boolean boolean0 = bootstrapStatus0.equals(bootstrapStatus1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      BootstrapStatus bootstrapStatus1 = new BootstrapStatus();
      assertTrue(bootstrapStatus1.equals((Object)bootstrapStatus0));
      
      bootstrapStatus0.setTotalRecords(integer0);
      boolean boolean0 = bootstrapStatus1.equals(bootstrapStatus0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      BootstrapStatus bootstrapStatus1 = new BootstrapStatus();
      assertTrue(bootstrapStatus1.equals((Object)bootstrapStatus0));
      
      bootstrapStatus1.setCurrentStep("");
      boolean boolean0 = bootstrapStatus0.equals(bootstrapStatus1);
      assertFalse(bootstrapStatus1.equals((Object)bootstrapStatus0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      BootstrapState bootstrapState0 = BootstrapState.NOT_STARTED;
      boolean boolean0 = bootstrapStatus0.equals(bootstrapState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      BootstrapStatus bootstrapStatus1 = new BootstrapStatus();
      boolean boolean0 = bootstrapStatus0.equals(bootstrapStatus1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      boolean boolean0 = bootstrapStatus0.equals(bootstrapStatus0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      boolean boolean0 = bootstrapStatus0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      bootstrapStatus0.getStatus();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      BootstrapState bootstrapState0 = BootstrapState.NEW;
      bootstrapStatus0.setStatus(bootstrapState0);
      BootstrapStatus bootstrapStatus1 = new BootstrapStatus();
      boolean boolean0 = bootstrapStatus0.equals(bootstrapStatus1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      String string0 = bootstrapStatus0.getCompletionMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      Integer integer0 = bootstrapStatus0.getTotalRecords();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      bootstrapStatus0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      BootstrapStatus bootstrapStatus1 = bootstrapStatus0.completedRecords(integer0);
      Integer integer1 = bootstrapStatus1.getCompletedRecords();
      assertEquals(10, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      Integer integer0 = bootstrapStatus0.getCompletedRecords();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      bootstrapStatus0.setCompletionMessage("");
      BootstrapStatus bootstrapStatus1 = new BootstrapStatus();
      boolean boolean0 = bootstrapStatus0.equals(bootstrapStatus1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      String string0 = bootstrapStatus0.getCurrentStep();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BootstrapStatus bootstrapStatus0 = new BootstrapStatus();
      List<String> list0 = bootstrapStatus0.getErrors();
      assertNull(list0);
  }
}
