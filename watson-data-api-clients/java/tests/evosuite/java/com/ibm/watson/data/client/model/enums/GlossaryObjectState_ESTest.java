/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 02:26:00 GMT 2021
 */

package com.ibm.watson.data.client.model.enums;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.enums.GlossaryObjectState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlossaryObjectState_ESTest extends GlossaryObjectState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.fromValue("DRAFT");
      assertEquals(GlossaryObjectState.DRAFT, glossaryObjectState0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GlossaryObjectState[] glossaryObjectStateArray0 = GlossaryObjectState.values();
      assertEquals(6, glossaryObjectStateArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.valueOf("DELETED");
      assertEquals(GlossaryObjectState.DELETED, glossaryObjectState0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.fromValue("ARCHIVED");
      assertEquals(GlossaryObjectState.ARCHIVED, glossaryObjectState0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        GlossaryObjectState.fromValue("$VALUES");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value '$VALUES'
         //
         verifyException("com.ibm.watson.data.client.model.enums.GlossaryObjectState", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.ARCHIVED;
      String string0 = glossaryObjectState0.toString();
      assertEquals("ARCHIVED", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.ARCHIVED;
      String string0 = glossaryObjectState0.getValue();
      assertEquals("ARCHIVED", string0);
  }
}
