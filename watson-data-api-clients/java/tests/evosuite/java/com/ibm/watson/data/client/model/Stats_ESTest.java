/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:41:29 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.Stats;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Stats_ESTest extends Stats_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      stats0.virtualCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats0.getVirtualCount();
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stats stats0 = new Stats();
      MathContext mathContext0 = new MathContext(3);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0), mathContext0);
      stats0.virtualCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats0.getVirtualCount();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Stats stats1 = stats0.totalCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats1.getTotalCount();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = new BigDecimal(1028L);
      stats0.totalCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats0.getTotalCount();
      assertEquals((short)1028, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Stats stats0 = new Stats();
      MathContext mathContext0 = new MathContext(3);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0), mathContext0);
      stats0.totalCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats0.getTotalCount();
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stats stats0 = new Stats();
      Stats stats1 = stats0.spaceId("H Xd{");
      String string0 = stats1.getSpaceId();
      assertEquals("H Xd{", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.spaceId("");
      String string0 = stats0.getSpaceId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      stats0.onlineCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats0.getOnlineCount();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stats stats0 = new Stats();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Stats stats1 = stats0.onlineCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats1.getOnlineCount();
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Stats stats0 = new Stats();
      MathContext mathContext0 = new MathContext(3);
      BigDecimal bigDecimal0 = new BigDecimal((-1.0), mathContext0);
      stats0.setOnlineCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats0.getOnlineCount();
      assertEquals((short) (-1), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      Stats stats1 = stats0.batchCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats1.getBatchCount();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      stats0.batchCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats0.getBatchCount();
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Stats stats0 = new Stats();
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = new BigDecimal((-815.257291), mathContext0);
      stats0.batchCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats0.getBatchCount();
      assertEquals((byte) (-47), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Stats stats1 = stats0.totalCount(bigDecimal0);
      String string0 = stats1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Stats stats1 = new Stats();
      assertTrue(stats1.equals((Object)stats0));
      
      stats1.setVirtualCount(bigDecimal0);
      boolean boolean0 = stats1.equals(stats0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Stats stats1 = stats0.totalCount(bigDecimal0);
      stats1.onlineCount(bigDecimal0);
      Stats stats2 = new Stats();
      stats2.setTotalCount(bigDecimal0);
      Stats stats3 = stats2.batchCount(bigDecimal0);
      stats3.setOnlineCount(bigDecimal0);
      boolean boolean0 = stats0.equals(stats2);
      assertFalse(stats2.equals((Object)stats1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      stats0.onlineCount(bigDecimal0);
      Stats stats1 = new Stats();
      stats1.setTotalCount(bigDecimal0);
      stats0.setTotalCount(bigDecimal0);
      boolean boolean0 = stats0.equals(stats1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stats stats0 = new Stats();
      Stats stats1 = new Stats();
      boolean boolean0 = stats0.equals(stats1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Stats stats0 = new Stats();
      Stats stats1 = stats0.spaceId("H Xd{");
      Stats stats2 = new Stats();
      boolean boolean0 = stats1.equals(stats2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Stats stats0 = new Stats();
      boolean boolean0 = stats0.equals("%&XiL?+@gDvqQME");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Stats stats0 = new Stats();
      boolean boolean0 = stats0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Stats stats0 = new Stats();
      boolean boolean0 = stats0.equals(stats0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Stats stats0 = new Stats();
      stats0.setSpaceId("%&XiL?+@gDvqQME");
      assertEquals("%&XiL?+@gDvqQME", stats0.getSpaceId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Stats stats0 = new Stats();
      String string0 = stats0.getSpaceId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      stats0.setBatchCount(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      stats0.totalCount(bigDecimal0);
      Stats stats1 = new Stats();
      boolean boolean0 = stats0.equals(stats1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = stats0.getOnlineCount();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = stats0.getVirtualCount();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = stats0.getBatchCount();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = stats0.getTotalCount();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Stats stats0 = new Stats();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      stats0.setVirtualCount(bigDecimal0);
      BigDecimal bigDecimal1 = stats0.getVirtualCount();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }
}
