/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 00:46:12 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.CodeValue;
import com.ibm.watson.data.client.model.DiscoveredClassDetails;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiscoveredClassDetails_ESTest extends DiscoveredClassDetails_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DiscoveredClassDetails discoveredClassDetails0 = new DiscoveredClassDetails();
      CodeValue codeValue0 = new CodeValue();
      discoveredClassDetails0.setValue(codeValue0);
      CodeValue codeValue1 = discoveredClassDetails0.getValue();
      assertSame(codeValue1, codeValue0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DiscoveredClassDetails discoveredClassDetails0 = new DiscoveredClassDetails();
      DiscoveredClassDetails discoveredClassDetails1 = new DiscoveredClassDetails();
      Long long0 = new Long(0L);
      discoveredClassDetails1.setDistinctCount(long0);
      boolean boolean0 = discoveredClassDetails0.equals(discoveredClassDetails1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DiscoveredClassDetails discoveredClassDetails0 = new DiscoveredClassDetails();
      Object object0 = new Object();
      boolean boolean0 = discoveredClassDetails0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DiscoveredClassDetails discoveredClassDetails0 = new DiscoveredClassDetails();
      DiscoveredClassDetails discoveredClassDetails1 = new DiscoveredClassDetails();
      boolean boolean0 = discoveredClassDetails0.equals(discoveredClassDetails1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DiscoveredClassDetails discoveredClassDetails0 = new DiscoveredClassDetails();
      boolean boolean0 = discoveredClassDetails0.equals(discoveredClassDetails0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DiscoveredClassDetails discoveredClassDetails0 = new DiscoveredClassDetails();
      boolean boolean0 = discoveredClassDetails0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DiscoveredClassDetails discoveredClassDetails0 = new DiscoveredClassDetails();
      CodeValue codeValue0 = discoveredClassDetails0.getValue();
      assertNull(codeValue0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DiscoveredClassDetails discoveredClassDetails0 = new DiscoveredClassDetails();
      discoveredClassDetails0.hashCode();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DiscoveredClassDetails discoveredClassDetails0 = new DiscoveredClassDetails();
      CodeValue codeValue0 = new CodeValue();
      discoveredClassDetails0.setValue(codeValue0);
      DiscoveredClassDetails discoveredClassDetails1 = new DiscoveredClassDetails();
      boolean boolean0 = discoveredClassDetails0.equals(discoveredClassDetails1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DiscoveredClassDetails discoveredClassDetails0 = new DiscoveredClassDetails();
      String string0 = discoveredClassDetails0.toString();
      assertEquals("class DiscoveredClassDetails {\n    count: null\n    distinctCount: null\n    confidence: null\n    priority: null\n    value: null\n}", string0);
  }
}
