/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 20:52:38 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.SearchResultRow;
import com.ibm.watson.data.client.model.SearchResults;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SearchResults_ESTest extends SearchResults_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      Long long0 = new Long((-1374L));
      searchResults0.size(long0);
      Long long1 = searchResults0.getSize();
      assertEquals((-1374L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      Long long0 = new Long(0L);
      searchResults0.size(long0);
      Long long1 = searchResults0.getSize();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      Long long0 = new Long(1L);
      SearchResults searchResults1 = searchResults0.size(long0);
      Long long1 = searchResults1.getSize();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      Stack<SearchResultRow> stack0 = new Stack<SearchResultRow>();
      SearchResultRow searchResultRow0 = new SearchResultRow();
      stack0.add(searchResultRow0);
      SearchResults searchResults1 = searchResults0.rows(stack0);
      List<SearchResultRow> list0 = searchResults1.getRows();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      Stack<SearchResultRow> stack0 = new Stack<SearchResultRow>();
      searchResults0.setAggregations(stack0);
      Stack stack1 = (Stack)searchResults0.getAggregations();
      assertEquals(0, stack1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      SearchResultRow searchResultRow0 = new SearchResultRow();
      SearchResults searchResults1 = searchResults0.aggregations(searchResultRow0);
      String string0 = searchResults1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      Object object0 = new Object();
      boolean boolean0 = searchResults0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      boolean boolean0 = searchResults0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      boolean boolean0 = searchResults0.equals(searchResults0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      LinkedList<SearchResultRow> linkedList0 = new LinkedList<SearchResultRow>();
      SearchResults searchResults1 = searchResults0.rows(linkedList0);
      SearchResults searchResults2 = new SearchResults();
      boolean boolean0 = searchResults1.equals(searchResults2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      LinkedList<SearchResultRow> linkedList0 = new LinkedList<SearchResultRow>();
      searchResults0.setRows(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      List<SearchResultRow> list0 = searchResults0.getRows();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      Long long0 = searchResults0.getSize();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      ArrayList<SearchResultRow> arrayList0 = new ArrayList<SearchResultRow>();
      searchResults0.rows(arrayList0);
      List<SearchResultRow> list0 = searchResults0.getRows();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      Object object0 = searchResults0.getAggregations();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      searchResults0.setSize((Long) null);
      assertNull(searchResults0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SearchResults searchResults0 = new SearchResults();
      searchResults0.hashCode();
  }
}
