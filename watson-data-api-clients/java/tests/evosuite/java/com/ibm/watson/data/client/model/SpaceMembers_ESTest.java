/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 00:52:51 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.HrefModel;
import com.ibm.watson.data.client.model.SpaceMember;
import com.ibm.watson.data.client.model.SpaceMembers;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SpaceMembers_ESTest extends SpaceMembers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      spaceMembers0.resources((List<SpaceMember>) null);
      List<SpaceMember> list0 = spaceMembers0.getResources();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      SpaceMembers spaceMembers1 = spaceMembers0.resources((List<SpaceMember>) null);
      SpaceMember spaceMember0 = new SpaceMember();
      // Undeclared exception!
      try { 
        spaceMembers1.addResourcesItem(spaceMember0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.SpaceMembers", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      SpaceMember spaceMember0 = new SpaceMember();
      SpaceMembers spaceMembers1 = new SpaceMembers();
      assertTrue(spaceMembers1.equals((Object)spaceMembers0));
      
      SpaceMembers spaceMembers2 = spaceMembers1.addResourcesItem(spaceMember0);
      boolean boolean0 = spaceMembers0.equals(spaceMembers2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      SpaceMembers spaceMembers1 = new SpaceMembers();
      HrefModel hrefModel0 = new HrefModel();
      spaceMembers1.prev(hrefModel0);
      boolean boolean0 = spaceMembers0.equals(spaceMembers1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      SpaceMembers spaceMembers1 = new SpaceMembers();
      boolean boolean0 = spaceMembers0.equals(spaceMembers1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      boolean boolean0 = spaceMembers0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      boolean boolean0 = spaceMembers0.equals(spaceMembers0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      Object object0 = new Object();
      boolean boolean0 = spaceMembers0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      String string0 = spaceMembers0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      Stack<SpaceMember> stack0 = new Stack<SpaceMember>();
      spaceMembers0.setResources(stack0);
      assertNull(spaceMembers0.getLimit());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      List<SpaceMember> list0 = spaceMembers0.getResources();
      SpaceMembers spaceMembers1 = spaceMembers0.resources(list0);
      assertSame(spaceMembers1, spaceMembers0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      SpaceMember spaceMember0 = new SpaceMember();
      spaceMembers0.addResourcesItem(spaceMember0);
      List<SpaceMember> list0 = spaceMembers0.getResources();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpaceMembers spaceMembers0 = new SpaceMembers();
      spaceMembers0.hashCode();
  }
}
