/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 19:19:49 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.AbstractAssetEntity;
import com.ibm.watson.data.client.model.Asset;
import com.ibm.watson.data.client.model.Attachment;
import com.ibm.watson.data.client.model.MetadataAsset;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.internal.DynamicGraph;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Asset_ESTest extends Asset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Asset asset0 = new Asset();
      HashMap<String, AbstractAssetEntity> hashMap0 = new HashMap<String, AbstractAssetEntity>();
      asset0.entity(hashMap0);
      Map<String, AbstractAssetEntity> map0 = asset0.getEntity();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Asset asset0 = new Asset();
      Attachment attachment0 = new Attachment();
      DynamicGraph<Attachment> dynamicGraph0 = new DynamicGraph<Attachment>();
      List<Attachment> list0 = dynamicGraph0.getDependenciesFor(attachment0);
      Asset asset1 = asset0.attachments(list0);
      List<Attachment> list1 = asset1.getAttachments();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Asset asset0 = new Asset();
      LinkedList<Attachment> linkedList0 = new LinkedList<Attachment>();
      Asset asset1 = asset0.attachments(linkedList0);
      String string0 = asset1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Asset asset0 = new Asset();
      Vector<Attachment> vector0 = new Vector<Attachment>();
      Asset asset1 = asset0.attachments(vector0);
      Asset asset2 = new Asset();
      boolean boolean0 = asset1.equals(asset2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Asset asset0 = new Asset();
      Asset asset1 = new Asset();
      boolean boolean0 = asset0.equals(asset1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Asset asset0 = new Asset();
      Asset asset1 = new Asset();
      assertTrue(asset1.equals((Object)asset0));
      
      AbstractAssetEntity abstractAssetEntity0 = new AbstractAssetEntity();
      Asset asset2 = asset1.putEntityItem("", abstractAssetEntity0);
      MetadataAsset metadataAsset0 = new MetadataAsset();
      asset0.metadata(metadataAsset0);
      boolean boolean0 = asset2.equals(asset0);
      assertFalse(asset1.equals((Object)asset0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Asset asset0 = new Asset();
      Stack<Attachment> stack0 = new Stack<Attachment>();
      boolean boolean0 = asset0.equals(stack0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Asset asset0 = new Asset();
      boolean boolean0 = asset0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Asset asset0 = new Asset();
      boolean boolean0 = asset0.equals(asset0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Asset asset0 = new Asset();
      Asset asset1 = new Asset();
      assertTrue(asset1.equals((Object)asset0));
      
      AbstractAssetEntity abstractAssetEntity0 = new AbstractAssetEntity();
      Asset asset2 = asset1.putEntityItem("", abstractAssetEntity0);
      boolean boolean0 = asset2.equals(asset0);
      assertFalse(asset1.equals((Object)asset0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Asset asset0 = new Asset();
      Attachment attachment0 = new Attachment();
      Asset asset1 = asset0.addAttachmentsItem(attachment0);
      List<Attachment> list0 = asset1.getAttachments();
      assertTrue(list0.contains(attachment0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Asset asset0 = new Asset();
      AbstractAssetEntity abstractAssetEntity0 = new AbstractAssetEntity();
      asset0.putEntityItem("", abstractAssetEntity0);
      Map<String, AbstractAssetEntity> map0 = asset0.getEntity();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Asset asset0 = new Asset();
      asset0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Asset asset0 = new Asset();
      Vector<Attachment> vector0 = new Vector<Attachment>();
      Asset asset1 = asset0.attachments(vector0);
      Attachment attachment0 = new Attachment();
      asset1.addAttachmentsItem(attachment0);
      assertTrue(vector0.contains(attachment0));
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Asset asset0 = new Asset();
      HashMap<String, AbstractAssetEntity> hashMap0 = new HashMap<String, AbstractAssetEntity>();
      Asset asset1 = asset0.entity(hashMap0);
      AbstractAssetEntity abstractAssetEntity0 = new AbstractAssetEntity();
      asset1.putEntityItem("E;h", abstractAssetEntity0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Asset asset0 = new Asset();
      MetadataAsset metadataAsset0 = asset0.getMetadata();
      assertNull(metadataAsset0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Asset asset0 = new Asset();
      List<Attachment> list0 = asset0.getAttachments();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Asset asset0 = new Asset();
      Map<String, AbstractAssetEntity> map0 = asset0.getEntity();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Asset asset0 = new Asset();
      MetadataAsset metadataAsset0 = new MetadataAsset();
      asset0.setMetadata(metadataAsset0);
      MetadataAsset metadataAsset1 = asset0.getMetadata();
      assertNull(metadataAsset1.getOwnerId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Asset asset0 = new Asset();
      asset0.setEntity((Map<String, AbstractAssetEntity>) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Asset asset0 = new Asset();
      Stack<Attachment> stack0 = new Stack<Attachment>();
      asset0.setAttachments(stack0);
      assertTrue(stack0.empty());
  }
}
