/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 01:16:09 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.ScoringPayload;
import com.ibm.watson.data.client.model.SyncScoringDataResults;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SyncScoringDataResults_ESTest extends SyncScoringDataResults_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      Stack<ScoringPayload> stack0 = new Stack<ScoringPayload>();
      syncScoringDataResults0.setPredictions(stack0);
      List<ScoringPayload> list0 = syncScoringDataResults0.getPredictions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      ScoringPayload scoringPayload0 = new ScoringPayload();
      SyncScoringDataResults syncScoringDataResults1 = syncScoringDataResults0.addPredictionsItem(scoringPayload0);
      List<ScoringPayload> list0 = syncScoringDataResults1.getPredictions();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      ScoringPayload scoringPayload0 = new ScoringPayload();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ScoringPayload scoringPayload1 = scoringPayload0.addTargetsItem(linkedList0);
      syncScoringDataResults0.addPredictionsItem(scoringPayload1);
      linkedList0.add((Object) scoringPayload1);
      // Undeclared exception!
      try { 
        syncScoringDataResults0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      SyncScoringDataResults syncScoringDataResults1 = new SyncScoringDataResults();
      boolean boolean0 = syncScoringDataResults0.equals(syncScoringDataResults1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      boolean boolean0 = syncScoringDataResults0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      boolean boolean0 = syncScoringDataResults0.equals(syncScoringDataResults0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      ScoringPayload scoringPayload0 = new ScoringPayload();
      boolean boolean0 = syncScoringDataResults0.equals(scoringPayload0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      ScoringPayload scoringPayload0 = new ScoringPayload();
      SyncScoringDataResults syncScoringDataResults1 = syncScoringDataResults0.addPredictionsItem(scoringPayload0);
      String string0 = syncScoringDataResults1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      List<ScoringPayload> list0 = syncScoringDataResults0.getPredictions();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      syncScoringDataResults0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      String string0 = syncScoringDataResults0.toString();
      assertEquals("class SyncScoringDataResults {\n    predictions: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SyncScoringDataResults syncScoringDataResults0 = new SyncScoringDataResults();
      ArrayList<ScoringPayload> arrayList0 = new ArrayList<ScoringPayload>();
      SyncScoringDataResults syncScoringDataResults1 = syncScoringDataResults0.predictions(arrayList0);
      ScoringPayload scoringPayload0 = new ScoringPayload();
      syncScoringDataResults1.addPredictionsItem(scoringPayload0);
      assertTrue(arrayList0.contains(scoringPayload0));
      assertFalse(arrayList0.isEmpty());
  }
}
