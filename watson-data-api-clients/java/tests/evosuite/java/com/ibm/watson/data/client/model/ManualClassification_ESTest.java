/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 23:29:54 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.ClassificationOverride;
import com.ibm.watson.data.client.model.ManualClassification;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ManualClassification_ESTest extends ManualClassification_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      manualClassification0.setName("X9xl7sv}H=rut1");
      String string0 = manualClassification0.getName();
      assertEquals("X9xl7sv}H=rut1", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      manualClassification0.setName("");
      String string0 = manualClassification0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      manualClassification0.setName("");
      String string0 = manualClassification0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      ManualClassification manualClassification1 = new ManualClassification();
      assertTrue(manualClassification1.equals((Object)manualClassification0));
      
      ClassificationOverride classificationOverride0 = new ClassificationOverride();
      manualClassification1.setOverwrittenClass(classificationOverride0);
      boolean boolean0 = manualClassification0.equals(manualClassification1);
      assertFalse(manualClassification1.equals((Object)manualClassification0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      ManualClassification manualClassification1 = new ManualClassification();
      boolean boolean0 = manualClassification0.equals(manualClassification1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      Object object0 = new Object();
      boolean boolean0 = manualClassification0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      boolean boolean0 = manualClassification0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      boolean boolean0 = manualClassification0.equals(manualClassification0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      manualClassification0.setName("c%H.@gFQ");
      ManualClassification manualClassification1 = new ManualClassification();
      boolean boolean0 = manualClassification0.equals(manualClassification1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      String string0 = manualClassification0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      ClassificationOverride classificationOverride0 = manualClassification0.getOverwrittenClass();
      assertNull(classificationOverride0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      manualClassification0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ManualClassification manualClassification0 = new ManualClassification();
      ClassificationOverride classificationOverride0 = new ClassificationOverride();
      manualClassification0.setOverwrittenClass(classificationOverride0);
      ClassificationOverride classificationOverride1 = manualClassification0.getOverwrittenClass();
      assertSame(classificationOverride1, classificationOverride0);
  }
}
