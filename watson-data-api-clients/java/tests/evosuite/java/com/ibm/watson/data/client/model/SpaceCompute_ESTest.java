/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 19:54:45 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.SpaceCompute;
import com.ibm.watson.data.client.model.enums.ComputeType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SpaceCompute_ESTest extends SpaceCompute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      spaceCompute0.name("Ed`");
      String string0 = spaceCompute0.getName();
      assertEquals("Ed`", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      spaceCompute0.name("");
      String string0 = spaceCompute0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      spaceCompute0.guid("-k,TtpzKRurM98");
      String string0 = spaceCompute0.getGuid();
      assertEquals("-k,TtpzKRurM98", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      spaceCompute0.guid("");
      String string0 = spaceCompute0.getGuid();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      spaceCompute0.crn("=.1h{$PmnwYl7P0!T");
      String string0 = spaceCompute0.getCrn();
      assertEquals("=.1h{$PmnwYl7P0!T", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      spaceCompute0.crn("");
      String string0 = spaceCompute0.getCrn();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      ComputeType computeType0 = ComputeType.STREAMING_ANALYTICS;
      spaceCompute0.type(computeType0);
      SpaceCompute spaceCompute1 = new SpaceCompute();
      boolean boolean0 = spaceCompute0.equals(spaceCompute1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      SpaceCompute spaceCompute1 = new SpaceCompute();
      assertTrue(spaceCompute1.equals((Object)spaceCompute0));
      
      spaceCompute1.setName("-_DsMp|<ge8,)d");
      boolean boolean0 = spaceCompute0.equals(spaceCompute1);
      assertFalse(spaceCompute1.equals((Object)spaceCompute0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      spaceCompute0.crn("watson");
      SpaceCompute spaceCompute1 = new SpaceCompute();
      boolean boolean0 = spaceCompute0.equals(spaceCompute1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      Object object0 = new Object();
      boolean boolean0 = spaceCompute0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      SpaceCompute spaceCompute1 = new SpaceCompute();
      boolean boolean0 = spaceCompute0.equals(spaceCompute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      boolean boolean0 = spaceCompute0.equals(spaceCompute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      boolean boolean0 = spaceCompute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      String string0 = spaceCompute0.getCrn();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      String string0 = spaceCompute0.getGuid();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      String string0 = spaceCompute0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      spaceCompute0.setCrn((String) null);
      assertNull(spaceCompute0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      SpaceCompute spaceCompute1 = spaceCompute0.name("DEFAULT");
      String string0 = spaceCompute1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      SpaceCompute spaceCompute1 = spaceCompute0.guid("-k,TtpzKRurM98");
      SpaceCompute spaceCompute2 = new SpaceCompute();
      boolean boolean0 = spaceCompute1.equals(spaceCompute2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      spaceCompute0.setGuid("DEFAULT");
      assertNull(spaceCompute0.getType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      spaceCompute0.getType();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      ComputeType computeType0 = ComputeType.AWS_EMR;
      spaceCompute0.setType(computeType0);
      assertEquals(ComputeType.AWS_EMR, spaceCompute0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      spaceCompute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpaceCompute spaceCompute0 = new SpaceCompute();
      ComputeType computeType0 = ComputeType.AWS_EMR;
      spaceCompute0.type(computeType0);
      ComputeType computeType1 = spaceCompute0.getType();
      assertSame(computeType1, computeType0);
  }
}
