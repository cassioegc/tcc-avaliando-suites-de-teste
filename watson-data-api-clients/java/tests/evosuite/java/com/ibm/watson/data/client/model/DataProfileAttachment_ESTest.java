/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 22:41:25 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.DataProfileAttachment;
import com.ibm.watson.data.client.model.DataProfileColumn;
import com.ibm.watson.data.client.model.DataProfileSummary;
import com.ibm.watson.data.client.model.NumericStats;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataProfileAttachment_ESTest extends DataProfileAttachment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      DataProfileSummary dataProfileSummary0 = new DataProfileSummary();
      dataProfileAttachment0.setSummary(dataProfileSummary0);
      DataProfileSummary dataProfileSummary1 = dataProfileAttachment0.getSummary();
      assertNull(dataProfileSummary1.getScore());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      LinkedList<DataProfileColumn> linkedList0 = new LinkedList<DataProfileColumn>();
      dataProfileAttachment0.setColumns(linkedList0);
      List<DataProfileColumn> list0 = dataProfileAttachment0.getColumns();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      LinkedList<DataProfileColumn> linkedList0 = new LinkedList<DataProfileColumn>();
      dataProfileAttachment0.setColumns(linkedList0);
      DataProfileColumn dataProfileColumn0 = new DataProfileColumn();
      linkedList0.add(dataProfileColumn0);
      List<DataProfileColumn> list0 = dataProfileAttachment0.getColumns();
      assertTrue(list0.contains(dataProfileColumn0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      DataProfileSummary dataProfileSummary0 = new DataProfileSummary();
      dataProfileAttachment0.setSummary(dataProfileSummary0);
      String string0 = dataProfileAttachment0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      DataProfileAttachment dataProfileAttachment1 = new DataProfileAttachment();
      assertTrue(dataProfileAttachment1.equals((Object)dataProfileAttachment0));
      
      LinkedList<DataProfileColumn> linkedList0 = new LinkedList<DataProfileColumn>();
      dataProfileAttachment1.setColumns(linkedList0);
      boolean boolean0 = dataProfileAttachment0.equals(dataProfileAttachment1);
      assertFalse(dataProfileAttachment1.equals((Object)dataProfileAttachment0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      DataProfileAttachment dataProfileAttachment1 = new DataProfileAttachment();
      boolean boolean0 = dataProfileAttachment0.equals(dataProfileAttachment1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      boolean boolean0 = dataProfileAttachment0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      boolean boolean0 = dataProfileAttachment0.equals(dataProfileAttachment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      NumericStats numericStats0 = new NumericStats();
      boolean boolean0 = dataProfileAttachment0.equals(numericStats0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      DataProfileSummary dataProfileSummary0 = new DataProfileSummary();
      dataProfileAttachment0.setSummary(dataProfileSummary0);
      DataProfileAttachment dataProfileAttachment1 = new DataProfileAttachment();
      boolean boolean0 = dataProfileAttachment0.equals(dataProfileAttachment1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      dataProfileAttachment0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      DataProfileSummary dataProfileSummary0 = dataProfileAttachment0.getSummary();
      assertNull(dataProfileSummary0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataProfileAttachment dataProfileAttachment0 = new DataProfileAttachment();
      List<DataProfileColumn> list0 = dataProfileAttachment0.getColumns();
      assertNull(list0);
  }
}
