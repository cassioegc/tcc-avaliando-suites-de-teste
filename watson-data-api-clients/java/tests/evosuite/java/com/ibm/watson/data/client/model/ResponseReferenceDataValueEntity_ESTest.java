/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:16:05 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.RelationshipObject;
import com.ibm.watson.data.client.model.ResponseReferenceDataValueEntity;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResponseReferenceDataValueEntity_ESTest extends ResponseReferenceDataValueEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      Vector<RelationshipObject> vector0 = new Vector<RelationshipObject>();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity1 = responseReferenceDataValueEntity0.termRelationships(vector0);
      List<RelationshipObject> list0 = responseReferenceDataValueEntity1.getTermRelationships();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      responseReferenceDataValueEntity0.revision("WRITE_SPIN_COUNT");
      String string0 = responseReferenceDataValueEntity0.getRevision();
      assertEquals("WRITE_SPIN_COUNT", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      Vector<RelationshipObject> vector0 = new Vector<RelationshipObject>();
      responseReferenceDataValueEntity0.termRelationships(vector0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      RelationshipObject relationshipObject1 = relationshipObject0.entity(vector0);
      vector0.add(relationshipObject1);
      // Undeclared exception!
      try { 
        responseReferenceDataValueEntity0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      boolean boolean0 = responseReferenceDataValueEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      boolean boolean0 = responseReferenceDataValueEntity0.equals(responseReferenceDataValueEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      RelationshipObject relationshipObject0 = new RelationshipObject();
      boolean boolean0 = responseReferenceDataValueEntity0.equals(relationshipObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      RelationshipObject relationshipObject0 = new RelationshipObject();
      responseReferenceDataValueEntity0.addTermRelationshipsItem(relationshipObject0);
      List<RelationshipObject> list0 = responseReferenceDataValueEntity0.getTermRelationships();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      String string0 = responseReferenceDataValueEntity0.toString();
      assertEquals("class ResponseReferenceDataValueEntity {\n    code: null\n    value: null\n    description: null\n    revision: null\n    termRelationships: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      String string0 = responseReferenceDataValueEntity0.getRevision();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      Stack<RelationshipObject> stack0 = new Stack<RelationshipObject>();
      responseReferenceDataValueEntity0.setTermRelationships(stack0);
      assertNull(responseReferenceDataValueEntity0.getRevision());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      Stack<RelationshipObject> stack0 = new Stack<RelationshipObject>();
      responseReferenceDataValueEntity0.termRelationships(stack0);
      RelationshipObject relationshipObject0 = new RelationshipObject();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity1 = responseReferenceDataValueEntity0.addTermRelationshipsItem(relationshipObject0);
      assertNull(responseReferenceDataValueEntity1.getCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity1 = responseReferenceDataValueEntity0.revision("");
      String string0 = responseReferenceDataValueEntity1.getRevision();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      List<RelationshipObject> list0 = responseReferenceDataValueEntity0.getTermRelationships();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      responseReferenceDataValueEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      responseReferenceDataValueEntity0.setRevision("reactor.netty.channel.MicrometerChannelMetricsRecorder");
      assertNull(responseReferenceDataValueEntity0.getCode());
  }
}
