/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:53:51 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.RocCurve;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RocCurve_ESTest extends RocCurve_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      rocCurve0.setTrueClass("<y`h:Y_mcI>bj\"S~C=");
      String string0 = rocCurve0.getTrueClass();
      assertEquals("<y`h:Y_mcI>bj\"S~C=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      RocCurve rocCurve1 = rocCurve0.trueClass("");
      String string0 = rocCurve1.getTrueClass();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      RocCurve rocCurve1 = rocCurve0.tpr(bigDecimal0);
      BigDecimal bigDecimal1 = rocCurve1.getTpr();
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      rocCurve0.tpr(bigDecimal0);
      BigDecimal bigDecimal1 = rocCurve0.getTpr();
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      BigDecimal bigDecimal0 = new BigDecimal((-553));
      RocCurve rocCurve1 = rocCurve0.tpr(bigDecimal0);
      BigDecimal bigDecimal1 = rocCurve1.getTpr();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      ArrayList<BigDecimal> arrayList0 = new ArrayList<BigDecimal>();
      RocCurve rocCurve1 = rocCurve0.thresholds(arrayList0);
      List<BigDecimal> list0 = rocCurve1.getThresholds();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      rocCurve0.fpr(bigDecimal0);
      BigDecimal bigDecimal1 = rocCurve0.getFpr();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      RocCurve rocCurve1 = rocCurve0.fpr(bigDecimal0);
      BigDecimal bigDecimal1 = rocCurve1.getFpr();
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      BigDecimal bigDecimal0 = new BigDecimal((-383L));
      rocCurve0.fpr(bigDecimal0);
      BigDecimal bigDecimal1 = rocCurve0.getFpr();
      assertEquals((byte) (-127), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      rocCurve0.trueClass("SADwV7~|X=b:n");
      String string0 = rocCurve0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      Vector<BigDecimal> vector0 = new Vector<BigDecimal>();
      rocCurve0.setThresholds(vector0);
      RocCurve rocCurve1 = new RocCurve();
      boolean boolean0 = rocCurve0.equals(rocCurve1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      RocCurve rocCurve1 = rocCurve0.fpr(bigDecimal0);
      RocCurve rocCurve2 = new RocCurve();
      boolean boolean0 = rocCurve1.equals(rocCurve2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      BigDecimal bigDecimal0 = new BigDecimal((long) 1953);
      rocCurve0.tpr(bigDecimal0);
      RocCurve rocCurve1 = new RocCurve();
      boolean boolean0 = rocCurve0.equals(rocCurve1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      RocCurve rocCurve1 = new RocCurve();
      boolean boolean0 = rocCurve0.equals(rocCurve1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      Integer integer0 = new Integer((-3551));
      boolean boolean0 = rocCurve0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      boolean boolean0 = rocCurve0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      boolean boolean0 = rocCurve0.equals(rocCurve0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      rocCurve0.addThresholdsItem((BigDecimal) null);
      List<BigDecimal> list0 = rocCurve0.getThresholds();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      rocCurve0.setThresholds(linkedList0);
      RocCurve rocCurve1 = rocCurve0.addThresholdsItem((BigDecimal) null);
      assertNull(rocCurve1.getTrueClass());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      String string0 = rocCurve0.getTrueClass();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      BigDecimal bigDecimal0 = rocCurve0.getFpr();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      BigDecimal bigDecimal0 = rocCurve0.getTpr();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      rocCurve0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      rocCurve0.trueClass("SADwV7~|X=b:n");
      RocCurve rocCurve1 = new RocCurve();
      boolean boolean0 = rocCurve1.equals(rocCurve0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      List<BigDecimal> list0 = rocCurve0.getThresholds();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      rocCurve0.setTpr((BigDecimal) null);
      assertNull(rocCurve0.getTrueClass());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RocCurve rocCurve0 = new RocCurve();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      rocCurve0.setFpr(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
  }
}
