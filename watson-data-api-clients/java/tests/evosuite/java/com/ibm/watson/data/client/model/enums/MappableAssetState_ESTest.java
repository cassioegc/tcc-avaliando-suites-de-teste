/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 11:42:04 GMT 2021
 */

package com.ibm.watson.data.client.model.enums;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.enums.MappableAssetState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MappableAssetState_ESTest extends MappableAssetState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MappableAssetState mappableAssetState0 = MappableAssetState.fromValue("READY_TO_CREATE");
      assertEquals(MappableAssetState.READY_TO_CREATE, mappableAssetState0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MappableAssetState[] mappableAssetStateArray0 = MappableAssetState.values();
      assertEquals(11, mappableAssetStateArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MappableAssetState mappableAssetState0 = MappableAssetState.valueOf("PURGE_PENDING");
      assertEquals(MappableAssetState.PURGE_PENDING, mappableAssetState0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        MappableAssetState.fromValue("$*k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value '$*k'
         //
         verifyException("com.ibm.watson.data.client.model.enums.MappableAssetState", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MappableAssetState mappableAssetState0 = MappableAssetState.fromValue("INCOMPLETE");
      String string0 = mappableAssetState0.getValue();
      assertEquals("INCOMPLETE", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MappableAssetState mappableAssetState0 = MappableAssetState.fromValue("INCOMPLETE");
      String string0 = mappableAssetState0.toString();
      assertEquals("INCOMPLETE", string0);
  }
}
