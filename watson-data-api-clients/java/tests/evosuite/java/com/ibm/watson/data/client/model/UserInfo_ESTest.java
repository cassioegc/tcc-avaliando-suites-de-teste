/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 14:55:06 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.UserInfo;
import java.time.chrono.JapaneseDate;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.SynchronousQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserInfo_ESTest extends UserInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      StringBuilder stringBuilder0 = new StringBuilder();
      userInfo0.toString(stringBuilder0);
      assertEquals("    approvalStatus: null\n    authenticator: null\n    createdTimestamp: null\n    currentAccountStatus: null\n    displayName: null\n    email: null\n    lastModifiedTimestamp: null\n    permissions: null\n    role: null\n    uid: null\n    userRoles: null\n    username: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      String string0 = userInfo0.toIndentedString(userInfo0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.setUsername(";wOhg%f,e9");
      String string0 = userInfo0.getUsername();
      assertEquals(";wOhg%f,e9", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.username("");
      String string0 = userInfo0.getUsername();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getLocalListeners();
      UserInfo userInfo1 = userInfo0.userRoles(list0);
      List<String> list1 = userInfo1.getUserRoles();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.addUserRolesItem("");
      List<String> list0 = userInfo0.getUserRoles();
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.uid("W0w;kmG</)IUD~");
      String string0 = userInfo0.getUid();
      assertEquals("W0w;kmG</)IUD~", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.uid("");
      String string0 = userInfo0.getUid();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.role("reactor.netty.resources.ConnectionProvider$HostSpecificSpec");
      String string0 = userInfo0.getRole();
      assertEquals("reactor.netty.resources.ConnectionProvider$HostSpecificSpec", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.role("");
      String string0 = userInfo0.getRole();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      SynchronousQueue<java.util.Locale.LanguageRange> synchronousQueue0 = new SynchronousQueue<java.util.Locale.LanguageRange>();
      LinkedList<java.util.Locale.LanguageRange> linkedList0 = new LinkedList<java.util.Locale.LanguageRange>(synchronousQueue0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      java.util.Locale.FilteringMode locale_FilteringMode0 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) linkedList0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      userInfo0.permissions(list0);
      List<String> list1 = userInfo0.getPermissions();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = userInfo0.addPermissionsItem(" (expected: 0 - ");
      List<String> list0 = userInfo1.getPermissions();
      assertTrue(list0.contains(" (expected: 0 - "));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.setLastModifiedTimestamp("reactor.netty.resources.ConnectionProvider$HostSpecificSpec");
      String string0 = userInfo0.getLastModifiedTimestamp();
      assertEquals("reactor.netty.resources.ConnectionProvider$HostSpecificSpec", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.email("YO");
      String string0 = userInfo0.getEmail();
      assertEquals("YO", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = userInfo0.email("");
      String string0 = userInfo1.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.displayName("");
      String string0 = userInfo0.getDisplayName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.currentAccountStatus("bmGRd3'}T)K|NNOY");
      String string0 = userInfo0.getCurrentAccountStatus();
      assertEquals("bmGRd3'}T)K|NNOY", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.currentAccountStatus("");
      String string0 = userInfo0.getCurrentAccountStatus();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.createdTimestamp("YO");
      String string0 = userInfo0.getCreatedTimestamp();
      assertEquals("YO", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.createdTimestamp("");
      String string0 = userInfo0.getCreatedTimestamp();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.setAuthenticator("LE");
      String string0 = userInfo0.getAuthenticator();
      assertEquals("LE", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.setAuthenticator("");
      String string0 = userInfo0.getAuthenticator();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = userInfo0.approvalStatus("fd&:Vn^D wp");
      String string0 = userInfo1.getApprovalStatus();
      assertEquals("fd&:Vn^D wp", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_THREAD_COUNT);
      List<String> list0 = xmlTest0.getExcludedGroups();
      userInfo0.userRoles(list0);
      // Undeclared exception!
      try { 
        userInfo0.addUserRolesItem("C:ETT#uAKQhNV2.-4;;");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getExcludedGroups();
      UserInfo userInfo1 = userInfo0.permissions(list0);
      // Undeclared exception!
      try { 
        userInfo1.addPermissionsItem("}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      // Undeclared exception!
      try { 
        userInfo0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.UserInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.uid("    email: ");
      String string0 = userInfo0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = new UserInfo();
      assertTrue(userInfo1.equals((Object)userInfo0));
      
      userInfo0.username("");
      boolean boolean0 = userInfo0.equals(userInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = new UserInfo();
      boolean boolean0 = userInfo0.equals(userInfo1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.role(" jt_OI/.V|D");
      UserInfo userInfo1 = new UserInfo();
      boolean boolean0 = userInfo0.equals(userInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getIncludedGroups();
      userInfo0.setPermissions(list0);
      UserInfo userInfo1 = new UserInfo();
      boolean boolean0 = userInfo0.equals(userInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = userInfo0.lastModifiedTimestamp("class UserInfo {\n    approvalStatus: null\n    authenticator: null\n    createdTimestamp: null\n    currentAccountStatus: null\n    displayName: null\n    email: null\n    lastModifiedTimestamp: null\n    permissions: null\n    role: null\n    uid: null\n    userRoles: null\n    username: null\n}");
      UserInfo userInfo2 = new UserInfo();
      boolean boolean0 = userInfo1.equals(userInfo2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.email("");
      UserInfo userInfo1 = new UserInfo();
      boolean boolean0 = userInfo0.equals(userInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = new UserInfo();
      assertTrue(userInfo1.equals((Object)userInfo0));
      
      UserInfo userInfo2 = userInfo1.displayName("class UserInfo {\n    approvalStatus: null\n    authenticator: null\n    createdTimestamp: null\n    currentAccountStatus: null\n    displayName: null\n    email: null\n    lastModifiedTimestamp: null\n    permissions: null\n    role: null\n    uid: null\n    userRoles: java.util.ArrayList@0000000003\n    username: null\n}");
      boolean boolean0 = userInfo0.equals(userInfo2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = new UserInfo();
      assertTrue(userInfo1.equals((Object)userInfo0));
      
      userInfo0.setCreatedTimestamp("");
      boolean boolean0 = userInfo1.equals(userInfo0);
      assertFalse(userInfo1.equals((Object)userInfo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = new UserInfo();
      userInfo0.setApprovalStatus("");
      boolean boolean0 = userInfo0.equals(userInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      boolean boolean0 = userInfo0.equals(japaneseDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      boolean boolean0 = userInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      boolean boolean0 = userInfo0.equals(userInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getIncludedGroups();
      userInfo0.userRoles(list0);
      UserInfo userInfo1 = new UserInfo();
      boolean boolean0 = userInfo0.equals(userInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.approvalStatus("");
      String string0 = userInfo0.getApprovalStatus();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.setCurrentAccountStatus((String) null);
      assertNull(userInfo0.getRole());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      List<String> list0 = userInfo0.getUserRoles();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      String string0 = userInfo0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      String string0 = userInfo0.getUid();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      String string0 = userInfo0.getLastModifiedTimestamp();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      String string0 = userInfo0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      String string0 = userInfo0.getDisplayName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.setRole("");
      assertNull(userInfo0.getEmail());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.hashCode();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.setLastModifiedTimestamp("");
      String string0 = userInfo0.getLastModifiedTimestamp();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.setUserRoles((List<String>) null);
      assertNull(userInfo0.getAuthenticator());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.setUid("l@1'*]OMS");
      assertNull(userInfo0.getEmail());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.setEmail("~)C");
      assertNull(userInfo0.getCreatedTimestamp());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.currentAccountStatus("");
      UserInfo userInfo1 = new UserInfo();
      boolean boolean0 = userInfo0.equals(userInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      userInfo0.setDisplayName("");
      assertNull(userInfo0.getApprovalStatus());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = userInfo0.authenticator("");
      UserInfo userInfo2 = new UserInfo();
      boolean boolean0 = userInfo1.equals(userInfo2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      String string0 = userInfo0.getAuthenticator();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      List<String> list0 = userInfo0.getPermissions();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      String string0 = userInfo0.getCreatedTimestamp();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      String string0 = userInfo0.getCurrentAccountStatus();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = userInfo0.uid("");
      UserInfo userInfo2 = new UserInfo();
      boolean boolean0 = userInfo1.equals(userInfo2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      String string0 = userInfo0.getApprovalStatus();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      UserInfo userInfo1 = userInfo0.displayName("    email: ");
      String string0 = userInfo1.getDisplayName();
      assertEquals("    email: ", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UserInfo userInfo0 = new UserInfo();
      String string0 = userInfo0.getRole();
      assertNull(string0);
  }
}
