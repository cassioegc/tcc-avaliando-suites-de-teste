/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 01:58:29 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.InputDataArray;
import com.ibm.watson.data.client.model.SyncScoringData;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SyncScoringData_ESTest extends SyncScoringData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      syncScoringData0.setInputData((List<InputDataArray>) null);
      List<InputDataArray> list0 = syncScoringData0.getInputData();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      InputDataArray inputDataArray0 = new InputDataArray();
      SyncScoringData syncScoringData1 = syncScoringData0.addInputDataItem(inputDataArray0);
      List<InputDataArray> list0 = syncScoringData1.getInputData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      syncScoringData0.setInputData((List<InputDataArray>) null);
      InputDataArray inputDataArray0 = new InputDataArray();
      // Undeclared exception!
      try { 
        syncScoringData0.addInputDataItem(inputDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.SyncScoringData", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      syncScoringData0.setInputData((List<InputDataArray>) null);
      String string0 = syncScoringData0.toString();
      assertEquals("class SyncScoringData {\n    inputData: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      LinkedList<InputDataArray> linkedList0 = new LinkedList<InputDataArray>();
      boolean boolean0 = syncScoringData0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      boolean boolean0 = syncScoringData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      boolean boolean0 = syncScoringData0.equals(syncScoringData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      syncScoringData0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      InputDataArray inputDataArray0 = new InputDataArray();
      syncScoringData0.addInputDataItem(inputDataArray0);
      SyncScoringData syncScoringData1 = new SyncScoringData();
      boolean boolean0 = syncScoringData0.equals(syncScoringData1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      String string0 = syncScoringData0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      List<InputDataArray> list0 = syncScoringData0.getInputData();
      syncScoringData0.setInputData(list0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SyncScoringData syncScoringData0 = new SyncScoringData();
      List<InputDataArray> list0 = syncScoringData0.getInputData();
      SyncScoringData syncScoringData1 = syncScoringData0.inputData(list0);
      assertSame(syncScoringData0, syncScoringData1);
  }
}
