/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:48:31 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.ProjectToken;
import com.ibm.watson.data.client.model.TokenScope;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProjectToken_ESTest extends ProjectToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      projectToken0.setToken("V!@585;8-j");
      String string0 = projectToken0.getToken();
      assertEquals("V!@585;8-j", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      LinkedList<TokenScope> linkedList0 = new LinkedList<TokenScope>();
      projectToken0.scopes(linkedList0);
      List<TokenScope> list0 = projectToken0.getScopes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      projectToken0.setName("R$(uIt");
      String string0 = projectToken0.getName();
      assertEquals("R$(uIt", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      MockDate mockDate0 = new MockDate((-2049), 1692, 1692, (-2049), 34, (-2049));
      projectToken0.lastUsedAt(mockDate0);
      Date date0 = projectToken0.getLastUsedAt();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      ProjectToken projectToken1 = projectToken0.guid("\n");
      String string0 = projectToken1.getGuid();
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      ProjectToken projectToken1 = projectToken0.guid("");
      String string0 = projectToken1.getGuid();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      MockDate mockDate0 = new MockDate();
      projectToken0.createdAt(mockDate0);
      Date date0 = projectToken0.getCreatedAt();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      projectToken0.setToken("");
      String string0 = projectToken0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      ProjectToken projectToken1 = new ProjectToken();
      boolean boolean0 = projectToken0.equals(projectToken1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      LinkedList<TokenScope> linkedList0 = new LinkedList<TokenScope>();
      ProjectToken projectToken1 = new ProjectToken();
      assertTrue(projectToken1.equals((Object)projectToken0));
      
      projectToken0.setScopes(linkedList0);
      boolean boolean0 = projectToken0.equals(projectToken1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      ProjectToken projectToken1 = new ProjectToken();
      assertTrue(projectToken1.equals((Object)projectToken0));
      
      projectToken1.setName("%3K<");
      boolean boolean0 = projectToken0.equals(projectToken1);
      assertFalse(projectToken1.equals((Object)projectToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      ProjectToken projectToken1 = new ProjectToken();
      MockDate mockDate0 = new MockDate(127, 127, 127, 127, 127, 848);
      projectToken0.setCreatedAt(mockDate0);
      ProjectToken projectToken2 = projectToken1.createdAt(mockDate0);
      assertTrue(projectToken2.equals((Object)projectToken0));
      
      projectToken0.setLastUsedAt(mockDate0);
      boolean boolean0 = projectToken0.equals(projectToken1);
      assertFalse(projectToken1.equals((Object)projectToken0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      ProjectToken projectToken1 = projectToken0.guid("af.MIEQS");
      ProjectToken projectToken2 = new ProjectToken();
      boolean boolean0 = projectToken2.equals(projectToken1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      ProjectToken projectToken1 = new ProjectToken();
      MockDate mockDate0 = new MockDate(127, 0, 2903, 51, 0, 848);
      ProjectToken projectToken2 = projectToken1.createdAt(mockDate0);
      boolean boolean0 = projectToken0.equals(projectToken2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      TokenScope tokenScope0 = new TokenScope();
      boolean boolean0 = projectToken0.equals(tokenScope0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      boolean boolean0 = projectToken0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      boolean boolean0 = projectToken0.equals(projectToken0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      ProjectToken projectToken1 = new ProjectToken();
      assertTrue(projectToken1.equals((Object)projectToken0));
      
      projectToken1.token("io.netty.buffer.UnpooledByteBufAlloca7or");
      boolean boolean0 = projectToken0.equals(projectToken1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      ProjectToken projectToken1 = projectToken0.addScopesItem((TokenScope) null);
      List<TokenScope> list0 = projectToken1.getScopes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      LinkedList<TokenScope> linkedList0 = new LinkedList<TokenScope>();
      ProjectToken projectToken1 = projectToken0.scopes(linkedList0);
      TokenScope tokenScope0 = new TokenScope();
      projectToken1.addScopesItem(tokenScope0);
      assertTrue(linkedList0.contains(tokenScope0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      String string0 = projectToken0.getToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      projectToken0.name("");
      String string0 = projectToken0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      projectToken0.setGuid("Q=W,f9KQ h;t]em3e");
      assertNull(projectToken0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      String string0 = projectToken0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      projectToken0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      Date date0 = projectToken0.getCreatedAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      projectToken0.token("");
      String string0 = projectToken0.getToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      List<TokenScope> list0 = projectToken0.getScopes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      String string0 = projectToken0.getGuid();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ProjectToken projectToken0 = new ProjectToken();
      Date date0 = projectToken0.getLastUsedAt();
      assertNull(date0);
  }
}
