/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:46:55 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.Warnings;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Warnings_ESTest extends Warnings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      Long long0 = new Long((-607L));
      warnings0.row(long0);
      Long long1 = warnings0.getRow();
      assertEquals((-607L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      Long long0 = new Long(0L);
      Warnings warnings1 = warnings0.row(long0);
      Long long1 = warnings1.getRow();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      Long long0 = new Long(1407L);
      Warnings warnings1 = warnings0.row(long0);
      Long long1 = warnings1.getRow();
      assertEquals(1407L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      Vector<String> vector0 = new Vector<String>();
      Warnings warnings1 = warnings0.info(vector0);
      List<String> list0 = warnings1.getInfo();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      warnings0.addInfoItem("MD8=Wn^V");
      List<String> list0 = warnings0.getInfo();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      warnings0.addInfoItem("MD8=Wn^V");
      String string0 = warnings0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      Long long0 = new Long(0L);
      warnings0.row(long0);
      Warnings warnings1 = new Warnings();
      boolean boolean0 = warnings0.equals(warnings1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      Warnings warnings1 = new Warnings();
      assertTrue(warnings1.equals((Object)warnings0));
      
      Warnings warnings2 = warnings1.addInfoItem("MD8=Wn^V");
      boolean boolean0 = warnings0.equals(warnings2);
      assertFalse(warnings1.equals((Object)warnings0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      boolean boolean0 = warnings0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      boolean boolean0 = warnings0.equals(warnings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      boolean boolean0 = warnings0.equals("MD8=Wn^V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      Warnings warnings1 = warnings0.addInfoItem("MD8=Wn^V");
      Warnings warnings2 = new Warnings();
      assertFalse(warnings2.equals((Object)warnings1));
      
      Warnings warnings3 = warnings2.addInfoItem("MD8=Wn^V");
      boolean boolean0 = warnings0.equals(warnings3);
      assertTrue(warnings2.equals((Object)warnings0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      warnings0.setInfo(arrayList0);
      assertNull(warnings0.getRow());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      warnings0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      List<String> list0 = warnings0.getInfo();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      Long long0 = new Long((-1L));
      warnings0.setRow(long0);
      assertEquals((-1L), (long)warnings0.getRow());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      Long long0 = new Long((-1L));
      Warnings warnings1 = warnings0.row(long0);
      warnings1.addInfoItem("PUN+@0[h+S{/d");
      XmlTest xmlTest0 = new XmlTest();
      XmlSuite xmlSuite0 = mock(XmlSuite.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(xmlSuite0).getIncludedGroups();
      xmlTest0.setSuite(xmlSuite0);
      // Undeclared exception!
      try { 
        xmlTest0.getIncludedGroups();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Warnings warnings0 = new Warnings();
      Long long0 = warnings0.getRow();
      assertNull(long0);
  }
}
