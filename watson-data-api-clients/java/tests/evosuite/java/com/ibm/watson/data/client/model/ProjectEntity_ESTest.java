/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:03:05 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.ProjectCompute;
import com.ibm.watson.data.client.model.ProjectDefinedCrowd;
import com.ibm.watson.data.client.model.ProjectEntity;
import com.ibm.watson.data.client.model.ProjectFigureEight;
import com.ibm.watson.data.client.model.ProjectGithub;
import com.ibm.watson.data.client.model.ProjectMember;
import com.ibm.watson.data.client.model.ProjectSettings;
import com.ibm.watson.data.client.model.ProjectStorage;
import com.ibm.watson.data.client.model.enums.ProjectToolType;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProjectEntity_ESTest extends ProjectEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      LinkedList<ProjectMember> linkedList0 = new LinkedList<ProjectMember>();
      projectEntity0.members(linkedList0);
      List<ProjectMember> list0 = projectEntity0.getMembers();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectMember projectMember0 = new ProjectMember();
      projectEntity0.addMembersItem(projectMember0);
      List<ProjectMember> list0 = projectEntity0.getMembers();
      assertTrue(list0.contains(projectMember0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      projectEntity0.creatorIamId("Failed to submit a listener notification task. Event loop shut down?");
      String string0 = projectEntity0.getCreatorIamId();
      assertEquals("Failed to submit a listener notification task. Event loop shut down?", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      projectEntity0.creatorIamId("");
      String string0 = projectEntity0.getCreatorIamId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectEntity projectEntity1 = projectEntity0.creator("bcfbWu3QAP");
      String string0 = projectEntity1.getCreator();
      assertEquals("bcfbWu3QAP", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      projectEntity0.setCreator("");
      String string0 = projectEntity0.getCreator();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      ProjectCompute projectCompute0 = new ProjectCompute();
      linkedList0.offer(projectCompute0);
      projectEntity0.compute(linkedList0);
      List<ProjectCompute> list0 = projectEntity0.getCompute();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectEntity projectEntity1 = new ProjectEntity();
      assertTrue(projectEntity1.equals((Object)projectEntity0));
      
      ProjectSettings projectSettings0 = new ProjectSettings();
      projectEntity0.settings(projectSettings0);
      boolean boolean0 = projectEntity1.equals(projectEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectEntity projectEntity1 = new ProjectEntity();
      boolean boolean0 = projectEntity1.equals(projectEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectEntity projectEntity1 = new ProjectEntity();
      assertTrue(projectEntity1.equals((Object)projectEntity0));
      
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      projectEntity0.setFigureEight(projectFigureEight0);
      boolean boolean0 = projectEntity1.equals(projectEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectEntity projectEntity1 = new ProjectEntity();
      assertTrue(projectEntity1.equals((Object)projectEntity0));
      
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      ProjectEntity projectEntity2 = projectEntity1.definedCrowd(projectDefinedCrowd0);
      boolean boolean0 = projectEntity0.equals(projectEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectEntity projectEntity1 = new ProjectEntity();
      assertTrue(projectEntity1.equals((Object)projectEntity0));
      
      projectEntity0.creatorIamId("class ProjectGithub {\n    repository: null\n}");
      boolean boolean0 = projectEntity0.equals(projectEntity1);
      assertFalse(projectEntity1.equals((Object)projectEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectEntity projectEntity1 = new ProjectEntity();
      assertTrue(projectEntity1.equals((Object)projectEntity0));
      
      projectEntity1.creator("Z~wGujr$/8H8");
      boolean boolean0 = projectEntity1.equals(projectEntity0);
      assertFalse(projectEntity1.equals((Object)projectEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectEntity projectEntity1 = new ProjectEntity();
      assertTrue(projectEntity1.equals((Object)projectEntity0));
      
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      projectEntity0.setCompute(linkedList0);
      boolean boolean0 = projectEntity0.equals(projectEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectEntity projectEntity1 = new ProjectEntity();
      ProjectToolType projectToolType0 = ProjectToolType.EXPERIMENTS;
      projectEntity0.addToolsItem(projectToolType0);
      boolean boolean0 = projectEntity1.equals(projectEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      boolean boolean0 = projectEntity0.equals(projectDefinedCrowd0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      boolean boolean0 = projectEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      boolean boolean0 = projectEntity0.equals(projectEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectMember projectMember0 = new ProjectMember();
      ProjectEntity projectEntity1 = projectEntity0.addMembersItem(projectMember0);
      ProjectEntity projectEntity2 = new ProjectEntity();
      boolean boolean0 = projectEntity2.equals(projectEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectMember projectMember0 = new ProjectMember();
      ProjectEntity projectEntity1 = projectEntity0.addMembersItem(projectMember0);
      ProjectEntity projectEntity2 = projectEntity0.addMembersItem(projectMember0);
      assertSame(projectEntity2, projectEntity1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectGithub projectGithub0 = new ProjectGithub();
      projectEntity0.setGithub(projectGithub0);
      ProjectGithub projectGithub1 = projectEntity0.getGithub();
      assertSame(projectGithub1, projectGithub0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      String string0 = projectEntity0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectSettings projectSettings0 = new ProjectSettings();
      ProjectEntity projectEntity1 = projectEntity0.settings(projectSettings0);
      ProjectSettings projectSettings1 = projectEntity1.getSettings();
      assertSame(projectSettings1, projectSettings0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectGithub projectGithub0 = projectEntity0.getGithub();
      assertNull(projectGithub0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      List<ProjectCompute> list0 = projectEntity0.getCompute();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      ProjectEntity projectEntity1 = projectEntity0.figureEight(projectFigureEight0);
      ProjectFigureEight projectFigureEight1 = projectEntity1.getFigureEight();
      assertSame(projectFigureEight1, projectFigureEight0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectSettings projectSettings0 = new ProjectSettings();
      projectEntity0.setSettings(projectSettings0);
      assertNull(projectEntity0.getCreatorIamId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectStorage projectStorage0 = new ProjectStorage();
      projectEntity0.setStorage(projectStorage0);
      ProjectEntity projectEntity1 = new ProjectEntity();
      boolean boolean0 = projectEntity1.equals(projectEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      projectEntity0.setDefinedCrowd(projectDefinedCrowd0);
      assertNull(projectEntity0.getDescription());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectStorage projectStorage0 = new ProjectStorage();
      projectEntity0.storage(projectStorage0);
      ProjectStorage projectStorage1 = projectEntity0.getStorage();
      assertNull(projectStorage1.getType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectFigureEight projectFigureEight0 = projectEntity0.getFigureEight();
      assertNull(projectFigureEight0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      projectEntity0.definedCrowd(projectDefinedCrowd0);
      ProjectDefinedCrowd projectDefinedCrowd1 = projectEntity0.getDefinedCrowd();
      assertNull(projectDefinedCrowd1.getAccessKeyId());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      String string0 = projectEntity0.getCreator();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      projectEntity0.setCompute(linkedList0);
      List<ProjectCompute> list0 = projectEntity0.getCompute();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      projectEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      projectEntity0.setCreatorIamId("class ProjectEntity {\n    tags: null\n    description: null\n    name: null\n    _public: java.lang.Boolean@0000000003\n    tools: null\n    compute: null\n    creator: java.lang.String@0000000006\n    creatorIamId: null\n    definedCrowd: com.ibm.watson.data.client.model.ProjectDefinedCrowd@0000000002\n    figureEight: null\n    github: null\n    members: null\n    settings: null\n    storage: null\n}");
      assertNull(projectEntity0.getCreator());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectGithub projectGithub0 = new ProjectGithub();
      projectEntity0.github(projectGithub0);
      ProjectEntity projectEntity1 = new ProjectEntity();
      boolean boolean0 = projectEntity1.equals(projectEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectStorage projectStorage0 = projectEntity0.getStorage();
      assertNull(projectStorage0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      projectEntity0.setMembers((List<ProjectMember>) null);
      assertNull(projectEntity0.getDescription());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      List<ProjectMember> list0 = projectEntity0.getMembers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectSettings projectSettings0 = projectEntity0.getSettings();
      assertNull(projectSettings0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      String string0 = projectEntity0.getCreatorIamId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ProjectEntity projectEntity0 = new ProjectEntity();
      ProjectDefinedCrowd projectDefinedCrowd0 = projectEntity0.getDefinedCrowd();
      assertNull(projectDefinedCrowd0);
  }
}
