/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 01:23:21 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.AssetCreateResponse;
import com.ibm.watson.data.client.model.Attachment;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AssetCreateResponse_ESTest extends AssetCreateResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AssetCreateResponse assetCreateResponse0 = new AssetCreateResponse();
      assetCreateResponse0.setAssetId("java.lang.Object@0000000002");
      String string0 = assetCreateResponse0.getAssetId();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AssetCreateResponse assetCreateResponse0 = new AssetCreateResponse();
      AssetCreateResponse assetCreateResponse1 = assetCreateResponse0.assetId("");
      String string0 = assetCreateResponse1.getAssetId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AssetCreateResponse assetCreateResponse0 = new AssetCreateResponse();
      LinkedList<Attachment> linkedList0 = new LinkedList<Attachment>();
      assetCreateResponse0.attachments(linkedList0);
      AssetCreateResponse assetCreateResponse1 = new AssetCreateResponse();
      boolean boolean0 = assetCreateResponse0.equals(assetCreateResponse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AssetCreateResponse assetCreateResponse0 = new AssetCreateResponse();
      AssetCreateResponse assetCreateResponse1 = new AssetCreateResponse();
      boolean boolean0 = assetCreateResponse0.equals(assetCreateResponse1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AssetCreateResponse assetCreateResponse0 = new AssetCreateResponse();
      boolean boolean0 = assetCreateResponse0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AssetCreateResponse assetCreateResponse0 = new AssetCreateResponse();
      boolean boolean0 = assetCreateResponse0.equals(assetCreateResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AssetCreateResponse assetCreateResponse0 = new AssetCreateResponse();
      Object object0 = new Object();
      boolean boolean0 = assetCreateResponse0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AssetCreateResponse assetCreateResponse0 = new AssetCreateResponse();
      String string0 = assetCreateResponse0.toString();
      assertEquals("class MetadataEntityResult {\n    metadata: null\n    attachments: null\n    href: null\n    entity: null\n    assetId: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AssetCreateResponse assetCreateResponse0 = new AssetCreateResponse();
      String string0 = assetCreateResponse0.getAssetId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AssetCreateResponse assetCreateResponse0 = new AssetCreateResponse();
      assetCreateResponse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AssetCreateResponse assetCreateResponse0 = new AssetCreateResponse();
      assetCreateResponse0.setAssetId("java.lang.Object@0000000002");
      AssetCreateResponse assetCreateResponse1 = new AssetCreateResponse();
      boolean boolean0 = assetCreateResponse0.equals(assetCreateResponse1);
      assertFalse(boolean0);
  }
}
