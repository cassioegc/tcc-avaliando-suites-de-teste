/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:32:40 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.Project;
import com.ibm.watson.data.client.model.Projects;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Projects_ESTest extends Projects_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Projects projects0 = new Projects();
      Integer integer0 = new Integer(0);
      Projects projects1 = projects0.totalResults(integer0);
      Integer integer1 = projects1.getTotalResults();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Projects projects0 = new Projects();
      Integer integer0 = new Integer((-1096));
      projects0.totalResults(integer0);
      Integer integer1 = projects0.getTotalResults();
      assertEquals((-1096), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Projects projects0 = new Projects();
      ArrayList<Project> arrayList0 = new ArrayList<Project>();
      Projects projects1 = projects0.resources(arrayList0);
      List<Project> list0 = projects1.getResources();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Projects projects0 = new Projects();
      Project project0 = new Project();
      Projects projects1 = projects0.addResourcesItem(project0);
      List<Project> list0 = projects1.getResources();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Projects projects0 = new Projects();
      Project project0 = new Project();
      Projects projects1 = projects0.addResourcesItem(project0);
      String string0 = projects1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Projects projects0 = new Projects();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Projects projects1 = new Projects();
      assertTrue(projects1.equals((Object)projects0));
      
      Projects projects2 = projects0.totalResults(integer0);
      boolean boolean0 = projects2.equals(projects1);
      assertFalse(projects1.equals((Object)projects0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Projects projects0 = new Projects();
      Projects projects1 = new Projects();
      boolean boolean0 = projects0.equals(projects1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Projects projects0 = new Projects();
      boolean boolean0 = projects0.equals("class Projects {\n    resources: null\n    totalResults: null\n}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Projects projects0 = new Projects();
      boolean boolean0 = projects0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Projects projects0 = new Projects();
      boolean boolean0 = projects0.equals(projects0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Projects projects0 = new Projects();
      Project project0 = new Project();
      projects0.addResourcesItem(project0);
      Projects projects1 = new Projects();
      boolean boolean0 = projects1.equals(projects0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Projects projects0 = new Projects();
      Project project0 = new Project();
      projects0.addResourcesItem(project0);
      Projects projects1 = projects0.addResourcesItem(project0);
      assertSame(projects0, projects1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Projects projects0 = new Projects();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      projects0.setTotalResults(integer0);
      assertEquals(5, (int)projects0.getTotalResults());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Projects projects0 = new Projects();
      projects0.setResources((List<Project>) null);
      assertNull(projects0.getTotalResults());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Projects projects0 = new Projects();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Projects projects1 = projects0.totalResults(integer0);
      Integer integer1 = projects1.getTotalResults();
      assertEquals(5, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Projects projects0 = new Projects();
      projects0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Projects projects0 = new Projects();
      Integer integer0 = projects0.getTotalResults();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Projects projects0 = new Projects();
      List<Project> list0 = projects0.getResources();
      assertNull(list0);
  }
}
