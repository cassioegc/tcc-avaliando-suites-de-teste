/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 02:54:58 GMT 2021
 */

package com.ibm.watson.data.client.model.enums;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.enums.ConnectionFlag;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConnectionFlag_ESTest extends ConnectionFlag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConnectionFlag connectionFlag0 = ConnectionFlag.fromValue("restricted");
      assertEquals(ConnectionFlag.RESTRICTED, connectionFlag0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConnectionFlag[] connectionFlagArray0 = ConnectionFlag.values();
      assertEquals(3, connectionFlagArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConnectionFlag connectionFlag0 = ConnectionFlag.valueOf("RESTRICTED");
      assertEquals("restricted", connectionFlag0.getValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ConnectionFlag connectionFlag0 = ConnectionFlag.fromValue("internal_use_only");
      assertEquals(ConnectionFlag.INTERNAL_USE_ONLY, connectionFlag0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConnectionFlag.fromValue("PERSONAL_CREDENTIALS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value 'PERSONAL_CREDENTIALS'
         //
         verifyException("com.ibm.watson.data.client.model.enums.ConnectionFlag", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConnectionFlag connectionFlag0 = ConnectionFlag.INTERNAL_USE_ONLY;
      String string0 = connectionFlag0.toString();
      assertEquals("internal_use_only", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ConnectionFlag connectionFlag0 = ConnectionFlag.INTERNAL_USE_ONLY;
      String string0 = connectionFlag0.getValue();
      assertEquals("internal_use_only", string0);
  }
}
