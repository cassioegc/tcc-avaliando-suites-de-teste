/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 02:28:36 GMT 2021
 */

package com.ibm.watson.data.client.model.enums;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.enums.PermissionMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PermissionMode_ESTest extends PermissionMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PermissionMode[] permissionModeArray0 = PermissionMode.values();
      assertEquals(3, permissionModeArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PermissionMode permissionMode0 = PermissionMode.valueOf("PRIVATE");
      assertEquals(PermissionMode.PRIVATE, permissionMode0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PermissionMode permissionMode0 = PermissionMode.fromValue(integer0);
      Integer integer1 = permissionMode0.getValue();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-66));
      // Undeclared exception!
      try { 
        PermissionMode.fromValue(integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value '-66'
         //
         verifyException("com.ibm.watson.data.client.model.enums.PermissionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PermissionMode permissionMode0 = PermissionMode.PRIVATE;
      Integer integer0 = permissionMode0.getValue();
      PermissionMode permissionMode1 = PermissionMode.fromValue(integer0);
      assertEquals(PermissionMode.PRIVATE, permissionMode1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PermissionMode permissionMode0 = PermissionMode.PRIVATE;
      String string0 = permissionMode0.toString();
      assertEquals("8", string0);
  }
}
