/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 15:43:36 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.AccessServiceConfig;
import com.ibm.watson.data.client.model.Classification;
import com.ibm.watson.data.client.model.Connection;
import com.ibm.watson.data.client.model.ConnectorType;
import com.ibm.watson.data.client.model.Endpoint;
import com.ibm.watson.data.client.model.Meaning;
import com.ibm.watson.data.client.model.enums.AccessServiceStatus;
import io.netty.channel.epoll.EpollServerDomainSocketChannel;
import io.netty.handler.logging.LoggingHandler;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AccessServiceConfig_ESTest extends AccessServiceConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      Classification classification0 = new Classification();
      classification0.getClassificationProperties();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceOptions((Map<String, Object>) null);
      accessServiceConfig1.setAccessServiceDescription("    accessServiceDescription: ");
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceWiki("Xn2z");
      Object object0 = new Object();
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.putAccessServiceOptionsItem("", object0);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Integer integer1 = Integer.getInteger("", integer0);
      Integer.remainderUnsigned((-5457), (-5457));
      accessServiceConfig3.setAccessServiceWiki((String) null);
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceId(integer1);
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceInTopic((Connection) null);
      accessServiceConfig5.setAccessServiceName("");
      accessServiceConfig0.accessServiceWiki("");
      Integer integer2 = XmlSuite.DEFAULT_VERBOSE;
      accessServiceConfig1.setAccessServiceId(integer2);
      accessServiceConfig4.getAccessServiceWiki();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceOptions(hashMap0);
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceDescription("lQ5ar:5");
      AccessServiceStatus accessServiceStatus0 = AccessServiceStatus.ENABLED;
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceOperationalStatus(accessServiceStatus0);
      accessServiceConfig3.getAccessServiceOptions();
      Connection connection0 = new Connection();
      Connection connection1 = connection0.putSecuredPropertiesItem("au:.&", hashMap0);
      Connection connection2 = connection1.clearPassword((String) null);
      Endpoint endpoint0 = new Endpoint();
      Endpoint endpoint1 = endpoint0.address((String) null);
      Connection connection3 = connection2.endpoint(endpoint1);
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.connectorProviderClassName("au:.&");
      ConnectorType connectorType2 = connectorType1.addRecognizedConfigurationPropertiesItem("Accept-Language");
      Connection connection4 = connection3.connectorType(connectorType2);
      accessServiceConfig2.setAccessServiceOutTopic(connection4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      Connection connection0 = new Connection();
      ConnectorType connectorType0 = new ConnectorType();
      Connection connection1 = connection0.connectorType(connectorType0);
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceOutTopic(connection1);
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.putAccessServiceOptionsItem("", connection1);
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceURLMarker("UpHo\"E:~`mZ4st2[)");
      Integer integer0 = new Integer(0);
      Integer.compareUnsigned(0, 0);
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig0.accessServiceId(integer0);
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig3.putAccessServiceOptionsItem("UpHo\"E:~`mZ4st2[)", accessServiceConfig1);
      accessServiceConfig5.accessServiceURLMarker("f?,p)6~");
      accessServiceConfig3.getAccessServiceId();
      accessServiceConfig0.getAccessServiceInTopic();
      accessServiceConfig2.accessServiceInTopic(connection0);
      accessServiceConfig4.accessServiceName("LtsFk4^SSH>,");
      AccessServiceConfig accessServiceConfig6 = accessServiceConfig0.accessServiceAdminClass("");
      assertNull(accessServiceConfig6.getAccessServiceDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      Connection connection0 = new Connection();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceOutTopic(connection0);
      AccessServiceStatus accessServiceStatus0 = AccessServiceStatus.ENABLED;
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceOperationalStatus(accessServiceStatus0);
      Object object0 = new Object();
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.putAccessServiceOptionsItem("", object0);
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceName("");
      accessServiceConfig3.setAccessServiceDescription("");
      Map<String, Object> map0 = accessServiceConfig0.getAccessServiceOptions();
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceOptions(map0);
      accessServiceConfig5.accessServiceAdminClass("");
      AccessServiceConfig accessServiceConfig6 = accessServiceConfig4.accessServiceURLMarker("");
      AccessServiceConfig accessServiceConfig7 = accessServiceConfig5.accessServiceURLMarker((String) null);
      accessServiceConfig5.getAccessServiceName();
      accessServiceConfig1.setAccessServiceURLMarker("");
      accessServiceConfig4.getAccessServiceURLMarker();
      accessServiceConfig3.setAccessServiceURLMarker("");
      accessServiceConfig7.setAccessServiceInTopic(connection0);
      accessServiceConfig6.accessServiceURLMarker("");
      accessServiceConfig4.accessServiceAdminClass("");
      AccessServiceStatus accessServiceStatus1 = AccessServiceStatus.DISABLED;
      accessServiceConfig7.accessServiceOperationalStatus(accessServiceStatus1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceInTopic((Connection) null);
      Classification classification0 = new Classification();
      classification0.getClassificationProperties();
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceOptions((Map<String, Object>) null);
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceWiki("fatal should appear");
      Integer integer0 = new Integer((-11));
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceId(integer0);
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceInTopic((Connection) null);
      AccessServiceConfig accessServiceConfig6 = accessServiceConfig3.accessServiceURLMarker("fatal should appear");
      AccessServiceConfig accessServiceConfig7 = accessServiceConfig6.accessServiceDescription("fatal should appear");
      accessServiceConfig7.setAccessServiceURLMarker("fatal should appear");
      accessServiceConfig2.accessServiceDescription("fatal should appear");
      accessServiceConfig6.getAccessServiceInTopic();
      accessServiceConfig5.accessServiceURLMarker("    accessServiceURLMarker: ");
      accessServiceConfig1.getAccessServiceId();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceWiki("2PBS=jDi~BP");
      accessServiceConfig0.setAccessServiceAdminClass("2PBS=jDi~BP");
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceDescription("boundedElastic-evictor-");
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceAdminClass((String) null);
      accessServiceConfig3.getAccessServiceDescription();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      Connection connection0 = new Connection();
      connection0.getExtendedProperties();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceOptions((Map<String, Object>) null);
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceOutTopic(connection0);
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceDescription("");
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceInTopic(connection0);
      accessServiceConfig2.toString();
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceName("");
      accessServiceConfig5.getAccessServiceDescription();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceURLMarker("fkD4@J<^B)X]Y?a.iD)");
      Integer integer0 = new Integer((-450));
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceId(integer0);
      Meaning meaning0 = new Meaning();
      meaning0.getExtendedProperties();
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceOptions((Map<String, Object>) null);
      assertSame(accessServiceConfig0, accessServiceConfig3);
      
      Connection connection0 = new Connection();
      Connection connection1 = connection0.securedProperties((Map<String, Object>) null);
      Connection connection2 = connection1.configurationProperties((Map<String, Object>) null);
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceInTopic(connection2);
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceName("fkD4@J<^B)X]Y?a.iD)");
      accessServiceConfig5.getAccessServiceURLMarker();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceStatus accessServiceStatus0 = AccessServiceStatus.ENABLED;
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceOperationalStatus(accessServiceStatus0);
      Connection connection0 = new Connection();
      Connection connection1 = connection0.clearPassword("km;yU\"ic3");
      Classification classification0 = new Classification();
      classification0.getClassificationProperties();
      Connection connection2 = connection1.securedProperties((Map<String, Object>) null);
      Connection connection3 = connection2.userId("null");
      Object object0 = new Object();
      Connection connection4 = connection3.putConfigurationPropertiesItem("Map Signal needs at least one valid mapper", object0);
      accessServiceConfig0.setAccessServiceOutTopic(connection4);
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceName("km;yU\"ic3");
      AccessServiceStatus accessServiceStatus1 = AccessServiceStatus.DISABLED;
      accessServiceConfig0.accessServiceOperationalStatus(accessServiceStatus1);
      accessServiceConfig2.getAccessServiceName();
      accessServiceConfig1.toString();
      accessServiceConfig1.setAccessServiceURLMarker("Discarded inbound message {} that reached at the tail of the pipeline. Please check your pipeline configuration.");
      AccessServiceStatus accessServiceStatus2 = AccessServiceStatus.NOT_IMPLEMENTED;
      accessServiceConfig0.accessServiceOperationalStatus(accessServiceStatus2);
      accessServiceConfig0.setAccessServiceOperationalStatus(accessServiceStatus0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceName("hnvJB<");
      AccessServiceStatus accessServiceStatus0 = AccessServiceStatus.NOT_IMPLEMENTED;
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceOperationalStatus(accessServiceStatus0);
      Object object0 = new Object();
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.putAccessServiceOptionsItem((String) null, object0);
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceId(integer0);
      accessServiceConfig4.getAccessServiceInTopic();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      accessServiceConfig0.getAccessServiceOptions();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceOptions((Map<String, Object>) null);
      AccessServiceStatus accessServiceStatus0 = AccessServiceStatus.DISABLED;
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceOperationalStatus(accessServiceStatus0);
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceAdminClass("");
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceId(integer0);
      Integer.compare((-1840), (-1840));
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceURLMarker("");
      accessServiceConfig5.getAccessServiceOutTopic();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      accessServiceConfig0.getAccessServiceWiki();
      Classification classification0 = new Classification();
      classification0.getClassificationProperties();
      Connection connection0 = new Connection();
      Connection connection1 = connection0.putConfigurationPropertiesItem("dM~", "dM~");
      connection1.securedProperties((Map<String, Object>) null);
      accessServiceConfig0.getAccessServiceOperationalStatus();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceOptions(hashMap0);
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.putAccessServiceOptionsItem((String) null, (Object) null);
      accessServiceConfig2.accessServiceAdminClass((String) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceId(integer0);
      accessServiceConfig0.getAccessServiceId();
      accessServiceConfig0.setAccessServiceDescription("&d&*m");
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceURLMarker("&d&*m");
      accessServiceConfig2.getAccessServiceOptions();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceAdminClass("$");
      AccessServiceStatus accessServiceStatus0 = AccessServiceStatus.NOT_IMPLEMENTED;
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceOperationalStatus(accessServiceStatus0);
      accessServiceConfig2.hashCode();
      accessServiceConfig2.getAccessServiceAdminClass();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceAdminClass("    accessServiceOptions: ");
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.putAccessServiceOptionsItem("    accessServiceOptions: ", "    accessServiceOptions: ");
      Map<String, Object> map0 = accessServiceConfig1.getAccessServiceOptions();
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceOptions(map0);
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceDescription("    accessServiceOptions: ");
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceWiki("    accessServiceOptions: ");
      accessServiceConfig5.accessServiceOptions(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      String string0 = "1gd^:\\ wCLD_I";
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceName("1gd^: wCLD_I");
      Connection connection0 = new Connection();
      accessServiceConfig0.accessServiceDescription("1gd^: wCLD_I");
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceInTopic(connection0);
      Map<String, Object> map0 = null;
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig0.accessServiceOptions((Map<String, Object>) null);
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig2.putAccessServiceOptionsItem("|Kv/O}kLotSe@\"~", accessServiceConfig3);
      String string1 = "";
      accessServiceConfig4.accessServiceDescription("");
      accessServiceConfig4.accessServiceInTopic(connection0);
      // Undeclared exception!
      try { 
        accessServiceConfig2.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      accessServiceConfig0.setAccessServiceWiki("ALux6)9,R01A!mg");
      Integer integer0 = accessServiceConfig0.getAccessServiceId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      Connection connection0 = new Connection();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceOutTopic(connection0);
      accessServiceConfig0.getAccessServiceOptions();
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceOptions((Map<String, Object>) null);
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceURLMarker("class AccessServiceConfig {\n");
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceInTopic(connection0);
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceWiki("class AccessServiceConfig {\n");
      accessServiceConfig5.setAccessServiceInTopic(connection0);
      assertNull(accessServiceConfig5.getAccessServiceName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceWiki("");
      Connection connection0 = new Connection();
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceOutTopic(connection0);
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceId(integer0);
      connection0.getConfigurationProperties();
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceOptions((Map<String, Object>) null);
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceDescription("");
      String string0 = accessServiceConfig5.getAccessServiceAdminClass();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceName("");
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceDescription("\")");
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceURLMarker("\")");
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceAdminClass("\")");
      Classification classification0 = new Classification();
      Connection connection0 = new Connection();
      connection0.getConfigurationProperties();
      Classification classification1 = classification0.classificationProperties((Map<String, Object>) null);
      classification1.getClassificationProperties();
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceOptions((Map<String, Object>) null);
      accessServiceConfig5.setAccessServiceInTopic(connection0);
      assertNull(connection0.getUrl());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      Connection connection0 = new Connection();
      Connection connection1 = connection0.userId("*Jj=4(");
      Connection connection2 = connection1.putConfigurationPropertiesItem("*Jj=4(", accessServiceConfig0);
      connection0.displayName("");
      Connection connection3 = connection2.clearPassword("*Jj=4(");
      connection0.getSecuredProperties();
      accessServiceConfig0.getAccessServiceOptions();
      connection3.setExtendedProperties((Map<String, Object>) null);
      Connection connection4 = connection3.configurationProperties((Map<String, Object>) null);
      Endpoint endpoint0 = new Endpoint();
      connection2.getMeanings();
      connection3.setMeanings((List<Meaning>) null);
      connection4.setEndpoint(endpoint0);
      accessServiceConfig0.setAccessServiceOutTopic(connection4);
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceWiki("null");
      accessServiceConfig1.setAccessServiceAdminClass("null");
      accessServiceConfig0.hashCode();
      accessServiceConfig0.setAccessServiceInTopic((Connection) null);
      accessServiceConfig0.getAccessServiceDescription();
      accessServiceConfig0.setAccessServiceOutTopic(connection3);
      accessServiceConfig0.accessServiceURLMarker("null");
      AccessServiceStatus accessServiceStatus0 = AccessServiceStatus.ENABLED;
      accessServiceConfig1.setAccessServiceOperationalStatus(accessServiceStatus0);
      accessServiceConfig1.getAccessServiceWiki();
      Object object0 = new Object();
      accessServiceConfig1.equals(object0);
      Connection connection5 = accessServiceConfig1.getAccessServiceOutTopic();
      assertEquals("*Jj=4(", connection5.getClearPassword());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceURLMarker("");
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceDescription("");
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceWiki("");
      Object object0 = new Object();
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.putAccessServiceOptionsItem("", object0);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceId(integer0);
      Connection connection0 = new Connection();
      ConnectorType connectorType0 = new ConnectorType();
      Connection connection1 = connection0.connectorType(connectorType0);
      Connection connection2 = connection1.putConfigurationPropertiesItem("h#9'J.}CL!${v8zi|", object0);
      Endpoint endpoint0 = new Endpoint();
      Endpoint endpoint1 = endpoint0.protocol("");
      Connection connection3 = connection2.endpoint(endpoint1);
      Map<String, Object> map0 = connection3.getConfigurationProperties();
      accessServiceConfig5.setAccessServiceOptions(map0);
      assertSame(accessServiceConfig1, accessServiceConfig5);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceDescription("&A!0(Me?!Y3.|<Fhm");
      Connection connection0 = new Connection();
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceOutTopic(connection0);
      AccessServiceStatus accessServiceStatus0 = AccessServiceStatus.NOT_IMPLEMENTED;
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceOperationalStatus(accessServiceStatus0);
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceURLMarker("&A!0(Me?!Y3.|<Fhm");
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.accessServiceOptions((Map<String, Object>) null);
      accessServiceConfig5.getAccessServiceOperationalStatus();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      accessServiceConfig2.accessServiceId(integer0);
      boolean boolean0 = accessServiceConfig1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      Meaning meaning0 = new Meaning();
      meaning0.getExtendedProperties();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceOptions((Map<String, Object>) null);
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceWiki("CrNX8$G8>3}}XB!'");
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceAdminClass("Gb");
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceDescription("CrNX8$G8>3}}XB!'");
      accessServiceConfig3.hashCode();
      Class<Integer> class0 = Integer.class;
      LoggingHandler loggingHandler0 = new LoggingHandler(class0);
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig4.putAccessServiceOptionsItem("/CV", loggingHandler0);
      Connection connection0 = new Connection();
      Connection connection1 = connection0.configurationProperties((Map<String, Object>) null);
      Connection connection2 = connection1.securedProperties((Map<String, Object>) null);
      accessServiceConfig3.accessServiceOptions((Map<String, Object>) null);
      Connection connection3 = connection2.putSecuredPropertiesItem("CrNX8$G8>3}}XB!'", "Gb");
      accessServiceConfig5.toString();
      Connection connection4 = connection3.connectorType((ConnectorType) null);
      accessServiceConfig5.setAccessServiceInTopic(connection4);
      accessServiceConfig2.getAccessServiceName();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      Integer integer1 = Integer.getInteger((String) null, integer0);
      accessServiceConfig2.setAccessServiceId(integer1);
      accessServiceConfig3.equals(accessServiceConfig2);
      accessServiceConfig3.accessServiceAdminClass("");
      accessServiceConfig0.getAccessServiceAdminClass();
      accessServiceConfig2.hashCode();
      accessServiceConfig1.equals("Gb");
      AccessServiceConfig accessServiceConfig6 = accessServiceConfig2.accessServiceAdminClass("class AccessServiceConfig {\n    accessServiceId: null\n    accessServiceAdminClass: java.lang.String@0000000004\n    accessServiceName: null\n    accessServiceURLMarker: null\n    accessServiceDescription: java.lang.String@0000000003\n    accessServiceWiki: java.lang.String@0000000003\n    accessServiceOperationalStatus: null\n    accessServiceInTopic: null\n    accessServiceOutTopic: null\n    accessServiceOptions: null\n}");
      assertSame(accessServiceConfig6, accessServiceConfig2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceWiki("~*[O6vA[WJP^/g=");
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceName("~*[O6vA[WJP^/g=");
      accessServiceConfig2.setAccessServiceName("~*[O6vA[WJP^/g=");
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.putAccessServiceOptionsItem("ek,!8Yb'tyw13!AQ?", "'%");
      AccessServiceStatus accessServiceStatus0 = AccessServiceStatus.ENABLED;
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceOperationalStatus(accessServiceStatus0);
      String string0 = "VG3b*1,a{7t=-dIX";
      accessServiceConfig4.accessServiceURLMarker("VG3b*1,a{7t=-dIX");
      Connection connection0 = new Connection();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Connection connection1 = connection0.configurationProperties(hashMap0);
      connection1.encryptedPassword("'%");
      String string1 = null;
      EpollServerDomainSocketChannel epollServerDomainSocketChannel0 = null;
      try {
        epollServerDomainSocketChannel0 = new EpollServerDomainSocketChannel();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.channel.epoll.LinuxSocket
         //
         verifyException("io.netty.channel.epoll.EpollServerDomainSocketChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceAdminClass("/GYV^#KLw^*)+p~");
      String string0 = "";
      accessServiceConfig1.setAccessServiceDescription("");
      accessServiceConfig1.getAccessServiceDescription();
      accessServiceConfig1.getAccessServiceDescription();
      Connection connection0 = new Connection();
      Endpoint endpoint0 = new Endpoint();
      Endpoint endpoint1 = endpoint0.address("");
      Connection connection1 = connection0.endpoint(endpoint1);
      accessServiceConfig0.accessServiceOutTopic(connection1);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      accessServiceConfig0.accessServiceId(integer0);
      accessServiceConfig0.setAccessServiceWiki("]vS->C6)6~/! ");
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AccessServiceConfig accessServiceConfig0 = new AccessServiceConfig();
      AccessServiceConfig accessServiceConfig1 = accessServiceConfig0.accessServiceURLMarker((String) null);
      AccessServiceConfig accessServiceConfig2 = accessServiceConfig1.accessServiceWiki("");
      Connection connection0 = new Connection();
      Connection connection1 = connection0.connectorType((ConnectorType) null);
      AccessServiceConfig accessServiceConfig3 = accessServiceConfig2.accessServiceInTopic(connection1);
      AccessServiceConfig accessServiceConfig4 = accessServiceConfig3.accessServiceDescription("");
      AccessServiceConfig accessServiceConfig5 = accessServiceConfig1.accessServiceOutTopic(connection0);
      AccessServiceStatus accessServiceStatus0 = AccessServiceStatus.DISABLED;
      AccessServiceConfig accessServiceConfig6 = accessServiceConfig4.accessServiceOperationalStatus(accessServiceStatus0);
      connection1.getSecuredProperties();
      accessServiceConfig6.setAccessServiceOptions((Map<String, Object>) null);
      accessServiceConfig0.accessServiceWiki("");
      accessServiceConfig4.hashCode();
      accessServiceConfig6.getAccessServiceURLMarker();
      String string0 = accessServiceConfig0.toString();
      accessServiceConfig2.setAccessServiceURLMarker("class AccessServiceConfig {\n    accessServiceId: null\n    accessServiceAdminClass: null\n    accessServiceName: null\n    accessServiceURLMarker: null\n    accessServiceDescription: java.lang.String@0000000002\n    accessServiceWiki: java.lang.String@0000000002\n    accessServiceOperationalStatus: com.ibm.watson.data.client.model.enums.AccessServiceStatus@0000000004\n    accessServiceInTopic: com.ibm.watson.data.client.model.Connection@0000000003\n    accessServiceOutTopic: com.ibm.watson.data.client.model.Connection@0000000003\n    accessServiceOptions: null\n}");
      accessServiceConfig6.getAccessServiceInTopic();
      AccessServiceConfig accessServiceConfig7 = accessServiceConfig2.accessServiceAdminClass("]+~8LN;,OZHp\"AOsK");
      accessServiceConfig7.setAccessServiceOutTopic(connection1);
      accessServiceConfig1.accessServiceOutTopic(connection0);
      accessServiceConfig5.putAccessServiceOptionsItem("", (Object) null);
      String string1 = accessServiceConfig6.toString();
      assertFalse(string1.equals((Object)string0));
  }
}
