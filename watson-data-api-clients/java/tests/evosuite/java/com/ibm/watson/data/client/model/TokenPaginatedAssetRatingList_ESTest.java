/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:07:03 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.AssetRating;
import com.ibm.watson.data.client.model.AssetRatingEntity;
import com.ibm.watson.data.client.model.AssetRatingMetadata;
import com.ibm.watson.data.client.model.Link;
import com.ibm.watson.data.client.model.TokenPaginatedAssetRatingList;
import io.netty.channel.epoll.EpollDatagramChannel;
import java.net.URI;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLTransientConnectionException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;
import org.springframework.http.server.reactive.ContextPathCompositeHandler;
import org.springframework.http.server.reactive.HttpHandler;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenPaginatedAssetRatingList_ESTest extends TokenPaginatedAssetRatingList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Link link0 = new Link();
      link0.title("");
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = new TokenPaginatedAssetRatingList();
      assertTrue(tokenPaginatedAssetRatingList1.equals((Object)tokenPaginatedAssetRatingList0));
      
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.next(link0);
      tokenPaginatedAssetRatingList0.first(link0);
      Stack<AssetRating> stack0 = new Stack<AssetRating>();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.resources(stack0);
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      tokenPaginatedAssetRatingList1.setResources(stack0);
      Integer integer1 = new Integer(923);
      tokenPaginatedAssetRatingList3.setLimit(integer1);
      tokenPaginatedAssetRatingList0.setResources(stack0);
      tokenPaginatedAssetRatingList3.setResources(stack0);
      Long long0 = new Long(923);
      tokenPaginatedAssetRatingList1.setCount(long0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList4 = tokenPaginatedAssetRatingList3.limit(integer0);
      tokenPaginatedAssetRatingList4.equals(tokenPaginatedAssetRatingList0);
      tokenPaginatedAssetRatingList0.setNext(link0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList5 = tokenPaginatedAssetRatingList0.addResourcesItem((AssetRating) null);
      tokenPaginatedAssetRatingList5.setLimit(integer1);
      tokenPaginatedAssetRatingList0.getFirst();
      tokenPaginatedAssetRatingList0.getFirst();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList6 = tokenPaginatedAssetRatingList1.first(link0);
      tokenPaginatedAssetRatingList6.hashCode();
      tokenPaginatedAssetRatingList2.getCount();
      assertFalse(tokenPaginatedAssetRatingList1.equals((Object)tokenPaginatedAssetRatingList0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      int int0 = (-226);
      Integer integer0 = Integer.valueOf((-226));
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = new TokenPaginatedAssetRatingList();
      Link link0 = new Link();
      tokenPaginatedAssetRatingList0.equals(link0);
      Link link1 = link0.putParamsItem("/%kz,S0z..9Mi?", "reactor.core.publisher.FluxExpand$ExpandBreathSubscriber");
      Link link2 = link1.rels((List<String>) null);
      tokenPaginatedAssetRatingList1.next(link2);
      long long0 = 0L;
      Long long1 = new Long(0L);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.limit(integer0);
      link1.setUriBuilder(link0);
      tokenPaginatedAssetRatingList2.setCount(long1);
      tokenPaginatedAssetRatingList2.equals(tokenPaginatedAssetRatingList0);
      tokenPaginatedAssetRatingList0.hashCode();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = new TokenPaginatedAssetRatingList();
      AssetRating assetRating0 = new AssetRating();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.addResourcesItem(assetRating0);
      boolean boolean0 = tokenPaginatedAssetRatingList0.equals(tokenPaginatedAssetRatingList1);
      assertFalse(boolean0);
      
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      tokenPaginatedAssetRatingList0.limit(integer0);
      assertFalse(tokenPaginatedAssetRatingList0.equals((Object)tokenPaginatedAssetRatingList2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      ArrayList<AssetRating> arrayList0 = new ArrayList<AssetRating>();
      tokenPaginatedAssetRatingList0.resources(arrayList0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = new TokenPaginatedAssetRatingList();
      boolean boolean0 = tokenPaginatedAssetRatingList0.equals(tokenPaginatedAssetRatingList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      AssetRating assetRating0 = new AssetRating();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.addResourcesItem(assetRating0);
      Integer integer0 = new Integer((-2009));
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.limit(integer0);
      Long long0 = Long.getLong("    first: ", 4294967295L);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.count(long0);
      Link link0 = new Link();
      Link link1 = link0.rel("");
      link1.rel("");
      Vector<String> vector0 = new Vector<String>();
      Link link2 = link1.rels(vector0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList4 = tokenPaginatedAssetRatingList3.first(link2);
      link0.rel("");
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList5 = tokenPaginatedAssetRatingList4.next(link2);
      link2.addRelsItem("");
      Long long1 = new Long(1L);
      tokenPaginatedAssetRatingList5.setCount(long1);
      Long long2 = new Long(0L);
      tokenPaginatedAssetRatingList4.count(long2);
      tokenPaginatedAssetRatingList0.equals(tokenPaginatedAssetRatingList3);
      ArrayList<AssetRating> arrayList0 = new ArrayList<AssetRating>();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList6 = tokenPaginatedAssetRatingList0.resources(arrayList0);
      tokenPaginatedAssetRatingList3.getLimit();
      tokenPaginatedAssetRatingList1.getResources();
      Long long3 = new Long(1954L);
      tokenPaginatedAssetRatingList3.setCount(long3);
      assertSame(tokenPaginatedAssetRatingList3, tokenPaginatedAssetRatingList6);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Link link0 = new Link();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.next(link0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.count((Long) null);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.first(link0);
      AssetRating assetRating0 = new AssetRating();
      AssetRatingMetadata assetRatingMetadata0 = new AssetRatingMetadata();
      AssetRating assetRating1 = assetRating0.metadata(assetRatingMetadata0);
      AssetRatingEntity assetRatingEntity0 = new AssetRatingEntity();
      AssetRating assetRating2 = assetRating1.entity(assetRatingEntity0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList4 = tokenPaginatedAssetRatingList3.addResourcesItem(assetRating2);
      Integer integer0 = new Integer(0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList5 = tokenPaginatedAssetRatingList4.limit(integer0);
      Integer integer1 = tokenPaginatedAssetRatingList5.getLimit();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      tokenPaginatedAssetRatingList0.toString();
      tokenPaginatedAssetRatingList0.getResources();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.resources((List<AssetRating>) null);
      Link link0 = new Link();
      Link link1 = link0.type("");
      link1.setTitle("");
      Stack<String> stack0 = new Stack<String>();
      Link link2 = link1.rels(stack0);
      Link link3 = link2.putParamsItem("sizy8#B^>;%57i8$`ns", "");
      Link link4 = link3.rel("");
      tokenPaginatedAssetRatingList1.next(link4);
      Link link5 = tokenPaginatedAssetRatingList0.getNext();
      link5.title("class TokenPaginatedAssetRatingList {\n    resources: null\n    limit: null\n    count: null\n    first: null\n    next: null\n}");
      tokenPaginatedAssetRatingList0.setFirst(link5);
      tokenPaginatedAssetRatingList1.getResources();
      link0.uriBuilder(link5);
      // Undeclared exception!
      try { 
        tokenPaginatedAssetRatingList0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.next((Link) null);
      tokenPaginatedAssetRatingList0.equals("Q3v7+b;vq?Z2'[qJ>]");
      Stack<AssetRating> stack0 = new Stack<AssetRating>();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList0.resources(stack0);
      tokenPaginatedAssetRatingList2.setNext((Link) null);
      AssetRating assetRating0 = new AssetRating();
      tokenPaginatedAssetRatingList1.equals(assetRating0);
      tokenPaginatedAssetRatingList0.getNext();
      assetRating0.toString();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      stack0.add(assetRating0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList1.limit(integer0);
      tokenPaginatedAssetRatingList0.setNext((Link) null);
      tokenPaginatedAssetRatingList2.setResources(stack0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList4 = tokenPaginatedAssetRatingList1.first((Link) null);
      Long long0 = new Long(0L);
      tokenPaginatedAssetRatingList2.count(long0);
      tokenPaginatedAssetRatingList4.getCount();
      Long long1 = new Long(10000L);
      tokenPaginatedAssetRatingList0.setCount(long1);
      tokenPaginatedAssetRatingList3.getNext();
      tokenPaginatedAssetRatingList0.addResourcesItem(assetRating0);
      tokenPaginatedAssetRatingList4.toString();
      tokenPaginatedAssetRatingList0.setLimit(integer0);
      assertSame(tokenPaginatedAssetRatingList0, tokenPaginatedAssetRatingList3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Long long0 = new Long(332L);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.count(long0);
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.limit(integer0);
      AssetRating assetRating0 = new AssetRating();
      AssetRating assetRating1 = assetRating0.entity((AssetRatingEntity) null);
      AssetRatingMetadata assetRatingMetadata0 = new AssetRatingMetadata();
      AssetRatingMetadata assetRatingMetadata1 = assetRatingMetadata0.assetRatingId("");
      AssetRating assetRating2 = assetRating1.metadata(assetRatingMetadata1);
      tokenPaginatedAssetRatingList0.addResourcesItem(assetRating2);
      tokenPaginatedAssetRatingList2.getCount();
      Stack<AssetRating> stack0 = new Stack<AssetRating>();
      tokenPaginatedAssetRatingList1.resources(stack0);
      tokenPaginatedAssetRatingList1.count(long0);
      tokenPaginatedAssetRatingList1.getResources();
      Link link0 = new Link();
      tokenPaginatedAssetRatingList2.setNext(link0);
      assertSame(tokenPaginatedAssetRatingList2, tokenPaginatedAssetRatingList1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      ArrayList<AssetRating> arrayList0 = new ArrayList<AssetRating>();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.resources(arrayList0);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.limit(integer0);
      Long long0 = new Long((-479L));
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.count(long0);
      AssetRating assetRating0 = new AssetRating();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList4 = tokenPaginatedAssetRatingList3.addResourcesItem(assetRating0);
      Link link0 = new Link();
      Link link1 = link0.putParamsItem(".9l:FyE", (String) null);
      Link link2 = link1.addRelsItem((String) null);
      Link link3 = link2.uriBuilder(assetRating0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList5 = tokenPaginatedAssetRatingList4.first(link3);
      Integer integer1 = tokenPaginatedAssetRatingList5.getLimit();
      assertEquals(5, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Link link0 = new Link();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.first(link0);
      Integer integer0 = new Integer((-856));
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.limit(integer0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.next(link0);
      AssetRating assetRating0 = new AssetRating();
      AssetRatingEntity assetRatingEntity0 = new AssetRatingEntity();
      AssetRating assetRating1 = assetRating0.entity(assetRatingEntity0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList4 = tokenPaginatedAssetRatingList3.addResourcesItem(assetRating1);
      Long long0 = new Long((-1621L));
      tokenPaginatedAssetRatingList3.setCount(long0);
      tokenPaginatedAssetRatingList4.limit(integer0);
      tokenPaginatedAssetRatingList4.toString();
      Long long1 = tokenPaginatedAssetRatingList1.getCount();
      assertEquals((-1621L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      tokenPaginatedAssetRatingList0.getResources();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.resources((List<AssetRating>) null);
      Integer integer0 = new Integer(717);
      tokenPaginatedAssetRatingList1.setLimit(integer0);
      assertSame(tokenPaginatedAssetRatingList1, tokenPaginatedAssetRatingList0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      AssetRating assetRating0 = new AssetRating();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.addResourcesItem(assetRating0);
      List<AssetRating> list0 = tokenPaginatedAssetRatingList0.getResources();
      tokenPaginatedAssetRatingList1.setResources(list0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList0.first((Link) null);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList0.next((Link) null);
      assetRating0.equals(tokenPaginatedAssetRatingList3);
      tokenPaginatedAssetRatingList0.toString();
      Integer integer0 = new Integer(245);
      tokenPaginatedAssetRatingList2.setLimit(integer0);
      Object object0 = new Object();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList4 = tokenPaginatedAssetRatingList0.addResourcesItem(assetRating0);
      tokenPaginatedAssetRatingList2.equals(object0);
      tokenPaginatedAssetRatingList0.setLimit(integer0);
      tokenPaginatedAssetRatingList2.setLimit(integer0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList5 = tokenPaginatedAssetRatingList4.next((Link) null);
      tokenPaginatedAssetRatingList2.getLimit();
      Integer integer1 = tokenPaginatedAssetRatingList5.getLimit();
      assertEquals(245, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      tokenPaginatedAssetRatingList0.setCount((Long) null);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.next((Link) null);
      AssetRating assetRating0 = new AssetRating();
      tokenPaginatedAssetRatingList1.addResourcesItem(assetRating0);
      List<AssetRating> list0 = tokenPaginatedAssetRatingList1.getResources();
      assertTrue(list0.contains(assetRating0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Link link0 = new Link();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.first(link0);
      LinkedList<AssetRating> linkedList0 = new LinkedList<AssetRating>();
      tokenPaginatedAssetRatingList0.setResources(linkedList0);
      tokenPaginatedAssetRatingList1.getLimit();
      tokenPaginatedAssetRatingList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Link link0 = new Link();
      Link link1 = link0.type("");
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.first(link1);
      tokenPaginatedAssetRatingList1.next(link0);
      ArrayList<AssetRating> arrayList0 = new ArrayList<AssetRating>();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.resources(arrayList0);
      tokenPaginatedAssetRatingList2.next(link1);
      tokenPaginatedAssetRatingList2.getResources();
      Link link2 = tokenPaginatedAssetRatingList0.getFirst();
      assertEquals("", link2.getType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      ArrayList<AssetRating> arrayList0 = new ArrayList<AssetRating>();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.resources(arrayList0);
      Link link0 = new Link();
      AssetRating assetRating0 = new AssetRating();
      Link link1 = link0.uriBuilder(assetRating0);
      Link link2 = link1.putParamsItem("", "");
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.next(link2);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.addResourcesItem(assetRating0);
      Link link3 = tokenPaginatedAssetRatingList3.getNext();
      assertSame(link3, link2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      tokenPaginatedAssetRatingList0.equals((Object) null);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.next((Link) null);
      tokenPaginatedAssetRatingList1.equals(tokenPaginatedAssetRatingList0);
      tokenPaginatedAssetRatingList1.getCount();
      tokenPaginatedAssetRatingList1.first((Link) null);
      tokenPaginatedAssetRatingList0.first((Link) null);
      EpollDatagramChannel epollDatagramChannel0 = null;
      try {
        epollDatagramChannel0 = new EpollDatagramChannel();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.channel.epoll.LinuxSocket
         //
         verifyException("io.netty.channel.epoll.EpollDatagramChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      tokenPaginatedAssetRatingList0.setLimit(integer0);
      Long long0 = tokenPaginatedAssetRatingList0.getCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.resources((List<AssetRating>) null);
      Long long0 = new Long(706L);
      Long.compareUnsigned((-8L), 706L);
      tokenPaginatedAssetRatingList0.count(long0);
      tokenPaginatedAssetRatingList0.toString();
      AssetRating assetRating0 = new AssetRating();
      AssetRatingEntity assetRatingEntity0 = new AssetRatingEntity();
      AssetRatingEntity assetRatingEntity1 = assetRatingEntity0.review("class TokenPaginatedAssetRatingList {\n    resources: null\n    limit: null\n    count: java.lang.Long@0000000002\n    first: null\n    next: null\n}");
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      assetRatingEntity0.setRating(integer0);
      tokenPaginatedAssetRatingList0.setResources((List<AssetRating>) null);
      AssetRating assetRating1 = assetRating0.entity(assetRatingEntity1);
      boolean boolean0 = tokenPaginatedAssetRatingList1.equals(assetRating1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.next((Link) null);
      tokenPaginatedAssetRatingList1.setFirst((Link) null);
      assertNull(tokenPaginatedAssetRatingList1.getLimit());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.first((Link) null);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.next((Link) null);
      String string0 = tokenPaginatedAssetRatingList2.toString();
      assertEquals("class TokenPaginatedAssetRatingList {\n    resources: null\n    limit: null\n    count: null\n    first: null\n    next: null\n}", string0);
      
      boolean boolean0 = tokenPaginatedAssetRatingList2.equals("");
      Long long0 = new Long(1995L);
      Long.getLong("");
      tokenPaginatedAssetRatingList1.count(long0);
      tokenPaginatedAssetRatingList0.getCount();
      tokenPaginatedAssetRatingList2.toString();
      boolean boolean1 = tokenPaginatedAssetRatingList1.equals(tokenPaginatedAssetRatingList0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Link link0 = new Link();
      Link link1 = link0.type("");
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.first(link1);
      LinkedList<AssetRating> linkedList0 = new LinkedList<AssetRating>();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.resources(linkedList0);
      Long long0 = new Long((-1198L));
      tokenPaginatedAssetRatingList2.equals(tokenPaginatedAssetRatingList0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.count(long0);
      tokenPaginatedAssetRatingList3.resources(linkedList0);
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      tokenPaginatedAssetRatingList0.setLimit(integer0);
      assertSame(tokenPaginatedAssetRatingList0, tokenPaginatedAssetRatingList1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Vector<AssetRating> vector0 = new Vector<AssetRating>();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.resources(vector0);
      Link link0 = tokenPaginatedAssetRatingList1.getNext();
      assertNull(link0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      tokenPaginatedAssetRatingList0.setLimit(integer0);
      assertNull(tokenPaginatedAssetRatingList0.getCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.limit(integer0);
      assertNull(tokenPaginatedAssetRatingList1.getCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Long long0 = new Long(3656L);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.count(long0);
      Link link0 = new Link();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.first(link0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.limit((Integer) null);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList4 = tokenPaginatedAssetRatingList3.next(link0);
      AssetRating assetRating0 = new AssetRating();
      AssetRatingEntity assetRatingEntity0 = new AssetRatingEntity();
      AssetRating assetRating1 = assetRating0.entity(assetRatingEntity0);
      AssetRatingMetadata assetRatingMetadata0 = new AssetRatingMetadata();
      AssetRating assetRating2 = assetRating1.metadata(assetRatingMetadata0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList5 = tokenPaginatedAssetRatingList4.addResourcesItem(assetRating2);
      tokenPaginatedAssetRatingList5.equals((Object) null);
      tokenPaginatedAssetRatingList3.first(link0);
      Link link1 = new Link();
      link1.addRelsItem("vszL?ZMIu");
      tokenPaginatedAssetRatingList1.first(link1);
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Link link0 = new Link();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("    next: ");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLInvalidAuthorizationSpecException0);
      Link link1 = link0.uriBuilder(sQLTransientConnectionException0);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getIncludedGroups();
      Link link2 = link1.rels(list0);
      URI uRI0 = MockURI.create("eIxJHHPQ;");
      Link link3 = link2.uri(uRI0);
      Link link4 = link3.title("");
      tokenPaginatedAssetRatingList0.setNext(link4);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = new TokenPaginatedAssetRatingList();
      tokenPaginatedAssetRatingList0.equals(tokenPaginatedAssetRatingList1);
      AssetRating assetRating0 = new AssetRating();
      tokenPaginatedAssetRatingList0.addResourcesItem(assetRating0);
      System.setCurrentTimeMillis(730L);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = new TokenPaginatedAssetRatingList();
      boolean boolean0 = tokenPaginatedAssetRatingList0.equals(tokenPaginatedAssetRatingList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Integer.valueOf((-226));
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = new TokenPaginatedAssetRatingList();
      Link link0 = new Link();
      tokenPaginatedAssetRatingList0.equals(link0);
      Link link1 = link0.putParamsItem("/%kz,S0z..9Mi?", "reactor.core.publisher.FluxExpand$ExpandBreathSubscriber");
      Link link2 = link1.rels((List<String>) null);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.next(link2);
      long long0 = 0L;
      Long long1 = new Long(0L);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.count(long1);
      link1.setUriBuilder(link0);
      tokenPaginatedAssetRatingList3.setCount(long1);
      tokenPaginatedAssetRatingList3.equals(tokenPaginatedAssetRatingList0);
      tokenPaginatedAssetRatingList0.hashCode();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      AssetRating assetRating0 = new AssetRating();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.addResourcesItem(assetRating0);
      Link link0 = new Link();
      link0.toString();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList0.next(link0);
      List<AssetRating> list0 = tokenPaginatedAssetRatingList1.getResources();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.resources(list0);
      Long long0 = new Long(2220L);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList4 = tokenPaginatedAssetRatingList3.count(long0);
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      tokenPaginatedAssetRatingList0.limit(integer0);
      tokenPaginatedAssetRatingList4.first(link0);
      tokenPaginatedAssetRatingList1.setFirst(link0);
      tokenPaginatedAssetRatingList1.setResources(list0);
      assetRating0.equals(tokenPaginatedAssetRatingList1);
      Long long1 = new Long((-1471L));
      tokenPaginatedAssetRatingList4.setCount(long1);
      assertFalse(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Long long0 = new Long((-415L));
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.count(long0);
      Long long1 = new Long((-415L));
      tokenPaginatedAssetRatingList1.setCount(long1);
      String string0 = tokenPaginatedAssetRatingList1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      Link link0 = new Link();
      link0.title("");
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.first(link0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList1.next(link0);
      tokenPaginatedAssetRatingList0.first(link0);
      Stack<AssetRating> stack0 = new Stack<AssetRating>();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.resources(stack0);
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      tokenPaginatedAssetRatingList1.setResources(stack0);
      Integer integer1 = new Integer(923);
      tokenPaginatedAssetRatingList3.setLimit(integer1);
      tokenPaginatedAssetRatingList0.setResources(stack0);
      tokenPaginatedAssetRatingList3.setResources(stack0);
      Long long0 = new Long(923);
      tokenPaginatedAssetRatingList1.setCount(long0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList4 = tokenPaginatedAssetRatingList3.limit(integer0);
      tokenPaginatedAssetRatingList4.equals(tokenPaginatedAssetRatingList0);
      tokenPaginatedAssetRatingList0.setNext(link0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList5 = tokenPaginatedAssetRatingList0.addResourcesItem((AssetRating) null);
      tokenPaginatedAssetRatingList5.setLimit(integer1);
      tokenPaginatedAssetRatingList0.getFirst();
      tokenPaginatedAssetRatingList1.getFirst();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList6 = tokenPaginatedAssetRatingList1.first(link0);
      tokenPaginatedAssetRatingList6.hashCode();
      Long long1 = tokenPaginatedAssetRatingList2.getCount();
      assertEquals(923L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList0 = new TokenPaginatedAssetRatingList();
      AssetRating assetRating0 = new AssetRating();
      AssetRatingEntity assetRatingEntity0 = new AssetRatingEntity();
      AssetRating assetRating1 = assetRating0.entity(assetRatingEntity0);
      AssetRatingMetadata assetRatingMetadata0 = new AssetRatingMetadata();
      assetRatingMetadata0.assetRatingId((String) null);
      AssetRating assetRating2 = assetRating1.metadata(assetRatingMetadata0);
      assetRating2.equals(assetRating0);
      AssetRating assetRating3 = assetRating2.metadata(assetRatingMetadata0);
      Long long0 = new Long((-9223372036854775808L));
      tokenPaginatedAssetRatingList0.setCount(long0);
      assetRating0.toString();
      assetRating0.setEntity(assetRatingEntity0);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList1 = tokenPaginatedAssetRatingList0.addResourcesItem(assetRating2);
      tokenPaginatedAssetRatingList1.getLimit();
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList2 = tokenPaginatedAssetRatingList0.next((Link) null);
      TokenPaginatedAssetRatingList tokenPaginatedAssetRatingList3 = tokenPaginatedAssetRatingList2.addResourcesItem(assetRating3);
      tokenPaginatedAssetRatingList1.first((Link) null);
      tokenPaginatedAssetRatingList0.getCount();
      tokenPaginatedAssetRatingList1.setNext((Link) null);
      tokenPaginatedAssetRatingList0.getFirst();
      Link link0 = tokenPaginatedAssetRatingList3.getNext();
      assertNull(link0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Link link0 = new Link();
      LinkedList<AssetRating> linkedList0 = new LinkedList<AssetRating>();
      ServerHttpResponse serverHttpResponse0 = mock(ServerHttpResponse.class, new ViolatedAssumptionAnswer());
      HashMap<String, HttpHandler> hashMap0 = new HashMap<String, HttpHandler>();
      String string0 = "MI\\Y;t4>";
      ContextPathCompositeHandler contextPathCompositeHandler0 = null;
      try {
        contextPathCompositeHandler0 = new ContextPathCompositeHandler(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Handler map must not be empty
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }
}
