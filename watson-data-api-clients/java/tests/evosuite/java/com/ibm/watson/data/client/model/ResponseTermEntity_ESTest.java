/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 13:53:23 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.CustomAttribute;
import com.ibm.watson.data.client.model.PaginatedParentRelationshipsList;
import com.ibm.watson.data.client.model.PaginatedRelationshipsList;
import com.ibm.watson.data.client.model.ResponseTermEntity;
import com.ibm.watson.data.client.model.enums.GlossaryObjectState;
import java.util.Date;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResponseTermEntity_ESTest extends ResponseTermEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.synonymTerms(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity0.getSynonymTerms();
      assertNull(paginatedRelationshipsList1.getLimit());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.relatedTerms(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity0.getRelatedTerms();
      assertSame(paginatedRelationshipsList1, paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.referenceData(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity0.getReferenceData();
      assertNull(paginatedRelationshipsList1.getOffset());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      ResponseTermEntity responseTermEntity1 = responseTermEntity0.parentCategory(paginatedParentRelationshipsList0);
      PaginatedParentRelationshipsList paginatedParentRelationshipsList1 = responseTermEntity1.getParentCategory();
      assertSame(paginatedParentRelationshipsList0, paginatedParentRelationshipsList1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      responseTermEntity0.isATypeOfTerms(paginatedParentRelationshipsList0);
      PaginatedParentRelationshipsList paginatedParentRelationshipsList1 = responseTermEntity0.getIsATypeOfTerms();
      assertNull(paginatedParentRelationshipsList1.getCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.importSourceUsage("'Y<");
      String string0 = responseTermEntity0.getImportSourceUsage();
      assertEquals("'Y<", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.importSourceUsage("");
      String string0 = responseTermEntity0.getImportSourceUsage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      MockDate mockDate0 = new MockDate((-4615), (-4615), (-4615), 2, (-4615), (-4615));
      responseTermEntity0.setImportSourceCreatedOn(mockDate0);
      Date date0 = responseTermEntity0.getImportSourceCreatedOn();
      assertEquals("Fri Oct 08 19:48:05 GMT 3114", date0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.importSourceCreatedBy("com.ibm.watson.data.client.model.ResponseTermEntity");
      String string0 = responseTermEntity0.getImportSourceCreatedBy();
      assertEquals("com.ibm.watson.data.client.model.ResponseTermEntity", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.example("    replacesTerms: ");
      String string0 = responseTermEntity0.getExample();
      assertEquals("    replacesTerms: ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.example("");
      String string0 = responseTermEntity0.getExample();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      ResponseTermEntity responseTermEntity1 = responseTermEntity0.defaultLocaleId("+,7):?p\"Fs^]");
      String string0 = responseTermEntity1.getDefaultLocaleId();
      assertEquals("+,7):?p\"Fs^]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.defaultLocaleId("");
      String string0 = responseTermEntity0.getDefaultLocaleId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setDataClasses(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity0.getDataClasses();
      assertNull(paginatedRelationshipsList1.getCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getIncludedGroups();
      ResponseTermEntity responseTermEntity1 = responseTermEntity0.abbreviations(list0);
      List<String> list1 = responseTermEntity1.getAbbreviations();
      assertSame(list0, list1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.addAbbreviationsItem("JMf*)yjR");
      List<String> list0 = responseTermEntity0.getAbbreviations();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.setAbbreviation("Ow");
      String string0 = responseTermEntity0.getAbbreviation();
      assertEquals("Ow", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      ResponseTermEntity responseTermEntity1 = responseTermEntity0.abbreviation("");
      String string0 = responseTermEntity1.getAbbreviation();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getExcludedGroups();
      ResponseTermEntity responseTermEntity1 = responseTermEntity0.abbreviations(list0);
      // Undeclared exception!
      try { 
        responseTermEntity1.addAbbreviationsItem("    replacedByTerms: ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      assertTrue(responseTermEntity1.equals((Object)responseTermEntity0));
      
      responseTermEntity1.referenceDataValues(paginatedRelationshipsList0);
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      assertTrue(responseTermEntity1.equals((Object)responseTermEntity0));
      
      responseTermEntity1.replacesTerms(paginatedRelationshipsList0);
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      assertTrue(responseTermEntity1.equals((Object)responseTermEntity0));
      
      responseTermEntity1.setHasTerms(paginatedRelationshipsList0);
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      assertTrue(responseTermEntity1.equals((Object)responseTermEntity0));
      
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      responseTermEntity1.isOfTerms(paginatedParentRelationshipsList0);
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      assertTrue(responseTermEntity1.equals((Object)responseTermEntity0));
      
      responseTermEntity1.setHasTypeTerms(paginatedRelationshipsList0);
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      assertTrue(responseTermEntity1.equals((Object)responseTermEntity0));
      
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      responseTermEntity1.setParentCategory(paginatedParentRelationshipsList0);
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      assertTrue(responseTermEntity1.equals((Object)responseTermEntity0));
      
      responseTermEntity1.setDefaultLocaleId("tj)o1");
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.setAbbreviation("reactor.core.publisher.FluxFirstWithValue");
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.setImportSourceUsage("sun.nio.ch.bugLevel");
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      MockDate mockDate0 = new MockDate(1L);
      responseTermEntity0.importSourceCreatedOn(mockDate0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.importSourceCreatedBy("Upgrade");
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.addAbbreviationsItem((String) null);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      GlossaryObjectState glossaryObjectState0 = GlossaryObjectState.DRAFT;
      responseTermEntity0.setState(glossaryObjectState0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      CustomAttribute customAttribute0 = new CustomAttribute();
      boolean boolean0 = responseTermEntity0.equals(customAttribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getDataClasses();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setDataClasses(paginatedRelationshipsList0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      ResponseTermEntity responseTermEntity1 = responseTermEntity0.categories(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity1.getCategories();
      assertSame(paginatedRelationshipsList0, paginatedRelationshipsList1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.referenceDataValues(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity0.getReferenceDataValues();
      assertSame(paginatedRelationshipsList1, paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      responseTermEntity0.setIsATypeOfTerms(paginatedParentRelationshipsList0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = responseTermEntity0.getIsOfTerms();
      assertNull(paginatedParentRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setReferenceData(paginatedRelationshipsList0);
      assertNull(responseTermEntity0.getImportSourceUsage());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.setImportSourceCreatedBy("4@^/2/lALq");
      assertEquals("4@^/2/lALq", responseTermEntity0.getImportSourceCreatedBy());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getReferenceDataValues();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getHasTerms();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      ResponseTermEntity responseTermEntity1 = responseTermEntity0.hasTypeTerms(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity1.getHasTypeTerms();
      assertSame(paginatedRelationshipsList1, paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.referenceData(paginatedRelationshipsList0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setPolicies(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity0.getPolicies();
      assertSame(paginatedRelationshipsList1, paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      ResponseTermEntity responseTermEntity1 = responseTermEntity0.hasTerms(paginatedRelationshipsList0);
      assertNull(responseTermEntity1.getState());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.classifications(paginatedRelationshipsList0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      responseTermEntity0.isOfTerms(paginatedParentRelationshipsList0);
      PaginatedParentRelationshipsList paginatedParentRelationshipsList1 = responseTermEntity0.getIsOfTerms();
      assertNull(paginatedParentRelationshipsList1.getOffset());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      String string0 = responseTermEntity0.getDefaultLocaleId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getReferenceData();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setSynonymTerms(paginatedRelationshipsList0);
      assertNull(responseTermEntity0.getState());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      ResponseTermEntity responseTermEntity1 = responseTermEntity0.rules(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity1.getRules();
      assertSame(paginatedRelationshipsList0, paginatedRelationshipsList1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setReplacesTerms(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity0.getReplacesTerms();
      assertNull(paginatedRelationshipsList1.getOffset());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      responseTermEntity0.setIsOfTerms(paginatedParentRelationshipsList0);
      assertNull(responseTermEntity0.getState());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.relatedTerms(paginatedRelationshipsList0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      String string0 = responseTermEntity0.getAbbreviation();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      String string0 = responseTermEntity0.getExample();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getClassifications();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      List<String> list0 = responseTermEntity0.getAbbreviations();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getPolicies();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setReferenceDataValues(paginatedRelationshipsList0);
      assertNull(responseTermEntity0.getLongDescription());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getRelatedTerms();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.example("?");
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getHasTypeTerms();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setReplacedByTerms(paginatedRelationshipsList0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setHasTerms(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity0.getHasTerms();
      assertNull(paginatedRelationshipsList1.getCount());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      String string0 = responseTermEntity0.getImportSourceCreatedBy();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      ResponseTermEntity responseTermEntity1 = responseTermEntity0.dataClasses(paginatedRelationshipsList0);
      assertNull(responseTermEntity1.getExample());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setRules(paginatedRelationshipsList0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      Date date0 = responseTermEntity0.getImportSourceCreatedOn();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setCategories(paginatedRelationshipsList0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      String string0 = responseTermEntity0.toString();
      assertEquals("class ResponseTermEntity {\n    longDescription: null\n    state: null\n    customAttributes: null\n    abbreviations: null\n    importSourceCreatedBy: null\n    importSourceCreatedOn: null\n    importSourceUsage: null\n    example: null\n    abbreviation: null\n    defaultLocaleId: null\n    parentCategory: null\n    categories: null\n    isATypeOfTerms: null\n    hasTypeTerms: null\n    isOfTerms: null\n    hasTerms: null\n    synonymTerms: null\n    relatedTerms: null\n    replacesTerms: null\n    replacedByTerms: null\n    dataClasses: null\n    classifications: null\n    referenceData: null\n    referenceDataValues: null\n    policies: null\n    rules: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      String string0 = responseTermEntity0.getImportSourceUsage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getReplacedByTerms();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getSuiteFiles();
      responseTermEntity0.setAbbreviations(list0);
      ResponseTermEntity responseTermEntity1 = responseTermEntity0.addAbbreviationsItem("com.ibm.watson.data.client.model.ResponseTermEntity");
      assertNull(responseTermEntity1.getState());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = responseTermEntity0.getParentCategory();
      assertNull(paginatedParentRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getRules();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setRelatedTerms(paginatedRelationshipsList0);
      assertNull(paginatedRelationshipsList0.getCount());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.setExample("com.ibm.watson.data.client.model.ResponseTermEntity");
      assertNull(responseTermEntity0.getImportSourceCreatedBy());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getReplacesTerms();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = responseTermEntity0.getIsATypeOfTerms();
      assertNull(paginatedParentRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.setClassifications(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity0.getClassifications();
      assertNull(paginatedRelationshipsList1.getCount());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.synonymTerms(paginatedRelationshipsList0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getCategories();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = responseTermEntity0.getSynonymTerms();
      assertNull(paginatedRelationshipsList0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.policies(paginatedRelationshipsList0);
      ResponseTermEntity responseTermEntity1 = new ResponseTermEntity();
      boolean boolean0 = responseTermEntity0.equals(responseTermEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      responseTermEntity0.importSourceCreatedBy("");
      String string0 = responseTermEntity0.getImportSourceCreatedBy();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      ResponseTermEntity responseTermEntity0 = new ResponseTermEntity();
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      responseTermEntity0.replacedByTerms(paginatedRelationshipsList0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = responseTermEntity0.getReplacedByTerms();
      assertNull(paginatedRelationshipsList1.getLimit());
  }
}
