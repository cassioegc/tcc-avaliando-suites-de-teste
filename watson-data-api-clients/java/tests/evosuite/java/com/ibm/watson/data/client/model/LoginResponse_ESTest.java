/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 22:06:34 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.LoginResponse;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LoginResponse_ESTest extends LoginResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      loginResponse0.setToken("$VLyUES");
      String string0 = loginResponse0.getToken();
      assertEquals("$VLyUES", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      loginResponse0.messageCode("READ_WRITE");
      String string0 = loginResponse0.getMessageCode();
      assertEquals("READ_WRITE", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      loginResponse0.messageCode("");
      String string0 = loginResponse0.getMessageCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      loginResponse0.message("    message: ");
      String string0 = loginResponse0.getMessage();
      assertEquals("    message: ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      loginResponse0.message("");
      String string0 = loginResponse0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      LoginResponse loginResponse1 = loginResponse0.message("    message: ");
      String string0 = loginResponse1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      loginResponse0.setToken("$VLyUES");
      LoginResponse loginResponse1 = new LoginResponse();
      boolean boolean0 = loginResponse0.equals(loginResponse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      LoginResponse loginResponse1 = new LoginResponse();
      boolean boolean0 = loginResponse0.equals(loginResponse1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      loginResponse0.setMessageCode("^2#t_#h4LCu@ZCwY");
      LoginResponse loginResponse1 = new LoginResponse();
      boolean boolean0 = loginResponse0.equals(loginResponse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      boolean boolean0 = loginResponse0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      boolean boolean0 = loginResponse0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      boolean boolean0 = loginResponse0.equals(loginResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      loginResponse0.message("    message: ");
      LoginResponse loginResponse1 = new LoginResponse();
      boolean boolean0 = loginResponse0.equals(loginResponse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      LoginResponse loginResponse1 = loginResponse0.token("    message: ");
      assertSame(loginResponse1, loginResponse0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      String string0 = loginResponse0.getMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      loginResponse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      String string0 = loginResponse0.getMessageCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      String string0 = loginResponse0.getToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      loginResponse0.setToken("");
      String string0 = loginResponse0.getToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LoginResponse loginResponse0 = new LoginResponse();
      loginResponse0.setMessage("    message: ");
      assertEquals("    message: ", loginResponse0.getMessage());
  }
}
