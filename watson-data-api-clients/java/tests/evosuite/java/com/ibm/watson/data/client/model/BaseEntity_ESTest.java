/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 15:01:09 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.BaseEntity;
import com.ibm.watson.data.client.model.Classification;
import com.ibm.watson.data.client.model.ElementType;
import com.ibm.watson.data.client.model.Meaning;
import com.ibm.watson.data.client.model.enums.ElementOrigin;
import io.netty.channel.epoll.EpollDomainSocketChannel;
import io.netty.handler.logging.ByteBufFormat;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.testng.xml.XmlClass;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseEntity_ESTest extends BaseEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      ElementType elementType0 = new ElementType();
      ElementOrigin elementOrigin0 = ElementOrigin.LOCAL_COHORT;
      ElementType elementType1 = elementType0.elementOrigin(elementOrigin0);
      ElementType elementType2 = elementType1.elementHomeMetadataCollectionId("org.springframework.http.codec.protobuf.ProtobufDecoder$MessageDecoderFunction");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ElementType elementType3 = elementType2.elementSuperTypeNames(arrayList0);
      elementType3.elementTypeId("LF$9Dx.eW2z*sw)GO&");
      ElementType elementType4 = elementType3.elementSourceServer("org.springframework.http.codec.protobuf.ProtobufDecoder$MessageDecoderFunction");
      baseEntity0.type(elementType4);
      BaseEntity baseEntity1 = new BaseEntity();
      Vector<Classification> vector0 = new Vector<Classification>();
      baseEntity0.hashCode();
      BaseEntity baseEntity2 = baseEntity0.classifications(vector0);
      BaseEntity baseEntity3 = baseEntity1.description("    classifications: ");
      baseEntity0.getUrl();
      Stack<Meaning> stack0 = new Stack<Meaning>();
      baseEntity2.setMeanings(stack0);
      baseEntity0.getQualifiedName();
      baseEntity1.meanings(stack0);
      baseEntity3.getClassifications();
      BaseEntity baseEntity4 = baseEntity3.addMeaningsItem(meaning0);
      baseEntity4.description("");
      baseEntity2.equals(baseEntity3);
      baseEntity0.getClassifications();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      BaseEntity baseEntity1 = new BaseEntity();
      Vector<Classification> vector0 = new Vector<Classification>();
      BaseEntity baseEntity2 = baseEntity0.classifications(vector0);
      BaseEntity baseEntity3 = baseEntity1.description("    classifications: ");
      baseEntity0.getUrl();
      Stack<Meaning> stack0 = new Stack<Meaning>();
      baseEntity2.setMeanings(stack0);
      baseEntity1.meanings(stack0);
      baseEntity3.getClassifications();
      BaseEntity baseEntity4 = baseEntity3.addMeaningsItem(meaning0);
      BaseEntity baseEntity5 = baseEntity4.description("org.testng.internal.collections.Pair");
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = elementType0.elementHomeMetadataCollectionName("    classifications: ");
      ElementType elementType2 = elementType1.addElementSuperTypeNamesItem((String) null);
      ElementType elementType3 = elementType2.elementTypeVersion((Long) null);
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getSuiteFiles();
      ElementType elementType4 = elementType3.elementSuperTypeNames(list0);
      baseEntity5.setType(elementType4);
      baseEntity2.equals(baseEntity3);
      baseEntity0.getClassifications();
      baseEntity3.extendedProperties((Map<String, Object>) null);
      baseEntity4.getMeanings();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      BaseEntity baseEntity1 = new BaseEntity();
      Vector<Classification> vector0 = new Vector<Classification>();
      baseEntity0.setUrl("    extendedProperties: ");
      baseEntity0.hashCode();
      BaseEntity baseEntity2 = baseEntity0.classifications(vector0);
      BaseEntity baseEntity3 = baseEntity1.description("    classifications: ");
      baseEntity0.getUrl();
      Stack<Meaning> stack0 = new Stack<Meaning>();
      baseEntity2.setMeanings(stack0);
      baseEntity0.getQualifiedName();
      baseEntity1.meanings(stack0);
      baseEntity3.getClassifications();
      BaseEntity baseEntity4 = baseEntity3.addMeaningsItem(meaning0);
      baseEntity4.description("");
      baseEntity2.equals(baseEntity3);
      baseEntity0.getClassifications();
      baseEntity3.classifications(vector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      BaseEntity baseEntity1 = new BaseEntity();
      Vector<Classification> vector0 = new Vector<Classification>();
      baseEntity0.hashCode();
      BaseEntity baseEntity2 = baseEntity0.classifications(vector0);
      BaseEntity baseEntity3 = baseEntity1.description("    classifications: ");
      baseEntity0.guid("");
      baseEntity0.getUrl();
      baseEntity0.getQualifiedName();
      baseEntity3.getClassifications();
      BaseEntity baseEntity4 = baseEntity3.addMeaningsItem(meaning0);
      baseEntity4.description("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      baseEntity2.equals(baseEntity3);
      baseEntity0.getClassifications();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      BaseEntity baseEntity1 = new BaseEntity();
      Vector<Classification> vector0 = new Vector<Classification>();
      baseEntity0.hashCode();
      BaseEntity baseEntity2 = baseEntity0.classifications(vector0);
      vector0.listIterator();
      BaseEntity baseEntity3 = baseEntity1.description("    classifications: ");
      baseEntity0.getUrl();
      Stack<Meaning> stack0 = new Stack<Meaning>();
      baseEntity2.setMeanings(stack0);
      baseEntity0.getQualifiedName();
      baseEntity1.meanings(stack0);
      baseEntity3.getClassifications();
      BaseEntity baseEntity4 = baseEntity3.addMeaningsItem(meaning0);
      baseEntity4.description("");
      baseEntity2.equals(baseEntity3);
      baseEntity0.getClassifications();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Vector<Classification> vector0 = new Vector<Classification>();
      BaseEntity baseEntity1 = baseEntity0.classifications(vector0);
      Classification classification0 = new Classification();
      baseEntity0.putAdditionalPropertiesItem("\n    ", "\n    ");
      classification0.getClassificationProperties();
      BaseEntity baseEntity2 = baseEntity1.extendedProperties((Map<String, Object>) null);
      Classification classification1 = classification0.putClassificationPropertiesItem((String) null, (Object) null);
      BaseEntity baseEntity3 = baseEntity2.addClassificationsItem(classification1);
      BaseEntity baseEntity4 = baseEntity3.description("G6).|D@");
      BaseEntity baseEntity5 = baseEntity4.addClassificationsItem(classification0);
      vector0.clone();
      classification1.putClassificationPropertiesItem((String) null, classification0);
      baseEntity1.qualifiedName((String) null);
      vector0.add(classification1);
      BaseEntity baseEntity6 = baseEntity4.putAdditionalPropertiesItem((String) null, "!oP<sU.p}1");
      baseEntity6.getType();
      baseEntity6.setGuid("");
      baseEntity6.getClassifications();
      Object object0 = new Object();
      baseEntity4.equals(object0);
      baseEntity5.getGuid();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      BaseEntity baseEntity1 = new BaseEntity();
      Vector<Classification> vector0 = new Vector<Classification>();
      BaseEntity baseEntity2 = baseEntity1.classifications(vector0);
      vector0.add((Classification) null);
      Classification classification0 = new Classification();
      vector0.add(classification0);
      BaseEntity baseEntity3 = baseEntity2.putExtendedPropertiesItem("", "");
      baseEntity3.getAdditionalProperties();
      BaseEntity baseEntity4 = baseEntity3.additionalProperties((Map<String, String>) null);
      Classification classification1 = new Classification();
      baseEntity2.hashCode();
      baseEntity0.classifications(vector0);
      Classification classification2 = classification1.putClassificationPropertiesItem("", baseEntity1);
      Classification classification3 = classification2.classificationName("");
      Map<String, Object> map0 = classification3.getClassificationProperties();
      BaseEntity baseEntity5 = baseEntity4.extendedProperties(map0);
      BaseEntity baseEntity6 = baseEntity1.description("    classifications: ");
      baseEntity6.setUrl("");
      baseEntity5.setDisplayName("");
      baseEntity3.description("K");
      baseEntity4.setClassifications(vector0);
      baseEntity3.getQualifiedName();
      baseEntity2.getUrl();
      baseEntity1.displayName("");
      baseEntity3.setQualifiedName("org.testng.internal.collections.Pair");
      baseEntity4.getDisplayName();
      Stack<Meaning> stack0 = new Stack<Meaning>();
      baseEntity5.setMeanings(stack0);
      baseEntity2.getQualifiedName();
      baseEntity4.addClassificationsItem(classification1);
      baseEntity2.description("");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.meanings((List<Meaning>) null);
      Classification classification0 = new Classification();
      BaseEntity baseEntity2 = baseEntity1.addClassificationsItem(classification0);
      BaseEntity baseEntity3 = baseEntity2.guid("RIPk-{dJo");
      BaseEntity baseEntity4 = baseEntity3.displayName("RIPk-{dJo");
      BaseEntity baseEntity5 = baseEntity4.url("RIPk-{dJo");
      baseEntity5.getAdditionalProperties();
      baseEntity4.url("RIPk-{dJo");
      baseEntity5.additionalProperties((Map<String, String>) null);
      baseEntity0.setUrl("RIPk-{dJo");
      baseEntity5.getUrl();
      baseEntity4.setDisplayName("RIPk-{dJo");
      baseEntity2.getUrl();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Class<Object> class0 = Object.class;
      XmlClass xmlClass0 = new XmlClass(class0);
      BaseEntity baseEntity1 = baseEntity0.putExtendedPropertiesItem((String) null, class0);
      Map<String, String> map0 = xmlClass0.getAllParameters();
      BaseEntity baseEntity2 = baseEntity0.additionalProperties(map0);
      baseEntity2.setGuid("");
      Meaning meaning0 = new Meaning();
      meaning0.guid((String) null);
      Meaning meaning1 = meaning0.guid("");
      meaning1.getExtendedProperties();
      baseEntity2.setExtendedProperties((Map<String, Object>) null);
      BaseEntity baseEntity3 = baseEntity0.putAdditionalPropertiesItem("", "    type: ");
      BaseEntity baseEntity4 = baseEntity3.extendedProperties((Map<String, Object>) null);
      baseEntity3.getDisplayName();
      baseEntity2.getDisplayName();
      baseEntity3.setDescription("");
      baseEntity3.equals(xmlClass0);
      baseEntity3.getDisplayName();
      baseEntity4.setQualifiedName((String) null);
      baseEntity1.equals((Object) null);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      char char0 = '|';
      StringBuilder stringBuilder1 = stringBuilder0.append('|');
      int int0 = 7;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(7, (CharSequence) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 7
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      baseEntity0.getExtendedProperties();
      BaseEntity baseEntity1 = baseEntity0.extendedProperties((Map<String, Object>) null);
      BaseEntity baseEntity2 = baseEntity1.qualifiedName("YQpb/I&bbK}=");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 5);
      Map<String, String> map0 = xmlTest0.getLocalParameters();
      BaseEntity baseEntity3 = baseEntity2.additionalProperties(map0);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      BaseEntity baseEntity4 = baseEntity3.putExtendedPropertiesItem("YQpb/I&bbK}=", integer0);
      BaseEntity baseEntity5 = baseEntity4.additionalProperties(map0);
      ArrayList<Meaning> arrayList0 = new ArrayList<Meaning>();
      BaseEntity baseEntity6 = baseEntity4.meanings(arrayList0);
      baseEntity6.getAdditionalProperties();
      baseEntity5.setDisplayName("YQpb/I&bbK}=");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = elementType0.elementHomeMetadataCollectionId(")}&.Q)H8");
      ElementType elementType2 = elementType1.elementSourceServer("b");
      ElementType elementType3 = elementType2.elementTypeName(")}&.Q)H8");
      ElementType elementType4 = elementType3.elementLicense("g4Fe&p4j3_");
      baseEntity0.setType(elementType4);
      Vector<Meaning> vector0 = new Vector<Meaning>();
      BaseEntity baseEntity1 = baseEntity0.meanings(vector0);
      baseEntity1.setMeanings(vector0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "/^.Y*oHyzdUe");
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0, 0, 0);
      baseEntity0.toString(stringBuilder1);
      elementType0.setElementTypeName(")}&.Q)H8");
      BaseEntity baseEntity2 = baseEntity1.putAdditionalPropertiesItem("/^.Y*oHyzdUe", "");
      baseEntity2.putExtendedPropertiesItem("/^.Y*oHyzdUe", stringBuilder1);
      baseEntity2.getUrl();
      BaseEntity baseEntity3 = baseEntity0.putExtendedPropertiesItem((String) null, (Object) null);
      baseEntity1.setGuid("F#\" Uxo#kl50/j,ot;");
      baseEntity2.setType(elementType0);
      ElementType elementType5 = baseEntity3.getType();
      baseEntity2.setType(elementType5);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.guid("h");
      baseEntity0.getExtendedProperties();
      BaseEntity baseEntity2 = baseEntity1.extendedProperties((Map<String, Object>) null);
      Meaning meaning0 = new Meaning();
      Meaning meaning1 = meaning0.guid("");
      BaseEntity baseEntity3 = baseEntity2.addMeaningsItem(meaning1);
      meaning0.url("");
      BaseEntity baseEntity4 = baseEntity3.qualifiedName("");
      List<Meaning> list0 = baseEntity2.getMeanings();
      BaseEntity baseEntity5 = baseEntity4.meanings(list0);
      baseEntity5.getQualifiedName();
      baseEntity0.setDescription("h");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      String string0 = "y3wOsik?dFQ;h7lS'";
      Meaning meaning0 = new Meaning();
      String string1 = "(2%;O@}p";
      Meaning meaning1 = meaning0.name("(2%;O@}p");
      Meaning meaning2 = meaning1.description("(2%;O@}p");
      ElementType elementType0 = new ElementType();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getLocalListeners();
      ElementType elementType1 = elementType0.elementSuperTypeNames(list0);
      elementType0.addElementSuperTypeNamesItem("(2%;O@}p");
      Meaning meaning3 = meaning2.type(elementType1);
      meaning0.getExtendedProperties();
      Meaning meaning4 = meaning3.extendedProperties((Map<String, Object>) null);
      baseEntity0.putExtendedPropertiesItem("y3wOsik?dFQ;h7lS'", meaning4);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      BaseEntity baseEntity1 = baseEntity0.additionalProperties(map0);
      Stack<Meaning> stack0 = new Stack<Meaning>();
      BaseEntity baseEntity2 = baseEntity1.meanings(stack0);
      Object object0 = new Object();
      BaseEntity baseEntity3 = baseEntity2.putExtendedPropertiesItem("~3hVTLw3EH?U", object0);
      // Undeclared exception!
      try { 
        baseEntity3.putAdditionalPropertiesItem("    meanings: ", "    type: ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.url("");
      BaseEntity baseEntity2 = baseEntity1.putAdditionalPropertiesItem("", "\n");
      Classification classification0 = new Classification();
      BaseEntity baseEntity3 = baseEntity2.addClassificationsItem(classification0);
      BaseEntity baseEntity4 = baseEntity3.description("");
      BaseEntity baseEntity5 = baseEntity4.displayName("");
      baseEntity5.getDescription();
      Object object0 = new Object();
      baseEntity3.toIndentedString(object0);
      baseEntity1.getQualifiedName();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.guid("@F'dw?Zc)pa&(");
      Vector<Meaning> vector0 = new Vector<Meaning>();
      BaseEntity baseEntity2 = baseEntity1.meanings(vector0);
      baseEntity1.getClassifications();
      baseEntity0.getAdditionalProperties();
      Classification classification0 = new Classification();
      classification0.equals(baseEntity0);
      baseEntity0.equals(classification0);
      BaseEntity baseEntity3 = baseEntity0.meanings(vector0);
      baseEntity3.getMeanings();
      baseEntity2.setUrl("BSvZzR_:'q");
      StringBuilder stringBuilder0 = new StringBuilder("@F'dw?Zc)pa&(");
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'N';
      charArray0[2] = 'g';
      charArray0[3] = '\'';
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, charArray0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, "BSvZzR_:'q");
      StringBuilder stringBuilder3 = stringBuilder2.append((float) 0);
      baseEntity1.toString(stringBuilder3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      Meaning meaning1 = meaning0.url("(Uhb4;");
      BaseEntity baseEntity1 = baseEntity0.putExtendedPropertiesItem("(Uhb4;", meaning1);
      BaseEntity baseEntity2 = baseEntity1.guid("sI^bhkJbxHu");
      BaseEntity baseEntity3 = baseEntity2.putAdditionalPropertiesItem((String) null, "reactor.core.publisher.FluxTakeUntil$TakeUntilPredicateSubscriber");
      BaseEntity baseEntity4 = baseEntity3.addMeaningsItem(meaning1);
      BaseEntity baseEntity5 = baseEntity4.url((String) null);
      baseEntity5.setDisplayName((String) null);
      baseEntity5.putExtendedPropertiesItem("sI^bhkJbxHu", meaning1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Classification classification0 = new Classification();
      BaseEntity baseEntity1 = baseEntity0.addClassificationsItem(classification0);
      Meaning meaning0 = new Meaning();
      BaseEntity baseEntity2 = baseEntity1.addMeaningsItem(meaning0);
      ElementType elementType0 = new ElementType();
      baseEntity0.type(elementType0);
      BaseEntity baseEntity3 = baseEntity2.guid("brc");
      classification0.getClassificationProperties();
      baseEntity3.setExtendedProperties((Map<String, Object>) null);
      BaseEntity baseEntity4 = baseEntity3.description("brc");
      String string0 = "@WhQ@!X";
      BaseEntity baseEntity5 = baseEntity4.putExtendedPropertiesItem("@WhQ@!X", baseEntity3);
      // Undeclared exception!
      try { 
        baseEntity5.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.BaseEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.displayName("UTP,;UOob7Ze");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BaseEntity baseEntity2 = baseEntity1.extendedProperties(hashMap0);
      Meaning meaning0 = new Meaning();
      ElementType elementType0 = new ElementType();
      Meaning meaning1 = meaning0.type(elementType0);
      BaseEntity baseEntity3 = baseEntity2.addMeaningsItem(meaning1);
      baseEntity3.getAdditionalProperties();
      BaseEntity baseEntity4 = baseEntity3.additionalProperties((Map<String, String>) null);
      Vector<Meaning> vector0 = new Vector<Meaning>();
      BaseEntity baseEntity5 = baseEntity4.meanings(vector0);
      BaseEntity baseEntity6 = baseEntity5.displayName("UTP,;UOob7Ze");
      baseEntity6.setDescription("[ WARN] (%s) %s - %s\n");
      BaseEntity baseEntity7 = baseEntity3.description("\n");
      Map<String, Object> map0 = baseEntity7.getExtendedProperties();
      baseEntity1.getDescription();
      meaning1.setExtendedProperties(map0);
      Vector<Classification> vector1 = new Vector<Classification>();
      Classification classification0 = new Classification();
      Classification classification1 = classification0.classificationName("\n");
      Classification classification2 = classification1.classificationProperties(hashMap0);
      vector1.add(classification2);
      baseEntity6.setClassifications(vector1);
      baseEntity7.setQualifiedName("\n");
      baseEntity3.putAdditionalPropertiesItem("    meanings: ", "\n");
      baseEntity2.setQualifiedName("RB");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Classification classification0 = new Classification();
      Classification classification1 = classification0.classificationName("?/26^+O7q(&F^5_0'");
      Classification classification2 = new Classification();
      Classification classification3 = classification1.putClassificationPropertiesItem("ixXxK_p&a9Dt", classification2);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Classification classification4 = classification3.classificationProperties(hashMap0);
      BaseEntity baseEntity1 = baseEntity0.addClassificationsItem(classification4);
      baseEntity1.getMeanings();
      baseEntity1.setMeanings((List<Meaning>) null);
      baseEntity1.getUrl();
      baseEntity0.toIndentedString(classification4);
      BaseEntity baseEntity2 = baseEntity1.displayName((String) null);
      baseEntity2.getClassifications();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      ArrayList<Meaning> arrayList0 = new ArrayList<Meaning>();
      BaseEntity baseEntity1 = baseEntity0.meanings(arrayList0);
      BaseEntity baseEntity2 = baseEntity1.description("5'C6A\";#)39wW>#");
      BaseEntity baseEntity3 = baseEntity2.guid("5'C6A\";#)39wW>#");
      BaseEntity baseEntity4 = baseEntity3.qualifiedName("");
      BaseEntity baseEntity5 = baseEntity4.url("5'C6A\";#)39wW>#");
      baseEntity5.setDescription("5'C6A\";#)39wW>#");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      baseEntity0.setQualifiedName("");
      baseEntity0.getMeanings();
      baseEntity0.getUrl();
      Classification classification0 = new Classification();
      baseEntity0.getExtendedProperties();
      classification0.setClassificationProperties((Map<String, Object>) null);
      classification0.classificationName("");
      BaseEntity baseEntity1 = baseEntity0.addClassificationsItem(classification0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      baseEntity1.toString(stringBuilder0);
      baseEntity0.setMeanings((List<Meaning>) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      meaning0.getExtendedProperties();
      BaseEntity baseEntity1 = baseEntity0.extendedProperties((Map<String, Object>) null);
      Classification classification0 = new Classification();
      BaseEntity baseEntity2 = baseEntity1.addClassificationsItem(classification0);
      BaseEntity baseEntity3 = baseEntity2.addMeaningsItem(meaning0);
      LinkedList<Classification> linkedList0 = new LinkedList<Classification>();
      BaseEntity baseEntity4 = baseEntity3.classifications(linkedList0);
      BaseEntity baseEntity5 = baseEntity4.putExtendedPropertiesItem((String) null, baseEntity0);
      baseEntity5.getUrl();
      ByteBufFormat byteBufFormat0 = ByteBufFormat.HEX_DUMP;
      baseEntity1.toIndentedString(byteBufFormat0);
      baseEntity2.toString();
      baseEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.putExtendedPropertiesItem((String) null, (Object) null);
      BaseEntity baseEntity2 = baseEntity1.putAdditionalPropertiesItem("#U6zM*wLKuy", (String) null);
      Classification classification0 = new Classification();
      Map<String, Object> map0 = baseEntity1.getExtendedProperties();
      Classification classification1 = classification0.classificationProperties(map0);
      BaseEntity baseEntity3 = baseEntity2.addClassificationsItem(classification1);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BaseEntity baseEntity4 = baseEntity3.extendedProperties(hashMap0);
      BaseEntity baseEntity5 = baseEntity4.description("5Y&.#");
      baseEntity5.equals(baseEntity0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.addMeaningsItem((Meaning) null);
      baseEntity0.hashCode();
      baseEntity1.url("class BaseEntity {\n");
      baseEntity0.toString();
      baseEntity1.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Classification classification0 = new Classification();
      Classification classification1 = classification0.putClassificationPropertiesItem("=`ccX3:.rqFe'}]*8w", "=`ccX3:.rqFe'}]*8w");
      Meaning meaning0 = new Meaning();
      meaning0.getExtendedProperties();
      Classification classification2 = classification1.classificationProperties((Map<String, Object>) null);
      BaseEntity baseEntity1 = baseEntity0.addClassificationsItem(classification2);
      BaseEntity baseEntity2 = baseEntity1.displayName("(j]erA` H");
      baseEntity2.addClassificationsItem(classification0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.qualifiedName("gf");
      Meaning meaning0 = new Meaning();
      Classification classification0 = new Classification();
      Meaning meaning1 = meaning0.addClassificationsItem(classification0);
      BaseEntity baseEntity2 = baseEntity1.putExtendedPropertiesItem("*/HJ4uE]-73\")q", meaning1);
      Vector<Meaning> vector0 = new Vector<Meaning>();
      BaseEntity baseEntity3 = baseEntity2.meanings(vector0);
      meaning1.setDescription("1b]cRW.&X!:_-x");
      BaseEntity baseEntity4 = baseEntity3.displayName("1b]cRW.&X!:_-x");
      baseEntity2.getClassifications();
      BaseEntity baseEntity5 = baseEntity4.classifications((List<Classification>) null);
      baseEntity5.hashCode();
      baseEntity0.setType((ElementType) null);
      baseEntity4.getDescription();
      baseEntity0.setMeanings(vector0);
      baseEntity5.getDisplayName();
      baseEntity3.setClassifications((List<Classification>) null);
      baseEntity0.setType((ElementType) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.putAdditionalPropertiesItem("' with parallel mode:", "[5~Y^Xj");
      XmlSuite xmlSuite0 = new XmlSuite();
      Map<String, String> map0 = xmlSuite0.getParameters();
      BaseEntity baseEntity2 = baseEntity1.additionalProperties(map0);
      BaseEntity baseEntity3 = baseEntity2.url("[5~Y^Xj");
      ElementType elementType0 = new ElementType();
      ElementType elementType1 = elementType0.elementLicense("[5~Y^Xj");
      ElementType elementType2 = elementType1.elementHomeMetadataCollectionName("[5~Y^Xj");
      BaseEntity baseEntity4 = baseEntity3.type(elementType2);
      ArrayList<Classification> arrayList0 = new ArrayList<Classification>();
      BaseEntity baseEntity5 = baseEntity4.classifications(arrayList0);
      baseEntity5.getClassifications();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      ElementType elementType0 = new ElementType();
      BaseEntity baseEntity1 = baseEntity0.type(elementType0);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 1843);
      Map<String, String> map0 = xmlTest0.getLocalParameters();
      BaseEntity baseEntity2 = baseEntity1.additionalProperties(map0);
      Meaning meaning0 = new Meaning();
      Meaning meaning1 = meaning0.url("");
      BaseEntity baseEntity3 = baseEntity2.putExtendedPropertiesItem("C-B+o}mT.", meaning1);
      BaseEntity baseEntity4 = baseEntity3.guid("}");
      Stack<Meaning> stack0 = new Stack<Meaning>();
      baseEntity3.qualifiedName("E");
      xmlTest0.setParallel(xmlSuite0.DEFAULT_PARALLEL);
      BaseEntity baseEntity5 = baseEntity4.meanings(stack0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      meaning1.getClassifications();
      BaseEntity baseEntity6 = baseEntity4.classifications((List<Classification>) null);
      meaning0.setType(elementType0);
      baseEntity4.setGuid("}");
      baseEntity5.setExtendedProperties(hashMap0);
      xmlSuite0.getListeners();
      baseEntity3.getDisplayName();
      baseEntity5.setMeanings(stack0);
      baseEntity1.getGuid();
      baseEntity4.setClassifications((List<Classification>) null);
      baseEntity4.getGuid();
      baseEntity6.setAdditionalProperties(map0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.url("");
      BaseEntity baseEntity2 = baseEntity0.displayName("");
      Meaning meaning0 = new Meaning();
      LinkedList<Meaning> linkedList0 = new LinkedList<Meaning>();
      BaseEntity baseEntity3 = baseEntity1.meanings(linkedList0);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      Map<String, String> map0 = xmlSuite1.getParameters();
      baseEntity3.setAdditionalProperties(map0);
      Classification classification0 = new Classification();
      Meaning meaning1 = meaning0.addClassificationsItem(classification0);
      Meaning meaning2 = meaning1.guid("");
      ArrayList<Classification> arrayList0 = new ArrayList<Classification>();
      Meaning meaning3 = meaning2.classifications(arrayList0);
      Meaning meaning4 = meaning3.description("");
      baseEntity2.addMeaningsItem(meaning4);
      BaseEntity baseEntity4 = baseEntity0.putAdditionalPropertiesItem("", "");
      classification0.toString();
      baseEntity0.setMeanings((List<Meaning>) null);
      baseEntity4.qualifiedName("");
      BaseEntity baseEntity5 = baseEntity4.description("");
      baseEntity5.getAdditionalProperties();
      BaseEntity baseEntity6 = baseEntity1.addMeaningsItem(meaning1);
      baseEntity6.url("wExWgEo");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Class<Object> class0 = Object.class;
      XmlClass xmlClass0 = new XmlClass(class0, true);
      Map<String, String> map0 = xmlClass0.getAllParameters();
      BaseEntity baseEntity1 = baseEntity0.additionalProperties(map0);
      BaseEntity baseEntity2 = baseEntity1.description("HttpServerResponse must not be null");
      Classification classification0 = new Classification();
      Classification classification1 = classification0.putClassificationPropertiesItem("HttpServerResponse must not be null", "HttpServerResponse must not be null");
      Map<String, Object> map1 = classification1.getClassificationProperties();
      BaseEntity baseEntity3 = baseEntity2.extendedProperties(map1);
      BaseEntity baseEntity4 = baseEntity3.addClassificationsItem(classification1);
      baseEntity4.getDescription();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      baseEntity0.getExtendedProperties();
      Meaning meaning1 = meaning0.extendedProperties((Map<String, Object>) null);
      BaseEntity baseEntity1 = baseEntity0.addMeaningsItem(meaning1);
      BaseEntity baseEntity2 = baseEntity1.putExtendedPropertiesItem("The zipper returned a null value", "The zipper returned a null value");
      baseEntity1.getClassifications();
      BaseEntity baseEntity3 = baseEntity2.classifications((List<Classification>) null);
      baseEntity3.hashCode();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      baseEntity0.hashCode();
      baseEntity0.hashCode();
      baseEntity0.setGuid("INSENSITIVE");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.type((ElementType) null);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 0);
      Map<String, String> map0 = xmlTest0.getXmlDependencyGroups();
      BaseEntity baseEntity2 = baseEntity1.additionalProperties(map0);
      BaseEntity baseEntity3 = baseEntity2.displayName((String) null);
      Vector<Meaning> vector0 = new Vector<Meaning>();
      BaseEntity baseEntity4 = baseEntity3.meanings(vector0);
      BaseEntity baseEntity5 = baseEntity4.description((String) null);
      baseEntity5.getGuid();
      baseEntity1.getQualifiedName();
      ByteBufFormat byteBufFormat0 = ByteBufFormat.SIMPLE;
      baseEntity1.equals(byteBufFormat0);
      baseEntity3.putExtendedPropertiesItem((String) null, (Object) null);
      ArrayList<Classification> arrayList0 = new ArrayList<Classification>();
      baseEntity3.classifications(arrayList0);
      baseEntity3.setDisplayName((String) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Classification classification0 = new Classification();
      BaseEntity baseEntity1 = baseEntity0.addClassificationsItem(classification0);
      BaseEntity baseEntity2 = baseEntity1.qualifiedName("doOnResolve");
      BaseEntity baseEntity3 = baseEntity2.description("    name: ");
      BaseEntity baseEntity4 = baseEntity3.guid("[I/rOj");
      baseEntity4.getMeanings();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.putAdditionalPropertiesItem("p&/)4TExrSUm{cg", "p&/)4TExrSUm{cg");
      ElementType elementType0 = new ElementType();
      BaseEntity baseEntity2 = baseEntity1.type(elementType0);
      ArrayList<Classification> arrayList0 = new ArrayList<Classification>();
      BaseEntity baseEntity3 = baseEntity2.classifications(arrayList0);
      BaseEntity baseEntity4 = baseEntity3.url("p&/)4TExrSUm{cg");
      BaseEntity baseEntity5 = baseEntity4.guid("p&/)4TExrSUm{cg");
      // Undeclared exception!
      try { 
        baseEntity5.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.BaseEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Stack<Classification> stack0 = new Stack<Classification>();
      BaseEntity baseEntity1 = baseEntity0.classifications(stack0);
      BaseEntity baseEntity2 = baseEntity1.putAdditionalPropertiesItem("Array returned null value", "Array returned null value");
      baseEntity2.url("Array returned null value");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.url("");
      BaseEntity baseEntity2 = baseEntity1.description("");
      baseEntity2.setMeanings((List<Meaning>) null);
      baseEntity2.guid((String) null);
      baseEntity1.setMeanings((List<Meaning>) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      BaseEntity baseEntity1 = baseEntity0.addMeaningsItem(meaning0);
      ElementType elementType0 = new ElementType();
      BaseEntity baseEntity2 = baseEntity1.type(elementType0);
      Vector<Meaning> vector0 = new Vector<Meaning>();
      BaseEntity baseEntity3 = baseEntity2.meanings(vector0);
      BaseEntity baseEntity4 = baseEntity3.description("io.netty.bootstrap.BootstrapConfig");
      BaseEntity baseEntity5 = baseEntity4.guid("io.netty.bootstrap.BootstrapConfig");
      baseEntity5.setType(elementType0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.qualifiedName("P");
      Classification classification0 = new Classification();
      Classification classification1 = classification0.classificationName("P");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Classification classification2 = classification1.classificationProperties(hashMap0);
      BaseEntity baseEntity2 = baseEntity1.addClassificationsItem(classification2);
      classification2.classificationProperties(hashMap0);
      BaseEntity baseEntity3 = baseEntity2.guid("P");
      BaseEntity baseEntity4 = baseEntity2.description("P");
      hashMap0.entrySet();
      BaseEntity baseEntity5 = baseEntity4.url("P");
      baseEntity5.setUrl("&'");
      BaseEntity baseEntity6 = baseEntity3.url((String) null);
      baseEntity1.setDisplayName("P");
      hashMap0.put("HttpHeaders must not be null", baseEntity6);
      BaseEntity baseEntity7 = baseEntity2.extendedProperties(hashMap0);
      BaseEntity baseEntity8 = baseEntity7.url((String) null);
      baseEntity8.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Classification classification0 = new Classification();
      BaseEntity baseEntity1 = baseEntity0.addClassificationsItem(classification0);
      Meaning meaning0 = new Meaning();
      meaning0.getClassifications();
      BaseEntity baseEntity2 = baseEntity1.classifications((List<Classification>) null);
      BaseEntity baseEntity3 = baseEntity2.displayName("hlZk|&M.");
      BaseEntity baseEntity4 = baseEntity3.putAdditionalPropertiesItem("hlZk|&M.", "fH8$f|u$}!P");
      Class<EpollDomainSocketChannel> class0 = EpollDomainSocketChannel.class;
      XmlClass xmlClass0 = new XmlClass(class0, false);
      Map<String, String> map0 = xmlClass0.getLocalParameters();
      baseEntity4.setAdditionalProperties(map0);
      assertSame(baseEntity0, baseEntity4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Stack<Classification> stack0 = new Stack<Classification>();
      baseEntity0.classifications(stack0);
      Map<String, Object> map0 = baseEntity0.getExtendedProperties();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Classification classification0 = new Classification();
      BaseEntity baseEntity1 = baseEntity0.addClassificationsItem(classification0);
      Vector<Meaning> vector0 = new Vector<Meaning>();
      vector0.setSize(0);
      baseEntity0.meanings(vector0);
      Vector<Classification> vector1 = new Vector<Classification>();
      vector1.add(classification0);
      baseEntity1.setUrl("Already built, builders are not reusable.");
      vector1.addElement(classification0);
      BaseEntity baseEntity2 = baseEntity1.classifications(vector1);
      assertNull(baseEntity2.getQualifiedName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.url((String) null);
      Stack<Meaning> stack0 = new Stack<Meaning>();
      BaseEntity baseEntity2 = baseEntity1.meanings(stack0);
      ElementType elementType0 = baseEntity2.getType();
      assertNull(elementType0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      LinkedList<Meaning> linkedList0 = new LinkedList<Meaning>();
      BaseEntity baseEntity1 = baseEntity0.meanings(linkedList0);
      BaseEntity baseEntity2 = baseEntity1.guid("*f6~.&rC2r~!");
      BaseEntity baseEntity3 = baseEntity2.qualifiedName("*f6~.&rC2r~!");
      ArrayList<Classification> arrayList0 = new ArrayList<Classification>();
      BaseEntity baseEntity4 = baseEntity3.classifications(arrayList0);
      BaseEntity baseEntity5 = baseEntity4.description("*f6~.&rC2r~!");
      assertSame(baseEntity3, baseEntity5);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      Meaning meaning1 = meaning0.name("");
      Meaning meaning2 = meaning1.type((ElementType) null);
      Meaning meaning3 = meaning2.description("");
      BaseEntity baseEntity1 = baseEntity0.addMeaningsItem(meaning3);
      BaseEntity baseEntity2 = baseEntity1.qualifiedName("");
      assertSame(baseEntity2, baseEntity0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      BaseEntity baseEntity1 = new BaseEntity();
      assertTrue(baseEntity1.equals((Object)baseEntity0));
      
      Vector<Classification> vector0 = new Vector<Classification>();
      BaseEntity baseEntity2 = baseEntity0.putExtendedPropertiesItem("", "");
      baseEntity0.hashCode();
      BaseEntity baseEntity3 = baseEntity0.classifications(vector0);
      BaseEntity baseEntity4 = baseEntity1.description("    classifications: ");
      baseEntity2.setDisplayName("");
      baseEntity2.description("K");
      baseEntity2.getQualifiedName();
      baseEntity0.getUrl();
      baseEntity2.setQualifiedName("org.testng.internal.collections.Pair");
      Stack<Meaning> stack0 = new Stack<Meaning>();
      baseEntity3.setMeanings(stack0);
      baseEntity0.getQualifiedName();
      baseEntity1.meanings(stack0);
      baseEntity4.getClassifications();
      baseEntity0.equals((Object) null);
      baseEntity4.addMeaningsItem(meaning0);
      boolean boolean0 = baseEntity3.equals(baseEntity4);
      assertFalse(baseEntity1.equals((Object)baseEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Meaning meaning0 = new Meaning();
      BaseEntity baseEntity1 = baseEntity0.addMeaningsItem(meaning0);
      Vector<Classification> vector0 = new Vector<Classification>();
      BaseEntity baseEntity2 = baseEntity1.classifications(vector0);
      Classification classification0 = new Classification();
      vector0.add(classification0);
      BaseEntity baseEntity3 = baseEntity2.putExtendedPropertiesItem("", "");
      baseEntity3.getAdditionalProperties();
      BaseEntity baseEntity4 = baseEntity3.additionalProperties((Map<String, String>) null);
      Classification classification1 = new Classification();
      baseEntity2.hashCode();
      baseEntity0.classifications(vector0);
      Classification classification2 = classification1.putClassificationPropertiesItem("", baseEntity1);
      Classification classification3 = classification2.classificationName("");
      Map<String, Object> map0 = classification3.getClassificationProperties();
      BaseEntity baseEntity5 = baseEntity4.extendedProperties(map0);
      baseEntity1.description("    classifications: ");
      baseEntity5.setDisplayName("");
      baseEntity3.description("K");
      baseEntity4.setClassifications(vector0);
      baseEntity2.getUrl();
      baseEntity1.displayName("");
      baseEntity3.setQualifiedName("org.testng.internal.collections.Pair");
      baseEntity4.getDisplayName();
      Stack<Meaning> stack0 = new Stack<Meaning>();
      baseEntity5.setMeanings(stack0);
      String string0 = baseEntity2.getQualifiedName();
      assertEquals("org.testng.internal.collections.Pair", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      List<Meaning> list0 = baseEntity0.getMeanings();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      BaseEntity baseEntity1 = baseEntity0.addClassificationsItem((Classification) null);
      baseEntity1.guid("class BaseEntity {\n");
      ElementType elementType0 = new ElementType();
      BaseEntity baseEntity2 = baseEntity0.type(elementType0);
      elementType0.setElementSourceServer("class BaseEntity {\n");
      baseEntity0.setUrl("class BaseEntity {\n");
      baseEntity2.setDescription("");
      BaseEntity baseEntity3 = baseEntity1.displayName("class BaseEntity {\n");
      baseEntity3.equals("");
      BaseEntity baseEntity4 = baseEntity0.url("class BaseEntity {\n");
      assertSame(baseEntity4, baseEntity2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      Vector<Classification> vector0 = new Vector<Classification>();
      BaseEntity baseEntity1 = baseEntity0.classifications(vector0);
      Classification classification0 = new Classification();
      baseEntity0.putAdditionalPropertiesItem("\n    ", "\n    ");
      classification0.getClassificationProperties();
      BaseEntity baseEntity2 = baseEntity1.extendedProperties((Map<String, Object>) null);
      Classification classification1 = classification0.putClassificationPropertiesItem((String) null, (Object) null);
      BaseEntity baseEntity3 = baseEntity2.addClassificationsItem(classification1);
      BaseEntity baseEntity4 = baseEntity3.description((String) null);
      vector0.clone();
      baseEntity1.qualifiedName((String) null);
      BaseEntity baseEntity5 = baseEntity4.putAdditionalPropertiesItem((String) null, (String) null);
      baseEntity5.getType();
      baseEntity5.setGuid("");
      Object object0 = new Object();
      boolean boolean0 = baseEntity4.equals(object0);
      assertTrue(vector0.contains(classification0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      baseEntity0.getDescription();
      String string0 = baseEntity0.getGuid();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BaseEntity baseEntity0 = new BaseEntity();
      baseEntity0.toString();
      baseEntity0.setQualifiedName("org.testng.internal.ConfigurationMethod");
      Classification classification0 = new Classification();
      Meaning meaning0 = new Meaning();
      Meaning meaning1 = meaning0.name("org.testng.internal.ConfigurationMethod");
      meaning1.getClassifications();
      meaning0.setClassifications((List<Classification>) null);
      Classification classification1 = classification0.putClassificationPropertiesItem("org.testng.internal.ConfigurationMethod", meaning1);
      classification0.putClassificationPropertiesItem("    additionalProperties: ", baseEntity0);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Map<String, Object> map0 = classification1.getClassificationProperties();
      baseEntity0.setExtendedProperties(map0);
      baseEntity0.equals(baseEntity0);
      BaseEntity baseEntity1 = baseEntity0.putAdditionalPropertiesItem("Nz*q:9>w54w:/)V?8OH", "Nz*q:9>w54w:/)V?8OH");
      ElementType elementType0 = new ElementType();
      StringBuilder stringBuilder0 = new StringBuilder("");
      baseEntity1.toString(stringBuilder0);
      BaseEntity baseEntity2 = baseEntity1.type(elementType0);
      baseEntity2.setType(elementType0);
      Map<String, String> map1 = baseEntity2.getAdditionalProperties();
      baseEntity2.getExtendedProperties();
      baseEntity1.setAdditionalProperties(map1);
      baseEntity0.equals(classification1);
      BaseEntity baseEntity3 = baseEntity2.putExtendedPropertiesItem("class BaseEntity {\n    qualifiedName: null\n    type: null\n    guid: null\n    url: null\n    classifications: null\n    additionalProperties: null\n    meanings: null\n    extendedProperties: null\n    name: null\n    description: null\n}", "    additionalProperties: ");
      baseEntity3.getAdditionalProperties();
      BaseEntity baseEntity4 = baseEntity1.type(elementType0);
      assertNull(baseEntity4.getDescription());
  }
}
