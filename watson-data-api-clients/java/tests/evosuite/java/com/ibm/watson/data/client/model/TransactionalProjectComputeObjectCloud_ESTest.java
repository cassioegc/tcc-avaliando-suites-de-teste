/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 19:03:27 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.TransactionalProjectComputeObjectCloud;
import com.ibm.watson.data.client.model.enums.ComputeType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransactionalProjectComputeObjectCloud_ESTest extends TransactionalProjectComputeObjectCloud_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      transactionalProjectComputeObjectCloud0.type((ComputeType) null);
      transactionalProjectComputeObjectCloud0.getType();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      transactionalProjectComputeObjectCloud0.name("t3M");
      String string0 = transactionalProjectComputeObjectCloud0.getName();
      assertEquals("t3M", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      transactionalProjectComputeObjectCloud0.label("Haq}{M");
      String string0 = transactionalProjectComputeObjectCloud0.getLabel();
      assertEquals("Haq}{M", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      transactionalProjectComputeObjectCloud0.guid("USE_DEFAULTS");
      String string0 = transactionalProjectComputeObjectCloud0.getGuid();
      assertEquals("USE_DEFAULTS", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud1 = transactionalProjectComputeObjectCloud0.guid("");
      String string0 = transactionalProjectComputeObjectCloud1.getGuid();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud1 = transactionalProjectComputeObjectCloud0.crn("!;J+&$qs[<>)Rspan");
      String string0 = transactionalProjectComputeObjectCloud1.getCrn();
      assertEquals("!;J+&$qs[<>)Rspan", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      transactionalProjectComputeObjectCloud0.crn("");
      String string0 = transactionalProjectComputeObjectCloud0.getCrn();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud1 = new TransactionalProjectComputeObjectCloud();
      transactionalProjectComputeObjectCloud1.label("");
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud2 = transactionalProjectComputeObjectCloud0.label("");
      assertTrue(transactionalProjectComputeObjectCloud2.equals((Object)transactionalProjectComputeObjectCloud1));
      
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud3 = transactionalProjectComputeObjectCloud1.name("");
      boolean boolean0 = transactionalProjectComputeObjectCloud0.equals(transactionalProjectComputeObjectCloud3);
      assertFalse(transactionalProjectComputeObjectCloud1.equals((Object)transactionalProjectComputeObjectCloud0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud1 = new TransactionalProjectComputeObjectCloud();
      assertTrue(transactionalProjectComputeObjectCloud1.equals((Object)transactionalProjectComputeObjectCloud0));
      
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud2 = transactionalProjectComputeObjectCloud1.label("");
      boolean boolean0 = transactionalProjectComputeObjectCloud0.equals(transactionalProjectComputeObjectCloud2);
      assertFalse(transactionalProjectComputeObjectCloud1.equals((Object)transactionalProjectComputeObjectCloud0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud1 = transactionalProjectComputeObjectCloud0.guid("V4Gxg9Qw-5j");
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud2 = new TransactionalProjectComputeObjectCloud();
      boolean boolean0 = transactionalProjectComputeObjectCloud1.equals(transactionalProjectComputeObjectCloud2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      transactionalProjectComputeObjectCloud0.setCrn("9");
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud1 = new TransactionalProjectComputeObjectCloud();
      boolean boolean0 = transactionalProjectComputeObjectCloud0.equals(transactionalProjectComputeObjectCloud1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud1 = new TransactionalProjectComputeObjectCloud();
      boolean boolean0 = transactionalProjectComputeObjectCloud1.equals(transactionalProjectComputeObjectCloud0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      boolean boolean0 = transactionalProjectComputeObjectCloud0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      boolean boolean0 = transactionalProjectComputeObjectCloud0.equals(transactionalProjectComputeObjectCloud0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      boolean boolean0 = transactionalProjectComputeObjectCloud0.equals("Haq}{M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      transactionalProjectComputeObjectCloud0.setLabel("}}Y4H*k#e{fprZ!");
      assertNull(transactionalProjectComputeObjectCloud0.getGuid());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      transactionalProjectComputeObjectCloud0.setGuid("spark");
      assertNull(transactionalProjectComputeObjectCloud0.getCrn());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      String string0 = transactionalProjectComputeObjectCloud0.getGuid();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      String string0 = transactionalProjectComputeObjectCloud0.getCrn();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      ComputeType computeType0 = ComputeType.STREAMING_ANALYTICS;
      transactionalProjectComputeObjectCloud0.setType(computeType0);
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud1 = new TransactionalProjectComputeObjectCloud();
      boolean boolean0 = transactionalProjectComputeObjectCloud0.equals(transactionalProjectComputeObjectCloud1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      String string0 = transactionalProjectComputeObjectCloud0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      ComputeType computeType0 = transactionalProjectComputeObjectCloud0.getType();
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud1 = transactionalProjectComputeObjectCloud0.type(computeType0);
      assertEquals(ComputeType.SPARK, transactionalProjectComputeObjectCloud1.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud1 = transactionalProjectComputeObjectCloud0.label("");
      String string0 = transactionalProjectComputeObjectCloud1.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      String string0 = transactionalProjectComputeObjectCloud0.getLabel();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      transactionalProjectComputeObjectCloud0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      transactionalProjectComputeObjectCloud0.setName("");
      String string0 = transactionalProjectComputeObjectCloud0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TransactionalProjectComputeObjectCloud transactionalProjectComputeObjectCloud0 = new TransactionalProjectComputeObjectCloud();
      String string0 = transactionalProjectComputeObjectCloud0.getName();
      assertNull(string0);
  }
}
