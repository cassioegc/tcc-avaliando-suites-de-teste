/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 00:58:20 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.DataConnectionReference;
import com.ibm.watson.data.client.model.DataSchema;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataConnectionReference_ESTest extends DataConnectionReference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      DataSchema dataSchema0 = new DataSchema();
      dataConnectionReference0.setSchema(dataSchema0);
      DataSchema dataSchema1 = dataConnectionReference0.getSchema();
      assertNull(dataSchema1.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(0);
      dataConnectionReference0.setLocation(hashMap0);
      DataConnectionReference dataConnectionReference1 = new DataConnectionReference();
      boolean boolean0 = dataConnectionReference0.equals(dataConnectionReference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      DataConnectionReference dataConnectionReference1 = new DataConnectionReference();
      boolean boolean0 = dataConnectionReference0.equals(dataConnectionReference1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      boolean boolean0 = dataConnectionReference0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      boolean boolean0 = dataConnectionReference0.equals(dataConnectionReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      DataSchema dataSchema0 = new DataSchema();
      boolean boolean0 = dataConnectionReference0.equals(dataSchema0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      String string0 = dataConnectionReference0.toString();
      assertEquals("class DataConnectionReference {\n    id: null\n    type: null\n    connection: null\n    location: null\n    schema: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      dataConnectionReference0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      DataSchema dataSchema0 = new DataSchema();
      dataConnectionReference0.setSchema(dataSchema0);
      DataConnectionReference dataConnectionReference1 = new DataConnectionReference();
      boolean boolean0 = dataConnectionReference0.equals(dataConnectionReference1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      DataSchema dataSchema0 = dataConnectionReference0.getSchema();
      assertNull(dataSchema0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      DataSchema dataSchema0 = new DataSchema();
      DataConnectionReference dataConnectionReference1 = dataConnectionReference0.schema(dataSchema0);
      assertSame(dataConnectionReference0, dataConnectionReference1);
  }
}
