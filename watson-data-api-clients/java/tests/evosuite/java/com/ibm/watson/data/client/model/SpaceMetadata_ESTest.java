/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:43:06 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.SpaceMetadata;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SpaceMetadata_ESTest extends SpaceMetadata_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      spaceMetadata0.setUrl("(I%a2;]=BjGB7FF");
      String string0 = spaceMetadata0.getUrl();
      assertEquals("(I%a2;]=BjGB7FF", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      spaceMetadata0.url("");
      String string0 = spaceMetadata0.getUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      MockDate mockDate0 = new MockDate((-1204), 0, (-1204), (-1204), 2620);
      SpaceMetadata spaceMetadata1 = spaceMetadata0.updatedAt(mockDate0);
      Date date0 = spaceMetadata1.getUpdatedAt();
      assertEquals("Fri Jul 26 15:40:00 GMT 692", date0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      spaceMetadata0.id("sendToAddress");
      String string0 = spaceMetadata0.getId();
      assertEquals("sendToAddress", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      SpaceMetadata spaceMetadata1 = spaceMetadata0.creatorId("GYo[,v&s0<zbpypKSC");
      String string0 = spaceMetadata1.getCreatorId();
      assertEquals("GYo[,v&s0<zbpypKSC", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      Instant instant0 = MockInstant.ofEpochSecond(1021L, 1021L);
      Date date0 = Date.from(instant0);
      SpaceMetadata spaceMetadata1 = spaceMetadata0.createdAt(date0);
      Date date1 = spaceMetadata1.getCreatedAt();
      assertSame(date0, date1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      SpaceMetadata spaceMetadata1 = new SpaceMetadata();
      boolean boolean0 = spaceMetadata0.equals(spaceMetadata1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = spaceMetadata0.equals(mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      boolean boolean0 = spaceMetadata0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      boolean boolean0 = spaceMetadata0.equals(spaceMetadata0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      MockDate mockDate0 = new MockDate((-1204), 0, (-1204), (-1204), 2620);
      spaceMetadata0.updatedAt(mockDate0);
      SpaceMetadata spaceMetadata1 = new SpaceMetadata();
      boolean boolean0 = spaceMetadata1.equals(spaceMetadata0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      Date date0 = spaceMetadata0.getUpdatedAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      spaceMetadata0.setCreatedAt((Date) null);
      assertNull(spaceMetadata0.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      MockDate mockDate0 = new MockDate((-1204), 0, (-1204), (-1204), 2620);
      spaceMetadata0.setUpdatedAt(mockDate0);
      assertEquals("Fri Jul 26 15:40:00 GMT 692", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      Date date0 = spaceMetadata0.getCreatedAt();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      spaceMetadata0.setCreatorId("");
      String string0 = spaceMetadata0.getCreatorId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      SpaceMetadata spaceMetadata1 = spaceMetadata0.id("");
      SpaceMetadata spaceMetadata2 = new SpaceMetadata();
      boolean boolean0 = spaceMetadata1.equals(spaceMetadata2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      spaceMetadata0.setId("");
      String string0 = spaceMetadata0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      String string0 = spaceMetadata0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      String string0 = spaceMetadata0.toString();
      assertEquals("class ProjectMetadata {\n    createdAt: null\n    creatorId: null\n    id: null\n    updatedAt: null\n    url: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      spaceMetadata0.setUrl("(I%a2;]=BjGB7FF");
      String string0 = spaceMetadata0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      String string0 = spaceMetadata0.getCreatorId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      SpaceMetadata spaceMetadata1 = spaceMetadata0.url("NkeB`H1pHf5T;mP}e");
      SpaceMetadata spaceMetadata2 = new SpaceMetadata();
      boolean boolean0 = spaceMetadata1.equals(spaceMetadata2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      spaceMetadata0.creatorId("\"O6S6+O[");
      SpaceMetadata spaceMetadata1 = new SpaceMetadata();
      boolean boolean0 = spaceMetadata1.equals(spaceMetadata0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      String string0 = spaceMetadata0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      spaceMetadata0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SpaceMetadata spaceMetadata0 = new SpaceMetadata();
      MockDate mockDate0 = new MockDate();
      SpaceMetadata spaceMetadata1 = spaceMetadata0.createdAt(mockDate0);
      SpaceMetadata spaceMetadata2 = new SpaceMetadata();
      boolean boolean0 = spaceMetadata1.equals(spaceMetadata2);
      assertFalse(boolean0);
  }
}
