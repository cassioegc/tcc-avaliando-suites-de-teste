/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:48:13 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.ModelRevisionEntityRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModelRevisionEntityRequest_ESTest extends ModelRevisionEntityRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      ModelRevisionEntityRequest modelRevisionEntityRequest1 = modelRevisionEntityRequest0.spaceId("CUSTOM");
      String string0 = modelRevisionEntityRequest1.getSpaceId();
      assertEquals("CUSTOM", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      modelRevisionEntityRequest0.setSpaceId("");
      String string0 = modelRevisionEntityRequest0.getSpaceId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      ModelRevisionEntityRequest modelRevisionEntityRequest1 = modelRevisionEntityRequest0.projectId("");
      String string0 = modelRevisionEntityRequest1.getProjectId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      ModelRevisionEntityRequest modelRevisionEntityRequest1 = modelRevisionEntityRequest0.commitMessage("com.fasterxml.jackson.annotation.JsonProperty$Access");
      String string0 = modelRevisionEntityRequest1.getCommitMessage();
      assertEquals("com.fasterxml.jackson.annotation.JsonProperty$Access", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      modelRevisionEntityRequest0.setCommitMessage("");
      String string0 = modelRevisionEntityRequest0.getCommitMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      modelRevisionEntityRequest0.commitMessage("NON_ABSENT");
      String string0 = modelRevisionEntityRequest0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      ModelRevisionEntityRequest modelRevisionEntityRequest1 = new ModelRevisionEntityRequest();
      boolean boolean0 = modelRevisionEntityRequest0.equals(modelRevisionEntityRequest1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      Object object0 = new Object();
      boolean boolean0 = modelRevisionEntityRequest0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      boolean boolean0 = modelRevisionEntityRequest0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      boolean boolean0 = modelRevisionEntityRequest0.equals(modelRevisionEntityRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      ModelRevisionEntityRequest modelRevisionEntityRequest1 = modelRevisionEntityRequest0.commitMessage("NON_ABSENT");
      ModelRevisionEntityRequest modelRevisionEntityRequest2 = new ModelRevisionEntityRequest();
      boolean boolean0 = modelRevisionEntityRequest1.equals(modelRevisionEntityRequest2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      String string0 = modelRevisionEntityRequest0.getProjectId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      String string0 = modelRevisionEntityRequest0.getSpaceId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      modelRevisionEntityRequest0.spaceId("");
      ModelRevisionEntityRequest modelRevisionEntityRequest1 = new ModelRevisionEntityRequest();
      boolean boolean0 = modelRevisionEntityRequest1.equals(modelRevisionEntityRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      String string0 = modelRevisionEntityRequest0.getCommitMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      modelRevisionEntityRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      modelRevisionEntityRequest0.projectId("NON_ABSENT");
      String string0 = modelRevisionEntityRequest0.getProjectId();
      assertEquals("NON_ABSENT", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ModelRevisionEntityRequest modelRevisionEntityRequest0 = new ModelRevisionEntityRequest();
      modelRevisionEntityRequest0.setProjectId("\n");
      ModelRevisionEntityRequest modelRevisionEntityRequest1 = new ModelRevisionEntityRequest();
      boolean boolean0 = modelRevisionEntityRequest1.equals(modelRevisionEntityRequest0);
      assertFalse(boolean0);
  }
}
