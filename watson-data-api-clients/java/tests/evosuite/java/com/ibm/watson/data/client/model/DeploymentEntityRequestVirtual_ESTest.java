/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 23:09:44 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.DeploymentEntityRequestVirtual;
import com.ibm.watson.data.client.model.ObjectLocation;
import com.ibm.watson.data.client.model.enums.DeploymentExportFormat;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeploymentEntityRequestVirtual_ESTest extends DeploymentEntityRequestVirtual_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      ObjectLocation objectLocation0 = new ObjectLocation();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual1 = deploymentEntityRequestVirtual0.notificationSystem(objectLocation0);
      ObjectLocation objectLocation1 = deploymentEntityRequestVirtual1.getNotificationSystem();
      assertSame(objectLocation1, objectLocation0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      DeploymentExportFormat deploymentExportFormat0 = DeploymentExportFormat.COREML;
      deploymentEntityRequestVirtual0.setExportFormat(deploymentExportFormat0);
      DeploymentExportFormat deploymentExportFormat1 = deploymentEntityRequestVirtual0.getExportFormat();
      assertEquals(DeploymentExportFormat.COREML, deploymentExportFormat1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      ObjectLocation objectLocation0 = new ObjectLocation();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual1 = deploymentEntityRequestVirtual0.notificationSystem(objectLocation0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("arWmoR", objectLocation0);
      objectLocation0.setLocation(hashMap0);
      // Undeclared exception!
      try { 
        deploymentEntityRequestVirtual1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual1 = new DeploymentEntityRequestVirtual();
      boolean boolean0 = deploymentEntityRequestVirtual1.equals(deploymentEntityRequestVirtual0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      DeploymentExportFormat deploymentExportFormat0 = DeploymentExportFormat.COREML;
      deploymentEntityRequestVirtual0.setExportFormat(deploymentExportFormat0);
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual1 = new DeploymentEntityRequestVirtual();
      boolean boolean0 = deploymentEntityRequestVirtual0.equals(deploymentEntityRequestVirtual1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual1 = new DeploymentEntityRequestVirtual();
      deploymentEntityRequestVirtual1.parameters(hashMap0);
      boolean boolean0 = deploymentEntityRequestVirtual1.equals(deploymentEntityRequestVirtual0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      Integer integer0 = new Integer(0);
      boolean boolean0 = deploymentEntityRequestVirtual0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      boolean boolean0 = deploymentEntityRequestVirtual0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      boolean boolean0 = deploymentEntityRequestVirtual0.equals(deploymentEntityRequestVirtual0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      deploymentEntityRequestVirtual0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      deploymentEntityRequestVirtual0.getExportFormat();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      DeploymentExportFormat deploymentExportFormat0 = DeploymentExportFormat.COREML;
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual1 = deploymentEntityRequestVirtual0.exportFormat(deploymentExportFormat0);
      assertSame(deploymentEntityRequestVirtual1, deploymentEntityRequestVirtual0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      ObjectLocation objectLocation0 = new ObjectLocation();
      deploymentEntityRequestVirtual0.setNotificationSystem(objectLocation0);
      assertNull(objectLocation0.getType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      ObjectLocation objectLocation0 = deploymentEntityRequestVirtual0.getNotificationSystem();
      assertNull(objectLocation0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      String string0 = deploymentEntityRequestVirtual0.toString();
      assertEquals("class DeploymentEntityRequestVirtual {\n    parameters: null\n    exportFormat: null\n    notificationSystem: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual0 = new DeploymentEntityRequestVirtual();
      ObjectLocation objectLocation0 = new ObjectLocation();
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual1 = deploymentEntityRequestVirtual0.notificationSystem(objectLocation0);
      DeploymentEntityRequestVirtual deploymentEntityRequestVirtual2 = new DeploymentEntityRequestVirtual();
      boolean boolean0 = deploymentEntityRequestVirtual1.equals(deploymentEntityRequestVirtual2);
      assertFalse(boolean0);
  }
}
