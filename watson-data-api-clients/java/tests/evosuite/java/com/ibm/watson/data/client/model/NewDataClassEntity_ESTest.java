/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 14:21:21 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.NewDataClassEntity;
import com.ibm.watson.data.client.model.NewRelationship;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.testng.xml.XmlRun;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NewDataClassEntity_ESTest extends NewDataClassEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.workflowState("mU");
      String string0 = newDataClassEntity0.getWorkflowState();
      assertEquals("mU", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.workflowState("");
      String string0 = newDataClassEntity0.getWorkflowState();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      newDataClassEntity0.terms(arrayList0);
      List<NewRelationship> list0 = newDataClassEntity0.getTerms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.addTermsItem((NewRelationship) null);
      List<NewRelationship> list0 = newDataClassEntity0.getTerms();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getIncludes();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.tags(list0);
      List<String> list1 = newDataClassEntity1.getTags();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.addTagsItem("nameResolverSpec");
      List<String> list0 = newDataClassEntity0.getTags();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      Stack<String> stack0 = new Stack<String>();
      newDataClassEntity0.stewardIds(stack0);
      List<String> list0 = newDataClassEntity0.getStewardIds();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.addStewardIdsItem("");
      List<String> list0 = newDataClassEntity1.getStewardIds();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.shortDescription("_sGlevIi2e");
      String string0 = newDataClassEntity1.getShortDescription();
      assertEquals("_sGlevIi2e", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      newDataClassEntity0.parentCategory(newRelationship0);
      NewRelationship newRelationship1 = newDataClassEntity0.getParentCategory();
      assertNull(newRelationship1.getDescription());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.name("    stewardIds: ");
      String string0 = newDataClassEntity1.getName();
      assertEquals("    stewardIds: ", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.name("");
      String string0 = newDataClassEntity0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      newDataClassEntity0.isATypeOfDataClass(newRelationship0);
      NewRelationship newRelationship1 = newDataClassEntity0.getIsATypeOfDataClass();
      assertNull(newRelationship1.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      newDataClassEntity0.hasTypesDataClasses(stack0);
      List<NewRelationship> list0 = newDataClassEntity0.getHasTypesDataClasses();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      MockDate mockDate0 = new MockDate(0L);
      newDataClassEntity0.effectiveStartDate(mockDate0);
      Date date0 = newDataClassEntity0.getEffectiveStartDate();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      MockDate mockDate0 = new MockDate(1962, 411, 428, 0, 1962, 0);
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.effectiveEndDate(mockDate0);
      Date date0 = newDataClassEntity1.getEffectiveEndDate();
      assertSame(mockDate0, date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      newDataClassEntity0.classifications(arrayList0);
      List<NewRelationship> list0 = newDataClassEntity0.getClassifications();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.addClassificationsItem(newRelationship0);
      List<NewRelationship> list0 = newDataClassEntity1.getClassifications();
      assertTrue(list0.contains(newRelationship0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      newDataClassEntity0.setCategories(stack0);
      List<NewRelationship> list0 = newDataClassEntity0.getCategories();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      // Undeclared exception!
      try { 
        newDataClassEntity0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.DataClassEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 863);
      List<String> list0 = xmlTest0.getExcludedGroups();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.tags(list0);
      // Undeclared exception!
      try { 
        newDataClassEntity1.addTagsItem("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_THREAD_COUNT);
      List<String> list0 = xmlTest0.getIncludedGroups();
      newDataClassEntity0.stewardIds(list0);
      // Undeclared exception!
      try { 
        newDataClassEntity0.addStewardIdsItem(":J@upC(Hq%A^0AX](rn");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      StringBuilder stringBuilder0 = new StringBuilder("yaUq0H{l+L#'WtikF");
      newDataClassEntity0.toString(stringBuilder0);
      assertNull(newDataClassEntity0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = new NewDataClassEntity();
      assertTrue(newDataClassEntity1.equals((Object)newDataClassEntity0));
      
      newDataClassEntity0.addTermsItem((NewRelationship) null);
      boolean boolean0 = newDataClassEntity0.equals(newDataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = new NewDataClassEntity();
      assertTrue(newDataClassEntity1.equals((Object)newDataClassEntity0));
      
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      newDataClassEntity1.setCategories(vector0);
      boolean boolean0 = newDataClassEntity0.equals(newDataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.addHasTypesDataClassesItem((NewRelationship) null);
      NewDataClassEntity newDataClassEntity1 = new NewDataClassEntity();
      boolean boolean0 = newDataClassEntity0.equals(newDataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = new NewDataClassEntity();
      assertTrue(newDataClassEntity1.equals((Object)newDataClassEntity0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      newDataClassEntity1.setIsATypeOfDataClass(newRelationship0);
      boolean boolean0 = newDataClassEntity0.equals(newDataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      NewDataClassEntity newDataClassEntity1 = new NewDataClassEntity();
      assertTrue(newDataClassEntity1.equals((Object)newDataClassEntity0));
      
      newDataClassEntity0.setStewardIds(arrayList0);
      boolean boolean0 = newDataClassEntity1.equals(newDataClassEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = new NewDataClassEntity();
      assertTrue(newDataClassEntity1.equals((Object)newDataClassEntity0));
      
      newDataClassEntity0.addTagsItem("$IWLQ");
      boolean boolean0 = newDataClassEntity0.equals(newDataClassEntity1);
      assertFalse(newDataClassEntity1.equals((Object)newDataClassEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = new NewDataClassEntity();
      assertTrue(newDataClassEntity1.equals((Object)newDataClassEntity0));
      
      newDataClassEntity0.setWorkflowState("$IWLQ");
      boolean boolean0 = newDataClassEntity0.equals(newDataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = new NewDataClassEntity();
      assertTrue(newDataClassEntity1.equals((Object)newDataClassEntity0));
      
      MockDate mockDate0 = new MockDate(0L);
      newDataClassEntity1.effectiveEndDate(mockDate0);
      boolean boolean0 = newDataClassEntity0.equals(newDataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = new NewDataClassEntity();
      assertTrue(newDataClassEntity1.equals((Object)newDataClassEntity0));
      
      MockDate mockDate0 = new MockDate(0L);
      newDataClassEntity0.effectiveStartDate(mockDate0);
      boolean boolean0 = newDataClassEntity0.equals(newDataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.shortDescription("$IWLQ");
      NewDataClassEntity newDataClassEntity2 = new NewDataClassEntity();
      boolean boolean0 = newDataClassEntity1.equals(newDataClassEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.name("$IWLQ");
      NewDataClassEntity newDataClassEntity2 = new NewDataClassEntity();
      boolean boolean0 = newDataClassEntity1.equals(newDataClassEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      newDataClassEntity0.setThreshold(integer0);
      NewDataClassEntity newDataClassEntity1 = new NewDataClassEntity();
      boolean boolean0 = newDataClassEntity0.equals(newDataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = new NewDataClassEntity();
      boolean boolean0 = newDataClassEntity0.equals(newDataClassEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      boolean boolean0 = newDataClassEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      boolean boolean0 = newDataClassEntity0.equals(newDataClassEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      boolean boolean0 = newDataClassEntity0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.addClassificationsItem((NewRelationship) null);
      NewDataClassEntity newDataClassEntity2 = new NewDataClassEntity();
      boolean boolean0 = newDataClassEntity1.equals(newDataClassEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.addTermsItem(newRelationship0);
      NewDataClassEntity newDataClassEntity2 = newDataClassEntity1.addTermsItem(newRelationship0);
      assertNull(newDataClassEntity2.getLongDescription());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      newDataClassEntity0.addCategoriesItem(newRelationship0);
      List<NewRelationship> list0 = newDataClassEntity0.getCategories();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.addHasTypesDataClassesItem(newRelationship0);
      List<NewRelationship> list0 = newDataClassEntity0.getHasTypesDataClasses();
      newDataClassEntity1.setCategories(list0);
      NewDataClassEntity newDataClassEntity2 = newDataClassEntity0.addCategoriesItem(newRelationship0);
      assertNull(newDataClassEntity2.getLongDescription());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.addHasTypesDataClassesItem(newRelationship0);
      NewDataClassEntity newDataClassEntity2 = newDataClassEntity1.addHasTypesDataClassesItem(newRelationship0);
      assertSame(newDataClassEntity0, newDataClassEntity2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.setParentCategory((NewRelationship) null);
      assertNull(newDataClassEntity0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      List<String> list0 = newDataClassEntity0.getStewardIds();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      String string0 = newDataClassEntity0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      List<NewRelationship> list0 = newDataClassEntity0.getCategories();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      List<NewRelationship> list0 = newDataClassEntity0.getTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      MockDate mockDate0 = new MockDate(0, 0, (-2982));
      newDataClassEntity0.setEffectiveEndDate(mockDate0);
      assertNull(newDataClassEntity0.getScope());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.setName("");
      assertNull(newDataClassEntity0.getProvider());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      String string0 = newDataClassEntity0.getWorkflowState();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.setEffectiveStartDate((Date) null);
      assertNull(newDataClassEntity0.getReferenceColumnsMetadata());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      newDataClassEntity0.setTags(arrayList0);
      assertNull(newDataClassEntity0.getCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.setShortDescription("    terms: ");
      assertNull(newDataClassEntity0.getAdditionalRegularExpression());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      Date date0 = newDataClassEntity0.getEffectiveStartDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewRelationship newRelationship0 = newDataClassEntity0.getParentCategory();
      assertNull(newRelationship0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.parentCategory(newRelationship0);
      NewDataClassEntity newDataClassEntity2 = new NewDataClassEntity();
      boolean boolean0 = newDataClassEntity1.equals(newDataClassEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      List<NewRelationship> list0 = newDataClassEntity0.getHasTypesDataClasses();
      newDataClassEntity0.setCategories(list0);
      assertNull(newDataClassEntity0.getThreshold());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      NewRelationship newRelationship0 = newDataClassEntity0.getIsATypeOfDataClass();
      assertNull(newRelationship0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.setHasTypesDataClasses((List<NewRelationship>) null);
      assertNull(newDataClassEntity0.getShortDescription());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      List<NewRelationship> list0 = newDataClassEntity0.getClassifications();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.categories(linkedList0);
      assertNull(newDataClassEntity1.getAllowSubstringMatch());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      String string0 = newDataClassEntity0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      newDataClassEntity0.setClassifications(linkedList0);
      NewRelationship newRelationship0 = new NewRelationship();
      NewDataClassEntity newDataClassEntity1 = newDataClassEntity0.addClassificationsItem(newRelationship0);
      assertNull(newDataClassEntity1.getDataClassType());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      String string0 = newDataClassEntity0.getShortDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      List<NewRelationship> list0 = newDataClassEntity0.getHasTypesDataClasses();
      newDataClassEntity0.setTerms(list0);
      assertNull(newDataClassEntity0.getExample());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      Date date0 = newDataClassEntity0.getEffectiveEndDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      newDataClassEntity0.shortDescription("");
      String string0 = newDataClassEntity0.getShortDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NewDataClassEntity newDataClassEntity0 = new NewDataClassEntity();
      List<String> list0 = newDataClassEntity0.getTags();
      assertNull(list0);
  }
}
