/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 20:31:28 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.ObjectLocation;
import com.ibm.watson.data.client.model.enums.DataConnectionType;
import io.netty.channel.ChannelOutboundHandlerAdapter;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectLocation_ESTest extends ObjectLocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      StringBuilder stringBuilder0 = new StringBuilder("    type: ");
      objectLocation0.toString(stringBuilder0);
      assertEquals("    type:     id: null\n    type: null\n    connection: null\n    location: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ObjectLocation objectLocation1 = objectLocation0.location(hashMap0);
      Map<String, Object> map0 = objectLocation1.getLocation();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      hashMap0.put("Allow", channelOutboundHandlerAdapter0);
      objectLocation0.setLocation(hashMap0);
      Map<String, Object> map0 = objectLocation0.getLocation();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      objectLocation0.setId("I.*LsBk%+TmmAr");
      String string0 = objectLocation0.getId();
      assertEquals("I.*LsBk%+TmmAr", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      objectLocation0.setId("");
      String string0 = objectLocation0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      objectLocation0.setConnection(hashMap0);
      Map<String, Object> map0 = objectLocation0.getConnection();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      hashMap0.put("Allow", channelOutboundHandlerAdapter0);
      objectLocation0.connection(hashMap0);
      Map<String, Object> map0 = objectLocation0.getConnection();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      // Undeclared exception!
      try { 
        objectLocation0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.ObjectLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      String string0 = objectLocation0.toIndentedString(objectLocation0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      ObjectLocation objectLocation1 = objectLocation0.id("WDvN(Db-6Pm");
      ObjectLocation objectLocation2 = new ObjectLocation();
      boolean boolean0 = objectLocation1.equals(objectLocation2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      ObjectLocation objectLocation1 = new ObjectLocation();
      boolean boolean0 = objectLocation0.equals(objectLocation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      boolean boolean0 = objectLocation0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      boolean boolean0 = objectLocation0.equals(objectLocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      boolean boolean0 = objectLocation0.equals("$_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      String string0 = objectLocation0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      String string0 = objectLocation0.toString();
      assertEquals("class ObjectLocation {\n    id: null\n    type: null\n    connection: null\n    location: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      DataConnectionType dataConnectionType0 = DataConnectionType.FS;
      objectLocation0.type(dataConnectionType0);
      DataConnectionType dataConnectionType1 = objectLocation0.getType();
      assertEquals(DataConnectionType.FS, dataConnectionType1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      Map<String, Object> map0 = objectLocation0.getLocation();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      objectLocation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      objectLocation0.getType();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      Map<String, Object> map0 = objectLocation0.getConnection();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ObjectLocation objectLocation0 = new ObjectLocation();
      DataConnectionType dataConnectionType0 = DataConnectionType.FS;
      objectLocation0.setType(dataConnectionType0);
      assertEquals(DataConnectionType.FS, objectLocation0.getType());
  }
}
