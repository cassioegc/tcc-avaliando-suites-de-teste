/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:57:16 GMT 2021
 */

package com.ibm.watson.data.client.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.ApiClient;
import com.ibm.watson.data.client.api.AssetFilesApiV2;
import com.ibm.watson.data.client.model.CopyAssetFile;
import com.ibm.watson.data.client.model.FileDeleteResponse;
import com.ibm.watson.data.client.model.PaginatedAssetFileListResponse;
import java.io.File;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import reactor.core.publisher.Mono;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AssetFilesApiV2_ESTest extends AssetFilesApiV2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer(65);
      assertEquals(65, (int)integer0);
      assertNotNull(integer0);
      
      Mono<String> mono0 = assetFilesApiV2_0.getSignedURL("(", integer0, "syscall:shutdown", ")k)", (String) null, "multipart/form-data", "xDGh.", "multipart/form-data", boolean0, (Boolean) null, "(");
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 1100);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.valueOf("34");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("34");
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      MockFile mockFile0 = new MockFile((File) null, "];9r");
      assertNotNull(mockFile0);
      
      try { 
        assetFilesApiV2_0.upload("L==n70O9MX", "34", "L==n70O9MX", "L==n70O9MX", "];9r", boolean0, "];9r", boolean0, boolean1, boolean1, mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on PUT request for \"http://localhost/v2/asset_files/java.lang.String@0000001045\": file [/home/cassioegc/tcc/watson-data-api-clients/java/];9r] cannot be resolved in the file system for checking its content length; nested exception is java.io.FileNotFoundException: file [/home/cassioegc/tcc/watson-data-api-clients/java/];9r] cannot be resolved in the file system for checking its content length
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.valueOf("com.ibm.watson.data.client.api.AssetFilesApiV2$1");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      MockFile mockFile0 = new MockFile("/v2/asset_files", "force");
      assertNotNull(mockFile0);
      
      try { 
        assetFilesApiV2_0.upload("V", "V", "V", "V", "attachment", boolean0, "V", boolean1, boolean1, boolean0, mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on PUT request for \"http://localhost/v2/asset_files/java.lang.String@0000001045\": file [/v2/asset_files/force] cannot be resolved in the file system for checking its content length; nested exception is java.io.FileNotFoundException: file [/v2/asset_files/force] cannot be resolved in the file system for checking its content length
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      MockFile mockFile0 = new MockFile("8rYL{'v?)RLkq]}e<");
      assertNotNull(mockFile0);
      
      try { 
        assetFilesApiV2_0.upload("8lFKqe<d{c=m", "RF8tm#", "project_id", "$`D", "N", boolean0, "6u:%c3=]`'{Q/K)", boolean0, (Boolean) null, boolean0, mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // I/O error on PUT request for \"http://localhost/v2/asset_files/java.lang.String@0000001073\": file [/home/cassioegc/tcc/watson-data-api-clients/java/8rYL{'v?)RLkq]}e<] cannot be resolved in the file system for checking its content length; nested exception is java.io.FileNotFoundException: file [/home/cassioegc/tcc/watson-data-api-clients/java/8rYL{'v?)RLkq]}e<] cannot be resolved in the file system for checking its content length
         //
         verifyException("org.springframework.web.client.RestTemplate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.valueOf("/v2/asset_files");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Mono<PaginatedAssetFileListResponse> mono0 = assetFilesApiV2_0.list("?IW{=<{WgP", "?IW{=<{WgP", "Z10BOtp", "Z10BOtp", "Z10BOtp", ") should be less than the resource length (", boolean0, (Boolean) null);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Mono<PaginatedAssetFileListResponse> mono0 = assetFilesApiV2_0.list("", "@YmD#e)@IwD", "", "", "@YmD#e)@IwD", "", (Boolean) null, (Boolean) null);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer(65);
      assertEquals(65, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Mono<DataBuffer> mono0 = assetFilesApiV2_0.get("syscall:shutdown", "OVERRIDE_PUBLIC_ACCESS_MODIFIERS", "xDGh.", "xDGh.", (String) null, integer0, integer0, "syscall:shutdown", boolean0, boolean1, boolean1, boolean1);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Integer integer0 = new Integer(65);
      assertEquals(65, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1927);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1927, (int)integer1);
      assertNotNull(integer1);
      
      Mono<DataBuffer> mono0 = assetFilesApiV2_0.get("syscall:shutdown", "OVERRIDE_PUBLIC_ACCESS_MODIFIERS", "xDGh.", "xDGh.", (String) null, integer0, integer1, "syscall:shutdown", boolean0, boolean0, boolean0, boolean0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      HttpHeaders httpHeaders0 = new HttpHeaders();
      assertEquals((-1L), httpHeaders0.getAccessControlMaxAge());
      assertNull(httpHeaders0.getOrigin());
      assertNull(httpHeaders0.getAccessControlRequestMethod());
      assertNull(httpHeaders0.getUpgrade());
      assertFalse(httpHeaders0.getAccessControlAllowCredentials());
      assertNull(httpHeaders0.getPragma());
      assertNull(httpHeaders0.getETag());
      assertEquals((-1L), httpHeaders0.getContentLength());
      assertNotNull(httpHeaders0);
      
      Set<String> set0 = httpHeaders0.keySet();
      assertEquals((-1L), httpHeaders0.getAccessControlMaxAge());
      assertNull(httpHeaders0.getOrigin());
      assertNull(httpHeaders0.getAccessControlRequestMethod());
      assertNull(httpHeaders0.getUpgrade());
      assertFalse(httpHeaders0.getAccessControlAllowCredentials());
      assertNull(httpHeaders0.getPragma());
      assertNull(httpHeaders0.getETag());
      assertEquals((-1L), httpHeaders0.getContentLength());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals((-1L), httpHeaders0.getAccessControlMaxAge());
      assertNull(httpHeaders0.getOrigin());
      assertNull(httpHeaders0.getAccessControlRequestMethod());
      assertNull(httpHeaders0.getUpgrade());
      assertFalse(httpHeaders0.getAccessControlAllowCredentials());
      assertNull(httpHeaders0.getPragma());
      assertNull(httpHeaders0.getETag());
      assertEquals((-1L), httpHeaders0.getContentLength());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Mono<FileDeleteResponse> mono0 = assetFilesApiV2_0.delete("S%g\"{", (String) null, "2<n3!W#=I*5bNx%BJt", "class CopyAssetFileTarget {\n    type: null\n    guid: null\n    path: null\n}", boolean0, boolean1, list0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(set0.contains("S%g\"{"));
      assertFalse(list0.contains("S%g\"{"));
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals((-1L), httpHeaders0.getAccessControlMaxAge());
      assertNull(httpHeaders0.getOrigin());
      assertNull(httpHeaders0.getAccessControlRequestMethod());
      assertNull(httpHeaders0.getUpgrade());
      assertFalse(httpHeaders0.getAccessControlAllowCredentials());
      assertNull(httpHeaders0.getPragma());
      assertNull(httpHeaders0.getETag());
      assertEquals((-1L), httpHeaders0.getContentLength());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 2302);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Mono<Void> mono0 = assetFilesApiV2_0.deflate("com.ibm.watson.data.client.api.AssetFilesApiV2$7", "com.ibm.watson.data.client.api.AssetFilesApiV2$7", "com.ibm.watson.data.client.api.AssetFilesApiV2$7", boolean0, (Boolean) null, boolean0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, (-196));
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Mono<Void> mono0 = assetFilesApiV2_0.deflate("ALWAYS", "ALWAYS", "", (Boolean) null, boolean0, boolean0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2((ApiClient) null);
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.upload(",Q>&weV+}", "reactor.core.publisher.FluxRefCount", "g5Ms", "G-Km+5K]uMR 2)J2Ei", ",Q>&weV+}", boolean0, "minorVersion", boolean0, boolean0, boolean0, mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.AssetFilesApiV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      ApiClient apiClient1 = apiClient0.setBasePath("V");
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("V", apiClient0.getBasePath());
      assertEquals("V", apiClient1.getBasePath());
      assertNotNull(apiClient1);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient1);
      assertEquals("V", apiClient0.getBasePath());
      assertEquals("V", apiClient1.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.valueOf("com.ibm.watson.data.client.api.AssetFilesApiV2$1");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      MockFile mockFile0 = new MockFile("/v2/asset_files", "force");
      assertNotNull(mockFile0);
      
      try { 
        assetFilesApiV2_0.upload("V", "V", "V", "V", "attachment", boolean0, "V", boolean0, boolean0, boolean0, mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [V] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2((ApiClient) null);
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.list((String) null, "Value extractor is null", "kKWIH{},^CCO;J5", ".hxa", "Value extractor is null", "Value extractor is null", boolean0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.AssetFilesApiV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      ApiClient apiClient1 = apiClient0.setBasePath("EbT0pj(2aUqLqFOJ");
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("EbT0pj(2aUqLqFOJ", apiClient0.getBasePath());
      assertEquals("EbT0pj(2aUqLqFOJ", apiClient1.getBasePath());
      assertNotNull(apiClient1);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient1);
      assertEquals("EbT0pj(2aUqLqFOJ", apiClient0.getBasePath());
      assertEquals("EbT0pj(2aUqLqFOJ", apiClient1.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.list((String) null, "EbT0pj(2aUqLqFOJ", "EbT0pj(2aUqLqFOJ", (String) null, "EbT0pj(2aUqLqFOJ", "wlWz;", boolean0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [EbT0pj(2aUqLqFOJ] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2((ApiClient) null);
      assertNotNull(assetFilesApiV2_0);
      
      Integer integer0 = new Integer((-1253));
      assertEquals((-1253), (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.getSignedURL("expires_in", integer0, "expires_in", "com.ibm.watson.data.client.api.AssetFilesApiV2$2", "expires_in", "expires_in", "", (String) null, boolean0, boolean0, "^>^A4mL_~x0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.AssetFilesApiV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2((ApiClient) null);
      assertNotNull(assetFilesApiV2_0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.getHeaders("", "", "", "br:Ksg}nkf8@kL", "force", "force");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.AssetFilesApiV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      ApiClient apiClient1 = apiClient0.setBasePath("");
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("", apiClient0.getBasePath());
      assertEquals("", apiClient1.getBasePath());
      assertNotNull(apiClient1);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient1);
      assertEquals("", apiClient0.getBasePath());
      assertEquals("", apiClient1.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.getHeaders("", "`OE5(XIS}>O", "space_id", "", (String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2((ApiClient) null);
      assertNotNull(assetFilesApiV2_0);
      
      Integer integer0 = new Integer((-2979));
      assertEquals((-2979), (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = Boolean.valueOf("h>@\"66a@n$rK]DI@`");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.getFromUrl("", integer0, integer0, boolean0, boolean0, boolean0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.AssetFilesApiV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.getFromUrl("Invalid character '", integer0, integer0, boolean0, boolean0, boolean0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid character ' ' for HOST_IPV4 in \"localhostInvalid character '\"
         //
         verifyException("org.springframework.web.util.HierarchicalUriComponents", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2((ApiClient) null);
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = new Boolean("IP_MULTICAST_ADDR");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.get("IXF", "IP_MULTICAST_ADDR", (String) null, "", "", (Integer) null, (Integer) null, (String) null, boolean0, boolean0, boolean0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.AssetFilesApiV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      ApiClient apiClient1 = apiClient0.setBasePath("?$66ex(V");
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("?$66ex(V", apiClient0.getBasePath());
      assertEquals("?$66ex(V", apiClient1.getBasePath());
      assertNotNull(apiClient1);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient1);
      assertEquals("?$66ex(V", apiClient0.getBasePath());
      assertEquals("?$66ex(V", apiClient1.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.delete("Bsf$ArV9, =sRiHD", "Rq8mqRF", ".San", "wP/&~@w(#bE r~Wx/", "!g%Mj%kKRuM@-)l\"j;O", (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [?$66ex(V] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2((ApiClient) null);
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.delete("@Cko@^fed)w7C", "", "{t", "{t", boolean0, boolean0, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.AssetFilesApiV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 126);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      HttpHeaders httpHeaders0 = new HttpHeaders();
      assertNull(httpHeaders0.getPragma());
      assertEquals((-1L), httpHeaders0.getContentLength());
      assertEquals((-1L), httpHeaders0.getAccessControlMaxAge());
      assertNull(httpHeaders0.getAccessControlRequestMethod());
      assertNull(httpHeaders0.getETag());
      assertNull(httpHeaders0.getOrigin());
      assertNull(httpHeaders0.getUpgrade());
      assertFalse(httpHeaders0.getAccessControlAllowCredentials());
      assertNotNull(httpHeaders0);
      
      ApiClient apiClient1 = apiClient0.setBasePath("If-Modified-Since");
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("If-Modified-Since", apiClient0.getBasePath());
      assertEquals("If-Modified-Since", apiClient1.getBasePath());
      assertNotNull(apiClient1);
      
      List<String> list0 = httpHeaders0.getAccessControlRequestHeaders();
      assertFalse(list0.contains("If-Modified-Since"));
      assertNull(httpHeaders0.getPragma());
      assertEquals((-1L), httpHeaders0.getContentLength());
      assertEquals((-1L), httpHeaders0.getAccessControlMaxAge());
      assertNull(httpHeaders0.getAccessControlRequestMethod());
      assertNull(httpHeaders0.getETag());
      assertNull(httpHeaders0.getOrigin());
      assertNull(httpHeaders0.getUpgrade());
      assertFalse(httpHeaders0.getAccessControlAllowCredentials());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.delete("c];e|0sv(h?z\"mB", "c];e|0sv(h?z\"mB", "c];e|0sv(h?z\"mB", "/v2/asset_files", boolean0, boolean0, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [If-Modified-Since] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2((ApiClient) null);
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.valueOf(";{{.XIDz5aKNP7");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.deflate(";{{.XIDz5aKNP7", ";{{.XIDz5aKNP7", ";{{.XIDz5aKNP7", boolean0, boolean0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.AssetFilesApiV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 122);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      ApiClient apiClient1 = apiClient0.setBasePath("");
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("", apiClient0.getBasePath());
      assertEquals("", apiClient1.getBasePath());
      assertNotNull(apiClient1);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient1);
      assertEquals("", apiClient0.getBasePath());
      assertEquals("", apiClient1.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.deflate("", "", (String) null, boolean0, boolean0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2((ApiClient) null);
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.createFolder("fieldSize cannot be a negative number", "", "text/plain", "fieldSize cannot be a negative number", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.AssetFilesApiV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, (-3163));
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      ApiClient apiClient1 = apiClient0.setBasePath("Xp0\"K7=PkT%&AI6L%");
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("Xp0\"K7=PkT%&AI6L%", apiClient0.getBasePath());
      assertEquals("Xp0\"K7=PkT%&AI6L%", apiClient1.getBasePath());
      assertNotNull(apiClient1);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient1);
      assertEquals("Xp0\"K7=PkT%&AI6L%", apiClient0.getBasePath());
      assertEquals("Xp0\"K7=PkT%&AI6L%", apiClient1.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      Boolean boolean0 = new Boolean("HU5wl3V<>Td6(qxk~");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.createFolder("~CAAw7", "n`d&-x4", "Xp0\"K7=PkT%&AI6L%", "n`d&-x4", boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Xp0\"K7=PkT%&AI6L%] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2((ApiClient) null);
      assertNotNull(assetFilesApiV2_0);
      
      CopyAssetFile copyAssetFile0 = new CopyAssetFile();
      assertNotNull(copyAssetFile0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.copy(copyAssetFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.AssetFilesApiV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 1779);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNotNull(apiClient0);
      
      ApiClient apiClient1 = apiClient0.setBasePath((String) null);
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertNull(apiClient0.getBasePath());
      assertNull(apiClient1.getBasePath());
      assertNotNull(apiClient1);
      
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient1);
      assertNull(apiClient0.getBasePath());
      assertNull(apiClient1.getBasePath());
      assertNotNull(assetFilesApiV2_0);
      
      CopyAssetFile copyAssetFile0 = new CopyAssetFile();
      assertNotNull(copyAssetFile0);
      
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.copy(copyAssetFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HTTP URL must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 0);
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      Integer integer0 = new Integer(0);
      Boolean boolean0 = Boolean.TRUE;
      Mono<DataBuffer> mono0 = assetFilesApiV2_0.getFromUrl("", integer0, integer0, boolean0, boolean0, boolean0, boolean0);
      assertNull(mono0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 0);
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      Mono<Void> mono0 = assetFilesApiV2_0.delete("Bsf$ArV9, =sRiHD", "Rq8mqRF", ".San", "wP/&~@w(#bE r~Wx/", "!g%Mj%kKRuM@-)l\"j;O", (Boolean) null);
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, (-276));
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      Integer integer0 = new Integer((-276));
      Boolean boolean0 = Boolean.FALSE;
      Mono<String> mono0 = assetFilesApiV2_0.getSignedURL("", integer0, "", "", "", "(m.Obv%GdsC8XC_X+", ";", "", boolean0, (Boolean) null, "");
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 0);
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      Boolean boolean0 = Boolean.TRUE;
      Mono<Void> mono0 = assetFilesApiV2_0.deflate("", "", "7Q7GB?", boolean0, boolean0, boolean0);
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, (-3274));
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      Boolean boolean0 = Boolean.valueOf("lUfw>?lO");
      Mono<Void> mono0 = assetFilesApiV2_0.createFolder("/ijkr", "/ijkr", "/ijkr", "", boolean0);
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 1779);
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      CopyAssetFile copyAssetFile0 = new CopyAssetFile();
      Mono<Void> mono0 = assetFilesApiV2_0.copy(copyAssetFile0);
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      Mono<ResponseEntity<Void>> mono0 = assetFilesApiV2_0.getHeaders("com.fasterxml.jackson.databind.ser.impl.WritableObjectId", "com.fasterxml.jackson.databind.ser.impl.WritableObjectId", "", "", "", "");
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2((ApiClient) null);
      Boolean boolean0 = Boolean.valueOf(false);
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.delete("", "", "", "", "", boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.AssetFilesApiV2", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 0);
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      ApiClient apiClient1 = assetFilesApiV2_0.getApiClient();
      assertEquals("http://localhost", apiClient1.getBasePath());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      Integer integer0 = new Integer(583);
      Boolean boolean0 = Boolean.valueOf(false);
      // Undeclared exception!
      try { 
        assetFilesApiV2_0.get("", "initialize_git", "+9Yu(3", "", "/v2/asset_files/{path}", integer0, integer0, "+9Yu(3", boolean0, boolean0, boolean0, (Boolean) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid character '{' for QUERY_PARAM in \"/v2/asset_files/{path}\"
         //
         verifyException("org.springframework.web.util.HierarchicalUriComponents", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      AssetFilesApiV2 assetFilesApiV2_0 = new AssetFilesApiV2(apiClient0);
      assetFilesApiV2_0.setApiClient(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
  }
}
