/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 02:18:33 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.ibm.watson.data.client.model.AssetTermsEntity;
import com.ibm.watson.data.client.model.ColumnTerm;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AssetTermsEntity_ESTest extends AssetTermsEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AssetTermsEntity assetTermsEntity0 = new AssetTermsEntity();
      LinkedList<ColumnTerm> linkedList0 = new LinkedList<ColumnTerm>();
      assetTermsEntity0.setList(linkedList0);
      List<ColumnTerm> list0 = assetTermsEntity0.getList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AssetTermsEntity assetTermsEntity0 = new AssetTermsEntity();
      LinkedList<ColumnTerm> linkedList0 = new LinkedList<ColumnTerm>();
      ColumnTerm columnTerm0 = new ColumnTerm();
      linkedList0.add(columnTerm0);
      assetTermsEntity0.setList(linkedList0);
      List<ColumnTerm> list0 = assetTermsEntity0.getList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AssetTermsEntity assetTermsEntity0 = new AssetTermsEntity();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      LinkedList<ColumnTerm> linkedList0 = new LinkedList<ColumnTerm>();
      ColumnTerm columnTerm0 = new ColumnTerm();
      assetTermsEntity0.hashCode();
      assetTermsEntity0.equals((Object) null);
      boolean boolean0 = assetTermsEntity0.equals(columnTerm0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AssetTermsEntity assetTermsEntity0 = new AssetTermsEntity();
      AssetTermsEntity assetTermsEntity1 = new AssetTermsEntity();
      boolean boolean0 = assetTermsEntity0.equals(assetTermsEntity1);
      assertTrue(boolean0);
      
      String string0 = assetTermsEntity0.toString();
      assertEquals("class AssetTermsEntity {\n    list: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AssetTermsEntity assetTermsEntity0 = new AssetTermsEntity();
      boolean boolean0 = assetTermsEntity0.equals(assetTermsEntity0);
      assertTrue(boolean0);
      
      assetTermsEntity0.getList();
      AssetTermsEntity assetTermsEntity1 = new AssetTermsEntity();
      String string0 = assetTermsEntity0.toString();
      assertEquals("class AssetTermsEntity {\n    list: null\n}", string0);
  }
}
