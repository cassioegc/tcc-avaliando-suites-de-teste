/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:22:10 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.Classification;
import com.ibm.watson.data.client.model.ConnectorType;
import com.ibm.watson.data.client.model.ElementType;
import com.ibm.watson.data.client.model.Meaning;
import com.ibm.watson.data.client.model.enums.ElementOrigin;
import io.netty.handler.logging.ByteBufFormat;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.testng.xml.XmlDefine;
import org.testng.xml.XmlRun;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConnectorType_ESTest extends ConnectorType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      Stack<String> stack0 = new Stack<String>();
      ConnectorType connectorType1 = connectorType0.recognizedSecuredProperties(stack0);
      ConnectorType connectorType2 = connectorType1.recognizedConfigurationProperties(stack0);
      String string0 = "\n";
      ConnectorType connectorType3 = connectorType2.connectorProviderClassName("\n");
      Classification classification0 = new Classification();
      ConnectorType connectorType4 = connectorType3.recognizedAdditionalProperties(stack0);
      Classification classification1 = classification0.putClassificationPropertiesItem("", connectorType4);
      connectorType3.addClassificationsItem(classification1);
      connectorType3.toString();
      connectorType2.hashCode();
      ConnectorType connectorType5 = connectorType3.addRecognizedSecuredPropertiesItem(string0);
      connectorType1.setRecognizedSecuredProperties(stack0);
      connectorType5.getRecognizedSecuredProperties();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ElementType elementType0 = new ElementType();
      elementType0.getElementSuperTypeNames();
      ConnectorType connectorType1 = connectorType0.recognizedAdditionalProperties((List<String>) null);
      ConnectorType connectorType2 = connectorType1.addRecognizedAdditionalPropertiesItem("");
      elementType0.setElementSuperTypeNames((List<String>) null);
      ConnectorType connectorType3 = connectorType2.addRecognizedSecuredPropertiesItem("kz#wW");
      connectorType3.getConnectorProviderClassName();
      ConnectorType connectorType4 = new ConnectorType();
      connectorType4.getRecognizedSecuredProperties();
      ConnectorType connectorType5 = connectorType1.recognizedSecuredProperties((List<String>) null);
      connectorType2.getConnectorProviderClassName();
      ConnectorType connectorType6 = connectorType2.connectorProviderClassName(" depends on not successfully finished methods");
      ConnectorType connectorType7 = new ConnectorType();
      assertTrue(connectorType7.equals((Object)connectorType4));
      
      ConnectorType connectorType8 = connectorType6.addRecognizedConfigurationPropertiesItem((String) null);
      ConnectorType connectorType9 = connectorType7.addRecognizedAdditionalPropertiesItem("kz#wW");
      ConnectorType connectorType10 = connectorType9.addRecognizedAdditionalPropertiesItem("");
      connectorType7.recognizedSecuredProperties((List<String>) null);
      connectorType6.hashCode();
      connectorType5.setRecognizedAdditionalProperties((List<String>) null);
      connectorType1.addRecognizedAdditionalPropertiesItem("");
      connectorType0.getRecognizedAdditionalProperties();
      ConnectorType connectorType11 = connectorType7.recognizedConfigurationProperties((List<String>) null);
      connectorType11.equals("kz#wW");
      connectorType11.equals(connectorType4);
      connectorType5.getRecognizedConfigurationProperties();
      Random.setNextRandom(0);
      connectorType5.connectorProviderClassName("Z>|nd");
      connectorType9.getRecognizedSecuredProperties();
      assertFalse(connectorType7.equals((Object)connectorType4));
      
      connectorType8.addRecognizedConfigurationPropertiesItem((String) null);
      assertFalse(connectorType0.equals((Object)connectorType10));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      connectorType0.addRecognizedAdditionalPropertiesItem("tO|");
      ConnectorType connectorType1 = new ConnectorType();
      boolean boolean0 = connectorType0.equals(connectorType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = new ConnectorType();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConnectorType connectorType2 = new ConnectorType();
      connectorType2.addRecognizedSecuredPropertiesItem("");
      connectorType1.equals(connectorType2);
      connectorType0.getRecognizedSecuredProperties();
      connectorType0.toString();
      connectorType1.getRecognizedAdditionalProperties();
      connectorType0.setRecognizedConfigurationProperties(linkedList0);
      connectorType0.equals("");
      connectorType1.setRecognizedSecuredProperties((List<String>) null);
      connectorType1.recognizedAdditionalProperties((List<String>) null);
      Random.setNextRandom(2416);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = new ConnectorType();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConnectorType connectorType2 = new ConnectorType();
      connectorType1.equals(connectorType2);
      connectorType0.getRecognizedSecuredProperties();
      connectorType0.toString();
      connectorType1.getRecognizedAdditionalProperties();
      assertTrue(connectorType1.equals((Object)connectorType0));
      
      connectorType0.setRecognizedConfigurationProperties(linkedList0);
      connectorType0.equals("");
      connectorType1.setRecognizedSecuredProperties((List<String>) null);
      ConnectorType connectorType3 = connectorType1.recognizedAdditionalProperties((List<String>) null);
      assertFalse(connectorType3.equals((Object)connectorType0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ElementType elementType0 = new ElementType();
      elementType0.getElementSuperTypeNames();
      ConnectorType connectorType1 = connectorType0.recognizedAdditionalProperties((List<String>) null);
      ConnectorType connectorType2 = connectorType1.addRecognizedAdditionalPropertiesItem("");
      elementType0.setElementSuperTypeNames((List<String>) null);
      elementType0.toString();
      ConnectorType connectorType3 = connectorType2.addRecognizedSecuredPropertiesItem("kz#wW");
      connectorType3.getConnectorProviderClassName();
      ConnectorType connectorType4 = new ConnectorType();
      connectorType4.getRecognizedSecuredProperties();
      ConnectorType connectorType5 = connectorType1.recognizedSecuredProperties((List<String>) null);
      connectorType2.getConnectorProviderClassName();
      ConnectorType connectorType6 = connectorType2.connectorProviderClassName(" depends on not successfully finished methods");
      ConnectorType connectorType7 = connectorType0.addRecognizedConfigurationPropertiesItem("");
      connectorType7.toString();
      connectorType1.addRecognizedConfigurationPropertiesItem("class ElementType {\n    elementTypeId: null\n    elementTypeName: null\n    elementSuperTypeNames: null\n    elementTypeVersion: null\n    elementTypeDescription: null\n    elementSourceServer: null\n    elementOrigin: null\n    elementHomeMetadataCollectionId: null\n    elementHomeMetadataCollectionName: null\n    elementLicense: null\n}");
      connectorType6.addRecognizedConfigurationPropertiesItem((String) null);
      ConnectorType connectorType8 = connectorType7.addRecognizedAdditionalPropertiesItem("kz#wW");
      connectorType8.addRecognizedAdditionalPropertiesItem("");
      connectorType7.recognizedSecuredProperties((List<String>) null);
      connectorType6.hashCode();
      connectorType5.setRecognizedAdditionalProperties((List<String>) null);
      connectorType1.addRecognizedAdditionalPropertiesItem("");
      connectorType0.getRecognizedAdditionalProperties();
      ConnectorType connectorType9 = connectorType7.recognizedConfigurationProperties((List<String>) null);
      boolean boolean0 = connectorType9.equals(connectorType4);
      assertFalse(boolean0);
      
      connectorType5.getRecognizedConfigurationProperties();
      Random.setNextRandom(0);
      connectorType5.connectorProviderClassName("Z>|nd");
      assertFalse(connectorType0.equals((Object)connectorType4));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedConfigurationPropertiesItem("I&-zTId&D");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConnectorType connectorType2 = new ConnectorType();
      boolean boolean0 = connectorType1.equals(connectorType2);
      assertFalse(boolean0);
      
      connectorType0.getRecognizedSecuredProperties();
      connectorType0.toString();
      connectorType1.getRecognizedAdditionalProperties();
      connectorType0.setRecognizedConfigurationProperties(linkedList0);
      boolean boolean1 = connectorType0.equals("");
      assertFalse(boolean1);
      
      connectorType1.setRecognizedSecuredProperties((List<String>) null);
      connectorType1.recognizedAdditionalProperties((List<String>) null);
      assertFalse(connectorType0.equals((Object)connectorType2));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ElementType elementType0 = new ElementType();
      elementType0.getElementSuperTypeNames();
      ConnectorType connectorType1 = connectorType0.recognizedAdditionalProperties((List<String>) null);
      ConnectorType connectorType2 = connectorType1.addRecognizedAdditionalPropertiesItem("");
      elementType0.setElementSuperTypeNames((List<String>) null);
      elementType0.toString();
      ConnectorType connectorType3 = connectorType2.addRecognizedSecuredPropertiesItem("kz#wW");
      connectorType3.getConnectorProviderClassName();
      ConnectorType connectorType4 = new ConnectorType();
      connectorType4.getRecognizedSecuredProperties();
      ConnectorType connectorType5 = connectorType1.recognizedSecuredProperties((List<String>) null);
      connectorType2.getConnectorProviderClassName();
      ConnectorType connectorType6 = connectorType2.connectorProviderClassName(" depends on not successfully finished methods");
      ConnectorType connectorType7 = connectorType0.addRecognizedConfigurationPropertiesItem("");
      connectorType7.toString();
      connectorType7.guid("`W,p9N_S'8/hI");
      connectorType6.addRecognizedConfigurationPropertiesItem((String) null);
      ConnectorType connectorType8 = connectorType7.addRecognizedAdditionalPropertiesItem("kz#wW");
      connectorType8.addRecognizedAdditionalPropertiesItem("");
      connectorType7.recognizedSecuredProperties((List<String>) null);
      connectorType6.hashCode();
      connectorType1.addRecognizedAdditionalPropertiesItem("");
      connectorType0.getRecognizedAdditionalProperties();
      ConnectorType connectorType9 = connectorType7.recognizedConfigurationProperties((List<String>) null);
      boolean boolean0 = connectorType9.equals(connectorType4);
      assertFalse(boolean0);
      
      connectorType5.getRecognizedConfigurationProperties();
      Random.setNextRandom(0);
      connectorType5.connectorProviderClassName("Z>|nd");
      assertFalse(connectorType0.equals((Object)connectorType4));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedSecuredPropertiesItem(">)}^ @5P<");
      LogLevel logLevel0 = LogLevel.DEBUG;
      ByteBufFormat byteBufFormat0 = ByteBufFormat.HEX_DUMP;
      LoggingHandler loggingHandler0 = new LoggingHandler(">)}^ @5P<", logLevel0, byteBufFormat0);
      ConnectorType connectorType2 = connectorType1.addRecognizedSecuredPropertiesItem(">)}^ @5P<");
      connectorType1.equals(loggingHandler0);
      ConnectorType connectorType3 = connectorType0.addRecognizedAdditionalPropertiesItem(">)}^ @5P<");
      connectorType3.displayName("sg&");
      Vector<String> vector0 = new Vector<String>();
      connectorType1.setRecognizedSecuredProperties(vector0);
      ConnectorType connectorType4 = connectorType2.recognizedAdditionalProperties(vector0);
      connectorType0.getRecognizedConfigurationProperties();
      connectorType1.setRecognizedSecuredProperties(vector0);
      connectorType2.getRecognizedAdditionalProperties();
      connectorType0.getConnectorProviderClassName();
      connectorType0.equals(connectorType4);
      ConnectorType connectorType5 = connectorType3.addRecognizedAdditionalPropertiesItem(".data.sent");
      ConnectorType connectorType6 = connectorType0.recognizedConfigurationProperties(vector0);
      List<String> list0 = connectorType4.getRecognizedAdditionalProperties();
      connectorType5.equals(connectorType4);
      connectorType3.setConnectorProviderClassName("");
      connectorType3.addRecognizedAdditionalPropertiesItem("mismatch in classes between ");
      connectorType6.recognizedAdditionalProperties(list0);
      connectorType2.connectorProviderClassName("");
      List<String> list1 = connectorType1.getRecognizedAdditionalProperties();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedAdditionalPropertiesItem("");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      List<String> list0 = xmlSuite1.getLocalListeners();
      connectorType1.setRecognizedAdditionalProperties(list0);
      ConnectorType connectorType2 = connectorType1.connectorProviderClassName("");
      ConnectorType connectorType3 = connectorType2.addRecognizedConfigurationPropertiesItem("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      connectorType3.recognizedSecuredProperties(linkedList0);
      connectorType1.setRecognizedConfigurationProperties(list0);
      connectorType2.equals(connectorType3);
      String string0 = connectorType2.toString();
      String string1 = connectorType1.getConnectorProviderClassName();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedSecuredPropertiesItem("");
      ConnectorType connectorType2 = connectorType1.connectorProviderClassName("");
      XmlSuite xmlSuite0 = new XmlSuite();
      Classification classification0 = new Classification();
      Classification classification1 = classification0.classificationName("MultiValueMap must not be null");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Classification classification2 = classification1.classificationProperties(hashMap0);
      connectorType0.addClassificationsItem(classification2);
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getExcludedGroups();
      ConnectorType connectorType3 = connectorType2.recognizedConfigurationProperties(list0);
      // Undeclared exception!
      try { 
        connectorType3.addRecognizedConfigurationPropertiesItem("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      String string0 = "";
      ConnectorType connectorType1 = connectorType0.addRecognizedConfigurationPropertiesItem("");
      XmlSuite xmlSuite0 = new XmlSuite();
      connectorType0.url("");
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      xmlTest0.setThreadCount((int) xmlSuite0.DEFAULT_VERBOSE);
      List<String> list0 = xmlTest0.getIncludedGroups();
      ConnectorType connectorType2 = connectorType1.recognizedAdditionalProperties(list0);
      String string1 = "    connectorProviderClassName: ";
      connectorType0.setDescription("    connectorProviderClassName: ");
      // Undeclared exception!
      try { 
        connectorType2.addRecognizedAdditionalPropertiesItem("    connectorProviderClassName: ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 1658);
      List<String> list0 = xmlTest0.getIncludedGroups();
      ConnectorType connectorType1 = connectorType0.recognizedAdditionalProperties(list0);
      ConnectorType connectorType2 = connectorType1.recognizedSecuredProperties(list0);
      ConnectorType connectorType3 = connectorType2.recognizedConfigurationProperties(list0);
      // Undeclared exception!
      try { 
        connectorType3.addRecognizedSecuredPropertiesItem("y-asK6E. sn");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedSecuredPropertiesItem("rW");
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getLocalListeners();
      ConnectorType connectorType2 = connectorType1.recognizedSecuredProperties(list0);
      ConnectorType connectorType3 = connectorType2.recognizedConfigurationProperties(list0);
      connectorType3.getConnectorProviderClassName();
      connectorType1.hashCode();
      connectorType2.guid("rW");
      connectorType3.getRecognizedConfigurationProperties();
      connectorType2.setConnectorProviderClassName("rW");
      assertSame(connectorType0, connectorType2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getExcludes();
      ConnectorType connectorType1 = connectorType0.recognizedSecuredProperties(list0);
      connectorType1.toIndentedString(xmlRun0);
      ConnectorType connectorType2 = connectorType1.recognizedConfigurationProperties(list0);
      Meaning meaning0 = new Meaning();
      Meaning meaning1 = meaning0.description("org.testng.xml.XmlRun@0000000002");
      meaning1.getExtendedProperties();
      connectorType2.extendedProperties((Map<String, Object>) null);
      boolean boolean0 = connectorType0.equals("org.testng.xml.XmlRun@0000000002");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.connectorProviderClassName("fm+oab");
      ConnectorType connectorType2 = connectorType1.addRecognizedSecuredPropertiesItem((String) null);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      List<String> list0 = xmlSuite1.getListeners();
      ConnectorType connectorType3 = connectorType2.recognizedConfigurationProperties(list0);
      List<String> list1 = connectorType3.getRecognizedAdditionalProperties();
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getExcludedGroups();
      ConnectorType connectorType1 = connectorType0.recognizedSecuredProperties(list0);
      connectorType1.setDescription("=+`}.m?Ix&");
      connectorType1.recognizedConfigurationProperties(list0);
      connectorType0.toIndentedString(connectorType1);
      List<String> list1 = connectorType0.getRecognizedSecuredProperties();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedConfigurationPropertiesItem("_u2<DNWOvi");
      connectorType0.setDisplayName("_u2<DNWOvi");
      ConnectorType connectorType2 = connectorType1.addRecognizedSecuredPropertiesItem("_u2<DNWOvi");
      connectorType2.getRecognizedSecuredProperties();
      connectorType1.getRecognizedSecuredProperties();
      String string0 = connectorType1.getConnectorProviderClassName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.recognizedAdditionalProperties((List<String>) null);
      connectorType1.toString();
      ConnectorType connectorType2 = connectorType1.recognizedConfigurationProperties((List<String>) null);
      ConnectorType connectorType3 = connectorType2.addRecognizedAdditionalPropertiesItem("class ConnectorType {\n");
      Object object0 = new Object();
      String string0 = connectorType3.toIndentedString(object0);
      ConnectorType connectorType4 = connectorType3.connectorProviderClassName("class ConnectorType {\n");
      String string1 = connectorType4.getConnectorProviderClassName();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getListeners();
      ConnectorType connectorType1 = connectorType0.recognizedConfigurationProperties(list0);
      ConnectorType connectorType2 = connectorType1.addRecognizedConfigurationPropertiesItem("5(K?-h*");
      ConnectorType connectorType3 = connectorType2.recognizedSecuredProperties(list0);
      ConnectorType connectorType4 = connectorType3.recognizedAdditionalProperties(list0);
      connectorType4.getRecognizedAdditionalProperties();
      connectorType0.setRecognizedConfigurationProperties(list0);
      assertSame(connectorType0, connectorType1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedAdditionalPropertiesItem("]au4z2yb&zZ$3~A");
      ConnectorType connectorType2 = connectorType1.addRecognizedConfigurationPropertiesItem(" to get combined.");
      List<String> list0 = connectorType0.getRecognizedConfigurationProperties();
      ConnectorType connectorType3 = connectorType2.recognizedSecuredProperties(list0);
      ConnectorType connectorType4 = connectorType3.connectorProviderClassName(" to get combined.");
      ConnectorType connectorType5 = connectorType4.addRecognizedSecuredPropertiesItem(" to get combined.");
      ConnectorType connectorType6 = connectorType5.recognizedConfigurationProperties(list0);
      assertSame(connectorType6, connectorType5);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      connectorType0.addRecognizedAdditionalPropertiesItem("]au4z2yb&zZ$3~A");
      connectorType0.getRecognizedConfigurationProperties();
      ConnectorType connectorType1 = connectorType0.recognizedSecuredProperties((List<String>) null);
      ConnectorType connectorType2 = connectorType1.connectorProviderClassName(" to get combined.");
      ConnectorType connectorType3 = connectorType2.addRecognizedSecuredPropertiesItem(" to get combined.");
      ConnectorType connectorType4 = connectorType3.recognizedConfigurationProperties((List<String>) null);
      assertSame(connectorType3, connectorType4);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getIncludes();
      ConnectorType connectorType1 = connectorType0.recognizedAdditionalProperties(list0);
      ConnectorType connectorType2 = connectorType1.recognizedSecuredProperties(list0);
      Vector<String> vector0 = new Vector<String>();
      ConnectorType connectorType3 = connectorType2.recognizedConfigurationProperties(vector0);
      ConnectorType connectorType4 = connectorType3.addRecognizedSecuredPropertiesItem("Flux");
      assertSame(connectorType2, connectorType4);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedAdditionalPropertiesItem("com.ibm.watson.data.client.model.ConnectorType");
      connectorType1.setConnectorProviderClassName("6U\"MX >Ik");
      ConnectorType connectorType2 = connectorType0.addRecognizedAdditionalPropertiesItem((String) null);
      assertSame(connectorType2, connectorType0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedSecuredPropertiesItem("    recognizedAdditionalProperties: ");
      ConnectorType connectorType2 = connectorType1.recognizedConfigurationProperties((List<String>) null);
      ConnectorType connectorType3 = connectorType2.addRecognizedAdditionalPropertiesItem((String) null);
      connectorType3.hashCode();
      connectorType3.setGuid("VS");
      ConnectorType connectorType4 = connectorType3.recognizedSecuredProperties((List<String>) null);
      ConnectorType connectorType5 = connectorType4.recognizedAdditionalProperties((List<String>) null);
      ConnectorType connectorType6 = connectorType5.addRecognizedSecuredPropertiesItem("\n");
      LinkedList<Meaning> linkedList0 = new LinkedList<Meaning>();
      connectorType6.meanings(linkedList0);
      connectorType5.addRecognizedSecuredPropertiesItem("    recognizedAdditionalProperties: ");
      connectorType4.equals(connectorType5);
      connectorType0.setRecognizedSecuredProperties((List<String>) null);
      connectorType5.getRecognizedAdditionalProperties();
      Integer.getInteger("A}1");
      connectorType2.equals((Object) null);
      ConnectorType connectorType7 = connectorType3.addRecognizedAdditionalPropertiesItem((String) null);
      assertNull(connectorType7.getQualifiedName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      Vector<String> vector0 = new Vector<String>();
      ConnectorType connectorType1 = connectorType0.recognizedConfigurationProperties(vector0);
      ConnectorType connectorType2 = connectorType1.addRecognizedConfigurationPropertiesItem("    recognizedConfigurationProperties: ");
      ConnectorType connectorType3 = connectorType2.recognizedSecuredProperties(vector0);
      ConnectorType connectorType4 = connectorType3.connectorProviderClassName("    recognizedConfigurationProperties: ");
      ConnectorType connectorType5 = connectorType4.recognizedAdditionalProperties(vector0);
      assertSame(connectorType5, connectorType3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedConfigurationPropertiesItem("reactor.ipc.netty.http.client.MonoHttpClientResponse");
      ConnectorType connectorType2 = connectorType1.addRecognizedSecuredPropertiesItem("reactor.ipc.netty.http.client.MonoHttpClientResponse");
      ConnectorType connectorType3 = connectorType2.addRecognizedSecuredPropertiesItem("reactor.ipc.netty.http.client.MonoHttpClientResponse");
      assertSame(connectorType2, connectorType3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedConfigurationPropertiesItem("");
      ConnectorType connectorType2 = connectorType1.addRecognizedSecuredPropertiesItem("");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConnectorType connectorType3 = connectorType2.recognizedSecuredProperties(arrayList0);
      ConnectorType connectorType4 = connectorType3.addRecognizedAdditionalPropertiesItem("");
      ConnectorType connectorType5 = connectorType4.recognizedConfigurationProperties(arrayList0);
      connectorType5.getRecognizedSecuredProperties();
      boolean boolean0 = connectorType2.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedConfigurationPropertiesItem("SINGLE_EVENTEXECUTOR_PER_GROUP");
      ConnectorType connectorType2 = connectorType1.recognizedAdditionalProperties((List<String>) null);
      ConnectorType connectorType3 = connectorType2.recognizedSecuredProperties((List<String>) null);
      ConnectorType connectorType4 = connectorType3.addRecognizedAdditionalPropertiesItem("SINGLE_EVENTEXECUTOR_PER_GROUP");
      ConnectorType connectorType5 = connectorType4.addRecognizedSecuredPropertiesItem("SINGLE_EVENTEXECUTOR_PER_GROUP");
      boolean boolean0 = connectorType5.equals(connectorType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      List<String> list0 = xmlSuite1.getSuiteFiles();
      ConnectorType connectorType1 = connectorType0.recognizedSecuredProperties(list0);
      connectorType0.hashCode();
      connectorType1.setRecognizedConfigurationProperties(list0);
      assertNull(connectorType1.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      connectorType0.setRecognizedConfigurationProperties((List<String>) null);
      connectorType0.setConnectorProviderClassName("~s$KxfE");
      List<String> list0 = connectorType0.getRecognizedConfigurationProperties();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ElementType elementType0 = new ElementType();
      ElementOrigin elementOrigin0 = ElementOrigin.DEREGISTERED_REPOSITORY;
      ElementType elementType1 = elementType0.elementOrigin(elementOrigin0);
      ElementType elementType2 = elementType1.elementTypeDescription("^dk~jl{gPo/<=c");
      ElementType elementType3 = elementType2.elementLicense("^dk~jl{gPo/<=c");
      elementType3.getElementSuperTypeNames();
      connectorType0.setRecognizedAdditionalProperties((List<String>) null);
      assertNull(connectorType0.getUrl());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedConfigurationPropertiesItem("");
      ConnectorType connectorType2 = connectorType1.addRecognizedAdditionalPropertiesItem("");
      assertNull(connectorType2.getDescription());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedAdditionalPropertiesItem("");
      List<String> list0 = connectorType1.getRecognizedSecuredProperties();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      connectorType0.setConnectorProviderClassName("");
      assertNull(connectorType0.getQualifiedName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedSecuredPropertiesItem("j1?HeRYIh6Q!T");
      List<String> list0 = connectorType1.getRecognizedAdditionalProperties();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      Vector<String> vector0 = new Vector<String>();
      ConnectorType connectorType1 = connectorType0.recognizedSecuredProperties(vector0);
      connectorType1.setRecognizedConfigurationProperties(vector0);
      assertNull(connectorType1.getDescription());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      XmlDefine xmlDefine0 = new XmlDefine();
      List<String> list0 = xmlDefine0.getIncludes();
      ConnectorType connectorType1 = connectorType0.recognizedConfigurationProperties(list0);
      connectorType1.setRecognizedSecuredProperties(list0);
      ConnectorType connectorType2 = connectorType1.connectorProviderClassName("");
      assertSame(connectorType0, connectorType2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ConnectorType connectorType1 = connectorType0.recognizedAdditionalProperties(arrayList0);
      ConnectorType connectorType2 = connectorType1.recognizedAdditionalProperties(arrayList0);
      assertSame(connectorType2, connectorType1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      connectorType0.qualifiedName("|rvrQsC)lu2oC_d");
      connectorType0.toString();
      String string0 = connectorType0.getConnectorProviderClassName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      connectorType0.connectorProviderClassName("2R`9pTHmpq*5+X)T");
      connectorType0.setRecognizedConfigurationProperties((List<String>) null);
      assertNull(connectorType0.getUrl());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      connectorType0.setRecognizedSecuredProperties(linkedList0);
      assertNull(connectorType0.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = connectorType0.addRecognizedConfigurationPropertiesItem("I&-zTId&D");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConnectorType connectorType2 = new ConnectorType();
      boolean boolean0 = connectorType1.equals(connectorType2);
      assertFalse(boolean0);
      
      boolean boolean1 = connectorType0.equals("I&-zTId&D");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = new ConnectorType();
      boolean boolean0 = connectorType0.equals(connectorType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ConnectorType connectorType1 = new ConnectorType();
      assertTrue(connectorType1.equals((Object)connectorType0));
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConnectorType connectorType2 = connectorType0.addRecognizedSecuredPropertiesItem("I&-zTId&D");
      boolean boolean0 = connectorType1.equals(connectorType2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      Stack<String> stack0 = new Stack<String>();
      ConnectorType connectorType1 = connectorType0.recognizedSecuredProperties(stack0);
      ConnectorType connectorType2 = connectorType1.recognizedConfigurationProperties(stack0);
      connectorType2.toString();
      connectorType0.addRecognizedSecuredPropertiesItem("\n");
      connectorType1.setRecognizedSecuredProperties(stack0);
      assertNull(connectorType1.getGuid());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ElementType elementType0 = new ElementType();
      elementType0.getElementSuperTypeNames();
      ConnectorType connectorType1 = connectorType0.recognizedAdditionalProperties((List<String>) null);
      ConnectorType connectorType2 = connectorType1.addRecognizedAdditionalPropertiesItem(">G<!)-jfnT;.KAX");
      ConnectorType connectorType3 = connectorType0.addRecognizedConfigurationPropertiesItem("#");
      connectorType3.guid("~@L;");
      ConnectorType connectorType4 = connectorType3.recognizedConfigurationProperties((List<String>) null);
      connectorType4.equals(connectorType2);
      connectorType2.getRecognizedConfigurationProperties();
      ConnectorType connectorType5 = connectorType0.recognizedConfigurationProperties((List<String>) null);
      assertSame(connectorType5, connectorType3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ElementType elementType0 = new ElementType();
      elementType0.getElementSuperTypeNames();
      ConnectorType connectorType1 = new ConnectorType();
      ConnectorType connectorType2 = connectorType1.recognizedConfigurationProperties((List<String>) null);
      connectorType1.getRecognizedSecuredProperties();
      connectorType1.getConnectorProviderClassName();
      connectorType2.toString();
      connectorType0.guid("class ConnectorType {\n    qualifiedName: null\n    type: null\n    guid: null\n    url: null\n    classifications: null\n    additionalProperties: null\n    meanings: null\n    extendedProperties: null\n    name: null\n    description: null\n    connectorProviderClassName: null\n    recognizedAdditionalProperties: null\n    recognizedConfigurationProperties: null\n    recognizedSecuredProperties: null\n}");
      connectorType0.getRecognizedAdditionalProperties();
      ConnectorType connectorType3 = connectorType0.recognizedConfigurationProperties((List<String>) null);
      connectorType0.recognizedSecuredProperties((List<String>) null);
      connectorType3.equals(connectorType2);
      connectorType2.getRecognizedConfigurationProperties();
      assertFalse(connectorType2.equals((Object)connectorType0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      ElementType elementType0 = new ElementType();
      elementType0.getElementSuperTypeNames();
      ConnectorType connectorType1 = connectorType0.recognizedAdditionalProperties((List<String>) null);
      ConnectorType connectorType2 = new ConnectorType();
      connectorType2.getConnectorProviderClassName();
      ConnectorType connectorType3 = new ConnectorType();
      ConnectorType connectorType4 = connectorType1.connectorProviderClassName("");
      ConnectorType connectorType5 = connectorType0.addRecognizedConfigurationPropertiesItem((String) null);
      connectorType4.addRecognizedConfigurationPropertiesItem((String) null);
      ConnectorType connectorType6 = connectorType5.addRecognizedAdditionalPropertiesItem("");
      ConnectorType connectorType7 = connectorType6.addRecognizedAdditionalPropertiesItem((String) null);
      connectorType5.recognizedSecuredProperties((List<String>) null);
      connectorType4.hashCode();
      connectorType2.setRecognizedAdditionalProperties((List<String>) null);
      connectorType1.addRecognizedAdditionalPropertiesItem((String) null);
      connectorType7.equals("");
      connectorType5.equals(connectorType3);
      connectorType2.getRecognizedConfigurationProperties();
      assertFalse(connectorType2.equals((Object)connectorType1));
      assertTrue(connectorType2.equals((Object)connectorType3));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConnectorType connectorType0 = new ConnectorType();
      connectorType0.getRecognizedConfigurationProperties();
      ConnectorType connectorType1 = connectorType0.recognizedConfigurationProperties((List<String>) null);
      ConnectorType connectorType2 = connectorType1.connectorProviderClassName("tL2x($!PD~2~[U9-Ap");
      connectorType0.setDescription("Pt!3b6*x'[GGxbsva");
      connectorType2.setRecognizedConfigurationProperties((List<String>) null);
      connectorType0.toString();
      connectorType2.setConnectorProviderClassName("tL2x($!PD~2~[U9-Ap");
      connectorType0.equals((Object) null);
      ConnectorType connectorType3 = connectorType0.addRecognizedSecuredPropertiesItem("class ConnectorType {\n    qualifiedName: null\n    type: null\n    guid: null\n    url: null\n    classifications: null\n    additionalProperties: null\n    meanings: null\n    extendedProperties: null\n    name: null\n    description: java.lang.String@0000000003\n    connectorProviderClassName: java.lang.String@0000000002\n    recognizedAdditionalProperties: null\n    recognizedConfigurationProperties: null\n    recognizedSecuredProperties: null\n}");
      assertSame(connectorType3, connectorType2);
  }
}
