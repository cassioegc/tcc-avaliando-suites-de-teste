/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:27:05 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.Connection;
import com.ibm.watson.data.client.model.DataPlatformConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataPlatformConfig_ESTest extends DataPlatformConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      DataPlatformConfig dataPlatformConfig1 = dataPlatformConfig0.dataPlatformServerURL("%FLjDQwU\"&=");
      String string0 = dataPlatformConfig1.getDataPlatformServerURL();
      assertEquals("%FLjDQwU\"&=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      DataPlatformConfig dataPlatformConfig1 = dataPlatformConfig0.dataPlatformServerOutTopicName("org.testng.internal.DynamicGraph$Edges");
      String string0 = dataPlatformConfig1.getDataPlatformServerOutTopicName();
      assertEquals("org.testng.internal.DynamicGraph$Edges", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      dataPlatformConfig0.dataPlatformServerOutTopicName("");
      String string0 = dataPlatformConfig0.getDataPlatformServerOutTopicName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      dataPlatformConfig0.dataPlatformServerName("    dataPlatformServerOutTopic: ");
      String string0 = dataPlatformConfig0.getDataPlatformServerName();
      assertEquals("    dataPlatformServerOutTopic: ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      dataPlatformConfig0.dataPlatformGUID("");
      String string0 = dataPlatformConfig0.getDataPlatformGUID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      Connection connection0 = new Connection();
      connection0.putConfigurationPropertiesItem("%s is not retained at runtime. Please annotate it with @Retention(RUNTIME).", connection0);
      dataPlatformConfig0.setDataPlatformServerOutTopic(connection0);
      // Undeclared exception!
      try { 
        dataPlatformConfig0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      DataPlatformConfig dataPlatformConfig1 = dataPlatformConfig0.dataPlatformServerURL("org.testng.internal.DynamicGraph$Edges");
      String string0 = dataPlatformConfig1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      boolean boolean0 = dataPlatformConfig0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      boolean boolean0 = dataPlatformConfig0.equals(dataPlatformConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      Connection connection0 = new Connection();
      boolean boolean0 = dataPlatformConfig0.equals(connection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      String string0 = dataPlatformConfig0.getDataPlatformServerOutTopicName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      dataPlatformConfig0.setDataPlatformServerOutTopicName("<Vn!._Gk;:");
      assertNull(dataPlatformConfig0.getDataPlatformServerName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      dataPlatformConfig0.dataPlatformServerURL("");
      String string0 = dataPlatformConfig0.getDataPlatformServerURL();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      Connection connection0 = dataPlatformConfig0.getDataPlatformServerOutTopic();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      dataPlatformConfig0.dataPlatformServerName("");
      String string0 = dataPlatformConfig0.getDataPlatformServerName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      Connection connection0 = new Connection();
      dataPlatformConfig0.dataPlatformConnection(connection0);
      Connection connection1 = dataPlatformConfig0.getDataPlatformConnection();
      assertNull(connection1.getClearPassword());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      String string0 = dataPlatformConfig0.getDataPlatformGUID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      String string0 = dataPlatformConfig0.getDataPlatformServerURL();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      Connection connection0 = dataPlatformConfig0.getDataPlatformConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      dataPlatformConfig0.setDataPlatformServerName("CK5sul*8mz");
      assertNull(dataPlatformConfig0.getDataPlatformServerURL());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      String string0 = dataPlatformConfig0.getDataPlatformServerName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      dataPlatformConfig0.setDataPlatformGUID("other");
      assertNull(dataPlatformConfig0.getDataPlatformServerURL());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      dataPlatformConfig0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      Connection connection0 = new Connection();
      dataPlatformConfig0.setDataPlatformConnection(connection0);
      assertNull(dataPlatformConfig0.getDataPlatformServerOutTopicName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      dataPlatformConfig0.setDataPlatformServerURL("X@cWq5]I2>GfNW_Q");
      assertNull(dataPlatformConfig0.getDataPlatformGUID());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      Connection connection0 = new Connection();
      dataPlatformConfig0.dataPlatformServerOutTopic(connection0);
      Connection connection1 = dataPlatformConfig0.getDataPlatformServerOutTopic();
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataPlatformConfig dataPlatformConfig0 = new DataPlatformConfig();
      dataPlatformConfig0.dataPlatformGUID("<Vn!._Gk;:");
      String string0 = dataPlatformConfig0.getDataPlatformGUID();
      assertEquals("<Vn!._Gk;:", string0);
  }
}
