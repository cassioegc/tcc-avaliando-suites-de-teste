/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 22:54:44 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.HrefModel;
import com.ibm.watson.data.client.model.PaginatedParentRelationshipsList;
import com.ibm.watson.data.client.model.RelationshipParentRelationshipEntity;
import io.netty.handler.logging.LoggingHandler;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaginatedParentRelationshipsList_ESTest extends PaginatedParentRelationshipsList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      RelationshipParentRelationshipEntity relationshipParentRelationshipEntity0 = new RelationshipParentRelationshipEntity();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList1 = paginatedParentRelationshipsList0.addResourcesItem(relationshipParentRelationshipEntity0);
      List<RelationshipParentRelationshipEntity> list0 = paginatedParentRelationshipsList1.getResources();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      RelationshipParentRelationshipEntity relationshipParentRelationshipEntity0 = new RelationshipParentRelationshipEntity();
      LinkedList<RelationshipParentRelationshipEntity> linkedList0 = new LinkedList<RelationshipParentRelationshipEntity>();
      List<RelationshipParentRelationshipEntity> list0 = linkedList0.subList(0, 0);
      linkedList0.add(relationshipParentRelationshipEntity0);
      paginatedParentRelationshipsList0.resources(list0);
      // Undeclared exception!
      try { 
        paginatedParentRelationshipsList0.addResourcesItem(relationshipParentRelationshipEntity0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      RelationshipParentRelationshipEntity relationshipParentRelationshipEntity0 = new RelationshipParentRelationshipEntity();
      paginatedParentRelationshipsList0.addResourcesItem(relationshipParentRelationshipEntity0);
      PaginatedParentRelationshipsList paginatedParentRelationshipsList1 = new PaginatedParentRelationshipsList();
      boolean boolean0 = paginatedParentRelationshipsList0.equals(paginatedParentRelationshipsList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      HrefModel hrefModel0 = new HrefModel();
      paginatedParentRelationshipsList0.setLast(hrefModel0);
      PaginatedParentRelationshipsList paginatedParentRelationshipsList1 = new PaginatedParentRelationshipsList();
      boolean boolean0 = paginatedParentRelationshipsList0.equals(paginatedParentRelationshipsList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      PaginatedParentRelationshipsList paginatedParentRelationshipsList1 = new PaginatedParentRelationshipsList();
      boolean boolean0 = paginatedParentRelationshipsList0.equals(paginatedParentRelationshipsList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      boolean boolean0 = paginatedParentRelationshipsList0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      boolean boolean0 = paginatedParentRelationshipsList0.equals(paginatedParentRelationshipsList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      LoggingHandler loggingHandler0 = new LoggingHandler();
      boolean boolean0 = paginatedParentRelationshipsList0.equals(loggingHandler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      String string0 = paginatedParentRelationshipsList0.toString();
      assertEquals("class PaginatedParentRelationshipsList {\n    limit: null\n    count: null\n    first: null\n    next: null\n    offset: null\n    last: null\n    prev: null\n    resources: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      paginatedParentRelationshipsList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      List<RelationshipParentRelationshipEntity> list0 = paginatedParentRelationshipsList0.getResources();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaginatedParentRelationshipsList paginatedParentRelationshipsList0 = new PaginatedParentRelationshipsList();
      LinkedList<RelationshipParentRelationshipEntity> linkedList0 = new LinkedList<RelationshipParentRelationshipEntity>();
      paginatedParentRelationshipsList0.setResources(linkedList0);
      List<RelationshipParentRelationshipEntity> list0 = paginatedParentRelationshipsList0.getResources();
      assertEquals(0, list0.size());
  }
}
