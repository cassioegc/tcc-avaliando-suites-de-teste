/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 22:34:11 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.PaginatedPolicyList;
import com.ibm.watson.data.client.model.ResponsePolicy;
import io.netty.handler.logging.ByteBufFormat;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaginatedPolicyList_ESTest extends PaginatedPolicyList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      LinkedList<ResponsePolicy> linkedList0 = new LinkedList<ResponsePolicy>();
      PaginatedPolicyList paginatedPolicyList1 = paginatedPolicyList0.resources(linkedList0);
      List<ResponsePolicy> list0 = paginatedPolicyList1.getResources();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      Long long0 = new Long(3009L);
      paginatedPolicyList0.setCount(long0);
      PaginatedPolicyList paginatedPolicyList1 = new PaginatedPolicyList();
      boolean boolean0 = paginatedPolicyList0.equals(paginatedPolicyList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      PaginatedPolicyList paginatedPolicyList1 = new PaginatedPolicyList();
      boolean boolean0 = paginatedPolicyList0.equals(paginatedPolicyList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      boolean boolean0 = paginatedPolicyList0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      boolean boolean0 = paginatedPolicyList0.equals(paginatedPolicyList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      Class<ResponsePolicy> class0 = ResponsePolicy.class;
      LogLevel logLevel0 = LogLevel.DEBUG;
      ByteBufFormat byteBufFormat0 = ByteBufFormat.HEX_DUMP;
      LoggingHandler loggingHandler0 = new LoggingHandler(class0, logLevel0, byteBufFormat0);
      boolean boolean0 = paginatedPolicyList0.equals(loggingHandler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      ResponsePolicy responsePolicy0 = new ResponsePolicy();
      PaginatedPolicyList paginatedPolicyList1 = paginatedPolicyList0.addResourcesItem(responsePolicy0);
      List<ResponsePolicy> list0 = paginatedPolicyList1.getResources();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      LinkedList<ResponsePolicy> linkedList0 = new LinkedList<ResponsePolicy>();
      ResponsePolicy responsePolicy0 = new ResponsePolicy();
      paginatedPolicyList0.resources(linkedList0);
      PaginatedPolicyList paginatedPolicyList1 = paginatedPolicyList0.addResourcesItem(responsePolicy0);
      assertNull(paginatedPolicyList1.getCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      LinkedList<ResponsePolicy> linkedList0 = new LinkedList<ResponsePolicy>();
      PaginatedPolicyList paginatedPolicyList1 = paginatedPolicyList0.resources(linkedList0);
      PaginatedPolicyList paginatedPolicyList2 = new PaginatedPolicyList();
      boolean boolean0 = paginatedPolicyList1.equals(paginatedPolicyList2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      paginatedPolicyList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      List<ResponsePolicy> list0 = paginatedPolicyList0.getResources();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      LinkedList<ResponsePolicy> linkedList0 = new LinkedList<ResponsePolicy>();
      paginatedPolicyList0.setResources(linkedList0);
      assertNull(paginatedPolicyList0.getOffset());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaginatedPolicyList paginatedPolicyList0 = new PaginatedPolicyList();
      String string0 = paginatedPolicyList0.toString();
      assertEquals("class PaginatedPolicyList {\n    limit: null\n    count: null\n    first: null\n    next: null\n    offset: null\n    last: null\n    prev: null\n    resources: null\n}", string0);
  }
}
