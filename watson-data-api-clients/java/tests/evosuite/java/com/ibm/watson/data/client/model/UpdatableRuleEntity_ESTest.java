/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 00:43:54 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.CustomAttribute;
import com.ibm.watson.data.client.model.CustomAttributeValueObject;
import com.ibm.watson.data.client.model.UpdatableRuleEntity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UpdatableRuleEntity_ESTest extends UpdatableRuleEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      updatableRuleEntity0.setRevision("zC^C4dQiC(HD82*(lru");
      String string0 = updatableRuleEntity0.getRevision();
      assertEquals("zC^C4dQiC(HD82*(lru", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      UpdatableRuleEntity updatableRuleEntity1 = updatableRuleEntity0.revision("");
      String string0 = updatableRuleEntity1.getRevision();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      CustomAttribute customAttribute0 = new CustomAttribute();
      CustomAttributeValueObject customAttributeValueObject0 = new CustomAttributeValueObject();
      customAttribute0.addValuesItem(customAttributeValueObject0);
      updatableRuleEntity0.addCustomAttributesItem(customAttribute0);
      customAttributeValueObject0.setValue(customAttribute0);
      // Undeclared exception!
      try { 
        updatableRuleEntity0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      UpdatableRuleEntity updatableRuleEntity1 = new UpdatableRuleEntity();
      assertTrue(updatableRuleEntity1.equals((Object)updatableRuleEntity0));
      
      UpdatableRuleEntity updatableRuleEntity2 = updatableRuleEntity1.revision("7");
      boolean boolean0 = updatableRuleEntity0.equals(updatableRuleEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      updatableRuleEntity0.addStewardIdsItem("p!m!9-qU DW");
      UpdatableRuleEntity updatableRuleEntity1 = new UpdatableRuleEntity();
      boolean boolean0 = updatableRuleEntity0.equals(updatableRuleEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      Object object0 = new Object();
      boolean boolean0 = updatableRuleEntity0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      UpdatableRuleEntity updatableRuleEntity1 = new UpdatableRuleEntity();
      boolean boolean0 = updatableRuleEntity0.equals(updatableRuleEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      boolean boolean0 = updatableRuleEntity0.equals(updatableRuleEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      boolean boolean0 = updatableRuleEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      updatableRuleEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      String string0 = updatableRuleEntity0.getRevision();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      String string0 = updatableRuleEntity0.toString();
      assertEquals("class UpdatableRuleEntity {\n    longDescription: null\n    state: null\n    customAttributes: null\n    name: null\n    shortDescription: null\n    effectiveStartDate: null\n    effectiveEndDate: null\n    tags: null\n    stewardIds: null\n    parentCategory: null\n    categories: null\n    policies: null\n    rules: null\n    terms: null\n    classifications: null\n    referenceData: null\n    dataClasses: null\n    revision: null\n}", string0);
  }
}
