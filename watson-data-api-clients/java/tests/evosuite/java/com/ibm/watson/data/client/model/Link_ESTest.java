/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:30:00 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.Link;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.ChannelOutboundHandlerAdapter;
import io.netty.handler.logging.LoggingHandler;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.testng.xml.XmlClass;
import org.testng.xml.XmlDefine;
import org.testng.xml.XmlRun;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Link_ESTest extends Link_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Link link0 = new Link();
      assertNull(link0.getType());
      
      Link link1 = link0.title("");
      LoggingHandler loggingHandler0 = new LoggingHandler("");
      link1.uriBuilder(loggingHandler0);
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      link1.toString();
      link1.getRels();
      link0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      link1.getRels();
      link0.rels((List<String>) null);
      Link link2 = new Link();
      link2.equals(link1);
      link0.setRels((List<String>) null);
      link0.setRel("class Link {\n    uri: null\n    uriBuilder: io.netty.handler.logging.LoggingHandler@0000000003\n    rel: null\n    rels: null\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      Link link3 = link2.uriBuilder((Object) null);
      link3.addRelsItem("class Link {\n    uri: null\n    uriBuilder: io.netty.handler.logging.LoggingHandler@0000000003\n    rel: null\n    rels: null\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      link2.type("class Link {\n    uri: null\n    uriBuilder: io.netty.handler.logging.LoggingHandler@0000000003\n    rel: null\n    rels: null\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      link2.type("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Link link0 = new Link();
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      link0.toString();
      link0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}");
      link0.getRels();
      link0.uriBuilder("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}");
      Link link1 = new Link();
      link1.equals(link0);
      link0.setRel("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}");
      link0.rel("");
      link1.type("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}");
      link1.getRels();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.putParamsItem("", "");
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      link1.toString();
      link1.getRels();
      link0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      link1.getRels();
      link0.rels((List<String>) null);
      Link link2 = new Link();
      link2.equals(link1);
      link0.setRels((List<String>) null);
      link0.setRel("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: java.util.HashMap@0000000002\n}");
      link2.uriBuilder((Object) null);
      link1.rel("");
      link0.hashCode();
      link2.type("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: java.util.HashMap@0000000002\n}");
      link0.title("Jp^dqtf3zs^$KFsV0Trl");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Link link0 = new Link();
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      link0.toString();
      link0.getRels();
      link0.toString();
      link0.getRels();
      link0.rels((List<String>) null);
      Link link1 = new Link();
      link1.equals(link0);
      link0.setRels((List<String>) null);
      link0.setRel("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}");
      link1.uriBuilder((Object) null);
      link0.rel("");
      link1.type("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}");
      XmlClass xmlClass0 = null;
      try {
        xmlClass0 = new XmlClass("J2+,=pVGs", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         // Cannot find class in classpath: J2+,=pVGs
         //
         verifyException("org.testng.xml.XmlClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.type("");
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      link1.toString();
      link1.getRels();
      link0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      link1.getRels();
      link0.rels((List<String>) null);
      Link link2 = new Link();
      link2.equals(link1);
      link0.setRels((List<String>) null);
      link0.setRel("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: java.lang.String@0000000002\n    params: null\n}");
      link2.uriBuilder((Object) null);
      link1.rel("");
      link2.type("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: java.lang.String@0000000002\n    params: null\n}");
      XmlClass xmlClass0 = null;
      try {
        xmlClass0 = new XmlClass("J2+,=pVGs", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         // Cannot find class in classpath: J2+,=pVGs
         //
         verifyException("org.testng.xml.XmlClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Link link0 = new Link();
      String string0 = "";
      Link link1 = link0.title("");
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      String string1 = "\"\\^[f,_p[";
      URI uRI0 = MockURI.aFTPURI;
      link1.uri(uRI0);
      link1.toString();
      link1.getRels();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      link1.getRels();
      link0.rels((List<String>) null);
      Link link2 = new Link();
      link2.equals(link1);
      link0.setRels((List<String>) null);
      link0.setRel("class Link {\n    uri: java.net.URI@0000000004\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      link2.uriBuilder((Object) null);
      link1.rel("");
      link2.type("class Link {\n    uri: java.net.URI@0000000004\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      int int0 = 16;
      XmlClass xmlClass0 = null;
      try {
        xmlClass0 = new XmlClass("J2+,=pVGs", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         // Cannot find class in classpath: J2+,=pVGs
         //
         verifyException("org.testng.xml.XmlClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.title("");
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      link1.toString();
      link1.getRels();
      link0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      link1.getRels();
      link0.rels((List<String>) null);
      Link link2 = new Link();
      link2.equals(link1);
      link0.setRels((List<String>) null);
      link0.setRel("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      link2.uriBuilder((Object) null);
      link1.rel("");
      link2.type("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      XmlClass xmlClass0 = null;
      try {
        xmlClass0 = new XmlClass("J2+,=pVGs", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         // Cannot find class in classpath: J2+,=pVGs
         //
         verifyException("org.testng.xml.XmlClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.title("");
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      Link link2 = link1.addRelsItem("");
      link1.toString();
      List<String> list0 = link1.getRels();
      link2.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      link0.getType();
      link1.getRels();
      link0.rels(list0);
      Link link3 = new Link();
      link3.equals(link2);
      link2.setRels(list0);
      link0.setRel("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: java.util.ArrayList@0000000004\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      link3.uriBuilder((Object) null);
      link1.rel("");
      link3.type((String) null);
      XmlClass xmlClass0 = null;
      try {
        xmlClass0 = new XmlClass("J2+,=pVGs", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         // Cannot find class in classpath: J2+,=pVGs
         //
         verifyException("org.testng.xml.XmlClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.title("");
      link0.getTitle();
      Link link2 = link1.uriBuilder(link0);
      ChannelInboundHandlerAdapter channelInboundHandlerAdapter0 = new ChannelInboundHandlerAdapter();
      link1.equals(channelInboundHandlerAdapter0);
      URI uRI0 = MockURI.aFTPURI;
      link1.uri(uRI0);
      link0.setRel("4");
      link2.getParams();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      xmlTest0.getTimeOut();
      List<String> list0 = xmlTest0.getIncludedGroups();
      link0.rels(list0);
      // Undeclared exception!
      try { 
        link0.addRelsItem((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.rel("mQKen^D89Jyry=R(");
      URI uRI0 = MockURI.URI("io.netty.util.internal.DefaultPriorityQueue", "mQKen^D89Jyry=R(", "%r}>zKK< `[e");
      link1.setUri(uRI0);
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      link1.setUriBuilder(channelOutboundHandlerAdapter0);
      link0.hashCode();
      link0.setUriBuilder("    rel: ");
      Link link2 = link0.putParamsItem("    rel: ", "");
      link0.setType("    rel: ");
      Link link3 = link0.addRelsItem("WLJMf~WO1bD0-[");
      URI uRI1 = link2.getUri();
      Link link4 = link0.putParamsItem("    rel: ", "    rel: ");
      link4.setTitle("");
      link3.uri(uRI1);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      link0.setParams(map0);
      link3.setParams(map0);
      link3.setParams(map0);
      link4.title("L'0]%BVS(&b=");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.title("");
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      Link link2 = link1.addRelsItem("");
      Link link3 = link2.rel("\"^[f,_p[");
      link3.toString();
      List<String> list0 = link1.getRels();
      link3.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      link0.getType();
      link1.getRels();
      link0.rels(list0);
      Link link4 = new Link();
      link4.equals(link2);
      link2.setRels(list0);
      link0.setRel("class Link {\n    uri: null\n    uriBuilder: null\n    rel: java.lang.String@0000000005\n    rels: java.util.ArrayList@0000000004\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      link4.uriBuilder((Object) null);
      link1.rel("");
      link4.type((String) null);
      XmlClass xmlClass0 = null;
      try {
        xmlClass0 = new XmlClass("J2+,=pVGs", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         // Cannot find class in classpath: J2+,=pVGs
         //
         verifyException("org.testng.xml.XmlClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Link link0 = new Link();
      link0.getRel();
      Link link1 = link0.rel((String) null);
      link1.toString();
      link1.setRel("");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Link link2 = link1.rels(arrayList0);
      link2.setTitle("P");
      Link link3 = link1.putParamsItem("*5H5H.S&EAj*um;Stj/", "*5H5H.S&EAj*um;Stj/");
      link0.getRel();
      link0.getParams();
      link3.getParams();
      Map<String, String> map0 = link3.getParams();
      Link link4 = link1.rel("");
      link4.setRels(arrayList0);
      link3.setType("");
      link0.setType("*5H5H.S&EAj*um;Stj/");
      link1.setParams(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Link link0 = new Link();
      XmlRun xmlRun0 = new XmlRun();
      String string0 = "";
      String string1 = xmlRun0.toXml("");
      List<String> list0 = xmlRun0.getIncludes();
      Link link1 = link0.rels(list0);
      link0.uriBuilder("");
      link0.getParams();
      link1.setParams((Map<String, String>) null);
      Link link2 = link0.uriBuilder(link1);
      link2.putParamsItem("", "");
      URI uRI0 = MockURI.aFileURI;
      Link link3 = link2.uri(uRI0);
      Link link4 = link1.rels(list0);
      link4.equals((Object) null);
      link4.hashCode();
      link4.uriBuilder(link0);
      Link link5 = link1.rel(string1);
      link5.rel(string0);
      Link link6 = link1.title(string0);
      link1.setRel(string0);
      link3.toString();
      link6.uri(uRI0);
      link0.getUri();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Link link0 = new Link();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getListeners();
      Link link1 = link0.rels(list0);
      Link link2 = link1.title("");
      Link link3 = link2.rel("");
      URI uRI0 = MockURI.URI("");
      URI uRI1 = MockURI.resolve(uRI0, "");
      URI uRI2 = MockURI.parseServerAuthority(uRI1);
      Link link4 = link3.uri(uRI2);
      Object object0 = new Object();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      link4.params(map0);
      Link link5 = link4.uriBuilder(object0);
      Link link6 = link5.addRelsItem("");
      link5.getUri();
      link5.addRelsItem("");
      link5.setParams(map0);
      link6.setRels(list0);
      // Undeclared exception!
      try { 
        link2.putParamsItem("", "Encountered problems when gathering parameter values for [%s]. Root cause: ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Link link0 = new Link();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Link link1 = link0.params(map0);
      link0.toString();
      link1.type("    rels: ");
      link0.setType("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: java.util.Collections$UnmodifiableMap@0000000002\n}");
      Link link2 = link0.title("c#VjLz~`feXb8&1");
      link0.getUri();
      link2.toString();
      link0.getParams();
      link1.hashCode();
      link1.getType();
      link1.setRel("org.testng.internal.InvokedMethod");
      assertSame(link0, link1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.title("");
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      link1.equals(channelOutboundHandlerAdapter0);
      Link link2 = link0.rel("");
      Link link3 = link1.addRelsItem("");
      Link link4 = link3.rel("\"^[f,_p[");
      link4.toString();
      List<String> list0 = link1.getRels();
      link4.toString();
      link0.getType();
      link1.getRels();
      link2.rels(list0);
      Link link5 = link3.addRelsItem("Jp^dqtf3zs$KFsV0Trl");
      link5.equals(link3);
      link3.setRels(list0);
      link2.setRel("class Link {\n    uri: null\n    uriBuilder: null\n    rel: java.lang.String@0000000005\n    rels: java.util.ArrayList@0000000004\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      link5.uriBuilder((Object) null);
      link1.rel("");
      XmlClass xmlClass0 = null;
      try {
        xmlClass0 = new XmlClass("J2+,=pVGs", 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         // Cannot find class in classpath: J2+,=pVGs
         //
         verifyException("org.testng.xml.XmlClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Link link0 = new Link();
      URI uRI0 = MockURI.aFTPURI;
      Link link1 = link0.uri(uRI0);
      XmlSuite xmlSuite0 = new XmlSuite();
      Map<String, String> map0 = xmlSuite0.getParameters();
      Link link2 = link1.params(map0);
      XmlDefine xmlDefine0 = new XmlDefine();
      List<String> list0 = xmlDefine0.getIncludes();
      Link link3 = link2.rels(list0);
      Link link4 = link1.addRelsItem("");
      Link link5 = link4.uri(uRI0);
      link5.hashCode();
      URI uRI1 = MockURI.aFTPURI;
      link0.setUri(uRI1);
      Link link6 = link3.uriBuilder(link5);
      Link link7 = link6.type((String) null);
      link7.setUri(uRI0);
      link2.setTitle((String) null);
      link2.getUri();
      link0.params(map0);
      link7.setRel("com.ibm.watson.data.client.model.Link");
      assertSame(link7, link1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.addRelsItem((String) null);
      Link link2 = link1.title((String) null);
      URI uRI0 = MockURI.aHttpURI;
      link2.setUri(uRI0);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      xmlSuite1.addExcludedGroup((String) null);
      List<String> list0 = xmlSuite1.getSuiteFiles();
      link1.setRels(list0);
      link1.getRels();
      boolean boolean0 = link0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.putParamsItem("?%_8g6$<H}E", "CaSOYg%_U@K+ Nm");
      XmlSuite xmlSuite0 = new XmlSuite();
      Map<String, String> map0 = xmlSuite0.getAllParameters();
      Link link2 = link1.params(map0);
      Link link3 = link2.addRelsItem((String) null);
      Link link4 = link3.uriBuilder(link1);
      boolean boolean0 = link4.equals(link2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.rel((String) null);
      Link link2 = link0.title("");
      link0.getTitle();
      link0.toString();
      link2.uriBuilder(link1);
      URI uRI0 = MockURI.aFTPURI;
      Link link3 = link2.uri(uRI0);
      link0.setRel("");
      assertSame(link0, link3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.title("\n");
      Vector<java.util.Locale.LanguageRange> vector0 = new Vector<java.util.Locale.LanguageRange>();
      java.util.Locale locale0 = new java.util.Locale("");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) vector0, (Collection<String>) set0);
      Link link2 = link1.rels(list0);
      Link link3 = link2.addRelsItem("");
      Object object0 = new Object();
      Link link4 = link3.uriBuilder(object0);
      Link link5 = link4.putParamsItem((String) null, "");
      link1.addRelsItem((String) null);
      link5.rels(list0);
      String string0 = link3.getRel();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Link link0 = new Link();
      link0.putParamsItem("0!8O&[5Q(7-", "");
      Link link1 = link0.rels((List<String>) null);
      link0.getUriBuilder();
      link1.rels((List<String>) null);
      link1.getRels();
      link0.setRels((List<String>) null);
      String string0 = null;
      Link link2 = link0.rel((String) null);
      link2.addRelsItem("");
      XmlClass xmlClass0 = null;
      try {
        xmlClass0 = new XmlClass((String) null, 2128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Link link0 = new Link();
      link0.setRel("9t* vGi");
      Link link1 = link0.addRelsItem("HTTP/1.0");
      XmlSuite xmlSuite0 = new XmlSuite();
      Link link2 = link0.type("h2cMaxContentLength must be non negative");
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      XmlTest xmlTest0 = new XmlTest(xmlSuite1);
      List<String> list0 = xmlTest0.getExcludedGroups();
      link1.setRels(list0);
      boolean boolean0 = link2.equals(xmlSuite0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Link link0 = new Link();
      XmlSuite xmlSuite0 = new XmlSuite();
      Map<String, String> map0 = xmlSuite0.getAllParameters();
      Link link1 = link0.params(map0);
      xmlSuite0.setSkipFailedInvocationCounts(false);
      Link link2 = link1.type("    rels: ");
      Link link3 = link2.uriBuilder(link0);
      Link link4 = link3.title("~'u\"]hQ]6#ZVs");
      link3.type((String) null);
      Link link5 = link1.title("~'u\"]hQ]6#ZVs");
      link4.title("~'u\"]hQ]6#ZVs");
      link0.setTitle("    rels: ");
      link0.getParams();
      link3.getTitle();
      Link link6 = link0.uriBuilder(link5);
      link6.setTitle("    rels: ");
      assertSame(link6, link1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.title("");
      Link link2 = link1.uri((URI) null);
      Link link3 = link2.uriBuilder("");
      link3.setUri((URI) null);
      Link link4 = link3.rel("");
      link4.equals((Object) null);
      link4.title("");
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getExcludedGroups();
      Link link5 = link0.rels(list0);
      assertSame(link0, link5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.type("");
      Link link2 = link1.rel("][}{7d@5Ic,v9");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      List<String> list0 = xmlSuite1.getListeners();
      Link link3 = link2.rels(list0);
      link3.getRel();
      URI uRI0 = MockURI.URI("(");
      Link link4 = link2.uri(uRI0);
      assertSame(link2, link4);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.type("?!.C#6Sy1Brp5");
      Link link2 = link1.type("");
      link2.getUri();
      Link link3 = link2.putParamsItem("?!.C#6Sy1Brp5", "?!.C#6Sy1Brp5");
      assertSame(link3, link1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Link link0 = new Link();
      link0.setType(".,");
      Link link1 = link0.addRelsItem("");
      Link link2 = link1.type("");
      Link link3 = link2.rels((List<String>) null);
      Link link4 = link3.title("");
      link2.hashCode();
      link4.getParams();
      Link link5 = link4.params((Map<String, String>) null);
      link5.uriBuilder(link2);
      link0.getParams();
      link2.getType();
      URI uRI0 = MockURI.create("");
      link1.setUri(uRI0);
      Link link6 = link3.addRelsItem("");
      assertSame(link3, link6);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.rel("2u15Z_xoZf");
      Link link2 = link1.title("2u15Z_xoZf");
      Link link3 = link2.uriBuilder((Object) null);
      Link link4 = link3.addRelsItem("2u15Z_xoZf");
      Link link5 = link4.putParamsItem("2u15Z_xoZf", ";O`5F");
      Map<String, String> map0 = link5.getParams();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Link link0 = new Link();
      link0.getRels();
      Link link1 = link0.rels((List<String>) null);
      Link link2 = link1.title("^jK&Fz L(Iwhgi");
      String string0 = link2.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Link link0 = new Link();
      URI uRI0 = MockURI.aFileURI;
      Link link1 = link0.uri(uRI0);
      Link link2 = link1.rel("");
      Link link3 = link2.title("4L0MIbq?H%]mGmsPi");
      Link link4 = link3.rels((List<String>) null);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      Map<String, String> map0 = xmlTest0.getAllParameters();
      Link link5 = link4.params(map0);
      URI uRI1 = MockURI.aHttpURI;
      link5.uri(uRI1);
      link5.getParams();
      Link link6 = link5.rel("Vbak]6s= s");
      assertSame(link6, link5);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.rel((String) null);
      Link link2 = link1.type("n");
      link0.getTitle();
      link0.toString();
      link2.uriBuilder(link1);
      URI uRI0 = MockURI.aFTPURI;
      Link link3 = link0.addRelsItem("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: java.lang.String@0000000002\n    params: null\n}");
      Link link4 = link2.uri(uRI0);
      link0.setRel("");
      link4.type("");
      link3.getParams();
      Link link5 = link1.addRelsItem((String) null);
      assertEquals("", link5.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.putParamsItem("2c{s5m", "");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Link link2 = link1.params(map0);
      Link link3 = link2.type("2c{s5m");
      Link link4 = link3.title("");
      Link link5 = link4.rel("bS[:/=u5%");
      assertSame(link5, link0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Link link0 = new Link();
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.normalize(uRI0);
      link0.setUri(uRI1);
      Link link1 = link0.type("[9>+5I-L");
      Vector<String> vector0 = new Vector<String>();
      link1.rels(vector0);
      try { 
        MockURI.URI("[9>+5I-L", "[9>+5I-L", "[9>+5I-L");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: [9>+5I-L:[9%3E+5I-L#[9%3E+5I-L
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.addRelsItem("");
      link1.getTitle();
      String string0 = link1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Link link0 = new Link();
      String string0 = "7fRJ\\ua#&r7]K\\1";
      Link link1 = link0.type(string0);
      Link link2 = link1.putParamsItem(string0, string0);
      Map<String, String> map0 = link0.getParams();
      Link link3 = link2.params(map0);
      assertSame(link2, link3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.addRelsItem("    uriBuilder: ");
      link1.hashCode();
      link0.setType("    uriBuilder: ");
      link0.getType();
      Vector<String> vector0 = new Vector<String>();
      Link link2 = link0.rels(vector0);
      String string0 = link2.getType();
      assertEquals("    uriBuilder: ", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.type("");
      Link link2 = link1.uri((URI) null);
      Link link3 = link2.putParamsItem("", "");
      Link link4 = link3.title("");
      Link link5 = link4.rel("");
      link5.setTitle("doOnConnect");
      assertSame(link5, link4);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.addRelsItem("&~u6mereH");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Link link2 = link1.rels(linkedList0);
      Link link3 = link2.params((Map<String, String>) null);
      URI uRI0 = MockURI.aHttpURI;
      Link link4 = link3.uri(uRI0);
      Link link5 = link4.putParamsItem("&~u6mereH", "&~u6mereH");
      Link link6 = link5.putParamsItem("&~u6mereH", "");
      assertSame(link6, link1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.rel("class Link {\n");
      Link link2 = link1.title("class Link {\n");
      Link link3 = link2.addRelsItem("class Link {\n");
      Link link4 = link3.addRelsItem("class Link {\n");
      assertSame(link2, link4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Link link0 = new Link();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      Map<String, String> map0 = xmlSuite1.getAllParameters();
      link0.setParams(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Link link0 = new Link();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      link0.setRels(linkedList0);
      link0.putParamsItem((String) null, "");
      Link link1 = link0.rels(linkedList0);
      assertNull(link1.getRel());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.putParamsItem("parentDone", "The scheduler returned a null Function");
      List<String> list0 = link1.getRels();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Link link0 = new Link();
      link0.title("");
      link0.setRel("ms)");
      Random.setNextRandom(404);
      try { 
        MockURI.URI("ms)", "", "", "    rel: ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: ms)://#%20%20%20%20rel:%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.rel("");
      Link link2 = link1.uriBuilder("");
      Link link3 = link2.rels((List<String>) null);
      Link link4 = link3.type("");
      Link link5 = link4.addRelsItem("c)*&`HNr");
      URI uRI0 = MockURI.URI("");
      link5.uri(uRI0);
      Link link6 = link1.params((Map<String, String>) null);
      link5.setUriBuilder(link6);
      assertSame(link0, link6);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.type("");
      Object object0 = new Object();
      Link link2 = link1.uriBuilder(object0);
      Link link3 = link2.rel("");
      Object object1 = link3.getUriBuilder();
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.uriBuilder((Object) null);
      String string0 = link1.toString();
      assertEquals("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.rels((List<String>) null);
      Link link2 = link1.addRelsItem("[Ld");
      Link link3 = link2.uri((URI) null);
      String string0 = link3.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Link link0 = new Link();
      String string0 = link0.toString();
      assertEquals("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}", string0);
      
      link0.getRels();
      link0.rel("");
      Link link1 = new Link();
      boolean boolean0 = link1.equals(link0);
      assertFalse(boolean0);
      
      link0.setRel("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}");
      Link link2 = link0.rel("");
      link1.type("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}");
      assertFalse(link1.equals((Object)link2));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Link link0 = new Link();
      link0.toString();
      link0.getRels();
      link0.toString();
      link0.getRels();
      link0.rels((List<String>) null);
      Link link1 = new Link();
      link1.equals(link0);
      link0.setRels((List<String>) null);
      link0.setRel("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}");
      link1.uriBuilder("\"^[f,_p[");
      link1.type("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: null\n}");
      XmlClass xmlClass0 = null;
      try {
        xmlClass0 = new XmlClass("", 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         // Cannot find class in classpath: 
         //
         verifyException("org.testng.xml.XmlClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.rel("mQKen^D89Jyry=R(");
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      link1.setUriBuilder(channelOutboundHandlerAdapter0);
      link0.hashCode();
      link0.setUriBuilder("    rel: ");
      Link link2 = link0.putParamsItem("    rel: ", "");
      link0.setType("    rel: ");
      Link link3 = link0.addRelsItem("WLJMf~WO1bD0-[");
      link2.getUri();
      Link link4 = link0.putParamsItem("    rel: ", "    rel: ");
      link4.setTitle("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      link0.setParams(hashMap0);
      link3.setParams(hashMap0);
      link3.setParams(hashMap0);
      assertEquals("    rel: ", link3.getType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.title("\n");
      Vector<java.util.Locale.LanguageRange> vector0 = new Vector<java.util.Locale.LanguageRange>();
      java.util.Locale locale0 = new java.util.Locale("");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) vector0, (Collection<String>) set0);
      Link link2 = link1.rels(list0);
      Link link3 = link2.rels(list0);
      Object object0 = new Object();
      link3.uriBuilder(object0);
      Link link4 = link0.rel("\n");
      link1.addRelsItem("\n");
      link4.rels(list0);
      link3.getRel();
      assertTrue(list0.contains("\n"));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.title((String) null);
      URI uRI0 = MockURI.aHttpURI;
      link1.setUri(uRI0);
      link0.equals((Object) null);
      Link link2 = link0.params((Map<String, String>) null);
      assertNull(link2.getType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.putParamsItem("", "");
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      link1.toString();
      link1.getRels();
      link0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      link1.getRels();
      link0.rels((List<String>) null);
      Link link2 = new Link();
      boolean boolean0 = link2.equals(link1);
      assertFalse(boolean0);
      
      link2.uriBuilder((Object) null);
      link0.hashCode();
      link2.type("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: null\n    type: null\n    params: java.util.HashMap@0000000002\n}");
      link0.title("");
      assertFalse(link0.equals((Object)link2));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.title("");
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      link1.toString();
      link0.toString();
      link1.getRels();
      Link link2 = new Link();
      boolean boolean0 = link2.equals(link1);
      assertFalse(boolean0);
      
      link0.setRel("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      link2.uriBuilder((Object) null);
      link2.type("class Link {\n    uri: null\n    uriBuilder: null\n    rel: null\n    rels: null\n    title: java.lang.String@0000000002\n    type: null\n    params: null\n}");
      assertFalse(link2.equals((Object)link1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Link link0 = new Link();
      Link link1 = link0.title("");
      link0.getTitle();
      Link link2 = link1.uriBuilder(link0);
      ChannelInboundHandlerAdapter channelInboundHandlerAdapter0 = new ChannelInboundHandlerAdapter();
      boolean boolean0 = link1.equals(channelInboundHandlerAdapter0);
      URI uRI0 = MockURI.aFTPURI;
      link1.uri(uRI0);
      link0.setRel("");
      link2.getParams();
      boolean boolean1 = link0.equals(link2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Link link0 = new Link();
      link0.getType();
      Link link1 = link0.title("K0ioCzOdKh;e-}");
      assertNull(link1.getRel());
  }
}
