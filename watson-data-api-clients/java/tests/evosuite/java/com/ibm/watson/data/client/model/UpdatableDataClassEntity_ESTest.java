/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 00:55:58 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.CustomAttribute;
import com.ibm.watson.data.client.model.CustomAttributeValueObject;
import com.ibm.watson.data.client.model.UpdatableDataClassEntity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UpdatableDataClassEntity_ESTest extends UpdatableDataClassEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      updatableDataClassEntity0.revision("E'u{\"5EUd'");
      String string0 = updatableDataClassEntity0.getRevision();
      assertEquals("E'u{\"5EUd'", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      UpdatableDataClassEntity updatableDataClassEntity1 = updatableDataClassEntity0.revision("");
      String string0 = updatableDataClassEntity1.getRevision();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      CustomAttribute customAttribute0 = new CustomAttribute();
      CustomAttributeValueObject customAttributeValueObject0 = new CustomAttributeValueObject();
      CustomAttributeValueObject customAttributeValueObject1 = customAttributeValueObject0.value(customAttribute0);
      customAttribute0.addValuesItem(customAttributeValueObject1);
      updatableDataClassEntity0.addCustomAttributesItem(customAttribute0);
      // Undeclared exception!
      try { 
        updatableDataClassEntity0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      UpdatableDataClassEntity updatableDataClassEntity1 = new UpdatableDataClassEntity();
      boolean boolean0 = updatableDataClassEntity0.equals(updatableDataClassEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      CustomAttribute customAttribute0 = new CustomAttribute();
      updatableDataClassEntity0.addCustomAttributesItem(customAttribute0);
      UpdatableDataClassEntity updatableDataClassEntity1 = new UpdatableDataClassEntity();
      boolean boolean0 = updatableDataClassEntity0.equals(updatableDataClassEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      Object object0 = new Object();
      boolean boolean0 = updatableDataClassEntity0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      boolean boolean0 = updatableDataClassEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      boolean boolean0 = updatableDataClassEntity0.equals(updatableDataClassEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      updatableDataClassEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      updatableDataClassEntity0.setRevision("N-");
      assertNull(updatableDataClassEntity0.getCaseSensitive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      String string0 = updatableDataClassEntity0.getRevision();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      String string0 = updatableDataClassEntity0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UpdatableDataClassEntity updatableDataClassEntity0 = new UpdatableDataClassEntity();
      UpdatableDataClassEntity updatableDataClassEntity1 = updatableDataClassEntity0.revision("E'u{\"5EUd'");
      UpdatableDataClassEntity updatableDataClassEntity2 = new UpdatableDataClassEntity();
      boolean boolean0 = updatableDataClassEntity1.equals(updatableDataClassEntity2);
      assertFalse(boolean0);
  }
}
