/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:03:41 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.ArtifactWorkflowData;
import com.ibm.watson.data.client.model.Category;
import com.ibm.watson.data.client.model.CategoryEntity;
import com.ibm.watson.data.client.model.RelationshipObject;
import com.ibm.watson.data.client.model.Workflow;
import com.ibm.watson.data.client.model.enums.GlossaryObjectDraftMode;
import com.ibm.watson.data.client.model.enums.WorkflowAction;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.testng.internal.DynamicGraph;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArtifactWorkflowData_ESTest extends ArtifactWorkflowData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      DynamicGraph<Workflow> dynamicGraph0 = new DynamicGraph<Workflow>();
      Workflow workflow0 = new Workflow();
      List<Workflow> list0 = dynamicGraph0.getDependenciesFor(workflow0);
      artifactWorkflowData0.setWorkflows(list0);
      List<Workflow> list1 = artifactWorkflowData0.getWorkflows();
      assertFalse(list1.contains(workflow0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Category category0 = new Category();
      ArtifactWorkflowData artifactWorkflowData1 = artifactWorkflowData0.oldParentCategory(category0);
      Category category1 = artifactWorkflowData1.getOldParentCategory();
      assertSame(category0, category1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      MockDate mockDate0 = new MockDate();
      artifactWorkflowData0.oldEffectiveStartDate(mockDate0);
      Date date0 = artifactWorkflowData0.getOldEffectiveStartDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      MockDate mockDate0 = new MockDate();
      artifactWorkflowData0.setOldEffectiveEndDate(mockDate0);
      Date date0 = artifactWorkflowData0.getOldEffectiveEndDate();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      GlossaryObjectDraftMode glossaryObjectDraftMode0 = GlossaryObjectDraftMode.MARKED_FOR_DELETION;
      ArtifactWorkflowData artifactWorkflowData1 = artifactWorkflowData0.draftMode(glossaryObjectDraftMode0);
      GlossaryObjectDraftMode glossaryObjectDraftMode1 = artifactWorkflowData1.getDraftMode();
      assertEquals("marked_for_deletion", glossaryObjectDraftMode1.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      artifactWorkflowData0.baseUrl(": RFC2616 token cannot have separator chars such as '");
      String string0 = artifactWorkflowData0.getBaseUrl();
      assertEquals(": RFC2616 token cannot have separator chars such as '", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      artifactWorkflowData0.baseUrl("");
      String string0 = artifactWorkflowData0.getBaseUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Category category0 = new Category();
      CategoryEntity categoryEntity0 = new CategoryEntity();
      RelationshipObject relationshipObject0 = new RelationshipObject();
      relationshipObject0.setEntity(category0);
      CategoryEntity categoryEntity1 = categoryEntity0.addHasTypesCategoryRelsItem(relationshipObject0);
      Category category1 = category0.entity(categoryEntity1);
      artifactWorkflowData0.oldParentCategory(category1);
      // Undeclared exception!
      try { 
        artifactWorkflowData0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Category category0 = new Category();
      ArtifactWorkflowData artifactWorkflowData1 = new ArtifactWorkflowData();
      assertTrue(artifactWorkflowData1.equals((Object)artifactWorkflowData0));
      
      ArtifactWorkflowData artifactWorkflowData2 = artifactWorkflowData0.oldParentCategory(category0);
      boolean boolean0 = artifactWorkflowData2.equals(artifactWorkflowData1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      ArtifactWorkflowData artifactWorkflowData1 = new ArtifactWorkflowData();
      assertTrue(artifactWorkflowData1.equals((Object)artifactWorkflowData0));
      
      MockDate mockDate0 = new MockDate(32, 32, (-2), (-3622), 32, (-5178));
      artifactWorkflowData1.oldEffectiveStartDate(mockDate0);
      boolean boolean0 = artifactWorkflowData1.equals(artifactWorkflowData0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      ArtifactWorkflowData artifactWorkflowData1 = new ArtifactWorkflowData();
      assertTrue(artifactWorkflowData1.equals((Object)artifactWorkflowData0));
      
      MockDate mockDate0 = new MockDate(595, 595, 5);
      artifactWorkflowData0.setOldEffectiveEndDate(mockDate0);
      boolean boolean0 = artifactWorkflowData0.equals(artifactWorkflowData1);
      assertFalse(artifactWorkflowData1.equals((Object)artifactWorkflowData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      GlossaryObjectDraftMode glossaryObjectDraftMode0 = GlossaryObjectDraftMode.MARKED_FOR_DELETION;
      artifactWorkflowData0.draftMode(glossaryObjectDraftMode0);
      ArtifactWorkflowData artifactWorkflowData1 = new ArtifactWorkflowData();
      boolean boolean0 = artifactWorkflowData1.equals(artifactWorkflowData0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      ArtifactWorkflowData artifactWorkflowData1 = new ArtifactWorkflowData();
      assertTrue(artifactWorkflowData1.equals((Object)artifactWorkflowData0));
      
      artifactWorkflowData0.baseUrl("");
      boolean boolean0 = artifactWorkflowData1.equals(artifactWorkflowData0);
      assertFalse(artifactWorkflowData1.equals((Object)artifactWorkflowData0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      WorkflowAction workflowAction0 = WorkflowAction.GET;
      ArtifactWorkflowData artifactWorkflowData1 = new ArtifactWorkflowData();
      artifactWorkflowData1.action(workflowAction0);
      boolean boolean0 = artifactWorkflowData1.equals(artifactWorkflowData0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Workflow workflow0 = new Workflow();
      boolean boolean0 = artifactWorkflowData0.equals(workflow0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      ArtifactWorkflowData artifactWorkflowData1 = new ArtifactWorkflowData();
      boolean boolean0 = artifactWorkflowData1.equals(artifactWorkflowData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      boolean boolean0 = artifactWorkflowData0.equals(artifactWorkflowData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      boolean boolean0 = artifactWorkflowData0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Workflow workflow0 = new Workflow();
      artifactWorkflowData0.addWorkflowsItem(workflow0);
      List<Workflow> list0 = artifactWorkflowData0.getWorkflows();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      LinkedList<Workflow> linkedList0 = new LinkedList<Workflow>();
      artifactWorkflowData0.workflows(linkedList0);
      Workflow workflow0 = new Workflow();
      ArtifactWorkflowData artifactWorkflowData1 = artifactWorkflowData0.addWorkflowsItem(workflow0);
      assertNull(artifactWorkflowData1.getAction());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      MockDate mockDate0 = new MockDate(595, 595, 595);
      ArtifactWorkflowData artifactWorkflowData1 = artifactWorkflowData0.oldEffectiveEndDate(mockDate0);
      assertNull(artifactWorkflowData1.getAction());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Date date0 = artifactWorkflowData0.getOldEffectiveEndDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Category category0 = new Category();
      artifactWorkflowData0.setOldParentCategory(category0);
      assertNull(artifactWorkflowData0.getDraftMode());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      List<Workflow> list0 = artifactWorkflowData0.getWorkflows();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      ArtifactWorkflowData artifactWorkflowData1 = artifactWorkflowData0.baseUrl("");
      String string0 = artifactWorkflowData1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      artifactWorkflowData0.getAction();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      GlossaryObjectDraftMode glossaryObjectDraftMode0 = GlossaryObjectDraftMode.MARKED_FOR_ARCHIVAL;
      artifactWorkflowData0.setDraftMode(glossaryObjectDraftMode0);
      assertNull(artifactWorkflowData0.getAction());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      artifactWorkflowData0.setOldEffectiveStartDate((Date) null);
      assertNull(artifactWorkflowData0.getDraftMode());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      artifactWorkflowData0.getDraftMode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Category category0 = artifactWorkflowData0.getOldParentCategory();
      assertNull(category0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Category category0 = new Category();
      ArtifactWorkflowData artifactWorkflowData1 = artifactWorkflowData0.oldParentCategory(category0);
      ArtifactWorkflowData artifactWorkflowData2 = new ArtifactWorkflowData();
      LinkedList<Workflow> linkedList0 = new LinkedList<Workflow>();
      artifactWorkflowData0.setWorkflows(linkedList0);
      artifactWorkflowData2.oldParentCategory(category0);
      boolean boolean0 = artifactWorkflowData2.equals(artifactWorkflowData1);
      assertFalse(artifactWorkflowData2.equals((Object)artifactWorkflowData1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      artifactWorkflowData0.setBaseUrl("");
      assertNull(artifactWorkflowData0.getAction());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      String string0 = artifactWorkflowData0.getBaseUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      WorkflowAction workflowAction0 = WorkflowAction.UPDATE;
      artifactWorkflowData0.setAction(workflowAction0);
      assertNull(artifactWorkflowData0.getDraftMode());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      artifactWorkflowData0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Date date0 = artifactWorkflowData0.getOldEffectiveStartDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      WorkflowAction workflowAction0 = WorkflowAction.CREATE_DRAFT;
      ArtifactWorkflowData artifactWorkflowData1 = artifactWorkflowData0.action(workflowAction0);
      WorkflowAction workflowAction1 = artifactWorkflowData1.getAction();
      assertSame(workflowAction1, workflowAction0);
  }
}
