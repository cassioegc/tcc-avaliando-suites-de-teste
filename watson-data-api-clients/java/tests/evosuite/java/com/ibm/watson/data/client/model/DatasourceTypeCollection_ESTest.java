/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:57:58 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.DatasourceType;
import com.ibm.watson.data.client.model.DatasourceTypeCollection;
import com.ibm.watson.data.client.model.HrefModel;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatasourceTypeCollection_ESTest extends DatasourceTypeCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      Integer integer0 = new Integer((-1511));
      datasourceTypeCollection0.setTotalCount(integer0);
      Integer integer1 = datasourceTypeCollection0.getTotalCount();
      assertEquals((-1511), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      Integer integer0 = new Integer(0);
      datasourceTypeCollection0.totalCount(integer0);
      Integer integer1 = datasourceTypeCollection0.getTotalCount();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      datasourceTypeCollection0.setTotalCount(integer0);
      Integer integer1 = datasourceTypeCollection0.getTotalCount();
      assertEquals(10, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      Integer integer0 = new Integer(680);
      datasourceTypeCollection0.totalCount(integer0);
      Integer integer1 = datasourceTypeCollection0.getTotalCount();
      assertEquals(680, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      Stack<DatasourceType> stack0 = new Stack<DatasourceType>();
      datasourceTypeCollection0.resources(stack0);
      List<DatasourceType> list0 = datasourceTypeCollection0.getResources();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      DatasourceType datasourceType0 = new DatasourceType();
      datasourceTypeCollection0.addResourcesItem(datasourceType0);
      List<DatasourceType> list0 = datasourceTypeCollection0.getResources();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = new HrefModel();
      datasourceTypeCollection0.prev(hrefModel0);
      HrefModel hrefModel1 = datasourceTypeCollection0.getPrev();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      Integer integer0 = new Integer(0);
      datasourceTypeCollection0.offset(integer0);
      Integer integer1 = datasourceTypeCollection0.getOffset();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      datasourceTypeCollection0.offset(integer0);
      Integer integer1 = datasourceTypeCollection0.getOffset();
      assertEquals(10, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      Integer integer0 = Integer.valueOf((-1344));
      DatasourceTypeCollection datasourceTypeCollection1 = datasourceTypeCollection0.offset(integer0);
      Integer integer1 = datasourceTypeCollection1.getOffset();
      assertEquals((-1344), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      DatasourceTypeCollection datasourceTypeCollection1 = new DatasourceTypeCollection();
      assertTrue(datasourceTypeCollection1.equals((Object)datasourceTypeCollection0));
      
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      datasourceTypeCollection1.totalCount(integer0);
      boolean boolean0 = datasourceTypeCollection1.equals(datasourceTypeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      DatasourceTypeCollection datasourceTypeCollection1 = new DatasourceTypeCollection();
      assertTrue(datasourceTypeCollection1.equals((Object)datasourceTypeCollection0));
      
      Integer integer0 = Integer.getInteger("", 11);
      datasourceTypeCollection0.setOffset(integer0);
      boolean boolean0 = datasourceTypeCollection1.equals(datasourceTypeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = new HrefModel();
      DatasourceTypeCollection datasourceTypeCollection1 = new DatasourceTypeCollection();
      assertTrue(datasourceTypeCollection1.equals((Object)datasourceTypeCollection0));
      
      datasourceTypeCollection0.setLast(hrefModel0);
      boolean boolean0 = datasourceTypeCollection1.equals(datasourceTypeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      DatasourceTypeCollection datasourceTypeCollection1 = new DatasourceTypeCollection();
      assertTrue(datasourceTypeCollection1.equals((Object)datasourceTypeCollection0));
      
      HrefModel hrefModel0 = new HrefModel();
      DatasourceTypeCollection datasourceTypeCollection2 = datasourceTypeCollection1.first(hrefModel0);
      DatasourceTypeCollection datasourceTypeCollection3 = datasourceTypeCollection2.next(hrefModel0);
      datasourceTypeCollection0.setFirst(hrefModel0);
      boolean boolean0 = datasourceTypeCollection3.equals(datasourceTypeCollection0);
      assertFalse(datasourceTypeCollection1.equals((Object)datasourceTypeCollection0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      DatasourceTypeCollection datasourceTypeCollection1 = new DatasourceTypeCollection();
      boolean boolean0 = datasourceTypeCollection1.equals(datasourceTypeCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      DatasourceTypeCollection datasourceTypeCollection1 = new DatasourceTypeCollection();
      assertTrue(datasourceTypeCollection1.equals((Object)datasourceTypeCollection0));
      
      HrefModel hrefModel0 = new HrefModel();
      datasourceTypeCollection1.first(hrefModel0);
      boolean boolean0 = datasourceTypeCollection1.equals(datasourceTypeCollection0);
      assertFalse(datasourceTypeCollection1.equals((Object)datasourceTypeCollection0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      DatasourceTypeCollection datasourceTypeCollection1 = new DatasourceTypeCollection();
      Vector<DatasourceType> vector0 = new Vector<DatasourceType>();
      datasourceTypeCollection1.resources(vector0);
      boolean boolean0 = datasourceTypeCollection1.equals(datasourceTypeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      DatasourceType datasourceType0 = new DatasourceType();
      boolean boolean0 = datasourceTypeCollection0.equals(datasourceType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      boolean boolean0 = datasourceTypeCollection0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      boolean boolean0 = datasourceTypeCollection0.equals(datasourceTypeCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      DatasourceTypeCollection datasourceTypeCollection1 = new DatasourceTypeCollection();
      assertTrue(datasourceTypeCollection1.equals((Object)datasourceTypeCollection0));
      
      HrefModel hrefModel0 = new HrefModel();
      DatasourceTypeCollection datasourceTypeCollection2 = datasourceTypeCollection1.prev(hrefModel0);
      boolean boolean0 = datasourceTypeCollection2.equals(datasourceTypeCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      DatasourceType datasourceType0 = new DatasourceType();
      DatasourceTypeCollection datasourceTypeCollection1 = datasourceTypeCollection0.addResourcesItem(datasourceType0);
      DatasourceTypeCollection datasourceTypeCollection2 = datasourceTypeCollection1.addResourcesItem(datasourceType0);
      assertSame(datasourceTypeCollection2, datasourceTypeCollection0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = new HrefModel();
      datasourceTypeCollection0.last(hrefModel0);
      HrefModel hrefModel1 = datasourceTypeCollection0.getLast();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = datasourceTypeCollection0.getPrev();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = new HrefModel();
      DatasourceTypeCollection datasourceTypeCollection1 = datasourceTypeCollection0.next(hrefModel0);
      HrefModel hrefModel1 = datasourceTypeCollection1.getNext();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = new HrefModel();
      DatasourceTypeCollection datasourceTypeCollection1 = datasourceTypeCollection0.first(hrefModel0);
      HrefModel hrefModel1 = datasourceTypeCollection1.getFirst();
      assertSame(hrefModel0, hrefModel1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      String string0 = datasourceTypeCollection0.toString();
      assertEquals("class DatasourceTypeCollection {\n    resources: null\n    first: null\n    prev: null\n    next: null\n    last: null\n    offset: null\n    totalCount: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = new HrefModel();
      datasourceTypeCollection0.prev(hrefModel0);
      String string0 = datasourceTypeCollection0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = new HrefModel();
      datasourceTypeCollection0.setNext(hrefModel0);
      assertNull(hrefModel0.getHref());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = datasourceTypeCollection0.getLast();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      Integer integer0 = datasourceTypeCollection0.getOffset();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      Integer integer0 = datasourceTypeCollection0.getTotalCount();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      Vector<DatasourceType> vector0 = new Vector<DatasourceType>();
      datasourceTypeCollection0.setResources(vector0);
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      datasourceTypeCollection0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      List<DatasourceType> list0 = datasourceTypeCollection0.getResources();
      DatasourceTypeCollection datasourceTypeCollection1 = datasourceTypeCollection0.resources(list0);
      assertNull(datasourceTypeCollection1.getOffset());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = datasourceTypeCollection0.getNext();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = new HrefModel();
      datasourceTypeCollection0.setPrev(hrefModel0);
      assertNull(datasourceTypeCollection0.getOffset());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DatasourceTypeCollection datasourceTypeCollection0 = new DatasourceTypeCollection();
      HrefModel hrefModel0 = datasourceTypeCollection0.getFirst();
      assertNull(hrefModel0);
  }
}
