/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 14:09:29 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.NewPolicyEntity;
import com.ibm.watson.data.client.model.NewRelationship;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.testng.xml.XmlRun;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NewPolicyEntity_ESTest extends NewPolicyEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      newPolicyEntity0.workflowState("2jgPJGE");
      String string0 = newPolicyEntity0.getWorkflowState();
      assertEquals("2jgPJGE", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      newPolicyEntity0.workflowState("");
      String string0 = newPolicyEntity0.getWorkflowState();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      newPolicyEntity0.terms(stack0);
      List<NewRelationship> list0 = newPolicyEntity0.getTerms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      newPolicyEntity0.addTermsItem(newRelationship0);
      List<NewRelationship> list0 = newPolicyEntity0.getTerms();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getExcludes();
      newPolicyEntity0.tags(list0);
      List<String> list1 = newPolicyEntity0.getTags();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      newPolicyEntity0.addTagsItem("language");
      List<String> list0 = newPolicyEntity0.getTags();
      assertTrue(list0.contains("language"));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      newPolicyEntity0.subPolicies(vector0);
      List<NewRelationship> list0 = newPolicyEntity0.getSubPolicies();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      newPolicyEntity0.addSubPoliciesItem((NewRelationship) null);
      List<NewRelationship> list0 = newPolicyEntity0.getSubPolicies();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = newPolicyEntity0.shortDescription("?7=|");
      String string0 = newPolicyEntity1.getShortDescription();
      assertEquals("?7=|", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      newPolicyEntity0.rules(stack0);
      List<NewRelationship> list0 = newPolicyEntity0.getRules();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      newPolicyEntity0.name("");
      String string0 = newPolicyEntity0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      MockDate mockDate0 = new MockDate(12, 12, 12, 12, 0, 12);
      newPolicyEntity0.effectiveStartDate(mockDate0);
      Date date0 = newPolicyEntity0.getEffectiveStartDate();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      MockDate mockDate0 = new MockDate(0, 8, 728);
      newPolicyEntity0.effectiveEndDate(mockDate0);
      Date date0 = newPolicyEntity0.getEffectiveEndDate();
      assertEquals("Fri Aug 29 00:00:00 GMT 1902", date0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      newPolicyEntity0.dataClasses(stack0);
      List<NewRelationship> list0 = newPolicyEntity0.getDataClasses();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = newPolicyEntity0.addDataClassesItem((NewRelationship) null);
      List<NewRelationship> list0 = newPolicyEntity1.getDataClasses();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      newPolicyEntity0.setClassifications(stack0);
      List<NewRelationship> list0 = newPolicyEntity0.getClassifications();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      newPolicyEntity0.categories(arrayList0);
      List<NewRelationship> list0 = newPolicyEntity0.getCategories();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>(13);
      vector0.add(newRelationship0);
      newPolicyEntity0.categories(vector0);
      List<NewRelationship> list0 = newPolicyEntity0.getCategories();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      // Undeclared exception!
      try { 
        newPolicyEntity0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.GlossaryObjectEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_VERBOSE);
      List<String> list0 = xmlTest0.getExcludedGroups();
      newPolicyEntity0.tags(list0);
      // Undeclared exception!
      try { 
        newPolicyEntity0.addTagsItem("1}^ZZW?");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      StringBuilder stringBuilder0 = new StringBuilder();
      newPolicyEntity0.toString(stringBuilder0);
      assertEquals("    longDescription: null\n    state: null\n    customAttributes: null\n    name: null\n    shortDescription: null\n    effectiveStartDate: null\n    effectiveEndDate: null\n    workflowState: null\n    tags: null\n    parentPolicy: null\n    subPolicies: null\n    parentCategory: null\n    categories: null\n    terms: null\n    dataClasses: null\n    rules: null\n    classifications: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      assertTrue(newPolicyEntity1.equals((Object)newPolicyEntity0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      NewPolicyEntity newPolicyEntity2 = newPolicyEntity0.addClassificationsItem(newRelationship0);
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      assertTrue(newPolicyEntity1.equals((Object)newPolicyEntity0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      NewPolicyEntity newPolicyEntity2 = newPolicyEntity0.addRulesItem(newRelationship0);
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      assertTrue(newPolicyEntity1.equals((Object)newPolicyEntity0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      NewPolicyEntity newPolicyEntity2 = newPolicyEntity0.addTermsItem(newRelationship0);
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      assertTrue(newPolicyEntity1.equals((Object)newPolicyEntity0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      NewPolicyEntity newPolicyEntity2 = newPolicyEntity0.parentCategory(newRelationship0);
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      assertTrue(newPolicyEntity1.equals((Object)newPolicyEntity0));
      
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getExcludedGroups();
      newPolicyEntity0.setTags(list0);
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      assertTrue(newPolicyEntity1.equals((Object)newPolicyEntity0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      newPolicyEntity0.setWorkflowState("kZq3<|d0fGX");
      NewPolicyEntity newPolicyEntity2 = newPolicyEntity0.addClassificationsItem(newRelationship0);
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      assertTrue(newPolicyEntity1.equals((Object)newPolicyEntity0));
      
      MockDate mockDate0 = new MockDate();
      newPolicyEntity0.setEffectiveStartDate(mockDate0);
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      assertTrue(newPolicyEntity1.equals((Object)newPolicyEntity0));
      
      newPolicyEntity1.setShortDescription("kZq3<|d0fGX");
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity0);
      assertFalse(newPolicyEntity1.equals((Object)newPolicyEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      assertTrue(newPolicyEntity1.equals((Object)newPolicyEntity0));
      
      newPolicyEntity0.setName("initialSupplier");
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      newPolicyEntity1.setLongDescription("@qP");
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      boolean boolean0 = newPolicyEntity0.equals(newRelationship0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      boolean boolean0 = newPolicyEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      boolean boolean0 = newPolicyEntity0.equals(newPolicyEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = new NewPolicyEntity();
      assertTrue(newPolicyEntity1.equals((Object)newPolicyEntity0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      newPolicyEntity1.parentPolicy(newRelationship0);
      boolean boolean0 = newPolicyEntity1.equals(newPolicyEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      newPolicyEntity0.addClassificationsItem(newRelationship0);
      List<NewRelationship> list0 = newPolicyEntity0.getClassifications();
      assertTrue(list0.contains(newRelationship0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      NewPolicyEntity newPolicyEntity1 = newPolicyEntity0.classifications(linkedList0);
      newPolicyEntity1.addClassificationsItem((NewRelationship) null);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      NewPolicyEntity newPolicyEntity1 = newPolicyEntity0.addRulesItem(newRelationship0);
      List<NewRelationship> list0 = newPolicyEntity1.getRules();
      assertTrue(list0.contains(newRelationship0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      NewPolicyEntity newPolicyEntity1 = newPolicyEntity0.addDataClassesItem(newRelationship0);
      NewPolicyEntity newPolicyEntity2 = newPolicyEntity1.addDataClassesItem(newRelationship0);
      assertNull(newPolicyEntity2.getState());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      newPolicyEntity0.addTermsItem(newRelationship0);
      NewPolicyEntity newPolicyEntity1 = newPolicyEntity0.addTermsItem(newRelationship0);
      assertNull(newPolicyEntity1.getName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      NewPolicyEntity newPolicyEntity1 = newPolicyEntity0.addCategoriesItem(newRelationship0);
      assertNull(newPolicyEntity1.getName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      newPolicyEntity0.categories(linkedList0);
      NewPolicyEntity newPolicyEntity1 = newPolicyEntity0.addCategoriesItem((NewRelationship) null);
      assertSame(newPolicyEntity0, newPolicyEntity1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      newPolicyEntity0.addSubPoliciesItem(newRelationship0);
      NewPolicyEntity newPolicyEntity1 = newPolicyEntity0.addSubPoliciesItem(newRelationship0);
      assertSame(newPolicyEntity1, newPolicyEntity0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      Date date0 = newPolicyEntity0.getEffectiveStartDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      newPolicyEntity0.setRules(linkedList0);
      NewPolicyEntity newPolicyEntity1 = newPolicyEntity0.addRulesItem((NewRelationship) null);
      assertNull(newPolicyEntity1.getName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      newPolicyEntity0.setCategories(stack0);
      assertNull(newPolicyEntity0.getState());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      newPolicyEntity0.setTerms((List<NewRelationship>) null);
      assertNull(newPolicyEntity0.getLongDescription());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      List<NewRelationship> list0 = newPolicyEntity0.getSubPolicies();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      newPolicyEntity0.setParentPolicy(newRelationship0);
      NewRelationship newRelationship1 = newPolicyEntity0.getParentPolicy();
      assertNull(newRelationship1.getDescription());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      String string0 = newPolicyEntity0.getWorkflowState();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      List<NewRelationship> list0 = newPolicyEntity0.getRules();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = newPolicyEntity0.getParentPolicy();
      assertNull(newRelationship0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      newPolicyEntity0.setSubPolicies((List<NewRelationship>) null);
      assertNull(newPolicyEntity0.getState());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      Date date0 = newPolicyEntity0.getEffectiveEndDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewPolicyEntity newPolicyEntity1 = newPolicyEntity0.name("Z\"kEwN>l{/0i_OK-H8p");
      String string0 = newPolicyEntity1.getName();
      assertEquals("Z\"kEwN>l{/0i_OK-H8p", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      newPolicyEntity0.setParentCategory(newRelationship0);
      assertNull(newPolicyEntity0.getLongDescription());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      newPolicyEntity0.setDataClasses(vector0);
      assertNull(newPolicyEntity0.getName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      String string0 = newPolicyEntity0.getShortDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      List<NewRelationship> list0 = newPolicyEntity0.getClassifications();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      List<NewRelationship> list0 = newPolicyEntity0.getTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      String string0 = newPolicyEntity0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      List<NewRelationship> list0 = newPolicyEntity0.getDataClasses();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = newPolicyEntity0.getParentCategory();
      assertNull(newRelationship0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      List<NewRelationship> list0 = newPolicyEntity0.getCategories();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      List<String> list0 = newPolicyEntity0.getTags();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      newPolicyEntity0.setEffectiveEndDate((Date) null);
      assertNull(newPolicyEntity0.getShortDescription());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      newPolicyEntity0.shortDescription("");
      String string0 = newPolicyEntity0.getShortDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      newPolicyEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      String string0 = newPolicyEntity0.toString();
      assertEquals("class NewPolicyEntity {\n    longDescription: null\n    state: null\n    customAttributes: null\n    name: null\n    shortDescription: null\n    effectiveStartDate: null\n    effectiveEndDate: null\n    workflowState: null\n    tags: null\n    parentPolicy: null\n    subPolicies: null\n    parentCategory: null\n    categories: null\n    terms: null\n    dataClasses: null\n    rules: null\n    classifications: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      NewPolicyEntity newPolicyEntity0 = new NewPolicyEntity();
      NewRelationship newRelationship0 = new NewRelationship();
      newPolicyEntity0.parentCategory(newRelationship0);
      NewRelationship newRelationship1 = newPolicyEntity0.getParentCategory();
      assertNull(newRelationship1.getId());
  }
}
