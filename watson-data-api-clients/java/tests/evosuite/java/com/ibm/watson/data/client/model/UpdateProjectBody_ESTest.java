/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:02:46 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.ProjectCatalog;
import com.ibm.watson.data.client.model.ProjectCompute;
import com.ibm.watson.data.client.model.ProjectDefinedCrowd;
import com.ibm.watson.data.client.model.ProjectFigureEight;
import com.ibm.watson.data.client.model.ProjectGithub;
import com.ibm.watson.data.client.model.ProjectHeader;
import com.ibm.watson.data.client.model.UpdateProjectBody;
import com.ibm.watson.data.client.model.enums.ComputeType;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.testng.ITestNGMethod;
import org.testng.ITestRunnerFactory;
import org.testng.SuiteRunner;
import org.testng.internal.Configuration;
import org.testng.internal.annotations.IgnoreListener;
import org.testng.internal.annotations.JDK15AnnotationFinder;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UpdateProjectBody_ESTest extends UpdateProjectBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      assertNull(projectCompute0.getCrn());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H|DQ>");
      ProjectCompute projectCompute1 = projectCompute0.name("/");
      ComputeType computeType0 = ComputeType.WATSON;
      projectCompute1.type(computeType0);
      projectCompute1.setCrn("/");
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.figureEight(projectFigureEight0);
      updateProjectBody1.getTags();
      updateProjectBody0.tags((List<String>) null);
      UpdateProjectBody updateProjectBody2 = new UpdateProjectBody();
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      updateProjectBody2.getCompute();
      updateProjectBody0.getGithub();
      updateProjectBody0.getDefinedCrowd();
      updateProjectBody0.getCatalog();
      boolean boolean0 = updateProjectBody2.equals(updateProjectBody0);
      assertFalse(boolean0);
      
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.github((ProjectGithub) null);
      updateProjectBody0.compute((List<ProjectCompute>) null);
      assertFalse(updateProjectBody0.equals((Object)updateProjectBody3));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.github(projectGithub0);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      projectFigureEight0.apiKey("f[3jj:hNg[QXpo-})B");
      UpdateProjectBody updateProjectBody2 = new UpdateProjectBody();
      projectGithub0.equals(updateProjectBody2);
      updateProjectBody2.setTags((List<String>) null);
      updateProjectBody2.toString();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.figureEight(projectFigureEight0);
      boolean boolean0 = updateProjectBody3.equals(updateProjectBody0);
      assertFalse(boolean0);
      
      updateProjectBody1.setDefinedCrowd((ProjectDefinedCrowd) null);
      assertFalse(updateProjectBody0.equals((Object)updateProjectBody2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.github(projectGithub0);
      ProjectCompute projectCompute0 = new ProjectCompute();
      ProjectCompute projectCompute1 = projectCompute0.guid("f[3jj:hNg[QXpo-})B");
      UpdateProjectBody updateProjectBody2 = updateProjectBody0.github(projectGithub0);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      projectFigureEight0.apiKey("f[3jj:hNg[QXpo-})B");
      projectGithub0.setRepository("f[3jj:hNg[QXpo-})B");
      UpdateProjectBody updateProjectBody3 = new UpdateProjectBody();
      projectGithub0.equals(updateProjectBody3);
      updateProjectBody3.setTags((List<String>) null);
      updateProjectBody3.toString();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      projectCompute1.properties(integer0);
      ComputeType computeType0 = ComputeType.MACHINE_LEARNING;
      projectCompute1.type(computeType0);
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.definedCrowd((ProjectDefinedCrowd) null);
      boolean boolean0 = updateProjectBody4.equals(updateProjectBody0);
      assertFalse(boolean0);
      
      updateProjectBody2.getFigureEight();
      updateProjectBody4.setFigureEight((ProjectFigureEight) null);
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      ProjectCatalog projectCatalog1 = projectCatalog0.guid(".^ej^GG.]QMhQM>'%");
      updateProjectBody0.setCatalog(projectCatalog1);
      updateProjectBody1.setDefinedCrowd((ProjectDefinedCrowd) null);
      assertFalse(updateProjectBody0.equals((Object)updateProjectBody3));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      ProjectCompute projectCompute1 = projectCompute0.name("/");
      updateProjectBody0.equals((Object) null);
      ComputeType computeType0 = ComputeType.WATSON;
      projectCompute1.type(computeType0);
      projectCompute1.setCrn("/");
      UpdateProjectBody updateProjectBody1 = new UpdateProjectBody();
      assertTrue(updateProjectBody1.equals((Object)updateProjectBody0));
      
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.definedCrowd(projectDefinedCrowd0);
      projectCompute1.setCredentials(projectCompute0);
      updateProjectBody2.toIndentedString("/");
      updateProjectBody2.getCompute();
      updateProjectBody0.getGithub();
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      XmlSuite xmlSuite0 = new XmlSuite();
      Boolean boolean0 = xmlSuite0.skipFailedInvocationCounts();
      ProjectCatalog projectCatalog1 = projectCatalog0._public(boolean0);
      ProjectCatalog projectCatalog2 = projectCatalog1.guid("w&,_lgBHM6");
      updateProjectBody2.catalog(projectCatalog2);
      updateProjectBody2.getDefinedCrowd();
      updateProjectBody0.getCatalog();
      updateProjectBody1.equals(updateProjectBody0);
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.github((ProjectGithub) null);
      assertFalse(updateProjectBody1.equals((Object)updateProjectBody0));
      assertFalse(updateProjectBody3.equals((Object)updateProjectBody0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      UpdateProjectBody updateProjectBody1 = new UpdateProjectBody();
      assertTrue(updateProjectBody1.equals((Object)updateProjectBody0));
      
      ProjectCompute projectCompute0 = new ProjectCompute();
      ProjectCompute projectCompute1 = projectCompute0.guid("f[3jj:hNg[QXpo-})B");
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.addComputeItem(projectCompute1);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      ProjectFigureEight projectFigureEight1 = projectFigureEight0.apiKey("f[3jj:hNg[QXpo-})B");
      projectGithub0.setRepository("f[3jj:hNg[QXpo-})B");
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.figureEight(projectFigureEight1);
      projectGithub0.equals(updateProjectBody3);
      updateProjectBody3.setTags((List<String>) null);
      updateProjectBody3.toString();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      projectCompute1.properties(integer0);
      ComputeType computeType0 = ComputeType.MACHINE_LEARNING;
      projectCompute1.type(computeType0);
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.definedCrowd((ProjectDefinedCrowd) null);
      updateProjectBody4.equals(updateProjectBody0);
      ProjectFigureEight projectFigureEight2 = updateProjectBody2.getFigureEight();
      updateProjectBody4.setFigureEight(projectFigureEight2);
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      ProjectCatalog projectCatalog1 = projectCatalog0.guid(".^ej^GG.]QMhQM>'%");
      updateProjectBody0.setCatalog(projectCatalog1);
      updateProjectBody1.setDefinedCrowd((ProjectDefinedCrowd) null);
      assertFalse(updateProjectBody1.equals((Object)updateProjectBody0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      updateProjectBody0.getCompute();
      UpdateProjectBody updateProjectBody1 = new UpdateProjectBody();
      IgnoreListener ignoreListener0 = new IgnoreListener();
      JDK15AnnotationFinder jDK15AnnotationFinder0 = new JDK15AnnotationFinder(ignoreListener0);
      Configuration configuration0 = new Configuration(jDK15AnnotationFinder0);
      XmlSuite xmlSuite0 = new XmlSuite();
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      ProjectDefinedCrowd projectDefinedCrowd1 = projectDefinedCrowd0.accessKeyId((String) null);
      ProjectDefinedCrowd projectDefinedCrowd2 = projectDefinedCrowd1.accessKeySecret("'");
      UpdateProjectBody updateProjectBody2 = updateProjectBody0.definedCrowd(projectDefinedCrowd2);
      updateProjectBody0.getTags();
      updateProjectBody2.tags((List<String>) null);
      ITestRunnerFactory iTestRunnerFactory0 = mock(ITestRunnerFactory.class, new ViolatedAssumptionAnswer());
      Comparator<ITestNGMethod> comparator0 = (Comparator<ITestNGMethod>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SuiteRunner suiteRunner0 = new SuiteRunner(configuration0, xmlSuite0, "reactor.core.publisher.FluxError", iTestRunnerFactory0, (boolean) xmlSuite0.DEFAULT_JUNIT, comparator0);
      suiteRunner0.getDataProviderListeners();
      XmlSuite xmlSuite1 = suiteRunner0.getXmlSuite();
      Boolean boolean0 = xmlSuite1.getAllowReturnValues();
      updateProjectBody0._public(boolean0);
      updateProjectBody1.getDefinedCrowd();
      updateProjectBody1.equals(updateProjectBody0);
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      projectCatalog0.guid("reactor.core.publisher.FluxError");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("}");
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-334), "reactor.core.publisher.FluxError");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -334
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      updateProjectBody0.getCompute();
      UpdateProjectBody updateProjectBody1 = new UpdateProjectBody();
      IgnoreListener ignoreListener0 = new IgnoreListener();
      JDK15AnnotationFinder jDK15AnnotationFinder0 = new JDK15AnnotationFinder(ignoreListener0);
      Configuration configuration0 = new Configuration(jDK15AnnotationFinder0);
      XmlSuite xmlSuite0 = new XmlSuite();
      ITestRunnerFactory iTestRunnerFactory0 = mock(ITestRunnerFactory.class, new ViolatedAssumptionAnswer());
      Comparator<ITestNGMethod> comparator0 = (Comparator<ITestNGMethod>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SuiteRunner suiteRunner0 = new SuiteRunner(configuration0, xmlSuite0, "reactor.core.publisher.FluxError", iTestRunnerFactory0, (boolean) xmlSuite0.DEFAULT_JUNIT, comparator0);
      suiteRunner0.getDataProviderListeners();
      Boolean boolean0 = xmlSuite0.getAllowReturnValues();
      ProjectHeader projectHeader0 = updateProjectBody0._public(boolean0);
      projectHeader0.setDescription("reactor.core.publisher.FluxError");
      updateProjectBody1.getDefinedCrowd();
      updateProjectBody1.equals(updateProjectBody0);
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      projectCatalog0.guid("reactor.core.publisher.FluxError");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("}");
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-334), "reactor.core.publisher.FluxError");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -334
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      updateProjectBody0.getCompute();
      UpdateProjectBody updateProjectBody1 = new UpdateProjectBody();
      IgnoreListener ignoreListener0 = new IgnoreListener();
      JDK15AnnotationFinder jDK15AnnotationFinder0 = new JDK15AnnotationFinder(ignoreListener0);
      Configuration configuration0 = new Configuration(jDK15AnnotationFinder0);
      XmlSuite xmlSuite0 = new XmlSuite();
      String string0 = "reactor.core.publisher.FluxError";
      ITestRunnerFactory iTestRunnerFactory0 = mock(ITestRunnerFactory.class, new ViolatedAssumptionAnswer());
      Comparator<ITestNGMethod> comparator0 = (Comparator<ITestNGMethod>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SuiteRunner suiteRunner0 = new SuiteRunner(configuration0, xmlSuite0, "reactor.core.publisher.FluxError", iTestRunnerFactory0, (boolean) xmlSuite0.DEFAULT_JUNIT, comparator0);
      suiteRunner0.getDataProviderListeners();
      XmlSuite xmlSuite1 = suiteRunner0.getXmlSuite();
      Boolean boolean0 = xmlSuite1.getAllowReturnValues();
      updateProjectBody0._public(boolean0);
      updateProjectBody1.getDefinedCrowd();
      updateProjectBody1.equals(updateProjectBody0);
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      projectCatalog0.guid("reactor.core.publisher.FluxError");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("}");
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-334), "reactor.core.publisher.FluxError");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -334
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.compute(linkedList0);
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.definedCrowd(projectDefinedCrowd0);
      ProjectGithub projectGithub0 = new ProjectGithub();
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.github(projectGithub0);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.figureEight(projectFigureEight0);
      ProjectCompute projectCompute0 = new ProjectCompute();
      ProjectCompute projectCompute1 = projectCompute0.name((String) null);
      Boolean boolean0 = XmlSuite.DEFAULT_ALLOW_RETURN_VALUES;
      updateProjectBody3._public(boolean0);
      ProjectCompute projectCompute2 = projectCompute1.guid((String) null);
      ProjectCompute projectCompute3 = projectCompute2.properties(projectCompute0);
      UpdateProjectBody updateProjectBody5 = updateProjectBody4.addComputeItem(projectCompute3);
      // Undeclared exception!
      try { 
        updateProjectBody5.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.addComputeItem((ProjectCompute) null);
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      ProjectCatalog projectCatalog1 = projectCatalog0.guid("scalarSubscription(");
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.catalog(projectCatalog1);
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.compute(linkedList0);
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.figureEight((ProjectFigureEight) null);
      ProjectFigureEight projectFigureEight0 = updateProjectBody4.getFigureEight();
      assertNull(projectFigureEight0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.catalog(projectCatalog0);
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.definedCrowd(projectDefinedCrowd0);
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.compute(linkedList0);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.figureEight(projectFigureEight0);
      ProjectGithub projectGithub0 = new ProjectGithub();
      ProjectGithub projectGithub1 = projectGithub0.repository("onBufferOverflow");
      UpdateProjectBody updateProjectBody5 = updateProjectBody4.github(projectGithub1);
      List<ProjectCompute> list0 = updateProjectBody5.getCompute();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.addComputeItem(projectCompute0);
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.catalog(projectCatalog0);
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      ProjectDefinedCrowd projectDefinedCrowd1 = projectDefinedCrowd0.accessKeySecret("io.netty.channel.ChannelInboundHandlerAdapter");
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.definedCrowd(projectDefinedCrowd1);
      ProjectGithub projectGithub0 = new ProjectGithub();
      ProjectGithub projectGithub1 = projectGithub0.repository("    figureEight: ");
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.github(projectGithub1);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      UpdateProjectBody updateProjectBody5 = updateProjectBody4.figureEight(projectFigureEight0);
      ProjectCatalog projectCatalog1 = updateProjectBody5.getCatalog();
      assertNull(projectCatalog1.getPublic());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      ProjectCatalog projectCatalog1 = projectCatalog0._public((Boolean) null);
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.catalog(projectCatalog1);
      ProjectCompute projectCompute0 = new ProjectCompute();
      ProjectCompute projectCompute1 = projectCompute0.crn("S^");
      ProjectCompute projectCompute2 = projectCompute1.label("S^");
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.addComputeItem(projectCompute2);
      List<ProjectCompute> list0 = updateProjectBody2.getCompute();
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.compute(list0);
      List<ProjectCompute> list1 = updateProjectBody3.getCompute();
      assertTrue(list1.contains(projectCompute0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      ProjectGithub projectGithub1 = projectGithub0.repository("W");
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.github(projectGithub1);
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.compute(linkedList0);
      ProjectGithub projectGithub2 = updateProjectBody2.getGithub();
      assertSame(projectGithub0, projectGithub2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      ProjectFigureEight projectFigureEight1 = projectFigureEight0.apiKey("");
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.figureEight(projectFigureEight1);
      ProjectGithub projectGithub0 = new ProjectGithub();
      ProjectGithub projectGithub1 = projectGithub0.repository("");
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.github(projectGithub1);
      ProjectFigureEight projectFigureEight2 = updateProjectBody2.getFigureEight();
      assertSame(projectFigureEight2, projectFigureEight0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.addComputeItem(projectCompute0);
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.compute(linkedList0);
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.figureEight((ProjectFigureEight) null);
      ProjectGithub projectGithub0 = new ProjectGithub();
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.github(projectGithub0);
      updateProjectBody4.getDefinedCrowd();
      updateProjectBody2.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      ProjectGithub projectGithub1 = projectGithub0.repository("_3#hH\"BfWV7eW|#");
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.github(projectGithub1);
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.catalog(projectCatalog0);
      assertNull(updateProjectBody2.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.github(projectGithub0);
      updateProjectBody1.getCompute();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.compute((List<ProjectCompute>) null);
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.definedCrowd(projectDefinedCrowd0);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.figureEight(projectFigureEight0);
      ProjectDefinedCrowd projectDefinedCrowd1 = updateProjectBody4.getDefinedCrowd();
      assertNull(projectDefinedCrowd1.getAccessKeyId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.github(projectGithub0);
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.compute(linkedList0);
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      ProjectDefinedCrowd projectDefinedCrowd1 = projectDefinedCrowd0.accessKeySecret((String) null);
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.definedCrowd(projectDefinedCrowd1);
      ProjectCompute projectCompute0 = new ProjectCompute();
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.addComputeItem(projectCompute0);
      assertSame(updateProjectBody4, updateProjectBody3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      projectCompute0.setCredentials((Object) null);
      updateProjectBody0.addComputeItem(projectCompute0);
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.compute((List<ProjectCompute>) null);
      updateProjectBody1.setCompute((List<ProjectCompute>) null);
      String string0 = updateProjectBody0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.definedCrowd(projectDefinedCrowd0);
      updateProjectBody1.setDefinedCrowd(projectDefinedCrowd0);
      updateProjectBody1.setDefinedCrowd(projectDefinedCrowd0);
      ProjectGithub projectGithub0 = new ProjectGithub();
      ProjectGithub projectGithub1 = projectGithub0.repository("");
      updateProjectBody0.setGithub(projectGithub1);
      assertNull(updateProjectBody0.getDescription());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      ProjectCompute projectCompute1 = projectCompute0.name("/");
      updateProjectBody0.equals((Object) null);
      ComputeType computeType0 = ComputeType.WATSON;
      ProjectCompute projectCompute2 = projectCompute1.type(computeType0);
      projectCompute1.setCrn("/");
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.addComputeItem(projectCompute2);
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.definedCrowd(projectDefinedCrowd0);
      projectCompute1.setCredentials(projectCompute0);
      updateProjectBody2.toIndentedString("/");
      updateProjectBody2.getCompute();
      updateProjectBody0.getGithub();
      updateProjectBody2.getDefinedCrowd();
      updateProjectBody0.getCatalog();
      updateProjectBody1.equals(updateProjectBody0);
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.github((ProjectGithub) null);
      assertNull(updateProjectBody3.getDescription());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      ProjectFigureEight projectFigureEight1 = projectFigureEight0.apiKey("^[LH(7=@i>");
      updateProjectBody0.setFigureEight(projectFigureEight1);
      updateProjectBody0.getCatalog();
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      ProjectDefinedCrowd projectDefinedCrowd1 = projectDefinedCrowd0.accessKeyId("$SharedSecretsCallSiteSupplierFactory");
      ProjectDefinedCrowd projectDefinedCrowd2 = projectDefinedCrowd1.accessKeySecret("$SharedSecretsCallSiteSupplierFactory");
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.definedCrowd(projectDefinedCrowd2);
      assertNull(updateProjectBody1.getDescription());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      Boolean boolean0 = Boolean.valueOf(false);
      ProjectCatalog projectCatalog1 = projectCatalog0._public(boolean0);
      ProjectCatalog projectCatalog2 = projectCatalog1.guid("");
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.catalog(projectCatalog2);
      boolean boolean1 = updateProjectBody1.equals("");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      updateProjectBody0.setGithub((ProjectGithub) null);
      assertNull(updateProjectBody0.getDescription());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      ProjectGithub projectGithub1 = projectGithub0.repository("io.netty.channel.AbstractChannel$AnnotatedConnectException");
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.github(projectGithub1);
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.definedCrowd(projectDefinedCrowd0);
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.definedCrowd(projectDefinedCrowd0);
      assertSame(updateProjectBody3, updateProjectBody0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      updateProjectBody0.getCompute();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.compute((List<ProjectCompute>) null);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.figureEight(projectFigureEight0);
      ProjectGithub projectGithub0 = updateProjectBody2.getGithub();
      assertNull(projectGithub0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      ProjectCompute projectCompute1 = projectCompute0.name("");
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.addComputeItem(projectCompute1);
      updateProjectBody1.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.compute(linkedList0);
      ProjectFigureEight projectFigureEight0 = updateProjectBody1.getFigureEight();
      assertNull(projectFigureEight0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      Boolean boolean0 = Boolean.FALSE;
      ProjectCatalog projectCatalog1 = projectCatalog0._public(boolean0);
      ProjectCatalog projectCatalog2 = projectCatalog1.guid("");
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.catalog(projectCatalog2);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      ProjectFigureEight projectFigureEight1 = projectFigureEight0.apiKey("");
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.figureEight(projectFigureEight1);
      updateProjectBody2.setCatalog(projectCatalog1);
      assertFalse(projectCatalog1.getPublic());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      ProjectCatalog projectCatalog1 = projectCatalog0._public((Boolean) null);
      ProjectCatalog projectCatalog2 = projectCatalog1.guid("\n");
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.catalog(projectCatalog2);
      assertNull(updateProjectBody1.getDescription());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H|DQ>");
      ProjectCompute projectCompute1 = projectCompute0.name("/");
      ComputeType computeType0 = ComputeType.WATSON;
      projectCompute1.type(computeType0);
      projectCompute1.setCrn("/");
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.figureEight(projectFigureEight0);
      updateProjectBody1.getTags();
      UpdateProjectBody updateProjectBody2 = (UpdateProjectBody)updateProjectBody0.tags((List<String>) null);
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      updateProjectBody2.setCatalog(projectCatalog0);
      UpdateProjectBody updateProjectBody3 = new UpdateProjectBody();
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      updateProjectBody3.getCompute();
      updateProjectBody0.getGithub();
      updateProjectBody0.getDefinedCrowd();
      updateProjectBody0.getCatalog();
      boolean boolean0 = updateProjectBody3.equals(updateProjectBody0);
      assertFalse(boolean0);
      
      updateProjectBody3.github((ProjectGithub) null);
      updateProjectBody0.compute((List<ProjectCompute>) null);
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.definedCrowd((ProjectDefinedCrowd) null);
      assertFalse(updateProjectBody4.equals((Object)updateProjectBody2));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      UpdateProjectBody updateProjectBody1 = new UpdateProjectBody();
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      updateProjectBody1.getCompute();
      updateProjectBody1.setDescription(",`*");
      updateProjectBody0.getGithub();
      updateProjectBody0.getCatalog();
      boolean boolean0 = updateProjectBody1.equals(updateProjectBody0);
      assertFalse(boolean0);
      
      updateProjectBody0.figureEight((ProjectFigureEight) null);
      assertFalse(updateProjectBody0.equals((Object)updateProjectBody1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      ProjectCompute projectCompute1 = projectCompute0.name("/");
      updateProjectBody0.equals((Object) null);
      ComputeType computeType0 = ComputeType.WATSON;
      projectCompute1.type(computeType0);
      projectCompute1.setCrn("/");
      UpdateProjectBody updateProjectBody1 = new UpdateProjectBody();
      assertTrue(updateProjectBody1.equals((Object)updateProjectBody0));
      
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.definedCrowd(projectDefinedCrowd0);
      projectCompute1.setCredentials(projectCompute0);
      updateProjectBody2.toIndentedString("/");
      updateProjectBody2.getCompute();
      updateProjectBody2.getDefinedCrowd();
      updateProjectBody0.getCatalog();
      boolean boolean0 = updateProjectBody1.equals(updateProjectBody0);
      assertFalse(updateProjectBody1.equals((Object)updateProjectBody0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      UpdateProjectBody updateProjectBody1 = new UpdateProjectBody();
      ProjectDefinedCrowd projectDefinedCrowd0 = new ProjectDefinedCrowd();
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.addComputeItem(projectCompute0);
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.compute(linkedList0);
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      Boolean boolean0 = XmlSuite.DEFAULT_MIXED;
      projectCompute0.setCredentials(projectCatalog0);
      ProjectCatalog projectCatalog1 = projectCatalog0._public(boolean0);
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.catalog(projectCatalog1);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      UpdateProjectBody updateProjectBody5 = updateProjectBody4.figureEight(projectFigureEight0);
      updateProjectBody5.setCompute(linkedList0);
      ProjectGithub projectGithub0 = new ProjectGithub();
      Boolean boolean1 = XmlSuite.DEFAULT_PRESERVE_ORDER;
      updateProjectBody5.setGithub(projectGithub0);
      UpdateProjectBody updateProjectBody6 = updateProjectBody0.compute(linkedList0);
      updateProjectBody6.addComputeItem(projectCompute0);
      updateProjectBody4.getCatalog();
      UpdateProjectBody updateProjectBody7 = updateProjectBody4.github(projectGithub0);
      linkedList0.removeFirstOccurrence(updateProjectBody0);
      Object object0 = new Object();
      updateProjectBody1.equals(object0);
      UpdateProjectBody updateProjectBody8 = updateProjectBody7.addComputeItem(projectCompute0);
      updateProjectBody6.setGithub(projectGithub0);
      updateProjectBody4.toString();
      updateProjectBody8.compute(linkedList0);
      assertEquals(2, linkedList0.size());
      assertFalse(updateProjectBody1.equals((Object)updateProjectBody0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.github(projectGithub0);
      ProjectCompute projectCompute0 = new ProjectCompute();
      ProjectCompute projectCompute1 = projectCompute0.guid("f[3jj:hNg[QXpo-})B");
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      projectGithub0.setRepository("f[3jj:hNg[QXpo-})B");
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.figureEight(projectFigureEight0);
      updateProjectBody2.setTags((List<String>) null);
      updateProjectBody2.toString();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      projectCompute1.properties(integer0);
      updateProjectBody0.equals(updateProjectBody0);
      ProjectFigureEight projectFigureEight1 = updateProjectBody0.getFigureEight();
      updateProjectBody1.setFigureEight(projectFigureEight1);
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      ProjectCatalog projectCatalog1 = projectCatalog0.guid(".^ej^GG.]QMhQM>'%");
      updateProjectBody0.setCatalog(projectCatalog1);
      updateProjectBody1.setDefinedCrowd((ProjectDefinedCrowd) null);
      assertSame(updateProjectBody1, updateProjectBody2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.github(projectGithub0);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      projectFigureEight0.apiKey("f[3jj:hNg[QXpo-})B");
      UpdateProjectBody updateProjectBody2 = new UpdateProjectBody();
      projectGithub0.equals(updateProjectBody2);
      updateProjectBody2.setTags((List<String>) null);
      updateProjectBody2.toString();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      UpdateProjectBody updateProjectBody3 = updateProjectBody2.definedCrowd((ProjectDefinedCrowd) null);
      boolean boolean0 = updateProjectBody3.equals(updateProjectBody0);
      assertFalse(boolean0);
      
      updateProjectBody1.setDefinedCrowd((ProjectDefinedCrowd) null);
      assertFalse(updateProjectBody0.equals((Object)updateProjectBody2));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      UpdateProjectBody updateProjectBody1 = updateProjectBody0.github(projectGithub0);
      ProjectCompute projectCompute0 = new ProjectCompute();
      ProjectCompute projectCompute1 = projectCompute0.guid("f[3jj:hNg[QXpo-})B");
      UpdateProjectBody updateProjectBody2 = updateProjectBody1.addComputeItem(projectCompute1);
      ProjectFigureEight projectFigureEight0 = new ProjectFigureEight();
      projectFigureEight0.apiKey("f[3jj:hNg[QXpo-})B");
      projectGithub0.setRepository("f[3jj:hNg[QXpo-})B");
      UpdateProjectBody updateProjectBody3 = new UpdateProjectBody();
      projectGithub0.equals(updateProjectBody3);
      updateProjectBody3.setTags((List<String>) null);
      updateProjectBody3.toString();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      projectCompute1.properties(integer0);
      ComputeType computeType0 = ComputeType.MACHINE_LEARNING;
      projectCompute1.type(computeType0);
      UpdateProjectBody updateProjectBody4 = updateProjectBody3.definedCrowd((ProjectDefinedCrowd) null);
      boolean boolean0 = updateProjectBody4.equals(updateProjectBody0);
      assertFalse(boolean0);
      
      updateProjectBody2.getFigureEight();
      updateProjectBody4.setFigureEight((ProjectFigureEight) null);
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      ProjectCatalog projectCatalog1 = projectCatalog0.guid(".^ej^GG.]QMhQM>'%");
      updateProjectBody0.setCatalog(projectCatalog1);
      updateProjectBody1.setDefinedCrowd((ProjectDefinedCrowd) null);
      assertFalse(updateProjectBody0.equals((Object)updateProjectBody3));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      ProjectGithub projectGithub0 = new ProjectGithub();
      LinkedList<ProjectCompute> linkedList0 = new LinkedList<ProjectCompute>();
      ProjectGithub projectGithub1 = new ProjectGithub();
      updateProjectBody0.setGithub(projectGithub1);
      Object object0 = new Object();
      Object object1 = new Object();
      updateProjectBody0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UpdateProjectBody updateProjectBody0 = new UpdateProjectBody();
      UpdateProjectBody updateProjectBody1 = new UpdateProjectBody();
      Comparator<ITestNGMethod> comparator0 = (Comparator<ITestNGMethod>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      updateProjectBody1.getDefinedCrowd();
      updateProjectBody1.equals(updateProjectBody0);
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
  }
}
