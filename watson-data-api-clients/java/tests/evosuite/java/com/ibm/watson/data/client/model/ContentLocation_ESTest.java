/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:21:50 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.ContentInfo;
import com.ibm.watson.data.client.model.ContentLocation;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContentLocation_ESTest extends ContentLocation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      contentLocation0.type("#Ky6");
      String string0 = contentLocation0.getType();
      assertEquals("#Ky6", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      contentLocation0.type("");
      String string0 = contentLocation0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      ContentLocation contentLocation1 = contentLocation0.putLocationItem("", "");
      Map<String, String> map0 = contentLocation1.getLocation();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      contentLocation0.contents((List<ContentInfo>) null);
      List<ContentInfo> list0 = contentLocation0.getContents();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      ContentInfo contentInfo0 = new ContentInfo();
      ContentLocation contentLocation1 = contentLocation0.addContentsItem(contentInfo0);
      List<ContentInfo> list0 = contentLocation1.getContents();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      ContentLocation contentLocation1 = contentLocation0.putConnectionItem("", "class ContentLocation {\n    contents: java.util.ArrayList@0000000003\n    type: null\n    connection: null\n    location: null\n}");
      Map<String, String> map0 = contentLocation1.getConnection();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      contentLocation0.location(map0);
      // Undeclared exception!
      try { 
        contentLocation0.putLocationItem("", "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      contentLocation0.setConnection(map0);
      // Undeclared exception!
      try { 
        contentLocation0.putConnectionItem("}", "f+zpLdYy+*jz");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      contentLocation0.contents((List<ContentInfo>) null);
      ContentInfo contentInfo0 = new ContentInfo();
      // Undeclared exception!
      try { 
        contentLocation0.addContentsItem(contentInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.ContentLocation", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      ContentLocation contentLocation1 = new ContentLocation();
      assertTrue(contentLocation1.equals((Object)contentLocation0));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      contentLocation0.setLocation(hashMap0);
      boolean boolean0 = contentLocation0.equals(contentLocation1);
      assertFalse(contentLocation1.equals((Object)contentLocation0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      contentLocation0.putConnectionItem("Y1ks$sW", "Y1ks$sW");
      ContentLocation contentLocation1 = new ContentLocation();
      boolean boolean0 = contentLocation0.equals(contentLocation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      ContentLocation contentLocation1 = new ContentLocation();
      boolean boolean0 = contentLocation0.equals(contentLocation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      boolean boolean0 = contentLocation0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      boolean boolean0 = contentLocation0.equals(contentLocation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      boolean boolean0 = contentLocation0.equals("Y1ks$sW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      List<ContentInfo> list0 = contentLocation0.getContents();
      contentLocation0.setContents(list0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      Map<String, String> map0 = contentLocation0.getConnection();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      contentLocation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ContentLocation contentLocation1 = contentLocation0.location(hashMap0);
      Map<String, String> map0 = contentLocation1.getLocation();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      contentLocation0.connection(hashMap0);
      Map<String, String> map0 = contentLocation0.getConnection();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      Map<String, String> map0 = contentLocation0.getLocation();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      contentLocation0.setType("5G!s-cnwYC.");
      assertEquals("5G!s-cnwYC.", contentLocation0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      String string0 = contentLocation0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      contentLocation0.type("#Ky6");
      ContentLocation contentLocation1 = new ContentLocation();
      boolean boolean0 = contentLocation0.equals(contentLocation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      ContentInfo contentInfo0 = new ContentInfo();
      contentLocation0.addContentsItem(contentInfo0);
      ContentLocation contentLocation1 = new ContentLocation();
      boolean boolean0 = contentLocation0.equals(contentLocation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ContentLocation contentLocation0 = new ContentLocation();
      String string0 = contentLocation0.getType();
      assertNull(string0);
  }
}
