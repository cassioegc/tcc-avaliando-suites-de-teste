/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:50:19 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.Artifact;
import com.ibm.watson.data.client.model.HrefModel;
import com.ibm.watson.data.client.model.PaginatedResourceArtifact;
import com.ibm.watson.data.client.model.WorkflowEntity;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaginatedResourceArtifact_ESTest extends PaginatedResourceArtifact_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Long long0 = new Long(0);
      paginatedResourceArtifact0.totalCount(long0);
      Long long1 = paginatedResourceArtifact0.getTotalCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Long long0 = new Long(3L);
      PaginatedResourceArtifact paginatedResourceArtifact1 = paginatedResourceArtifact0.totalCount(long0);
      Long long1 = paginatedResourceArtifact1.getTotalCount();
      assertEquals(3L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Long long0 = new Long((-2885L));
      PaginatedResourceArtifact paginatedResourceArtifact1 = paginatedResourceArtifact0.totalCount(long0);
      Long long1 = paginatedResourceArtifact1.getTotalCount();
      assertEquals((-2885L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Stack<Artifact> stack0 = new Stack<Artifact>();
      paginatedResourceArtifact0.resources(stack0);
      List<Artifact> list0 = paginatedResourceArtifact0.getResources();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Artifact artifact0 = new Artifact();
      paginatedResourceArtifact0.addResourcesItem(artifact0);
      List<Artifact> list0 = paginatedResourceArtifact0.getResources();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Integer integer0 = new Integer((-1));
      PaginatedResourceArtifact paginatedResourceArtifact1 = paginatedResourceArtifact0.offset(integer0);
      Integer integer1 = paginatedResourceArtifact1.getOffset();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Integer integer0 = new Integer(0);
      paginatedResourceArtifact0.setOffset(integer0);
      Integer integer1 = paginatedResourceArtifact0.getOffset();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      paginatedResourceArtifact0.offset(integer0);
      Integer integer1 = paginatedResourceArtifact0.getOffset();
      assertEquals(5, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      PaginatedResourceArtifact paginatedResourceArtifact1 = paginatedResourceArtifact0.limit(integer0);
      Integer integer1 = paginatedResourceArtifact1.getLimit();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Integer integer0 = new Integer(0);
      paginatedResourceArtifact0.limit(integer0);
      Integer integer1 = paginatedResourceArtifact0.getLimit();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Integer integer0 = new Integer((-929));
      PaginatedResourceArtifact paginatedResourceArtifact1 = paginatedResourceArtifact0.limit(integer0);
      Integer integer1 = paginatedResourceArtifact1.getLimit();
      assertEquals((-929), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Integer integer0 = new Integer((-1558));
      PaginatedResourceArtifact paginatedResourceArtifact1 = paginatedResourceArtifact0.limit(integer0);
      Integer integer1 = paginatedResourceArtifact1.getLimit();
      assertEquals((-1558), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = new HrefModel();
      PaginatedResourceArtifact paginatedResourceArtifact1 = paginatedResourceArtifact0.first(hrefModel0);
      HrefModel hrefModel1 = paginatedResourceArtifact1.getFirst();
      assertSame(hrefModel0, hrefModel1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Artifact artifact0 = new Artifact();
      paginatedResourceArtifact0.addResourcesItem(artifact0);
      String string0 = paginatedResourceArtifact0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      PaginatedResourceArtifact paginatedResourceArtifact1 = new PaginatedResourceArtifact();
      assertTrue(paginatedResourceArtifact1.equals((Object)paginatedResourceArtifact0));
      
      Artifact artifact0 = new Artifact();
      PaginatedResourceArtifact paginatedResourceArtifact2 = paginatedResourceArtifact1.addResourcesItem(artifact0);
      Long long0 = new Long(1L);
      paginatedResourceArtifact2.totalCount(long0);
      PaginatedResourceArtifact paginatedResourceArtifact3 = paginatedResourceArtifact0.addResourcesItem(artifact0);
      boolean boolean0 = paginatedResourceArtifact3.equals(paginatedResourceArtifact1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      PaginatedResourceArtifact paginatedResourceArtifact1 = new PaginatedResourceArtifact();
      assertTrue(paginatedResourceArtifact1.equals((Object)paginatedResourceArtifact0));
      
      LinkedList<Artifact> linkedList0 = new LinkedList<Artifact>();
      paginatedResourceArtifact0.setResources(linkedList0);
      boolean boolean0 = paginatedResourceArtifact1.equals(paginatedResourceArtifact0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      paginatedResourceArtifact0.setOffset(integer0);
      PaginatedResourceArtifact paginatedResourceArtifact1 = new PaginatedResourceArtifact();
      boolean boolean0 = paginatedResourceArtifact0.equals(paginatedResourceArtifact1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      PaginatedResourceArtifact paginatedResourceArtifact1 = new PaginatedResourceArtifact();
      assertTrue(paginatedResourceArtifact1.equals((Object)paginatedResourceArtifact0));
      
      HrefModel hrefModel0 = new HrefModel();
      PaginatedResourceArtifact paginatedResourceArtifact2 = paginatedResourceArtifact0.next(hrefModel0);
      boolean boolean0 = paginatedResourceArtifact2.equals(paginatedResourceArtifact1);
      assertFalse(paginatedResourceArtifact1.equals((Object)paginatedResourceArtifact0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      PaginatedResourceArtifact paginatedResourceArtifact1 = new PaginatedResourceArtifact();
      assertTrue(paginatedResourceArtifact1.equals((Object)paginatedResourceArtifact0));
      
      Integer integer0 = new Integer(0);
      PaginatedResourceArtifact paginatedResourceArtifact2 = paginatedResourceArtifact1.limit(integer0);
      boolean boolean0 = paginatedResourceArtifact2.equals(paginatedResourceArtifact0);
      assertFalse(paginatedResourceArtifact1.equals((Object)paginatedResourceArtifact0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = new HrefModel();
      PaginatedResourceArtifact paginatedResourceArtifact1 = new PaginatedResourceArtifact();
      paginatedResourceArtifact0.first(hrefModel0);
      boolean boolean0 = paginatedResourceArtifact0.equals(paginatedResourceArtifact1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      boolean boolean0 = paginatedResourceArtifact0.equals(workflowEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      PaginatedResourceArtifact paginatedResourceArtifact1 = new PaginatedResourceArtifact();
      boolean boolean0 = paginatedResourceArtifact1.equals(paginatedResourceArtifact0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      boolean boolean0 = paginatedResourceArtifact0.equals(paginatedResourceArtifact0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      boolean boolean0 = paginatedResourceArtifact0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Artifact artifact0 = new Artifact();
      paginatedResourceArtifact0.addResourcesItem(artifact0);
      PaginatedResourceArtifact paginatedResourceArtifact1 = paginatedResourceArtifact0.addResourcesItem(artifact0);
      assertSame(paginatedResourceArtifact1, paginatedResourceArtifact0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = new HrefModel();
      paginatedResourceArtifact0.setNext(hrefModel0);
      assertNull(paginatedResourceArtifact0.getLimit());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Integer integer0 = paginatedResourceArtifact0.getLimit();
      PaginatedResourceArtifact paginatedResourceArtifact1 = paginatedResourceArtifact0.limit(integer0);
      assertSame(paginatedResourceArtifact0, paginatedResourceArtifact1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = new HrefModel();
      paginatedResourceArtifact0.previous(hrefModel0);
      HrefModel hrefModel1 = paginatedResourceArtifact0.getPrevious();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = paginatedResourceArtifact0.getPrevious();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = new HrefModel();
      paginatedResourceArtifact0.setLast(hrefModel0);
      PaginatedResourceArtifact paginatedResourceArtifact1 = new PaginatedResourceArtifact();
      boolean boolean0 = paginatedResourceArtifact0.equals(paginatedResourceArtifact1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Integer integer0 = new Integer(186);
      paginatedResourceArtifact0.setLimit(integer0);
      assertEquals(186, (int)paginatedResourceArtifact0.getLimit());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = new HrefModel();
      paginatedResourceArtifact0.setFirst(hrefModel0);
      assertNull(paginatedResourceArtifact0.getLimit());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = new HrefModel();
      paginatedResourceArtifact0.last(hrefModel0);
      HrefModel hrefModel1 = paginatedResourceArtifact0.getLast();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Long long0 = new Long((-5L));
      paginatedResourceArtifact0.setTotalCount(long0);
      assertNull(paginatedResourceArtifact0.getLimit());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = new HrefModel();
      PaginatedResourceArtifact paginatedResourceArtifact1 = paginatedResourceArtifact0.next(hrefModel0);
      HrefModel hrefModel1 = paginatedResourceArtifact1.getNext();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      List<Artifact> list0 = paginatedResourceArtifact0.getResources();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Long long0 = paginatedResourceArtifact0.getTotalCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      paginatedResourceArtifact0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      Integer integer0 = paginatedResourceArtifact0.getOffset();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = paginatedResourceArtifact0.getLast();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = new HrefModel();
      paginatedResourceArtifact0.setPrevious(hrefModel0);
      PaginatedResourceArtifact paginatedResourceArtifact1 = new PaginatedResourceArtifact();
      boolean boolean0 = paginatedResourceArtifact0.equals(paginatedResourceArtifact1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = paginatedResourceArtifact0.getNext();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PaginatedResourceArtifact paginatedResourceArtifact0 = new PaginatedResourceArtifact();
      HrefModel hrefModel0 = paginatedResourceArtifact0.getFirst();
      assertNull(hrefModel0);
  }
}
