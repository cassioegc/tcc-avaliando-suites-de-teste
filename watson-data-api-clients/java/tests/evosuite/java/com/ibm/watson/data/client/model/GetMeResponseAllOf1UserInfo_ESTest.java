/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:46:46 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.GetMeResponseAllOf1UserInfo;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GetMeResponseAllOf1UserInfo_ESTest extends GetMeResponseAllOf1UserInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = getMeResponseAllOf1UserInfo0.username("=Pv'9S67K^1");
      String string0 = getMeResponseAllOf1UserInfo1.getUsername();
      assertEquals("=Pv'9S67K^1", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.setUsername("");
      String string0 = getMeResponseAllOf1UserInfo0.getUsername();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.uid("Wb}P7s%`fM+yl9Y\"2");
      String string0 = getMeResponseAllOf1UserInfo0.getUid();
      assertEquals("Wb}P7s%`fM+yl9Y\"2", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.setUid("");
      String string0 = getMeResponseAllOf1UserInfo0.getUid();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.setRole("Kkb(=lUZp+N L(>d;>");
      String string0 = getMeResponseAllOf1UserInfo0.getRole();
      assertEquals("Kkb(=lUZp+N L(>d;>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.setRole("");
      String string0 = getMeResponseAllOf1UserInfo0.getRole();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      Stack<String> stack0 = new Stack<String>();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = getMeResponseAllOf1UserInfo0.permissions(stack0);
      List<String> list0 = getMeResponseAllOf1UserInfo1.getPermissions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = getMeResponseAllOf1UserInfo0.addPermissionsItem("=Pv'9S67K^1");
      List<String> list0 = getMeResponseAllOf1UserInfo1.getPermissions();
      assertTrue(list0.contains("=Pv'9S67K^1"));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.email("j");
      String string0 = getMeResponseAllOf1UserInfo0.getEmail();
      assertEquals("j", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.email("");
      String string0 = getMeResponseAllOf1UserInfo0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.displayName("");
      String string0 = getMeResponseAllOf1UserInfo0.getDisplayName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 2515);
      List<String> list0 = xmlTest0.getExcludedGroups();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = getMeResponseAllOf1UserInfo0.permissions(list0);
      // Undeclared exception!
      try { 
        getMeResponseAllOf1UserInfo1.addPermissionsItem("-gR2TaYc4g[");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = getMeResponseAllOf1UserInfo0.addPermissionsItem("=Pv'9S67K^1");
      String string0 = getMeResponseAllOf1UserInfo1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = new GetMeResponseAllOf1UserInfo();
      assertTrue(getMeResponseAllOf1UserInfo1.equals((Object)getMeResponseAllOf1UserInfo0));
      
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo2 = getMeResponseAllOf1UserInfo1.username("=Pv'9S67K^1");
      boolean boolean0 = getMeResponseAllOf1UserInfo2.equals(getMeResponseAllOf1UserInfo0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = new GetMeResponseAllOf1UserInfo();
      assertTrue(getMeResponseAllOf1UserInfo1.equals((Object)getMeResponseAllOf1UserInfo0));
      
      getMeResponseAllOf1UserInfo1.setRole("reactor.core.publisher.Operators$DeferredSubscription");
      boolean boolean0 = getMeResponseAllOf1UserInfo1.equals(getMeResponseAllOf1UserInfo0);
      assertFalse(getMeResponseAllOf1UserInfo1.equals((Object)getMeResponseAllOf1UserInfo0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = new GetMeResponseAllOf1UserInfo();
      boolean boolean0 = getMeResponseAllOf1UserInfo0.equals(getMeResponseAllOf1UserInfo1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = getMeResponseAllOf1UserInfo0.email("");
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo2 = new GetMeResponseAllOf1UserInfo();
      boolean boolean0 = getMeResponseAllOf1UserInfo1.equals(getMeResponseAllOf1UserInfo2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      boolean boolean0 = getMeResponseAllOf1UserInfo0.equals("Kkb(=lUZp+N L(>d;>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      boolean boolean0 = getMeResponseAllOf1UserInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      boolean boolean0 = getMeResponseAllOf1UserInfo0.equals(getMeResponseAllOf1UserInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = getMeResponseAllOf1UserInfo0.addPermissionsItem("=Pv'9S67K^1");
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo2 = new GetMeResponseAllOf1UserInfo();
      boolean boolean0 = getMeResponseAllOf1UserInfo1.equals(getMeResponseAllOf1UserInfo2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      String string0 = getMeResponseAllOf1UserInfo0.getRole();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = getMeResponseAllOf1UserInfo0.role("reactor.core.publisher.Operators$DeferredSubscription");
      assertNull(getMeResponseAllOf1UserInfo1.getUid());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      String string0 = getMeResponseAllOf1UserInfo0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.displayName("");
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = new GetMeResponseAllOf1UserInfo();
      boolean boolean0 = getMeResponseAllOf1UserInfo0.equals(getMeResponseAllOf1UserInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      String string0 = getMeResponseAllOf1UserInfo0.getDisplayName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.uid("@");
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = new GetMeResponseAllOf1UserInfo();
      boolean boolean0 = getMeResponseAllOf1UserInfo0.equals(getMeResponseAllOf1UserInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.setEmail("@");
      assertNull(getMeResponseAllOf1UserInfo0.getUsername());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      String string0 = getMeResponseAllOf1UserInfo0.getUid();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      getMeResponseAllOf1UserInfo0.setDisplayName("@");
      String string0 = getMeResponseAllOf1UserInfo0.getDisplayName();
      assertEquals("@", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      Vector<String> vector0 = new Vector<String>();
      getMeResponseAllOf1UserInfo0.setPermissions(vector0);
      assertNull(getMeResponseAllOf1UserInfo0.getUid());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      String string0 = getMeResponseAllOf1UserInfo0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo0 = new GetMeResponseAllOf1UserInfo();
      List<String> list0 = getMeResponseAllOf1UserInfo0.getPermissions();
      GetMeResponseAllOf1UserInfo getMeResponseAllOf1UserInfo1 = getMeResponseAllOf1UserInfo0.permissions(list0);
      assertSame(getMeResponseAllOf1UserInfo1, getMeResponseAllOf1UserInfo0);
  }
}
