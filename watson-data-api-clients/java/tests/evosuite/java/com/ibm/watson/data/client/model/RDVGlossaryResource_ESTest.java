/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 23:23:25 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.RDVGlossaryResource;
import com.ibm.watson.data.client.model.RelationshipObject;
import com.ibm.watson.data.client.model.ResponseReferenceDataValueEntity;
import io.netty.handler.logging.LoggingHandler;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RDVGlossaryResource_ESTest extends RDVGlossaryResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      Stack<ResponseReferenceDataValueEntity> stack0 = new Stack<ResponseReferenceDataValueEntity>();
      RDVGlossaryResource rDVGlossaryResource1 = rDVGlossaryResource0.rdsValues(stack0);
      List<ResponseReferenceDataValueEntity> list0 = rDVGlossaryResource1.getRdsValues();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      RelationshipObject relationshipObject0 = new RelationshipObject();
      relationshipObject0.setEntity(relationshipObject0);
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity1 = responseReferenceDataValueEntity0.addTermRelationshipsItem(relationshipObject0);
      rDVGlossaryResource0.addRdsValuesItem(responseReferenceDataValueEntity1);
      // Undeclared exception!
      try { 
        rDVGlossaryResource0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      rDVGlossaryResource0.href("");
      RDVGlossaryResource rDVGlossaryResource1 = new RDVGlossaryResource();
      boolean boolean0 = rDVGlossaryResource0.equals(rDVGlossaryResource1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      LoggingHandler loggingHandler0 = new LoggingHandler();
      boolean boolean0 = rDVGlossaryResource0.equals(loggingHandler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      boolean boolean0 = rDVGlossaryResource0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      boolean boolean0 = rDVGlossaryResource0.equals(rDVGlossaryResource0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      LinkedList<ResponseReferenceDataValueEntity> linkedList0 = new LinkedList<ResponseReferenceDataValueEntity>();
      rDVGlossaryResource0.rdsValues(linkedList0);
      RDVGlossaryResource rDVGlossaryResource1 = new RDVGlossaryResource();
      boolean boolean0 = rDVGlossaryResource0.equals(rDVGlossaryResource1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      RDVGlossaryResource rDVGlossaryResource1 = rDVGlossaryResource0.addRdsValuesItem(responseReferenceDataValueEntity0);
      List<ResponseReferenceDataValueEntity> list0 = rDVGlossaryResource1.getRdsValues();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      LinkedList<ResponseReferenceDataValueEntity> linkedList0 = new LinkedList<ResponseReferenceDataValueEntity>();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      rDVGlossaryResource0.rdsValues(linkedList0);
      RDVGlossaryResource rDVGlossaryResource1 = rDVGlossaryResource0.addRdsValuesItem(responseReferenceDataValueEntity0);
      assertNull(rDVGlossaryResource1.getGlobalId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      String string0 = rDVGlossaryResource0.toString();
      assertEquals("class CreateRDVResponse {\n    href: null\n    artifactId: null\n    versionId: null\n    workflowId: null\n    globalId: null\n    entityType: null\n    rdsValues: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      Vector<ResponseReferenceDataValueEntity> vector0 = new Vector<ResponseReferenceDataValueEntity>();
      rDVGlossaryResource0.setRdsValues(vector0);
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      List<ResponseReferenceDataValueEntity> list0 = rDVGlossaryResource0.getRdsValues();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      rDVGlossaryResource0.hashCode();
  }
}
