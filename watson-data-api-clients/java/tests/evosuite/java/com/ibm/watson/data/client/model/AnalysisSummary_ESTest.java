/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:49:50 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.AnalysisSummary;
import com.ibm.watson.data.client.model.ScoreStats;
import io.netty.channel.ChannelInboundHandlerAdapter;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnalysisSummary_ESTest extends AnalysisSummary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      AnalysisSummary analysisSummary1 = new AnalysisSummary();
      analysisSummary0.equals(analysisSummary1);
      Integer integer0 = new Integer(0);
      analysisSummary1.equals("\n");
      StringBuilder stringBuilder0 = new StringBuilder("\n");
      analysisSummary0.toString(stringBuilder0);
      assertEquals("\n    score: null\n    scoreStats: null\n    problemDistribution: null\n", stringBuilder0.toString());
      
      analysisSummary0.setScore(integer0);
      analysisSummary0.getProblemDistribution();
      analysisSummary0.setProblemDistribution((List<Object>) null);
      analysisSummary0.toString();
      analysisSummary0.toString();
      analysisSummary1.setScore(integer0);
      analysisSummary1.hashCode();
      analysisSummary0.getScore();
      ChannelInboundHandlerAdapter channelInboundHandlerAdapter0 = new ChannelInboundHandlerAdapter();
      analysisSummary0.toIndentedString(channelInboundHandlerAdapter0);
      assertTrue(analysisSummary0.equals((Object)analysisSummary1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!/+#kpt9PETIqh3");
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      analysisSummary0.getProblemDistribution();
      analysisSummary0.toIndentedString((Object) null);
      analysisSummary0.getScore();
      String string0 = analysisSummary0.toString();
      assertEquals("class AnalysisSummary {\n    score: null\n    scoreStats: null\n    problemDistribution: null\n}", string0);
      
      System.setCurrentTimeMillis(8589934592L);
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      ScoreStats scoreStats0 = new ScoreStats();
      analysisSummary0.setScoreStats(scoreStats0);
      analysisSummary0.setScore(integer0);
      System.setCurrentTimeMillis((-1354L));
      analysisSummary0.toString();
      analysisSummary0.toString();
      analysisSummary0.equals("class AnalysisSummary {\n    score: java.lang.Integer@0000000003\n    scoreStats: com.ibm.watson.data.client.model.ScoreStats@0000000002\n    problemDistribution: null\n}");
      System.setCurrentTimeMillis((-1011L));
      AnalysisSummary analysisSummary1 = new AnalysisSummary();
      analysisSummary1.equals("class AnalysisSummary {\n    score: java.lang.Integer@0000000003\n    scoreStats: com.ibm.watson.data.client.model.ScoreStats@0000000002\n    problemDistribution: null\n}");
      analysisSummary1.setScore(integer0);
      boolean boolean0 = analysisSummary0.equals(analysisSummary1);
      assertFalse(boolean0);
      
      analysisSummary1.toIndentedString("class AnalysisSummary {\n    score: null\n    scoreStats: null\n    problemDistribution: null\n}");
      analysisSummary1.toString();
      analysisSummary0.toString();
      System.setCurrentTimeMillis((-1011L));
      boolean boolean1 = analysisSummary1.equals("class AnalysisSummary {\n    score: java.lang.Integer@0000000003\n    scoreStats: com.ibm.watson.data.client.model.ScoreStats@0000000002\n    problemDistribution: null\n}");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      analysisSummary0.equals(analysisSummary0);
      analysisSummary0.getProblemDistribution();
      analysisSummary0.equals(analysisSummary0);
      int int0 = 4013;
      Integer integer0 = new Integer(4013);
      analysisSummary0.setScore(integer0);
      analysisSummary0.getProblemDistribution();
      StringBuilder stringBuilder0 = new StringBuilder("9$(G");
      int int1 = (-1107);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1107), true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1107
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.removeFirstOccurrence(analysisSummary0);
      analysisSummary0.hashCode();
      analysisSummary0.setProblemDistribution(linkedList0);
      analysisSummary0.hashCode();
      Stream<Object> stream0 = linkedList0.stream();
      linkedList0.add((Object) stream0);
      analysisSummary0.toString();
      Object object0 = new Object();
      linkedList0.add(object0);
      analysisSummary0.hashCode();
      analysisSummary0.getScoreStats();
      analysisSummary0.setProblemDistribution(linkedList0);
      AnalysisSummary analysisSummary1 = new AnalysisSummary();
      analysisSummary1.toString();
      analysisSummary0.equals(analysisSummary1);
      analysisSummary1.toString();
      analysisSummary0.getScoreStats();
      analysisSummary1.hashCode();
      int int0 = (-2197);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-2197));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      analysisSummary0.hashCode();
      analysisSummary0.hashCode();
      analysisSummary0.hashCode();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      analysisSummary0.setProblemDistribution(linkedList0);
      analysisSummary0.getScore();
      analysisSummary0.getProblemDistribution();
      Object object1 = new Object();
      analysisSummary0.toIndentedString(object1);
      analysisSummary0.setScore((Integer) null);
      assertNull(analysisSummary0.getScore());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      Integer integer0 = new Integer((-836));
      analysisSummary0.setScore(integer0);
      Integer integer1 = analysisSummary0.getScore();
      Integer.compareUnsigned((-836), (-836));
      analysisSummary0.equals(integer1);
      analysisSummary0.hashCode();
      analysisSummary0.getScoreStats();
      analysisSummary0.setScoreStats((ScoreStats) null);
      Integer integer2 = new Integer(0);
      analysisSummary0.setScore(integer2);
      assertFalse(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      Integer integer0 = new Integer(3);
      analysisSummary0.setScore(integer0);
      analysisSummary0.getScore();
      analysisSummary0.hashCode();
      analysisSummary0.getProblemDistribution();
      analysisSummary0.setProblemDistribution((List<Object>) null);
      ScoreStats scoreStats0 = new ScoreStats();
      Double double0 = new Double(0.0);
      Double.isFinite(1.0);
      Double double1 = new Double(3);
      Double.sum((-988.525096645053), 0.0);
      scoreStats0.setMin(double1);
      scoreStats0.setVariance(double0);
      analysisSummary0.setScoreStats(scoreStats0);
      analysisSummary0.setProblemDistribution((List<Object>) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      analysisSummary0.toString(stringBuilder0);
      analysisSummary0.getScoreStats();
      analysisSummary0.toString();
      analysisSummary0.getProblemDistribution();
      analysisSummary0.getProblemDistribution();
      analysisSummary0.toString(stringBuilder0);
      analysisSummary0.getScore();
      try { 
        Integer.valueOf("", 3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      analysisSummary0.setProblemDistribution(linkedList0);
      analysisSummary0.getProblemDistribution();
      analysisSummary0.getScoreStats();
      analysisSummary0.toString();
      analysisSummary0.getScore();
      boolean boolean0 = analysisSummary0.equals("class AnalysisSummary {\n    score: null\n    scoreStats: null\n    problemDistribution: java.util.LinkedList@0000000002\n}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      List<Object> list0 = analysisSummary0.getProblemDistribution();
      assertNull(list0);
      
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      stringBuilder0.append((-1.0));
      stringBuilder1.codePoints();
      analysisSummary0.toString(stringBuilder1);
      analysisSummary0.getScore();
      analysisSummary0.getScoreStats();
      analysisSummary0.setScoreStats((ScoreStats) null);
      analysisSummary0.setProblemDistribution((List<Object>) null);
      analysisSummary0.equals("");
      analysisSummary0.equals((Object) null);
      analysisSummary0.toString();
      analysisSummary0.toString();
      analysisSummary0.setProblemDistribution((List<Object>) null);
      // Undeclared exception!
      try { 
        analysisSummary0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.AnalysisSummary", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      AnalysisSummary analysisSummary1 = new AnalysisSummary();
      analysisSummary0.equals(analysisSummary1);
      analysisSummary0.getProblemDistribution();
      analysisSummary0.equals(analysisSummary1);
      assertTrue(analysisSummary0.equals((Object)analysisSummary1));
      
      Integer integer0 = new Integer(4013);
      analysisSummary0.setScore(integer0);
      analysisSummary0.getProblemDistribution();
      assertFalse(analysisSummary0.equals((Object)analysisSummary1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      AnalysisSummary analysisSummary1 = new AnalysisSummary();
      Integer integer0 = Integer.valueOf(646);
      analysisSummary0.setScore(integer0);
      analysisSummary0.toIndentedString(analysisSummary1);
      assertFalse(analysisSummary1.equals((Object)analysisSummary0));
      
      AnalysisSummary analysisSummary2 = new AnalysisSummary();
      boolean boolean0 = analysisSummary0.equals(analysisSummary2);
      assertTrue(analysisSummary2.equals((Object)analysisSummary1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      String string0 = analysisSummary0.toString();
      assertEquals("class AnalysisSummary {\n    score: null\n    scoreStats: null\n    problemDistribution: null\n}", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "class AnalysisSummary {\n    score: null\n    scoreStats: null\n    problemDistribution: null\n}");
      StringBuilder stringBuilder1 = stringBuilder0.delete(0, 0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, 0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (CharSequence) "class AnalysisSummary {\n    score: null\n    scoreStats: null\n    problemDistribution: null\n}");
      StringBuilder stringBuilder4 = stringBuilder3.reverse();
      analysisSummary0.toString(stringBuilder4);
      assertEquals("}\nllun :noitubirtsiDmelborp    \nllun :statSerocs    \nllun :erocs    \n{ yrammuSsisylanA ssalc0}\nllun :noitubirtsiDmelborp    \nllun :statSerocs    \nllun :erocs    \n{ yrammuSsisylanA ssalc    score: null\n    scoreStats: null\n    problemDistribution: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      // Undeclared exception!
      try { 
        analysisSummary0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.AnalysisSummary", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      ScoreStats scoreStats0 = new ScoreStats();
      analysisSummary0.setScoreStats(scoreStats0);
      assertNull(scoreStats0.getSum());
      
      boolean boolean0 = analysisSummary0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      String string0 = analysisSummary0.toIndentedString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      ScoreStats scoreStats0 = analysisSummary0.getScoreStats();
      assertNull(scoreStats0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      Integer integer0 = new Integer((-2579));
      analysisSummary0.setScore(integer0);
      String string0 = analysisSummary0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      Integer integer0 = Integer.getInteger((String) null, (-3145));
      boolean boolean0 = analysisSummary0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      analysisSummary0.getProblemDistribution();
      analysisSummary0.setProblemDistribution((List<Object>) null);
      assertNull(analysisSummary0.getScore());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      Object object0 = new Object();
      String string0 = analysisSummary0.toIndentedString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      Integer integer0 = analysisSummary0.getScore();
      assertNull(integer0);
      
      analysisSummary0.getScoreStats();
      analysisSummary0.equals((Object) null);
      AnalysisSummary analysisSummary1 = new AnalysisSummary();
      Integer integer1 = new Integer((-3784));
      analysisSummary0.setScore(integer1);
      analysisSummary0.equals(analysisSummary1);
      analysisSummary1.setScoreStats((ScoreStats) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.delete(3426, (-3784));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      analysisSummary0.getProblemDistribution();
      analysisSummary0.toIndentedString((Object) null);
      analysisSummary0.getScore();
      String string0 = analysisSummary0.toString();
      assertEquals("class AnalysisSummary {\n    score: null\n    scoreStats: null\n    problemDistribution: null\n}", string0);
      
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      ScoreStats scoreStats0 = new ScoreStats();
      analysisSummary0.setScoreStats(scoreStats0);
      analysisSummary0.setScore(integer0);
      System.setCurrentTimeMillis((-1354L));
      analysisSummary0.toString();
      analysisSummary0.toString();
      boolean boolean0 = analysisSummary0.equals("class AnalysisSummary {\n    score: java.lang.Integer@0000000003\n    scoreStats: com.ibm.watson.data.client.model.ScoreStats@0000000002\n    problemDistribution: null\n}");
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-1011L));
      AnalysisSummary analysisSummary1 = new AnalysisSummary();
      analysisSummary1.setScore(integer0);
      boolean boolean1 = analysisSummary0.equals(analysisSummary1);
      assertFalse(boolean1);
      
      analysisSummary1.toIndentedString("class AnalysisSummary {\n    score: null\n    scoreStats: null\n    problemDistribution: null\n}");
      analysisSummary1.toString();
      assertFalse(analysisSummary1.equals((Object)analysisSummary0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      boolean boolean0 = analysisSummary0.equals(analysisSummary0);
      assertTrue(boolean0);
      
      String string0 = analysisSummary0.toString();
      assertEquals("class AnalysisSummary {\n    score: null\n    scoreStats: null\n    problemDistribution: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      AnalysisSummary analysisSummary1 = new AnalysisSummary();
      boolean boolean0 = analysisSummary0.equals(analysisSummary1);
      assertTrue(boolean0);
      
      analysisSummary0.toString();
      String string0 = analysisSummary1.toString();
      assertEquals("class AnalysisSummary {\n    score: null\n    scoreStats: null\n    problemDistribution: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AnalysisSummary analysisSummary0 = new AnalysisSummary();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      analysisSummary0.toIndentedString(linkedList0);
      analysisSummary0.setProblemDistribution(linkedList0);
      analysisSummary0.hashCode();
      analysisSummary0.hashCode();
      analysisSummary0.getProblemDistribution();
      analysisSummary0.toString();
      AnalysisSummary analysisSummary1 = new AnalysisSummary();
      boolean boolean0 = analysisSummary0.equals(analysisSummary1);
      assertFalse(boolean0);
      
      String string0 = analysisSummary1.toString();
      assertEquals("class AnalysisSummary {\n    score: null\n    scoreStats: null\n    problemDistribution: null\n}", string0);
  }
}
