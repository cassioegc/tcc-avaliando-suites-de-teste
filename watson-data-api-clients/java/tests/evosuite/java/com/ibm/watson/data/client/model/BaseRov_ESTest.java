/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 01:59:33 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.BaseRov;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseRov_ESTest extends BaseRov_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      Integer integer0 = new Integer(0);
      BaseRov baseRov1 = baseRov0.mode(integer0);
      Integer integer1 = baseRov1.getMode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      Integer integer0 = new Integer((-2959));
      baseRov0.mode(integer0);
      Integer integer1 = baseRov0.getMode();
      assertEquals((-2959), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      Integer integer0 = new Integer(407);
      BaseRov baseRov1 = baseRov0.mode(integer0);
      Integer integer1 = baseRov1.getMode();
      assertEquals(407, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      // Undeclared exception!
      try { 
        baseRov0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.BaseRov", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      StringBuilder stringBuilder0 = new StringBuilder();
      baseRov0.toString(stringBuilder0);
      assertEquals("    mode: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      String string0 = baseRov0.toIndentedString(baseRov0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      BaseRov baseRov1 = new BaseRov();
      boolean boolean0 = baseRov0.equals(baseRov1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      boolean boolean0 = baseRov0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      boolean boolean0 = baseRov0.equals(baseRov0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      Integer integer0 = new Integer(3911);
      boolean boolean0 = baseRov0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      String string0 = baseRov0.toString();
      assertEquals("class BaseRov {\n    mode: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      Integer integer0 = new Integer(3911);
      baseRov0.setMode(integer0);
      assertEquals(3911, (int)baseRov0.getMode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      Integer integer0 = baseRov0.getMode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseRov baseRov0 = new BaseRov();
      baseRov0.hashCode();
  }
}
