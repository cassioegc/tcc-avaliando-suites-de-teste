/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 19:14:29 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.Role;
import io.netty.channel.ChannelDuplexHandler;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Role_ESTest extends Role_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = role0.roleName("class GetAllRolesResponseAllOf1RolesItems {\n");
      String string0 = role1.getRoleName();
      assertEquals("class GetAllRolesResponseAllOf1RolesItems {\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Role role0 = new Role();
      role0.addPermissionsItem("W#|");
      List<String> list0 = role0.getPermissions();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Role role0 = new Role();
      role0.ID("[fO+m[IuL^y*}4S");
      String string0 = role0.getID();
      assertEquals("[fO+m[IuL^y*}4S", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Role role0 = new Role();
      role0.ID("");
      String string0 = role0.getID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Role role0 = new Role();
      role0.setDescription("pN/RA}=$]`dE6&;#h}");
      String string0 = role0.getDescription();
      assertEquals("pN/RA}=$]`dE6&;#h}", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Role role0 = new Role();
      role0.description("");
      String string0 = role0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Role role0 = new Role();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getIncludedGroups();
      Role role1 = role0.permissions(list0);
      // Undeclared exception!
      try { 
        role1.addPermissionsItem("class GetAllRolesResponseAllOf1RolesItems {\n");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Role role0 = new Role();
      role0.addPermissionsItem("W#|");
      String string0 = role0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getIncludedGroups();
      Role role2 = role1.permissions(list0);
      Role role3 = role0.permissions(list0);
      assertTrue(role3.equals((Object)role1));
      
      role3.setRoleName("");
      boolean boolean0 = role2.equals(role0);
      assertFalse(role2.equals((Object)role0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getIncludedGroups();
      Role role2 = role1.permissions(list0);
      assertFalse(role2.equals((Object)role0));
      
      role0.permissions(list0);
      boolean boolean0 = role2.equals(role0);
      assertTrue(role2.equals((Object)role0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      assertTrue(role1.equals((Object)role0));
      
      role0.description("");
      boolean boolean0 = role1.equals(role0);
      assertFalse(role1.equals((Object)role0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = new Role();
      Role role2 = role1.ID("}");
      boolean boolean0 = role0.equals(role2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Role role0 = new Role();
      Class<ChannelDuplexHandler> class0 = ChannelDuplexHandler.class;
      LogLevel logLevel0 = LogLevel.ERROR;
      LoggingHandler loggingHandler0 = new LoggingHandler(class0, logLevel0);
      boolean boolean0 = role0.equals(loggingHandler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Role role0 = new Role();
      boolean boolean0 = role0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Role role0 = new Role();
      boolean boolean0 = role0.equals(role0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Role role0 = new Role();
      Role role1 = role0.addPermissionsItem("W#|");
      Role role2 = new Role();
      boolean boolean0 = role2.equals(role1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Role role0 = new Role();
      role0.setRoleName("");
      String string0 = role0.getRoleName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Role role0 = new Role();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getIncludedGroups();
      Role role1 = role0.permissions(list0);
      List<String> list1 = role1.getPermissions();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Role role0 = new Role();
      List<String> list0 = role0.getPermissions();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Role role0 = new Role();
      role0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.getID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Role role0 = new Role();
      role0.setID((String) null);
      assertNull(role0.getID());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Role role0 = new Role();
      role0.setPermissions((List<String>) null);
      assertNull(role0.getID());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Role role0 = new Role();
      String string0 = role0.getRoleName();
      assertNull(string0);
  }
}
