/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 19:50:37 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.DatasourceTypeActionProperties;
import com.ibm.watson.data.client.model.DatasourceTypeProperty;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatasourceTypeActionProperties_ESTest extends DatasourceTypeActionProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Stack<DatasourceTypeProperty> stack0 = new Stack<DatasourceTypeProperty>();
      stack0.add(datasourceTypeProperty0);
      DatasourceTypeActionProperties datasourceTypeActionProperties1 = datasourceTypeActionProperties0.output(stack0);
      List<DatasourceTypeProperty> list0 = datasourceTypeActionProperties1.getOutput();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      ArrayList<DatasourceTypeProperty> arrayList0 = new ArrayList<DatasourceTypeProperty>();
      datasourceTypeActionProperties0.setInput(arrayList0);
      List<DatasourceTypeProperty> list0 = datasourceTypeActionProperties0.getInput();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypeActionProperties datasourceTypeActionProperties1 = datasourceTypeActionProperties0.addInputItem(datasourceTypeProperty0);
      List<DatasourceTypeProperty> list0 = datasourceTypeActionProperties1.getInput();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      LinkedList<DatasourceTypeProperty> linkedList0 = new LinkedList<DatasourceTypeProperty>();
      DatasourceTypeActionProperties datasourceTypeActionProperties1 = datasourceTypeActionProperties0.input(linkedList0);
      String string0 = datasourceTypeActionProperties1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypeActionProperties datasourceTypeActionProperties1 = datasourceTypeActionProperties0.addInputItem(datasourceTypeProperty0);
      DatasourceTypeActionProperties datasourceTypeActionProperties2 = new DatasourceTypeActionProperties();
      DatasourceTypeActionProperties datasourceTypeActionProperties3 = datasourceTypeActionProperties2.addOutputItem(datasourceTypeProperty0);
      datasourceTypeActionProperties3.addInputItem(datasourceTypeProperty0);
      boolean boolean0 = datasourceTypeActionProperties1.equals(datasourceTypeActionProperties2);
      assertFalse(datasourceTypeActionProperties2.equals((Object)datasourceTypeActionProperties1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      DatasourceTypeActionProperties datasourceTypeActionProperties1 = new DatasourceTypeActionProperties();
      boolean boolean0 = datasourceTypeActionProperties0.equals(datasourceTypeActionProperties1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      boolean boolean0 = datasourceTypeActionProperties0.equals(datasourceTypeProperty0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      boolean boolean0 = datasourceTypeActionProperties0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      boolean boolean0 = datasourceTypeActionProperties0.equals(datasourceTypeActionProperties0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      Stack<DatasourceTypeProperty> stack0 = new Stack<DatasourceTypeProperty>();
      datasourceTypeActionProperties0.output(stack0);
      DatasourceTypeActionProperties datasourceTypeActionProperties1 = datasourceTypeActionProperties0.addOutputItem(datasourceTypeProperty0);
      assertSame(datasourceTypeActionProperties1, datasourceTypeActionProperties0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      DatasourceTypeProperty datasourceTypeProperty0 = new DatasourceTypeProperty();
      DatasourceTypeActionProperties datasourceTypeActionProperties1 = datasourceTypeActionProperties0.addInputItem(datasourceTypeProperty0);
      DatasourceTypeActionProperties datasourceTypeActionProperties2 = new DatasourceTypeActionProperties();
      boolean boolean0 = datasourceTypeActionProperties1.equals(datasourceTypeActionProperties2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      LinkedList<DatasourceTypeProperty> linkedList0 = new LinkedList<DatasourceTypeProperty>();
      DatasourceTypeActionProperties datasourceTypeActionProperties1 = datasourceTypeActionProperties0.input(linkedList0);
      datasourceTypeActionProperties1.addInputItem((DatasourceTypeProperty) null);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      List<DatasourceTypeProperty> list0 = datasourceTypeActionProperties0.getOutput();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      datasourceTypeActionProperties0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      Stack<DatasourceTypeProperty> stack0 = new Stack<DatasourceTypeProperty>();
      datasourceTypeActionProperties0.setOutput(stack0);
      assertEquals(0, stack0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      List<DatasourceTypeProperty> list0 = datasourceTypeActionProperties0.getInput();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      Stack<DatasourceTypeProperty> stack0 = new Stack<DatasourceTypeProperty>();
      datasourceTypeActionProperties0.output(stack0);
      List<DatasourceTypeProperty> list0 = datasourceTypeActionProperties0.getOutput();
      assertEquals(0, list0.size());
  }
}
