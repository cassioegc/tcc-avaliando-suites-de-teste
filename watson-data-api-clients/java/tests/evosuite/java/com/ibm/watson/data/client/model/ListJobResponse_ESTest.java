/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:14:11 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.Job;
import com.ibm.watson.data.client.model.ListJobResponse;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ListJobResponse_ESTest extends ListJobResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      Long long0 = new Long(0L);
      ListJobResponse listJobResponse1 = listJobResponse0.totalRows(long0);
      Long long1 = listJobResponse1.getTotalRows();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      Long long0 = new Long(63L);
      ListJobResponse listJobResponse1 = listJobResponse0.totalRows(long0);
      Long long1 = listJobResponse1.getTotalRows();
      assertEquals(63L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      Long long0 = new Long((-1L));
      ListJobResponse listJobResponse1 = listJobResponse0.totalRows(long0);
      Long long1 = listJobResponse1.getTotalRows();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      Stack<Job> stack0 = new Stack<Job>();
      ListJobResponse listJobResponse1 = listJobResponse0.results(stack0);
      List<Job> list0 = listJobResponse1.getResults();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      ArrayList<Job> arrayList0 = new ArrayList<Job>();
      ListJobResponse listJobResponse1 = listJobResponse0.results(arrayList0);
      Job job0 = new Job();
      arrayList0.add(job0);
      List<Job> list0 = listJobResponse1.getResults();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      ArrayList<Job> arrayList0 = new ArrayList<Job>();
      listJobResponse0.results(arrayList0);
      ListJobResponse listJobResponse1 = new ListJobResponse();
      boolean boolean0 = listJobResponse0.equals(listJobResponse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      Long long0 = new Long(0L);
      listJobResponse0.totalRows(long0);
      ListJobResponse listJobResponse1 = new ListJobResponse();
      boolean boolean0 = listJobResponse0.equals(listJobResponse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      ListJobResponse listJobResponse1 = new ListJobResponse();
      boolean boolean0 = listJobResponse0.equals(listJobResponse1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      boolean boolean0 = listJobResponse0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      boolean boolean0 = listJobResponse0.equals(listJobResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      Object object0 = new Object();
      boolean boolean0 = listJobResponse0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Job job0 = new Job();
      ListJobResponse listJobResponse0 = new ListJobResponse();
      ListJobResponse listJobResponse1 = listJobResponse0.addResultsItem(job0);
      assertSame(listJobResponse0, listJobResponse1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      ArrayList<Job> arrayList0 = new ArrayList<Job>();
      ListJobResponse listJobResponse1 = listJobResponse0.results(arrayList0);
      Job job0 = new Job();
      listJobResponse1.addResultsItem(job0);
      assertTrue(arrayList0.contains(job0));
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      Long long0 = new Long((-4805L));
      ListJobResponse listJobResponse1 = listJobResponse0.totalRows(long0);
      String string0 = listJobResponse1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      Long long0 = listJobResponse0.getTotalRows();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      listJobResponse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      listJobResponse0.setResults((List<Job>) null);
      assertNull(listJobResponse0.getTotalRows());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      listJobResponse0.setTotalRows((Long) null);
      assertNull(listJobResponse0.getTotalRows());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ListJobResponse listJobResponse0 = new ListJobResponse();
      List<Job> list0 = listJobResponse0.getResults();
      assertNull(list0);
  }
}
