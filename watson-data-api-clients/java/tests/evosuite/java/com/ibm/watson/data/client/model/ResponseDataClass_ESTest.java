/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 23:54:31 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.GlossaryObjectMetadata;
import com.ibm.watson.data.client.model.ResponseDataClass;
import com.ibm.watson.data.client.model.ResponseDataClassEntity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResponseDataClass_ESTest extends ResponseDataClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      ResponseDataClassEntity responseDataClassEntity0 = new ResponseDataClassEntity();
      responseDataClass0.setEntity(responseDataClassEntity0);
      ResponseDataClassEntity responseDataClassEntity1 = responseDataClass0.getEntity();
      assertNull(responseDataClassEntity1.getMinimumDataLength());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      ResponseDataClassEntity responseDataClassEntity0 = new ResponseDataClassEntity();
      responseDataClass0.setEntity(responseDataClassEntity0);
      String string0 = responseDataClass0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      GlossaryObjectMetadata glossaryObjectMetadata0 = new GlossaryObjectMetadata();
      ResponseDataClass responseDataClass1 = new ResponseDataClass();
      ResponseDataClass responseDataClass2 = responseDataClass0.metadata(glossaryObjectMetadata0);
      boolean boolean0 = responseDataClass1.equals(responseDataClass2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      ResponseDataClass responseDataClass1 = new ResponseDataClass();
      boolean boolean0 = responseDataClass0.equals(responseDataClass1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      boolean boolean0 = responseDataClass0.equals("\n    ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      boolean boolean0 = responseDataClass0.equals(responseDataClass0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      boolean boolean0 = responseDataClass0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      ResponseDataClassEntity responseDataClassEntity0 = responseDataClass0.getEntity();
      assertNull(responseDataClassEntity0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      responseDataClass0.setMetadata((GlossaryObjectMetadata) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      responseDataClass0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      ResponseDataClassEntity responseDataClassEntity0 = new ResponseDataClassEntity();
      ResponseDataClass responseDataClass1 = responseDataClass0.entity(responseDataClassEntity0);
      assertSame(responseDataClass1, responseDataClass0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      GlossaryObjectMetadata glossaryObjectMetadata0 = responseDataClass0.getMetadata();
      assertNull(glossaryObjectMetadata0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      ResponseDataClassEntity responseDataClassEntity0 = new ResponseDataClassEntity();
      responseDataClass0.setEntity(responseDataClassEntity0);
      ResponseDataClass responseDataClass1 = new ResponseDataClass();
      boolean boolean0 = responseDataClass0.equals(responseDataClass1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResponseDataClass responseDataClass0 = new ResponseDataClass();
      GlossaryObjectMetadata glossaryObjectMetadata0 = new GlossaryObjectMetadata();
      ResponseDataClass responseDataClass1 = responseDataClass0.metadata(glossaryObjectMetadata0);
      GlossaryObjectMetadata glossaryObjectMetadata1 = responseDataClass1.getMetadata();
      assertNull(glossaryObjectMetadata1.getExternalId());
  }
}
