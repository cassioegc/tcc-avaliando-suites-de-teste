/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:18:19 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.HrefModel;
import com.ibm.watson.data.client.model.PaginatedListAlternative;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaginatedListAlternative_ESTest extends PaginatedListAlternative_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      StringBuilder stringBuilder0 = new StringBuilder("fOPw5u+y_24;/s|Oa+");
      paginatedListAlternative0.toString(stringBuilder0);
      assertEquals("fOPw5u+y_24;/s|Oa+    limit: null\n    count: null\n    first: null\n    next: null\n    offset: null\n    last: null\n    previous: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      String string0 = paginatedListAlternative0.toIndentedString(">U<VoM~pr3F0\"b+O)");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Long long0 = new Long(0L);
      paginatedListAlternative0.totalCount(long0);
      Long long1 = paginatedListAlternative0.getTotalCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Long long0 = new Long(1L);
      paginatedListAlternative0.totalCount(long0);
      Long long1 = paginatedListAlternative0.getTotalCount();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Long long0 = new Long((-1L));
      PaginatedListAlternative paginatedListAlternative1 = paginatedListAlternative0.totalCount(long0);
      Long long1 = paginatedListAlternative1.getTotalCount();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Integer integer0 = new Integer(0);
      paginatedListAlternative0.offset(integer0);
      Integer integer1 = paginatedListAlternative0.getOffset();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Integer integer0 = new Integer((-700));
      PaginatedListAlternative paginatedListAlternative1 = paginatedListAlternative0.offset(integer0);
      Integer integer1 = paginatedListAlternative1.getOffset();
      assertEquals((-700), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Integer integer0 = new Integer(207);
      paginatedListAlternative0.setOffset(integer0);
      Integer integer1 = paginatedListAlternative0.getOffset();
      assertEquals(207, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      HrefModel hrefModel0 = new HrefModel();
      PaginatedListAlternative paginatedListAlternative1 = paginatedListAlternative0.next(hrefModel0);
      HrefModel hrefModel1 = paginatedListAlternative1.getNext();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Integer integer0 = new Integer((-1410));
      paginatedListAlternative0.limit(integer0);
      Integer integer1 = paginatedListAlternative0.getLimit();
      assertEquals((-1410), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Integer integer0 = new Integer(268);
      PaginatedListAlternative paginatedListAlternative1 = paginatedListAlternative0.limit(integer0);
      Integer integer1 = paginatedListAlternative1.getLimit();
      assertEquals(268, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Integer integer0 = new Integer(207);
      paginatedListAlternative0.setLimit(integer0);
      Integer integer1 = paginatedListAlternative0.getLimit();
      assertEquals(207, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      HrefModel hrefModel0 = new HrefModel();
      PaginatedListAlternative paginatedListAlternative1 = paginatedListAlternative0.last(hrefModel0);
      HrefModel hrefModel1 = paginatedListAlternative1.getLast();
      assertSame(hrefModel1, hrefModel0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      // Undeclared exception!
      try { 
        paginatedListAlternative0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.PaginatedListAlternative", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      HrefModel hrefModel0 = new HrefModel();
      paginatedListAlternative0.setPrevious(hrefModel0);
      String string0 = paginatedListAlternative0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      PaginatedListAlternative paginatedListAlternative1 = new PaginatedListAlternative();
      boolean boolean0 = paginatedListAlternative0.equals(paginatedListAlternative1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      PaginatedListAlternative paginatedListAlternative1 = new PaginatedListAlternative();
      assertTrue(paginatedListAlternative1.equals((Object)paginatedListAlternative0));
      
      HrefModel hrefModel0 = new HrefModel();
      paginatedListAlternative1.setLast(hrefModel0);
      boolean boolean0 = paginatedListAlternative0.equals(paginatedListAlternative1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      PaginatedListAlternative paginatedListAlternative1 = new PaginatedListAlternative();
      assertTrue(paginatedListAlternative1.equals((Object)paginatedListAlternative0));
      
      Integer integer0 = new Integer(3);
      paginatedListAlternative1.setOffset(integer0);
      boolean boolean0 = paginatedListAlternative0.equals(paginatedListAlternative1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      PaginatedListAlternative paginatedListAlternative1 = new PaginatedListAlternative();
      assertTrue(paginatedListAlternative1.equals((Object)paginatedListAlternative0));
      
      HrefModel hrefModel0 = new HrefModel();
      paginatedListAlternative1.setNext(hrefModel0);
      boolean boolean0 = paginatedListAlternative0.equals(paginatedListAlternative1);
      assertFalse(paginatedListAlternative1.equals((Object)paginatedListAlternative0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Long long0 = new Long((-700));
      paginatedListAlternative0.totalCount(long0);
      PaginatedListAlternative paginatedListAlternative1 = new PaginatedListAlternative();
      boolean boolean0 = paginatedListAlternative0.equals(paginatedListAlternative1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Integer integer0 = new Integer((-789));
      paginatedListAlternative0.limit(integer0);
      PaginatedListAlternative paginatedListAlternative1 = new PaginatedListAlternative();
      boolean boolean0 = paginatedListAlternative0.equals(paginatedListAlternative1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      HrefModel hrefModel0 = new HrefModel();
      boolean boolean0 = paginatedListAlternative0.equals(hrefModel0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      boolean boolean0 = paginatedListAlternative0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      boolean boolean0 = paginatedListAlternative0.equals(paginatedListAlternative0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      PaginatedListAlternative paginatedListAlternative1 = new PaginatedListAlternative();
      assertTrue(paginatedListAlternative1.equals((Object)paginatedListAlternative0));
      
      HrefModel hrefModel0 = new HrefModel();
      paginatedListAlternative0.setPrevious(hrefModel0);
      boolean boolean0 = paginatedListAlternative1.equals(paginatedListAlternative0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Long long0 = new Long((-2330));
      paginatedListAlternative0.setTotalCount(long0);
      assertNull(paginatedListAlternative0.getLimit());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Long long0 = paginatedListAlternative0.getTotalCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      HrefModel hrefModel0 = new HrefModel();
      paginatedListAlternative0.first(hrefModel0);
      HrefModel hrefModel1 = paginatedListAlternative0.getFirst();
      assertNull(hrefModel1.getHref());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      HrefModel hrefModel0 = new HrefModel();
      PaginatedListAlternative paginatedListAlternative1 = paginatedListAlternative0.previous(hrefModel0);
      HrefModel hrefModel1 = paginatedListAlternative1.getPrevious();
      assertSame(hrefModel0, hrefModel1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      HrefModel hrefModel0 = new HrefModel();
      paginatedListAlternative0.setFirst(hrefModel0);
      PaginatedListAlternative paginatedListAlternative1 = new PaginatedListAlternative();
      boolean boolean0 = paginatedListAlternative0.equals(paginatedListAlternative1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Integer integer0 = paginatedListAlternative0.getOffset();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      paginatedListAlternative0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      HrefModel hrefModel0 = paginatedListAlternative0.getLast();
      PaginatedListAlternative paginatedListAlternative1 = paginatedListAlternative0.last(hrefModel0);
      assertSame(paginatedListAlternative1, paginatedListAlternative0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      HrefModel hrefModel0 = paginatedListAlternative0.getFirst();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Integer integer0 = new Integer(0);
      PaginatedListAlternative paginatedListAlternative1 = paginatedListAlternative0.limit(integer0);
      Integer integer1 = paginatedListAlternative1.getLimit();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      HrefModel hrefModel0 = paginatedListAlternative0.getNext();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      HrefModel hrefModel0 = paginatedListAlternative0.getPrevious();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PaginatedListAlternative paginatedListAlternative0 = new PaginatedListAlternative();
      Integer integer0 = paginatedListAlternative0.getLimit();
      assertNull(integer0);
  }
}
