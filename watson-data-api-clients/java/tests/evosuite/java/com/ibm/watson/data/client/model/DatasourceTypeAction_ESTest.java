/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 22:00:20 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.DatasourceTypeAction;
import com.ibm.watson.data.client.model.DatasourceTypeActionProperties;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLSyntaxErrorException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatasourceTypeAction_ESTest extends DatasourceTypeAction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      datasourceTypeAction0.name("1_s");
      String string0 = datasourceTypeAction0.getName();
      assertEquals("1_s", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      datasourceTypeAction0.setName("");
      String string0 = datasourceTypeAction0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      datasourceTypeAction0.description("bMhjr&O");
      String string0 = datasourceTypeAction0.getDescription();
      assertEquals("bMhjr&O", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      datasourceTypeAction0.description("");
      String string0 = datasourceTypeAction0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      datasourceTypeAction0.description("g=A");
      DatasourceTypeAction datasourceTypeAction1 = new DatasourceTypeAction();
      boolean boolean0 = datasourceTypeAction0.equals(datasourceTypeAction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      DatasourceTypeAction datasourceTypeAction1 = datasourceTypeAction0.name("1_s");
      DatasourceTypeAction datasourceTypeAction2 = new DatasourceTypeAction();
      boolean boolean0 = datasourceTypeAction1.equals(datasourceTypeAction2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      DatasourceTypeAction datasourceTypeAction1 = new DatasourceTypeAction();
      boolean boolean0 = datasourceTypeAction0.equals(datasourceTypeAction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      boolean boolean0 = datasourceTypeAction0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      boolean boolean0 = datasourceTypeAction0.equals(datasourceTypeAction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "bMhjr&O");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-1), sQLFeatureNotSupportedException0);
      boolean boolean0 = datasourceTypeAction0.equals(sQLSyntaxErrorException0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      datasourceTypeAction0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      String string0 = datasourceTypeAction0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      datasourceTypeAction0.setDescription("Added encoder [{}] at the beginning of the user pipeline, full pipeline: {}");
      assertEquals("Added encoder [{}] at the beginning of the user pipeline, full pipeline: {}", datasourceTypeAction0.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = datasourceTypeAction0.getProperties();
      assertNull(datasourceTypeActionProperties0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      datasourceTypeAction0.properties(datasourceTypeActionProperties0);
      String string0 = datasourceTypeAction0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      String string0 = datasourceTypeAction0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatasourceTypeAction datasourceTypeAction0 = new DatasourceTypeAction();
      DatasourceTypeActionProperties datasourceTypeActionProperties0 = new DatasourceTypeActionProperties();
      datasourceTypeAction0.setProperties(datasourceTypeActionProperties0);
      DatasourceTypeActionProperties datasourceTypeActionProperties1 = datasourceTypeAction0.getProperties();
      assertSame(datasourceTypeActionProperties1, datasourceTypeActionProperties0);
  }
}
