/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 14:42:27 GMT 2021
 */

package com.ibm.watson.data.client.serde;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonFactoryBuilder;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.ibm.watson.data.client.serde.AbstractAssetEntityDeserializer;
import java.io.CharConversionException;
import java.io.IOException;
import java.io.PipedReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractAssetEntityDeserializer_ESTest extends AbstractAssetEntityDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractAssetEntityDeserializer abstractAssetEntityDeserializer0 = new AbstractAssetEntityDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '^';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '<';
      charArray0[7] = '\"';
      JsonParser jsonParser0 = objectMapper0.createParser(charArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
      abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
      abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.serde.AbstractAssetEntityDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractAssetEntityDeserializer abstractAssetEntityDeserializer0 = new AbstractAssetEntityDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[6];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-3266), (-3266));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractAssetEntityDeserializer abstractAssetEntityDeserializer0 = new AbstractAssetEntityDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = objectMapper0.createParser(charArray0, 300, 300);
      // Undeclared exception!
      try { 
        abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 300
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AbstractAssetEntityDeserializer abstractAssetEntityDeserializer0 = new AbstractAssetEntityDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        abstractAssetEntityDeserializer0.deserialize((JsonParser) readerBasedJsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AbstractAssetEntityDeserializer abstractAssetEntityDeserializer0 = new AbstractAssetEntityDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[6] = (byte)27;
      JsonParser jsonParser0 = objectMapper0.createParser(byteArray0);
      try { 
        abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: CharConversionException");
      
      } catch(CharConversionException e) {
         //
         // Invalid UTF-32 character 0x1a0000 (above 0x0010ffff) at char #1, byte #7)
         //
         verifyException("com.fasterxml.jackson.core.io.UTF32Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AbstractAssetEntityDeserializer abstractAssetEntityDeserializer0 = new AbstractAssetEntityDeserializer();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode((int) (byte)2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      abstractAssetEntityDeserializer0.deserialize(jsonParser0, deserializationContext0);
      try { 
        abstractAssetEntityDeserializer0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.JsonNode` from Array value (token `JsonToken.END_ARRAY`)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AbstractAssetEntityDeserializer abstractAssetEntityDeserializer0 = new AbstractAssetEntityDeserializer();
      JsonFactoryBuilder jsonFactoryBuilder0 = new JsonFactoryBuilder();
      JsonFactory jsonFactory0 = new JsonFactory(jsonFactoryBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = objectMapper0.createParser("attribute_classes");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'attribute_classes': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: (String)\"attribute_classes\"; line: 1, column: 18]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AbstractAssetEntityDeserializer abstractAssetEntityDeserializer0 = new AbstractAssetEntityDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      char[] charArray0 = new char[8];
      charArray0[0] = '\"';
      charArray0[1] = '^';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      charArray0[7] = '\"';
      JsonParser jsonParser0 = objectMapper0.createParser(charArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
      abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
      abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
      try { 
        abstractAssetEntityDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (char[])\"\"^\"\"\"\"\"\"\"; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }
}
