/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 00:50:09 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.UpdatableReferenceDataValuesList;
import com.ibm.watson.data.client.model.UpdateReferenceDataValueEntity;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UpdatableReferenceDataValuesList_ESTest extends UpdatableReferenceDataValuesList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      Stack<UpdateReferenceDataValueEntity> stack0 = new Stack<UpdateReferenceDataValueEntity>();
      updatableReferenceDataValuesList0.setValues(stack0);
      List<UpdateReferenceDataValueEntity> list0 = updatableReferenceDataValuesList0.getValues();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      UpdateReferenceDataValueEntity updateReferenceDataValueEntity0 = new UpdateReferenceDataValueEntity();
      updatableReferenceDataValuesList0.addValuesItem(updateReferenceDataValueEntity0);
      List<UpdateReferenceDataValueEntity> list0 = updatableReferenceDataValuesList0.getValues();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      ArrayList<UpdateReferenceDataValueEntity> arrayList0 = new ArrayList<UpdateReferenceDataValueEntity>();
      updatableReferenceDataValuesList0.setValues(arrayList0);
      UpdateReferenceDataValueEntity updateReferenceDataValueEntity0 = new UpdateReferenceDataValueEntity();
      updatableReferenceDataValuesList0.addValuesItem(updateReferenceDataValueEntity0);
      updateReferenceDataValueEntity0.setValue(arrayList0);
      // Undeclared exception!
      try { 
        updatableReferenceDataValuesList0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      updatableReferenceDataValuesList0.addValuesItem((UpdateReferenceDataValueEntity) null);
      String string0 = updatableReferenceDataValuesList0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList1 = new UpdatableReferenceDataValuesList();
      boolean boolean0 = updatableReferenceDataValuesList0.equals(updatableReferenceDataValuesList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      boolean boolean0 = updatableReferenceDataValuesList0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      boolean boolean0 = updatableReferenceDataValuesList0.equals(updatableReferenceDataValuesList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      LinkedList<UpdateReferenceDataValueEntity> linkedList0 = new LinkedList<UpdateReferenceDataValueEntity>();
      boolean boolean0 = updatableReferenceDataValuesList0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      LinkedList<UpdateReferenceDataValueEntity> linkedList0 = new LinkedList<UpdateReferenceDataValueEntity>();
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList1 = updatableReferenceDataValuesList0.values(linkedList0);
      assertSame(updatableReferenceDataValuesList1, updatableReferenceDataValuesList0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      updatableReferenceDataValuesList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      String string0 = updatableReferenceDataValuesList0.toString();
      assertEquals("class UpdatableReferenceDataValuesList {\n    values: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UpdatableReferenceDataValuesList updatableReferenceDataValuesList0 = new UpdatableReferenceDataValuesList();
      List<UpdateReferenceDataValueEntity> list0 = updatableReferenceDataValuesList0.getValues();
      assertNull(list0);
  }
}
