/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:56:06 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.CreateProjectBody;
import com.ibm.watson.data.client.model.ProjectCatalog;
import com.ibm.watson.data.client.model.ProjectCompute;
import com.ibm.watson.data.client.model.ProjectGithub;
import com.ibm.watson.data.client.model.ProjectScope;
import com.ibm.watson.data.client.model.ProjectSettings;
import com.ibm.watson.data.client.model.ProjectStorage;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CreateProjectBody_ESTest extends CreateProjectBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectSettings projectSettings0 = new ProjectSettings();
      CreateProjectBody createProjectBody1 = createProjectBody0.settings(projectSettings0);
      ProjectSettings projectSettings1 = createProjectBody1.getSettings();
      assertSame(projectSettings1, projectSettings0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      CreateProjectBody createProjectBody1 = createProjectBody0.generator("RJ0qDz{kRM??iA;oW");
      String string0 = createProjectBody1.getGenerator();
      assertEquals("RJ0qDz{kRM??iA;oW", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      createProjectBody0.generator("");
      String string0 = createProjectBody0.getGenerator();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      Vector<ProjectCompute> vector0 = new Vector<ProjectCompute>();
      createProjectBody0.compute(vector0);
      List<ProjectCompute> list0 = createProjectBody0.getCompute();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      createProjectBody0.addComputeItem(projectCompute0);
      List<ProjectCompute> list0 = createProjectBody0.getCompute();
      assertTrue(list0.contains(projectCompute0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      ProjectCompute projectCompute1 = projectCompute0.credentials(projectCompute0);
      CreateProjectBody createProjectBody1 = createProjectBody0.addComputeItem(projectCompute1);
      // Undeclared exception!
      try { 
        createProjectBody1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      createProjectBody0.description("");
      CreateProjectBody createProjectBody1 = new CreateProjectBody();
      boolean boolean0 = createProjectBody1.equals(createProjectBody0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      CreateProjectBody createProjectBody1 = new CreateProjectBody();
      boolean boolean0 = createProjectBody1.equals(createProjectBody0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      boolean boolean0 = createProjectBody0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      boolean boolean0 = createProjectBody0.equals(createProjectBody0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      Object object0 = new Object();
      boolean boolean0 = createProjectBody0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectCompute projectCompute0 = new ProjectCompute();
      createProjectBody0.addComputeItem(projectCompute0);
      CreateProjectBody createProjectBody1 = createProjectBody0.addComputeItem(projectCompute0);
      assertNull(createProjectBody1.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      createProjectBody0.setScope((ProjectScope) null);
      assertNull(createProjectBody0.getGenerator());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectGithub projectGithub0 = createProjectBody0.getGithub();
      assertNull(projectGithub0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectStorage projectStorage0 = new ProjectStorage();
      createProjectBody0.setStorage(projectStorage0);
      ProjectStorage projectStorage1 = createProjectBody0.getStorage();
      assertNull(projectStorage1.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectStorage projectStorage0 = createProjectBody0.getStorage();
      assertNull(projectStorage0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectSettings projectSettings0 = new ProjectSettings();
      createProjectBody0.setSettings(projectSettings0);
      assertNull(createProjectBody0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectSettings projectSettings0 = createProjectBody0.getSettings();
      assertNull(projectSettings0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      CreateProjectBody createProjectBody1 = createProjectBody0.storage((ProjectStorage) null);
      assertFalse(createProjectBody1.getPublic());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      createProjectBody0.github(projectGithub0);
      ProjectGithub projectGithub1 = createProjectBody0.getGithub();
      assertSame(projectGithub1, projectGithub0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      createProjectBody0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      Vector<ProjectCompute> vector0 = new Vector<ProjectCompute>();
      createProjectBody0.setCompute(vector0);
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectScope projectScope0 = createProjectBody0.getScope();
      assertNull(projectScope0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      String string0 = createProjectBody0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      List<ProjectCompute> list0 = createProjectBody0.getCompute();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectCatalog projectCatalog0 = createProjectBody0.getCatalog();
      assertNull(projectCatalog0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      String string0 = createProjectBody0.getGenerator();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      createProjectBody0.catalog(projectCatalog0);
      ProjectCatalog projectCatalog1 = createProjectBody0.getCatalog();
      assertNull(projectCatalog1.getGuid());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectCatalog projectCatalog0 = new ProjectCatalog();
      createProjectBody0.setCatalog(projectCatalog0);
      assertNull(projectCatalog0.getPublic());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectScope projectScope0 = new ProjectScope();
      createProjectBody0.scope(projectScope0);
      ProjectScope projectScope1 = createProjectBody0.getScope();
      assertTrue(projectScope1.getEnforceMembers());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      createProjectBody0.setGenerator((String) null);
      assertNull(createProjectBody0.getDescription());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CreateProjectBody createProjectBody0 = new CreateProjectBody();
      ProjectGithub projectGithub0 = new ProjectGithub();
      createProjectBody0.setGithub(projectGithub0);
      assertNull(projectGithub0.getRepository());
  }
}
