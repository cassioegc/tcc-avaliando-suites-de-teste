/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 23:43:53 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.PaginatedRelationshipsList;
import com.ibm.watson.data.client.model.RelationshipRelationshipEntity;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaginatedRelationshipsList_ESTest extends PaginatedRelationshipsList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      LinkedList<RelationshipRelationshipEntity> linkedList0 = new LinkedList<RelationshipRelationshipEntity>();
      paginatedRelationshipsList0.resources(linkedList0);
      List<RelationshipRelationshipEntity> list0 = paginatedRelationshipsList0.getResources();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      RelationshipRelationshipEntity relationshipRelationshipEntity0 = new RelationshipRelationshipEntity();
      paginatedRelationshipsList0.addResourcesItem(relationshipRelationshipEntity0);
      List<RelationshipRelationshipEntity> list0 = paginatedRelationshipsList0.getResources();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      PaginatedRelationshipsList paginatedRelationshipsList1 = new PaginatedRelationshipsList();
      boolean boolean0 = paginatedRelationshipsList1.equals(paginatedRelationshipsList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      PaginatedRelationshipsList paginatedRelationshipsList1 = new PaginatedRelationshipsList();
      Integer integer0 = new Integer((-1127));
      paginatedRelationshipsList1.limit(integer0);
      boolean boolean0 = paginatedRelationshipsList0.equals(paginatedRelationshipsList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      Object object0 = new Object();
      boolean boolean0 = paginatedRelationshipsList0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      boolean boolean0 = paginatedRelationshipsList0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      boolean boolean0 = paginatedRelationshipsList0.equals(paginatedRelationshipsList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      RelationshipRelationshipEntity relationshipRelationshipEntity0 = new RelationshipRelationshipEntity();
      PaginatedRelationshipsList paginatedRelationshipsList1 = new PaginatedRelationshipsList();
      assertTrue(paginatedRelationshipsList1.equals((Object)paginatedRelationshipsList0));
      
      PaginatedRelationshipsList paginatedRelationshipsList2 = paginatedRelationshipsList0.addResourcesItem(relationshipRelationshipEntity0);
      boolean boolean0 = paginatedRelationshipsList1.equals(paginatedRelationshipsList2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      RelationshipRelationshipEntity relationshipRelationshipEntity0 = new RelationshipRelationshipEntity();
      paginatedRelationshipsList0.addResourcesItem(relationshipRelationshipEntity0);
      PaginatedRelationshipsList paginatedRelationshipsList1 = paginatedRelationshipsList0.addResourcesItem(relationshipRelationshipEntity0);
      assertSame(paginatedRelationshipsList0, paginatedRelationshipsList1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      String string0 = paginatedRelationshipsList0.toString();
      assertEquals("class PaginatedRelationshipsList {\n    limit: null\n    count: null\n    first: null\n    next: null\n    offset: null\n    last: null\n    prev: null\n    resources: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      LinkedList<RelationshipRelationshipEntity> linkedList0 = new LinkedList<RelationshipRelationshipEntity>();
      paginatedRelationshipsList0.setResources(linkedList0);
      assertNull(paginatedRelationshipsList0.getCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      List<RelationshipRelationshipEntity> list0 = paginatedRelationshipsList0.getResources();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaginatedRelationshipsList paginatedRelationshipsList0 = new PaginatedRelationshipsList();
      paginatedRelationshipsList0.hashCode();
  }
}
