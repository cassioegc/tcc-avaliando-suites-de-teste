/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:17:17 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.DataClassRelationshipsRequest;
import com.ibm.watson.data.client.model.NewRelationship;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.internal.DynamicGraph;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataClassRelationshipsRequest_ESTest extends DataClassRelationshipsRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      DynamicGraph<NewRelationship> dynamicGraph0 = new DynamicGraph<NewRelationship>();
      List<NewRelationship> list0 = dynamicGraph0.getDependenciesFor((NewRelationship) null);
      dataClassRelationshipsRequest0.terms(list0);
      List<NewRelationship> list1 = dataClassRelationshipsRequest0.getTerms();
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      dataClassRelationshipsRequest0.addTermsItem(newRelationship0);
      List<NewRelationship> list0 = dataClassRelationshipsRequest0.getTerms();
      assertTrue(list0.contains(newRelationship0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      dataClassRelationshipsRequest0.parentCategory(newRelationship0);
      NewRelationship newRelationship1 = dataClassRelationshipsRequest0.getParentCategory();
      assertSame(newRelationship1, newRelationship0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      DynamicGraph<NewRelationship> dynamicGraph0 = new DynamicGraph<NewRelationship>();
      List<NewRelationship> list0 = dynamicGraph0.getDependenciesFor(newRelationship0);
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = dataClassRelationshipsRequest0.classifications(list0);
      dataClassRelationshipsRequest1.addClassificationsItem(newRelationship0);
      DataClassRelationshipsRequest dataClassRelationshipsRequest2 = dataClassRelationshipsRequest0.hasTypesDataClasses(list0);
      List<NewRelationship> list1 = dataClassRelationshipsRequest2.getHasTypesDataClasses();
      assertTrue(list1.contains(newRelationship0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      dataClassRelationshipsRequest0.classifications(arrayList0);
      List<NewRelationship> list0 = dataClassRelationshipsRequest0.getClassifications();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      dataClassRelationshipsRequest0.addClassificationsItem(newRelationship0);
      List<NewRelationship> list0 = dataClassRelationshipsRequest0.getClassifications();
      assertTrue(list0.contains(newRelationship0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      dataClassRelationshipsRequest0.addCategoriesItem(newRelationship0);
      List<NewRelationship> list0 = dataClassRelationshipsRequest0.getCategories();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      dataClassRelationshipsRequest0.parentCategory(newRelationship0);
      String string0 = dataClassRelationshipsRequest0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = new DataClassRelationshipsRequest();
      assertTrue(dataClassRelationshipsRequest1.equals((Object)dataClassRelationshipsRequest0));
      
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      dataClassRelationshipsRequest1.setClassifications(arrayList0);
      boolean boolean0 = dataClassRelationshipsRequest0.equals(dataClassRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = new DataClassRelationshipsRequest();
      assertTrue(dataClassRelationshipsRequest1.equals((Object)dataClassRelationshipsRequest0));
      
      dataClassRelationshipsRequest1.setIsATypeOfDataClass(newRelationship0);
      boolean boolean0 = dataClassRelationshipsRequest0.equals(dataClassRelationshipsRequest1);
      assertFalse(dataClassRelationshipsRequest1.equals((Object)dataClassRelationshipsRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = new DataClassRelationshipsRequest();
      assertTrue(dataClassRelationshipsRequest1.equals((Object)dataClassRelationshipsRequest0));
      
      dataClassRelationshipsRequest1.addCategoriesItem(newRelationship0);
      boolean boolean0 = dataClassRelationshipsRequest0.equals(dataClassRelationshipsRequest1);
      assertFalse(dataClassRelationshipsRequest1.equals((Object)dataClassRelationshipsRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = new DataClassRelationshipsRequest();
      boolean boolean0 = dataClassRelationshipsRequest0.equals(dataClassRelationshipsRequest1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      Object object0 = new Object();
      boolean boolean0 = dataClassRelationshipsRequest0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      boolean boolean0 = dataClassRelationshipsRequest0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      boolean boolean0 = dataClassRelationshipsRequest0.equals(dataClassRelationshipsRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      dataClassRelationshipsRequest0.addTermsItem(newRelationship0);
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = new DataClassRelationshipsRequest();
      boolean boolean0 = dataClassRelationshipsRequest0.equals(dataClassRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      DynamicGraph<NewRelationship> dynamicGraph0 = new DynamicGraph<NewRelationship>();
      NewRelationship newRelationship0 = new NewRelationship();
      List<NewRelationship> list0 = dynamicGraph0.getDependenciesFor(newRelationship0);
      dataClassRelationshipsRequest0.terms(list0);
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = dataClassRelationshipsRequest0.addTermsItem(newRelationship0);
      assertSame(dataClassRelationshipsRequest0, dataClassRelationshipsRequest1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      dataClassRelationshipsRequest0.addHasTypesDataClassesItem(newRelationship0);
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = new DataClassRelationshipsRequest();
      boolean boolean0 = dataClassRelationshipsRequest0.equals(dataClassRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = dataClassRelationshipsRequest0.hasTypesDataClasses(linkedList0);
      dataClassRelationshipsRequest1.addHasTypesDataClassesItem(newRelationship0);
      assertTrue(linkedList0.contains(newRelationship0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      dataClassRelationshipsRequest0.addCategoriesItem(newRelationship0);
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = dataClassRelationshipsRequest0.addCategoriesItem(newRelationship0);
      assertSame(dataClassRelationshipsRequest1, dataClassRelationshipsRequest0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      List<NewRelationship> list0 = dataClassRelationshipsRequest0.getHasTypesDataClasses();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = dataClassRelationshipsRequest0.isATypeOfDataClass(newRelationship0);
      NewRelationship newRelationship1 = dataClassRelationshipsRequest1.getIsATypeOfDataClass();
      assertSame(newRelationship1, newRelationship0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      List<NewRelationship> list0 = dataClassRelationshipsRequest0.getTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      dataClassRelationshipsRequest0.categories(vector0);
      List<NewRelationship> list0 = dataClassRelationshipsRequest0.getCategories();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = dataClassRelationshipsRequest0.getIsATypeOfDataClass();
      assertNull(newRelationship0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      dataClassRelationshipsRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      dataClassRelationshipsRequest0.setTerms((List<NewRelationship>) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = dataClassRelationshipsRequest0.parentCategory(newRelationship0);
      DataClassRelationshipsRequest dataClassRelationshipsRequest2 = new DataClassRelationshipsRequest();
      boolean boolean0 = dataClassRelationshipsRequest1.equals(dataClassRelationshipsRequest2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      List<NewRelationship> list0 = dataClassRelationshipsRequest0.getClassifications();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      dataClassRelationshipsRequest0.setCategories(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      DataClassRelationshipsRequest dataClassRelationshipsRequest1 = dataClassRelationshipsRequest0.hasTypesDataClasses(vector0);
      List<NewRelationship> list0 = dataClassRelationshipsRequest1.getHasTypesDataClasses();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      dataClassRelationshipsRequest0.setParentCategory(newRelationship0);
      assertNull(newRelationship0.getDescription());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      List<NewRelationship> list0 = dataClassRelationshipsRequest0.getCategories();
      dataClassRelationshipsRequest0.setHasTypesDataClasses(list0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DataClassRelationshipsRequest dataClassRelationshipsRequest0 = new DataClassRelationshipsRequest();
      NewRelationship newRelationship0 = dataClassRelationshipsRequest0.getParentCategory();
      assertNull(newRelationship0);
  }
}
