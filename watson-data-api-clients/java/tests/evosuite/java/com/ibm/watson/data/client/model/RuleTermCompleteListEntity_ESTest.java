/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:21:32 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.PolicyRuleTermListResponseResource;
import com.ibm.watson.data.client.model.RuleTermCompleteListEntity;
import java.time.temporal.ChronoUnit;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RuleTermCompleteListEntity_ESTest extends RuleTermCompleteListEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      ruleTermCompleteListEntity0.triggerTerms((List<PolicyRuleTermListResponseResource>) null);
      List<PolicyRuleTermListResponseResource> list0 = ruleTermCompleteListEntity0.getTriggerTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      Vector<PolicyRuleTermListResponseResource> vector0 = new Vector<PolicyRuleTermListResponseResource>();
      ruleTermCompleteListEntity0.actionTerms(vector0);
      List<PolicyRuleTermListResponseResource> list0 = ruleTermCompleteListEntity0.getActionTerms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      PolicyRuleTermListResponseResource policyRuleTermListResponseResource0 = new PolicyRuleTermListResponseResource();
      RuleTermCompleteListEntity ruleTermCompleteListEntity1 = ruleTermCompleteListEntity0.addActionTermsItem(policyRuleTermListResponseResource0);
      List<PolicyRuleTermListResponseResource> list0 = ruleTermCompleteListEntity1.getActionTerms();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      RuleTermCompleteListEntity ruleTermCompleteListEntity1 = ruleTermCompleteListEntity0.triggerTerms((List<PolicyRuleTermListResponseResource>) null);
      PolicyRuleTermListResponseResource policyRuleTermListResponseResource0 = new PolicyRuleTermListResponseResource();
      // Undeclared exception!
      try { 
        ruleTermCompleteListEntity1.addTriggerTermsItem(policyRuleTermListResponseResource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.RuleTermCompleteListEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      RuleTermCompleteListEntity ruleTermCompleteListEntity1 = new RuleTermCompleteListEntity();
      boolean boolean0 = ruleTermCompleteListEntity0.equals(ruleTermCompleteListEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      ChronoUnit chronoUnit0 = ChronoUnit.MICROS;
      boolean boolean0 = ruleTermCompleteListEntity0.equals(chronoUnit0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      boolean boolean0 = ruleTermCompleteListEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      boolean boolean0 = ruleTermCompleteListEntity0.equals(ruleTermCompleteListEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      RuleTermCompleteListEntity ruleTermCompleteListEntity1 = new RuleTermCompleteListEntity();
      assertTrue(ruleTermCompleteListEntity1.equals((Object)ruleTermCompleteListEntity0));
      
      PolicyRuleTermListResponseResource policyRuleTermListResponseResource0 = new PolicyRuleTermListResponseResource();
      RuleTermCompleteListEntity ruleTermCompleteListEntity2 = ruleTermCompleteListEntity1.addActionTermsItem(policyRuleTermListResponseResource0);
      boolean boolean0 = ruleTermCompleteListEntity0.equals(ruleTermCompleteListEntity2);
      assertFalse(ruleTermCompleteListEntity1.equals((Object)ruleTermCompleteListEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      PolicyRuleTermListResponseResource policyRuleTermListResponseResource0 = new PolicyRuleTermListResponseResource();
      RuleTermCompleteListEntity ruleTermCompleteListEntity1 = ruleTermCompleteListEntity0.addActionTermsItem(policyRuleTermListResponseResource0);
      RuleTermCompleteListEntity ruleTermCompleteListEntity2 = ruleTermCompleteListEntity1.addActionTermsItem(policyRuleTermListResponseResource0);
      assertSame(ruleTermCompleteListEntity2, ruleTermCompleteListEntity0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      ruleTermCompleteListEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      List<PolicyRuleTermListResponseResource> list0 = ruleTermCompleteListEntity0.getTriggerTerms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      PolicyRuleTermListResponseResource policyRuleTermListResponseResource0 = new PolicyRuleTermListResponseResource();
      ruleTermCompleteListEntity0.addTriggerTermsItem(policyRuleTermListResponseResource0);
      List<PolicyRuleTermListResponseResource> list0 = ruleTermCompleteListEntity0.getTriggerTerms();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      String string0 = ruleTermCompleteListEntity0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      LinkedList<PolicyRuleTermListResponseResource> linkedList0 = new LinkedList<PolicyRuleTermListResponseResource>();
      ruleTermCompleteListEntity0.setTriggerTerms(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      List<PolicyRuleTermListResponseResource> list0 = ruleTermCompleteListEntity0.getActionTerms();
      RuleTermCompleteListEntity ruleTermCompleteListEntity1 = new RuleTermCompleteListEntity();
      assertTrue(ruleTermCompleteListEntity1.equals((Object)ruleTermCompleteListEntity0));
      
      ruleTermCompleteListEntity0.triggerTerms(list0);
      boolean boolean0 = ruleTermCompleteListEntity0.equals(ruleTermCompleteListEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RuleTermCompleteListEntity ruleTermCompleteListEntity0 = new RuleTermCompleteListEntity();
      LinkedList<PolicyRuleTermListResponseResource> linkedList0 = new LinkedList<PolicyRuleTermListResponseResource>();
      ruleTermCompleteListEntity0.setActionTerms(linkedList0);
      assertEquals(0, linkedList0.size());
  }
}
