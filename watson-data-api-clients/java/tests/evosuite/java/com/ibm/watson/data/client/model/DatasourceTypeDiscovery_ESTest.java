/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 20:01:51 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.DatasourceTypeDiscovery;
import com.ibm.watson.data.client.model.DiscoveryAssetType;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlRun;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatasourceTypeDiscovery_ESTest extends DatasourceTypeDiscovery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getIncludes();
      DatasourceTypeDiscovery datasourceTypeDiscovery1 = datasourceTypeDiscovery0.topLevelFilters(list0);
      List<String> list1 = datasourceTypeDiscovery1.getTopLevelFilters();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      datasourceTypeDiscovery0.addTopLevelFiltersItem("A,+<s{wOZGGZ");
      List<String> list0 = datasourceTypeDiscovery0.getTopLevelFilters();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      Stack<DiscoveryAssetType> stack0 = new Stack<DiscoveryAssetType>();
      ArrayList<DiscoveryAssetType> arrayList0 = new ArrayList<DiscoveryAssetType>(stack0);
      DatasourceTypeDiscovery datasourceTypeDiscovery1 = datasourceTypeDiscovery0.assetTypes(arrayList0);
      List<DiscoveryAssetType> list0 = datasourceTypeDiscovery1.getAssetTypes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      Vector<DiscoveryAssetType> vector0 = new Vector<DiscoveryAssetType>();
      DiscoveryAssetType discoveryAssetType0 = new DiscoveryAssetType();
      vector0.add(discoveryAssetType0);
      DatasourceTypeDiscovery datasourceTypeDiscovery1 = datasourceTypeDiscovery0.assetTypes(vector0);
      List<DiscoveryAssetType> list0 = datasourceTypeDiscovery1.getAssetTypes();
      assertTrue(list0.contains(discoveryAssetType0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, 0);
      List<String> list0 = xmlTest0.getIncludedGroups();
      datasourceTypeDiscovery0.topLevelFilters(list0);
      // Undeclared exception!
      try { 
        datasourceTypeDiscovery0.addTopLevelFiltersItem("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      DiscoveryAssetType discoveryAssetType0 = new DiscoveryAssetType();
      DatasourceTypeDiscovery datasourceTypeDiscovery1 = datasourceTypeDiscovery0.addAssetTypesItem(discoveryAssetType0);
      String string0 = datasourceTypeDiscovery1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      datasourceTypeDiscovery0.topLevelFilters(arrayList0);
      DatasourceTypeDiscovery datasourceTypeDiscovery1 = new DatasourceTypeDiscovery();
      boolean boolean0 = datasourceTypeDiscovery0.equals(datasourceTypeDiscovery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      DatasourceTypeDiscovery datasourceTypeDiscovery1 = new DatasourceTypeDiscovery();
      boolean boolean0 = datasourceTypeDiscovery1.equals(datasourceTypeDiscovery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      boolean boolean0 = datasourceTypeDiscovery0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      boolean boolean0 = datasourceTypeDiscovery0.equals(datasourceTypeDiscovery0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      Object object0 = new Object();
      boolean boolean0 = datasourceTypeDiscovery0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      DiscoveryAssetType discoveryAssetType0 = new DiscoveryAssetType();
      DatasourceTypeDiscovery datasourceTypeDiscovery1 = datasourceTypeDiscovery0.addAssetTypesItem(discoveryAssetType0);
      DatasourceTypeDiscovery datasourceTypeDiscovery2 = new DatasourceTypeDiscovery();
      boolean boolean0 = datasourceTypeDiscovery2.equals(datasourceTypeDiscovery1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      List<DiscoveryAssetType> list0 = datasourceTypeDiscovery0.getAssetTypes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      List<String> list0 = datasourceTypeDiscovery0.getTopLevelFilters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      LinkedList<DiscoveryAssetType> linkedList0 = new LinkedList<DiscoveryAssetType>();
      DatasourceTypeDiscovery datasourceTypeDiscovery1 = datasourceTypeDiscovery0.assetTypes(linkedList0);
      DiscoveryAssetType discoveryAssetType0 = new DiscoveryAssetType();
      datasourceTypeDiscovery1.addAssetTypesItem(discoveryAssetType0);
      assertTrue(linkedList0.contains(discoveryAssetType0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      Stack<String> stack0 = new Stack<String>();
      datasourceTypeDiscovery0.setTopLevelFilters(stack0);
      assertEquals(10, stack0.capacity());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      datasourceTypeDiscovery0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DatasourceTypeDiscovery datasourceTypeDiscovery0 = new DatasourceTypeDiscovery();
      LinkedList<DiscoveryAssetType> linkedList0 = new LinkedList<DiscoveryAssetType>();
      datasourceTypeDiscovery0.setAssetTypes(linkedList0);
      assertEquals(0, linkedList0.size());
  }
}
