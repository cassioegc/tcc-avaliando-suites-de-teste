/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 02:42:17 GMT 2021
 */

package com.ibm.watson.data.client.model.enums;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.enums.JsonPatchOperation;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonPatchOperation_ESTest extends JsonPatchOperation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JsonPatchOperation jsonPatchOperation0 = JsonPatchOperation.fromValue("test");
      assertEquals(JsonPatchOperation.TEST, jsonPatchOperation0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JsonPatchOperation[] jsonPatchOperationArray0 = JsonPatchOperation.values();
      assertEquals(6, jsonPatchOperationArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JsonPatchOperation jsonPatchOperation0 = JsonPatchOperation.valueOf("REPLACE");
      assertEquals("replace", jsonPatchOperation0.getValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JsonPatchOperation jsonPatchOperation0 = JsonPatchOperation.fromValue("add");
      assertEquals(JsonPatchOperation.ADD, jsonPatchOperation0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonPatchOperation.fromValue("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected value ''
         //
         verifyException("com.ibm.watson.data.client.model.enums.JsonPatchOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JsonPatchOperation jsonPatchOperation0 = JsonPatchOperation.ADD;
      String string0 = jsonPatchOperation0.toString();
      assertEquals("add", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JsonPatchOperation jsonPatchOperation0 = JsonPatchOperation.ADD;
      String string0 = jsonPatchOperation0.getValue();
      assertEquals("add", string0);
  }
}
