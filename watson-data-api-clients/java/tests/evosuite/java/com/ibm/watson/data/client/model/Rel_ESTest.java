/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 22:52:10 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.Rel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rel_ESTest extends Rel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rel rel0 = new Rel();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      rel0.toString(stringBuilder0);
      assertEquals("    id: null\n    rev: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rel rel0 = new Rel();
      rel0.setRev("&#^+Nw");
      String string0 = rel0.getRev();
      assertEquals("&#^+Nw", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rel rel0 = new Rel();
      Rel rel1 = rel0.id("NON_EMPTY");
      String string0 = rel1.getId();
      assertEquals("NON_EMPTY", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rel rel0 = new Rel();
      rel0.setId("");
      String string0 = rel0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rel rel0 = new Rel();
      // Undeclared exception!
      try { 
        rel0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.Rel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rel rel0 = new Rel();
      String string0 = rel0.toIndentedString("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rel rel0 = new Rel();
      rel0.setRev("com.ibm.watson.data.client.model.Rel");
      Rel rel1 = new Rel();
      boolean boolean0 = rel0.equals(rel1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rel rel0 = new Rel();
      Rel rel1 = new Rel();
      boolean boolean0 = rel0.equals(rel1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rel rel0 = new Rel();
      boolean boolean0 = rel0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rel rel0 = new Rel();
      boolean boolean0 = rel0.equals(rel0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rel rel0 = new Rel();
      Object object0 = new Object();
      boolean boolean0 = rel0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rel rel0 = new Rel();
      rel0.setId("java.lang.String@0000000002");
      Rel rel1 = new Rel();
      boolean boolean0 = rel0.equals(rel1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rel rel0 = new Rel();
      String string0 = rel0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rel rel0 = new Rel();
      String string0 = rel0.getRev();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rel rel0 = new Rel();
      String string0 = rel0.toString();
      assertEquals("class Rel {\n    id: null\n    rev: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rel rel0 = new Rel();
      rel0.rev("");
      String string0 = rel0.getRev();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rel rel0 = new Rel();
      rel0.hashCode();
  }
}
