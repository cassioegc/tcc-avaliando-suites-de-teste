/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:40:03 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.AttachmentHeader;
import com.ibm.watson.data.client.model.AttachmentRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AttachmentRequest_ESTest extends AttachmentRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Boolean boolean0 = Boolean.TRUE;
      attachmentRequest0.privateUrl(boolean0);
      Boolean boolean1 = attachmentRequest0.getPrivateUrl();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Boolean boolean0 = new Boolean(false);
      attachmentRequest0.privateUrl(boolean0);
      Boolean boolean1 = attachmentRequest0.getPrivateUrl();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Boolean boolean0 = new Boolean(true);
      AttachmentRequest attachmentRequest1 = attachmentRequest0.objectKeyIsReadOnly(boolean0);
      Boolean boolean1 = attachmentRequest1.getObjectKeyIsReadOnly();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Integer integer0 = new Integer((-5359));
      AttachmentRequest attachmentRequest1 = attachmentRequest0.dataPartitions(integer0);
      Integer integer1 = attachmentRequest1.getDataPartitions();
      assertEquals((-5359), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Integer integer0 = new Integer(0);
      AttachmentRequest attachmentRequest1 = attachmentRequest0.dataPartitions(integer0);
      Integer integer1 = attachmentRequest1.getDataPartitions();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Integer integer0 = new Integer(634);
      attachmentRequest0.dataPartitions(integer0);
      Integer integer1 = attachmentRequest0.getDataPartitions();
      assertEquals(634, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Integer integer0 = new Integer(1740);
      attachmentRequest0.dataPartitions(integer0);
      Integer integer1 = attachmentRequest0.getDataPartitions();
      assertEquals(1740, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Boolean boolean0 = Boolean.valueOf(false);
      attachmentRequest0.objectKeyIsReadOnly(boolean0);
      AttachmentRequest attachmentRequest1 = new AttachmentRequest();
      boolean boolean1 = attachmentRequest0.equals(attachmentRequest1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      AttachmentRequest attachmentRequest1 = new AttachmentRequest();
      boolean boolean0 = attachmentRequest1.equals(attachmentRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Integer integer0 = new Integer((-1268));
      AttachmentRequest attachmentRequest1 = attachmentRequest0.dataPartitions(integer0);
      AttachmentRequest attachmentRequest2 = new AttachmentRequest();
      boolean boolean0 = attachmentRequest1.equals(attachmentRequest2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      AttachmentRequest attachmentRequest1 = new AttachmentRequest();
      AttachmentHeader attachmentHeader0 = attachmentRequest0.connectionId("D7^|6i");
      boolean boolean0 = attachmentRequest1.equals(attachmentHeader0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Boolean boolean0 = new Boolean(false);
      boolean boolean1 = attachmentRequest0.equals(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      boolean boolean0 = attachmentRequest0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      boolean boolean0 = attachmentRequest0.equals(attachmentRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Integer integer0 = new Integer(0);
      attachmentRequest0.setDataPartitions(integer0);
      assertNull(attachmentRequest0.getMime());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Boolean boolean0 = new Boolean(false);
      attachmentRequest0.setObjectKeyIsReadOnly(boolean0);
      Boolean boolean1 = attachmentRequest0.getObjectKeyIsReadOnly();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Boolean boolean0 = Boolean.TRUE;
      attachmentRequest0.setPrivateUrl(boolean0);
      assertNull(attachmentRequest0.getMime());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Boolean boolean0 = new Boolean(false);
      attachmentRequest0.privateUrl(boolean0);
      AttachmentRequest attachmentRequest1 = new AttachmentRequest();
      boolean boolean1 = attachmentRequest1.equals(attachmentRequest0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      String string0 = attachmentRequest0.toString();
      assertEquals("class Attachment {\n    assetType: null\n    name: null\n    description: null\n    mime: null\n    testDoc: null\n    connectionId: null\n    connectionPath: null\n    objectKey: null\n    userData: null\n    isPartitioned: null\n    assetCategory: null\n    dataPartitions: null\n    privateUrl: null\n    objectKeyIsReadOnly: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Boolean boolean0 = attachmentRequest0.getObjectKeyIsReadOnly();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Boolean boolean0 = attachmentRequest0.getPrivateUrl();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      Integer integer0 = attachmentRequest0.getDataPartitions();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AttachmentRequest attachmentRequest0 = new AttachmentRequest();
      attachmentRequest0.hashCode();
  }
}
