/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 00:05:56 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.ModelEntitySize;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModelEntitySize_ESTest extends ModelEntitySize_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      modelEntitySize0.inMemory(bigDecimal0);
      BigDecimal bigDecimal1 = modelEntitySize0.getInMemory();
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      ModelEntitySize modelEntitySize1 = modelEntitySize0.inMemory(bigDecimal0);
      BigDecimal bigDecimal1 = modelEntitySize1.getInMemory();
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = new BigDecimal((-299));
      ModelEntitySize modelEntitySize1 = modelEntitySize0.inMemory(bigDecimal0);
      BigDecimal bigDecimal1 = modelEntitySize1.getInMemory();
      assertEquals((short) (-299), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      modelEntitySize0.content(bigDecimal0);
      BigDecimal bigDecimal1 = modelEntitySize0.getContent();
      assertEquals((byte)0, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      modelEntitySize0.content(bigDecimal0);
      BigDecimal bigDecimal1 = modelEntitySize0.getContent();
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      ModelEntitySize modelEntitySize1 = modelEntitySize0.content(bigDecimal0);
      BigDecimal bigDecimal1 = modelEntitySize1.getContent();
      assertEquals((short) (-1), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      ModelEntitySize modelEntitySize1 = new ModelEntitySize();
      boolean boolean0 = modelEntitySize0.equals(modelEntitySize1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = modelEntitySize0.equals(bigDecimal0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      boolean boolean0 = modelEntitySize0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      boolean boolean0 = modelEntitySize0.equals(modelEntitySize0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = new BigDecimal((-581L));
      modelEntitySize0.inMemory(bigDecimal0);
      ModelEntitySize modelEntitySize1 = new ModelEntitySize();
      boolean boolean0 = modelEntitySize0.equals(modelEntitySize1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      String string0 = modelEntitySize0.toString();
      assertEquals("class ModelEntitySize {\n    inMemory: null\n    content: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = new BigDecimal((-581L));
      modelEntitySize0.setInMemory(bigDecimal0);
      assertEquals((short) (-581), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      modelEntitySize0.inMemory(bigDecimal0);
      String string0 = modelEntitySize0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = modelEntitySize0.getInMemory();
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      modelEntitySize0.setContent(bigDecimal0);
      ModelEntitySize modelEntitySize1 = new ModelEntitySize();
      boolean boolean0 = modelEntitySize1.equals(modelEntitySize0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      modelEntitySize0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = modelEntitySize0.getContent();
      assertNull(bigDecimal0);
  }
}
