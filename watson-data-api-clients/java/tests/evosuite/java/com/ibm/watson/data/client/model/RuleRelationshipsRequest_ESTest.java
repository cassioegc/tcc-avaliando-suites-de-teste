/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 14:50:11 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.NewRelationship;
import com.ibm.watson.data.client.model.RuleRelationshipsRequest;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RuleRelationshipsRequest_ESTest extends RuleRelationshipsRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      ruleRelationshipsRequest0.setTerms(arrayList0);
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getTerms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ruleRelationshipsRequest0.addTermsItem((NewRelationship) null);
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getTerms();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.rules(arrayList0);
      List<NewRelationship> list0 = ruleRelationshipsRequest1.getRules();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      ruleRelationshipsRequest0.setReferenceData(arrayList0);
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getReferenceData();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ruleRelationshipsRequest0.addReferenceDataItem((NewRelationship) null);
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getReferenceData();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      ruleRelationshipsRequest0.policies(arrayList0);
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getPolicies();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      ruleRelationshipsRequest0.parentCategory(newRelationship0);
      NewRelationship newRelationship1 = ruleRelationshipsRequest0.getParentCategory();
      assertSame(newRelationship1, newRelationship0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.addDataClassesItem(newRelationship0);
      List<NewRelationship> list0 = ruleRelationshipsRequest1.getDataClasses();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      ruleRelationshipsRequest0.classifications(arrayList0);
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getClassifications();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      ruleRelationshipsRequest0.addClassificationsItem(newRelationship0);
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getClassifications();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      ruleRelationshipsRequest0.categories(vector0);
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getCategories();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      ruleRelationshipsRequest0.policies(arrayList0);
      String string0 = ruleRelationshipsRequest0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.policies(arrayList0);
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest2 = ruleRelationshipsRequest0.addReferenceDataItem(newRelationship0);
      RuleRelationshipsRequest ruleRelationshipsRequest3 = new RuleRelationshipsRequest();
      RuleRelationshipsRequest ruleRelationshipsRequest4 = ruleRelationshipsRequest3.referenceData(arrayList0);
      ruleRelationshipsRequest1.addDataClassesItem(newRelationship0);
      ruleRelationshipsRequest4.addPoliciesItem(newRelationship0);
      RuleRelationshipsRequest ruleRelationshipsRequest5 = ruleRelationshipsRequest4.addReferenceDataItem(newRelationship0);
      boolean boolean0 = ruleRelationshipsRequest5.equals(ruleRelationshipsRequest2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.policies(arrayList0);
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest2 = ruleRelationshipsRequest0.addReferenceDataItem(newRelationship0);
      RuleRelationshipsRequest ruleRelationshipsRequest3 = new RuleRelationshipsRequest();
      RuleRelationshipsRequest ruleRelationshipsRequest4 = ruleRelationshipsRequest3.referenceData(arrayList0);
      RuleRelationshipsRequest ruleRelationshipsRequest5 = ruleRelationshipsRequest4.addPoliciesItem(newRelationship0);
      assertFalse(ruleRelationshipsRequest5.equals((Object)ruleRelationshipsRequest0));
      
      RuleRelationshipsRequest ruleRelationshipsRequest6 = ruleRelationshipsRequest4.addReferenceDataItem(newRelationship0);
      boolean boolean0 = ruleRelationshipsRequest6.equals(ruleRelationshipsRequest2);
      assertTrue(ruleRelationshipsRequest4.equals((Object)ruleRelationshipsRequest1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.policies(arrayList0);
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest2 = new RuleRelationshipsRequest();
      RuleRelationshipsRequest ruleRelationshipsRequest3 = ruleRelationshipsRequest2.referenceData(arrayList0);
      ruleRelationshipsRequest3.addPoliciesItem(newRelationship0);
      RuleRelationshipsRequest ruleRelationshipsRequest4 = ruleRelationshipsRequest3.addReferenceDataItem(newRelationship0);
      ruleRelationshipsRequest0.addCategoriesItem(newRelationship0);
      ruleRelationshipsRequest1.addClassificationsItem(newRelationship0);
      RuleRelationshipsRequest ruleRelationshipsRequest5 = ruleRelationshipsRequest4.addCategoriesItem(newRelationship0);
      boolean boolean0 = ruleRelationshipsRequest5.equals(ruleRelationshipsRequest0);
      assertFalse(ruleRelationshipsRequest2.equals((Object)ruleRelationshipsRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.policies(arrayList0);
      ruleRelationshipsRequest1.terms(arrayList0);
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest2 = new RuleRelationshipsRequest();
      RuleRelationshipsRequest ruleRelationshipsRequest3 = ruleRelationshipsRequest2.referenceData(arrayList0);
      ruleRelationshipsRequest3.addPoliciesItem(newRelationship0);
      RuleRelationshipsRequest ruleRelationshipsRequest4 = ruleRelationshipsRequest3.addReferenceDataItem(newRelationship0);
      boolean boolean0 = ruleRelationshipsRequest4.equals(ruleRelationshipsRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = new RuleRelationshipsRequest();
      assertTrue(ruleRelationshipsRequest1.equals((Object)ruleRelationshipsRequest0));
      
      ruleRelationshipsRequest0.setCategories(arrayList0);
      boolean boolean0 = ruleRelationshipsRequest1.equals(ruleRelationshipsRequest0);
      assertFalse(ruleRelationshipsRequest1.equals((Object)ruleRelationshipsRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      boolean boolean0 = ruleRelationshipsRequest0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      boolean boolean0 = ruleRelationshipsRequest0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      boolean boolean0 = ruleRelationshipsRequest0.equals(ruleRelationshipsRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = new RuleRelationshipsRequest();
      assertTrue(ruleRelationshipsRequest1.equals((Object)ruleRelationshipsRequest0));
      
      RuleRelationshipsRequest ruleRelationshipsRequest2 = ruleRelationshipsRequest1.addReferenceDataItem(newRelationship0);
      boolean boolean0 = ruleRelationshipsRequest2.equals(ruleRelationshipsRequest0);
      assertFalse(ruleRelationshipsRequest1.equals((Object)ruleRelationshipsRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.addDataClassesItem(newRelationship0);
      RuleRelationshipsRequest ruleRelationshipsRequest2 = ruleRelationshipsRequest1.addDataClassesItem(newRelationship0);
      assertSame(ruleRelationshipsRequest2, ruleRelationshipsRequest1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.addClassificationsItem(newRelationship0);
      RuleRelationshipsRequest ruleRelationshipsRequest2 = ruleRelationshipsRequest1.addClassificationsItem(newRelationship0);
      assertSame(ruleRelationshipsRequest2, ruleRelationshipsRequest1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.addTermsItem(newRelationship0);
      RuleRelationshipsRequest ruleRelationshipsRequest2 = ruleRelationshipsRequest1.addTermsItem(newRelationship0);
      assertSame(ruleRelationshipsRequest2, ruleRelationshipsRequest1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      ruleRelationshipsRequest0.addRulesItem(newRelationship0);
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getRules();
      assertTrue(list0.contains(newRelationship0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      ruleRelationshipsRequest0.addPoliciesItem(newRelationship0);
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getPolicies();
      ruleRelationshipsRequest0.setRules(list0);
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.addRulesItem(newRelationship0);
      assertSame(ruleRelationshipsRequest1, ruleRelationshipsRequest0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.addPoliciesItem(newRelationship0);
      RuleRelationshipsRequest ruleRelationshipsRequest2 = ruleRelationshipsRequest0.addPoliciesItem(newRelationship0);
      assertSame(ruleRelationshipsRequest2, ruleRelationshipsRequest1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.addCategoriesItem(newRelationship0);
      List<NewRelationship> list0 = ruleRelationshipsRequest1.getCategories();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      NewRelationship newRelationship0 = new NewRelationship();
      ruleRelationshipsRequest0.setCategories(arrayList0);
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.addCategoriesItem(newRelationship0);
      assertSame(ruleRelationshipsRequest1, ruleRelationshipsRequest0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = ruleRelationshipsRequest0.getParentCategory();
      assertNull(newRelationship0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getDataClasses();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      ruleRelationshipsRequest0.setParentCategory(newRelationship0);
      assertNull(newRelationship0.getDescription());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      ruleRelationshipsRequest0.setRules(arrayList0);
      RuleRelationshipsRequest ruleRelationshipsRequest1 = new RuleRelationshipsRequest();
      boolean boolean0 = ruleRelationshipsRequest0.equals(ruleRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      ruleRelationshipsRequest0.setPolicies(arrayList0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getPolicies();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ruleRelationshipsRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ruleRelationshipsRequest0.setDataClasses((List<NewRelationship>) null);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      ArrayList<NewRelationship> arrayList0 = new ArrayList<NewRelationship>();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.policies(arrayList0);
      RuleRelationshipsRequest ruleRelationshipsRequest2 = new RuleRelationshipsRequest();
      boolean boolean0 = ruleRelationshipsRequest2.equals(ruleRelationshipsRequest1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getCategories();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getReferenceData();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getRules();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      ruleRelationshipsRequest0.dataClasses(vector0);
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getDataClasses();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      RuleRelationshipsRequest ruleRelationshipsRequest1 = ruleRelationshipsRequest0.parentCategory(newRelationship0);
      RuleRelationshipsRequest ruleRelationshipsRequest2 = new RuleRelationshipsRequest();
      boolean boolean0 = ruleRelationshipsRequest1.equals(ruleRelationshipsRequest2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      LinkedList<NewRelationship> linkedList0 = new LinkedList<NewRelationship>();
      ruleRelationshipsRequest0.setClassifications(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      List<NewRelationship> list0 = ruleRelationshipsRequest0.getClassifications();
      assertNull(list0);
  }
}
