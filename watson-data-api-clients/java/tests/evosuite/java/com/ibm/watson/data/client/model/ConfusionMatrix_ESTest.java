/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:38:21 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.ConfusionMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConfusionMatrix_ESTest extends ConfusionMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      confusionMatrix0.trueClass("AUTO");
      String string0 = confusionMatrix0.getTrueClass();
      assertEquals("AUTO", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      confusionMatrix0.setTrueClass("");
      String string0 = confusionMatrix0.getTrueClass();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer(0);
      confusionMatrix0.setTp(integer0);
      Integer integer1 = confusionMatrix0.getTp();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer(638);
      confusionMatrix0.tp(integer0);
      Integer integer1 = confusionMatrix0.getTp();
      assertEquals(638, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer((-2310));
      confusionMatrix0.tp(integer0);
      Integer integer1 = confusionMatrix0.getTp();
      assertEquals((-2310), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer(0);
      confusionMatrix0.tn(integer0);
      Integer integer1 = confusionMatrix0.getTn();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer(285);
      confusionMatrix0.tn(integer0);
      Integer integer1 = confusionMatrix0.getTn();
      assertEquals(285, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer((-3655));
      confusionMatrix0.tn(integer0);
      Integer integer1 = confusionMatrix0.getTn();
      assertEquals((-3655), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer(3);
      ConfusionMatrix confusionMatrix1 = confusionMatrix0.fp(integer0);
      Integer integer1 = confusionMatrix1.getFp();
      assertEquals(3, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer(0);
      confusionMatrix0.fp(integer0);
      Integer integer1 = confusionMatrix0.getFp();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer((-2001));
      confusionMatrix0.setFp(integer0);
      Integer integer1 = confusionMatrix0.getFp();
      assertEquals((-2001), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer(0);
      confusionMatrix0.setFn(integer0);
      Integer integer1 = confusionMatrix0.getFn();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer(3);
      confusionMatrix0.setFn(integer0);
      Integer integer1 = confusionMatrix0.getFn();
      assertEquals(3, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer((-1));
      ConfusionMatrix confusionMatrix1 = confusionMatrix0.fn(integer0);
      Integer integer1 = confusionMatrix1.getFn();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer((-3655));
      ConfusionMatrix confusionMatrix1 = confusionMatrix0.fn(integer0);
      String string0 = confusionMatrix1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      ConfusionMatrix confusionMatrix1 = new ConfusionMatrix();
      boolean boolean0 = confusionMatrix0.equals(confusionMatrix1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer((-1899));
      confusionMatrix0.fp(integer0);
      ConfusionMatrix confusionMatrix1 = new ConfusionMatrix();
      boolean boolean0 = confusionMatrix0.equals(confusionMatrix1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer((-3655));
      confusionMatrix0.tn(integer0);
      ConfusionMatrix confusionMatrix1 = new ConfusionMatrix();
      boolean boolean0 = confusionMatrix0.equals(confusionMatrix1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      ConfusionMatrix confusionMatrix1 = new ConfusionMatrix();
      assertTrue(confusionMatrix1.equals((Object)confusionMatrix0));
      
      Integer integer0 = new Integer((-1));
      confusionMatrix1.tp(integer0);
      boolean boolean0 = confusionMatrix0.equals(confusionMatrix1);
      assertFalse(confusionMatrix1.equals((Object)confusionMatrix0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer((-4));
      boolean boolean0 = confusionMatrix0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      boolean boolean0 = confusionMatrix0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      boolean boolean0 = confusionMatrix0.equals(confusionMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = confusionMatrix0.getTp();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      String string0 = confusionMatrix0.getTrueClass();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = confusionMatrix0.getTn();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      confusionMatrix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = confusionMatrix0.getFp();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      confusionMatrix0.trueClass("X;");
      ConfusionMatrix confusionMatrix1 = new ConfusionMatrix();
      boolean boolean0 = confusionMatrix0.equals(confusionMatrix1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer((-4));
      confusionMatrix0.setFp(integer0);
      Integer integer1 = confusionMatrix0.getFp();
      assertEquals((-4), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer((-22));
      confusionMatrix0.setTn(integer0);
      assertNull(confusionMatrix0.getTrueClass());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = new Integer((-3655));
      ConfusionMatrix confusionMatrix1 = confusionMatrix0.fn(integer0);
      ConfusionMatrix confusionMatrix2 = new ConfusionMatrix();
      boolean boolean0 = confusionMatrix1.equals(confusionMatrix2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      Integer integer0 = confusionMatrix0.getFn();
      assertNull(integer0);
  }
}
