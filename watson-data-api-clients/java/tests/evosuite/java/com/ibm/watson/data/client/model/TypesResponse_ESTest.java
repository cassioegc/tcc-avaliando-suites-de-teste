/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 01:49:33 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.AssetTypeProperty;
import com.ibm.watson.data.client.model.Type;
import com.ibm.watson.data.client.model.TypesResponse;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypesResponse_ESTest extends TypesResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      typesResponse0.setResources((List<Type>) null);
      List<Type> list0 = typesResponse0.getResources();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      Type type0 = new Type();
      AssetTypeProperty assetTypeProperty0 = new AssetTypeProperty();
      type0.putPropertiesItem((String) null, assetTypeProperty0);
      typesResponse0.addResourcesItem(type0);
      assetTypeProperty0.setDefaultValue(type0);
      // Undeclared exception!
      try { 
        typesResponse0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      typesResponse0.resources((List<Type>) null);
      Type type0 = new Type();
      // Undeclared exception!
      try { 
        typesResponse0.addResourcesItem(type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.TypesResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      TypesResponse typesResponse1 = new TypesResponse();
      boolean boolean0 = typesResponse0.equals(typesResponse1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      Object object0 = new Object();
      boolean boolean0 = typesResponse0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      boolean boolean0 = typesResponse0.equals(typesResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      boolean boolean0 = typesResponse0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      TypesResponse typesResponse1 = typesResponse0.resources((List<Type>) null);
      String string0 = typesResponse1.toString();
      assertEquals("class TypesResponse {\n    resources: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      String string0 = typesResponse0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      typesResponse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      List<Type> list0 = typesResponse0.getResources();
      typesResponse0.setResources(list0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypesResponse typesResponse0 = new TypesResponse();
      Type type0 = new Type();
      TypesResponse typesResponse1 = typesResponse0.addResourcesItem(type0);
      List<Type> list0 = typesResponse1.getResources();
      assertFalse(list0.isEmpty());
  }
}
