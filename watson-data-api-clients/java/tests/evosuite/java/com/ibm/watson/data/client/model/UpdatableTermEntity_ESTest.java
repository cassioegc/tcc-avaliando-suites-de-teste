/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 01:00:42 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.UpdatableTermEntity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UpdatableTermEntity_ESTest extends UpdatableTermEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UpdatableTermEntity updatableTermEntity0 = new UpdatableTermEntity();
      UpdatableTermEntity updatableTermEntity1 = updatableTermEntity0.revision("class UpdatableTermEntity {\n");
      String string0 = updatableTermEntity1.getRevision();
      assertEquals("class UpdatableTermEntity {\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UpdatableTermEntity updatableTermEntity0 = new UpdatableTermEntity();
      UpdatableTermEntity updatableTermEntity1 = updatableTermEntity0.revision("");
      String string0 = updatableTermEntity1.getRevision();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UpdatableTermEntity updatableTermEntity0 = new UpdatableTermEntity();
      UpdatableTermEntity updatableTermEntity1 = new UpdatableTermEntity();
      MockDate mockDate0 = new MockDate(2, (-4420), 2);
      updatableTermEntity1.setEffectiveEndDate(mockDate0);
      boolean boolean0 = updatableTermEntity1.equals(updatableTermEntity0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UpdatableTermEntity updatableTermEntity0 = new UpdatableTermEntity();
      UpdatableTermEntity updatableTermEntity1 = new UpdatableTermEntity();
      boolean boolean0 = updatableTermEntity0.equals(updatableTermEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UpdatableTermEntity updatableTermEntity0 = new UpdatableTermEntity();
      boolean boolean0 = updatableTermEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UpdatableTermEntity updatableTermEntity0 = new UpdatableTermEntity();
      boolean boolean0 = updatableTermEntity0.equals(updatableTermEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UpdatableTermEntity updatableTermEntity0 = new UpdatableTermEntity();
      boolean boolean0 = updatableTermEntity0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UpdatableTermEntity updatableTermEntity0 = new UpdatableTermEntity();
      String string0 = updatableTermEntity0.getRevision();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UpdatableTermEntity updatableTermEntity0 = new UpdatableTermEntity();
      String string0 = updatableTermEntity0.toString();
      assertEquals("class UpdatableTermEntity {\n    longDescription: null\n    state: null\n    customAttributes: null\n    name: null\n    shortDescription: null\n    effectiveStartDate: null\n    effectiveEndDate: null\n    tags: null\n    stewardIds: null\n    parentCategory: null\n    categories: null\n    abbreviations: null\n    importSourceCreatedBy: null\n    importSourceCreatedOn: null\n    importSourceUsage: null\n    example: null\n    relatedTermRelationships: null\n    isATypeOfTerms: null\n    hasTypeTerms: null\n    isOfTerms: null\n    hasTerms: null\n    synonymTerms: null\n    relatedTerms: null\n    replacesTerms: null\n    replacedByTerms: null\n    dataClasses: null\n    classifications: null\n    revision: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UpdatableTermEntity updatableTermEntity0 = new UpdatableTermEntity();
      updatableTermEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UpdatableTermEntity updatableTermEntity0 = new UpdatableTermEntity();
      updatableTermEntity0.setRevision("class UpdatableTermEntity {\n    longDescription: null\n    state: null\n    customAttributes: null\n    name: null\n    shortDescription: null\n    effectiveStartDate: null\n    effectiveEndDate: null\n    tags: null\n    stewardIds: null\n    parentCategory: null\n    categories: null\n    abbreviations: null\n    importSourceCreatedBy: null\n    importSourceCreatedOn: null\n    importSourceUsage: null\n    example: null\n    relatedTermRelationships: null\n    isATypeOfTerms: null\n    hasTypeTerms: null\n    isOfTerms: null\n    hasTerms: null\n    synonymTerms: null\n    relatedTerms: null\n    replacesTerms: null\n    replacedByTerms: null\n    dataClasses: null\n    classifications: null\n    revision: null\n}");
      UpdatableTermEntity updatableTermEntity1 = new UpdatableTermEntity();
      boolean boolean0 = updatableTermEntity0.equals(updatableTermEntity1);
      assertFalse(boolean0);
  }
}
