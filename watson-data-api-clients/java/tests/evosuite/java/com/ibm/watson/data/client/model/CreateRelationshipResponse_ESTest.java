/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 01:22:09 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.CreateRelationshipResponse;
import com.ibm.watson.data.client.model.CreateRelationshipResponseResource;
import io.netty.util.concurrent.ImmediateEventExecutor;
import io.netty.util.concurrent.Promise;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CreateRelationshipResponse_ESTest extends CreateRelationshipResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      Stack<CreateRelationshipResponseResource> stack0 = new Stack<CreateRelationshipResponseResource>();
      CreateRelationshipResponse createRelationshipResponse1 = createRelationshipResponse0.resources(stack0);
      List<CreateRelationshipResponseResource> list0 = createRelationshipResponse1.getResources();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      Vector<CreateRelationshipResponseResource> vector0 = new Vector<CreateRelationshipResponseResource>();
      CreateRelationshipResponse createRelationshipResponse1 = createRelationshipResponse0.resources(vector0);
      String string0 = createRelationshipResponse1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      CreateRelationshipResponse createRelationshipResponse1 = new CreateRelationshipResponse();
      boolean boolean0 = createRelationshipResponse0.equals(createRelationshipResponse1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      boolean boolean0 = createRelationshipResponse0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      boolean boolean0 = createRelationshipResponse0.equals(createRelationshipResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      ImmediateEventExecutor immediateEventExecutor0 = ImmediateEventExecutor.INSTANCE;
      Promise<Integer> promise0 = immediateEventExecutor0.newPromise();
      boolean boolean0 = createRelationshipResponse0.equals(promise0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      CreateRelationshipResponseResource createRelationshipResponseResource0 = new CreateRelationshipResponseResource();
      CreateRelationshipResponse createRelationshipResponse1 = createRelationshipResponse0.addResourcesItem(createRelationshipResponseResource0);
      List<CreateRelationshipResponseResource> list0 = createRelationshipResponse1.getResources();
      assertTrue(list0.contains(createRelationshipResponseResource0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      Vector<CreateRelationshipResponseResource> vector0 = new Vector<CreateRelationshipResponseResource>();
      CreateRelationshipResponse createRelationshipResponse1 = createRelationshipResponse0.resources(vector0);
      createRelationshipResponse1.addResourcesItem((CreateRelationshipResponseResource) null);
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      List<CreateRelationshipResponseResource> list0 = createRelationshipResponse0.getResources();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      Vector<CreateRelationshipResponseResource> vector0 = new Vector<CreateRelationshipResponseResource>();
      createRelationshipResponse0.setResources(vector0);
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      createRelationshipResponse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CreateRelationshipResponse createRelationshipResponse0 = new CreateRelationshipResponse();
      String string0 = createRelationshipResponse0.toString();
      assertEquals("class CreateRelationshipResponse {\n    resources: null\n}", string0);
  }
}
