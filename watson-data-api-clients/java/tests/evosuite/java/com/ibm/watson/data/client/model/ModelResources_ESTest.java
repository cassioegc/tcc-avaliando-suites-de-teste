/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:34:10 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.ModelEntity;
import com.ibm.watson.data.client.model.ModelResource;
import com.ibm.watson.data.client.model.ModelResources;
import com.ibm.watson.data.client.model.SystemDetails;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModelResources_ESTest extends ModelResources_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      SystemDetails systemDetails0 = new SystemDetails();
      ModelResources modelResources1 = modelResources0.system(systemDetails0);
      SystemDetails systemDetails1 = modelResources1.getSystem();
      assertSame(systemDetails0, systemDetails1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      ModelResources modelResources1 = modelResources0.addResourcesItem((ModelResource) null);
      List<ModelResource> list0 = modelResources1.getResources();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      ModelResource modelResource0 = new ModelResource();
      ModelResources modelResources1 = modelResources0.addResourcesItem(modelResource0);
      ModelEntity modelEntity0 = new ModelEntity();
      modelEntity0.putCustom((String) null, modelResource0);
      modelResource0.setEntity(modelEntity0);
      // Undeclared exception!
      try { 
        modelResources1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      ModelResources modelResources1 = new ModelResources();
      boolean boolean0 = modelResources0.equals(modelResources1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      Integer integer0 = Integer.getInteger((String) null, 1);
      modelResources0.setOffset(integer0);
      ModelResources modelResources1 = new ModelResources();
      boolean boolean0 = modelResources0.equals(modelResources1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      boolean boolean0 = modelResources0.equals("X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      boolean boolean0 = modelResources0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      boolean boolean0 = modelResources0.equals(modelResources0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      SystemDetails systemDetails0 = new SystemDetails();
      modelResources0.system(systemDetails0);
      ModelResources modelResources1 = new ModelResources();
      boolean boolean0 = modelResources0.equals(modelResources1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      ModelResources modelResources1 = modelResources0.addResourcesItem((ModelResource) null);
      ModelResources modelResources2 = new ModelResources();
      boolean boolean0 = modelResources1.equals(modelResources2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      ArrayList<ModelResource> arrayList0 = new ArrayList<ModelResource>();
      ModelResource modelResource0 = new ModelResource();
      modelResources0.resources(arrayList0);
      ModelResources modelResources1 = modelResources0.addResourcesItem(modelResource0);
      assertSame(modelResources0, modelResources1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      SystemDetails systemDetails0 = modelResources0.getSystem();
      assertNull(systemDetails0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      ArrayList<ModelResource> arrayList0 = new ArrayList<ModelResource>();
      ModelResources modelResources1 = modelResources0.resources(arrayList0);
      List<ModelResource> list0 = modelResources1.getResources();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      modelResources0.setSystem((SystemDetails) null);
      assertNull(modelResources0.getOffset());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      List<ModelResource> list0 = modelResources0.getResources();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      String string0 = modelResources0.toString();
      assertEquals("class ModelResources {\n    limit: null\n    count: null\n    first: null\n    next: null\n    offset: null\n    last: null\n    previous: null\n    resources: null\n    system: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      modelResources0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ModelResources modelResources0 = new ModelResources();
      ArrayList<ModelResource> arrayList0 = new ArrayList<ModelResource>();
      modelResources0.setResources(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }
}
