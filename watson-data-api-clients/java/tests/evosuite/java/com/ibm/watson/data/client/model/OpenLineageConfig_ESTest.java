/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 15:12:04 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.Connection;
import com.ibm.watson.data.client.model.OpenLineageConfig;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OpenLineageConfig_ESTest extends OpenLineageConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.openLineageProvider("^1yu5k^R3(Y.^");
      String string0 = openLineageConfig0.getOpenLineageProvider();
      assertEquals("^1yu5k^R3(Y.^", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.setOpenLineageName("reducer");
      String string0 = openLineageConfig0.getOpenLineageName();
      assertEquals("reducer", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      OpenLineageConfig openLineageConfig1 = openLineageConfig0.openLineageName("");
      String string0 = openLineageConfig1.getOpenLineageName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Connection connection0 = new Connection();
      OpenLineageConfig openLineageConfig1 = openLineageConfig0.openLineageMainGraphConnection(connection0);
      Connection connection1 = openLineageConfig1.getOpenLineageMainGraphConnection();
      assertNull(connection1.getDisplayName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      openLineageConfig0.openLineageId(integer0);
      Integer integer1 = openLineageConfig0.getOpenLineageId();
      assertEquals(5, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Integer integer0 = new Integer((-2654));
      OpenLineageConfig openLineageConfig1 = openLineageConfig0.openLineageId(integer0);
      Integer integer1 = openLineageConfig1.getOpenLineageId();
      assertEquals((-2654), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.openLineageDescription("$k1BKy:n0)8.c\"\"j X");
      String string0 = openLineageConfig0.getOpenLineageDescription();
      assertEquals("$k1BKy:n0)8.c\"\"j X", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      OpenLineageConfig openLineageConfig1 = openLineageConfig0.openLineageDescription("");
      String string0 = openLineageConfig1.getOpenLineageDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      OpenLineageConfig openLineageConfig1 = openLineageConfig0.mainGraphConfig(hashMap0);
      Map<String, Object> map0 = openLineageConfig1.getMainGraphConfig();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.putMainGraphConfigItem("", openLineageConfig0);
      Map<String, Object> map0 = openLineageConfig0.getMainGraphConfig();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.setLineageServerURL("}`SqS($B6");
      String string0 = openLineageConfig0.getLineageServerURL();
      assertEquals("}`SqS($B6", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.lineageServerURL("");
      String string0 = openLineageConfig0.getLineageServerURL();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.inTopicName("5QDgsTUbq2|");
      String string0 = openLineageConfig0.getInTopicName();
      assertEquals("5QDgsTUbq2|", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      OpenLineageConfig openLineageConfig1 = openLineageConfig0.inTopicName("");
      String string0 = openLineageConfig1.getInTopicName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Connection connection0 = new Connection();
      openLineageConfig0.inTopicConnection(connection0);
      Connection connection1 = openLineageConfig0.getInTopicConnection();
      assertNull(connection1.getEncryptedPassword());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      openLineageConfig0.bufferGraphConfig(hashMap0);
      Map<String, Object> map0 = openLineageConfig0.getBufferGraphConfig();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      openLineageConfig0.bufferGraphConfig(hashMap0);
      openLineageConfig0.putBufferGraphConfigItem("C!lJo=3]Rr", hashMap0);
      // Undeclared exception!
      try { 
        openLineageConfig0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Class<Integer> class0 = Integer.class;
      LogLevel logLevel0 = LogLevel.TRACE;
      LoggingHandler loggingHandler0 = new LoggingHandler(class0, logLevel0);
      openLineageConfig0.putBufferGraphConfigItem("", loggingHandler0);
      String string0 = openLineageConfig0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      OpenLineageConfig openLineageConfig1 = new OpenLineageConfig();
      assertTrue(openLineageConfig1.equals((Object)openLineageConfig0));
      
      openLineageConfig1.lineageServerURL("");
      boolean boolean0 = openLineageConfig1.equals(openLineageConfig0);
      assertFalse(openLineageConfig1.equals((Object)openLineageConfig0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Integer integer0 = new Integer((-1281));
      boolean boolean0 = openLineageConfig0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      boolean boolean0 = openLineageConfig0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      boolean boolean0 = openLineageConfig0.equals(openLineageConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      OpenLineageConfig openLineageConfig1 = new OpenLineageConfig();
      assertTrue(openLineageConfig1.equals((Object)openLineageConfig0));
      
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      OpenLineageConfig openLineageConfig2 = openLineageConfig1.putBufferGraphConfigItem("AD2(\"9[&kIq^Eeg\"g'4", integer0);
      boolean boolean0 = openLineageConfig2.equals(openLineageConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Class<Integer> class0 = Integer.class;
      LogLevel logLevel0 = LogLevel.TRACE;
      LoggingHandler loggingHandler0 = new LoggingHandler(class0, logLevel0);
      OpenLineageConfig openLineageConfig1 = openLineageConfig0.putBufferGraphConfigItem("", loggingHandler0);
      Map<String, Object> map0 = openLineageConfig1.getBufferGraphConfig();
      OpenLineageConfig openLineageConfig2 = openLineageConfig1.mainGraphConfig(map0);
      openLineageConfig2.putMainGraphConfigItem((String) null, openLineageConfig0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Connection connection0 = openLineageConfig0.getOpenLineageBufferGraphConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      String string0 = openLineageConfig0.getOpenLineageProvider();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Map<String, Object> map0 = openLineageConfig0.getMainGraphConfig();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.setOpenLineageDescription("y?cFnMj!6<~");
      assertNull(openLineageConfig0.getOpenLineageProvider());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.setInTopicName("class OpenLineageConfig {\n    openLineageId: null\n    openLineageName: null\n    openLineageDescription: java.lang.String@0000000006\n    lineageServerURL: null\n    inTopicName: null\n    inTopicConnection: null\n    openLineageProvider: null\n    openLineageBufferGraphConnection: null\n    openLineageMainGraphConnection: null\n    bufferGraphConfig: java.util.HashMap@0000000004\n    mainGraphConfig: java.util.HashMap@0000000004\n}");
      assertNull(openLineageConfig0.getOpenLineageId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      String string0 = openLineageConfig0.getLineageServerURL();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.openLineageProvider("");
      String string0 = openLineageConfig0.getOpenLineageProvider();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.setBufferGraphConfig((Map<String, Object>) null);
      assertNull(openLineageConfig0.getOpenLineageProvider());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Connection connection0 = openLineageConfig0.getOpenLineageMainGraphConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.setOpenLineageProvider((String) null);
      assertNull(openLineageConfig0.getOpenLineageDescription());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      String string0 = openLineageConfig0.getOpenLineageDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Connection connection0 = new Connection();
      openLineageConfig0.setOpenLineageBufferGraphConnection(connection0);
      assertNull(openLineageConfig0.getLineageServerURL());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.setMainGraphConfig((Map<String, Object>) null);
      assertNull(openLineageConfig0.getLineageServerURL());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Integer integer0 = openLineageConfig0.getOpenLineageId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      openLineageConfig0.setOpenLineageId(integer0);
      assertNull(openLineageConfig0.getOpenLineageDescription());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Connection connection0 = openLineageConfig0.getInTopicConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.setOpenLineageMainGraphConnection((Connection) null);
      assertNull(openLineageConfig0.getOpenLineageDescription());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Map<String, Object> map0 = openLineageConfig0.getBufferGraphConfig();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      openLineageConfig0.setInTopicConnection((Connection) null);
      assertNull(openLineageConfig0.getOpenLineageId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      String string0 = openLineageConfig0.getInTopicName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      Connection connection0 = new Connection();
      OpenLineageConfig openLineageConfig1 = openLineageConfig0.openLineageBufferGraphConnection(connection0);
      Connection connection1 = openLineageConfig1.getOpenLineageBufferGraphConnection();
      assertNull(connection1.getUrl());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OpenLineageConfig openLineageConfig0 = new OpenLineageConfig();
      String string0 = openLineageConfig0.getOpenLineageName();
      assertNull(string0);
  }
}
