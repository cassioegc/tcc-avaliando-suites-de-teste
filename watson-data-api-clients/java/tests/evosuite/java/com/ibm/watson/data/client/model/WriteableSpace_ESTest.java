/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 19:34:22 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.WriteableSpace;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WriteableSpace_ESTest extends WriteableSpace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      Vector<java.util.Locale.LanguageRange> vector0 = new Vector<java.util.Locale.LanguageRange>();
      java.util.Locale locale0 = java.util.Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      java.util.Locale.FilteringMode locale_FilteringMode0 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) vector0, (Collection<String>) set0, locale_FilteringMode0);
      writeableSpace0.tags(list0);
      List<String> list1 = writeableSpace0.getTags();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      writeableSpace0.addTagsItem("6I,y");
      List<String> list0 = writeableSpace0.getTags();
      assertTrue(list0.contains("6I,y"));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      WriteableSpace writeableSpace1 = writeableSpace0.name("");
      String string0 = writeableSpace1.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      WriteableSpace writeableSpace1 = writeableSpace0.description("    description: ");
      String string0 = writeableSpace1.getDescription();
      assertEquals("    description: ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      writeableSpace0.description("");
      String string0 = writeableSpace0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      XmlSuite xmlSuite0 = mock(XmlSuite.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(xmlSuite0).getTests();
      XmlTest xmlTest0 = null;
      try {
        xmlTest0 = new XmlTest(xmlSuite0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.testng.xml.XmlTest", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      writeableSpace0.description("YfG;@v;nM~ZDs6'yF,");
      String string0 = writeableSpace0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      writeableSpace0.description("YfG;@v;nM~ZDs6'yF,");
      writeableSpace0.name("YfG;@v;nM~ZDs6'yF,");
      WriteableSpace writeableSpace1 = new WriteableSpace();
      writeableSpace1.setDescription("YfG;@v;nM~ZDs6'yF,");
      boolean boolean0 = writeableSpace1.equals(writeableSpace0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      WriteableSpace writeableSpace1 = writeableSpace0.description("YfG;@v;nM~ZDs6'yF,");
      WriteableSpace writeableSpace2 = new WriteableSpace();
      assertFalse(writeableSpace2.equals((Object)writeableSpace1));
      
      writeableSpace2.setDescription("YfG;@v;nM~ZDs6'yF,");
      boolean boolean0 = writeableSpace2.equals(writeableSpace1);
      assertTrue(writeableSpace2.equals((Object)writeableSpace1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      Vector<java.util.Locale.LanguageRange> vector0 = new Vector<java.util.Locale.LanguageRange>();
      java.util.Locale locale0 = java.util.Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      java.util.Locale.FilteringMode locale_FilteringMode0 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) vector0, (Collection<String>) set0, locale_FilteringMode0);
      writeableSpace0.tags(list0);
      WriteableSpace writeableSpace1 = new WriteableSpace();
      boolean boolean0 = writeableSpace0.equals(writeableSpace1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      boolean boolean0 = writeableSpace0.equals("    description: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      boolean boolean0 = writeableSpace0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      boolean boolean0 = writeableSpace0.equals(writeableSpace0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      writeableSpace0.setName("NI{J+/@m(kC.+*Y1");
      assertEquals("NI{J+/@m(kC.+*Y1", writeableSpace0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      String string0 = writeableSpace0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      WriteableSpace writeableSpace1 = writeableSpace0.description("YfG;@v;nM~ZDs6'yF,");
      WriteableSpace writeableSpace2 = new WriteableSpace();
      boolean boolean0 = writeableSpace2.equals(writeableSpace1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      List<String> list0 = writeableSpace0.getTags();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      WriteableSpace writeableSpace1 = writeableSpace0.name("YfG;@v;nM~ZDs6'yF,");
      String string0 = writeableSpace1.getName();
      assertEquals("YfG;@v;nM~ZDs6'yF,", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      writeableSpace0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      String string0 = writeableSpace0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WriteableSpace writeableSpace0 = new WriteableSpace();
      writeableSpace0.setTags((List<String>) null);
      assertNull(writeableSpace0.getName());
  }
}
