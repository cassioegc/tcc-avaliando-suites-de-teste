/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:15:16 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.ClassificationRelationshipsRequest;
import com.ibm.watson.data.client.model.NewRelationship;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassificationRelationshipsRequest_ESTest extends ClassificationRelationshipsRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = classificationRelationshipsRequest0.terms(stack0);
      List<NewRelationship> list0 = classificationRelationshipsRequest1.getTerms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = classificationRelationshipsRequest0.addTermsItem((NewRelationship) null);
      List<NewRelationship> list0 = classificationRelationshipsRequest1.getTerms();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = classificationRelationshipsRequest0.addHasTypesClassificationsItem((NewRelationship) null);
      List<NewRelationship> list0 = classificationRelationshipsRequest0.getHasTypesClassifications();
      classificationRelationshipsRequest1.dataClasses(list0);
      List<NewRelationship> list1 = classificationRelationshipsRequest0.getDataClasses();
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = new ClassificationRelationshipsRequest();
      assertTrue(classificationRelationshipsRequest1.equals((Object)classificationRelationshipsRequest0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      classificationRelationshipsRequest1.addDataClassesItem(newRelationship0);
      boolean boolean0 = classificationRelationshipsRequest0.equals(classificationRelationshipsRequest1);
      assertFalse(classificationRelationshipsRequest1.equals((Object)classificationRelationshipsRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Stack<NewRelationship> stack0 = new Stack<NewRelationship>();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = classificationRelationshipsRequest0.terms(stack0);
      ClassificationRelationshipsRequest classificationRelationshipsRequest2 = new ClassificationRelationshipsRequest();
      boolean boolean0 = classificationRelationshipsRequest1.equals(classificationRelationshipsRequest2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = new ClassificationRelationshipsRequest();
      assertTrue(classificationRelationshipsRequest1.equals((Object)classificationRelationshipsRequest0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      ClassificationRelationshipsRequest classificationRelationshipsRequest2 = classificationRelationshipsRequest1.addHasTypesClassificationsItem(newRelationship0);
      ClassificationRelationshipsRequest classificationRelationshipsRequest3 = classificationRelationshipsRequest2.addTermsItem(newRelationship0);
      boolean boolean0 = classificationRelationshipsRequest3.equals(classificationRelationshipsRequest0);
      assertFalse(classificationRelationshipsRequest1.equals((Object)classificationRelationshipsRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NewRelationship newRelationship0 = new NewRelationship();
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = new ClassificationRelationshipsRequest();
      assertTrue(classificationRelationshipsRequest1.equals((Object)classificationRelationshipsRequest0));
      
      classificationRelationshipsRequest1.setIsATypeOfClassification(newRelationship0);
      boolean boolean0 = classificationRelationshipsRequest0.equals(classificationRelationshipsRequest1);
      assertFalse(classificationRelationshipsRequest1.equals((Object)classificationRelationshipsRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = new ClassificationRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      ClassificationRelationshipsRequest classificationRelationshipsRequest2 = classificationRelationshipsRequest1.parentCategory(newRelationship0);
      ClassificationRelationshipsRequest classificationRelationshipsRequest3 = classificationRelationshipsRequest0.parentCategory(newRelationship0);
      classificationRelationshipsRequest3.categories(vector0);
      boolean boolean0 = classificationRelationshipsRequest2.equals(classificationRelationshipsRequest3);
      assertFalse(classificationRelationshipsRequest2.equals((Object)classificationRelationshipsRequest0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = new ClassificationRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      ClassificationRelationshipsRequest classificationRelationshipsRequest2 = classificationRelationshipsRequest1.parentCategory(newRelationship0);
      assertFalse(classificationRelationshipsRequest2.equals((Object)classificationRelationshipsRequest0));
      
      ClassificationRelationshipsRequest classificationRelationshipsRequest3 = classificationRelationshipsRequest0.parentCategory(newRelationship0);
      boolean boolean0 = classificationRelationshipsRequest2.equals(classificationRelationshipsRequest3);
      assertTrue(classificationRelationshipsRequest2.equals((Object)classificationRelationshipsRequest0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      boolean boolean0 = classificationRelationshipsRequest0.equals(newRelationship0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      boolean boolean0 = classificationRelationshipsRequest0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      boolean boolean0 = classificationRelationshipsRequest0.equals(classificationRelationshipsRequest0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = new ClassificationRelationshipsRequest();
      assertTrue(classificationRelationshipsRequest1.equals((Object)classificationRelationshipsRequest0));
      
      NewRelationship newRelationship0 = new NewRelationship();
      ClassificationRelationshipsRequest classificationRelationshipsRequest2 = classificationRelationshipsRequest1.parentCategory(newRelationship0);
      boolean boolean0 = classificationRelationshipsRequest2.equals(classificationRelationshipsRequest0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      NewRelationship newRelationship0 = new NewRelationship();
      classificationRelationshipsRequest0.setDataClasses(vector0);
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = classificationRelationshipsRequest0.addDataClassesItem(newRelationship0);
      assertSame(classificationRelationshipsRequest1, classificationRelationshipsRequest0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      NewRelationship newRelationship0 = new NewRelationship();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = classificationRelationshipsRequest0.terms(vector0);
      classificationRelationshipsRequest1.addTermsItem(newRelationship0);
      assertTrue(vector0.contains(newRelationship0));
      assertEquals("[class NewRelationship {\n    id: null\n    description: null\n}]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      NewRelationship newRelationship0 = new NewRelationship();
      classificationRelationshipsRequest0.hasTypesClassifications(vector0);
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = classificationRelationshipsRequest0.addHasTypesClassificationsItem(newRelationship0);
      assertSame(classificationRelationshipsRequest1, classificationRelationshipsRequest0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      classificationRelationshipsRequest0.addCategoriesItem(newRelationship0);
      List<NewRelationship> list0 = classificationRelationshipsRequest0.getCategories();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      NewRelationship newRelationship0 = new NewRelationship();
      classificationRelationshipsRequest0.setCategories(vector0);
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = classificationRelationshipsRequest0.addCategoriesItem(newRelationship0);
      assertSame(classificationRelationshipsRequest1, classificationRelationshipsRequest0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      String string0 = classificationRelationshipsRequest0.toString();
      assertEquals("class ClassificationRelationshipsRequest {\n    parentCategory: null\n    categories: null\n    isATypeOfClassification: null\n    hasTypesClassifications: null\n    terms: null\n    dataClasses: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      List<NewRelationship> list0 = classificationRelationshipsRequest0.getTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      classificationRelationshipsRequest0.setDataClasses(vector0);
      String string0 = classificationRelationshipsRequest0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = classificationRelationshipsRequest0.dataClasses(vector0);
      List<NewRelationship> list0 = classificationRelationshipsRequest1.getDataClasses();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      NewRelationship newRelationship0 = classificationRelationshipsRequest0.getParentCategory();
      assertNull(newRelationship0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      classificationRelationshipsRequest0.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      List<NewRelationship> list0 = classificationRelationshipsRequest0.getCategories();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      classificationRelationshipsRequest0.parentCategory(newRelationship0);
      NewRelationship newRelationship1 = classificationRelationshipsRequest0.getParentCategory();
      assertSame(newRelationship1, newRelationship0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      classificationRelationshipsRequest0.setTerms((List<NewRelationship>) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      classificationRelationshipsRequest0.setCategories(vector0);
      List<NewRelationship> list0 = classificationRelationshipsRequest0.getCategories();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      List<NewRelationship> list0 = classificationRelationshipsRequest0.getDataClasses();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = classificationRelationshipsRequest0.hasTypesClassifications(vector0);
      List<NewRelationship> list0 = classificationRelationshipsRequest1.getHasTypesClassifications();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      ClassificationRelationshipsRequest classificationRelationshipsRequest1 = classificationRelationshipsRequest0.isATypeOfClassification(newRelationship0);
      NewRelationship newRelationship1 = classificationRelationshipsRequest1.getIsATypeOfClassification();
      assertSame(newRelationship0, newRelationship1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      List<NewRelationship> list0 = classificationRelationshipsRequest0.getHasTypesClassifications();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      NewRelationship newRelationship0 = classificationRelationshipsRequest0.getIsATypeOfClassification();
      assertNull(newRelationship0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      Vector<NewRelationship> vector0 = new Vector<NewRelationship>();
      classificationRelationshipsRequest0.setHasTypesClassifications(vector0);
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassificationRelationshipsRequest classificationRelationshipsRequest0 = new ClassificationRelationshipsRequest();
      NewRelationship newRelationship0 = new NewRelationship();
      classificationRelationshipsRequest0.setParentCategory(newRelationship0);
      assertNull(newRelationship0.getDescription());
  }
}
