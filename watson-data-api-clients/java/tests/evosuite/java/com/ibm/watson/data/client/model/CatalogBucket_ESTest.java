/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:15:18 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.BluemixCOSCredentials;
import com.ibm.watson.data.client.model.BluemixCredentialsForCOS;
import com.ibm.watson.data.client.model.CatalogBucket;
import com.ibm.watson.data.client.model.Credentials;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CatalogBucket_ESTest extends CatalogBucket_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.setResourceInstanceId("    resourceInstanceId: ");
      String string0 = catalogBucket0.getResourceInstanceId();
      assertEquals("    resourceInstanceId: ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.setResourceInstanceId("");
      String string0 = catalogBucket0.getResourceInstanceId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.endpointUrl("y");
      String string0 = catalogBucket0.getEndpointUrl();
      assertEquals("y", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      CatalogBucket catalogBucket1 = catalogBucket0.endpointUrl("");
      String string0 = catalogBucket1.getEndpointUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      BluemixCOSCredentials bluemixCOSCredentials0 = new BluemixCOSCredentials();
      CatalogBucket catalogBucket1 = catalogBucket0.credentialsRw(bluemixCOSCredentials0);
      Credentials credentials0 = catalogBucket1.getCredentialsRw();
      assertSame(bluemixCOSCredentials0, credentials0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.setBucketName(".");
      String string0 = catalogBucket0.getBucketName();
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.bucketName("");
      String string0 = catalogBucket0.getBucketName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.bucketLocation("-3Z<QZ@");
      String string0 = catalogBucket0.getBucketLocation();
      assertEquals("-3Z<QZ@", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.bucketName("Z*e_a@hl1w87");
      String string0 = catalogBucket0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      CatalogBucket catalogBucket1 = new CatalogBucket();
      assertTrue(catalogBucket1.equals((Object)catalogBucket0));
      
      BluemixCredentialsForCOS bluemixCredentialsForCOS0 = new BluemixCredentialsForCOS();
      catalogBucket0.bluemixCosCredentials(bluemixCredentialsForCOS0);
      boolean boolean0 = catalogBucket0.equals(catalogBucket1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      CatalogBucket catalogBucket1 = new CatalogBucket();
      boolean boolean0 = catalogBucket0.equals(catalogBucket1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.setResourceInstanceId("~");
      CatalogBucket catalogBucket1 = new CatalogBucket();
      boolean boolean0 = catalogBucket0.equals(catalogBucket1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      CatalogBucket catalogBucket1 = new CatalogBucket();
      assertTrue(catalogBucket1.equals((Object)catalogBucket0));
      
      catalogBucket0.setBucketLocation("");
      boolean boolean0 = catalogBucket0.equals(catalogBucket1);
      assertFalse(catalogBucket1.equals((Object)catalogBucket0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      Object object0 = new Object();
      boolean boolean0 = catalogBucket0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      boolean boolean0 = catalogBucket0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      boolean boolean0 = catalogBucket0.equals(catalogBucket0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      CatalogBucket catalogBucket1 = new CatalogBucket();
      assertTrue(catalogBucket1.equals((Object)catalogBucket0));
      
      Credentials credentials0 = new Credentials();
      catalogBucket1.credentialsRw(credentials0);
      boolean boolean0 = catalogBucket0.equals(catalogBucket1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      BluemixCredentialsForCOS bluemixCredentialsForCOS0 = new BluemixCredentialsForCOS();
      CatalogBucket catalogBucket1 = catalogBucket0.bluemixCosCredentials(bluemixCredentialsForCOS0);
      BluemixCredentialsForCOS bluemixCredentialsForCOS1 = catalogBucket1.getBluemixCosCredentials();
      assertSame(bluemixCredentialsForCOS0, bluemixCredentialsForCOS1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      BluemixCredentialsForCOS bluemixCredentialsForCOS0 = catalogBucket0.getBluemixCosCredentials();
      assertNull(bluemixCredentialsForCOS0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      String string0 = catalogBucket0.getResourceInstanceId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      String string0 = catalogBucket0.getEndpointUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.bucketName("");
      CatalogBucket catalogBucket1 = new CatalogBucket();
      boolean boolean0 = catalogBucket0.equals(catalogBucket1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      CatalogBucket catalogBucket1 = catalogBucket0.resourceInstanceId("");
      assertNull(catalogBucket1.getBucketLocation());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.setEndpointUrl((String) null);
      assertNull(catalogBucket0.getBucketName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      CatalogBucket catalogBucket1 = catalogBucket0.bucketLocation("");
      String string0 = catalogBucket1.getBucketLocation();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      BluemixCredentialsForCOS bluemixCredentialsForCOS0 = new BluemixCredentialsForCOS();
      catalogBucket0.setBluemixCosCredentials(bluemixCredentialsForCOS0);
      assertNull(catalogBucket0.getBucketName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      String string0 = catalogBucket0.getBucketName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      CatalogBucket catalogBucket1 = catalogBucket0.endpointUrl("");
      CatalogBucket catalogBucket2 = new CatalogBucket();
      boolean boolean0 = catalogBucket1.equals(catalogBucket2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      String string0 = catalogBucket0.getBucketLocation();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.setCredentialsRw((Credentials) null);
      assertNull(catalogBucket0.getEndpointUrl());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      Credentials credentials0 = catalogBucket0.getCredentialsRw();
      assertNull(credentials0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CatalogBucket catalogBucket0 = new CatalogBucket();
      catalogBucket0.hashCode();
  }
}
