/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Apr 14 23:09:44 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class DeploymentEntityRequestVirtual_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.ibm.watson.data.client.model.DeploymentEntityRequestVirtual"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/cassioegc/tcc/watson-data-api-clients/java"); 
    java.lang.System.setProperty("user.home", "/home/cassioegc"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "cassioegc"); 
    java.lang.System.setProperty("user.timezone", "America/Recife"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DeploymentEntityRequestVirtual_ESTest_scaffolding.class.getClassLoader() ,
      "reactor.core.publisher.FluxTakeFuseable",
      "reactor.core.publisher.FluxPublishMulticast$PublishMulticasterParent",
      "com.fasterxml.jackson.annotation.JsonProperty",
      "reactor.core.publisher.FluxOnAssembly",
      "reactor.core.publisher.FluxUsingWhen$UsingWhenParent",
      "reactor.core.publisher.MonoHide",
      "reactor.util.context.ContextView",
      "reactor.core.publisher.FluxMaterialize",
      "reactor.core.publisher.MonoCollectList",
      "reactor.core.publisher.FluxRange",
      "reactor.core.publisher.Sinks$One",
      "reactor.core.publisher.FluxSkipLast",
      "org.springframework.http.CacheControl",
      "reactor.core.publisher.MonoRepeat",
      "reactor.core.publisher.MonoSourceFuseable",
      "reactor.core.publisher.FluxErrorSupplied",
      "reactor.core.publisher.MonoCount",
      "reactor.core.publisher.FluxRepeat",
      "reactor.core.publisher.FluxArray",
      "reactor.core.publisher.FluxSampleFirst",
      "reactor.core.publisher.MonoDelayUntil",
      "reactor.core.publisher.AssemblyOp",
      "reactor.core.publisher.InnerProducer",
      "reactor.core.Disposable$Composite",
      "reactor.core.publisher.BufferOverflowStrategy",
      "com.ibm.watson.data.client.model.DeploymentEntityRequestPhysical",
      "reactor.core.publisher.MonoTimeout",
      "reactor.core.publisher.FluxInterval",
      "reactor.core.publisher.MonoCurrentContext",
      "reactor.core.publisher.MonoCacheTime$CacheMonoSubscriber",
      "reactor.core.publisher.Sinks$EmissionException",
      "reactor.util.context.Context",
      "reactor.core.publisher.FluxFilterFuseable",
      "reactor.core.publisher.MonoFilter",
      "org.springframework.http.ResponseCookie$ResponseCookieBuilder",
      "reactor.core.publisher.MonoDoOnEach",
      "reactor.core.publisher.FluxCallable",
      "reactor.core.publisher.ParallelFlux",
      "reactor.core.publisher.MonoContextWrite",
      "reactor.core.publisher.MonoPublishOn",
      "reactor.core.publisher.MonoRepeatWhen",
      "reactor.core.publisher.FluxSink$OverflowStrategy",
      "reactor.core.publisher.MonoDetach",
      "reactor.core.Fuseable",
      "reactor.core.publisher.FluxBufferWhen",
      "reactor.core.publisher.MonoZip",
      "reactor.core.publisher.FluxBufferTimeout",
      "reactor.core.publisher.FluxWindowBoundary",
      "reactor.core.CorePublisher",
      "reactor.core.publisher.FluxFirstWithSignal",
      "reactor.core.publisher.FluxPeekFuseable",
      "reactor.core.publisher.FluxDetach",
      "reactor.core.publisher.FluxPublish",
      "reactor.core.Scannable$Attr",
      "reactor.core.publisher.FluxFilter",
      "reactor.core.publisher.MonoIgnorePublisher",
      "reactor.core.publisher.SignalPeek",
      "reactor.core.Disposable",
      "reactor.core.Scannable",
      "reactor.core.publisher.MonoDoFirst",
      "reactor.core.publisher.FluxOnBackpressureDrop",
      "org.springframework.util.LinkedCaseInsensitiveMap",
      "org.springframework.http.HttpStatus$Series",
      "reactor.core.publisher.MonoReduce",
      "reactor.core.publisher.FluxRefCount",
      "reactor.core.publisher.MonoOnAssembly",
      "reactor.core.publisher.FluxSource",
      "reactor.core.publisher.FluxOnAssembly$AssemblyLightSnapshot",
      "reactor.core.publisher.FluxSubscribeOnCallable",
      "reactor.core.publisher.MonoSequenceEqual",
      "org.springframework.http.ReactiveHttpOutputMessage",
      "reactor.core.publisher.FluxFromMonoOperator",
      "reactor.core.publisher.FluxMapSignal",
      "reactor.core.publisher.MonoNext",
      "reactor.core.publisher.FluxZipIterable",
      "reactor.core.publisher.MonoJust",
      "reactor.core.publisher.FluxConcatMapNoPrefetch",
      "reactor.core.publisher.FluxSwitchMapNoPrefetch",
      "reactor.core.publisher.FluxFlattenIterable",
      "org.springframework.util.InvalidMimeTypeException",
      "reactor.core.publisher.MonoHasElements",
      "reactor.core.publisher.FluxFirstWithValue",
      "reactor.core.publisher.FluxPublishMulticast",
      "org.springframework.http.HttpMethod",
      "reactor.core.publisher.FluxIndex",
      "reactor.core.publisher.MonoExpand",
      "reactor.core.Disposable$Swap",
      "reactor.core.publisher.FluxTakeWhile",
      "org.springframework.util.MultiValueMapAdapter",
      "reactor.core.publisher.FluxTimed",
      "reactor.core.publisher.FluxDoFirst",
      "org.springframework.http.HttpStatus",
      "reactor.core.publisher.Flux",
      "reactor.core.publisher.MonoSource",
      "reactor.core.publisher.FluxExpand",
      "org.springframework.core.io.buffer.DataBufferFactory",
      "reactor.core.publisher.FluxDematerialize",
      "reactor.util.Loggers$Slf4JLoggerFactory",
      "reactor.core.publisher.MonoIgnoreElements",
      "reactor.core.publisher.FluxTakeUntilOther",
      "reactor.core.publisher.ContextHolder",
      "reactor.core.publisher.FluxOnBackpressureBufferStrategy",
      "reactor.core.publisher.FluxLogFuseable",
      "reactor.core.publisher.MonoLogFuseable",
      "reactor.core.publisher.FluxTimeout",
      "reactor.util.retry.Retry",
      "reactor.core.publisher.MonoDelay",
      "reactor.core.publisher.FluxBufferPredicate",
      "reactor.core.publisher.MonoUsing",
      "reactor.core.publisher.FluxGroupBy",
      "reactor.core.publisher.MonoIgnoreElement",
      "reactor.core.publisher.FluxMap",
      "reactor.util.retry.RetryBackoffSpec",
      "reactor.core.publisher.FluxPeek",
      "reactor.core.publisher.FluxError",
      "reactor.util.context.CoreContext",
      "reactor.core.publisher.MonoStreamCollector",
      "reactor.core.Disposables$AlwaysDisposable",
      "com.fasterxml.jackson.annotation.JacksonAnnotation",
      "reactor.core.publisher.MonoOnErrorResume",
      "org.springframework.util.MimeType",
      "org.springframework.http.HttpCookie",
      "reactor.core.publisher.FluxHide",
      "reactor.core.publisher.FluxLog",
      "reactor.core.publisher.Sinks$EmitResult",
      "reactor.core.publisher.MonoSubscribeOnCallable",
      "reactor.core.publisher.MonoFromFluxOperator",
      "reactor.util.Logger",
      "reactor.core.publisher.FluxDoFinallyFuseable",
      "reactor.core.publisher.MonoRepeatPredicate",
      "org.springframework.http.server.reactive.ServerHttpResponseDecorator",
      "reactor.core.publisher.FluxConcatArray",
      "reactor.core.Disposables",
      "org.springframework.http.HttpMessage",
      "reactor.core.publisher.MonoElementAt",
      "reactor.core.publisher.FluxWithLatestFrom",
      "reactor.core.publisher.FluxDeferContextual",
      "reactor.core.publisher.MonoSwitchIfEmpty",
      "reactor.core.publisher.FluxSample",
      "reactor.core.publisher.FluxWindow",
      "reactor.core.publisher.MonoTakeLastOne",
      "org.springframework.http.HttpHeaders",
      "reactor.core.publisher.MonoErrorSupplied",
      "org.springframework.http.MediaType",
      "reactor.core.publisher.FluxIndexFuseable",
      "reactor.core.publisher.FluxFilterWhen",
      "reactor.core.publisher.FluxSkip",
      "reactor.core.publisher.FluxOperator",
      "reactor.core.publisher.FluxSwitchOnFirst",
      "reactor.core.publisher.MonoAll",
      "reactor.core.publisher.FluxPublishOn",
      "reactor.core.publisher.FluxLimitRequest",
      "reactor.core.publisher.FluxOnBackpressureLatest",
      "reactor.core.publisher.MonoIgnoreThen",
      "reactor.core.publisher.MonoHasElement",
      "reactor.core.publisher.MonoCreate",
      "reactor.core.publisher.FluxWindowWhen",
      "reactor.core.publisher.FluxSkipUntil",
      "reactor.core.publisher.FluxCombineLatest",
      "reactor.core.publisher.FluxMerge",
      "reactor.util.context.Context0",
      "org.springframework.http.ReadOnlyHttpHeaders",
      "reactor.core.scheduler.Scheduler$Worker",
      "reactor.core.publisher.MonoFlattenIterable",
      "reactor.core.publisher.FluxSampleTimeout",
      "reactor.core.publisher.FluxSkipUntilOther",
      "reactor.core.publisher.MonoFirstWithSignal",
      "reactor.core.publisher.InternalMonoOperator",
      "reactor.core.publisher.MonoLog",
      "reactor.core.publisher.FluxRepeatWhen",
      "reactor.core.publisher.FluxMergeSequential",
      "org.reactivestreams.Subscriber",
      "reactor.core.publisher.FluxHandle",
      "reactor.core.publisher.MonoRetry",
      "reactor.core.publisher.FluxFlatMap",
      "reactor.core.publisher.FluxUsingWhen",
      "reactor.core.publisher.InnerOperator",
      "reactor.core.publisher.MonoProcessor",
      "reactor.core.publisher.NextProcessor",
      "reactor.core.publisher.FluxMergeOrdered",
      "org.springframework.core.io.buffer.DataBuffer",
      "reactor.core.publisher.MonoFlatMap",
      "org.springframework.http.InvalidMediaTypeException",
      "reactor.core.publisher.MonoDefer",
      "reactor.core.publisher.FluxZip",
      "reactor.core.Fuseable$ScalarCallable",
      "reactor.core.publisher.FluxSkipWhile",
      "org.reactivestreams.Subscription",
      "com.fasterxml.jackson.annotation.JsonCreator",
      "reactor.core.publisher.FluxCancelOn",
      "reactor.core.publisher.MonoMap",
      "org.springframework.util.Assert",
      "reactor.core.publisher.MonoUsingWhen",
      "org.springframework.http.server.reactive.ServerHttpResponse",
      "reactor.core.publisher.FluxDefer",
      "org.springframework.http.ContentDisposition$Builder",
      "org.reactivestreams.Processor",
      "reactor.util.Loggers$Slf4JLogger",
      "reactor.util.function.Tuples",
      "reactor.core.publisher.MonoFilterFuseable",
      "reactor.core.publisher.MonoCallable",
      "reactor.core.publisher.FluxContextWrite",
      "com.fasterxml.jackson.annotation.JsonInclude$Include",
      "com.ibm.watson.data.client.model.enums.DataConnectionType",
      "reactor.core.CoreSubscriber",
      "reactor.util.Loggers",
      "reactor.core.publisher.MonoFirstWithValue",
      "reactor.core.publisher.FluxWindowTimeout",
      "reactor.core.publisher.SourceProducer",
      "reactor.core.publisher.MonoPublishMulticast",
      "reactor.core.publisher.MonoSupplier",
      "reactor.core.publisher.FluxDistinctFuseable",
      "reactor.core.publisher.MonoMaterialize",
      "reactor.core.publisher.ImmutableSignal",
      "reactor.core.publisher.FluxWindowPredicate",
      "reactor.core.publisher.FluxDoFinally",
      "reactor.core.publisher.FluxBuffer",
      "reactor.core.publisher.FluxDoOnEachFuseable",
      "com.fasterxml.jackson.annotation.JsonCreator$Mode",
      "reactor.core.publisher.MonoReduceSeed",
      "reactor.core.publisher.FluxSwitchIfEmpty",
      "reactor.util.function.Tuples$1",
      "reactor.core.publisher.FluxIterable",
      "reactor.core.publisher.FluxOnBackpressureBufferTimeout",
      "reactor.core.publisher.Operators$DeferredSubscription",
      "reactor.core.publisher.MonoError",
      "reactor.core.publisher.InternalEmptySink",
      "org.springframework.util.CollectionUtils",
      "reactor.core.publisher.FluxJust",
      "reactor.core.publisher.InternalOneSink",
      "reactor.core.publisher.MonoRetryWhen",
      "reactor.core.publisher.FluxConcatIterable",
      "org.springframework.http.MediaType$1",
      "reactor.core.publisher.MonoDelayElement",
      "reactor.core.publisher.MonoSingle",
      "reactor.core.publisher.Sinks$EmitFailureHandler",
      "reactor.core.publisher.FluxErrorOnRequest",
      "reactor.core.publisher.FluxTakeLast",
      "reactor.core.publisher.MonoDoFirstFuseable",
      "reactor.core.publisher.FluxSourceFuseable",
      "reactor.core.publisher.MonoTimed",
      "reactor.core.publisher.FluxSourceMonoFuseable",
      "reactor.core.publisher.MonoMapFuseable",
      "reactor.core.publisher.ConnectableFlux",
      "reactor.core.publisher.FluxSubscribeOnValue",
      "org.springframework.util.MimeType$SpecificityComparator",
      "reactor.core.publisher.MonoPeekFuseable",
      "reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber",
      "com.fasterxml.jackson.annotation.JsonProperty$Access",
      "reactor.core.publisher.FluxDelaySubscription",
      "reactor.core.publisher.FluxSubscribeOn",
      "org.reactivestreams.Publisher",
      "reactor.core.publisher.MonoDoOnEachFuseable",
      "org.springframework.util.MultiValueMap",
      "reactor.core.publisher.Mono",
      "org.springframework.http.server.reactive.HttpHeadResponseDecorator",
      "reactor.core.publisher.MonoSingleMono",
      "reactor.core.publisher.FluxDistinct",
      "com.fasterxml.jackson.annotation.JacksonAnnotationValue",
      "reactor.core.publisher.MonoAny",
      "reactor.core.publisher.FluxTakeUntil",
      "org.springframework.util.LinkedCaseInsensitiveMap$1",
      "reactor.core.publisher.MonoPeekTerminal",
      "reactor.core.publisher.MonoElapsed",
      "reactor.core.publisher.OptimizableOperator",
      "reactor.core.publisher.FluxRepeatPredicate",
      "reactor.core.publisher.FluxJoin",
      "reactor.core.publisher.FluxOnAssembly$AssemblySnapshot",
      "reactor.core.publisher.FluxGroupJoin",
      "org.springframework.util.LinkedMultiValueMap",
      "reactor.core.Fuseable$QueueSubscription",
      "com.ibm.watson.data.client.model.DeploymentEntityRequestVirtual",
      "reactor.core.publisher.MonoFlatMapMany",
      "reactor.core.publisher.MonoDoFinallyFuseable",
      "reactor.core.publisher.NextProcessor$NextInner",
      "com.ibm.watson.data.client.model.ObjectLocation",
      "reactor.core.publisher.FluxSwitchMap",
      "reactor.core.publisher.FluxConcatMap",
      "reactor.core.publisher.FluxDistinctUntilChanged",
      "reactor.core.publisher.MonoCompletionStage",
      "com.fasterxml.jackson.annotation.JsonInclude$Value",
      "reactor.core.publisher.OperatorDisposables",
      "reactor.core.publisher.FluxRetry",
      "com.ibm.watson.data.client.model.enums.DeploymentExportFormat",
      "reactor.core.publisher.FluxRetryWhen",
      "reactor.core.publisher.MonoDematerialize",
      "reactor.core.publisher.FluxElapsed",
      "reactor.core.publisher.MonoTakeUntilOther",
      "reactor.core.publisher.Signal",
      "reactor.core.publisher.SignalType",
      "reactor.core.publisher.FluxScan",
      "reactor.core.publisher.FluxDefaultIfEmpty",
      "reactor.core.publisher.Sinks$Empty",
      "reactor.core.publisher.FluxDelaySubscription$DelaySubscriptionOtherSubscriber",
      "reactor.core.publisher.InnerConsumer",
      "reactor.core.publisher.MonoUsingWhen$MonoUsingWhenSubscriber",
      "reactor.core.publisher.MonoOperator",
      "reactor.core.publisher.MonoDeferContextual",
      "reactor.core.publisher.FluxGenerate",
      "reactor.core.publisher.FluxTakeLastOne",
      "reactor.core.publisher.FluxMetricsFuseable",
      "reactor.core.publisher.FluxHandleFuseable",
      "reactor.core.publisher.FluxDoOnEach",
      "reactor.core.publisher.FluxScanSeed",
      "reactor.core.publisher.MonoCacheTime",
      "reactor.core.publisher.MonoSubscribeOnValue",
      "reactor.util.function.Tuple3",
      "reactor.util.function.Tuple2",
      "reactor.util.function.Tuple5",
      "reactor.util.function.Tuple4",
      "reactor.core.scheduler.Scheduler",
      "reactor.util.function.Tuple7",
      "reactor.util.function.Tuple6",
      "reactor.util.function.Tuple8",
      "reactor.core.publisher.FluxTake",
      "reactor.core.publisher.MonoMetricsFuseable",
      "org.springframework.http.ContentDisposition",
      "reactor.core.publisher.FluxMapFuseable",
      "reactor.core.publisher.MonoSourceFluxFuseable",
      "reactor.core.publisher.Operators$MonoSubscriber",
      "reactor.core.publisher.MonoCancelOn",
      "reactor.core.publisher.FluxSourceMono",
      "reactor.core.publisher.FluxCreate",
      "reactor.util.retry.RetrySpec",
      "org.springframework.http.ResponseCookie",
      "reactor.core.publisher.MonoSubscribeOn",
      "reactor.core.publisher.FluxDelaySequence",
      "reactor.core.publisher.MonoRunnable",
      "reactor.core.publisher.MonoSourceFlux",
      "reactor.core.publisher.FluxOnBackpressureBuffer",
      "reactor.core.publisher.MonoFilterWhen",
      "reactor.core.publisher.FluxOnErrorResume",
      "reactor.core.publisher.MonoFromPublisher",
      "reactor.core.publisher.FluxStream",
      "reactor.core.publisher.FluxReplay",
      "reactor.core.publisher.FluxDoFirstFuseable",
      "reactor.core.publisher.MonoPeek",
      "reactor.util.retry.Retry$2",
      "reactor.core.publisher.MonoDefaultIfEmpty",
      "reactor.core.publisher.MonoDelaySubscription",
      "reactor.core.publisher.MonoDoFinally",
      "reactor.core.publisher.FluxUsing",
      "reactor.core.publisher.FluxMetrics",
      "reactor.core.publisher.MonoCollect",
      "reactor.core.publisher.MonoWhen",
      "reactor.core.publisher.InternalFluxOperator",
      "reactor.core.publisher.MonoHandle",
      "reactor.core.publisher.FluxBufferBoundary",
      "reactor.util.retry.Retry$1",
      "reactor.core.publisher.MonoMetrics",
      "com.fasterxml.jackson.annotation.JsonInclude",
      "reactor.core.publisher.MonoHandleFuseable",
      "org.springframework.util.StringUtils"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DeploymentEntityRequestVirtual_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.ibm.watson.data.client.model.DeploymentEntityRequestPhysical",
      "com.ibm.watson.data.client.model.DeploymentEntityRequestVirtual",
      "com.fasterxml.jackson.annotation.JsonProperty$Access",
      "com.fasterxml.jackson.annotation.JsonInclude$Include",
      "com.fasterxml.jackson.annotation.JsonCreator$Mode",
      "com.ibm.watson.data.client.model.ObjectLocation",
      "org.springframework.http.server.reactive.ServerHttpResponseDecorator",
      "org.springframework.util.Assert",
      "org.springframework.http.server.reactive.HttpHeadResponseDecorator"
    );
  }
}
