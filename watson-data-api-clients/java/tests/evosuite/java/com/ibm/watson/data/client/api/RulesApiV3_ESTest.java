/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 23:00:15 GMT 2021
 */

package com.ibm.watson.data.client.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.ibm.watson.data.client.ApiClient;
import com.ibm.watson.data.client.api.RulesApiV3;
import com.ibm.watson.data.client.model.GlossaryCreateResponse;
import com.ibm.watson.data.client.model.NewRuleEntity;
import com.ibm.watson.data.client.model.PaginatedAbstractRelationshipList;
import com.ibm.watson.data.client.model.ResponseRule;
import com.ibm.watson.data.client.model.RuleRelationshipsRequest;
import com.ibm.watson.data.client.model.UpdatableRuleEntity;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;
import reactor.core.publisher.Mono;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RulesApiV3_ESTest extends RulesApiV3_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RulesApiV3 rulesApiV3_0 = new RulesApiV3((ApiClient) null);
      assertNotNull(rulesApiV3_0);
      
      ApiClient apiClient0 = rulesApiV3_0.getApiClient();
      assertNull(apiClient0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RulesApiV3 rulesApiV3_0 = new RulesApiV3((ApiClient) null);
      assertNotNull(rulesApiV3_0);
      
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      assertNotNull(updatableRuleEntity0);
      assertNull(updatableRuleEntity0.getShortDescription());
      assertNull(updatableRuleEntity0.getLongDescription());
      assertNull(updatableRuleEntity0.getName());
      assertNull(updatableRuleEntity0.getState());
      assertNull(updatableRuleEntity0.getRevision());
      
      Boolean boolean0 = Boolean.valueOf("x*Fc@P^,t`)6+r'");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.update("com.ibm.watson.data.client.api.RulesApiV3", "com.ibm.watson.data.client.api.RulesApiV3", updatableRuleEntity0, boolean0, "x*Fc@P^,t`)6+r'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.RulesApiV3", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertNotNull(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      
      ApiClient apiClient1 = apiClient0.setBasePath((String) null);
      assertNotNull(apiClient1);
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertNull(apiClient0.getBasePath());
      assertNull(apiClient1.getBasePath());
      
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient1);
      assertNotNull(rulesApiV3_0);
      assertNull(apiClient0.getBasePath());
      assertNull(apiClient1.getBasePath());
      
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      assertNotNull(updatableRuleEntity0);
      assertNull(updatableRuleEntity0.getState());
      assertNull(updatableRuleEntity0.getName());
      assertNull(updatableRuleEntity0.getRevision());
      assertNull(updatableRuleEntity0.getLongDescription());
      assertNull(updatableRuleEntity0.getShortDescription());
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.update("\" 8*xQzyUiyXP=", "0 @eUA;AX", updatableRuleEntity0, boolean0, "/#O$-*0?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HTTP URL must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RulesApiV3 rulesApiV3_0 = new RulesApiV3((ApiClient) null);
      assertNotNull(rulesApiV3_0);
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-2019));
      assertNotNull(integer0);
      assertEquals((-2019), (int)integer0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.listRelationships("/v3/rules/{artifact_id}/versions/{version_id}/relationships/{relationship_id}", "version_id", "A|{^ =V%VSm7>", boolean0, integer0, "Ycu.bs<`3\"(}}?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.RulesApiV3", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 0);
      assertNotNull(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      
      ApiClient apiClient1 = apiClient0.setBasePath("Dl~oQ3RQs");
      assertNotNull(apiClient1);
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("Dl~oQ3RQs", apiClient0.getBasePath());
      assertEquals("Dl~oQ3RQs", apiClient1.getBasePath());
      
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient1);
      assertNotNull(rulesApiV3_0);
      assertEquals("Dl~oQ3RQs", apiClient0.getBasePath());
      assertEquals("Dl~oQ3RQs", apiClient1.getBasePath());
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.listRelationships("b?<+a:Pai{f}", "b?<+a:Pai{f}", "", boolean0, integer0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Dl~oQ3RQs] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RulesApiV3 rulesApiV3_0 = new RulesApiV3((ApiClient) null);
      assertNotNull(rulesApiV3_0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.get("", "a~pj8+>3", "", (Boolean) null, "", "umzcF=b`hq`nVQ0W<A=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.RulesApiV3", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertNotNull(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      
      ApiClient apiClient1 = apiClient0.setBasePath((String) null);
      assertNotNull(apiClient1);
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertNull(apiClient0.getBasePath());
      assertNull(apiClient1.getBasePath());
      
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient1);
      assertNotNull(rulesApiV3_0);
      assertNull(apiClient0.getBasePath());
      assertNull(apiClient1.getBasePath());
      
      Boolean boolean0 = Boolean.valueOf(true);
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.get((String) null, "\" 8*xQzyUiyXP=", "0 @eUA;AX", boolean0, "0 @eUA;AX", "0 @eUA;AX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HTTP URL must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RulesApiV3 rulesApiV3_0 = new RulesApiV3((ApiClient) null);
      assertNotNull(rulesApiV3_0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.deleteRelationship("7's9", "7's9", "7's9", boolean0, "7's9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.RulesApiV3", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 939);
      assertNotNull(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      
      ApiClient apiClient1 = apiClient0.setBasePath("/v3/rules/{artifact_id}/versions/{version_id}/relationships/{relationship_id}");
      assertNotNull(apiClient1);
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("/v3/rules/{artifact_id}/versions/{version_id}/relationships/{relationship_id}", apiClient0.getBasePath());
      assertEquals("/v3/rules/{artifact_id}/versions/{version_id}/relationships/{relationship_id}", apiClient1.getBasePath());
      
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient1);
      assertNotNull(rulesApiV3_0);
      assertEquals("/v3/rules/{artifact_id}/versions/{version_id}/relationships/{relationship_id}", apiClient0.getBasePath());
      assertEquals("/v3/rules/{artifact_id}/versions/{version_id}/relationships/{relationship_id}", apiClient1.getBasePath());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      
      Boolean boolean0 = propertyMetadata0.getRequired();
      assertNotNull(boolean0);
      assertFalse(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.deleteRelationship("/v3/rules/{artifact_id}/versions/{version_id}/relationships/{relationship_id}", "/v3/rules/{artifact_id}/versions/{version_id}/relationships/{relationship_id}", "", boolean0, "/v3/rules/{artifact_id}/versions/{version_id}/relationships/{relationship_id}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [/v3/rules/{artifact_id}/versions/{version_id}/relationships/{relationship_id}] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RulesApiV3 rulesApiV3_0 = new RulesApiV3((ApiClient) null);
      assertNotNull(rulesApiV3_0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.delete("<\"ZPzwu}a8-2hR8>", "iWdAgfe>'nD", boolean0, "<\"ZPzwu}a8-2hR8>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.RulesApiV3", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertNotNull(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      
      ApiClient apiClient1 = apiClient0.setBasePath("skip_workflow_if_possible");
      assertNotNull(apiClient1);
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("skip_workflow_if_possible", apiClient0.getBasePath());
      assertEquals("skip_workflow_if_possible", apiClient1.getBasePath());
      
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient1);
      assertNotNull(rulesApiV3_0);
      assertEquals("skip_workflow_if_possible", apiClient0.getBasePath());
      assertEquals("skip_workflow_if_possible", apiClient1.getBasePath());
      
      XmlSuite xmlSuite0 = new XmlSuite();
      assertNotNull(xmlSuite0);
      assertEquals("", xmlSuite0.getParentModule());
      assertFalse(xmlSuite0.getAllowReturnValues());
      assertEquals("", xmlSuite0.getGuiceStage());
      assertTrue(xmlSuite0.getPreserveOrder());
      assertEquals("Default Suite", xmlSuite0.getName());
      assertEquals(XmlSuite.ParallelMode.NONE, xmlSuite0.getParallel());
      assertFalse(xmlSuite0.getGroupByInstances());
      assertNull(xmlSuite0.getTimeOut());
      assertEquals(XmlSuite.FailurePolicy.SKIP, xmlSuite0.getConfigFailurePolicy());
      assertFalse(xmlSuite0.isJUnit());
      assertNull(xmlSuite0.getFileName());
      assertFalse(xmlSuite0.isParsed());
      assertNull(xmlSuite0.getTest());
      assertEquals(5, xmlSuite0.getThreadCount());
      assertFalse(xmlSuite0.skipFailedInvocationCounts());
      assertEquals(1, (int)xmlSuite0.getVerbose());
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.delete("", "", xmlSuite0.DEFAULT_ALLOW_RETURN_VALUES, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [skip_workflow_if_possible] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      assertNotNull(ruleRelationshipsRequest0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      RulesApiV3 rulesApiV3_0 = new RulesApiV3((ApiClient) null);
      assertNotNull(rulesApiV3_0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.createRelationships(":FFXKF#^", "'I?+", ruleRelationshipsRequest0, boolean0, "<|&K#^#`#n]?{qWmwx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.RulesApiV3", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      assertNotNull(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      
      ApiClient apiClient1 = apiClient0.setBasePath("must be invoked from an event loop");
      assertNotNull(apiClient1);
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("must be invoked from an event loop", apiClient0.getBasePath());
      assertEquals("must be invoked from an event loop", apiClient1.getBasePath());
      
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient1);
      assertNotNull(rulesApiV3_0);
      assertEquals("must be invoked from an event loop", apiClient0.getBasePath());
      assertEquals("must be invoked from an event loop", apiClient1.getBasePath());
      
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      assertNotNull(ruleRelationshipsRequest0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.createRelationships("HTTP_VERSION_NOT_SUPPORTED", "must be invoked from an event loop", ruleRelationshipsRequest0, boolean0, "/*'zesG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [must be invoked from an event loop] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RulesApiV3 rulesApiV3_0 = new RulesApiV3((ApiClient) null);
      assertNotNull(rulesApiV3_0);
      
      NewRuleEntity newRuleEntity0 = new NewRuleEntity();
      assertNotNull(newRuleEntity0);
      assertNull(newRuleEntity0.getShortDescription());
      assertNull(newRuleEntity0.getState());
      assertNull(newRuleEntity0.getName());
      assertNull(newRuleEntity0.getLongDescription());
      assertNull(newRuleEntity0.getRuleType());
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.create(newRuleEntity0, "", (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.api.RulesApiV3", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 0);
      assertNotNull(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      
      ApiClient apiClient1 = apiClient0.setBasePath("com.ibm.watson.data.client.api.RulesApiV3$7");
      assertNotNull(apiClient1);
      assertSame(apiClient0, apiClient1);
      assertSame(apiClient1, apiClient0);
      assertEquals("com.ibm.watson.data.client.api.RulesApiV3$7", apiClient0.getBasePath());
      assertEquals("com.ibm.watson.data.client.api.RulesApiV3$7", apiClient1.getBasePath());
      
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient1);
      assertNotNull(rulesApiV3_0);
      assertEquals("com.ibm.watson.data.client.api.RulesApiV3$7", apiClient0.getBasePath());
      assertEquals("com.ibm.watson.data.client.api.RulesApiV3$7", apiClient1.getBasePath());
      
      NewRuleEntity newRuleEntity0 = new NewRuleEntity();
      assertNotNull(newRuleEntity0);
      assertNull(newRuleEntity0.getName());
      assertNull(newRuleEntity0.getState());
      assertNull(newRuleEntity0.getLongDescription());
      assertNull(newRuleEntity0.getShortDescription());
      assertNull(newRuleEntity0.getRuleType());
      
      Boolean boolean0 = Boolean.FALSE;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        rulesApiV3_0.create(newRuleEntity0, "com.ibm.watson.data.client.api.RulesApiV3$7", boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [com.ibm.watson.data.client.api.RulesApiV3$7] is not a valid HTTP URL
         //
         verifyException("org.springframework.web.util.UriComponentsBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, (-748));
      assertNotNull(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient0);
      assertNotNull(rulesApiV3_0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      
      Boolean boolean0 = XmlSuite.DEFAULT_JUNIT;
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      UpdatableRuleEntity updatableRuleEntity0 = new UpdatableRuleEntity();
      assertNotNull(updatableRuleEntity0);
      assertNull(updatableRuleEntity0.getShortDescription());
      assertNull(updatableRuleEntity0.getName());
      assertNull(updatableRuleEntity0.getRevision());
      assertNull(updatableRuleEntity0.getLongDescription());
      assertNull(updatableRuleEntity0.getState());
      
      Mono<ResponseRule> mono0 = rulesApiV3_0.update("Problem deserializing 'setterless' property (\"%s\"): no way to handle typed deser with setterless yet", "bSXB~P_`O+t", updatableRuleEntity0, boolean0, (String) null);
      assertNotNull(mono0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      assertNull(updatableRuleEntity0.getShortDescription());
      assertNull(updatableRuleEntity0.getName());
      assertNull(updatableRuleEntity0.getRevision());
      assertNull(updatableRuleEntity0.getLongDescription());
      assertNull(updatableRuleEntity0.getState());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 12);
      assertNotNull(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient0);
      assertNotNull(rulesApiV3_0);
      assertEquals("http://localhost", apiClient0.getBasePath());
      
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Mono<GlossaryCreateResponse> mono0 = rulesApiV3_0.deleteRelationship("", "", "", boolean0, (String) null);
      assertNotNull(mono0);
      assertEquals("http://localhost", apiClient0.getBasePath());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient0);
      Boolean boolean0 = Boolean.TRUE;
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      Mono<GlossaryCreateResponse> mono0 = rulesApiV3_0.createRelationships("pGdaQ<nn", "", ruleRelationshipsRequest0, boolean0, "");
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 2611);
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient0);
      NewRuleEntity newRuleEntity0 = new NewRuleEntity();
      Boolean boolean0 = Boolean.FALSE;
      Mono<GlossaryCreateResponse> mono0 = rulesApiV3_0.create(newRuleEntity0, (String) null, boolean0);
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient0);
      Boolean boolean0 = Boolean.TRUE;
      Mono<GlossaryCreateResponse> mono0 = rulesApiV3_0.deleteRelationship("", "gRHh4", "", boolean0, "type");
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient0);
      Boolean boolean0 = Boolean.TRUE;
      Mono<ResponseRule> mono0 = rulesApiV3_0.get("", "", "", boolean0, "", "Nor~e_&fdmvi\"}");
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 1576);
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient0);
      Boolean boolean0 = Boolean.valueOf(false);
      RuleRelationshipsRequest ruleRelationshipsRequest0 = new RuleRelationshipsRequest();
      Mono<GlossaryCreateResponse> mono0 = rulesApiV3_0.createRelationships("Z?tk<Wa%NBp9J_-8", "z@s<8#", ruleRelationshipsRequest0, boolean0, (String) null);
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 1576);
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient0);
      Boolean boolean0 = Boolean.valueOf(false);
      Mono<Void> mono0 = rulesApiV3_0.delete("onHandleError", "reactor.core.publisher.FluxSkipLast", boolean0, "reactor.core.publisher.FluxSkipLast");
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false);
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient0);
      ApiClient apiClient1 = rulesApiV3_0.getApiClient();
      assertEquals("http://localhost", apiClient1.getBasePath());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 2611);
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient0);
      Boolean boolean0 = Boolean.FALSE;
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      Mono<Map<String, PaginatedAbstractRelationshipList>> mono0 = rulesApiV3_0.listRelationships("doOnBound", "4jMH&<PaL3K#Cjx^", "kt!FE)<", boolean0, integer0, "4jMH&<PaL3K#Cjx^");
      assertNotNull(mono0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ApiClient apiClient0 = new ApiClient(false, 2611);
      RulesApiV3 rulesApiV3_0 = new RulesApiV3(apiClient0);
      rulesApiV3_0.setApiClient(apiClient0);
      assertEquals("http://localhost", apiClient0.getBasePath());
  }
}
