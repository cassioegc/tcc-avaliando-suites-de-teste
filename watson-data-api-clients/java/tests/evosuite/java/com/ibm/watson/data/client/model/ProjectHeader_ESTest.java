/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 17:41:04 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.ProjectHeader;
import com.ibm.watson.data.client.model.enums.ProjectToolType;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlClass;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProjectHeader_ESTest extends ProjectHeader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "condition");
      projectHeader0.toString(stringBuilder0);
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      ArrayList<ProjectToolType> arrayList0 = new ArrayList<ProjectToolType>();
      projectHeader0.toIndentedString(arrayList0);
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      ProjectToolType projectToolType0 = ProjectToolType.DATA_REFINERY;
      ProjectHeader projectHeader1 = projectHeader0.addToolsItem(projectToolType0);
      projectHeader1.getTools();
      assertFalse(projectHeader1.getPublic());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      Stack<String> stack0 = new Stack<String>();
      projectHeader0.tags(stack0);
      projectHeader0.getTags();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.addTagsItem("B3=<");
      projectHeader0.getTags();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      ProjectHeader projectHeader1 = projectHeader0._public((Boolean) null);
      Boolean boolean0 = projectHeader1.getPublic();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      Boolean boolean0 = Boolean.TRUE;
      projectHeader0._public(boolean0);
      Boolean boolean1 = projectHeader0.getPublic();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      ProjectHeader projectHeader1 = projectHeader0.name("");
      projectHeader1.getName();
      assertFalse(projectHeader1.getPublic());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.setDescription("gx#_<k4_N");
      projectHeader0.getDescription();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getExcludedGroups();
      projectHeader0.tags(list0);
      // Undeclared exception!
      try { 
        projectHeader0.addTagsItem("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      ProjectToolType projectToolType0 = ProjectToolType.DATA_REFINERY;
      ProjectHeader projectHeader1 = projectHeader0.addToolsItem(projectToolType0);
      ProjectHeader projectHeader2 = new ProjectHeader();
      boolean boolean0 = projectHeader1.equals(projectHeader2);
      assertFalse(projectHeader2.getPublic());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      assertFalse(projectHeader0.getPublic());
      
      ProjectHeader projectHeader1 = new ProjectHeader();
      Boolean boolean0 = XmlSuite.DEFAULT_PRESERVE_ORDER;
      projectHeader0.setPublic(boolean0);
      boolean boolean1 = projectHeader1.equals(projectHeader0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.name("#zx");
      ProjectHeader projectHeader1 = new ProjectHeader();
      boolean boolean0 = projectHeader0.equals(projectHeader1);
      assertFalse(boolean0);
      assertFalse(projectHeader1.getPublic());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      ProjectHeader projectHeader1 = new ProjectHeader();
      assertTrue(projectHeader1.equals((Object)projectHeader0));
      
      projectHeader1.setDescription("class ProjectHeader {\n    tags: null\n    description: null\n    name: null\n    _public: java.lang.Boolean@0000000002\n    tools: java.util.ArrayList@0000000003\n}");
      boolean boolean0 = projectHeader0.equals(projectHeader1);
      assertFalse(projectHeader1.equals((Object)projectHeader0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      Class<String> class0 = String.class;
      XmlClass xmlClass0 = new XmlClass(class0);
      List<String> list0 = xmlClass0.getExcludedMethods();
      projectHeader0.tags(list0);
      ProjectHeader projectHeader1 = new ProjectHeader();
      boolean boolean0 = projectHeader0.equals(projectHeader1);
      assertFalse(boolean0);
      assertFalse(projectHeader1.getPublic());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      ProjectToolType projectToolType0 = ProjectToolType.DATA_REFINERY;
      boolean boolean0 = projectHeader0.equals(projectToolType0);
      assertFalse(projectHeader0.getPublic());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      ProjectHeader projectHeader1 = new ProjectHeader();
      boolean boolean0 = projectHeader1.equals(projectHeader0);
      assertFalse(projectHeader1.getPublic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      boolean boolean0 = projectHeader0.equals(projectHeader0);
      assertFalse(projectHeader0.getPublic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      boolean boolean0 = projectHeader0.equals((Object) null);
      assertFalse(projectHeader0.getPublic());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      ProjectToolType projectToolType0 = ProjectToolType.DASHBOARDS;
      ProjectHeader projectHeader1 = projectHeader0.addToolsItem(projectToolType0);
      ProjectHeader projectHeader2 = projectHeader1.addToolsItem(projectToolType0);
      assertFalse(projectHeader2.getPublic());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.setName("N?nng%%CDkgA");
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.name("N?nng%%CDkgA");
      projectHeader0.getName();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.getDescription();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.getTools();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getListeners();
      projectHeader0.setTags(list0);
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.toString();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      // Undeclared exception!
      try { 
        projectHeader0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.ProjectHeader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.hashCode();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      Stack<ProjectToolType> stack0 = new Stack<ProjectToolType>();
      projectHeader0.setTools(stack0);
      projectHeader0.getTools();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.getTags();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      LinkedList<ProjectToolType> linkedList0 = new LinkedList<ProjectToolType>();
      ProjectHeader projectHeader1 = projectHeader0.tools(linkedList0);
      assertFalse(projectHeader1.getPublic());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.getName();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      projectHeader0.description("");
      projectHeader0.getDescription();
      assertFalse(projectHeader0.getPublic());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ProjectHeader projectHeader0 = new ProjectHeader();
      Boolean boolean0 = projectHeader0.getPublic();
      assertFalse(boolean0);
  }
}
