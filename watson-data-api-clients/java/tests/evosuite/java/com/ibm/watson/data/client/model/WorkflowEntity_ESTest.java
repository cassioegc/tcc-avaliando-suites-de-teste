/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 14:58:07 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.Artifact;
import com.ibm.watson.data.client.model.ArtifactMetadata;
import com.ibm.watson.data.client.model.ArtifactWorkflowData;
import com.ibm.watson.data.client.model.Category;
import com.ibm.watson.data.client.model.FormProperty;
import com.ibm.watson.data.client.model.UserTask;
import com.ibm.watson.data.client.model.UserTaskEntity;
import com.ibm.watson.data.client.model.UserTaskMetadata;
import com.ibm.watson.data.client.model.Variable;
import com.ibm.watson.data.client.model.WorkflowEntity;
import com.ibm.watson.data.client.model.enums.ArtifactState;
import com.ibm.watson.data.client.model.enums.WorkflowAction;
import com.ibm.watson.data.client.model.enums.WorkflowRelationshipType;
import io.netty.channel.local.LocalServerChannel;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.testng.IClassListener;
import org.testng.IDynamicGraph;
import org.testng.IInvokedMethodListener;
import org.testng.ITestNGMethod;
import org.testng.ITestRunnerFactory;
import org.testng.SuiteRunner;
import org.testng.TestRunner;
import org.testng.internal.Configuration;
import org.testng.internal.DynamicGraph;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;
import reactor.core.publisher.SignalType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WorkflowEntity_ESTest extends WorkflowEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      workflowEntity0.getUserTasks();
      WorkflowEntity workflowEntity1 = workflowEntity0.userTasks((List<UserTask>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      WorkflowEntity workflowEntity2 = new WorkflowEntity();
      WorkflowEntity workflowEntity3 = workflowEntity2.businessKey("ZTy7#@-c:ok]`)n6#");
      Artifact artifact0 = new Artifact();
      workflowEntity0.addArtifactsItem(artifact0);
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      workflowEntity3.equals(workflowEntity1);
      Artifact artifact1 = artifact0.workflowData(artifactWorkflowData0);
      ArtifactMetadata artifactMetadata0 = new ArtifactMetadata();
      Artifact artifact2 = artifact1.metadata(artifactMetadata0);
      WorkflowEntity workflowEntity4 = workflowEntity3.addArtifactsItem(artifact2);
      WorkflowAction workflowAction0 = WorkflowAction.GET;
      WorkflowEntity workflowEntity5 = workflowEntity4.lastAction(workflowAction0);
      ArrayList<Artifact> arrayList0 = new ArrayList<Artifact>();
      arrayList0.add(artifact2);
      arrayList0.add(artifact0);
      workflowEntity4.setArtifacts(arrayList0);
      workflowEntity5.getWorkflowState();
      WorkflowEntity workflowEntity6 = workflowEntity5.artifacts((List<Artifact>) null);
      Integer integer1 = XmlSuite.DEFAULT_THREAD_COUNT;
      WorkflowEntity workflowEntity7 = workflowEntity4.workflowTemplateVersion(integer1);
      WorkflowAction workflowAction1 = WorkflowAction.GET;
      Artifact artifact3 = new Artifact();
      workflowEntity7.addArtifactsItem(artifact3);
      workflowEntity6.addArtifactsItem(artifact1);
      workflowEntity7.setLastAction(workflowAction1);
      workflowEntity1.userTasks((List<UserTask>) null);
      Integer integer2 = XmlSuite.DEFAULT_THREAD_COUNT;
      workflowEntity6.setWorkflowTemplateVersion(integer2);
      workflowEntity4.equals(artifactMetadata0);
      workflowEntity0.getWorkflowTemplateKey();
      workflowEntity4.toString();
      workflowEntity3.setUserTasks((List<UserTask>) null);
      workflowEntity1.workflowTemplateVersion(integer1);
      UserTask userTask0 = new UserTask();
      UserTaskMetadata userTaskMetadata0 = new UserTaskMetadata();
      UserTask userTask1 = userTask0.metadata(userTaskMetadata0);
      workflowEntity5.addUserTasksItem(userTask1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowAction workflowAction0 = WorkflowAction.UPDATE;
      WorkflowEntity workflowEntity1 = workflowEntity0.lastAction(workflowAction0);
      WorkflowEntity workflowEntity2 = workflowEntity1.parentId("ph]*A&a");
      Variable variable0 = new Variable();
      DynamicGraph<Variable> dynamicGraph0 = new DynamicGraph<Variable>();
      List<Variable> list0 = dynamicGraph0.getDependenciesFor(variable0);
      workflowEntity1.setVariables(list0);
      WorkflowEntity workflowEntity3 = workflowEntity1.addVariablesItem(variable0);
      workflowEntity3.setWorkflowTemplateId("e4yc*HR^]<.d;C");
      WorkflowEntity workflowEntity4 = workflowEntity0.addVariablesItem(variable0);
      workflowEntity4.hashCode();
      workflowEntity4.setUserTasks((List<UserTask>) null);
      workflowEntity2.setWorkflowState("ph]*A&a");
      variable0.value(workflowEntity0);
      workflowEntity2.hashCode();
      workflowEntity4.getUserTasks();
      workflowEntity1.getLastAction();
      String string0 = workflowEntity0.getWorkflowTemplateId();
      String string1 = "6W~n03 ]7Dv$]wEB%;9";
      workflowEntity0.workflowTemplateKey(string1);
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.CHILD;
      WorkflowEntity workflowEntity5 = workflowEntity0.relationshipType(workflowRelationshipType0);
      workflowEntity5.getLastAction();
      workflowEntity2.setWorkflowTemplateKey(string0);
      workflowEntity2.setVariables(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowTemplateId("    workflowTemplateKey: ");
      Integer integer0 = new Integer((-1322));
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowTemplateVersion(integer0);
      Artifact artifact0 = new Artifact();
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Artifact artifact1 = artifact0.workflowData(artifactWorkflowData0);
      WorkflowEntity workflowEntity3 = workflowEntity2.addArtifactsItem(artifact1);
      WorkflowEntity workflowEntity4 = workflowEntity3.businessKey("    workflowTemplateKey: ");
      WorkflowEntity workflowEntity5 = workflowEntity4.workflowTemplateKey("");
      Integer.remainderUnsigned((-1322), (-1322));
      WorkflowEntity workflowEntity6 = workflowEntity5.parentId("    workflowTemplateKey: ");
      workflowEntity5.getWorkflowTemplateVersion();
      workflowEntity6.workflowTemplateVersion((Integer) null);
      Variable variable0 = new Variable();
      ArtifactMetadata artifactMetadata0 = new ArtifactMetadata();
      ArtifactMetadata artifactMetadata1 = artifactMetadata0.versionId("Creating TestClass for ");
      workflowEntity4.addArtifactsItem(artifact0);
      ArtifactMetadata artifactMetadata2 = artifactMetadata1.name("");
      ArtifactState artifactState0 = ArtifactState.ARCHIVED;
      SignalType signalType0 = SignalType.REQUEST;
      artifactMetadata1.equals(signalType0);
      ArtifactMetadata artifactMetadata3 = artifactMetadata2.state(artifactState0);
      ArtifactMetadata artifactMetadata4 = artifactMetadata3.artifactId("Creating TestClass for ");
      artifact0.metadata(artifactMetadata4);
      Variable variable1 = variable0.name("    workflowTemplateKey: ");
      WorkflowEntity workflowEntity7 = workflowEntity6.addVariablesItem(variable1);
      workflowEntity7.getRelationshipType();
      List<Artifact> list0 = workflowEntity1.getArtifacts();
      WorkflowEntity workflowEntity8 = workflowEntity1.artifacts(list0);
      workflowEntity8.getVariables();
      String string0 = workflowEntity1.getWorkflowState();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      Integer integer0 = new Integer(1725);
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowTemplateVersion(integer0);
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowTemplateKey(">c7{x");
      WorkflowAction workflowAction0 = WorkflowAction.DELETE_DRAFT;
      workflowEntity2.setLastAction(workflowAction0);
      workflowEntity1.setWorkflowTemplateId(">c7{x");
      workflowEntity2.getWorkflowTemplateVersion();
      WorkflowEntity workflowEntity3 = workflowEntity0.addUserTasksItem((UserTask) null);
      workflowEntity2.getParentId();
      Integer integer1 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      workflowEntity1.setWorkflowTemplateVersion(integer1);
      workflowEntity2.variables((List<Variable>) null);
      workflowEntity3.getWorkflowTemplateVersion();
      Variable variable0 = new Variable();
      Variable variable1 = variable0.name(">c7{x");
      Variable variable2 = variable1.value((Object) null);
      workflowEntity2.addVariablesItem(variable2);
      Artifact artifact0 = new Artifact();
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      MockDate mockDate0 = new MockDate(1725, 1725, (-698), (-698), (-698), 0);
      ArtifactWorkflowData artifactWorkflowData1 = artifactWorkflowData0.oldEffectiveStartDate(mockDate0);
      Artifact artifact1 = artifact0.workflowData(artifactWorkflowData1);
      ArtifactMetadata artifactMetadata0 = new ArtifactMetadata();
      ArtifactMetadata artifactMetadata1 = artifactMetadata0.effectiveEndDate(mockDate0);
      ArtifactMetadata artifactMetadata2 = artifactMetadata1.publishedAncestorId(">c7{x");
      artifactMetadata2.setArtifactId("    workflowTemplateId: ");
      Artifact artifact2 = artifact1.metadata(artifactMetadata2);
      WorkflowEntity workflowEntity4 = workflowEntity0.addArtifactsItem(artifact2);
      assertSame(workflowEntity4, workflowEntity3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      Artifact artifact0 = new Artifact();
      WorkflowEntity workflowEntity1 = workflowEntity0.addArtifactsItem(artifact0);
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowState("");
      LinkedList<Artifact> linkedList0 = new LinkedList<Artifact>();
      workflowEntity2.setBusinessKey("");
      workflowEntity0.setArtifacts(linkedList0);
      WorkflowEntity workflowEntity3 = workflowEntity2.businessKey("");
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.CHILD;
      WorkflowEntity workflowEntity4 = workflowEntity3.relationshipType(workflowRelationshipType0);
      WorkflowEntity workflowEntity5 = workflowEntity4.workflowTemplateId("");
      Variable variable0 = new Variable();
      Variable variable1 = variable0.name("");
      WorkflowEntity workflowEntity6 = workflowEntity5.variables((List<Variable>) null);
      Object object0 = new Object();
      workflowEntity6.equals(object0);
      WorkflowEntity workflowEntity7 = workflowEntity3.addArtifactsItem(artifact0);
      artifact0.toString();
      workflowEntity0.addVariablesItem(variable1);
      WorkflowEntity workflowEntity8 = workflowEntity5.userTasks((List<UserTask>) null);
      workflowEntity5.userTasks((List<UserTask>) null);
      workflowEntity8.setVariables((List<Variable>) null);
      WorkflowRelationshipType workflowRelationshipType1 = WorkflowRelationshipType.DEPENDEND;
      workflowEntity8.relationshipType(workflowRelationshipType1);
      workflowEntity8.setParentId("");
      workflowEntity7.getBusinessKey();
      workflowEntity0.getWorkflowTemplateKey();
      workflowEntity5.hashCode();
      WorkflowEntity workflowEntity9 = workflowEntity3.addVariablesItem(variable1);
      assertNull(workflowEntity9.getLastAction());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.userTasks((List<UserTask>) null);
      Variable variable0 = new Variable();
      WorkflowEntity workflowEntity2 = workflowEntity1.addVariablesItem(variable0);
      WorkflowEntity workflowEntity3 = workflowEntity2.workflowState("g,&)![DGPJ3[");
      WorkflowEntity workflowEntity4 = workflowEntity3.parentId("");
      WorkflowEntity workflowEntity5 = workflowEntity4.workflowTemplateId("");
      workflowEntity5.getWorkflowTemplateId();
      Integer integer0 = workflowEntity5.getWorkflowTemplateVersion();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.parentId("");
      WorkflowAction workflowAction0 = WorkflowAction.UPDATE;
      WorkflowEntity workflowEntity2 = workflowEntity1.lastAction(workflowAction0);
      WorkflowEntity workflowEntity3 = workflowEntity2.workflowTemplateId("");
      ArrayList<UserTask> arrayList0 = new ArrayList<UserTask>();
      workflowEntity0.userTasks(arrayList0);
      workflowEntity3.setWorkflowTemplateKey("1}hbEj27!");
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      WorkflowEntity workflowEntity4 = workflowEntity3.variables(arrayList1);
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.CHILD;
      WorkflowEntity workflowEntity5 = workflowEntity4.relationshipType(workflowRelationshipType0);
      workflowEntity3.setBusinessKey("");
      workflowEntity5.getVariables();
      WorkflowEntity workflowEntity6 = workflowEntity5.parentId("");
      WorkflowEntity workflowEntity7 = workflowEntity6.relationshipType(workflowRelationshipType0);
      workflowEntity2.getWorkflowTemplateVersion();
      UserTask userTask0 = new UserTask();
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      UserTaskEntity userTaskEntity1 = userTaskEntity0.addCandidateUsersItem("1}hbEj27!");
      UserTaskEntity userTaskEntity2 = userTaskEntity1.workflowTemplateId("org.springframework.http.codec.multipart.PartGenerator");
      UserTask userTask1 = userTask0.entity(userTaskEntity2);
      WorkflowEntity workflowEntity8 = workflowEntity6.addUserTasksItem(userTask1);
      assertSame(workflowEntity8, workflowEntity7);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      Variable variable0 = new Variable();
      WorkflowEntity workflowEntity1 = workflowEntity0.addVariablesItem(variable0);
      List<Variable> list0 = workflowEntity1.getVariables();
      WorkflowEntity workflowEntity2 = workflowEntity1.variables(list0);
      WorkflowAction workflowAction0 = WorkflowAction.DELETE_DRAFT;
      WorkflowEntity workflowEntity3 = workflowEntity2.lastAction(workflowAction0);
      UserTask userTask0 = new UserTask();
      WorkflowEntity workflowEntity4 = workflowEntity3.addUserTasksItem(userTask0);
      ArrayList<UserTask> arrayList0 = new ArrayList<UserTask>();
      WorkflowEntity workflowEntity5 = workflowEntity4.userTasks(arrayList0);
      WorkflowEntity workflowEntity6 = workflowEntity5.workflowTemplateId("");
      assertNull(workflowEntity6.getParentId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowTemplateId(".<i3<3L`+Q");
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowTemplateKey(".<i3<3L`+Q");
      Artifact artifact0 = new Artifact();
      ArtifactMetadata artifactMetadata0 = new ArtifactMetadata();
      Artifact artifact1 = artifact0.metadata(artifactMetadata0);
      WorkflowEntity workflowEntity3 = workflowEntity2.addArtifactsItem(artifact1);
      Variable variable0 = new Variable();
      WorkflowEntity workflowEntity4 = workflowEntity3.addVariablesItem(variable0);
      WorkflowAction workflowAction0 = WorkflowAction.PUBLISH;
      workflowEntity2.setLastAction(workflowAction0);
      variable0.value((Object) null);
      WorkflowAction workflowAction1 = WorkflowAction.UPDATE;
      WorkflowEntity workflowEntity5 = workflowEntity4.lastAction(workflowAction1);
      WorkflowEntity workflowEntity6 = workflowEntity5.businessKey(".<i3<3L`+Q");
      workflowEntity6.toString();
      workflowEntity5.getUserTasks();
      Object object0 = new Object();
      workflowEntity4.equals(object0);
      WorkflowEntity workflowEntity7 = workflowEntity3.addArtifactsItem(artifact0);
      workflowEntity5.hashCode();
      workflowEntity6.getLastAction();
      workflowEntity2.getWorkflowTemplateVersion();
      SignalType signalType0 = SignalType.CURRENT_CONTEXT;
      workflowEntity7.equals(signalType0);
      List<Artifact> list0 = workflowEntity7.getArtifacts();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.artifacts((List<Artifact>) null);
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowTemplateVersion(integer0);
      WorkflowEntity workflowEntity3 = workflowEntity2.addUserTasksItem((UserTask) null);
      List<UserTask> list0 = workflowEntity3.getUserTasks();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowTemplateKey("");
      Variable variable0 = new Variable();
      Variable variable1 = variable0.name("");
      Object object0 = new Object();
      Variable variable2 = variable1.value(object0);
      WorkflowEntity workflowEntity2 = workflowEntity1.addVariablesItem(variable2);
      WorkflowEntity workflowEntity3 = workflowEntity2.businessKey("");
      Artifact artifact0 = new Artifact();
      variable2.value(workflowEntity3);
      ArtifactMetadata artifactMetadata0 = new ArtifactMetadata();
      ArtifactMetadata artifactMetadata1 = artifactMetadata0.versionId("");
      Category category0 = new Category();
      artifactMetadata0.parentCategory(category0);
      artifactMetadata1.name((String) null);
      ArtifactMetadata artifactMetadata2 = artifactMetadata1.parentCategory(category0);
      artifactMetadata2.setArtifactId("j.@1{U~45M&z");
      Artifact artifact1 = artifact0.metadata(artifactMetadata2);
      artifact1.equals(variable2);
      workflowEntity3.addArtifactsItem(artifact1);
      WorkflowAction workflowAction0 = WorkflowAction.UPDATE;
      workflowEntity1.lastAction(workflowAction0);
      String string0 = workflowEntity2.getWorkflowTemplateKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.addUserTasksItem((UserTask) null);
      workflowEntity0.equals(workflowEntity1);
      Variable variable0 = new Variable();
      variable0.name("b:OgwBMC5*A/bTt");
      WorkflowEntity workflowEntity2 = workflowEntity1.addVariablesItem(variable0);
      variable0.toString();
      workflowEntity1.setWorkflowState("b:OgwBMC5*A/bTt");
      WorkflowAction workflowAction0 = WorkflowAction.UPDATE;
      workflowEntity1.setLastAction(workflowAction0);
      WorkflowEntity workflowEntity3 = workflowEntity2.workflowState("b:OgwBMC5*A/bTt");
      Artifact artifact0 = new Artifact();
      WorkflowEntity workflowEntity4 = workflowEntity3.addArtifactsItem(artifact0);
      WorkflowEntity workflowEntity5 = workflowEntity4.workflowTemplateKey("    relationshipType: ");
      assertEquals("    relationshipType: ", workflowEntity5.getWorkflowTemplateKey());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      Variable variable0 = new Variable();
      WorkflowEntity workflowEntity1 = workflowEntity0.addVariablesItem(variable0);
      Stack<Artifact> stack0 = new Stack<Artifact>();
      WorkflowEntity workflowEntity2 = workflowEntity1.artifacts(stack0);
      WorkflowAction workflowAction0 = WorkflowAction.GET;
      WorkflowEntity workflowEntity3 = workflowEntity2.lastAction(workflowAction0);
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.DEPENDEND;
      WorkflowEntity workflowEntity4 = workflowEntity3.relationshipType(workflowRelationshipType0);
      Vector<UserTask> vector0 = new Vector<UserTask>();
      WorkflowEntity workflowEntity5 = workflowEntity4.userTasks(vector0);
      String string0 = workflowEntity5.getParentId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.parentId("&TGW~78*mv/__/");
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.CHILD;
      WorkflowEntity workflowEntity2 = workflowEntity1.relationshipType(workflowRelationshipType0);
      WorkflowEntity workflowEntity3 = workflowEntity2.workflowState("&TGW~78*mv/__/");
      Variable variable0 = new Variable();
      Variable variable1 = variable0.name("");
      Variable variable2 = variable1.value("");
      WorkflowEntity workflowEntity4 = workflowEntity3.addVariablesItem(variable2);
      List<Artifact> list0 = workflowEntity4.getArtifacts();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      Variable variable0 = new Variable();
      WorkflowEntity workflowEntity1 = workflowEntity0.addVariablesItem(variable0);
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowTemplateId("U(W_=OVEbtF");
      WorkflowEntity workflowEntity3 = workflowEntity2.workflowState((String) null);
      WorkflowEntity workflowEntity4 = workflowEntity3.workflowTemplateKey("2");
      UserTask userTask0 = new UserTask();
      WorkflowEntity workflowEntity5 = workflowEntity4.addUserTasksItem(userTask0);
      String string0 = workflowEntity5.getWorkflowTemplateKey();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      Vector<UserTask> vector0 = new Vector<UserTask>();
      WorkflowEntity workflowEntity1 = workflowEntity0.userTasks(vector0);
      Vector<Artifact> vector1 = new Vector<Artifact>();
      WorkflowEntity workflowEntity2 = workflowEntity1.artifacts(vector1);
      WorkflowEntity workflowEntity3 = workflowEntity2.workflowTemplateKey((String) null);
      UserTask userTask0 = new UserTask();
      WorkflowEntity workflowEntity4 = workflowEntity3.addUserTasksItem(userTask0);
      Stack<Variable> stack0 = new Stack<Variable>();
      WorkflowEntity workflowEntity5 = workflowEntity4.variables(stack0);
      List<Artifact> list0 = workflowEntity5.getArtifacts();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.DEPENDEND;
      WorkflowEntity workflowEntity1 = workflowEntity0.relationshipType(workflowRelationshipType0);
      WorkflowAction workflowAction0 = WorkflowAction.UPDATE;
      WorkflowEntity workflowEntity2 = workflowEntity1.lastAction(workflowAction0);
      WorkflowEntity workflowEntity3 = workflowEntity2.parentId("");
      workflowEntity1.getVariables();
      WorkflowEntity workflowEntity4 = workflowEntity3.variables((List<Variable>) null);
      Artifact artifact0 = new Artifact();
      WorkflowEntity workflowEntity5 = workflowEntity4.addArtifactsItem(artifact0);
      String string0 = workflowEntity5.getParentId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.userTasks((List<UserTask>) null);
      workflowEntity1.getArtifacts();
      WorkflowEntity workflowEntity2 = workflowEntity1.artifacts((List<Artifact>) null);
      WorkflowAction workflowAction0 = WorkflowAction.GET;
      WorkflowEntity workflowEntity3 = workflowEntity2.lastAction(workflowAction0);
      WorkflowEntity workflowEntity4 = workflowEntity3.workflowTemplateKey("f6}rz,a#OnP9s+ph|0");
      Artifact artifact0 = new Artifact();
      WorkflowEntity workflowEntity5 = workflowEntity4.addArtifactsItem(artifact0);
      workflowEntity5.setWorkflowTemplateKey("f6}rz,a#OnP9s+ph|0");
      assertNull(workflowEntity5.getRelationshipType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      WorkflowEntity workflowEntity1 = workflowEntity0.variables(arrayList0);
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.DEPENDEND;
      WorkflowEntity workflowEntity2 = workflowEntity1.relationshipType(workflowRelationshipType0);
      ArrayList<UserTask> arrayList1 = new ArrayList<UserTask>();
      workflowEntity2.workflowTemplateId("");
      workflowEntity2.setUserTasks(arrayList1);
      arrayList1.trimToSize();
      workflowEntity0.setBusinessKey("~q Oi");
      workflowEntity2.userTasks(arrayList1);
      workflowEntity1.businessKey("6F_L'e");
      workflowEntity1.getUserTasks();
      workflowEntity2.setWorkflowTemplateKey((String) null);
      assertNull(workflowEntity2.getParentId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowTemplateId("+ScT");
      workflowEntity0.workflowTemplateId("+ScT");
      WorkflowEntity workflowEntity2 = workflowEntity1.artifacts((List<Artifact>) null);
      Artifact artifact0 = new Artifact();
      ArtifactMetadata artifactMetadata0 = new ArtifactMetadata();
      Vector<UserTask> vector0 = new Vector<UserTask>();
      workflowEntity1.setUserTasks(vector0);
      ArtifactMetadata artifactMetadata1 = artifactMetadata0.artifactId("    userTasks: ");
      ArtifactState artifactState0 = ArtifactState.DRAFT;
      artifactMetadata0.setVersionId("");
      ArtifactMetadata artifactMetadata2 = artifactMetadata1.state(artifactState0);
      Artifact artifact1 = artifact0.metadata(artifactMetadata2);
      workflowEntity2.addArtifactsItem(artifact1);
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.CHILD;
      WorkflowEntity workflowEntity3 = workflowEntity2.relationshipType(workflowRelationshipType0);
      workflowEntity3.setWorkflowState("");
      String string0 = workflowEntity3.getWorkflowTemplateId();
      String string1 = workflowEntity2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      UserTask userTask0 = new UserTask();
      WorkflowEntity workflowEntity1 = workflowEntity0.addUserTasksItem(userTask0);
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowTemplateId("null");
      WorkflowEntity workflowEntity3 = workflowEntity2.workflowTemplateKey("null");
      Stack<Variable> stack0 = new Stack<Variable>();
      WorkflowEntity workflowEntity4 = workflowEntity3.variables(stack0);
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      WorkflowEntity workflowEntity5 = workflowEntity4.workflowTemplateVersion(integer0);
      WorkflowEntity workflowEntity6 = workflowEntity5.variables(stack0);
      workflowEntity5.workflowState("null");
      workflowEntity6.setWorkflowState("6jmmD$ZH33fq}Js");
      workflowEntity5.getWorkflowState();
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.DEPENDEND;
      WorkflowEntity workflowEntity7 = workflowEntity5.relationshipType(workflowRelationshipType0);
      assertSame(workflowEntity7, workflowEntity4);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      LinkedList<UserTask> linkedList0 = new LinkedList<UserTask>();
      WorkflowEntity workflowEntity1 = workflowEntity0.userTasks(linkedList0);
      Stack<Artifact> stack0 = new Stack<Artifact>();
      WorkflowEntity workflowEntity2 = workflowEntity1.artifacts(stack0);
      WorkflowEntity workflowEntity3 = workflowEntity2.addArtifactsItem((Artifact) null);
      WorkflowEntity workflowEntity4 = workflowEntity3.businessKey("");
      workflowEntity2.getVariables();
      workflowEntity3.setParentId("");
      WorkflowEntity workflowEntity5 = workflowEntity4.variables((List<Variable>) null);
      workflowEntity5.getWorkflowState();
      workflowEntity4.getLastAction();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      workflowEntity0.getWorkflowTemplateVersion();
      workflowEntity0.setWorkflowState(", components=");
      workflowEntity0.getWorkflowTemplateId();
      Artifact artifact0 = new Artifact();
      WorkflowEntity workflowEntity1 = workflowEntity0.addArtifactsItem(artifact0);
      assertNull(workflowEntity1.getRelationshipType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowState("");
      WorkflowEntity workflowEntity2 = workflowEntity1.businessKey("");
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      WorkflowEntity workflowEntity3 = workflowEntity2.workflowTemplateVersion(integer0);
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.DEPENDEND;
      WorkflowEntity workflowEntity4 = workflowEntity3.relationshipType(workflowRelationshipType0);
      WorkflowAction workflowAction0 = WorkflowAction.GET;
      WorkflowEntity workflowEntity5 = workflowEntity4.lastAction(workflowAction0);
      String string0 = workflowEntity5.getWorkflowState();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.CHILD;
      workflowEntity0.setRelationshipType(workflowRelationshipType0);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowTemplateVersion(integer0);
      workflowEntity1.workflowTemplateKey("");
      workflowEntity1.relationshipType(workflowRelationshipType0);
      Integer integer1 = workflowEntity1.getWorkflowTemplateVersion();
      assertEquals(5, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.userTasks((List<UserTask>) null);
      workflowEntity1.equals((Object) null);
      WorkflowEntity workflowEntity2 = workflowEntity1.businessKey((String) null);
      WorkflowEntity workflowEntity3 = workflowEntity2.addVariablesItem((Variable) null);
      Artifact artifact0 = new Artifact();
      workflowEntity2.addArtifactsItem(artifact0);
      workflowEntity3.setBusinessKey("cIndex: %d (expected: >= 0 && <= numComponents(%d))");
      assertSame(workflowEntity3, workflowEntity1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      UserTask userTask0 = new UserTask();
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      UserTask userTask1 = userTask0.entity(userTaskEntity0);
      WorkflowEntity workflowEntity1 = workflowEntity0.addUserTasksItem(userTask1);
      Stack<Variable> stack0 = new Stack<Variable>();
      WorkflowEntity workflowEntity2 = workflowEntity1.variables(stack0);
      workflowEntity2.setWorkflowState("    workflowTemplateId: ");
      workflowEntity2.hashCode();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      Stack<UserTask> stack0 = new Stack<UserTask>();
      WorkflowEntity workflowEntity1 = workflowEntity0.userTasks(stack0);
      WorkflowEntity workflowEntity2 = workflowEntity1.businessKey("*XuK]X-v");
      WorkflowEntity workflowEntity3 = workflowEntity2.addArtifactsItem((Artifact) null);
      workflowEntity3.setParentId(";7,0\"KI)<");
      workflowEntity1.userTasks(stack0);
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      WorkflowEntity workflowEntity4 = workflowEntity3.workflowTemplateVersion(integer0);
      WorkflowEntity workflowEntity5 = workflowEntity4.workflowTemplateId("*XuK]X-v");
      workflowEntity5.getVariables();
      workflowEntity4.hashCode();
      workflowEntity0.getParentId();
      WorkflowEntity workflowEntity6 = workflowEntity4.parentId(";7,0\"KI)<");
      workflowEntity6.setVariables((List<Variable>) null);
      workflowEntity3.getBusinessKey();
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.DEPENDEND;
      workflowEntity3.relationshipType(workflowRelationshipType0);
      Integer integer1 = XmlSuite.DEFAULT_VERBOSE;
      workflowEntity2.setWorkflowTemplateVersion(integer1);
      Stack<Variable> stack1 = new Stack<Variable>();
      workflowEntity0.setVariables(stack1);
      workflowEntity0.hashCode();
      workflowEntity5.getRelationshipType();
      workflowEntity6.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.parentId("io.netty.util.concurrent.PromiseAggregator");
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.CHILD;
      WorkflowEntity workflowEntity2 = workflowEntity1.relationshipType(workflowRelationshipType0);
      UserTask userTask0 = new UserTask();
      WorkflowEntity workflowEntity3 = workflowEntity2.addUserTasksItem(userTask0);
      WorkflowEntity workflowEntity4 = workflowEntity3.businessKey("");
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      WorkflowEntity workflowEntity5 = workflowEntity4.variables(arrayList0);
      Integer integer0 = workflowEntity5.getWorkflowTemplateVersion();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowTemplateKey("'c:,h,");
      WorkflowEntity workflowEntity2 = workflowEntity1.parentId("'c:,h,");
      workflowEntity0.getUserTasks();
      workflowEntity2.setUserTasks((List<UserTask>) null);
      assertNull(workflowEntity2.getRelationshipType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      UserTask userTask0 = new UserTask();
      WorkflowEntity workflowEntity1 = workflowEntity0.addUserTasksItem(userTask0);
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowTemplateVersion((Integer) null);
      WorkflowEntity workflowEntity3 = workflowEntity2.workflowState("Dw");
      WorkflowEntity workflowEntity4 = workflowEntity3.businessKey("");
      WorkflowEntity workflowEntity5 = workflowEntity4.workflowTemplateId("");
      String string0 = workflowEntity5.getWorkflowTemplateKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      UserTask userTask0 = new UserTask();
      WorkflowEntity workflowEntity1 = workflowEntity0.addUserTasksItem(userTask0);
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowTemplateKey("");
      WorkflowEntity workflowEntity3 = workflowEntity2.parentId("");
      WorkflowAction workflowAction0 = WorkflowAction.GET;
      WorkflowEntity workflowEntity4 = workflowEntity3.lastAction(workflowAction0);
      WorkflowEntity workflowEntity5 = workflowEntity4.workflowTemplateId("");
      List<Variable> list0 = workflowEntity5.getVariables();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      workflowEntity0.getRelationshipType();
      workflowEntity0.hashCode();
      workflowEntity0.setUserTasks((List<UserTask>) null);
      assertNull(workflowEntity0.getWorkflowTemplateVersion());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.parentId("8");
      Variable variable0 = new Variable();
      Variable variable1 = variable0.name("eG>Z<`Mkee:k P");
      workflowEntity1.addVariablesItem(variable1);
      workflowEntity0.getParentId();
      workflowEntity1.setParentId("8");
      WorkflowEntity workflowEntity2 = workflowEntity0.workflowTemplateId("8");
      assertSame(workflowEntity2, workflowEntity0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.businessKey("");
      Vector<Artifact> vector0 = new Vector<Artifact>();
      vector0.remove((Object) workflowEntity1);
      WorkflowEntity workflowEntity2 = workflowEntity1.artifacts(vector0);
      assertNull(workflowEntity2.getWorkflowState());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.addUserTasksItem((UserTask) null);
      workflowEntity0.setWorkflowTemplateVersion((Integer) null);
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      FormProperty formProperty0 = new FormProperty();
      UserTaskEntity userTaskEntity1 = userTaskEntity0.addFormPropertiesItem(formProperty0);
      UserTaskEntity userTaskEntity2 = userTaskEntity1.taskTitle((String) null);
      Vector<FormProperty> vector0 = new Vector<FormProperty>();
      UserTaskEntity userTaskEntity3 = userTaskEntity2.formProperties(vector0);
      userTaskEntity3.getVariables();
      WorkflowEntity workflowEntity2 = workflowEntity1.variables((List<Variable>) null);
      assertNull(workflowEntity2.getParentId());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.CHILD;
      WorkflowEntity workflowEntity1 = workflowEntity0.relationshipType(workflowRelationshipType0);
      Variable variable0 = new Variable();
      WorkflowEntity workflowEntity2 = workflowEntity1.addVariablesItem(variable0);
      WorkflowEntity workflowEntity3 = workflowEntity2.parentId("");
      WorkflowEntity workflowEntity4 = workflowEntity3.workflowTemplateKey("");
      WorkflowRelationshipType workflowRelationshipType1 = WorkflowRelationshipType.CHILD;
      WorkflowEntity workflowEntity5 = workflowEntity4.relationshipType(workflowRelationshipType1);
      assertSame(workflowEntity0, workflowEntity5);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      Stack<Variable> stack0 = new Stack<Variable>();
      workflowEntity0.setVariables(stack0);
      WorkflowEntity workflowEntity1 = workflowEntity0.addVariablesItem((Variable) null);
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.DEPENDEND;
      WorkflowEntity workflowEntity2 = workflowEntity1.relationshipType(workflowRelationshipType0);
      assertNull(workflowEntity2.getWorkflowTemplateKey());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      workflowEntity0.getUserTasks();
      WorkflowEntity workflowEntity1 = workflowEntity0.userTasks((List<UserTask>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      WorkflowEntity workflowEntity2 = new WorkflowEntity();
      assertTrue(workflowEntity2.equals((Object)workflowEntity0));
      
      WorkflowEntity workflowEntity3 = workflowEntity2.businessKey("ZTy7#@-c:ok]`)n6#");
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      workflowEntity3.equals(workflowEntity1);
      ArtifactMetadata artifactMetadata0 = new ArtifactMetadata();
      ArrayList<Artifact> arrayList0 = new ArrayList<Artifact>();
      Integer integer1 = XmlSuite.DEFAULT_THREAD_COUNT;
      Artifact artifact0 = new Artifact();
      WorkflowEntity workflowEntity4 = workflowEntity1.userTasks((List<UserTask>) null);
      Integer integer2 = XmlSuite.DEFAULT_THREAD_COUNT;
      workflowEntity0.getWorkflowTemplateKey();
      workflowEntity3.setUserTasks((List<UserTask>) null);
      assertFalse(workflowEntity2.equals((Object)workflowEntity0));
      
      workflowEntity1.workflowTemplateVersion(integer1);
      UserTask userTask0 = new UserTask();
      UserTaskMetadata userTaskMetadata0 = new UserTaskMetadata();
      userTask0.metadata(userTaskMetadata0);
      workflowEntity4.addArtifactsItem(artifact0);
      assertFalse(workflowEntity0.equals((Object)workflowEntity2));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowTemplateId("");
      LinkedList<Artifact> linkedList0 = new LinkedList<Artifact>();
      WorkflowEntity workflowEntity2 = workflowEntity1.artifacts(linkedList0);
      Variable variable0 = new Variable();
      WorkflowEntity workflowEntity3 = workflowEntity2.addVariablesItem(variable0);
      WorkflowEntity workflowEntity4 = workflowEntity3.userTasks((List<UserTask>) null);
      WorkflowEntity workflowEntity5 = workflowEntity4.parentId("");
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      Integer.getInteger("");
      workflowEntity1.setBusinessKey("");
      WorkflowEntity workflowEntity6 = workflowEntity5.addVariablesItem(variable0);
      workflowEntity5.setWorkflowTemplateVersion(integer0);
      workflowEntity5.getUserTasks();
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      arrayList0.add(variable0);
      workflowEntity6.workflowTemplateVersion((Integer) null);
      workflowEntity6.setWorkflowTemplateKey("    userTasks: ");
      workflowEntity0.setVariables(arrayList0);
      workflowEntity5.getVariables();
      workflowEntity6.getRelationshipType();
      Variable variable1 = variable0.value((Object) null);
      workflowEntity2.equals(variable1);
      UserTask userTask0 = new UserTask();
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      Random.setNextRandom(2016);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowState("\"*t)},");
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowTemplateVersion(integer0);
      WorkflowEntity workflowEntity3 = workflowEntity2.workflowTemplateKey("\"*t)},");
      Integer.divideUnsigned(761, (-2647));
      WorkflowAction workflowAction0 = WorkflowAction.CREATE_DRAFT;
      WorkflowEntity workflowEntity4 = workflowEntity1.lastAction(workflowAction0);
      WorkflowEntity workflowEntity5 = workflowEntity4.addUserTasksItem((UserTask) null);
      WorkflowEntity workflowEntity6 = workflowEntity3.businessKey("_|u5O0HN");
      DynamicGraph<Variable> dynamicGraph0 = new DynamicGraph<Variable>();
      List<Variable> list0 = dynamicGraph0.getDependenciesFor((Variable) null);
      WorkflowEntity workflowEntity7 = workflowEntity6.variables(list0);
      workflowEntity7.hashCode();
      workflowEntity7.getParentId();
      workflowEntity0.parentId("_|u5O0HN");
      Integer integer1 = XmlSuite.DEFAULT_THREAD_COUNT;
      WorkflowEntity workflowEntity8 = workflowEntity6.workflowTemplateVersion(integer1);
      workflowEntity3.workflowTemplateId("");
      workflowEntity2.setWorkflowTemplateVersion(integer0);
      workflowEntity0.getWorkflowTemplateId();
      WorkflowEntity workflowEntity9 = workflowEntity8.businessKey("iv");
      workflowEntity2.getParentId();
      Integer integer2 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      workflowEntity9.workflowTemplateVersion(integer2);
      workflowEntity0.setBusinessKey("_|u5O0HN");
      workflowEntity9.getWorkflowTemplateKey();
      workflowEntity9.getArtifacts();
      workflowEntity5.getBusinessKey();
      workflowEntity8.setVariables(list0);
      System.setCurrentTimeMillis((-2647));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      workflowEntity0.hashCode();
      WorkflowEntity workflowEntity1 = workflowEntity0.parentId((String) null);
      workflowEntity1.getWorkflowState();
      UserTask userTask0 = new UserTask();
      workflowEntity0.getRelationshipType();
      workflowEntity0.setWorkflowTemplateId("=\"");
      Integer integer0 = workflowEntity1.getWorkflowTemplateVersion();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      UserTask userTask0 = new UserTask();
      WorkflowEntity workflowEntity1 = workflowEntity0.addUserTasksItem(userTask0);
      WorkflowEntity workflowEntity2 = workflowEntity1.parentId("~F;e*<[O>zYZ#");
      workflowEntity0.addUserTasksItem(userTask0);
      Vector<Variable> vector0 = new Vector<Variable>();
      WorkflowEntity workflowEntity3 = workflowEntity2.variables(vector0);
      Artifact artifact0 = new Artifact();
      WorkflowEntity workflowEntity4 = workflowEntity3.addArtifactsItem(artifact0);
      Vector<UserTask> vector1 = new Vector<UserTask>();
      workflowEntity1.setUserTasks(vector1);
      workflowEntity4.workflowTemplateId("$do^.xY}7*PRI6");
      LocalServerChannel localServerChannel0 = null;
      try {
        localServerChannel0 = new LocalServerChannel();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.channel.DefaultChannelId
         //
         verifyException("io.netty.channel.AbstractChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowTemplateId("`,MtZ#(jO");
      workflowEntity1.toString();
      DynamicGraph<UserTask> dynamicGraph0 = new DynamicGraph<UserTask>();
      IDynamicGraph.Status iDynamicGraph_Status0 = IDynamicGraph.Status.FINISHED;
      Set<UserTask> set0 = dynamicGraph0.getNodesWithStatus(iDynamicGraph_Status0);
      ArrayList<UserTask> arrayList0 = new ArrayList<UserTask>(set0);
      WorkflowEntity workflowEntity2 = workflowEntity1.userTasks(arrayList0);
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      WorkflowEntity workflowEntity3 = workflowEntity2.variables(arrayList1);
      WorkflowAction workflowAction0 = WorkflowAction.DELETE_DRAFT;
      Stack<Artifact> stack0 = new Stack<Artifact>();
      workflowEntity2.setWorkflowState((String) null);
      UserTask userTask0 = new UserTask();
      UserTask userTask1 = userTask0.metadata((UserTaskMetadata) null);
      List<UserTask> list0 = dynamicGraph0.getDependenciesFor(userTask1);
      WorkflowEntity workflowEntity4 = workflowEntity2.artifacts(stack0);
      WorkflowEntity workflowEntity5 = workflowEntity3.lastAction(workflowAction0);
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.CHILD;
      WorkflowEntity workflowEntity6 = workflowEntity5.relationshipType(workflowRelationshipType0);
      workflowEntity1.setWorkflowTemplateKey("");
      WorkflowEntity workflowEntity7 = workflowEntity4.parentId("`,MtZ#(jO");
      WorkflowEntity workflowEntity8 = workflowEntity0.userTasks(list0);
      workflowEntity8.setWorkflowTemplateId("");
      workflowEntity1.addUserTasksItem(userTask0);
      workflowEntity4.setLastAction(workflowAction0);
      workflowEntity2.getBusinessKey();
      workflowEntity6.getLastAction();
      String string0 = workflowEntity7.getBusinessKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      WorkflowEntity workflowEntity1 = workflowEntity0.businessKey(")jwG>NMNRk+GwH");
      WorkflowAction workflowAction0 = WorkflowAction.UPDATE;
      workflowEntity0.setLastAction(workflowAction0);
      WorkflowEntity workflowEntity2 = workflowEntity1.lastAction(workflowAction0);
      WorkflowEntity workflowEntity3 = workflowEntity2.workflowState(")jwG>NMNRk+GwH");
      WorkflowAction workflowAction1 = WorkflowAction.DELETE_DRAFT;
      workflowEntity1.lastAction(workflowAction1);
      WorkflowEntity workflowEntity4 = workflowEntity3.workflowTemplateKey("Bt0Pfp");
      WorkflowEntity workflowEntity5 = workflowEntity3.parentId(")jwG>NMNRk+GwH");
      WorkflowEntity workflowEntity6 = workflowEntity5.workflowTemplateKey("");
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.DEPENDEND;
      workflowEntity0.setRelationshipType(workflowRelationshipType0);
      workflowEntity2.getWorkflowTemplateVersion();
      workflowEntity4.setWorkflowTemplateId("Bt0Pfp");
      workflowEntity4.setWorkflowTemplateKey("");
      workflowEntity6.getRelationshipType();
      workflowEntity0.workflowTemplateKey("");
      Integer integer0 = workflowEntity2.getWorkflowTemplateVersion();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      UserTaskEntity userTaskEntity0 = new UserTaskEntity();
      userTaskEntity0.getVariables();
      WorkflowEntity workflowEntity1 = workflowEntity0.variables((List<Variable>) null);
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowTemplateVersion(integer0);
      WorkflowRelationshipType workflowRelationshipType0 = WorkflowRelationshipType.DEPENDEND;
      WorkflowEntity workflowEntity3 = workflowEntity2.relationshipType(workflowRelationshipType0);
      Artifact artifact0 = new Artifact();
      ArtifactWorkflowData artifactWorkflowData0 = new ArtifactWorkflowData();
      Artifact artifact1 = artifact0.workflowData(artifactWorkflowData0);
      ArtifactMetadata artifactMetadata0 = new ArtifactMetadata();
      Configuration configuration0 = new Configuration();
      XmlSuite xmlSuite0 = new XmlSuite();
      ITestRunnerFactory iTestRunnerFactory0 = mock(ITestRunnerFactory.class, new ViolatedAssumptionAnswer());
      Comparator<ITestNGMethod> comparator0 = (Comparator<ITestNGMethod>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SuiteRunner suiteRunner0 = new SuiteRunner(configuration0, xmlSuite0, "", iTestRunnerFactory0, false, comparator0);
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      HashSet<IInvokedMethodListener> hashSet0 = new HashSet<IInvokedMethodListener>();
      LinkedList<IClassListener> linkedList0 = new LinkedList<IClassListener>();
      Comparator<ITestNGMethod> comparator1 = (Comparator<ITestNGMethod>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TestRunner testRunner0 = new TestRunner(configuration0, suiteRunner0, xmlTest0, (boolean) xmlSuite0.DEFAULT_JUNIT, hashSet0, linkedList0, comparator1);
      Date date0 = testRunner0.getStartDate();
      artifactWorkflowData0.setOldEffectiveEndDate(date0);
      Artifact artifact2 = artifact1.metadata(artifactMetadata0);
      WorkflowEntity workflowEntity4 = workflowEntity3.addArtifactsItem(artifact2);
      ArrayList<Artifact> arrayList0 = new ArrayList<Artifact>();
      WorkflowEntity workflowEntity5 = workflowEntity4.artifacts(arrayList0);
      WorkflowEntity workflowEntity6 = workflowEntity5.addArtifactsItem(artifact0);
      workflowEntity6.setWorkflowState("u1|Nogp:gt8[`Kua");
      artifact0.metadata(artifactMetadata0);
      workflowEntity4.setWorkflowState("\n");
      workflowEntity4.artifacts(arrayList0);
      WorkflowEntity workflowEntity7 = workflowEntity4.workflowTemplateKey("\n");
      assertSame(workflowEntity7, workflowEntity5);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      WorkflowEntity workflowEntity0 = new WorkflowEntity();
      workflowEntity0.setWorkflowTemplateId("}");
      ArrayList<Artifact> arrayList0 = new ArrayList<Artifact>();
      workflowEntity0.setArtifacts(arrayList0);
      workflowEntity0.toString();
      WorkflowEntity workflowEntity1 = workflowEntity0.workflowTemplateId("&|6`9u58uqV6hT(*?|");
      WorkflowEntity workflowEntity2 = workflowEntity1.workflowState("pnz");
      workflowEntity1.workflowState("");
      workflowEntity2.equals(arrayList0);
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      WorkflowEntity workflowEntity3 = workflowEntity0.workflowTemplateVersion(integer0);
      assertNull(workflowEntity3.getBusinessKey());
  }
}
