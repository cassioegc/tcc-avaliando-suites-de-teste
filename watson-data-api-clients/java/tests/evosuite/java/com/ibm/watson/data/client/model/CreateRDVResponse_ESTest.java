/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 01:03:04 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.CreateRDVResponse;
import com.ibm.watson.data.client.model.RDVGlossaryResource;
import com.ibm.watson.data.client.model.ResponseReferenceDataValueEntity;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CreateRDVResponse_ESTest extends CreateRDVResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      LinkedList<RDVGlossaryResource> linkedList0 = new LinkedList<RDVGlossaryResource>();
      CreateRDVResponse createRDVResponse1 = createRDVResponse0.resources(linkedList0);
      List<RDVGlossaryResource> list0 = createRDVResponse1.getResources();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      createRDVResponse0.addResourcesItem(rDVGlossaryResource0);
      List<RDVGlossaryResource> list0 = createRDVResponse0.getResources();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      LinkedList<RDVGlossaryResource> linkedList0 = new LinkedList<RDVGlossaryResource>();
      List<RDVGlossaryResource> list0 = linkedList0.subList(0, 0);
      createRDVResponse0.setResources(linkedList0);
      CreateRDVResponse createRDVResponse1 = createRDVResponse0.addResourcesItem(rDVGlossaryResource0);
      createRDVResponse1.setResources(list0);
      // Undeclared exception!
      try { 
        createRDVResponse0.hashCode();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      ResponseReferenceDataValueEntity responseReferenceDataValueEntity0 = new ResponseReferenceDataValueEntity();
      RDVGlossaryResource rDVGlossaryResource1 = rDVGlossaryResource0.addRdsValuesItem(responseReferenceDataValueEntity0);
      responseReferenceDataValueEntity0.value(rDVGlossaryResource0);
      CreateRDVResponse createRDVResponse1 = createRDVResponse0.addResourcesItem(rDVGlossaryResource1);
      // Undeclared exception!
      try { 
        createRDVResponse1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      createRDVResponse0.addResourcesItem(rDVGlossaryResource0);
      String string0 = createRDVResponse0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      CreateRDVResponse createRDVResponse1 = new CreateRDVResponse();
      boolean boolean0 = createRDVResponse0.equals(createRDVResponse1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      boolean boolean0 = createRDVResponse0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      boolean boolean0 = createRDVResponse0.equals(createRDVResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      RDVGlossaryResource rDVGlossaryResource0 = new RDVGlossaryResource();
      boolean boolean0 = createRDVResponse0.equals(rDVGlossaryResource0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      String string0 = createRDVResponse0.toString();
      assertEquals("class CreateRDVResponse {\n    resources: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      createRDVResponse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CreateRDVResponse createRDVResponse0 = new CreateRDVResponse();
      List<RDVGlossaryResource> list0 = createRDVResponse0.getResources();
      assertNull(list0);
  }
}
