/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 19:35:51 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.DataProfileExecution;
import com.ibm.watson.data.client.model.DataProfileOptions;
import com.ibm.watson.data.client.model.EmbeddedDataProfile;
import io.netty.channel.epoll.EpollDatagramChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedDataProfile_ESTest extends EmbeddedDataProfile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      DataProfileOptions dataProfileOptions0 = new DataProfileOptions();
      embeddedDataProfile0.setOptions(dataProfileOptions0);
      DataProfileOptions dataProfileOptions1 = embeddedDataProfile0.getOptions();
      assertNull(dataProfileOptions1.getMaxRowCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      DataProfileExecution dataProfileExecution0 = new DataProfileExecution();
      embeddedDataProfile0.setExecution(dataProfileExecution0);
      DataProfileExecution dataProfileExecution1 = embeddedDataProfile0.getExecution();
      assertNull(dataProfileExecution1.getDataflowRunId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      Stack<Object> stack0 = new Stack<Object>();
      embeddedDataProfile0.setColumns(stack0);
      List<Object> list0 = embeddedDataProfile0.getColumns();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) embeddedDataProfile0);
      embeddedDataProfile0.setColumns(vector0);
      List<Object> list0 = embeddedDataProfile0.getColumns();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      embeddedDataProfile0.setAttachmentId("I");
      String string0 = embeddedDataProfile0.getAttachmentId();
      assertEquals("I", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      embeddedDataProfile0.setAttachmentId("");
      String string0 = embeddedDataProfile0.getAttachmentId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      embeddedDataProfile0.setAttachmentId("I");
      String string0 = embeddedDataProfile0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      embeddedDataProfile0.setAttachmentId("");
      Random.setNextRandom((-1574));
      EmbeddedDataProfile embeddedDataProfile1 = new EmbeddedDataProfile();
      embeddedDataProfile1.setExecution((DataProfileExecution) null);
      boolean boolean0 = embeddedDataProfile0.equals(embeddedDataProfile1);
      assertFalse(boolean0);
      
      boolean boolean1 = embeddedDataProfile0.equals("");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      EmbeddedDataProfile embeddedDataProfile1 = new EmbeddedDataProfile();
      assertTrue(embeddedDataProfile1.equals((Object)embeddedDataProfile0));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      embeddedDataProfile1.setColumns(arrayList0);
      boolean boolean0 = embeddedDataProfile0.equals(embeddedDataProfile1);
      assertFalse(embeddedDataProfile1.equals((Object)embeddedDataProfile0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      DataProfileExecution dataProfileExecution0 = new DataProfileExecution();
      embeddedDataProfile0.setExecution(dataProfileExecution0);
      EmbeddedDataProfile embeddedDataProfile1 = new EmbeddedDataProfile();
      boolean boolean0 = embeddedDataProfile0.equals(embeddedDataProfile1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      embeddedDataProfile0.setAttachmentId("I");
      DataProfileOptions dataProfileOptions0 = new DataProfileOptions();
      dataProfileOptions0.toString();
      embeddedDataProfile0.setOptions(dataProfileOptions0);
      EmbeddedDataProfile embeddedDataProfile1 = new EmbeddedDataProfile();
      boolean boolean0 = embeddedDataProfile0.equals(embeddedDataProfile1);
      assertFalse(boolean0);
      
      embeddedDataProfile0.setOptions(dataProfileOptions0);
      assertFalse(embeddedDataProfile0.equals((Object)embeddedDataProfile1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      EmbeddedDataProfile embeddedDataProfile1 = new EmbeddedDataProfile();
      embeddedDataProfile0.equals(embeddedDataProfile1);
      EpollDatagramChannel epollDatagramChannel0 = null;
      try {
        epollDatagramChannel0 = new EpollDatagramChannel();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.channel.epoll.LinuxSocket
         //
         verifyException("io.netty.channel.epoll.EpollDatagramChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",eA_#wFxTyeC$^Z");
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      System.setCurrentTimeMillis((-3501L));
      embeddedDataProfile0.equals((Object) null);
      embeddedDataProfile0.setOptions((DataProfileOptions) null);
      assertNull(embeddedDataProfile0.getAttachmentId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      embeddedDataProfile0.setColumns((List<Object>) null);
      embeddedDataProfile0.hashCode();
      EpollDatagramChannel epollDatagramChannel0 = null;
      try {
        epollDatagramChannel0 = new EpollDatagramChannel();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.channel.epoll.LinuxSocket
         //
         verifyException("io.netty.channel.epoll.EpollDatagramChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      embeddedDataProfile0.getColumns();
      embeddedDataProfile0.getAttachmentId();
      EpollDatagramChannel epollDatagramChannel0 = null;
      try {
        epollDatagramChannel0 = new EpollDatagramChannel();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.channel.epoll.LinuxSocket
         //
         verifyException("io.netty.channel.epoll.EpollDatagramChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      embeddedDataProfile0.toString();
      embeddedDataProfile0.getOptions();
      EpollDatagramChannel epollDatagramChannel0 = null;
      try {
        epollDatagramChannel0 = new EpollDatagramChannel();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.channel.epoll.LinuxSocket
         //
         verifyException("io.netty.channel.epoll.EpollDatagramChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      embeddedDataProfile0.equals(embeddedDataProfile0);
      embeddedDataProfile0.setColumns((List<Object>) null);
      EpollDatagramChannel epollDatagramChannel0 = null;
      try {
        epollDatagramChannel0 = new EpollDatagramChannel();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.channel.epoll.LinuxSocket
         //
         verifyException("io.netty.channel.epoll.EpollDatagramChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmbeddedDataProfile embeddedDataProfile0 = new EmbeddedDataProfile();
      embeddedDataProfile0.getExecution();
      embeddedDataProfile0.toString();
      EpollDatagramChannel epollDatagramChannel0 = null;
      try {
        epollDatagramChannel0 = new EpollDatagramChannel();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.channel.epoll.LinuxSocket
         //
         verifyException("io.netty.channel.epoll.EpollDatagramChannel", e);
      }
  }
}
