/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 14:39:39 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.DataConnectionReference;
import com.ibm.watson.data.client.model.DataSchema;
import com.ibm.watson.data.client.model.DataSchemaField;
import com.ibm.watson.data.client.model.FeatureImportance;
import com.ibm.watson.data.client.model.FunctionEntitySchemas;
import com.ibm.watson.data.client.model.Metric;
import com.ibm.watson.data.client.model.MetricsContext;
import com.ibm.watson.data.client.model.MlFederatedMetric;
import com.ibm.watson.data.client.model.ModelDefinitionId;
import com.ibm.watson.data.client.model.ModelEntity;
import com.ibm.watson.data.client.model.ModelEntitySize;
import com.ibm.watson.data.client.model.Rel;
import com.ibm.watson.data.client.model.RemoteTrainingSystemMetric;
import com.ibm.watson.data.client.model.SoftwareSpecRel;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelOutboundHandlerAdapter;
import io.netty.channel.embedded.EmbeddedChannel;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.testng.internal.DynamicGraph;
import org.testng.internal.TestNGMethod;
import org.testng.internal.annotations.ConfigurationAnnotation;
import org.testng.internal.annotations.DefaultAnnotationTransformer;
import org.testng.internal.annotations.JDK15AnnotationFinder;
import org.testng.xml.XmlClass;
import org.testng.xml.XmlDependencies;
import org.testng.xml.XmlPackage;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModelEntity_ESTest extends ModelEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      assertNull(modelEntity0.getType());
      
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      modelEntity0.userDefinedObjects(hashMap0);
      LinkedList<XmlPackage> linkedList0 = new LinkedList<XmlPackage>();
      xmlSuite1.setPackages(linkedList0);
      xmlSuite0.setGroupByInstances(true);
      List<XmlPackage> list0 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list0);
      Vector<Metric> vector0 = new Vector<Metric>();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity1 = new ModelEntity();
      modelEntity0.equals(modelEntity1);
      modelEntity0.getUserDefinedObjects();
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      xmlTest0.getLocalParameters();
      XmlSuite xmlSuite1 = new XmlSuite();
      List<XmlPackage> list0 = xmlSuite1.getPackages();
      xmlSuite1.setPackages(list0);
      List<XmlPackage> list1 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list1);
      ModelEntity modelEntity3 = modelEntity1.trainingDataReferences((List<DataConnectionReference>) null);
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      Stack<DataSchema> stack0 = new Stack<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.input(stack0);
      DataSchema dataSchema0 = new DataSchema();
      Vector<DataSchemaField> vector0 = new Vector<DataSchemaField>();
      DataSchema dataSchema1 = dataSchema0.fields(vector0);
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.addOutputItem(dataSchema1);
      FunctionEntitySchemas functionEntitySchemas3 = functionEntitySchemas2.addInputItem(dataSchema1);
      modelEntity3.setSchemas(functionEntitySchemas3);
      modelEntity3.getHyperParameters();
      modelEntity2.getType();
      Vector<Metric> vector1 = new Stack<Metric>();
      ModelEntity modelEntity4 = modelEntity1.metrics(vector1);
      modelEntity2.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity5 = new ModelEntity();
      modelEntity4.equals(modelEntity5);
      modelEntity2.schemas((FunctionEntitySchemas) null);
      modelEntity2.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity4.getHyperParameters();
      LinkedList<Metric> linkedList0 = new LinkedList<Metric>();
      Random.setNextRandom(1373);
      modelEntity1.labelColumn("Rs@T*A*MOyDNengrb`=");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      LinkedList<XmlPackage> linkedList0 = new LinkedList<XmlPackage>();
      xmlSuite1.setPackages(linkedList0);
      List<XmlPackage> list0 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list0);
      Vector<Metric> vector0 = new Vector<Metric>();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity1 = new ModelEntity();
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      Stack<DataSchema> stack0 = new Stack<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.input(stack0);
      modelEntity1.setSchemas(functionEntitySchemas1);
      modelEntity0.equals(modelEntity1);
      modelEntity0.getUserDefinedObjects();
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      ModelEntity modelEntity2 = modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity2.toString();
      modelEntity0.domain("class ModelEntity {\n    type: null\n    softwareSpec: null\n    pipeline: null\n    modelDefinition: null\n    hyperParameters: null\n    domain: null\n    trainingDataReferences: null\n    schemas: null\n    labelColumn: null\n    transformedLabelColumn: java.lang.String@0000000008\n    size: null\n    metrics: null\n    custom: null\n    userDefinedObjects: null\n}");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      xmlTest0.getLocalParameters();
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      List<XmlPackage> list0 = xmlSuite1.getPackages();
      xmlSuite1.setPackages(list0);
      List<XmlPackage> list1 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list1);
      ModelEntity modelEntity4 = modelEntity1.trainingDataReferences((List<DataConnectionReference>) null);
      modelEntity4.setLabelColumn((String) null);
      modelEntity4.getHyperParameters();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      ModelEntity modelEntity5 = modelEntity3.metrics(vector0);
      modelEntity2.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity6 = new ModelEntity();
      modelEntity6.hyperParameters(modelEntity4);
      modelEntity5.equals(modelEntity6);
      modelEntity2.schemas((FunctionEntitySchemas) null);
      modelEntity3.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity5.getHyperParameters();
      LinkedList<Metric> linkedList0 = new LinkedList<Metric>();
      Random.setNextRandom(1373);
      modelEntity1.labelColumn("Rs@T*A*MOyDNengrb`=");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = new XmlSuite();
      Object object0 = xmlSuite1.clone();
      LinkedList<XmlPackage> linkedList0 = new LinkedList<XmlPackage>();
      xmlSuite1.setPackages(linkedList0);
      List<XmlPackage> list0 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list0);
      ModelEntity modelEntity4 = modelEntity1.trainingDataReferences((List<DataConnectionReference>) null);
      modelEntity4.hyperParameters(object0);
      modelEntity4.getHyperParameters();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      ModelEntity modelEntity5 = modelEntity3.metrics(vector0);
      modelEntity2.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity6 = new ModelEntity();
      modelEntity5.equals(modelEntity6);
      modelEntity2.schemas((FunctionEntitySchemas) null);
      modelEntity3.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.getUserDefinedObjects();
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity5.getHyperParameters();
      modelEntity3.getMetrics();
      Random.setNextRandom(1373);
      modelEntity1.labelColumn("Rs@T*A*MOyDNengrb`=");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      xmlTest0.getLocalParameters();
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      List<XmlPackage> list0 = xmlSuite1.getPackages();
      xmlSuite1.setPackages(list0);
      List<XmlPackage> list1 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list1);
      ModelEntity modelEntity4 = modelEntity3.domain("SWITCHING_PROTOCOLS");
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      modelEntity4.softwareSpec(softwareSpecRel0);
      modelEntity4.getHyperParameters();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      ModelEntity modelEntity5 = modelEntity3.metrics(vector0);
      modelEntity2.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity6 = new ModelEntity();
      modelEntity5.equals(modelEntity6);
      modelEntity2.schemas((FunctionEntitySchemas) null);
      modelEntity3.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      ModelEntity modelEntity7 = modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity7.schemas((FunctionEntitySchemas) null);
      modelEntity5.getHyperParameters();
      LinkedList<Metric> linkedList0 = new LinkedList<Metric>();
      Random.setNextRandom(1373);
      modelEntity1.labelColumn("Rs@T*A*MOyDNengrb`=");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      LinkedList<XmlPackage> linkedList0 = new LinkedList<XmlPackage>();
      xmlSuite1.setPackages(linkedList0);
      List<XmlPackage> list0 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list0);
      Vector<Metric> vector0 = new Vector<Metric>();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity1 = new ModelEntity();
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      SoftwareSpecRel softwareSpecRel1 = softwareSpecRel0.name("t K+0M(t54");
      modelEntity1.setSoftwareSpec(softwareSpecRel1);
      modelEntity0.equals(modelEntity1);
      modelEntity0.getUserDefinedObjects();
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      xmlTest0.getLocalParameters();
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      List<XmlPackage> list0 = xmlSuite1.getPackages();
      xmlSuite1.setPackages(list0);
      List<XmlPackage> list1 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list1);
      ModelEntity modelEntity3 = modelEntity2.transformedLabelColumn("SWITCHING_PROTOCOLS");
      modelEntity3.getHyperParameters();
      modelEntity0.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      ModelEntity modelEntity4 = modelEntity2.metrics(vector0);
      modelEntity2.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity5 = new ModelEntity();
      modelEntity4.equals(modelEntity5);
      modelEntity2.schemas((FunctionEntitySchemas) null);
      modelEntity1.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.getUserDefinedObjects();
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity4.getHyperParameters();
      modelEntity0.getMetrics();
      Random.setNextRandom(1373);
      modelEntity1.labelColumn("Rs@T*A*MOyDNengrb`=");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      xmlTest0.getLocalParameters();
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      List<XmlPackage> list0 = xmlSuite1.getPackages();
      xmlSuite1.setPackages(list0);
      List<XmlPackage> list1 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list1);
      ModelEntity modelEntity4 = modelEntity1.trainingDataReferences((List<DataConnectionReference>) null);
      modelEntity4.getHyperParameters();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      ModelEntity modelEntity5 = modelEntity3.metrics(vector0);
      modelEntity2.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity6 = new ModelEntity();
      modelEntity5.equals(modelEntity6);
      modelEntity2.schemas((FunctionEntitySchemas) null);
      modelEntity3.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.getUserDefinedObjects();
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity5.getHyperParameters();
      modelEntity3.getMetrics();
      Random.setNextRandom(1373);
      modelEntity1.labelColumn("Rs@T*A*MOyDNengrb`=");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.type("Rs@T*A*MOyDNengrb`=");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      xmlTest0.getLocalParameters();
      ModelEntity modelEntity4 = modelEntity1.addMetricsItem(metric0);
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      List<XmlPackage> list0 = xmlSuite1.getPackages();
      xmlSuite1.setPackages(list0);
      List<XmlPackage> list1 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list1);
      ModelEntity modelEntity5 = modelEntity4.trainingDataReferences((List<DataConnectionReference>) null);
      modelEntity5.getHyperParameters();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      modelEntity0.addMetricsItem(metric0);
      modelEntity4.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity6 = modelEntity3.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntity modelEntity7 = new ModelEntity();
      modelEntity6.equals(modelEntity7);
      modelEntity6.schemas((FunctionEntitySchemas) null);
      modelEntity4.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.getUserDefinedObjects();
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity6.getHyperParameters();
      modelEntity3.getMetrics();
      Random.setNextRandom(1373);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      modelEntity0.type("Rs@T*A*MOyDNengrb`=");
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      ModelEntity modelEntity4 = modelEntity3.domain("F&NiMZ$vuXK");
      XmlSuite xmlSuite0 = new XmlSuite();
      xmlSuite0.clone();
      xmlSuite0.getXmlPackages();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      modelEntity3.metrics(vector0);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity5 = modelEntity3.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntity modelEntity6 = new ModelEntity();
      modelEntity5.equals(modelEntity6);
      modelEntity5.schemas((FunctionEntitySchemas) null);
      modelEntity4.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity5.getHyperParameters();
      modelEntity3.getMetrics();
      Random.setNextRandom(1361);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      Map<String, String> map0 = xmlTest0.getLocalParameters();
      ModelEntity modelEntity4 = modelEntity3.userDefinedObjects(map0);
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      List<XmlPackage> list0 = xmlSuite1.getPackages();
      xmlSuite1.setPackages(list0);
      List<XmlPackage> list1 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list1);
      ModelEntity modelEntity5 = modelEntity4.trainingDataReferences((List<DataConnectionReference>) null);
      modelEntity5.getHyperParameters();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      modelEntity3.metrics(vector0);
      modelEntity4.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity6 = modelEntity3.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntity modelEntity7 = new ModelEntity();
      modelEntity6.equals(modelEntity7);
      modelEntity6.schemas((FunctionEntitySchemas) null);
      modelEntity4.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.getUserDefinedObjects();
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity6.getHyperParameters();
      modelEntity3.getMetrics();
      Random.setNextRandom(1373);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      ModelEntity modelEntity4 = modelEntity3.domain("F&NiMZ$vuXK");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      Map<String, String> map0 = xmlTest0.getLocalParameters();
      ModelEntity modelEntity5 = modelEntity3.userDefinedObjects(map0);
      XmlSuite xmlSuite1 = new XmlSuite();
      Rel rel0 = new Rel();
      Rel rel1 = rel0.id("F&NiMZ$vuXK");
      Rel rel2 = rel1.rev("&/1;");
      modelEntity0.pipeline(rel2);
      xmlSuite1.clone();
      List<XmlPackage> list0 = xmlSuite1.getPackages();
      xmlSuite1.setPackages(list0);
      xmlSuite0.setXmlPackages(list0);
      modelEntity5.trainingDataReferences((List<DataConnectionReference>) null);
      modelEntity1.getHyperParameters();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      modelEntity5.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity6 = modelEntity3.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntity modelEntity7 = new ModelEntity();
      modelEntity6.equals(modelEntity7);
      modelEntity6.schemas((FunctionEntitySchemas) null);
      modelEntity5.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.getUserDefinedObjects();
      modelEntity4.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity6.getHyperParameters();
      modelEntity3.getMetrics();
      Random.setNextRandom(1373);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      ModelEntity modelEntity4 = modelEntity3.domain("F&NiMZ$vuXK");
      XmlSuite xmlSuite0 = new XmlSuite();
      xmlSuite0.clone();
      List<XmlPackage> list0 = xmlSuite0.getPackages();
      xmlSuite0.setPackages(list0);
      xmlSuite0.setXmlPackages(list0);
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      modelEntity3.metrics(vector0);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity5 = modelEntity3.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntity modelEntity6 = new ModelEntity();
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      modelEntity6.setPipeline(softwareSpecRel0);
      modelEntity5.equals(modelEntity6);
      modelEntity5.schemas((FunctionEntitySchemas) null);
      modelEntity0.getUserDefinedObjects();
      modelEntity4.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity5.getHyperParameters();
      modelEntity3.getMetrics();
      Random.setNextRandom(1361);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ModelEntity modelEntity1 = modelEntity0.userDefinedObjects(map0);
      modelEntity1.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.setDomain((String) null);
      ModelEntity modelEntity2 = modelEntity0.addTrainingDataReferencesItem((DataConnectionReference) null);
      // Undeclared exception!
      try { 
        modelEntity2.putUserDefinedObjectsItem((String) null, (String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      modelEntity0.getTrainingDataReferences();
      ModelEntity modelEntity1 = modelEntity0.trainingDataReferences((List<DataConnectionReference>) null);
      ModelEntity modelEntity2 = modelEntity1.pipeline((Rel) null);
      ModelEntity modelEntity3 = modelEntity2.putCustom("", "");
      Metric metric0 = new Metric();
      HashMap<String, MlFederatedMetric> hashMap0 = new HashMap<String, MlFederatedMetric>();
      MetricsContext metricsContext0 = new MetricsContext();
      MetricsContext metricsContext1 = metricsContext0.addEstimatorsItem("");
      MetricsContext metricsContext2 = metricsContext1.phase("");
      SynchronousQueue<FeatureImportance> synchronousQueue0 = new SynchronousQueue<FeatureImportance>();
      LinkedList<FeatureImportance> linkedList0 = new LinkedList<FeatureImportance>(synchronousQueue0);
      MetricsContext metricsContext3 = metricsContext2.featuresImportance(linkedList0);
      MetricsContext metricsContext4 = metricsContext3.schema("");
      metric0.context(metricsContext4);
      Metric metric1 = metric0.mlFederatedMetrics(hashMap0);
      Metric metric2 = metric1.context((MetricsContext) null);
      ModelEntity modelEntity4 = modelEntity3.addMetricsItem(metric2);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      ModelEntitySize modelEntitySize1 = modelEntitySize0.content(bigDecimal0);
      FeatureImportance featureImportance0 = new FeatureImportance();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      delayQueue0.poll(0L, timeUnit0);
      FeatureImportance featureImportance1 = featureImportance0.features((Object) null);
      FeatureImportance featureImportance2 = featureImportance1.stage("");
      modelEntitySize1.equals(featureImportance2);
      modelEntity1.size(modelEntitySize1);
      hashMap0.keySet();
      ModelEntity modelEntity5 = modelEntity4.custom(hashMap1);
      modelEntity5.custom(hashMap1);
      modelEntity3.getUserDefinedObjects();
      modelEntity4.getCustom();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      ModelEntity modelEntity4 = modelEntity3.domain("F&NiMZ$vuXK");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      Map<String, String> map0 = xmlTest0.getLocalParameters();
      ModelEntity modelEntity5 = modelEntity3.userDefinedObjects(map0);
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      List<XmlPackage> list0 = xmlSuite1.getPackages();
      xmlSuite1.setPackages(list0);
      List<XmlPackage> list1 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list1);
      ModelEntity modelEntity6 = modelEntity5.trainingDataReferences((List<DataConnectionReference>) null);
      modelEntity6.getHyperParameters();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      modelEntity3.metrics(vector0);
      modelEntity5.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity7 = modelEntity3.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntity modelEntity8 = new ModelEntity();
      modelEntity7.equals(modelEntity8);
      modelEntity7.schemas((FunctionEntitySchemas) null);
      modelEntity5.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.getUserDefinedObjects();
      modelEntity4.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity7.getHyperParameters();
      modelEntity3.getMetrics();
      Random.setNextRandom(1364);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.transformedLabelColumn("xb,T&.7kD");
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      ModelEntity modelEntity2 = modelEntity1.size(modelEntitySize0);
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      ModelEntity modelEntity3 = modelEntity2.putCustom("<e464Tl 1", channelOutboundHandlerAdapter0);
      ModelEntity modelEntity4 = modelEntity3.labelColumn("pt3Uuv6");
      modelEntity4.toIndentedString(modelEntity2);
      ModelEntity modelEntity5 = modelEntity4.type("    transformedLabelColumn: ");
      modelEntity5.getTransformedLabelColumn();
      modelEntity5.getCustom();
      ConfigurationAnnotation configurationAnnotation0 = new ConfigurationAnnotation();
      configurationAnnotation0.getMethod();
      DefaultAnnotationTransformer defaultAnnotationTransformer0 = new DefaultAnnotationTransformer();
      JDK15AnnotationFinder jDK15AnnotationFinder0 = new JDK15AnnotationFinder(defaultAnnotationTransformer0);
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      TestNGMethod testNGMethod0 = null;
      try {
        testNGMethod0 = new TestNGMethod((Method) null, jDK15AnnotationFinder0, xmlTest0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.testng.internal.TestNGMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Vector<Metric> vector0 = new Vector<Metric>();
      ModelEntity modelEntity1 = modelEntity0.metrics(vector0);
      ModelEntity modelEntity2 = modelEntity1.putCustom("", "");
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      modelEntity0.labelColumn("");
      SoftwareSpecRel softwareSpecRel1 = softwareSpecRel0.name("");
      ModelEntity modelEntity3 = modelEntity2.pipeline(softwareSpecRel1);
      ModelEntity modelEntity4 = modelEntity3.hyperParameters("");
      modelEntity4.type((String) null);
      StringBuffer stringBuffer0 = new StringBuffer("    trainingDataReferences: ");
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = '-';
      charArray0[2] = 'r';
      charArray0[3] = '<';
      charArray0[4] = 'z';
      charArray0[5] = '&';
      charArray0[6] = '8';
      charArray0[7] = 'i';
      modelEntity4.getLabelColumn();
      // Undeclared exception!
      try { 
        stringBuilder0.append(charArray0, 6311, 6311);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.hyperParameters(modelEntity0);
      ModelEntity modelEntity3 = modelEntity2.labelColumn("");
      modelEntity1.setTransformedLabelColumn("null");
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      modelEntity2.size(modelEntitySize0);
      ModelEntity modelEntity4 = modelEntity1.transformedLabelColumn((String) null);
      ModelEntity modelEntity5 = modelEntity3.putUserDefinedObjectsItem((String) null, "9NH");
      ModelEntity modelEntity6 = modelEntity5.domain("");
      modelEntity4.addMetricsItem(metric0);
      modelEntity6.getTransformedLabelColumn();
      modelEntity4.getCustom();
      modelEntity3.getDomain();
      XmlDependencies xmlDependencies0 = new XmlDependencies();
      Map<String, String> map0 = xmlDependencies0.getDependencies();
      ModelEntity modelEntity7 = modelEntity0.userDefinedObjects(map0);
      Stack<Metric> stack0 = new Stack<Metric>();
      ModelEntity modelEntity8 = modelEntity7.metrics(stack0);
      ArrayList<DataConnectionReference> arrayList0 = new ArrayList<DataConnectionReference>();
      ModelEntity modelEntity9 = modelEntity8.trainingDataReferences(arrayList0);
      modelEntity7.getSize();
      modelEntity9.getSchemas();
      modelEntity9.getCustom();
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      SoftwareSpecRel softwareSpecRel1 = softwareSpecRel0.name("!1YT3HZ1F;4oTv[PJ%");
      modelEntity7.pipeline(softwareSpecRel1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelEntity modelEntity1 = modelEntity0.modelDefinition(modelDefinitionId0);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity2 = modelEntity1.pipeline(softwareSpecRel0);
      modelDefinitionId0.equals(modelEntity0);
      ModelEntity modelEntity3 = modelEntity2.labelColumn("");
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity4 = modelEntity3.hyperParameters(dataConnectionReference0);
      ModelEntity modelEntity5 = modelEntity4.addTrainingDataReferencesItem(dataConnectionReference0);
      modelEntity5.getHyperParameters();
      modelEntity0.getTransformedLabelColumn();
      modelEntity2.modelDefinition(modelDefinitionId0);
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[1];
      Class<DataConnectionReference> class0 = DataConnectionReference.class;
      LogLevel logLevel0 = LogLevel.DEBUG;
      LoggingHandler loggingHandler0 = new LoggingHandler(class0, logLevel0);
      channelHandlerArray0[0] = (ChannelHandler) loggingHandler0;
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel(true, channelHandlerArray0);
      EmbeddedChannel embeddedChannel1 = embeddedChannel0.flushInbound();
      modelEntity5.toIndentedString(embeddedChannel1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.type("");
      ModelEntity modelEntity2 = modelEntity1.transformedLabelColumn("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.clear();
      modelEntity2.hashCode();
      hashMap0.put("", "");
      modelEntity2.userDefinedObjects(hashMap0);
      ModelEntity modelEntity3 = modelEntity2.domain("");
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      modelEntity3.setModelDefinition(modelDefinitionId0);
      modelEntity3.labelColumn("org.testng.TestRunner$ConfigurationListener");
      modelEntity3.setSchemas(functionEntitySchemas0);
      hashMap1.put("jz7--s3tQc$CE{6uv", (Object) null);
      modelEntity3.setCustom(hashMap1);
      modelEntity0.setMetrics((List<Metric>) null);
      modelEntity0.setLabelColumn("9i0@mj#A{eb8&|\"<%");
      ModelEntity modelEntity4 = modelEntity2.putUserDefinedObjectsItem("", "");
      modelEntity4.getUserDefinedObjects();
      modelEntity2.equals(modelEntity0);
      modelEntity1.getTransformedLabelColumn();
      modelEntity2.toIndentedString("jz7--s3tQc$CE{6uv");
      modelEntity1.getModelDefinition();
      modelEntity4.setTransformedLabelColumn("");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity1 = modelEntity0.addTrainingDataReferencesItem(dataConnectionReference0);
      Object object0 = new Object();
      ModelEntity modelEntity2 = modelEntity1.hyperParameters(object0);
      Metric metric0 = new Metric();
      Metric metric1 = metric0.mlFederatedMetrics((Map<String, MlFederatedMetric>) null);
      ModelEntity modelEntity3 = modelEntity2.addMetricsItem(metric1);
      ModelEntity modelEntity4 = modelEntity3.putCustom("b:N;;j4Q(C=`.qM6g", "b:N;;j4Q(C=`.qM6g");
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity5 = modelEntity4.softwareSpec(softwareSpecRel0);
      List<DataConnectionReference> list0 = modelEntity5.getTrainingDataReferences();
      modelEntity5.setTrainingDataReferences(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.modelDefinition((ModelDefinitionId) null);
      ModelEntity modelEntity3 = modelEntity2.addTrainingDataReferencesItem((DataConnectionReference) null);
      ModelEntity modelEntity4 = modelEntity3.domain("    notebookLocation: ");
      ModelEntity modelEntity5 = modelEntity4.labelColumn("    notebookLocation: ");
      modelEntity0.setTransformedLabelColumn("    notebookLocation: ");
      ArrayList<DataConnectionReference> arrayList0 = new ArrayList<DataConnectionReference>(0);
      arrayList0.spliterator();
      modelEntity2.trainingDataReferences(arrayList0);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      Rel rel0 = softwareSpecRel0.rev("    notebookLocation: ");
      Rel rel1 = softwareSpecRel0.id("    notebookLocation: ");
      modelEntity5.setPipeline(rel1);
      ArrayList<Metric> arrayList1 = new ArrayList<Metric>();
      modelEntity1.setMetrics(arrayList1);
      modelEntity4.getSize();
      modelEntity5.getHyperParameters();
      modelEntity1.getDomain();
      modelEntity0.setTrainingDataReferences(arrayList0);
      ModelEntity modelEntity6 = modelEntity1.pipeline(softwareSpecRel0);
      modelEntity6.custom((Map<String, Object>) null);
      modelEntity3.setModelDefinition((ModelDefinitionId) null);
      modelEntity4.pipeline(rel0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      String string0 = "";
      ModelEntity modelEntity2 = modelEntity1.putCustom("", modelEntity0);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      modelEntity1.setPipeline(softwareSpecRel0);
      ArrayList<Metric> arrayList0 = new ArrayList<Metric>();
      ModelEntity modelEntity3 = modelEntity2.metrics(arrayList0);
      modelEntity3.setUserDefinedObjects((Map<String, String>) null);
      ModelEntity modelEntity4 = modelEntity3.transformedLabelColumn("");
      Map<String, Object> map0 = modelEntity4.getCustom();
      ModelEntity modelEntity5 = modelEntity4.custom(map0);
      modelEntity5.getCustom();
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      char char0 = 'X';
      modelEntity4.hashCode();
      charArray0[1] = char0;
      char char1 = '{';
      charArray0[2] = char1;
      BigDecimal bigDecimal0 = new BigDecimal(charArray0);
      modelEntitySize0.inMemory(bigDecimal0);
      modelEntity4.size(modelEntitySize0);
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      String string1 = "";
      ModelDefinitionId modelDefinitionId1 = modelDefinitionId0.id(string1);
      modelEntity4.setModelDefinition(modelDefinitionId1);
      modelEntity3.type(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelEntity modelEntity1 = modelEntity0.modelDefinition(modelDefinitionId0);
      Object object0 = new Object();
      ModelEntity modelEntity2 = modelEntity1.putCustom("#sVbw=p0Fa", object0);
      ModelEntity modelEntity3 = modelEntity2.metrics((List<Metric>) null);
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addInputItem(dataSchema0);
      functionEntitySchemas1.output((List<DataSchema>) null);
      Vector<DataSchema> vector0 = new Vector<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.output(vector0);
      ModelEntity modelEntity4 = modelEntity3.domain("#sVbw=p0Fa");
      ModelEntity modelEntity5 = modelEntity3.schemas(functionEntitySchemas2);
      Metric metric0 = new Metric();
      HashMap<String, MlFederatedMetric> hashMap0 = new HashMap<String, MlFederatedMetric>();
      Metric metric1 = metric0.mlFederatedMetrics(hashMap0);
      MetricsContext metricsContext0 = new MetricsContext();
      Metric metric2 = metric1.context(metricsContext0);
      XmlSuite xmlSuite0 = new XmlSuite();
      Integer integer0 = xmlSuite0.getVerbose();
      Metric metric3 = metric2.iteration(integer0);
      ModelEntity modelEntity6 = modelEntity5.addMetricsItem(metric3);
      modelEntity6.equals((Object) null);
      modelEntity1.setSchemas(functionEntitySchemas1);
      modelEntity1.getUserDefinedObjects();
      modelEntity6.transformedLabelColumn("");
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      Rel rel0 = softwareSpecRel0.rev("");
      Rel rel1 = rel0.id("#sVbw=p0Fa");
      modelEntity4.setPipeline(rel1);
      Object object1 = modelEntity0.getHyperParameters();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.putUserDefinedObjectsItem((String) null, (String) null);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity2 = modelEntity1.softwareSpec(softwareSpecRel0);
      XmlSuite xmlSuite0 = new XmlSuite();
      Map<String, String> map0 = xmlSuite0.getParameters();
      ModelEntity modelEntity3 = modelEntity2.userDefinedObjects(map0);
      ModelEntity modelEntity4 = modelEntity3.putCustom((String) null, xmlSuite0);
      Metric metric0 = new Metric();
      Metric metric1 = metric0.iteration(xmlSuite0.DEFAULT_THREAD_COUNT);
      ModelEntity modelEntity5 = modelEntity4.addMetricsItem(metric1);
      List<Metric> list0 = modelEntity5.getMetrics();
      assertTrue(list0.contains(metric1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      modelEntity0.getCustom();
      ModelEntity modelEntity1 = modelEntity0.custom((Map<String, Object>) null);
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelEntity modelEntity2 = modelEntity1.modelDefinition(modelDefinitionId0);
      Metric metric0 = new Metric();
      ModelEntity modelEntity3 = modelEntity2.addMetricsItem(metric0);
      ModelEntity modelEntity4 = modelEntity3.putCustom("", (Object) null);
      ModelEntity modelEntity5 = modelEntity4.type("");
      String string0 = modelEntity5.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addInputItem(dataSchema0);
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      functionEntitySchemas0.equals(channelOutboundHandlerAdapter0);
      ModelEntity modelEntity1 = modelEntity0.schemas(functionEntitySchemas1);
      modelEntity1.toString();
      modelEntity0.getCustom();
      ModelEntity modelEntity2 = modelEntity1.custom((Map<String, Object>) null);
      assertNull(modelEntity2.getType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Object object0 = new Object();
      ModelEntity modelEntity1 = modelEntity0.hyperParameters(object0);
      ModelEntity modelEntity2 = modelEntity1.labelColumn("    pipeline: ");
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      ModelEntitySize modelEntitySize1 = modelEntitySize0.content(bigDecimal0);
      ModelEntity modelEntity3 = modelEntity2.size(modelEntitySize1);
      modelEntitySize1.setInMemory(bigDecimal0);
      Metric metric0 = new Metric();
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      Metric metric1 = metric0.iteration(integer0);
      MlFederatedMetric mlFederatedMetric0 = new MlFederatedMetric();
      RemoteTrainingSystemMetric remoteTrainingSystemMetric0 = new RemoteTrainingSystemMetric();
      MlFederatedMetric mlFederatedMetric1 = mlFederatedMetric0.addRemoteTrainingSystemsItem(remoteTrainingSystemMetric0);
      Metric metric2 = metric1.putMlFederatedMetricsItem("too many channels (max: ", mlFederatedMetric1);
      modelEntity2.addMetricsItem(metric2);
      ModelEntity modelEntity4 = modelEntity3.addTrainingDataReferencesItem((DataConnectionReference) null);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      Rel rel0 = softwareSpecRel0.id("    pipeline: ");
      ModelEntity modelEntity5 = modelEntity4.pipeline(rel0);
      ModelEntitySize modelEntitySize2 = modelEntity5.getSize();
      assertSame(modelEntitySize1, modelEntitySize2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      ModelEntity modelEntity1 = modelEntity0.schemas(functionEntitySchemas0);
      ModelEntity modelEntity2 = modelEntity1.hyperParameters(functionEntitySchemas0);
      ModelEntity modelEntity3 = modelEntity2.labelColumn("    domain: ");
      ModelEntity modelEntity4 = modelEntity3.putUserDefinedObjectsItem("e(WMQU", "    domain: ");
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity5 = modelEntity4.addTrainingDataReferencesItem(dataConnectionReference0);
      String string0 = modelEntity5.getDomain();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.putCustom("V@^Td7|A7iPdt", "V@^Td7|A7iPdt");
      Map<String, Object> map0 = modelEntity1.getCustom();
      ModelEntity modelEntity2 = modelEntity0.custom(map0);
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      ModelEntity modelEntity3 = modelEntity2.hyperParameters(integer0);
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelEntity modelEntity4 = modelEntity3.modelDefinition(modelDefinitionId0);
      modelEntity2.hashCode();
      Stack<DataConnectionReference> stack0 = new Stack<DataConnectionReference>();
      ModelEntity modelEntity5 = modelEntity4.trainingDataReferences(stack0);
      ModelEntity modelEntity6 = modelEntity5.domain("Cancelling Websocket inbound. Closing Websocket");
      modelEntity6.toString();
      modelEntity1.labelColumn("N6[<0Lgt[Ht`fcCZ");
      modelEntity2.setModelDefinition(modelDefinitionId0);
      modelEntity4.getHyperParameters();
      // Undeclared exception!
      try { 
        modelEntity5.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.ModelEntity", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Rel rel0 = new Rel();
      ModelEntity modelEntity1 = modelEntity0.pipeline(rel0);
      Class<Integer> class0 = Integer.class;
      XmlClass xmlClass0 = new XmlClass(class0);
      Map<String, String> map0 = xmlClass0.getLocalParameters();
      ModelEntity modelEntity2 = modelEntity1.userDefinedObjects(map0);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity3 = modelEntity2.softwareSpec(softwareSpecRel0);
      LinkedList<DataConnectionReference> linkedList0 = new LinkedList<DataConnectionReference>();
      ModelEntity modelEntity4 = modelEntity3.trainingDataReferences(linkedList0);
      ModelEntity modelEntity5 = modelEntity4.putUserDefinedObjectsItem((String) null, (String) null);
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelDefinitionId modelDefinitionId1 = modelDefinitionId0.id((String) null);
      modelEntity5.setModelDefinition(modelDefinitionId1);
      assertSame(modelEntity5, modelEntity4);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Vector<DataConnectionReference> vector0 = new Vector<DataConnectionReference>();
      ModelEntity modelEntity1 = modelEntity0.trainingDataReferences(vector0);
      ModelEntity modelEntity2 = modelEntity1.type("cZ}qgk4+SF?vOXN[");
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelEntity modelEntity3 = modelEntity2.modelDefinition(modelDefinitionId0);
      Metric metric0 = new Metric();
      Integer integer0 = new Integer(0);
      Metric metric1 = metric0.iteration(integer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 1668);
      Metric metric2 = metric1.putMlMetricsItem("    type: ", bigDecimal0);
      ModelEntity modelEntity4 = modelEntity3.addMetricsItem(metric2);
      Object object0 = new Object();
      ModelEntity modelEntity5 = modelEntity4.putCustom("    type: ", object0);
      List<DataConnectionReference> list0 = modelEntity5.getTrainingDataReferences();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Vector<Metric> vector0 = new Vector<Metric>();
      ModelEntity modelEntity1 = modelEntity0.metrics(vector0);
      ModelEntity modelEntity2 = modelEntity1.size((ModelEntitySize) null);
      Metric metric0 = new Metric();
      HashMap<String, MlFederatedMetric> hashMap0 = new HashMap<String, MlFederatedMetric>();
      Metric metric1 = metric0.mlFederatedMetrics(hashMap0);
      ModelEntity modelEntity3 = modelEntity2.addMetricsItem(metric1);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity4 = modelEntity3.addTrainingDataReferencesItem(dataConnectionReference0);
      dataConnectionReference0.getLocation();
      ModelEntity modelEntity5 = modelEntity4.custom((Map<String, Object>) null);
      ModelEntity modelEntity6 = modelEntity5.hyperParameters(modelEntity3);
      assertSame(modelEntity6, modelEntity3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.transformedLabelColumn("5!b;~=n2954hakpj");
      ModelEntity modelEntity2 = modelEntity0.hyperParameters(modelEntity1);
      LinkedList<Metric> linkedList0 = new LinkedList<Metric>();
      ModelEntity modelEntity3 = modelEntity2.metrics(linkedList0);
      ModelEntity modelEntity4 = modelEntity3.labelColumn("5!b;~=n2954hakpj");
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelEntity modelEntity5 = modelEntity4.modelDefinition(modelDefinitionId0);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity6 = modelEntity5.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      modelEntitySize0.toString();
      ModelEntity modelEntity7 = modelEntity6.size(modelEntitySize0);
      modelEntity7.setType("w\"J_B?");
      modelEntity5.setSize(modelEntitySize0);
      StringBuilder stringBuilder0 = new StringBuilder("class ModelEntitySize {\n    inMemory: null\n    content: null\n}");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) modelEntity3);
      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'B';
      charArray0[1] = '>';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      modelEntity4.toString(stringBuilder3);
      modelEntity7.getModelDefinition();
      Rel rel0 = modelEntity5.getPipeline();
      assertNull(rel0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      modelEntity0.getMetrics();
      ModelEntity modelEntity1 = modelEntity0.metrics((List<Metric>) null);
      modelEntity1.putCustom("    labelColumn: ", "    labelColumn: ");
      modelEntity0.setDomain("    labelColumn: ");
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      DataConnectionReference dataConnectionReference1 = dataConnectionReference0.schema((DataSchema) null);
      modelEntity0.addTrainingDataReferencesItem(dataConnectionReference1);
      ModelEntity modelEntity2 = modelEntity1.putCustom("\n", (Object) null);
      assertSame(modelEntity2, modelEntity1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.putCustom("GONE", "GONE");
      Map<String, Object> map0 = modelEntity0.getCustom();
      modelEntity1.setHyperParameters(map0);
      ModelEntity modelEntity2 = modelEntity0.custom(map0);
      modelEntity1.getCustom();
      ModelEntity modelEntity3 = modelEntity2.custom(map0);
      assertSame(modelEntity3, modelEntity1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ArrayList<DataConnectionReference> arrayList0 = new ArrayList<DataConnectionReference>(0);
      ModelEntity modelEntity1 = modelEntity0.trainingDataReferences(arrayList0);
      ModelEntity modelEntity2 = modelEntity1.hyperParameters(modelEntity0);
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      Vector<DataSchema> vector0 = new Vector<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.output(vector0);
      DataSchema dataSchema0 = new DataSchema();
      DataSchema dataSchema1 = dataSchema0.type("class ModelEntity {\n");
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.addOutputItem(dataSchema1);
      FunctionEntitySchemas functionEntitySchemas3 = functionEntitySchemas2.addInputItem(dataSchema1);
      modelEntity2.schemas(functionEntitySchemas3);
      ModelEntity modelEntity3 = modelEntity2.type("s6x ");
      ModelEntity modelEntity4 = modelEntity3.putCustom("YsB\"i9-", "s6x ");
      modelEntity4.setLabelColumn("s6x ");
      String string0 = modelEntity2.getType();
      assertEquals("s6x ", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Object object0 = new Object();
      ModelEntity modelEntity1 = modelEntity0.hyperParameters(object0);
      ModelEntity modelEntity2 = modelEntity1.custom((Map<String, Object>) null);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      SoftwareSpecRel softwareSpecRel1 = softwareSpecRel0.name("");
      ModelEntity modelEntity3 = modelEntity2.softwareSpec(softwareSpecRel1);
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      ModelEntity modelEntity4 = modelEntity3.size(modelEntitySize0);
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      ModelEntity modelEntity5 = modelEntity4.schemas(functionEntitySchemas0);
      ModelEntity modelEntity6 = modelEntity5.type("");
      modelEntity6.size(modelEntitySize0);
      modelEntity5.setDomain("");
      BigDecimal bigDecimal0 = new BigDecimal(2451);
      BigDecimal bigDecimal1 = new BigDecimal((long) 2451);
      MathContext mathContext0 = MathContext.UNLIMITED;
      bigDecimal0.divideAndRemainder(bigDecimal1, mathContext0);
      bigDecimal0.equals(modelEntity0);
      ModelEntitySize modelEntitySize1 = modelEntitySize0.inMemory(bigDecimal0);
      modelEntity5.pipeline(softwareSpecRel1);
      modelEntity3.setSize(modelEntitySize1);
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelEntity modelEntity7 = modelEntity0.modelDefinition(modelDefinitionId0);
      modelEntity7.getMetrics();
      modelEntity4.getSchemas();
      modelEntity6.setSoftwareSpec(softwareSpecRel1);
      Rel rel0 = modelEntity7.getPipeline();
      assertSame(rel0, softwareSpecRel1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Stack<DataConnectionReference> stack0 = new Stack<DataConnectionReference>();
      ModelEntity modelEntity1 = modelEntity0.trainingDataReferences(stack0);
      modelEntity1.getCustom();
      ModelEntity modelEntity2 = modelEntity0.custom((Map<String, Object>) null);
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelDefinitionId modelDefinitionId1 = modelDefinitionId0.id("hsXi9_%P6.Cl");
      ModelEntity modelEntity3 = modelEntity2.modelDefinition(modelDefinitionId1);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      DataSchema dataSchema0 = new DataSchema();
      DataConnectionReference dataConnectionReference1 = dataConnectionReference0.schema(dataSchema0);
      ModelEntity modelEntity4 = modelEntity3.addTrainingDataReferencesItem(dataConnectionReference1);
      Stack<Metric> stack1 = new Stack<Metric>();
      ModelEntity modelEntity5 = modelEntity4.metrics(stack1);
      modelEntity5.setLabelColumn("<");
      assertNull(modelEntity5.getTransformedLabelColumn());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.schemas((FunctionEntitySchemas) null);
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelDefinitionId modelDefinitionId1 = modelDefinitionId0.id("][l{B");
      ModelEntity modelEntity2 = modelEntity1.modelDefinition(modelDefinitionId1);
      FunctionEntitySchemas functionEntitySchemas0 = modelEntity2.getSchemas();
      assertNull(functionEntitySchemas0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      LinkedList<Metric> linkedList0 = new LinkedList<Metric>();
      Metric metric0 = new Metric();
      Integer integer0 = new Integer(270);
      Metric metric1 = metric0.iteration(integer0);
      MockDate mockDate0 = new MockDate(270, 0, 0, 270, 0);
      Metric metric2 = metric1.timestamp(mockDate0);
      metric2.getMlMetrics();
      Metric metric3 = metric1.mlMetrics((Map<String, BigDecimal>) null);
      MlFederatedMetric mlFederatedMetric0 = new MlFederatedMetric();
      Metric metric4 = metric3.putMlFederatedMetricsItem((String) null, mlFederatedMetric0);
      BigDecimal bigDecimal0 = new BigDecimal(270);
      Metric metric5 = metric4.putMlMetricsItem((String) null, bigDecimal0);
      linkedList0.removeLastOccurrence(metric5);
      ModelEntity modelEntity1 = modelEntity0.metrics(linkedList0);
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      ModelEntitySize modelEntitySize1 = modelEntitySize0.inMemory(bigDecimal0);
      modelEntity1.size(modelEntitySize1);
      Stack<DataConnectionReference> stack0 = new Stack<DataConnectionReference>();
      modelEntity1.trainingDataReferences(stack0);
      modelEntity1.getPipeline();
      Object object0 = new Object();
      ModelEntity modelEntity2 = modelEntity1.putCustom("o4", object0);
      assertNull(modelEntity2.getDomain());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      ModelEntity modelEntity4 = modelEntity3.domain("F&NiMZ$vuXK");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      Map<String, String> map0 = xmlTest0.getLocalParameters();
      ModelEntity modelEntity5 = modelEntity3.userDefinedObjects(map0);
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      List<XmlPackage> list0 = xmlSuite1.getPackages();
      xmlSuite1.setPackages(list0);
      List<XmlPackage> list1 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list1);
      ModelEntity modelEntity6 = modelEntity5.trainingDataReferences((List<DataConnectionReference>) null);
      modelEntity6.getHyperParameters();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      ModelEntity modelEntity7 = modelEntity3.metrics(vector0);
      modelEntity5.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity8 = modelEntity3.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntity modelEntity9 = modelEntity7.labelColumn("SWITCHING_PROTOCOLS");
      modelEntity8.equals(modelEntity9);
      modelEntity8.schemas((FunctionEntitySchemas) null);
      modelEntity5.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.getUserDefinedObjects();
      modelEntity4.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity8.getHyperParameters();
      List<Metric> list2 = modelEntity3.getMetrics();
      assertEquals(0, list2.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.modelDefinition((ModelDefinitionId) null);
      ModelEntity modelEntity2 = modelEntity1.trainingDataReferences((List<DataConnectionReference>) null);
      ModelEntity modelEntity3 = modelEntity2.domain("");
      ModelEntity modelEntity4 = modelEntity3.hyperParameters("");
      ModelEntity modelEntity5 = modelEntity4.size((ModelEntitySize) null);
      ModelDefinitionId modelDefinitionId0 = modelEntity5.getModelDefinition();
      assertNull(modelDefinitionId0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      modelEntity0.setType("");
      List<Metric> list0 = modelEntity0.getMetrics();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Vector<DataConnectionReference> vector0 = new Vector<DataConnectionReference>();
      ModelEntity modelEntity1 = modelEntity0.trainingDataReferences(vector0);
      Metric metric0 = new Metric();
      ModelEntity modelEntity2 = modelEntity1.addMetricsItem(metric0);
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      ModelEntity modelEntity3 = modelEntity2.putCustom((String) null, channelOutboundHandlerAdapter0);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity4 = modelEntity3.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntity modelEntity5 = modelEntity4.domain(".Y :p@");
      ModelEntity modelEntity6 = modelEntity5.domain(".Y :p@");
      assertSame(modelEntity1, modelEntity6);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Stack<Metric> stack0 = new Stack<Metric>();
      ModelEntity modelEntity1 = modelEntity0.metrics(stack0);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity2 = modelEntity1.softwareSpec(softwareSpecRel0);
      ModelEntity modelEntity3 = modelEntity2.type("R}");
      ModelEntity modelEntity4 = modelEntity3.labelColumn("[~E U_j}xC1s94");
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      dataConnectionReference0.getLocation();
      ModelEntity modelEntity5 = modelEntity4.custom((Map<String, Object>) null);
      String string0 = modelEntity5.getLabelColumn();
      assertEquals("[~E U_j}xC1s94", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      XmlTest xmlTest0 = new XmlTest();
      Map<String, String> map0 = xmlTest0.getXmlDependencyGroups();
      ModelEntity modelEntity1 = modelEntity0.userDefinedObjects(map0);
      Rel rel0 = new Rel();
      ModelEntity modelEntity2 = modelEntity1.pipeline(rel0);
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addInputItem(dataSchema0);
      ModelEntity modelEntity3 = modelEntity2.schemas(functionEntitySchemas1);
      ArrayList<DataConnectionReference> arrayList0 = new ArrayList<DataConnectionReference>();
      ModelEntity modelEntity4 = modelEntity3.trainingDataReferences(arrayList0);
      ModelEntity modelEntity5 = modelEntity4.type("EB<WFim!|3laG0>");
      String string0 = modelEntity5.toIndentedString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.addTrainingDataReferencesItem((DataConnectionReference) null);
      ModelEntity modelEntity2 = modelEntity1.type("74ik#~r-");
      Rel rel0 = new Rel();
      Rel rel1 = rel0.id("74ik#~r-");
      ModelEntity modelEntity3 = modelEntity2.pipeline(rel1);
      ModelEntity modelEntity4 = modelEntity3.putUserDefinedObjectsItem("    modelDefinition: ", "74ik#~r-");
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelEntity modelEntity5 = modelEntity4.modelDefinition(modelDefinitionId0);
      Map<String, String> map0 = modelEntity5.getUserDefinedObjects();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.hyperParameters((Object) null);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("", "reactor.core.publisher.QueueDrainSubscriberPad0");
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      dataConnectionReference0.getLocation();
      ModelEntity modelEntity3 = modelEntity2.custom((Map<String, Object>) null);
      ModelEntity modelEntity4 = modelEntity3.domain("");
      modelEntity0.getTrainingDataReferences();
      ModelEntity modelEntity5 = modelEntity4.trainingDataReferences((List<DataConnectionReference>) null);
      ModelEntity modelEntity6 = modelEntity5.trainingDataReferences((List<DataConnectionReference>) null);
      assertSame(modelEntity6, modelEntity0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      modelEntity0.getLabelColumn();
      modelEntity0.getHyperParameters();
      modelEntity0.getHyperParameters();
      modelEntity0.getSoftwareSpec();
      modelEntity0.getCustom();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      modelEntity0.equals(integer0);
      ModelEntity modelEntity1 = modelEntity0.type(";(b4bb-*U");
      modelEntity0.getTransformedLabelColumn();
      modelEntity0.getCustom();
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addOutputItem(dataSchema0);
      List<DataSchema> list0 = functionEntitySchemas1.getOutput();
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.output(list0);
      FunctionEntitySchemas functionEntitySchemas3 = functionEntitySchemas2.addInputItem((DataSchema) null);
      modelEntity1.setSchemas(functionEntitySchemas3);
      assertSame(functionEntitySchemas1, functionEntitySchemas3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      dataConnectionReference0.getConnection();
      ModelEntity modelEntity1 = modelEntity0.custom((Map<String, Object>) null);
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = new BigDecimal((-223.18400106));
      ModelEntitySize modelEntitySize1 = modelEntitySize0.content(bigDecimal0);
      ModelEntity modelEntity2 = modelEntity1.size(modelEntitySize1);
      LinkedList<Metric> linkedList0 = new LinkedList<Metric>();
      ModelEntity modelEntity3 = modelEntity2.metrics(linkedList0);
      ModelEntity modelEntity4 = modelEntity3.putUserDefinedObjectsItem("", "");
      SoftwareSpecRel softwareSpecRel0 = modelEntity4.getSoftwareSpec();
      assertNull(softwareSpecRel0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.putCustom("", "");
      modelEntity1.getMetrics();
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      SoftwareSpecRel softwareSpecRel1 = softwareSpecRel0.name("");
      modelEntity0.setSoftwareSpec(softwareSpecRel1);
      modelEntity1.getType();
      ModelEntity modelEntity2 = modelEntity1.type("D0[4vi");
      modelEntity2.setSoftwareSpec(softwareSpecRel1);
      String string0 = modelEntity0.getLabelColumn();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.domain("2MhSWV^C0z89Gzk");
      ModelEntity modelEntity2 = modelEntity1.hyperParameters(modelEntity0);
      ModelEntity modelEntity3 = modelEntity2.type("2MhSWV^C0z89Gzk");
      ModelEntity modelEntity4 = modelEntity3.putCustom("2MhSWV^C0z89Gzk", modelEntity0);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity5 = modelEntity4.pipeline(softwareSpecRel0);
      modelEntity5.setTransformedLabelColumn("Channel connected, now {} active connections and {} inactive connections");
      assertSame(modelEntity3, modelEntity5);
      assertSame(modelEntity5, modelEntity4);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelEntity modelEntity1 = modelEntity0.modelDefinition(modelDefinitionId0);
      ModelEntity modelEntity2 = modelEntity1.softwareSpec((SoftwareSpecRel) null);
      ModelEntity modelEntity3 = modelEntity2.hyperParameters(modelEntity1);
      ModelEntity modelEntity4 = modelEntity3.transformedLabelColumn("9M0a~-");
      ModelEntity modelEntity5 = modelEntity4.putCustom("GSwLRP+&]owWN:~", modelEntity3);
      boolean boolean0 = modelEntity5.equals(modelEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.transformedLabelColumn("krUBEUo\"H");
      Stack<Metric> stack0 = new Stack<Metric>();
      ModelEntity modelEntity2 = modelEntity1.metrics(stack0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      modelEntity2.toString(stringBuilder0);
      assertNull(modelEntity2.getDomain());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      ModelEntity modelEntity1 = modelEntity0.size(modelEntitySize0);
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      ModelEntity modelEntity2 = modelEntity1.schemas(functionEntitySchemas0);
      ModelEntity modelEntity3 = modelEntity2.labelColumn("{Plia&AVIm6ln,.p~");
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity4 = modelEntity3.softwareSpec(softwareSpecRel0);
      ModelEntity modelEntity5 = modelEntity4.pipeline(softwareSpecRel0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      hashMap0.put("{Plia&AVIm6ln,.p~", integer0);
      modelEntity5.setCustom(hashMap0);
      modelEntity2.setHyperParameters(functionEntitySchemas0);
      modelEntity0.getUserDefinedObjects();
      modelEntity0.setUserDefinedObjects((Map<String, String>) null);
      assertNull(modelEntity0.getTransformedLabelColumn());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.putCustom("", "");
      modelEntity1.hyperParameters(modelEntity0);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      modelEntity1.addTrainingDataReferencesItem(dataConnectionReference0);
      DataConnectionReference dataConnectionReference1 = new DataConnectionReference();
      DataSchema dataSchema0 = new DataSchema();
      ArrayList<DataSchemaField> arrayList0 = new ArrayList<DataSchemaField>();
      DataSchema dataSchema1 = dataSchema0.fields(arrayList0);
      DataConnectionReference dataConnectionReference2 = dataConnectionReference1.schema(dataSchema1);
      dataConnectionReference2.getConnection();
      modelEntity1.setCustom((Map<String, Object>) null);
      assertNull(modelEntity1.getTransformedLabelColumn());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      ModelEntitySize modelEntitySize1 = modelEntitySize0.content(bigDecimal0);
      modelEntity0.setSize(modelEntitySize1);
      assertNull(modelEntity0.getLabelColumn());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      MetricsContext metricsContext0 = new MetricsContext();
      Metric metric1 = metric0.context(metricsContext0);
      BigDecimal bigDecimal0 = new BigDecimal((-150.6445453904));
      Metric metric2 = metric1.putMlMetricsItem("", bigDecimal0);
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric2);
      modelEntity1.setDomain("");
      assertNull(modelEntity1.getType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.transformedLabelColumn("~D7%2Q");
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      ModelEntity modelEntity2 = modelEntity1.size(modelEntitySize0);
      Stack<Metric> stack0 = new Stack<Metric>();
      ModelEntity modelEntity3 = modelEntity2.metrics(stack0);
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      Vector<DataSchema> vector0 = new Vector<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.input(vector0);
      ModelEntity modelEntity4 = modelEntity3.schemas(functionEntitySchemas1);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity5 = modelEntity4.addTrainingDataReferencesItem(dataConnectionReference0);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      Rel rel0 = softwareSpecRel0.id("~D7%2Q");
      Rel rel1 = rel0.rev("");
      modelEntity5.setPipeline(rel1);
      assertSame(rel0, rel1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addInputItem(dataSchema0);
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.addOutputItem(dataSchema0);
      ModelEntity modelEntity1 = modelEntity0.schemas(functionEntitySchemas2);
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      ModelEntity modelEntity2 = modelEntity1.size(modelEntitySize0);
      LinkedList<DataConnectionReference> linkedList0 = new LinkedList<DataConnectionReference>();
      modelEntity2.setTrainingDataReferences(linkedList0);
      assertNull(modelEntity2.getTransformedLabelColumn());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.putUserDefinedObjectsItem("C,:A", "");
      ModelEntity modelEntity2 = modelEntity1.transformedLabelColumn("C,:A");
      modelEntity2.equals("g'vN0Eu5l2Nf(13'");
      modelEntity2.hashCode();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.domain("Unhandled: state=");
      ModelEntity modelEntity2 = modelEntity1.putCustom("Unhandled: state=", "Unhandled: state=");
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity3 = modelEntity2.softwareSpec(softwareSpecRel0);
      Vector<Metric> vector0 = new Vector<Metric>();
      ModelEntity modelEntity4 = modelEntity3.metrics(vector0);
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelDefinitionId modelDefinitionId1 = modelDefinitionId0.id("Unhandled: state=");
      ModelEntity modelEntity5 = modelEntity4.modelDefinition(modelDefinitionId1);
      String string0 = modelEntity5.getTransformedLabelColumn();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      ModelEntity modelEntity1 = modelEntity0.schemas(functionEntitySchemas0);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity2 = modelEntity1.addTrainingDataReferencesItem(dataConnectionReference0);
      modelEntity2.getUserDefinedObjects();
      ModelEntity modelEntity3 = modelEntity2.userDefinedObjects((Map<String, String>) null);
      ModelEntity modelEntity4 = modelEntity3.domain(":K!.YFGj)&U^r5V[v");
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      ModelEntity modelEntity5 = modelEntity4.modelDefinition(modelDefinitionId0);
      String string0 = modelEntity5.getLabelColumn();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      XmlTest xmlTest0 = new XmlTest();
      Map<String, String> map0 = xmlTest0.getXmlDependencyGroups();
      modelEntity0.userDefinedObjects(map0);
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      modelDefinitionId0.toString();
      modelEntity0.modelDefinition(modelDefinitionId0);
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      Vector<DataSchema> vector0 = new Vector<DataSchema>();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.input(vector0);
      modelEntity0.setSchemas(functionEntitySchemas1);
      assertNull(modelEntity0.getTransformedLabelColumn());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity2 = modelEntity1.pipeline(softwareSpecRel0);
      modelEntity2.putCustom("Tt", modelEntity1);
      ModelEntity modelEntity3 = modelEntity2.type("");
      ModelEntity modelEntity4 = modelEntity3.transformedLabelColumn("");
      modelEntity4.labelColumn("");
      modelEntity4.getHyperParameters();
      modelEntity0.setHyperParameters((Object) null);
      assertEquals("", modelEntity0.getType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.metrics((List<Metric>) null);
      ModelEntity modelEntity3 = modelEntity2.pipeline((Rel) null);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity4 = modelEntity3.softwareSpec(softwareSpecRel0);
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      ModelEntity modelEntity5 = modelEntity4.hyperParameters(integer0);
      SoftwareSpecRel softwareSpecRel1 = modelEntity5.getSoftwareSpec();
      assertSame(softwareSpecRel0, softwareSpecRel1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Stack<DataConnectionReference> stack0 = new Stack<DataConnectionReference>();
      ModelEntity modelEntity1 = modelEntity0.trainingDataReferences(stack0);
      ModelEntity modelEntity2 = modelEntity1.type((String) null);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity3 = modelEntity2.softwareSpec(softwareSpecRel0);
      ModelEntity modelEntity4 = modelEntity3.labelColumn((String) null);
      modelEntity0.getCustom();
      ModelEntity modelEntity5 = modelEntity4.custom((Map<String, Object>) null);
      modelEntity5.getSize();
      LinkedList<Metric> linkedList0 = new LinkedList<Metric>();
      modelEntity5.setMetrics(linkedList0);
      assertNull(modelEntity5.getType());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      ModelEntity modelEntity1 = modelEntity0.softwareSpec(softwareSpecRel0);
      ModelEntity modelEntity2 = modelEntity1.labelColumn("`^+!q&-*<JWJ'0q(Hl");
      ModelEntity modelEntity3 = modelEntity2.addMetricsItem((Metric) null);
      modelEntity1.getTrainingDataReferences();
      ModelEntity modelEntity4 = modelEntity3.trainingDataReferences((List<DataConnectionReference>) null);
      ModelEntity modelEntity5 = modelEntity4.transformedLabelColumn("`^+!q&-*<JWJ'0q(Hl");
      modelEntity5.hashCode();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = new XmlSuite();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ModelEntity modelEntity1 = modelEntity0.userDefinedObjects(hashMap0);
      LinkedList<XmlPackage> linkedList0 = new LinkedList<XmlPackage>();
      xmlSuite1.setPackages(linkedList0);
      xmlSuite0.setGroupByInstances(true);
      List<XmlPackage> list0 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list0);
      hashMap0.entrySet();
      Vector<Metric> vector0 = new Vector<Metric>();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity2 = new ModelEntity();
      boolean boolean0 = modelEntity0.equals(modelEntity2);
      assertFalse(boolean0);
      
      modelEntity0.getUserDefinedObjects();
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity1.trainingDataReferences((List<DataConnectionReference>) null);
      assertFalse(modelEntity0.equals((Object)modelEntity2));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      modelEntity0.getLabelColumn();
      modelEntity0.getHyperParameters();
      modelEntity0.getHyperParameters();
      modelEntity0.getSoftwareSpec();
      modelEntity0.getCustom();
      Integer integer0 = XmlSuite.DEFAULT_THREAD_COUNT;
      Integer.max((-2642), (-2642));
      modelEntity0.equals(integer0);
      ModelEntity modelEntity1 = modelEntity0.type(";(b4bb-*U");
      modelEntity0.getTransformedLabelColumn();
      modelEntity0.getCustom();
      modelEntity1.addTrainingDataReferencesItem((DataConnectionReference) null);
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      DataSchema dataSchema0 = new DataSchema();
      FunctionEntitySchemas functionEntitySchemas1 = functionEntitySchemas0.addOutputItem(dataSchema0);
      List<DataSchema> list0 = functionEntitySchemas1.getOutput();
      FunctionEntitySchemas functionEntitySchemas2 = functionEntitySchemas1.output(list0);
      FunctionEntitySchemas functionEntitySchemas3 = functionEntitySchemas2.addInputItem(dataSchema0);
      modelEntity1.setSchemas(functionEntitySchemas3);
      assertNull(modelEntity1.getTransformedLabelColumn());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.hyperParameters(modelEntity0);
      ModelEntity modelEntity3 = modelEntity2.labelColumn("");
      modelEntity1.setTransformedLabelColumn("null");
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      modelEntity2.size(modelEntitySize0);
      ModelEntity modelEntity4 = modelEntity1.transformedLabelColumn((String) null);
      ModelEntity modelEntity5 = modelEntity3.putUserDefinedObjectsItem((String) null, "9NH");
      ModelEntity modelEntity6 = modelEntity5.domain("B");
      modelEntity4.addMetricsItem(metric0);
      modelEntity6.getTransformedLabelColumn();
      modelEntity3.getDomain();
      XmlDependencies xmlDependencies0 = new XmlDependencies();
      Map<String, String> map0 = xmlDependencies0.getDependencies();
      ModelEntity modelEntity7 = modelEntity0.userDefinedObjects(map0);
      Stack<Metric> stack0 = new Stack<Metric>();
      ModelEntity modelEntity8 = modelEntity7.metrics(stack0);
      ArrayList<DataConnectionReference> arrayList0 = new ArrayList<DataConnectionReference>();
      ModelEntity modelEntity9 = modelEntity8.trainingDataReferences(arrayList0);
      modelEntity7.getSize();
      modelEntity9.getSchemas();
      modelEntity9.getCustom();
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      SoftwareSpecRel softwareSpecRel1 = softwareSpecRel0.name("!1YT3HZ1F;4oTv[PJ%");
      assertSame(softwareSpecRel0, softwareSpecRel1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0, (int) xmlSuite0.DEFAULT_DATA_PROVIDER_THREAD_COUNT);
      xmlTest0.getLocalParameters();
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      List<XmlPackage> list0 = xmlSuite1.getPackages();
      xmlSuite1.setPackages(list0);
      List<XmlPackage> list1 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list1);
      ModelEntity modelEntity4 = modelEntity1.trainingDataReferences((List<DataConnectionReference>) null);
      modelEntity4.setLabelColumn((String) null);
      modelEntity4.getHyperParameters();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      ModelEntity modelEntity5 = modelEntity3.metrics(vector0);
      modelEntity2.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity6 = new ModelEntity();
      boolean boolean0 = modelEntity5.equals(modelEntity6);
      assertFalse(boolean0);
      
      modelEntity2.schemas((FunctionEntitySchemas) null);
      modelEntity3.setType("Rs@T*A*MOyDNengrb`=");
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity5.getHyperParameters();
      LinkedList<Metric> linkedList0 = new LinkedList<Metric>();
      Random.setNextRandom(1373);
      modelEntity1.labelColumn("Rs@T*A*MOyDNengrb`=");
      assertFalse(modelEntity0.equals((Object)modelEntity6));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      ModelEntity modelEntity4 = modelEntity3.domain("F&NiMZ$vuXK");
      XmlSuite xmlSuite0 = new XmlSuite();
      xmlSuite0.clone();
      xmlSuite0.getXmlPackages();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      modelEntity3.metrics(vector0);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity5 = modelEntity3.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntity modelEntity6 = new ModelEntity();
      modelEntity5.equals(modelEntity6);
      modelEntity5.schemas((FunctionEntitySchemas) null);
      modelEntity0.getUserDefinedObjects();
      modelEntity4.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      modelEntity5.getHyperParameters();
      modelEntity3.getMetrics();
      Random.setNextRandom(1361);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.modelDefinition((ModelDefinitionId) null);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      modelEntity0.equals((Object) null);
      modelEntity0.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntity modelEntity2 = modelEntity1.pipeline((Rel) null);
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      modelEntity1.setLabelColumn("");
      ModelEntitySize modelEntitySize1 = modelEntitySize0.inMemory(bigDecimal0);
      modelEntity2.size(modelEntitySize1);
      modelEntity0.size(modelEntitySize0);
      ModelEntity modelEntity3 = modelEntity1.addTrainingDataReferencesItem(dataConnectionReference0);
      assertSame(modelEntity1, modelEntity3);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      Map<String, String> map0 = xmlSuite0.getAllParameters();
      ModelEntity modelEntity1 = modelEntity0.userDefinedObjects(map0);
      ModelEntity modelEntity2 = modelEntity0.putCustom((String) null, map0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ModelEntity modelEntity3 = modelEntity2.type("2D^-HQ[!0;49h2#");
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      ModelEntity modelEntity4 = modelEntity2.transformedLabelColumn((String) null);
      modelEntity4.setSize(modelEntitySize0);
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      DynamicGraph<Metric> dynamicGraph0 = new DynamicGraph<Metric>();
      ModelEntity modelEntity5 = modelEntity1.domain((String) null);
      ModelEntity modelEntity6 = modelEntity5.size(modelEntitySize0);
      ModelEntity modelEntity7 = modelEntity3.putUserDefinedObjectsItem("2D^-HQ[!0;49h2#", (String) null);
      modelEntity7.hashCode();
      modelEntity7.getPipeline();
      modelEntity4.getMetrics();
      ModelEntity modelEntity8 = modelEntity1.hyperParameters(modelEntitySize0);
      modelEntity6.putCustom("", modelEntity8);
      boolean boolean0 = modelEntity6.equals(xmlSuite0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.type("");
      ModelEntity modelEntity2 = modelEntity1.transformedLabelColumn("");
      modelEntity2.hashCode();
      ModelEntity modelEntity3 = modelEntity2.domain("");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FunctionEntitySchemas functionEntitySchemas0 = new FunctionEntitySchemas();
      ModelDefinitionId modelDefinitionId0 = new ModelDefinitionId();
      modelEntity3.setModelDefinition(modelDefinitionId0);
      Vector<DataSchema> vector0 = new Vector<DataSchema>();
      functionEntitySchemas0.output(vector0);
      modelEntity3.labelColumn("org.testng.TestRunner$ConfigurationListener");
      modelEntity3.setSchemas(functionEntitySchemas0);
      modelEntity0.setCustom(hashMap0);
      modelEntity3.setCustom(hashMap0);
      ModelEntity modelEntity4 = modelEntity2.putUserDefinedObjectsItem("", "");
      modelEntity4.getUserDefinedObjects();
      modelEntity2.equals(modelEntity0);
      modelEntity1.getTransformedLabelColumn();
      ModelDefinitionId modelDefinitionId1 = modelEntity1.getModelDefinition();
      assertNull(modelDefinitionId1.getId());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntity modelEntity1 = modelEntity0.domain("org.apache.commons.io.filefilter.DirectoryFileFilter");
      modelEntity1.getTrainingDataReferences();
      modelEntity1.trainingDataReferences((List<DataConnectionReference>) null);
      Metric metric0 = new Metric();
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      assertNull(softwareSpecRel0.getName());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      modelEntity0.setDomain("");
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      DataSchema dataSchema0 = new DataSchema();
      dataConnectionReference0.schema(dataSchema0);
      modelEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      ModelEntitySize modelEntitySize0 = new ModelEntitySize();
      ModelEntity modelEntity1 = modelEntity0.size(modelEntitySize0);
      ModelEntity modelEntity2 = modelEntity1.transformedLabelColumn("^");
      Metric metric0 = new Metric();
      ModelEntity modelEntity3 = modelEntity1.putUserDefinedObjectsItem("^", "^");
      Integer integer0 = XmlSuite.DEFAULT_DATA_PROVIDER_THREAD_COUNT;
      metric0.setIteration(integer0);
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      DataSchema dataSchema0 = new DataSchema();
      DataConnectionReference dataConnectionReference1 = dataConnectionReference0.schema(dataSchema0);
      dataConnectionReference1.getLocation();
      ModelEntity modelEntity4 = modelEntity3.custom((Map<String, Object>) null);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      modelEntity4.softwareSpec(softwareSpecRel0);
      ModelEntity modelEntity5 = modelEntity0.custom((Map<String, Object>) null);
      ModelEntity modelEntity6 = modelEntity0.size(modelEntitySize0);
      modelEntity6.setType("#UYQ=;*Gi24h#");
      modelEntity4.labelColumn("pO4`t+J</E}@<O#K,Z3");
      Object object0 = new Object();
      modelEntity2.toIndentedString(object0);
      Stack<DataSchema> stack0 = new Stack<DataSchema>();
      Map<String, String> map0 = modelEntity0.getUserDefinedObjects();
      modelEntity5.setUserDefinedObjects(map0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.putUserDefinedObjectsItem("Rs@T*A*MOyDNengrb`=", "F&NiMZ$vuXK");
      ModelEntity modelEntity3 = modelEntity2.labelColumn("SWITCHING_PROTOCOLS");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      ModelEntity modelEntity4 = modelEntity1.trainingDataReferences((List<DataConnectionReference>) null);
      modelEntity4.setLabelColumn((String) null);
      modelEntity4.getHyperParameters();
      modelEntity3.getType();
      Vector<Metric> vector0 = new Vector<Metric>();
      ModelEntity modelEntity5 = modelEntity3.metrics(vector0);
      modelEntity2.getUserDefinedObjects();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      modelEntity3.addTrainingDataReferencesItem(dataConnectionReference0);
      ModelEntity modelEntity6 = new ModelEntity();
      boolean boolean0 = modelEntity5.equals(modelEntity6);
      assertFalse(boolean0);
      
      ModelEntity modelEntity7 = modelEntity2.schemas((FunctionEntitySchemas) null);
      modelEntity7.setLabelColumn((String) null);
      modelEntity3.setType("Rs@T*A*MOyDNengrb`=");
      DataConnectionReference dataConnectionReference1 = new DataConnectionReference();
      modelEntity0.addTrainingDataReferencesItem(dataConnectionReference1);
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      LinkedList<Metric> linkedList0 = new LinkedList<Metric>();
      Random.setNextRandom(1373);
      modelEntity1.labelColumn("Rs@T*A*MOyDNengrb`=");
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      Rel rel0 = softwareSpecRel0.id("SWITCHING_PROTOCOLS");
      modelEntity4.pipeline(rel0);
      ModelEntity modelEntity8 = modelEntity6.labelColumn((String) null);
      assertFalse(modelEntity8.equals((Object)modelEntity4));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = new XmlSuite();
      xmlSuite1.clone();
      LinkedList<XmlPackage> linkedList0 = new LinkedList<XmlPackage>();
      xmlSuite1.setPackages(linkedList0);
      List<XmlPackage> list0 = xmlSuite1.getXmlPackages();
      xmlSuite0.setXmlPackages(list0);
      Vector<Metric> vector0 = new Vector<Metric>();
      DataConnectionReference dataConnectionReference0 = new DataConnectionReference();
      ModelEntity modelEntity1 = new ModelEntity();
      modelEntity0.equals(modelEntity1);
      modelEntity0.getUserDefinedObjects();
      modelEntity0.setTrainingDataReferences((List<DataConnectionReference>) null);
      assertTrue(modelEntity0.equals((Object)modelEntity1));
      
      ModelEntity modelEntity2 = modelEntity0.transformedLabelColumn("Rs@T*A*MOyDNengrb`=");
      assertFalse(modelEntity2.equals((Object)modelEntity1));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ModelEntity modelEntity0 = new ModelEntity();
      modelEntity0.setType("");
      modelEntity0.setHyperParameters((Object) null);
      modelEntity0.toString();
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      modelEntity0.setSoftwareSpec(softwareSpecRel0);
      assertEquals("", modelEntity0.getType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ModelEntity modelEntity0 = new ModelEntity();
      Metric metric0 = new Metric();
      ModelEntity modelEntity1 = modelEntity0.addMetricsItem(metric0);
      ModelEntity modelEntity2 = modelEntity1.modelDefinition((ModelDefinitionId) null);
      ModelEntity modelEntity3 = modelEntity2.addTrainingDataReferencesItem((DataConnectionReference) null);
      ModelEntity modelEntity4 = modelEntity3.domain("    notebookLocation: ");
      ModelEntity modelEntity5 = modelEntity4.labelColumn("    notebookLocation: ");
      modelEntity0.setTransformedLabelColumn("    notebookLocation: ");
      ArrayList<DataConnectionReference> arrayList0 = new ArrayList<DataConnectionReference>();
      arrayList0.spliterator();
      modelEntity2.trainingDataReferences(arrayList0);
      SoftwareSpecRel softwareSpecRel0 = new SoftwareSpecRel();
      Rel rel0 = softwareSpecRel0.rev("    notebookLocation: ");
      Rel rel1 = softwareSpecRel0.id("    notebookLocation: ");
      modelEntity5.setPipeline(rel1);
      ArrayList<Metric> arrayList1 = new ArrayList<Metric>();
      modelEntity1.setMetrics(arrayList1);
      modelEntity4.getSize();
      modelEntity1.getDomain();
      modelEntity0.setTrainingDataReferences(arrayList0);
      modelEntity1.pipeline(softwareSpecRel0);
      modelEntity3.setModelDefinition((ModelDefinitionId) null);
      modelEntity4.pipeline(rel0);
      Map<String, String> map0 = modelEntity0.getUserDefinedObjects();
      assertNull(map0);
  }
}
