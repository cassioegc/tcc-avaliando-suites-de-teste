/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:11:19 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.DiscoveredAsset;
import io.netty.channel.DefaultChannelProgressivePromise;
import io.netty.channel.embedded.EmbeddedChannel;
import io.netty.channel.local.LocalChannel;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ForkJoinPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.testng.xml.XmlClass;
import org.testng.xml.XmlDefine;
import org.testng.xml.XmlRun;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiscoveredAsset_ESTest extends DiscoveredAsset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      Boolean boolean0 = XmlSuite.DEFAULT_PRESERVE_ORDER;
      Boolean.logicalAnd(false, true);
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.id("reactor.core.publisher.FluxSampleFirst$SampleFirstOther");
      Boolean.logicalAnd(false, false);
      DiscoveredAsset discoveredAsset2 = discoveredAsset0.hasChildren(boolean0);
      discoveredAsset0.setDescription("");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.details(hashMap0);
      discoveredAsset3.addTagsItem("");
      discoveredAsset2.getTags();
      discoveredAsset2.getTags();
      discoveredAsset1.description("1c&~j/b<Pr*wHDA");
      discoveredAsset0.setHasChildren(boolean0);
      discoveredAsset1.getHasChildren();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      Boolean boolean0 = Boolean.FALSE;
      String string0 = "\"";
      discoveredAsset0.addTagsItem("\"");
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.hasChildren(boolean0);
      discoveredAsset0.setPath("");
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.id("Q!");
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.path("Q!");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getExcludedGroups();
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.tags(list0);
      xmlTest0.setAllowReturnValues(xmlSuite0.DEFAULT_ALLOW_RETURN_VALUES);
      xmlTest0.setThreadCount(451);
      // Undeclared exception!
      try { 
        discoveredAsset4.addTagsItem("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      discoveredAsset0.setType("");
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.details(hashMap0);
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.description("");
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.path("");
      String string0 = "promises contains null Promise";
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.addTagsItem("promises contains null Promise");
      discoveredAsset4.id("");
      Boolean boolean0 = Boolean.TRUE;
      discoveredAsset3.setHasChildren(boolean0);
      discoveredAsset4.setType("Response was not received after ");
      discoveredAsset4.getDescription();
      discoveredAsset3.setPath((String) null);
      discoveredAsset1.setName("Response was not received after ");
      DiscoveredAsset discoveredAsset5 = discoveredAsset0.id("promises contains null Promise");
      discoveredAsset5.id("Response was not received after ");
      discoveredAsset2.addTagsItem("");
      LinkedList<java.util.Locale.LanguageRange> linkedList0 = new LinkedList<java.util.Locale.LanguageRange>();
      Stack<String> stack0 = new Stack<String>();
      java.util.Locale.FilteringMode locale_FilteringMode0 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      discoveredAsset5.setDescription("");
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) linkedList0, (Collection<String>) stack0, locale_FilteringMode0);
      discoveredAsset1.setTags(list0);
      discoveredAsset2.details(hashMap0);
      discoveredAsset0.getName();
      java.util.Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new java.util.Locale.LanguageRange("csD)+Ic>pt5'I;cIB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=csd)+ic>pt5'i;cib
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.description((String) null);
      discoveredAsset1.hashCode();
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.addTagsItem("SKIPPING CLASS ");
      discoveredAsset2.getHasChildren();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.type("    id: ");
      DiscoveredAsset discoveredAsset4 = discoveredAsset2.tags(linkedList0);
      DiscoveredAsset discoveredAsset5 = discoveredAsset4.putDetailsItem("    id: ", discoveredAsset3);
      DiscoveredAsset discoveredAsset6 = discoveredAsset1.id("QS.*3ly;U<_t*dEjv");
      DiscoveredAsset discoveredAsset7 = discoveredAsset4.type("QS.*3ly;U<_t*dEjv");
      discoveredAsset7.setType((String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      DiscoveredAsset discoveredAsset8 = discoveredAsset7.name("QS.*3ly;U<_t*dEjv");
      discoveredAsset8.setPath("U");
      discoveredAsset2.setId("");
      DiscoveredAsset discoveredAsset9 = discoveredAsset2.putDetailsItem((String) null, (Object) null);
      discoveredAsset9.setPath((String) null);
      discoveredAsset6.path("z");
      discoveredAsset5.getId();
      discoveredAsset9.hashCode();
      String string0 = "=W";
      discoveredAsset2.id(string0);
      String string1 = "";
      discoveredAsset3.setType(string1);
      discoveredAsset2.toString();
      discoveredAsset9.getDescription();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.putDetailsItem("", "");
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.description("");
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.name("iA%s1V8W:yq@J");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Boolean boolean0 = Boolean.FALSE;
      discoveredAsset2.hasChildren(boolean0);
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.tags(arrayList0);
      discoveredAsset4.getName();
      discoveredAsset0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.details(hashMap0);
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.addTagsItem("");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getExcludedGroups();
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.tags(list0);
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.path("");
      discoveredAsset2.setTags(list0);
      discoveredAsset1.type("");
      DiscoveredAsset discoveredAsset5 = discoveredAsset4.putDetailsItem("", discoveredAsset0);
      discoveredAsset3.toString();
      discoveredAsset5.getId();
      discoveredAsset2.setDetails(hashMap0);
      discoveredAsset5.getType();
      List<String> list1 = discoveredAsset4.getTags();
      DiscoveredAsset discoveredAsset6 = discoveredAsset0.name("");
      LogLevel logLevel0 = LogLevel.INFO;
      LoggingHandler loggingHandler0 = new LoggingHandler("@8N", logLevel0);
      hashMap0.remove((Object) loggingHandler0, (Object) list1);
      discoveredAsset2.getId();
      discoveredAsset5.equals(discoveredAsset1);
      discoveredAsset6.path("");
      Boolean boolean0 = discoveredAsset2.getHasChildren();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.putDetailsItem("", "");
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.id("");
      Vector<java.util.Locale.LanguageRange> vector0 = new Vector<java.util.Locale.LanguageRange>();
      discoveredAsset1.getTags();
      java.util.Locale.FilteringMode locale_FilteringMode0 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      discoveredAsset2.tags((List<String>) null);
      List<String> list0 = java.util.Locale.filterTags((List<java.util.Locale.LanguageRange>) vector0, (Collection<String>) null, locale_FilteringMode0);
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.tags(list0);
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.description("k88&BR1znLS4,f");
      HashMap<String, LocalChannel> hashMap0 = new HashMap<String, LocalChannel>();
      boolean boolean0 = discoveredAsset3.equals(discoveredAsset0);
      assertTrue(boolean0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      discoveredAsset4.addTagsItem("");
      DiscoveredAsset discoveredAsset5 = discoveredAsset4.details(hashMap1);
      XmlSuite xmlSuite0 = new XmlSuite();
      Boolean boolean1 = xmlSuite0.getGroupByInstances();
      discoveredAsset3.setHasChildren(boolean1);
      Boolean boolean2 = discoveredAsset5.getHasChildren();
      discoveredAsset3.tags((List<String>) null);
      DiscoveredAsset discoveredAsset6 = discoveredAsset3.name("k88&BR1znLS4,f");
      discoveredAsset5.hasChildren(boolean2);
      Boolean boolean3 = discoveredAsset6.getHasChildren();
      assertFalse(boolean3.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.name("    details: ");
      DiscoveredAsset discoveredAsset2 = discoveredAsset0.details(hashMap0);
      discoveredAsset2.getId();
      discoveredAsset2.setDetails(hashMap0);
      DiscoveredAsset discoveredAsset3 = discoveredAsset0.id("setName");
      XmlClass xmlClass0 = new XmlClass("setName", 2438, false);
      List<String> list0 = xmlClass0.getExcludedMethods();
      discoveredAsset0.setTags(list0);
      discoveredAsset2.setId((String) null);
      discoveredAsset2.getTags();
      discoveredAsset0.setId((String) null);
      discoveredAsset0.setType("");
      discoveredAsset0.getDetails();
      discoveredAsset0.getDetails();
      discoveredAsset0.setPath((String) null);
      discoveredAsset3.setTags(list0);
      String string0 = discoveredAsset1.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.details((Map<String, Object>) null);
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.type("");
      Boolean boolean0 = new Boolean(true);
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.hasChildren(boolean0);
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.putDetailsItem("hsFjrT5>r?~WZ{", boolean0);
      DiscoveredAsset discoveredAsset5 = discoveredAsset4.path("");
      String string0 = discoveredAsset5.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.path("r");
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.addTagsItem("");
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.name("r");
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.id("r");
      discoveredAsset3.id("");
      DiscoveredAsset discoveredAsset5 = discoveredAsset4.description("g)d>_.)vO=:B^-pq~");
      String string0 = discoveredAsset5.getPath();
      assertEquals("r", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.putDetailsItem("J.cmihI_t}R}v8l", "J.cmihI_t}R}v8l");
      discoveredAsset1.setType("J.cmihI_t}R}v8l");
      XmlDefine xmlDefine0 = new XmlDefine();
      xmlDefine0.setName((String) null);
      List<String> list0 = xmlDefine0.getIncludes();
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.tags(list0);
      discoveredAsset2.addTagsItem("J.cmihI_t}R}v8l");
      discoveredAsset0.getType();
      discoveredAsset0.getDescription();
      discoveredAsset0.getTags();
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.putDetailsItem("J.cmihI_t}R}v8l", xmlDefine0);
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.path((String) null);
      assertNull(discoveredAsset4.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.id("");
      Object object0 = new Object();
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.putDetailsItem("", object0);
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.addTagsItem("i-");
      discoveredAsset3.getType();
      discoveredAsset1.setDescription("i-");
      discoveredAsset0.getDescription();
      Map<String, Object> map0 = discoveredAsset3.getDetails();
      discoveredAsset1.details(map0);
      String string0 = discoveredAsset2.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.id((String) null);
      discoveredAsset0.getType();
      discoveredAsset1.equals((Object) null);
      discoveredAsset1.setId((String) null);
      assertNull(discoveredAsset1.getDescription());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.putDetailsItem("reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber", "reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber");
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.description("reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber");
      String string0 = discoveredAsset2.getDescription();
      assertEquals("reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getIncludedGroups();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.tags(list0);
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.putDetailsItem("Zm-tG", xmlSuite0);
      discoveredAsset2.description("0F+DEGS]|qf0lV,");
      discoveredAsset0.getName();
      DiscoveredAsset discoveredAsset3 = discoveredAsset1.hasChildren(xmlSuite0.DEFAULT_SKIP_FAILED_INVOCATION_COUNTS);
      assertNull(discoveredAsset3.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.type("    type: ");
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getIncludes();
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.tags(list0);
      String string0 = discoveredAsset2.getType();
      assertEquals("    type: ", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      String string0 = "Failed to execute ";
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.name("Failed to execute ");
      discoveredAsset1.addTagsItem("Failed to execute ");
      int int0 = (-5544);
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool((-1762));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      Boolean boolean0 = XmlSuite.DEFAULT_PRESERVE_ORDER;
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.hasChildren(boolean0);
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.description((String) null);
      DiscoveredAsset discoveredAsset3 = new DiscoveredAsset();
      discoveredAsset1.getDetails();
      discoveredAsset0.setDetails((Map<String, Object>) null);
      DiscoveredAsset discoveredAsset4 = discoveredAsset1.putDetailsItem("", discoveredAsset3);
      discoveredAsset3.setDescription("i:+I#{h");
      boolean boolean1 = discoveredAsset3.equals(discoveredAsset4);
      assertFalse(boolean1);
      
      DiscoveredAsset discoveredAsset5 = discoveredAsset2.hasChildren(boolean0);
      discoveredAsset4.setHasChildren(boolean0);
      discoveredAsset1.setPath((String) null);
      XmlSuite xmlSuite0 = new XmlSuite();
      Boolean boolean2 = XmlSuite.DEFAULT_MIXED;
      discoveredAsset1.setHasChildren(boolean2);
      List<String> list0 = xmlSuite0.getListeners();
      discoveredAsset1.setTags(list0);
      boolean boolean3 = discoveredAsset5.equals("");
      assertFalse(boolean3);
      
      discoveredAsset0.description("-L/j>}YTI]I3//D`5nX");
      assertFalse(discoveredAsset0.equals((Object)discoveredAsset3));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.description("(sxIcen@&^}iVj6");
      discoveredAsset1.setType("(sxIcen@&^}iVj6");
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.id("(sxIcen@&^}iVj6");
      discoveredAsset2.setName("(sxIcen@&^}iVj6");
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.type("(sxIcen@&^}iVj6");
      EmbeddedChannel embeddedChannel0 = new EmbeddedChannel();
      DefaultChannelProgressivePromise defaultChannelProgressivePromise0 = new DefaultChannelProgressivePromise(embeddedChannel0);
      discoveredAsset3.putDetailsItem("p;UG", defaultChannelProgressivePromise0);
      discoveredAsset3.toString();
      discoveredAsset3.equals("(sxIcen@&^}iVj6");
      DiscoveredAsset discoveredAsset4 = discoveredAsset0.type("v'&e&oQ[!)hLnc");
      assertNull(discoveredAsset4.getPath());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      Boolean boolean0 = XmlSuite.DEFAULT_JUNIT;
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.hasChildren(boolean0);
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.path("KL");
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.description("reactor.core.publisher.MonoLog");
      discoveredAsset1.toString();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.details(hashMap0);
      DiscoveredAsset discoveredAsset5 = discoveredAsset4.type("");
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlSuite xmlSuite1 = xmlSuite0.shallowCopy();
      discoveredAsset2.setDescription("reactor.core.publisher.MonoLog");
      Vector<String> vector0 = new Vector<String>();
      vector0.spliterator();
      discoveredAsset5.setTags(vector0);
      Boolean boolean1 = xmlSuite1.getPreserveOrder();
      Boolean.logicalXor((boolean) xmlSuite0.DEFAULT_ALLOW_RETURN_VALUES, true);
      DiscoveredAsset discoveredAsset6 = discoveredAsset5.hasChildren(boolean1);
      List<String> list0 = xmlSuite0.getExcludedGroups();
      discoveredAsset4.setTags(list0);
      DiscoveredAsset discoveredAsset7 = discoveredAsset6.name(";Jnzf2GbE2}wl=0\"");
      discoveredAsset7.setId("reactor.core.publisher.MonoLog");
      discoveredAsset1.getId();
      discoveredAsset4.setName("f>WqM)=1^:");
      Object object0 = new Object();
      DiscoveredAsset discoveredAsset8 = discoveredAsset1.putDetailsItem(";Jnzf2GbE2}wl=0\"", object0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      discoveredAsset8.setDetails(hashMap1);
      assertSame(discoveredAsset8, discoveredAsset3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      discoveredAsset0.setType("    hasChildren: ");
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.putDetailsItem("", "");
      discoveredAsset0.toString();
      discoveredAsset0.getName();
      discoveredAsset0.getName();
      discoveredAsset1.type("");
      discoveredAsset0.setName((String) null);
      Map<String, Object> map0 = discoveredAsset1.getDetails();
      discoveredAsset0.setDetails(map0);
      assertNull(discoveredAsset0.getDescription());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.putDetailsItem("", "");
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.description("F7]iGZbj~-HK7S6h@");
      DiscoveredAsset discoveredAsset3 = discoveredAsset1.name("F7]iGZbj~-HK7S6h@");
      Map<String, Object> map0 = discoveredAsset3.getDetails();
      DiscoveredAsset discoveredAsset4 = discoveredAsset2.details(map0);
      discoveredAsset4.hashCode();
      List<String> list0 = discoveredAsset1.getTags();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      String string0 = "z$`]LjA";
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.addTagsItem("z$`]LjA");
      String string1 = "ConnectionProvider[name={}]: Disposing pool for [{}]";
      DiscoveredAsset discoveredAsset2 = discoveredAsset0.putDetailsItem("ConnectionProvider[name={}]: Disposing pool for [{}]", "ConnectionProvider[name={}]: Disposing pool for [{}]");
      discoveredAsset2.description("z$`]LjA");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      discoveredAsset0.details(hashMap0);
      discoveredAsset0.getId();
      discoveredAsset1.name("z$`]LjA");
      XmlClass xmlClass0 = null;
      try {
        xmlClass0 = new XmlClass("ConnectionProvider[name={}]: Disposing pool for [{}]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         // Cannot find class in classpath: ConnectionProvider[name={}]: Disposing pool for [{}]
         //
         verifyException("org.testng.xml.XmlClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.addTagsItem((String) null);
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.description((String) null);
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.name((String) null);
      discoveredAsset3.setPath((String) null);
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.putDetailsItem("define", (Object) null);
      discoveredAsset0.setType("define");
      DiscoveredAsset discoveredAsset5 = discoveredAsset4.type("define");
      discoveredAsset5.setId("refCnt: ");
      String string0 = discoveredAsset5.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.type("OmYj1");
      Boolean boolean0 = Boolean.TRUE;
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.hasChildren(boolean0);
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.path("OmYj1");
      Object object0 = new Object();
      boolean boolean1 = discoveredAsset1.equals(object0);
      assertFalse(boolean1);
      
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.id("OmYj1");
      discoveredAsset2.id("o]q ]&ck`f@c, m,");
      discoveredAsset4.setType("OmYj1");
      discoveredAsset2.setId("OmYj1");
      discoveredAsset0.hashCode();
      discoveredAsset4.getId();
      assertFalse(boolean0.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DiscoveredAsset discoveredAsset0 = new DiscoveredAsset();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DiscoveredAsset discoveredAsset1 = discoveredAsset0.details(hashMap0);
      DiscoveredAsset discoveredAsset2 = discoveredAsset1.description("");
      discoveredAsset2.addTagsItem("X@V KPVq");
      Boolean boolean0 = XmlSuite.DEFAULT_MIXED;
      DiscoveredAsset discoveredAsset3 = discoveredAsset2.hasChildren(boolean0);
      DiscoveredAsset discoveredAsset4 = discoveredAsset3.id("");
      discoveredAsset2.hashCode();
      discoveredAsset1.setName("");
      DiscoveredAsset discoveredAsset5 = discoveredAsset4.addTagsItem("Lx_fu>$WuD");
      discoveredAsset5.setPath(".operationComplete()");
      discoveredAsset3.setDetails(hashMap0);
      Boolean boolean1 = discoveredAsset0.getHasChildren();
      assertFalse(boolean1);
  }
}
