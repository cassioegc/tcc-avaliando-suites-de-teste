/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 14:45:09 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.Locale;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlRun;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Locale_ESTest extends Locale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.variant("class Locale {\n    language: null\n    script: null\n    country: null\n    variant: null\n    extensionKeys: null\n    unicodeLocaleAttributes: null\n    unicodeLocaleKeys: java.util.Vector@0000000002\n    iso3Language: null\n    iso3Country: null\n    displayLanguage: null\n    displayScript: null\n    displayCountry: null\n    displayVariant: java.lang.String@0000000003\n    displayName: null\n}");
      String string0 = locale0.getVariant();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.variant("");
      String string0 = locale0.getVariant();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = new Locale();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getIncludedGroups();
      Locale locale1 = locale0.unicodeLocaleKeys(list0);
      List<String> list1 = locale1.getUnicodeLocaleKeys();
      assertSame(list0, list1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.addUnicodeLocaleKeysItem("Ys:A");
      List<String> list0 = locale0.getUnicodeLocaleKeys();
      assertTrue(list0.contains("Ys:A"));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = new Locale();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale locale1 = locale0.unicodeLocaleAttributes(arrayList0);
      List<String> list0 = locale1.getUnicodeLocaleAttributes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = locale0.addUnicodeLocaleAttributesItem("");
      List<String> list0 = locale1.getUnicodeLocaleAttributes();
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.script("XJ8-`2h$");
      String string0 = locale0.getScript();
      assertEquals("XJ8-`2h$", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.script("");
      String string0 = locale0.getScript();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setLanguage("5A.s4A5&RJ");
      String string0 = locale0.getLanguage();
      assertEquals("5A.s4A5&RJ", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setLanguage("");
      String string0 = locale0.getLanguage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = locale0.iso3Language("|");
      String string0 = locale1.getIso3Language();
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = locale0.iso3Language("");
      String string0 = locale1.getIso3Language();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.iso3Country("");
      String string0 = locale0.getIso3Country();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = new Locale();
      XmlRun xmlRun0 = new XmlRun();
      List<String> list0 = xmlRun0.getExcludes();
      Locale locale1 = locale0.extensionKeys(list0);
      List<String> list1 = locale1.getExtensionKeys();
      assertSame(list0, list1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.addExtensionKeysItem("5A.s4A5&RJ");
      List<String> list0 = locale0.getExtensionKeys();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setDisplayVariant("");
      String string0 = locale0.getDisplayVariant();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.displayScript("    extensionKeys: ");
      String string0 = locale0.getDisplayScript();
      assertEquals("    extensionKeys: ", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = locale0.displayScript("");
      String string0 = locale1.getDisplayScript();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.displayName("#_J92>/v");
      String string0 = locale0.getDisplayName();
      assertEquals("#_J92>/v", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.displayName("");
      String string0 = locale0.getDisplayName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.displayLanguage("La_G7?-WN(UM{ab");
      String string0 = locale0.getDisplayLanguage();
      assertEquals("La_G7?-WN(UM{ab", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setDisplayLanguage("");
      String string0 = locale0.getDisplayLanguage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.displayCountry("'`t%CZ;U`9qZ");
      String string0 = locale0.getDisplayCountry();
      assertEquals("'`t%CZ;U`9qZ", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setDisplayCountry("");
      String string0 = locale0.getDisplayCountry();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = locale0.country("1k\u0003Kl;k`G%b");
      String string0 = locale1.getCountry();
      assertEquals("1k\u0003Kl;k`G%b", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setCountry("");
      String string0 = locale0.getCountry();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = new Locale();
      Stack<String> stack0 = new Stack<String>();
      List<String> list0 = stack0.subList(0, 0);
      stack0.add((String) null);
      Locale locale1 = locale0.unicodeLocaleKeys(list0);
      // Undeclared exception!
      try { 
        locale1.addUnicodeLocaleKeysItem("    unicodeLocaleKeys: ");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = new Locale();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getIncludedGroups();
      Locale locale1 = locale0.unicodeLocaleKeys(list0);
      // Undeclared exception!
      try { 
        locale1.addUnicodeLocaleKeysItem("gz!xh");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = new Locale();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getExcludedGroups();
      Locale locale1 = locale0.unicodeLocaleAttributes(list0);
      // Undeclared exception!
      try { 
        locale1.addUnicodeLocaleAttributesItem("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = new Locale();
      XmlSuite xmlSuite0 = new XmlSuite();
      XmlTest xmlTest0 = new XmlTest(xmlSuite0);
      List<String> list0 = xmlTest0.getExcludedGroups();
      locale0.extensionKeys(list0);
      // Undeclared exception!
      try { 
        locale0.addExtensionKeysItem("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.addExtensionKeysItem("5A.s4A5&RJ");
      String string0 = locale0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setDisplayName("MW");
      Locale locale1 = new Locale();
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = new Locale();
      assertTrue(locale1.equals((Object)locale0));
      
      locale1.displayVariant("    displayScript: ");
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = new Locale();
      assertTrue(locale1.equals((Object)locale0));
      
      locale0.displayLanguage("");
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.iso3Country("");
      Locale locale1 = new Locale();
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = new Locale();
      assertTrue(locale1.equals((Object)locale0));
      
      locale0.setIso3Language("    displayCountry: ");
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = new Locale();
      assertTrue(locale1.equals((Object)locale0));
      
      locale1.addUnicodeLocaleKeysItem((String) null);
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = new Locale();
      assertTrue(locale1.equals((Object)locale0));
      
      locale1.addUnicodeLocaleAttributesItem("");
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = new Locale();
      boolean boolean0 = locale1.equals(locale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = new Locale();
      assertTrue(locale1.equals((Object)locale0));
      
      locale0.setVariant("_");
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.country("1k\u0003Kl;k`G%b");
      Locale locale1 = new Locale();
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = new Locale();
      Object object0 = new Object();
      boolean boolean0 = locale0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = new Locale();
      boolean boolean0 = locale0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = new Locale();
      boolean boolean0 = locale0.equals(locale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.addExtensionKeysItem("5A.s4A5&RJ");
      Locale locale1 = new Locale();
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = new Locale();
      String string0 = locale0.getLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = new Locale();
      List<String> list0 = locale0.getUnicodeLocaleAttributes();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = new Locale();
      String string0 = locale0.getVariant();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = new Locale();
      Locale locale1 = locale0.language("5A.s4A5&RJ");
      assertNull(locale1.getScript());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = new Locale();
      String string0 = locale0.getDisplayCountry();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = new Locale();
      String string0 = locale0.getCountry();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = new Locale();
      String string0 = locale0.getDisplayScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = new Locale();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      locale0.setUnicodeLocaleKeys(linkedList0);
      assertNull(locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = new Locale();
      String string0 = locale0.getDisplayLanguage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = new Locale();
      XmlSuite xmlSuite0 = new XmlSuite();
      List<String> list0 = xmlSuite0.getExcludedGroups();
      locale0.setUnicodeLocaleAttributes(list0);
      assertNull(locale0.getDisplayScript());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = new Locale();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      locale0.setExtensionKeys(linkedList0);
      Locale locale1 = locale0.addExtensionKeysItem("u@");
      assertNull(locale1.getDisplayCountry());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.script("5A.s4A5&RJ");
      Locale locale1 = new Locale();
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.displayVariant("Uy");
      String string0 = locale0.getDisplayVariant();
      assertEquals("Uy", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = new Locale();
      List<String> list0 = locale0.getExtensionKeys();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = new Locale();
      String string0 = locale0.getIso3Country();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Locale locale0 = new Locale();
      String string0 = locale0.getDisplayName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setLanguage("5A.s4A5&RJ");
      Locale locale1 = new Locale();
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = new Locale();
      String string0 = locale0.getIso3Language();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setScript("NWaa:>?`}PuvkZyamm");
      assertNull(locale0.getDisplayLanguage());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setDisplayScript("G,5(");
      Locale locale1 = new Locale();
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setIso3Country("'`t%CZ;U`9qZ");
      String string0 = locale0.getIso3Country();
      assertEquals("'`t%CZ;U`9qZ", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Locale locale0 = new Locale();
      locale0.setDisplayCountry("G,5(");
      Locale locale1 = new Locale();
      boolean boolean0 = locale1.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Locale locale0 = new Locale();
      List<String> list0 = locale0.getUnicodeLocaleKeys();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Locale locale0 = new Locale();
      String string0 = locale0.getScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = new Locale();
      String string0 = locale0.getDisplayVariant();
      assertNull(string0);
  }
}
