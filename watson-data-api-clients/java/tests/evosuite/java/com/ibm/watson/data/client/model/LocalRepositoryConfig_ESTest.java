/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 15:56:25 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.Classification;
import com.ibm.watson.data.client.model.Connection;
import com.ibm.watson.data.client.model.LocalRepositoryConfig;
import com.ibm.watson.data.client.model.TypeDefSummary;
import com.ibm.watson.data.client.model.enums.EventTypeFilter;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalRepositoryConfig_ESTest extends LocalRepositoryConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      TypeDefSummary typeDefSummary0 = new TypeDefSummary();
      LocalRepositoryConfig localRepositoryConfig1 = localRepositoryConfig0.addSelectedTypesToSaveItem(typeDefSummary0);
      List<TypeDefSummary> list0 = localRepositoryConfig1.getSelectedTypesToSave();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      localRepositoryConfig0.setMetadataCollectionName("");
      String string0 = localRepositoryConfig0.getMetadataCollectionName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      localRepositoryConfig0.metadataCollectionId("1iAW.Ub2op+@Ma");
      String string0 = localRepositoryConfig0.getMetadataCollectionId();
      assertEquals("1iAW.Ub2op+@Ma", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      localRepositoryConfig0.metadataCollectionId("");
      String string0 = localRepositoryConfig0.getMetadataCollectionId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = new Connection();
      localRepositoryConfig0.localRepositoryRemoteConnection(connection0);
      Connection connection1 = localRepositoryConfig0.getLocalRepositoryRemoteConnection();
      assertNull(connection1.getUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = new Connection();
      LocalRepositoryConfig localRepositoryConfig1 = localRepositoryConfig0.eventMapperConnection(connection0);
      Connection connection1 = localRepositoryConfig1.getEventMapperConnection();
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = new Connection();
      Classification classification0 = new Classification();
      Classification classification1 = classification0.putClassificationPropertiesItem("", connection0);
      Map<String, Object> map0 = classification1.getClassificationProperties();
      connection0.setSecuredProperties(map0);
      LocalRepositoryConfig localRepositoryConfig1 = localRepositoryConfig0.localRepositoryRemoteConnection(connection0);
      // Undeclared exception!
      try { 
        localRepositoryConfig1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = new Connection();
      LocalRepositoryConfig localRepositoryConfig1 = new LocalRepositoryConfig();
      assertTrue(localRepositoryConfig1.equals((Object)localRepositoryConfig0));
      
      localRepositoryConfig0.localRepositoryLocalConnection(connection0);
      boolean boolean0 = localRepositoryConfig1.equals(localRepositoryConfig0);
      assertFalse(localRepositoryConfig1.equals((Object)localRepositoryConfig0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      LocalRepositoryConfig localRepositoryConfig1 = new LocalRepositoryConfig();
      assertTrue(localRepositoryConfig1.equals((Object)localRepositoryConfig0));
      
      localRepositoryConfig0.metadataCollectionName("class LocalRepositoryConfig {\n");
      boolean boolean0 = localRepositoryConfig1.equals(localRepositoryConfig0);
      assertFalse(localRepositoryConfig1.equals((Object)localRepositoryConfig0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      LocalRepositoryConfig localRepositoryConfig1 = new LocalRepositoryConfig();
      localRepositoryConfig1.metadataCollectionId("");
      boolean boolean0 = localRepositoryConfig0.equals(localRepositoryConfig1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      EventTypeFilter eventTypeFilter0 = EventTypeFilter.LEARNED_TYPES;
      boolean boolean0 = localRepositoryConfig0.equals(eventTypeFilter0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      boolean boolean0 = localRepositoryConfig0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      boolean boolean0 = localRepositoryConfig0.equals(localRepositoryConfig0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      TypeDefSummary typeDefSummary0 = new TypeDefSummary();
      LocalRepositoryConfig localRepositoryConfig1 = localRepositoryConfig0.addSelectedTypesToSendItem(typeDefSummary0);
      List<TypeDefSummary> list0 = localRepositoryConfig1.getSelectedTypesToSend();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      TypeDefSummary typeDefSummary0 = new TypeDefSummary();
      Vector<TypeDefSummary> vector0 = new Vector<TypeDefSummary>();
      localRepositoryConfig0.selectedTypesToSend(vector0);
      LocalRepositoryConfig localRepositoryConfig1 = localRepositoryConfig0.addSelectedTypesToSendItem(typeDefSummary0);
      assertNull(localRepositoryConfig1.getMetadataCollectionId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      TypeDefSummary typeDefSummary0 = new TypeDefSummary();
      localRepositoryConfig0.addSelectedTypesToSaveItem(typeDefSummary0);
      LocalRepositoryConfig localRepositoryConfig1 = new LocalRepositoryConfig();
      boolean boolean0 = localRepositoryConfig0.equals(localRepositoryConfig1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      TypeDefSummary typeDefSummary0 = new TypeDefSummary();
      Vector<TypeDefSummary> vector0 = new Vector<TypeDefSummary>();
      LocalRepositoryConfig localRepositoryConfig1 = localRepositoryConfig0.selectedTypesToSave(vector0);
      localRepositoryConfig1.addSelectedTypesToSaveItem(typeDefSummary0);
      assertTrue(vector0.contains(typeDefSummary0));
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Vector<TypeDefSummary> vector0 = new Vector<TypeDefSummary>();
      localRepositoryConfig0.selectedTypesToSave(vector0);
      List<TypeDefSummary> list0 = localRepositoryConfig0.getSelectedTypesToSave();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      EventTypeFilter eventTypeFilter0 = EventTypeFilter.LEARNED_TYPES;
      localRepositoryConfig0.setEventsToSaveRule(eventTypeFilter0);
      EventTypeFilter eventTypeFilter1 = localRepositoryConfig0.getEventsToSaveRule();
      assertEquals(EventTypeFilter.LEARNED_TYPES, eventTypeFilter1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      List<TypeDefSummary> list0 = localRepositoryConfig0.getSelectedTypesToSend();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = new Connection();
      localRepositoryConfig0.localRepositoryRemoteConnection(connection0);
      String string0 = localRepositoryConfig0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = new Connection();
      LocalRepositoryConfig localRepositoryConfig1 = localRepositoryConfig0.localRepositoryLocalConnection(connection0);
      Connection connection1 = localRepositoryConfig1.getLocalRepositoryLocalConnection();
      assertNull(connection1.getUrl());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      localRepositoryConfig0.setSelectedTypesToSend((List<TypeDefSummary>) null);
      assertNull(localRepositoryConfig0.getEventsToSaveRule());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      EventTypeFilter eventTypeFilter0 = EventTypeFilter.ALL;
      localRepositoryConfig0.eventsToSendRule(eventTypeFilter0);
      EventTypeFilter eventTypeFilter1 = localRepositoryConfig0.getEventsToSendRule();
      assertEquals(EventTypeFilter.ALL, eventTypeFilter1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Vector<TypeDefSummary> vector0 = new Vector<TypeDefSummary>();
      localRepositoryConfig0.setSelectedTypesToSave(vector0);
      assertNull(localRepositoryConfig0.getMetadataCollectionName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      String string0 = localRepositoryConfig0.getMetadataCollectionName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      List<TypeDefSummary> list0 = localRepositoryConfig0.getSelectedTypesToSave();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      localRepositoryConfig0.metadataCollectionName("class LocalRepositoryConfig {\n");
      String string0 = localRepositoryConfig0.getMetadataCollectionName();
      assertEquals("class LocalRepositoryConfig {\n", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      localRepositoryConfig0.getEventsToSaveRule();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = new Connection();
      localRepositoryConfig0.setLocalRepositoryLocalConnection(connection0);
      assertNull(connection0.getGuid());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      String string0 = localRepositoryConfig0.getMetadataCollectionId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      localRepositoryConfig0.setMetadataCollectionId("}@FH$7rk#");
      assertNull(localRepositoryConfig0.getEventsToSendRule());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Vector<TypeDefSummary> vector0 = new Vector<TypeDefSummary>();
      LocalRepositoryConfig localRepositoryConfig1 = localRepositoryConfig0.selectedTypesToSend(vector0);
      List<TypeDefSummary> list0 = localRepositoryConfig1.getSelectedTypesToSend();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      localRepositoryConfig0.getEventsToSendRule();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = localRepositoryConfig0.getLocalRepositoryLocalConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = new Connection();
      localRepositoryConfig0.setLocalRepositoryRemoteConnection(connection0);
      assertNull(connection0.getDescription());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      EventTypeFilter eventTypeFilter0 = EventTypeFilter.REGISTRATION_ONLY;
      LocalRepositoryConfig localRepositoryConfig1 = localRepositoryConfig0.eventsToSaveRule(eventTypeFilter0);
      assertNull(localRepositoryConfig1.getEventsToSendRule());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      localRepositoryConfig0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = localRepositoryConfig0.getLocalRepositoryRemoteConnection();
      assertNull(connection0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = new Connection();
      localRepositoryConfig0.setEventMapperConnection(connection0);
      assertNull(localRepositoryConfig0.getEventsToSaveRule());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      EventTypeFilter eventTypeFilter0 = EventTypeFilter.LEARNED_TYPES;
      localRepositoryConfig0.setEventsToSendRule(eventTypeFilter0);
      assertNull(localRepositoryConfig0.getMetadataCollectionId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalRepositoryConfig localRepositoryConfig0 = new LocalRepositoryConfig();
      Connection connection0 = localRepositoryConfig0.getEventMapperConnection();
      assertNull(connection0);
  }
}
