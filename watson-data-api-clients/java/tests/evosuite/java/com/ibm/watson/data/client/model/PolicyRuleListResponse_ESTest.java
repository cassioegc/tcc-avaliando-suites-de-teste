/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 23:08:20 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.HrefModel;
import com.ibm.watson.data.client.model.PolicyRuleListResponse;
import com.ibm.watson.data.client.model.PolicyRuleResponse;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PolicyRuleListResponse_ESTest extends PolicyRuleListResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      policyRuleListResponse0.resources((List<PolicyRuleResponse>) null);
      List<PolicyRuleResponse> list0 = policyRuleListResponse0.getResources();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      HrefModel hrefModel0 = new HrefModel();
      policyRuleListResponse0.setPrevious(hrefModel0);
      HrefModel hrefModel1 = policyRuleListResponse0.getPrevious();
      assertNull(hrefModel1.getHref());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      PolicyRuleListResponse policyRuleListResponse1 = policyRuleListResponse0.resources((List<PolicyRuleResponse>) null);
      PolicyRuleResponse policyRuleResponse0 = new PolicyRuleResponse();
      // Undeclared exception!
      try { 
        policyRuleListResponse1.addResourcesItem(policyRuleResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.PolicyRuleListResponse", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      PolicyRuleListResponse policyRuleListResponse1 = new PolicyRuleListResponse();
      assertTrue(policyRuleListResponse1.equals((Object)policyRuleListResponse0));
      
      PolicyRuleResponse policyRuleResponse0 = new PolicyRuleResponse();
      policyRuleListResponse0.addResourcesItem(policyRuleResponse0);
      boolean boolean0 = policyRuleListResponse0.equals(policyRuleListResponse1);
      assertFalse(policyRuleListResponse1.equals((Object)policyRuleListResponse0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      HrefModel hrefModel0 = new HrefModel();
      policyRuleListResponse0.setPrevious(hrefModel0);
      PolicyRuleListResponse policyRuleListResponse1 = new PolicyRuleListResponse();
      boolean boolean0 = policyRuleListResponse0.equals(policyRuleListResponse1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      PolicyRuleListResponse policyRuleListResponse1 = new PolicyRuleListResponse();
      boolean boolean0 = policyRuleListResponse0.equals(policyRuleListResponse1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      boolean boolean0 = policyRuleListResponse0.equals("com.ibm.watson.data.client.model.PolicyRuleListResponse");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      boolean boolean0 = policyRuleListResponse0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      boolean boolean0 = policyRuleListResponse0.equals(policyRuleListResponse0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      PolicyRuleListResponse policyRuleListResponse1 = new PolicyRuleListResponse();
      assertTrue(policyRuleListResponse1.equals((Object)policyRuleListResponse0));
      
      HrefModel hrefModel0 = new HrefModel();
      policyRuleListResponse0.setNext(hrefModel0);
      boolean boolean0 = policyRuleListResponse1.equals(policyRuleListResponse0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      String string0 = policyRuleListResponse0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      policyRuleListResponse0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      HrefModel hrefModel0 = policyRuleListResponse0.getPrevious();
      assertNull(hrefModel0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      List<PolicyRuleResponse> list0 = policyRuleListResponse0.getResources();
      policyRuleListResponse0.setResources(list0);
      assertNull(policyRuleListResponse0.getLimit());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PolicyRuleListResponse policyRuleListResponse0 = new PolicyRuleListResponse();
      PolicyRuleResponse policyRuleResponse0 = new PolicyRuleResponse();
      policyRuleListResponse0.addResourcesItem(policyRuleResponse0);
      List<PolicyRuleResponse> list0 = policyRuleListResponse0.getResources();
      assertEquals(1, list0.size());
  }
}
