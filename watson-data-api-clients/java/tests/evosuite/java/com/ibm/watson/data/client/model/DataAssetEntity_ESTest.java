/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:06:13 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.ColumnDetail;
import com.ibm.watson.data.client.model.DataAssetEntity;
import com.ibm.watson.data.client.model.NameValuePair;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DataAssetEntity_ESTest extends DataAssetEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      ArrayList<NameValuePair> arrayList0 = new ArrayList<NameValuePair>();
      dataAssetEntity0.setProperties(arrayList0);
      List<NameValuePair> list0 = dataAssetEntity0.getProperties();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      Stack<NameValuePair> stack0 = new Stack<NameValuePair>();
      NameValuePair nameValuePair0 = new NameValuePair();
      stack0.add(nameValuePair0);
      dataAssetEntity0.setProperties(stack0);
      List<NameValuePair> list0 = dataAssetEntity0.getProperties();
      assertTrue(list0.contains(nameValuePair0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      dataAssetEntity0.setMimeType("3fQA{L5bLF4`");
      String string0 = dataAssetEntity0.getMimeType();
      assertEquals("3fQA{L5bLF4`", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      dataAssetEntity0.setMimeType("");
      String string0 = dataAssetEntity0.getMimeType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      XmlSuite xmlSuite0 = new XmlSuite();
      Boolean boolean0 = xmlSuite0.getPreserveOrder();
      dataAssetEntity0.setDataset(boolean0);
      Boolean boolean1 = dataAssetEntity0.getDataset();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      Boolean boolean0 = XmlSuite.DEFAULT_MIXED;
      dataAssetEntity0.setDataset(boolean0);
      Boolean boolean1 = dataAssetEntity0.getDataset();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      Stack<ColumnDetail> stack0 = new Stack<ColumnDetail>();
      dataAssetEntity0.setColumns(stack0);
      List<ColumnDetail> list0 = dataAssetEntity0.getColumns();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      Vector<ColumnDetail> vector0 = new Vector<ColumnDetail>();
      ColumnDetail columnDetail0 = new ColumnDetail();
      vector0.add(columnDetail0);
      dataAssetEntity0.setColumns(vector0);
      List<ColumnDetail> list0 = dataAssetEntity0.getColumns();
      assertTrue(list0.contains(columnDetail0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      DataAssetEntity dataAssetEntity1 = new DataAssetEntity();
      assertTrue(dataAssetEntity1.equals((Object)dataAssetEntity0));
      
      Vector<NameValuePair> vector0 = new Vector<NameValuePair>();
      dataAssetEntity1.setProperties(vector0);
      boolean boolean0 = dataAssetEntity1.equals(dataAssetEntity0);
      assertFalse(dataAssetEntity1.equals((Object)dataAssetEntity0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      ArrayList<ColumnDetail> arrayList0 = new ArrayList<ColumnDetail>();
      dataAssetEntity0.setColumns(arrayList0);
      DataAssetEntity dataAssetEntity1 = new DataAssetEntity();
      boolean boolean0 = dataAssetEntity0.equals(dataAssetEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      NameValuePair nameValuePair0 = new NameValuePair();
      boolean boolean0 = dataAssetEntity0.equals(nameValuePair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      DataAssetEntity dataAssetEntity1 = new DataAssetEntity();
      boolean boolean0 = dataAssetEntity0.equals(dataAssetEntity1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      boolean boolean0 = dataAssetEntity0.equals(dataAssetEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      boolean boolean0 = dataAssetEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      Boolean boolean0 = dataAssetEntity0.getDataset();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      List<ColumnDetail> list0 = dataAssetEntity0.getColumns();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      dataAssetEntity0.setMimeType("");
      DataAssetEntity dataAssetEntity1 = new DataAssetEntity();
      boolean boolean0 = dataAssetEntity0.equals(dataAssetEntity1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      List<NameValuePair> list0 = dataAssetEntity0.getProperties();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      String string0 = dataAssetEntity0.toString();
      assertEquals("class DataAssetEntity {\n    mimeType: null\n    dataset: null\n    columns: null\n    properties: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      Boolean boolean0 = XmlSuite.DEFAULT_ALLOW_RETURN_VALUES;
      dataAssetEntity0.setDataset(boolean0);
      DataAssetEntity dataAssetEntity1 = new DataAssetEntity();
      boolean boolean1 = dataAssetEntity0.equals(dataAssetEntity1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      String string0 = dataAssetEntity0.getMimeType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DataAssetEntity dataAssetEntity0 = new DataAssetEntity();
      dataAssetEntity0.hashCode();
  }
}
