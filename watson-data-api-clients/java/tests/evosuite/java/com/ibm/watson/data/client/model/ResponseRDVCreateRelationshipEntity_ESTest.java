/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 19:11:18 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.RelationshipCreateResponseIds;
import com.ibm.watson.data.client.model.ResponseRDVCreateRelationshipEntity;
import java.time.chrono.IsoEra;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResponseRDVCreateRelationshipEntity_ESTest extends ResponseRDVCreateRelationshipEntity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      Vector<RelationshipCreateResponseIds> vector0 = new Vector<RelationshipCreateResponseIds>();
      responseRDVCreateRelationshipEntity0.terms(vector0);
      List<RelationshipCreateResponseIds> list0 = responseRDVCreateRelationshipEntity0.getTerms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity1 = responseRDVCreateRelationshipEntity0.code("reactor.left.h2cUpgradeHandler");
      String string0 = responseRDVCreateRelationshipEntity1.getCode();
      assertEquals("reactor.left.h2cUpgradeHandler", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      responseRDVCreateRelationshipEntity0.code("");
      String string0 = responseRDVCreateRelationshipEntity0.getCode();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity1 = responseRDVCreateRelationshipEntity0.child(arrayList0);
      List<Object> list0 = responseRDVCreateRelationshipEntity1.getChild();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      boolean boolean0 = responseRDVCreateRelationshipEntity0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      boolean boolean0 = responseRDVCreateRelationshipEntity0.equals(responseRDVCreateRelationshipEntity0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      Object object0 = new Object();
      boolean boolean0 = responseRDVCreateRelationshipEntity0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      IsoEra isoEra0 = IsoEra.of(1);
      responseRDVCreateRelationshipEntity0.addChildItem(isoEra0);
      List<Object> list0 = responseRDVCreateRelationshipEntity0.getChild();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      Stack<Object> stack0 = new Stack<Object>();
      responseRDVCreateRelationshipEntity0.child(stack0);
      Integer integer0 = XmlSuite.DEFAULT_VERBOSE;
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity1 = responseRDVCreateRelationshipEntity0.addChildItem(integer0);
      assertSame(responseRDVCreateRelationshipEntity0, responseRDVCreateRelationshipEntity1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      RelationshipCreateResponseIds relationshipCreateResponseIds0 = new RelationshipCreateResponseIds();
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity1 = responseRDVCreateRelationshipEntity0.addTermsItem(relationshipCreateResponseIds0);
      List<RelationshipCreateResponseIds> list0 = responseRDVCreateRelationshipEntity1.getTerms();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      responseRDVCreateRelationshipEntity0.setCode("");
      assertEquals("", responseRDVCreateRelationshipEntity0.getCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      responseRDVCreateRelationshipEntity0.code("");
      String string0 = responseRDVCreateRelationshipEntity0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      responseRDVCreateRelationshipEntity0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      List<RelationshipCreateResponseIds> list0 = responseRDVCreateRelationshipEntity0.getTerms();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      String string0 = responseRDVCreateRelationshipEntity0.getCode();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      responseRDVCreateRelationshipEntity0.setChild((List<Object>) null);
      assertNull(responseRDVCreateRelationshipEntity0.getCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      List<Object> list0 = responseRDVCreateRelationshipEntity0.getChild();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity0 = new ResponseRDVCreateRelationshipEntity();
      Stack<RelationshipCreateResponseIds> stack0 = new Stack<RelationshipCreateResponseIds>();
      responseRDVCreateRelationshipEntity0.setTerms(stack0);
      RelationshipCreateResponseIds relationshipCreateResponseIds0 = new RelationshipCreateResponseIds();
      ResponseRDVCreateRelationshipEntity responseRDVCreateRelationshipEntity1 = responseRDVCreateRelationshipEntity0.addTermsItem(relationshipCreateResponseIds0);
      assertSame(responseRDVCreateRelationshipEntity0, responseRDVCreateRelationshipEntity1);
  }
}
