/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 20:00:25 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.BinaryClassification;
import com.ibm.watson.data.client.model.ConfusionMatrix;
import com.ibm.watson.data.client.model.RocCurve;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryClassification_ESTest extends BinaryClassification_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      ArrayList<RocCurve> arrayList0 = new ArrayList<RocCurve>();
      binaryClassification0.rocCurves(arrayList0);
      List<RocCurve> list0 = binaryClassification0.getRocCurves();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      RocCurve rocCurve0 = new RocCurve();
      BinaryClassification binaryClassification1 = binaryClassification0.addRocCurvesItem(rocCurve0);
      List<RocCurve> list0 = binaryClassification1.getRocCurves();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      ArrayList<ConfusionMatrix> arrayList0 = new ArrayList<ConfusionMatrix>();
      BinaryClassification binaryClassification1 = binaryClassification0.confusionMatrices(arrayList0);
      List<ConfusionMatrix> list0 = binaryClassification1.getConfusionMatrices();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      BinaryClassification binaryClassification1 = binaryClassification0.addConfusionMatricesItem(confusionMatrix0);
      List<ConfusionMatrix> list0 = binaryClassification1.getConfusionMatrices();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      RocCurve rocCurve0 = new RocCurve();
      BinaryClassification binaryClassification1 = binaryClassification0.addRocCurvesItem(rocCurve0);
      String string0 = binaryClassification1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      Stack<ConfusionMatrix> stack0 = new Stack<ConfusionMatrix>();
      BinaryClassification binaryClassification1 = binaryClassification0.confusionMatrices(stack0);
      BinaryClassification binaryClassification2 = new BinaryClassification();
      assertFalse(binaryClassification2.equals((Object)binaryClassification0));
      
      BinaryClassification binaryClassification3 = binaryClassification2.confusionMatrices(stack0);
      boolean boolean0 = binaryClassification3.equals(binaryClassification1);
      assertTrue(binaryClassification2.equals((Object)binaryClassification0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      Stack<ConfusionMatrix> stack0 = new Stack<ConfusionMatrix>();
      BinaryClassification binaryClassification1 = binaryClassification0.confusionMatrices(stack0);
      BinaryClassification binaryClassification2 = new BinaryClassification();
      boolean boolean0 = binaryClassification2.equals(binaryClassification1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      boolean boolean0 = binaryClassification0.equals(confusionMatrix0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      boolean boolean0 = binaryClassification0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      boolean boolean0 = binaryClassification0.equals(binaryClassification0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      RocCurve rocCurve0 = new RocCurve();
      binaryClassification0.addRocCurvesItem(rocCurve0);
      BinaryClassification binaryClassification1 = new BinaryClassification();
      boolean boolean0 = binaryClassification0.equals(binaryClassification1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      ConfusionMatrix confusionMatrix0 = new ConfusionMatrix();
      BinaryClassification binaryClassification1 = binaryClassification0.addConfusionMatricesItem(confusionMatrix0);
      BinaryClassification binaryClassification2 = binaryClassification1.addConfusionMatricesItem(confusionMatrix0);
      assertSame(binaryClassification2, binaryClassification0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      binaryClassification0.setConfusionMatrices((List<ConfusionMatrix>) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      Stack<RocCurve> stack0 = new Stack<RocCurve>();
      BinaryClassification binaryClassification1 = binaryClassification0.rocCurves(stack0);
      binaryClassification1.addRocCurvesItem((RocCurve) null);
      assertEquals("[null]", stack0.toString());
      assertFalse(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      List<ConfusionMatrix> list0 = binaryClassification0.getConfusionMatrices();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      binaryClassification0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryClassification binaryClassification0 = new BinaryClassification();
      List<RocCurve> list0 = binaryClassification0.getRocCurves();
      binaryClassification0.setRocCurves(list0);
  }
}
