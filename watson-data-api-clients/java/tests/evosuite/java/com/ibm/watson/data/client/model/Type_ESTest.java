/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 16:41:10 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.AssetTypeField;
import com.ibm.watson.data.client.model.AssetTypeProperty;
import com.ibm.watson.data.client.model.AssetTypeRelationship;
import com.ibm.watson.data.client.model.ExternalAssetPreview;
import com.ibm.watson.data.client.model.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Type_ESTest extends Type_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type type0 = new Type();
      Double double0 = new Double(0.0);
      Type type1 = type0.version(double0);
      Double double1 = type1.getVersion();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Type type0 = new Type();
      Double double0 = new Double(2085.371874854798);
      type0.version(double0);
      Double double1 = type0.getVersion();
      assertEquals(2085.371874854798, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Type type0 = new Type();
      Double double0 = new Double((-2071.581573301783));
      type0.version(double0);
      Double double1 = type0.getVersion();
      assertEquals((-2071.581573301783), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = new Type();
      AssetTypeRelationship assetTypeRelationship0 = new AssetTypeRelationship();
      type0.addRelationshipsItem(assetTypeRelationship0);
      List<AssetTypeRelationship> list0 = type0.getRelationships();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type type0 = new Type();
      HashMap<String, AssetTypeProperty> hashMap0 = new HashMap<String, AssetTypeProperty>();
      Type type1 = type0.properties(hashMap0);
      Map<String, AssetTypeProperty> map0 = type1.getProperties();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type type0 = new Type();
      Type type1 = type0.putPropertiesItem("", (AssetTypeProperty) null);
      Map<String, AssetTypeProperty> map0 = type1.getProperties();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type type0 = new Type();
      Type type1 = type0.name("");
      String string0 = type1.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type type0 = new Type();
      type0.fields((List<AssetTypeField>) null);
      List<AssetTypeField> list0 = type0.getFields();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type type0 = new Type();
      Type type1 = type0.description("b.sxuxGMHn2>s");
      String string0 = type1.getDescription();
      assertEquals("b.sxuxGMHn2>s", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Type type0 = new Type();
      Type type1 = type0.description("");
      String string0 = type1.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type type0 = new Type();
      type0.fields((List<AssetTypeField>) null);
      // Undeclared exception!
      try { 
        type0.addFieldsItem((AssetTypeField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.Type", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = new Type();
      Type type1 = new Type();
      assertTrue(type1.equals((Object)type0));
      
      Double double0 = new Double(99.582991);
      type0.setVersion(double0);
      boolean boolean0 = type0.equals(type1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Type type0 = new Type();
      Type type1 = new Type();
      boolean boolean0 = type0.equals(type1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Type type0 = new Type();
      Type type1 = new Type();
      assertTrue(type1.equals((Object)type0));
      
      AssetTypeProperty assetTypeProperty0 = new AssetTypeProperty();
      type0.putPropertiesItem((String) null, assetTypeProperty0);
      boolean boolean0 = type0.equals(type1);
      assertFalse(type1.equals((Object)type0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Type type0 = new Type();
      LinkedList<AssetTypeRelationship> linkedList0 = new LinkedList<AssetTypeRelationship>();
      Type type1 = new Type();
      assertTrue(type1.equals((Object)type0));
      
      type0.relationships(linkedList0);
      boolean boolean0 = type0.equals(type1);
      assertFalse(type1.equals((Object)type0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Type type0 = new Type();
      Type type1 = new Type();
      Type type2 = type1.description((String) null);
      assertTrue(type2.equals((Object)type0));
      
      ExternalAssetPreview externalAssetPreview0 = new ExternalAssetPreview();
      Type type3 = type2.externalAssetPreview(externalAssetPreview0);
      boolean boolean0 = type0.equals(type3);
      assertFalse(type2.equals((Object)type0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Type type0 = new Type();
      Type type1 = new Type();
      Vector<AssetTypeField> vector0 = new Vector<AssetTypeField>();
      Type type2 = type1.fields(vector0);
      assertTrue(type2.equals((Object)type0));
      
      AssetTypeField assetTypeField0 = new AssetTypeField();
      vector0.add(assetTypeField0);
      boolean boolean0 = type0.equals(type2);
      assertFalse(type2.equals((Object)type0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Type type0 = new Type();
      Type type1 = new Type();
      type1.setDescription("java.util.concurrent.ThreadPoolExecutor");
      boolean boolean0 = type0.equals(type1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Type type0 = new Type();
      AssetTypeField assetTypeField0 = new AssetTypeField();
      boolean boolean0 = type0.equals(assetTypeField0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Type type0 = new Type();
      boolean boolean0 = type0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Type type0 = new Type();
      boolean boolean0 = type0.equals(type0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Type type0 = new Type();
      Type type1 = new Type();
      assertTrue(type1.equals((Object)type0));
      
      Type type2 = type1.name("class Type {\n    description: null\n    fields: java.util.ArrayList@0000000003\n    externalAssetPreview: null\n    relationships: null\n    properties: null\n    name: null\n    version: null\n}");
      boolean boolean0 = type0.equals(type2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Type type0 = new Type();
      AssetTypeRelationship assetTypeRelationship0 = new AssetTypeRelationship();
      type0.addRelationshipsItem(assetTypeRelationship0);
      Type type1 = type0.addRelationshipsItem(assetTypeRelationship0);
      assertNull(type1.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Type type0 = new Type();
      type0.setRelationships((List<AssetTypeRelationship>) null);
      assertNull(type0.getDescription());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Type type0 = new Type();
      String string0 = type0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Type type0 = new Type();
      String string0 = type0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Type type0 = new Type();
      Map<String, AssetTypeProperty> map0 = type0.getProperties();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Type type0 = new Type();
      type0.setName("reactor.core.publisher.MonoMetricsFuseable");
      assertEquals("reactor.core.publisher.MonoMetricsFuseable", type0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Type type0 = new Type();
      List<AssetTypeField> list0 = type0.getFields();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Type type0 = new Type();
      List<AssetTypeRelationship> list0 = type0.getRelationships();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Type type0 = new Type();
      ExternalAssetPreview externalAssetPreview0 = type0.getExternalAssetPreview();
      assertNull(externalAssetPreview0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Type type0 = new Type();
      Double double0 = type0.getVersion();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Type type0 = new Type();
      type0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Type type0 = new Type();
      String string0 = type0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Type type0 = new Type();
      AssetTypeField assetTypeField0 = new AssetTypeField();
      type0.addFieldsItem(assetTypeField0);
      List<AssetTypeField> list0 = type0.getFields();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Type type0 = new Type();
      type0.setProperties((Map<String, AssetTypeProperty>) null);
      assertNull(type0.getDescription());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Type type0 = new Type();
      type0.setFields((List<AssetTypeField>) null);
      assertNull(type0.getDescription());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Type type0 = new Type();
      HashMap<String, AssetTypeProperty> hashMap0 = new HashMap<String, AssetTypeProperty>();
      Type type1 = type0.properties(hashMap0);
      AssetTypeProperty assetTypeProperty0 = new AssetTypeProperty();
      type1.putPropertiesItem((String) null, assetTypeProperty0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Type type0 = new Type();
      type0.name("class Type {\n    description: null\n    fields: java.util.ArrayList@0000000003\n    externalAssetPreview: null\n    relationships: null\n    properties: null\n    name: null\n    version: null\n}");
      String string0 = type0.getName();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Type type0 = new Type();
      ArrayList<AssetTypeRelationship> arrayList0 = new ArrayList<AssetTypeRelationship>();
      Type type1 = type0.relationships(arrayList0);
      List<AssetTypeRelationship> list0 = type1.getRelationships();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Type type0 = new Type();
      ExternalAssetPreview externalAssetPreview0 = new ExternalAssetPreview();
      type0.setExternalAssetPreview(externalAssetPreview0);
      ExternalAssetPreview externalAssetPreview1 = type0.getExternalAssetPreview();
      assertSame(externalAssetPreview1, externalAssetPreview0);
  }
}
