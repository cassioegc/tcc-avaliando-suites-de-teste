/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 18:20:06 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ibm.watson.data.client.model.ColumnTypeDetails;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColumnTypeDetails_ESTest extends ColumnTypeDetails_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = Boolean.TRUE;
      columnTypeDetails0.setUnique(boolean0);
      Boolean boolean1 = columnTypeDetails0.getUnique();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = Boolean.valueOf(false);
      columnTypeDetails0.setUnique(boolean0);
      Boolean boolean1 = columnTypeDetails0.getUnique();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      columnTypeDetails0.setType("    isUnique: ");
      String string0 = columnTypeDetails0.getType();
      assertEquals("    isUnique: ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = Boolean.valueOf(true);
      columnTypeDetails0.setSigned(boolean0);
      Boolean boolean1 = columnTypeDetails0.getSigned();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = new Boolean(false);
      columnTypeDetails0.setSigned(boolean0);
      Boolean boolean1 = columnTypeDetails0.getSigned();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Double double0 = new Double((-1021.2585962866));
      columnTypeDetails0.setScale(double0);
      Double double1 = columnTypeDetails0.getScale();
      assertEquals((-1021.2585962866), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Double double0 = new Double(0.0);
      columnTypeDetails0.setScale(double0);
      Double double1 = columnTypeDetails0.getScale();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Double double0 = new Double(1373.9812);
      columnTypeDetails0.setScale(double0);
      Double double1 = columnTypeDetails0.getScale();
      assertEquals(1373.9812, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Double double0 = new Double(1766.206826890011);
      columnTypeDetails0.setScale(double0);
      Double double1 = columnTypeDetails0.getScale();
      assertEquals(1766.206826890011, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = Boolean.TRUE;
      columnTypeDetails0.setNullable(boolean0);
      Boolean boolean1 = columnTypeDetails0.getNullable();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = Boolean.FALSE;
      columnTypeDetails0.setNullable(boolean0);
      Boolean boolean1 = columnTypeDetails0.getNullable();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Double double0 = new Double((-365.95));
      columnTypeDetails0.setLength(double0);
      Double double1 = columnTypeDetails0.getLength();
      assertEquals((-365.95), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Double double0 = new Double(0.0);
      columnTypeDetails0.setLength(double0);
      Double double1 = columnTypeDetails0.getLength();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Double double0 = new Double(1.0);
      columnTypeDetails0.setLength(double0);
      Double double1 = columnTypeDetails0.getLength();
      assertEquals(1.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = new Boolean(true);
      columnTypeDetails0.setSigned(boolean0);
      String string0 = columnTypeDetails0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Double double0 = new Double((-1630.077139547996));
      columnTypeDetails0.setScale(double0);
      ColumnTypeDetails columnTypeDetails1 = new ColumnTypeDetails();
      boolean boolean0 = columnTypeDetails0.equals(columnTypeDetails1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      ColumnTypeDetails columnTypeDetails1 = new ColumnTypeDetails();
      assertTrue(columnTypeDetails1.equals((Object)columnTypeDetails0));
      
      Boolean boolean0 = Boolean.TRUE;
      columnTypeDetails1.setSigned(boolean0);
      boolean boolean1 = columnTypeDetails0.equals(columnTypeDetails1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = Boolean.FALSE;
      columnTypeDetails0.setUnique(boolean0);
      ColumnTypeDetails columnTypeDetails1 = new ColumnTypeDetails();
      boolean boolean1 = columnTypeDetails0.equals(columnTypeDetails1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      ColumnTypeDetails columnTypeDetails1 = new ColumnTypeDetails();
      boolean boolean0 = columnTypeDetails0.equals(columnTypeDetails1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = Boolean.valueOf(false);
      columnTypeDetails0.setNullable(boolean0);
      ColumnTypeDetails columnTypeDetails1 = new ColumnTypeDetails();
      boolean boolean1 = columnTypeDetails0.equals(columnTypeDetails1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      ColumnTypeDetails columnTypeDetails1 = new ColumnTypeDetails();
      columnTypeDetails0.setType("$kmV,cq");
      boolean boolean0 = columnTypeDetails1.equals(columnTypeDetails0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Object object0 = new Object();
      boolean boolean0 = columnTypeDetails0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      boolean boolean0 = columnTypeDetails0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      boolean boolean0 = columnTypeDetails0.equals(columnTypeDetails0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      ColumnTypeDetails columnTypeDetails1 = new ColumnTypeDetails();
      assertTrue(columnTypeDetails1.equals((Object)columnTypeDetails0));
      
      Double double0 = new Double(691.2746206223378);
      columnTypeDetails1.setLength(double0);
      boolean boolean0 = columnTypeDetails0.equals(columnTypeDetails1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Double double0 = columnTypeDetails0.getScale();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = columnTypeDetails0.getSigned();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = columnTypeDetails0.getNullable();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      columnTypeDetails0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Double double0 = columnTypeDetails0.getLength();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      String string0 = columnTypeDetails0.getType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      columnTypeDetails0.setType("");
      String string0 = columnTypeDetails0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ColumnTypeDetails columnTypeDetails0 = new ColumnTypeDetails();
      Boolean boolean0 = columnTypeDetails0.getUnique();
      assertNull(boolean0);
  }
}
