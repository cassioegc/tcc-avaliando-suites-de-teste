/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 15 02:12:44 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.UpdateMemberBody;
import com.ibm.watson.data.client.model.UpdateMembersBody;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UpdateMembersBody_ESTest extends UpdateMembersBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UpdateMembersBody updateMembersBody0 = new UpdateMembersBody();
      updateMembersBody0.setMembers((List<UpdateMemberBody>) null);
      List<UpdateMemberBody> list0 = updateMembersBody0.getMembers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UpdateMembersBody updateMembersBody0 = new UpdateMembersBody();
      updateMembersBody0.addMembersItem((UpdateMemberBody) null);
      List<UpdateMemberBody> list0 = updateMembersBody0.getMembers();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UpdateMembersBody updateMembersBody0 = new UpdateMembersBody();
      UpdateMemberBody updateMemberBody0 = new UpdateMemberBody();
      updateMembersBody0.members((List<UpdateMemberBody>) null);
      // Undeclared exception!
      try { 
        updateMembersBody0.addMembersItem(updateMemberBody0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.UpdateMembersBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UpdateMembersBody updateMembersBody0 = new UpdateMembersBody();
      UpdateMembersBody updateMembersBody1 = new UpdateMembersBody();
      boolean boolean0 = updateMembersBody0.equals(updateMembersBody1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UpdateMembersBody updateMembersBody0 = new UpdateMembersBody();
      boolean boolean0 = updateMembersBody0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UpdateMembersBody updateMembersBody0 = new UpdateMembersBody();
      boolean boolean0 = updateMembersBody0.equals(updateMembersBody0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UpdateMembersBody updateMembersBody0 = new UpdateMembersBody();
      boolean boolean0 = updateMembersBody0.equals("class UpdateMembersBody {\n    members: java.util.ArrayList@0000000003\n}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UpdateMembersBody updateMembersBody0 = new UpdateMembersBody();
      updateMembersBody0.setMembers((List<UpdateMemberBody>) null);
      String string0 = updateMembersBody0.toString();
      assertEquals("class UpdateMembersBody {\n    members: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UpdateMembersBody updateMembersBody0 = new UpdateMembersBody();
      updateMembersBody0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UpdateMembersBody updateMembersBody0 = new UpdateMembersBody();
      String string0 = updateMembersBody0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UpdateMembersBody updateMembersBody0 = new UpdateMembersBody();
      List<UpdateMemberBody> list0 = updateMembersBody0.getMembers();
      assertTrue(list0.isEmpty());
  }
}
