/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 20:29:50 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.DiscoveredDetails;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiscoveredDetails_ESTest extends DiscoveredDetails_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Integer integer0 = new Integer(0);
      discoveredDetails0.setPriority(integer0);
      Integer integer1 = discoveredDetails0.getPriority();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Integer integer0 = new Integer(3);
      discoveredDetails0.setPriority(integer0);
      Integer integer1 = discoveredDetails0.getPriority();
      assertEquals(3, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Integer integer0 = new Integer((-8));
      discoveredDetails0.setPriority(integer0);
      Integer integer1 = discoveredDetails0.getPriority();
      assertEquals((-8), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Long long0 = new Long((-1040L));
      discoveredDetails0.setDistinctCount(long0);
      Long long1 = discoveredDetails0.getDistinctCount();
      assertEquals((-1040L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Long long0 = new Long(0L);
      discoveredDetails0.setDistinctCount(long0);
      Long long1 = discoveredDetails0.getDistinctCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Long long0 = new Long(68L);
      discoveredDetails0.setDistinctCount(long0);
      Long long1 = discoveredDetails0.getDistinctCount();
      assertEquals(68L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Long long0 = new Long((-127L));
      discoveredDetails0.setCount(long0);
      Long long1 = discoveredDetails0.getCount();
      assertEquals((-127L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Long long0 = Long.valueOf(0L);
      discoveredDetails0.setCount(long0);
      Long long1 = discoveredDetails0.getCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Long long0 = new Long(1L);
      discoveredDetails0.setCount(long0);
      Long long1 = discoveredDetails0.getCount();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Double double0 = new Double(0.0);
      discoveredDetails0.setConfidence(double0);
      Double double1 = discoveredDetails0.getConfidence();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Double double0 = new Double(1079.272);
      discoveredDetails0.setConfidence(double0);
      Double double1 = discoveredDetails0.getConfidence();
      assertEquals(1079.272, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Double double0 = new Double((-532L));
      discoveredDetails0.setConfidence(double0);
      Double double1 = discoveredDetails0.getConfidence();
      assertEquals((-532.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      // Undeclared exception!
      try { 
        discoveredDetails0.toString((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ibm.watson.data.client.model.DiscoveredDetails", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      StringBuilder stringBuilder0 = new StringBuilder(1);
      discoveredDetails0.toString(stringBuilder0);
      assertEquals("    count: null\n    distinctCount: null\n    confidence: null\n    priority: null\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Object object0 = new Object();
      String string0 = discoveredDetails0.toIndentedString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      DiscoveredDetails discoveredDetails1 = new DiscoveredDetails();
      assertTrue(discoveredDetails1.equals((Object)discoveredDetails0));
      
      Integer integer0 = new Integer(0);
      discoveredDetails1.setPriority(integer0);
      boolean boolean0 = discoveredDetails0.equals(discoveredDetails1);
      assertFalse(discoveredDetails1.equals((Object)discoveredDetails0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Long long0 = new Long(0L);
      discoveredDetails0.setCount(long0);
      DiscoveredDetails discoveredDetails1 = new DiscoveredDetails();
      boolean boolean0 = discoveredDetails0.equals(discoveredDetails1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Object object0 = new Object();
      boolean boolean0 = discoveredDetails0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      DiscoveredDetails discoveredDetails1 = new DiscoveredDetails();
      boolean boolean0 = discoveredDetails0.equals(discoveredDetails1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      boolean boolean0 = discoveredDetails0.equals(discoveredDetails0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      boolean boolean0 = discoveredDetails0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      discoveredDetails0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Long long0 = discoveredDetails0.getCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Double double0 = new Double((-1.0));
      discoveredDetails0.setConfidence(double0);
      DiscoveredDetails discoveredDetails1 = new DiscoveredDetails();
      boolean boolean0 = discoveredDetails0.equals(discoveredDetails1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Long long0 = discoveredDetails0.getDistinctCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Long long0 = new Long(0L);
      discoveredDetails0.setDistinctCount(long0);
      DiscoveredDetails discoveredDetails1 = new DiscoveredDetails();
      boolean boolean0 = discoveredDetails0.equals(discoveredDetails1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Double double0 = discoveredDetails0.getConfidence();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      String string0 = discoveredDetails0.toString();
      assertEquals("class DiscoveredDetails {\n    count: null\n    distinctCount: null\n    confidence: null\n    priority: null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DiscoveredDetails discoveredDetails0 = new DiscoveredDetails();
      Integer integer0 = discoveredDetails0.getPriority();
      assertNull(integer0);
  }
}
