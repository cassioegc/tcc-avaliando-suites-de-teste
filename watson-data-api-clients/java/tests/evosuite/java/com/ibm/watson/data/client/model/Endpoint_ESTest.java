/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 14 21:12:44 GMT 2021
 */

package com.ibm.watson.data.client.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ibm.watson.data.client.model.Endpoint;
import com.ibm.watson.data.client.model.Meaning;
import io.netty.handler.logging.ByteBufFormat;
import io.netty.handler.logging.LogLevel;
import io.netty.handler.logging.LoggingHandler;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Endpoint_ESTest extends Endpoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      endpoint0.setProtocol("th!UIhk8Aqn]Z6uYFA");
      String string0 = endpoint0.getProtocol();
      assertEquals("th!UIhk8Aqn]Z6uYFA", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      endpoint0.encryptionMethod("vxiELps;EP");
      String string0 = endpoint0.getEncryptionMethod();
      assertEquals("vxiELps;EP", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      Endpoint endpoint1 = endpoint0.address("The supplier returned a null container");
      String string0 = endpoint1.getAddress();
      assertEquals("The supplier returned a null container", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      Meaning meaning0 = new Meaning();
      meaning0.putExtendedPropertiesItem("3m@PCD7zHjroYzH,9WK", meaning0);
      Map<String, Object> map0 = meaning0.getExtendedProperties();
      endpoint0.setExtendedProperties(map0);
      // Undeclared exception!
      try { 
        endpoint0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      Endpoint endpoint1 = new Endpoint();
      assertTrue(endpoint1.equals((Object)endpoint0));
      
      endpoint0.setEncryptionMethod("Failed to re-register a Channel to the new Selector.");
      boolean boolean0 = endpoint1.equals(endpoint0);
      assertFalse(endpoint1.equals((Object)endpoint0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      endpoint0.protocol("R9W");
      Endpoint endpoint1 = new Endpoint();
      boolean boolean0 = endpoint0.equals(endpoint1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      Endpoint endpoint1 = new Endpoint();
      boolean boolean0 = endpoint0.equals(endpoint1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      endpoint0.qualifiedName("");
      Endpoint endpoint1 = new Endpoint();
      boolean boolean0 = endpoint0.equals(endpoint1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      LogLevel logLevel0 = LogLevel.WARN;
      ByteBufFormat byteBufFormat0 = ByteBufFormat.SIMPLE;
      LoggingHandler loggingHandler0 = new LoggingHandler("reactor.core.publisher.FluxWithLatestFrom", logLevel0, byteBufFormat0);
      boolean boolean0 = endpoint0.equals(loggingHandler0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      boolean boolean0 = endpoint0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      boolean boolean0 = endpoint0.equals(endpoint0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      endpoint0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      String string0 = endpoint0.getAddress();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      String string0 = endpoint0.getEncryptionMethod();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      Endpoint endpoint1 = endpoint0.address("");
      Endpoint endpoint2 = new Endpoint();
      boolean boolean0 = endpoint1.equals(endpoint2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      endpoint0.setAddress("");
      String string0 = endpoint0.getAddress();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      String string0 = endpoint0.getProtocol();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      endpoint0.encryptionMethod("");
      String string0 = endpoint0.getEncryptionMethod();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      endpoint0.protocol("");
      String string0 = endpoint0.getProtocol();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Endpoint endpoint0 = new Endpoint();
      String string0 = endpoint0.toString();
      assertEquals("class Endpoint {\n    qualifiedName: null\n    type: null\n    guid: null\n    url: null\n    classifications: null\n    additionalProperties: null\n    meanings: null\n    extendedProperties: null\n    name: null\n    description: null\n    address: null\n    protocol: null\n    encryptionMethod: null\n}", string0);
  }
}
