/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 22:17:18 GMT 2021
 */

package org.apache.xml.security.signature;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.xml.security.signature.MissingResourceFailureException;
import org.apache.xml.security.signature.Reference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MissingResourceFailureException_ESTest extends MissingResourceFailureException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MissingResourceFailureException missingResourceFailureException0 = new MissingResourceFailureException((Reference) null, "Dq8!&hblPU1',/ __", objectArray0);
      MissingResourceFailureException missingResourceFailureException1 = new MissingResourceFailureException(missingResourceFailureException0, (Reference) null, "The NodeList is {}");
      assertFalse(missingResourceFailureException1.equals((Object)missingResourceFailureException0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MissingResourceFailureException missingResourceFailureException0 = new MissingResourceFailureException((Reference) null, "Dq8!&hblPU1',/ __", objectArray0);
      MissingResourceFailureException missingResourceFailureException1 = new MissingResourceFailureException(missingResourceFailureException0, (Reference) null, "5:`#7b2ul3", objectArray0);
      assertFalse(missingResourceFailureException1.equals((Object)missingResourceFailureException0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MissingResourceFailureException missingResourceFailureException0 = new MissingResourceFailureException((Reference) null, "Dq8!&hblPU1',/ __", objectArray0);
      missingResourceFailureException0.setReference((Reference) null);
      assertEquals("Dq8!&hblPU1',/ __", missingResourceFailureException0.getMsgID());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MissingResourceFailureException missingResourceFailureException0 = new MissingResourceFailureException("org.apache.xml.security.useC14N11", (Reference) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MissingResourceFailureException missingResourceFailureException0 = new MissingResourceFailureException((Reference) null, "");
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MissingResourceFailureException missingResourceFailureException0 = new MissingResourceFailureException("=Iw3", (Object[]) null, (Reference) null);
      MissingResourceFailureException missingResourceFailureException1 = new MissingResourceFailureException("Roq_#'*htui]E", missingResourceFailureException0, (Reference) null);
      assertFalse(missingResourceFailureException1.equals((Object)missingResourceFailureException0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      MissingResourceFailureException missingResourceFailureException0 = new MissingResourceFailureException((Reference) null, "Dq8!&hblPU1',/ __", objectArray0);
      Reference reference0 = missingResourceFailureException0.getReference();
      assertNull(reference0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      MockException mockException0 = new MockException("");
      MissingResourceFailureException missingResourceFailureException0 = new MissingResourceFailureException("", objectArray0, mockException0, (Reference) null);
  }
}
