/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 17:22:24 GMT 2021
 */

package org.apache.xml.security.configuration;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.xml.security.configuration.TransformAlgorithmType;
import org.apache.xml.security.configuration.TransformAlgorithmsType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformAlgorithmsType_ESTest extends TransformAlgorithmsType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TransformAlgorithmsType transformAlgorithmsType0 = new TransformAlgorithmsType();
      LinkedList<TransformAlgorithmType> linkedList0 = new LinkedList<TransformAlgorithmType>();
      TransformAlgorithmType transformAlgorithmType0 = new TransformAlgorithmType();
      linkedList0.add(transformAlgorithmType0);
      transformAlgorithmsType0.transformAlgorithm = (List<TransformAlgorithmType>) linkedList0;
      List<TransformAlgorithmType> list0 = transformAlgorithmsType0.getTransformAlgorithm();
      assertTrue(list0.contains(transformAlgorithmType0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TransformAlgorithmsType transformAlgorithmsType0 = new TransformAlgorithmsType();
      List<TransformAlgorithmType> list0 = transformAlgorithmsType0.getTransformAlgorithm();
      List<TransformAlgorithmType> list1 = transformAlgorithmsType0.getTransformAlgorithm();
      assertSame(list1, list0);
  }
}
