/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 21:11:04 GMT 2021
 */

package org.apache.xml.security.utils.resolver.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.xml.security.utils.resolver.ResourceResolverContext;
import org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResolverLocalFilesystem_ESTest extends ResolverLocalFilesystem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("!XApj,R").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "A< H-", false);
      boolean boolean0 = resolverLocalFilesystem0.engineCanResolveURI(resourceResolverContext0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("http:org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext((Attr) null, (String) null, false);
      Map<String, String> map0 = resourceResolverContext0.getProperties();
      ResourceResolverContext resourceResolverContext1 = new ResourceResolverContext(attr0, (String) null, true, map0);
      try { 
        resolverLocalFilesystem0.engineResolveURI(resourceResolverContext1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("filed0h$").when(attr0).getValue();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, (String) null, false, hashMap0);
      boolean boolean0 = resolverLocalFilesystem0.engineCanResolveURI(resourceResolverContext0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      // Undeclared exception!
      try { 
        resolverLocalFilesystem0.engineResolveURI((ResourceResolverContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      // Undeclared exception!
      try { 
        resolverLocalFilesystem0.engineCanResolveURI((ResourceResolverContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("?#i7cUkogohk+").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "?#i7cUkogohk+", false);
      try { 
        resolverLocalFilesystem0.engineResolveURI(resourceResolverContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("7T9tCdA|L0!<dq8@").when(attr0).getValue();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "file:", false, hashMap0);
      boolean boolean0 = resolverLocalFilesystem0.engineCanResolveURI(resourceResolverContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("file:)-[Y1=$S[+Xpm7").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "x]``4B", true, (Map<String, String>) null);
      boolean boolean0 = resolverLocalFilesystem0.engineCanResolveURI(resourceResolverContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("#Oc)\u0000s&Byhh8D").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "#Oc)\u0000s&Byhh8D", true);
      boolean boolean0 = resolverLocalFilesystem0.engineCanResolveURI(resourceResolverContext0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("http:org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext((Attr) null, (String) null, false);
      Map<String, String> map0 = resourceResolverContext0.getProperties();
      ResourceResolverContext resourceResolverContext1 = new ResourceResolverContext(attr0, (String) null, true, map0);
      boolean boolean0 = resolverLocalFilesystem0.engineCanResolveURI(resourceResolverContext1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext((Attr) null, (String) null, false);
      boolean boolean0 = resolverLocalFilesystem0.engineCanResolveURI(resourceResolverContext0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "", false);
      boolean boolean0 = resolverLocalFilesystem0.engineCanResolveURI(resourceResolverContext0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResolverLocalFilesystem resolverLocalFilesystem0 = new ResolverLocalFilesystem();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("U;Xpsm(3").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "", false);
      try { 
        resolverLocalFilesystem0.engineResolveURI(resourceResolverContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverLocalFilesystem", e);
      }
  }
}
