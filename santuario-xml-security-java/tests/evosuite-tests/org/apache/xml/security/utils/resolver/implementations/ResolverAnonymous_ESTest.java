/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 21:06:23 GMT 2021
 */

package org.apache.xml.security.utils.resolver.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.file.Path;
import java.util.HashMap;
import org.apache.xml.security.signature.XMLSignatureInput;
import org.apache.xml.security.utils.resolver.ResourceResolverContext;
import org.apache.xml.security.utils.resolver.implementations.ResolverAnonymous;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResolverAnonymous_ESTest extends ResolverAnonymous_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ResolverAnonymous resolverAnonymous0 = new ResolverAnonymous("");
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("").when(attr0).getValue();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "", true, hashMap0);
      XMLSignatureInput xMLSignatureInput0 = resolverAnonymous0.engineResolveURI(resourceResolverContext0);
      assertTrue(xMLSignatureInput0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ResolverAnonymous resolverAnonymous0 = new ResolverAnonymous("4b=");
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "4b=", true);
      try { 
        resolverAnonymous0.engineResolveURI(resourceResolverContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverAnonymous", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ResolverAnonymous resolverAnonymous0 = new ResolverAnonymous((Path) null);
      // Undeclared exception!
      try { 
        resolverAnonymous0.engineCanResolveURI((ResourceResolverContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverAnonymous", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ResolverAnonymous resolverAnonymous0 = null;
      try {
        resolverAnonymous0 = new ResolverAnonymous((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ResolverAnonymous resolverAnonymous0 = new ResolverAnonymous("4b=");
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "4b=", true);
      boolean boolean0 = resolverAnonymous0.engineCanResolveURI(resourceResolverContext0);
      assertTrue(boolean0);
  }
}
