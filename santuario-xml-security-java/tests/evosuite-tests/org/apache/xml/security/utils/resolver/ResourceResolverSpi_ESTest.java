/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 21:05:15 GMT 2021
 */

package org.apache.xml.security.utils.resolver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.xml.security.signature.XMLSignatureInput;
import org.apache.xml.security.utils.resolver.ResourceResolverContext;
import org.apache.xml.security.utils.resolver.implementations.ResolverAnonymous;
import org.apache.xml.security.utils.resolver.implementations.ResolverDirectHTTP;
import org.apache.xml.security.utils.resolver.implementations.ResolverFragment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResourceResolverSpi_ESTest extends ResourceResolverSpi_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(document0).when(element0).getOwnerDocument();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn(element0).when(attr0).getOwnerElement();
      doReturn("").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "H;hS @", false, (Map<String, String>) null);
      XMLSignatureInput xMLSignatureInput0 = resolverFragment0.engineResolveURI(resourceResolverContext0);
      assertTrue(xMLSignatureInput0.isExcludeComments());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ResolverAnonymous resolverAnonymous0 = new ResolverAnonymous("");
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "", true);
      XMLSignatureInput xMLSignatureInput0 = resolverAnonymous0.engineResolveURI(resourceResolverContext0);
      assertTrue(xMLSignatureInput0.isSecureValidation());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ResolverAnonymous resolverAnonymous0 = new ResolverAnonymous("");
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "id", false);
      boolean boolean0 = resolverAnonymous0.engineCanResolveURI(resourceResolverContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext((Attr) null, "", false, hashMap0);
      boolean boolean0 = resolverFragment0.engineCanResolveURI(resourceResolverContext0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(attr0).getOwnerElement();
      doReturn((String) null).when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "H;hS @", false, (Map<String, String>) null);
      // Undeclared exception!
      try { 
        resolverFragment0.engineResolveURI(resourceResolverContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ResolverDirectHTTP resolverDirectHTTP0 = new ResolverDirectHTTP();
      // Undeclared exception!
      try { 
        resolverDirectHTTP0.engineCanResolveURI((ResourceResolverContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverDirectHTTP", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ResolverDirectHTTP resolverDirectHTTP0 = new ResolverDirectHTTP(hashMap0);
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, " and message ", false);
      try { 
        resolverDirectHTTP0.engineResolveURI(resourceResolverContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverDirectHTTP", e);
      }
  }
}
