/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 20:48:01 GMT 2021
 */

package org.apache.xml.security.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.parser.XMLParserImpl;
import org.apache.xml.security.utils.HelperNodeList;
import org.apache.xml.security.utils.XMLUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLUtils_ESTest extends XMLUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "http://www.w3.org/2000/09/xmldsig#";
      XMLUtils.isIgnoreLineBreaks();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#");
      iIOMetadataNode0.getOwnerDocument();
      int int0 = 1098;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1098);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      mockPrintStream0.print((float) 1098);
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        XMLUtils.getSet(iIOMetadataNode0, linkedHashSet0, (Node) null, false);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#");
      iIOMetadataNode0.getOwnerDocument();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1098);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) "http://www.w3.org/2000/09/xmldsig#";
      mockPrintStream0.format(locale0, "dsig11", objectArray0);
      byteArrayOutputStream0.reset();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      Node node0 = iIOMetadataNode0.appendChild(iIOMetadataNode1);
      XMLUtils.outputDOMc14nWithComments(iIOMetadataNode1, bufferedOutputStream0);
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      XMLUtils.getSet(iIOMetadataNode1, linkedHashSet0, (Node) null, false);
      XMLUtils.selectNode(iIOMetadataNode0, "", "http://www.w3.org/2000/09/xmldsig#", 1098);
      byte[] byteArray0 = new byte[0];
      XMLUtils.encodeToString(byteArray0);
      XMLUtils.selectDs11Node(node0, "http://www.w3.org/2000/09/xmldsig#", 1098);
      XMLUtils.getOwnerDocument((Set<Node>) linkedHashSet0);
      iIOMetadataNode0.getOwnerDocument();
      XMLUtils.decode("http://www.w3.org/2000/09/xmldsig#");
      XMLUtils.elementIsInSignature11Space(iIOMetadataNode0, "");
      XMLUtils.elementIsInEncryption11Space((Element) null, "Register Resolver: {}: For unknown purposes");
      // Undeclared exception!
      try { 
        XMLUtils.createElementInSignatureSpace((Document) null, "http://www.w3.org/2000/09/xmldsig#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = null;
      XMLUtils.getNextElement((Node) null);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "BE=k.";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BE=k.");
      // Undeclared exception!
      try { 
        XMLUtils.outputDOM((Node) null, (OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.andNot(bigInteger1);
      XMLUtils.getBytes(bigInteger0, 769);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("A5j5hYm");
      XMLUtils.outputDOM((Node) iIOMetadataNode0, (OutputStream) mockFileOutputStream0, true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "&} 9%8";
      XMLUtils.decode("&} 9%8");
      Node node0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XMLUtils.selectNode((Node) null, "http://www.w3.org/2001/04/xmlenc#", "", 2862);
      XMLUtils.getNextElement((Node) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ONE;
      XMLUtils.getBytes(bigInteger0, 35);
      // Undeclared exception!
      try { 
        XMLUtils.excludeNodeFromSet((Node) null, (Set<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLUtils.getStrFromNode(iIOMetadataNode0);
      int int0 = 5;
      LinkedHashSet<Node> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<Node>(5, (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -1.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLUtils.selectXencNode(iIOMetadataNode0, ">U2`V\"", 2827);
      iIOMetadataNode0.hasAttribute(">U2`V\"");
      XMLUtils.selectNode((Node) null, (String) null, (String) null, (-13));
      XMLUtils.elementIsInSignature11Space((Element) null, "#<1)cK(/SF+;");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("#<1)cK(/SF+;");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "*rkq#k*rsQ.nZ#\\Ig";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("*rkq#k*rsQ.nZ#Ig");
      Attr attr0 = null;
      iIOMetadataNode0.getAttributeNodeNS("*rkq#k*rsQ.nZ#Ig", "*rkq#k*rsQ.nZ#Ig");
      // Undeclared exception!
      try { 
        XMLUtils.protectAgainstWrappingAttack((Node) null, (Element) iIOMetadataNode0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "http://www.w3.org/2000/09/xmldsig#";
      FileSystemHandling.shouldAllThrowIOExceptions();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#");
      iIOMetadataNode0.getOwnerDocument();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#");
      int int0 = 1098;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1098);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      XMLUtils.outputDOMc14nWithComments(iIOMetadataNode1, bufferedOutputStream0);
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      XMLUtils.getSet(iIOMetadataNode1, linkedHashSet0, (Node) null, false);
      String string1 = "";
      XMLUtils.selectNode(iIOMetadataNode0, "", "http://www.w3.org/2000/09/xmldsig#", 1098);
      byte[] byteArray0 = new byte[0];
      try { 
        iIOMetadataNode0.setIdAttribute("defaultCountryCode", true);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLUtils.decode(" ");
      HelperNodeList helperNodeList0 = new HelperNodeList();
      helperNodeList0.getOwnerDocument();
      XMLUtils.selectNode((Node) null, " ", " ", 2);
      XMLUtils.protectAgainstWrappingAttack((Node) null, " ");
      String string0 = " ~ ";
      XMLUtils.selectNode((Node) null, " ", " ~ ", 2);
      String string1 = "";
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
          IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
          iIOMetadataNode1.setNodeValue("");
          FileSystemHandling.shouldAllThrowIOExceptions();
          iIOMetadataNode0.getFirstChild();
          Node node0 = iIOMetadataNode1.replaceChild(iIOMetadataNode0, iIOMetadataNode0);
          iIOMetadataNode0.getLastChild();
          iIOMetadataNode0.removeChild(node0);
          XMLUtils.selectDsNode(iIOMetadataNode0, "", 2);
          XMLUtils.protectAgainstWrappingAttack(node0, "");
          // Undeclared exception!
          try { 
            XMLUtils.setXenc11Prefix("");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.security.SecurityPermission\" \"org.apache.xml.security.register\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.apache.xml.security.utils.JavaUtils.checkRegisterPermission(JavaUtils.java:218)
             // org.apache.xml.security.utils.XMLUtils.setXenc11Prefix(XMLUtils.java:128)
             // sun.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("*h23 R1${W$d");
          XMLUtils.elementIsInEncryptionSpace(iIOMetadataNode0, "*h23 R1${W$d");
          // Undeclared exception!
          try { 
            XMLUtils.setXenc11Prefix("Configuration");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.security.SecurityPermission\" \"org.apache.xml.security.register\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.apache.xml.security.utils.JavaUtils.checkRegisterPermission(JavaUtils.java:218)
             // org.apache.xml.security.utils.XMLUtils.setXenc11Prefix(XMLUtils.java:128)
             // sun.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLUtils.selectXencNode((Node) null, "&*,log4", (-1569));
      boolean boolean0 = XMLUtils.isDescendantOrSelf((Node) null, (Node) null);
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        XMLUtils.getBytes(bigInteger0, (-1569));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BigInteger bigInteger0 = BigInteger.valueOf(0L);
          bigInteger0.bitLength();
          bigInteger0.doubleValue();
          XMLUtils.getBytes(bigInteger0, (-5));
          // Undeclared exception!
          try { 
            XMLUtils.setXenc11Prefix("A5qyV 3[");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.security.SecurityPermission\" \"org.apache.xml.security.register\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.apache.xml.security.utils.JavaUtils.checkRegisterPermission(JavaUtils.java:218)
             // org.apache.xml.security.utils.XMLUtils.setXenc11Prefix(XMLUtils.java:128)
             // sun.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = XMLUtils.decode("0S");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      XMLUtils.convertNodelistToSet(nodeList0);
      XMLUtils.getFullTextChildrenFromNode(iIOMetadataNode0);
      byte[] byteArray1 = XMLUtils.decode("");
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "FjsnO^Cyr-";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("FjsnO^Cyr-");
      NodeList nodeList0 = iIOMetadataNode0.getElementsByTagName("FjsnO^Cyr-");
      XMLUtils.convertNodelistToSet(nodeList0);
      XMLUtils.ignoreLineBreaks();
      String string1 = "";
      iIOMetadataNode0.setNodeValue("");
      String string2 = "NRN p3%as)LM`";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Document is null", "NRN p3%as)LM`");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // NRN p3%as)LM`
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      HelperNodeList helperNodeList0 = new HelperNodeList();
      helperNodeList0.appendChild(iIOMetadataNode0);
      helperNodeList0.getOwnerDocument();
      // Undeclared exception!
      try { 
        XMLUtils.addReturnToElement((Document) null, helperNodeList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      HelperNodeList helperNodeList0 = new HelperNodeList(true);
      helperNodeList0.getOwnerDocument();
      helperNodeList0.getOwnerDocument();
      // Undeclared exception!
      try { 
        XMLUtils.addReturnToElement((Document) null, (HelperNodeList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      Element element0 = XMLUtils.selectDs11Node(node0, (String) null, 0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "BrRC#5]T";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("BrRC#5]T");
      iIOMetadataNode0.getNextSibling();
      // Undeclared exception!
      try { 
        XMLUtils.getFullTextChildrenFromNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        XMLUtils.getFullTextChildrenFromNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = null;
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      Node node0 = iIOMetadataNode0.cloneNode(true);
      XMLUtils.protectAgainstWrappingAttack(node0, (Element) iIOMetadataNode0, "");
      // Undeclared exception!
      try { 
        XMLUtils.encodeToString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = null;
      // Undeclared exception!
      try { 
        XMLUtils.circumventBug2650((Document) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.decode((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.xml.security.utils.XMLUtils");
      iIOMetadataNode0.getNextSibling();
      iIOMetadataNode0.hasAttributeNS("org.apache.xml.security.utils.XMLUtils", "?/xjp");
      XMLUtils.selectDsNode((Node) null, "?/xjp", 4096);
      XMLUtils.isDescendantOrSelf((Node) null, (Node) null);
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      // Undeclared exception!
      try { 
        XMLUtils.getSet((Node) null, linkedHashSet0, iIOMetadataNode0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLUtils.selectDsNode((Node) null, "", (-40));
      boolean boolean0 = XMLUtils.elementIsInEncryption11Space((Element) null, "");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      XMLUtils.decode(byteArray0);
      boolean boolean1 = XMLUtils.elementIsInEncryptionSpace((Element) null, "]v6(',tjFj");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        XMLUtils.getBytes(bigInteger0, (byte)4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getLastChild();
      XMLUtils.selectDsNodes((Node) null, "http://www.w3.org/2009/xmlenc11#");
      // Undeclared exception!
      try { 
        XMLUtils.getBytes((BigInteger) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
          iIOMetadataNode0.getParentNode();
          ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
          XMLUtils.outputDOM((Node) null, (OutputStream) byteArrayOutputStream0, false);
          String string0 = "'*o_B!+W:L>LOW;W";
          // Undeclared exception!
          try { 
            XMLUtils.setDs11Prefix("'*o_B!+W:L>LOW;W");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.security.SecurityPermission\" \"org.apache.xml.security.register\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.apache.xml.security.utils.JavaUtils.checkRegisterPermission(JavaUtils.java:218)
             // org.apache.xml.security.utils.XMLUtils.setDs11Prefix(XMLUtils.java:106)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributes();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      XMLUtils.selectNodes(node0, "http://www.w3.org/2001/04/xmlenc#", "wR!_>4l^");
      XMLUtils.elementIsInEncryption11Space(iIOMetadataNode0, "Nodes have not the same Parent");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        XMLUtils.decode(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Last unit does not have enough valid bits
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HelperNodeList helperNodeList0 = new HelperNodeList(true);
      helperNodeList0.getOwnerDocument();
      Element[] elementArray0 = XMLUtils.selectDs11Nodes((Node) null, "VY]");
      assertEquals(0, elementArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      XMLUtils.convertNodelistToSet(nodeList0);
      XMLUtils.selectNode(iIOMetadataNode0, "n!1(", "Error instantiating XMLParser. Falling back to XMLParserImpl", 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-42);
      byte[] byteArray1 = XMLUtils.decode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HelperNodeList helperNodeList0 = new HelperNodeList(false);
      helperNodeList0.getOwnerDocument();
      // Undeclared exception!
      try { 
        XMLUtils.createElementInEncryption11Space((Document) null, "bS&v(;AJa\"D^G&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dsig11");
      iIOMetadataNode0.getParentNode();
      iIOMetadataNode0.getOwnerDocument();
      XMLUtils.selectXencNode((Node) null, "algorithm.classDoesNotExist", 7);
      XMLUtils.selectXencNode((Node) null, "", (-1));
      XMLUtils.selectNode((Node) null, "wz;x8Q!a*%g{a]K", "algorithm.classDoesNotExist", 1299);
      XMLUtils.elementIsInSignature11Space((Element) null, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("wz;x8Q!a*%g{a]K");
      XMLUtils.elementIsInSignature11Space(iIOMetadataNode1, "wz;x8Q!a*%g{a]K");
      iIOMetadataNode0.item((-1));
      XMLUtils.selectDs11Node((Node) null, (String) null, 0);
      XMLUtils.ignoreLineBreaks();
      Element[] elementArray0 = XMLUtils.selectNodes((Node) null, "algorithm.classDoesNotExist", (String) null);
      assertEquals(0, elementArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://javax.xml.XMLConstants/feature/secure-processing");
          iIOMetadataNode0.getLastChild();
          iIOMetadataNode0.getAttributeNodeNS("M^g;", "M^g;");
          iIOMetadataNode0.getAttributeNodeNS("http://javax.xml.XMLConstants/feature/secure-processing", "l*xr=j~kU|Ac9");
          XMLUtils.selectNodes((Node) null, "", "");
          XMLUtils.elementIsInSignature11Space(iIOMetadataNode0, "l*xr=j~kU|Ac9");
          Node node0 = null;
          XMLUtils.selectDsNodes((Node) null, "6");
          // Undeclared exception!
          try { 
            XMLUtils.setDsPrefix("\nOriginal Exception was ");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.security.SecurityPermission\" \"org.apache.xml.security.register\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.apache.xml.security.utils.JavaUtils.checkRegisterPermission(JavaUtils.java:218)
             // org.apache.xml.security.utils.XMLUtils.setDsPrefix(XMLUtils.java:95)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HelperNodeList helperNodeList0 = new HelperNodeList(true);
      helperNodeList0.getOwnerDocument();
      // Undeclared exception!
      try { 
        XMLUtils.createElementInEncryption11Space((Document) null, "DNSA^O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "algorithm.classDoesNotExist";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("algorithm.classDoesNotExist");
      iIOMetadataNode0.getOwnerDocument();
      XMLUtils.protectAgainstWrappingAttack((Node) null, (Element) iIOMetadataNode0, "B4Q=(GRg#j-'Y");
      // Undeclared exception!
      try { 
        XMLUtils.circumventBug2650((Document) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      Node node0 = iIOMetadataNode0.cloneNode(true);
      XMLUtils.outputDOM(node0, (OutputStream) null);
      assertFalse(iIOMetadataNode0.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          // Undeclared exception!
          try { 
            XMLUtils.setDs11Prefix("http://www.w3.org/2009/xmldsig11#");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.security.SecurityPermission\" \"org.apache.xml.security.register\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.apache.xml.security.utils.JavaUtils.checkRegisterPermission(JavaUtils.java:218)
             // org.apache.xml.security.utils.XMLUtils.setDs11Prefix(XMLUtils.java:106)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      HelperNodeList helperNodeList0 = new HelperNodeList(false);
      helperNodeList0.getOwnerDocument();
      linkedHashSet0.add((Node) null);
      // Undeclared exception!
      try { 
        XMLUtils.getOwnerDocument((Set<Node>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = "empty";
          // Undeclared exception!
          try { 
            XMLUtils.setXencPrefix("empty");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.security.SecurityPermission\" \"org.apache.xml.security.register\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.apache.xml.security.utils.JavaUtils.checkRegisterPermission(JavaUtils.java:218)
             // org.apache.xml.security.utils.XMLUtils.setXencPrefix(XMLUtils.java:117)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Node node0 = null;
      // Undeclared exception!
      try { 
        XMLUtils.getOwnerDocument((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.item(0);
      boolean boolean0 = XMLUtils.isDescendantOrSelf((Node) null, iIOMetadataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-76);
      byte[] byteArray1 = XMLUtils.decode(byteArray0);
      XMLUtils.isIgnoreLineBreaks();
      XMLUtils.ignoreLineBreaks();
      XMLUtils.encodeToString(byteArray1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
      try { 
        XMLUtils.createElementInEncryptionSpace((Document) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLUtils.ignoreLineBreaks();
      XMLParserImpl xMLParserImpl0 = new XMLParserImpl();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XMLUtils.decode("");
      HelperNodeList helperNodeList0 = new HelperNodeList();
      helperNodeList0.getOwnerDocument();
      XMLUtils.selectNode((Node) null, "", "", 2);
      XMLUtils.protectAgainstWrappingAttack((Node) null, "");
      String string0 = " ~ ";
      XMLUtils.selectNode((Node) null, "", " ~ ", 2);
      String string1 = "";
      try { 
        MockURI.URI("", " ~ ", " ~ ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :%20~%20#%20~%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      iIOMetadataNode0.getAttributeNodeNS((String) null, (String) null);
      XMLUtils.selectDs11Node((Node) null, "]NhDHZYH%", 0);
      boolean boolean0 = XMLUtils.elementIsInEncryptionSpace((Element) null, (String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = XMLUtils.getBytes(bigInteger0, 3);
      assertEquals(1, byteArray0.length);
      
      boolean boolean1 = XMLUtils.isDescendantOrSelf(iIOMetadataNode0, (Node) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = XMLUtils.getBytes(bigInteger0, 769);
      assertEquals(97, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          // Undeclared exception!
          try { 
            XMLUtils.setXenc11Prefix("DESCRIPTION");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.security.SecurityPermission\" \"org.apache.xml.security.register\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.apache.xml.security.utils.JavaUtils.checkRegisterPermission(JavaUtils.java:218)
             // org.apache.xml.security.utils.XMLUtils.setXenc11Prefix(XMLUtils.java:128)
             // sun.reflect.GeneratedMethodAccessor163.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          // Undeclared exception!
          try { 
            XMLUtils.setDsPrefix("j4H#@MdTG^v~");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.security.SecurityPermission\" \"org.apache.xml.security.register\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.apache.xml.security.utils.JavaUtils.checkRegisterPermission(JavaUtils.java:218)
             // org.apache.xml.security.utils.XMLUtils.setDsPrefix(XMLUtils.java:95)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getPreviousSibling();
      boolean boolean0 = XMLUtils.protectAgainstWrappingAttack((Node) null, "Configuration");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XMLUtils.decode("0S");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      Set<Node> set0 = XMLUtils.convertNodelistToSet(nodeList0);
      XMLUtils.getSet((Node) null, set0, (Node) null, false);
      HelperNodeList helperNodeList0 = new HelperNodeList();
      helperNodeList0.getOwnerDocument();
      // Undeclared exception!
      try { 
        XMLUtils.createElementInEncryptionSpace((Document) null, "Y4B96wA>NF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Set<Node> set0 = XMLUtils.convertNodelistToSet((NodeList) null);
      // Undeclared exception!
      try { 
        XMLUtils.getOwnerDocument(set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library. Original message was \"\"
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.decode("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input byte array has wrong 4-byte ending unit
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLUtils.getOwnerDocument((Node) iIOMetadataNode0);
      // Undeclared exception!
      try { 
        XMLUtils.createElementInEncryptionSpace((Document) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("shDOmhL?(");
      iIOMetadataNode0.getAttributeNodeNS("shDOmhL?(", "-11gu+hxmaL=klC");
      Set<Node> set0 = XMLUtils.convertNodelistToSet(iIOMetadataNode0);
      XMLUtils.getSet((Node) null, set0, (Node) null, true);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      // Undeclared exception!
      try { 
        XMLUtils.getOwnerDocument((Set<Node>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library. Original message was \"\"
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.getOwnerDocument((Set<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.read((InputStream) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream cannot be null
         //
         verifyException("javax.xml.parsers.DocumentBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "xenc";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("xenc");
      iIOMetadataNode0.getOwnerDocument();
      // Undeclared exception!
      try { 
        XMLUtils.createElementInSignature11Space((Document) null, "xenc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "Registering default algorithms";
      // Undeclared exception!
      try { 
        XMLUtils.createElementInSignatureSpace((Document) null, "Registering default algorithms");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      try { 
        XMLUtils.read(bufferedInputStream0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.parser.XMLParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HelperNodeList helperNodeList0 = new HelperNodeList();
      helperNodeList0.getOwnerDocument();
      String string0 = ">7W}Ep";
      // Undeclared exception!
      try { 
        XMLUtils.createElementInSignatureSpace((Document) null, ">7W}Ep");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("namespace");
      XMLUtils.selectDsNode(iIOMetadataNode0, "!8X}e|]rY8q8c_jzzG", 47);
      Element[] elementArray0 = XMLUtils.selectNodes((Node) null, "", "namespace");
      assertEquals(0, elementArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getFirstChild();
      XMLUtils.selectDsNode((Node) null, " Original message was \"", 0);
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      Set<Node> set0 = XMLUtils.excludeNodeFromSet((Node) null, linkedHashSet0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Element element0 = null;
      String string0 = "fl \\} v|w";
      XMLUtils.elementIsInSignatureSpace((Element) null, "fl } v|w");
      // Undeclared exception!
      try { 
        XMLUtils.getStrFromNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.getPreviousSibling();
      XMLUtils.selectDs11Node((Node) null, "(K]B ", 0);
      XMLUtils.elementIsInSignatureSpace(iIOMetadataNode0, "(K]B ");
      XMLUtils.selectXencNode((Node) null, "(K]B ", 0);
      XMLUtils.selectNodes((Node) null, "(K]B ", "");
      XMLUtils.selectNode((Node) null, "org/apache/xml/security/resource/xmlsecurity", "{}eGrIb:", 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        XMLUtils.getBytes(bigInteger0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        XMLUtils.read(mockFileInputStream0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.parser.XMLParserImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(true);
      Element element0 = XMLUtils.getNextElement(node0);
      // Undeclared exception!
      try { 
        XMLUtils.addReturnToElement(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        XMLUtils.addReturnToElement((Element) iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.addReturnToElement((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XMLUtils.getNextElement((Node) null);
      HelperNodeList helperNodeList0 = new HelperNodeList(false);
      Set<Node> set0 = XMLUtils.convertNodelistToSet(helperNodeList0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Element element0 = XMLUtils.getNextElement(iIOMetadataNode0);
      Element[] elementArray0 = XMLUtils.selectNodes(element0, "", "");
      assertEquals(0, elementArray0.length);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-112);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-67);
      XMLUtils.decode(byteArray0);
      String string0 = "http://www.w3.org/TR/2001/REC-xml-c14n-20010315";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/TR/2001/REC-xml-c14n-20010315");
      Node node0 = iIOMetadataNode0.cloneNode(false);
      XMLUtils.selectXencNode(node0, "http://www.w3.org/TR/2001/REC-xml-c14n-20010315", (byte) (-112));
      // Undeclared exception!
      try { 
        XMLUtils.addReturnBeforeChild((Element) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dsig11");
      iIOMetadataNode0.getParentNode();
      iIOMetadataNode0.getOwnerDocument();
      XMLUtils.selectXencNode((Node) null, "dsig11", 7);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XMLUtils.selectXencNode((Node) null, "dsig11", (-1));
      XMLUtils.selectNode((Node) null, "wz;x8Q!a*%g{a]K", "dsig11", 1299);
      XMLUtils.elementIsInSignature11Space((Element) null, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("wz;x8Q!a*%g{a]K");
      XMLUtils.elementIsInSignature11Space(iIOMetadataNode1, "wz;x8Q!a*%g{a]K");
      XMLUtils.selectDs11Node((Node) null, (String) null, 0);
      String string0 = null;
      XMLUtils.selectDs11Nodes((Node) null, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
      // Undeclared exception!
      try { 
        XMLUtils.getStrFromNode((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getAttributeNodeNS("cHb*_nXl~w'z7S", "cHb*_nXl~w'z7S");
      iIOMetadataNode0.item((-4936));
      XMLUtils.isDescendantOrSelf((Node) null, iIOMetadataNode0);
      int int0 = 4758;
      iIOMetadataNode0.item(4758);
      // Undeclared exception!
      try { 
        iIOMetadataNode0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newChild == null!
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "dsig11";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("dsig11");
      XMLUtils.protectAgainstWrappingAttack((Node) iIOMetadataNode0, (Element) iIOMetadataNode0, "defaultCountryCode");
      iIOMetadataNode0.getPrefix();
      XMLUtils.selectDsNode(iIOMetadataNode0, "PrefixMappings", 0);
      XMLUtils.getOwnerDocument((Node) iIOMetadataNode0);
      XMLUtils.selectDs11Node(iIOMetadataNode0, "PrefixMappings", 0);
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.resolve(uRI0, "defaultCountryCode");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte) (-59);
      XMLUtils.encodeToString(byteArray0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getFirstChild();
      // Undeclared exception!
      try { 
        XMLUtils.addReturnBeforeChild(iIOMetadataNode0, iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#");
      iIOMetadataNode0.getOwnerDocument();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1098);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      Node node0 = iIOMetadataNode0.appendChild(iIOMetadataNode1);
      XMLUtils.outputDOMc14nWithComments(iIOMetadataNode1, bufferedOutputStream0);
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      XMLUtils.getSet(iIOMetadataNode1, linkedHashSet0, (Node) null, false);
      XMLUtils.selectNode(iIOMetadataNode0, "", "http://www.w3.org/2000/09/xmldsig#", 1098);
      byte[] byteArray0 = new byte[0];
      XMLUtils.encodeToString(byteArray0);
      XMLUtils.selectDs11Node(node0, "http://www.w3.org/2000/09/xmldsig#", 1098);
      iIOMetadataNode0.getOwnerDocument();
      XMLUtils.decode("http://www.w3.org/2000/09/xmldsig#");
      XMLUtils.elementIsInSignature11Space(iIOMetadataNode0, "");
      XMLUtils.elementIsInEncryption11Space((Element) null, "Register Resolver: {}: For unknown purposes");
      // Undeclared exception!
      try { 
        XMLUtils.createElementInSignatureSpace((Document) null, "http://www.w3.org/2000/09/xmldsig#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "http://www.w3.org/2000/09/xmldsig#";
      XMLUtils.isIgnoreLineBreaks();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#");
      iIOMetadataNode0.getOwnerDocument();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#");
      int int0 = 1098;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1098);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byteArrayOutputStream0.reset();
      mockPrintStream0.print((float) 1098);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      iIOMetadataNode0.appendChild(iIOMetadataNode1);
      XMLUtils.outputDOMc14nWithComments(iIOMetadataNode1, bufferedOutputStream0);
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      boolean boolean0 = false;
      XMLUtils.getSet(iIOMetadataNode1, linkedHashSet0, (Node) null, false);
      String string1 = "";
      XMLUtils.selectNode(iIOMetadataNode0, "", "http://www.w3.org/2000/09/xmldsig#", 1098);
      byte[] byteArray0 = new byte[0];
      try { 
        iIOMetadataNode0.setIdAttribute("defaultCountryCode", false);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLUtils.read((InputStream) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream cannot be null
         //
         verifyException("javax.xml.parsers.DocumentBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.max(bigInteger1);
      XMLUtils.getBytes(bigInteger0, 2539);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      iIOMetadataNode0.getOwnerDocument();
      Random.setNextRandom(2539);
      // Undeclared exception!
      try { 
        XMLUtils.createElementInSignature11Space((Document) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XMLUtils.getNextElement((Node) null);
      boolean boolean0 = XMLUtils.isDescendantOrSelf((Node) null, (Node) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-13);
      XMLUtils.decode(byteArray0);
      String string0 = "1V6Ci=6B6s?";
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Set<Node> set0 = XMLUtils.convertNodelistToSet(iIOMetadataNode0);
      Set<Node> set1 = XMLUtils.excludeNodeFromSet(iIOMetadataNode0, set0);
      // Undeclared exception!
      try { 
        XMLUtils.getOwnerDocument(set1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library. Original message was \"\"
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XMLUtils.decode("");
      HelperNodeList helperNodeList0 = new HelperNodeList();
      helperNodeList0.getOwnerDocument();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLUtils.protectAgainstWrappingAttack((Node) iIOMetadataNode0, "");
      String string0 = " ~ ";
      XMLUtils.selectNode((Node) null, "", " ~ ", 2);
      String string1 = "";
      try { 
        MockURI.URI("", " ~ ", " ~ ");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :%20~%20#%20~%20
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      NodeList nodeList0 = iIOMetadataNode0.getChildNodes();
      XMLUtils.convertNodelistToSet(nodeList0);
      XMLUtils.selectNode(iIOMetadataNode0, "n!1(", "Error instantiating XMLParser. Falling back to XMLParserImpl", 0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-36);
      byteArray0[3] = (byte) (-42);
      byte[] byteArray1 = XMLUtils.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }
}
