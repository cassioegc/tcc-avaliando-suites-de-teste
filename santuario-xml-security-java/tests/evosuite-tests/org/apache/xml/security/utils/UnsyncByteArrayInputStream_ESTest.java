/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 20:43:21 GMT 2021
 */

package org.apache.xml.security.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.xml.security.utils.UnsyncByteArrayInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnsyncByteArrayInputStream_ESTest extends UnsyncByteArrayInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      assertEquals(1, unsyncByteArrayInputStream0.available());
      
      long long0 = unsyncByteArrayInputStream0.skip((byte)1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      long long0 = unsyncByteArrayInputStream0.skip((-963L));
      assertEquals(4, unsyncByteArrayInputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 0, (byte)118);
      unsyncByteArrayInputStream0.read(byteArray0);
      assertEquals(0, unsyncByteArrayInputStream0.available());
      
      unsyncByteArrayInputStream0.reset();
      assertEquals(2, unsyncByteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, (byte) (-1), (byte) (-1));
      unsyncByteArrayInputStream0.pos = (int) (byte) (-68);
      byte[] byteArray1 = new byte[2];
      // Undeclared exception!
      try { 
        unsyncByteArrayInputStream0.read(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, (byte) (-1), (byte) (-1));
      byte[] byteArray1 = new byte[2];
      int int0 = unsyncByteArrayInputStream0.read(byteArray1);
      assertEquals((-1), unsyncByteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      unsyncByteArrayInputStream0.pos = (int) (byte)53;
      int int0 = unsyncByteArrayInputStream0.read();
      assertEquals((-48), unsyncByteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      unsyncByteArrayInputStream0.read();
      unsyncByteArrayInputStream0.mark((byte)34);
      assertEquals(7, unsyncByteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 1, 0);
      unsyncByteArrayInputStream0.count = (int) (byte)0;
      long long0 = unsyncByteArrayInputStream0.skip((byte)1);
      assertEquals(0, unsyncByteArrayInputStream0.available());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 0, (byte) (-86));
      unsyncByteArrayInputStream0.count = 1431;
      int int0 = unsyncByteArrayInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)1);
      assertEquals(1430, unsyncByteArrayInputStream0.available());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      int int0 = unsyncByteArrayInputStream0.read();
      assertEquals(7, unsyncByteArrayInputStream0.available());
      assertEquals(190, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 0, (byte)118);
      assertEquals(2, unsyncByteArrayInputStream0.available());
      
      unsyncByteArrayInputStream0.read(byteArray0);
      int int0 = unsyncByteArrayInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, (byte)65, 1);
      int int0 = unsyncByteArrayInputStream0.available();
      assertEquals((-63), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, (byte) (-29), (byte)83);
      // Undeclared exception!
      try { 
        unsyncByteArrayInputStream0.read(byteArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 1, 0);
      unsyncByteArrayInputStream0.pos = (int) (byte) (-111);
      // Undeclared exception!
      try { 
        unsyncByteArrayInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -111
         //
         verifyException("org.apache.xml.security.utils.UnsyncByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = null;
      try {
        unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream((byte[]) null, (-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.UnsyncByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = null;
      try {
        unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.UnsyncByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 1, 0);
      unsyncByteArrayInputStream0.pos = (int) (byte) (-111);
      long long0 = unsyncByteArrayInputStream0.skip((byte)1);
      assertEquals(111, unsyncByteArrayInputStream0.available());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      long long0 = unsyncByteArrayInputStream0.skip(0L);
      assertEquals(8, unsyncByteArrayInputStream0.available());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      int int0 = unsyncByteArrayInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 0, 0);
      int int0 = unsyncByteArrayInputStream0.read(byteArray0, 0, 0);
      assertEquals(0, unsyncByteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        unsyncByteArrayInputStream0.read(byteArray0, 1, (int) (byte)34);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.UnsyncByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        unsyncByteArrayInputStream0.read(byteArray0, 2, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.UnsyncByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        unsyncByteArrayInputStream0.read(byteArray0, (-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.UnsyncByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, (byte)0, (byte)56);
      // Undeclared exception!
      try { 
        unsyncByteArrayInputStream0.read((byte[]) null, (int) (byte) (-50), (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.UnsyncByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        unsyncByteArrayInputStream0.read(byteArray0, 0, (int) (byte) (-68));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.UnsyncByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      unsyncByteArrayInputStream0.read();
      assertEquals(7, unsyncByteArrayInputStream0.available());
      
      int int0 = unsyncByteArrayInputStream0.read(byteArray0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 1, 0);
      int int0 = unsyncByteArrayInputStream0.read();
      assertEquals(0, unsyncByteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0);
      unsyncByteArrayInputStream0.close();
      assertEquals(8, unsyncByteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 1, 0);
      boolean boolean0 = unsyncByteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(0, unsyncByteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      UnsyncByteArrayInputStream unsyncByteArrayInputStream0 = new UnsyncByteArrayInputStream(byteArray0, 0, (byte)118);
      int int0 = unsyncByteArrayInputStream0.available();
      assertEquals(2, int0);
  }
}
