/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 20:49:27 GMT 2021
 */

package org.apache.xml.security.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.transform.TransformerException;
import org.apache.xml.security.utils.JDKXPathAPI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDKXPathAPI_ESTest extends JDKXPathAPI_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      try { 
        jDKXPathAPI0.selectNodeList((Node) null, (Node) null, "org.apache.xml.security.utils.HelperNodeList", iIOMetadataNode0);
        fail("Expecting exception: TransformerException");
      
      } catch(TransformerException e) {
         //
         // javax.xml.xpath.XPathExpressionException: javax.xml.transform.TransformerException: Unable to evaluate expression using this context
         //
         verifyException("org.apache.xml.security.utils.JDKXPathAPI", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      try { 
        jDKXPathAPI0.evaluate((Node) null, (Node) null, "", iIOMetadataNode0);
        fail("Expecting exception: TransformerException");
      
      } catch(TransformerException e) {
         //
         // javax.xml.xpath.XPathExpressionException: javax.xml.transform.TransformerException: Empty expression!
         //
         verifyException("org.apache.xml.security.utils.JDKXPathAPI", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      boolean boolean0 = jDKXPathAPI0.evaluate(iIOMetadataNode0, iIOMetadataNode0, "8", iIOMetadataNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        jDKXPathAPI0.selectNodeList(iIOMetadataNode0, iIOMetadataNode0, "tq+c<%,!(:s", iIOMetadataNode0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.xml.security.utils.JDKXPathAPI");
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.insertBefore(iIOMetadataNode1, iIOMetadataNode1);
      // Undeclared exception!
      try { 
        jDKXPathAPI0.selectNodeList(node0, iIOMetadataNode0, "org.apache.xml.security.utils.JDKXPathAPI", iIOMetadataNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        jDKXPathAPI0.selectNodeList((Node) null, iIOMetadataNode0, (String) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      try { 
        jDKXPathAPI0.evaluate((Node) null, (Node) null, "org.apache.xml.security.utils.JDKXPathAPI", (Node) null);
        fail("Expecting exception: TransformerException");
      
      } catch(TransformerException e) {
         //
         // javax.xml.xpath.XPathExpressionException: javax.xml.transform.TransformerException: Unable to evaluate expression using this context
         //
         verifyException("org.apache.xml.security.utils.JDKXPathAPI", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.cloneNode(false);
      Node node1 = iIOMetadataNode0.removeChild(node0);
      Node node2 = iIOMetadataNode0.appendChild(node1);
      // Undeclared exception!
      try { 
        jDKXPathAPI0.evaluate(node2, iIOMetadataNode0, "8", (Node) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        jDKXPathAPI0.evaluate((Node) null, (Node) null, (String) null, iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      jDKXPathAPI0.evaluate(iIOMetadataNode0, iIOMetadataNode0, "org.apache.xml.security.utils.JDKXPathAPI", iIOMetadataNode0);
      // Undeclared exception!
      try { 
        jDKXPathAPI0.evaluate(iIOMetadataNode0, iIOMetadataNode0, "http://javax.xml.XMLConstants/feature/secure-processng", iIOMetadataNode0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // Method not supported
         //
         verifyException("javax.imageio.metadata.IIOMetadataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      jDKXPathAPI0.selectNodeList(iIOMetadataNode0, iIOMetadataNode0, "org.apache.xml.security.utils.HelperNodeList", iIOMetadataNode0);
      boolean boolean0 = jDKXPathAPI0.evaluate(iIOMetadataNode0, iIOMetadataNode0, "org.apache.xml.security.utils.HelperNodeList", iIOMetadataNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NodeList nodeList0 = jDKXPathAPI0.selectNodeList(iIOMetadataNode0, iIOMetadataNode0, "org.apache.xml.security.utils.HelperNodeList", iIOMetadataNode0);
      NodeList nodeList1 = jDKXPathAPI0.selectNodeList(iIOMetadataNode0, iIOMetadataNode0, "org.apache.xml.security.parser.pool-size", iIOMetadataNode0);
      assertFalse(nodeList1.equals((Object)nodeList0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      jDKXPathAPI0.evaluate(iIOMetadataNode0, iIOMetadataNode0, "org.apache.xml.security.utils.JDKXPathAPI", iIOMetadataNode0);
      NodeList nodeList0 = jDKXPathAPI0.selectNodeList(iIOMetadataNode0, iIOMetadataNode0, "org.apache.xml.security.utils.JDKXPathAPI", iIOMetadataNode0);
      assertNotNull(nodeList0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      try { 
        jDKXPathAPI0.selectNodeList((Node) null, (Node) null, "3$5", (Node) null);
        fail("Expecting exception: TransformerException");
      
      } catch(TransformerException e) {
         //
         // javax.xml.xpath.XPathExpressionException: javax.xml.transform.TransformerException: Extra illegal tokens: '$', '5'
         //
         verifyException("org.apache.xml.security.utils.JDKXPathAPI", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDKXPathAPI jDKXPathAPI0 = new JDKXPathAPI();
      jDKXPathAPI0.clear();
  }
}
