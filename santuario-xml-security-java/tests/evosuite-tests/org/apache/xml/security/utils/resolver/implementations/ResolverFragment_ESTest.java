/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 21:09:54 GMT 2021
 */

package org.apache.xml.security.utils.resolver.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.xml.security.signature.XMLSignatureInput;
import org.apache.xml.security.utils.resolver.ResourceResolverContext;
import org.apache.xml.security.utils.resolver.implementations.ResolverFragment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResolverFragment_ESTest extends ResolverFragment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn(" gq").when(attr0).getValue();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "org.apache.xml.security.utils.resolver.ResourceResolverSpi", false, hashMap0);
      boolean boolean0 = resolverFragment0.engineCanResolveURI(resourceResolverContext0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((Document) null).when(element0).getOwnerDocument();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn(element0).when(attr0).getOwnerElement();
      doReturn("").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "k?v+dR?R7p/", false);
      XMLSignatureInput xMLSignatureInput0 = resolverFragment0.engineResolveURI(resourceResolverContext0);
      assertFalse(xMLSignatureInput0.isNeedsToBeExpanded());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document0).getElementById(anyString());
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(document0).when(element1).getOwnerDocument();
      Document document1 = mock(Document.class, new ViolatedAssumptionAnswer());
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn(element1).when(attr0).getOwnerElement();
      doReturn("#xpo`ianter(").when(attr0).getValue();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "eVgS", true, hashMap0);
      try { 
        resolverFragment0.engineResolveURI(resourceResolverContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      // Undeclared exception!
      try { 
        resolverFragment0.engineCanResolveURI((ResourceResolverContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("#xpointer(#xpointer(#xpointer(").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, (String) null, false);
      boolean boolean0 = resolverFragment0.engineCanResolveURI(resourceResolverContext0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("S").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "w7VmM~ 1%IC;;qvw)i8", true, (Map<String, String>) null);
      boolean boolean0 = resolverFragment0.engineCanResolveURI(resourceResolverContext0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "", false);
      ResolverFragment resolverFragment0 = new ResolverFragment();
      boolean boolean0 = resolverFragment0.engineCanResolveURI(resourceResolverContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "org.apache.xml.security.parser.pool-size", true);
      boolean boolean0 = resolverFragment0.engineCanResolveURI(resourceResolverContext0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("#xpo`ianter(").when(attr0).getValue();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "eVgS", true, hashMap0);
      boolean boolean0 = resolverFragment0.engineCanResolveURI(resourceResolverContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document0).getElementById(anyString());
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(document0).when(element1).getOwnerDocument();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn(element1).when(attr0).getOwnerElement();
      doReturn("#xpointer(#xpointer(#xpointer(").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, (String) null, false);
      try { 
        resolverFragment0.engineResolveURI(resourceResolverContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverFragment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn("#xy`ua6er(").when(document0).toString();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(document0).when(element0).getOwnerDocument();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn(element0).when(attr0).getOwnerElement();
      doReturn("").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "", false);
      ResolverFragment resolverFragment0 = new ResolverFragment();
      XMLSignatureInput xMLSignatureInput0 = resolverFragment0.engineResolveURI(resourceResolverContext0);
      assertTrue(xMLSignatureInput0.isElement());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResolverFragment resolverFragment0 = new ResolverFragment();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document0).getElementById(anyString());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(document0).when(element0).getOwnerDocument();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn(element0).when(attr0).getOwnerElement();
      doReturn("S").when(attr0).getValue();
      ResourceResolverContext resourceResolverContext0 = new ResourceResolverContext(attr0, "w7VmM~ 1%IC;;qvw)i8", true, (Map<String, String>) null);
      try { 
        resolverFragment0.engineResolveURI(resourceResolverContext0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.resolver.implementations.ResolverFragment", e);
      }
  }
}
