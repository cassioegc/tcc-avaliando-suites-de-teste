/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 20:22:11 GMT 2021
 */

package org.apache.xml.security.stax.impl.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.apache.xml.security.stax.impl.util.MultiInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiInputStream_ESTest extends MultiInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      inputStreamArray0[0] = (InputStream) mockFileInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      // Undeclared exception!
      try { 
        multiInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.util.MultiInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)1);
      inputStreamArray0[0] = (InputStream) byteArrayInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      int int0 = multiInputStream0.read(byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)1);
      inputStreamArray0[0] = (InputStream) byteArrayInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      int int0 = multiInputStream0.read();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-77), (byte) (-3));
      inputStreamArray0[0] = (InputStream) byteArrayInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      int int0 = multiInputStream0.available();
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[7];
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        multiInputStream0.read(byteArray0, (int) (byte)13, (int) (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.util.MultiInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[2];
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      inputStreamArray0[0] = (InputStream) byteArrayInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      // Undeclared exception!
      try { 
        multiInputStream0.read(byteArray0, 1958, 1958);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[7];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      inputStreamArray0[0] = (InputStream) mockFileInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      byte[] byteArray0 = new byte[1];
      try { 
        multiInputStream0.read(byteArray0, (int) (byte)13, (int) (byte)13);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3839), 1958);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      inputStreamArray0[0] = (InputStream) bufferedInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      // Undeclared exception!
      try { 
        multiInputStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[3];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      inputStreamArray0[0] = (InputStream) pipedInputStream0;
      byte[] byteArray0 = new byte[5];
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      try { 
        multiInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[2];
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 1059);
      inputStreamArray0[0] = (InputStream) byteArrayInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      // Undeclared exception!
      try { 
        multiInputStream0.read();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[2];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      inputStreamArray0[0] = (InputStream) pushbackInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      try { 
        multiInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[2];
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      inputStreamArray0[0] = (InputStream) pushbackInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      try { 
        multiInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiInputStream multiInputStream0 = null;
      try {
        multiInputStream0 = new MultiInputStream((InputStream[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.util.MultiInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[4];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1221);
      inputStreamArray0[0] = (InputStream) pipedInputStream0;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1221, 4);
      inputStreamArray0[1] = (InputStream) byteArrayInputStream0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      inputStreamArray0[2] = (InputStream) mockFileInputStream0;
      inputStreamArray0[3] = (InputStream) byteArrayInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      multiInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[4];
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      // Undeclared exception!
      try { 
        multiInputStream0.available();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.util.MultiInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      inputStreamArray0[0] = (InputStream) sequenceInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      byte[] byteArray0 = new byte[2];
      int int0 = multiInputStream0.read(byteArray0, (int) (byte)79, 503);
      assertEquals((-1), int0);
      
      int int1 = multiInputStream0.available();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[4];
      PipedInputStream pipedInputStream0 = new PipedInputStream(1221);
      inputStreamArray0[0] = (InputStream) pipedInputStream0;
      byte[] byteArray0 = new byte[0];
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      int int0 = multiInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      byte[] byteArray0 = new byte[5];
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      // Undeclared exception!
      try { 
        multiInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.util.MultiInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)1);
      inputStreamArray0[0] = (InputStream) byteArrayInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      int int0 = multiInputStream0.read();
      assertEquals(0, int0);
      
      int int1 = multiInputStream0.read(byteArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)75, (byte)1);
      inputStreamArray0[0] = (InputStream) byteArrayInputStream0;
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      int int0 = multiInputStream0.read();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[0];
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      try { 
        multiInputStream0.skip((-1L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // skip() not supported
         //
         verifyException("org.apache.xml.security.stax.impl.util.MultiInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InputStream[] inputStreamArray0 = new InputStream[1];
      MultiInputStream multiInputStream0 = new MultiInputStream(inputStreamArray0);
      // Undeclared exception!
      try { 
        multiInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.util.MultiInputStream", e);
      }
  }
}
