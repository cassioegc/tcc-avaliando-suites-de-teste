/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:05:31 GMT 2021
 */

package org.apache.xml.security.stax.impl.algorithms;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.MGF1ParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.security.MockSecureRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PKISignatureAlgorithm_ESTest extends PKISignatureAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      byte[] byteArray0 = new byte[4];
      try { 
        pKISignatureAlgorithm0.engineUpdate(byteArray0, 4156, (-341));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // object not initialized for signature or verification
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      byte[] byteArray0 = new byte[13];
      try { 
        pKISignatureAlgorithm0.engineVerify(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid XMLDSIG format of DSA signature
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      // Undeclared exception!
      try { 
        pKISignatureAlgorithm0.engineUpdate((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      try { 
        pKISignatureAlgorithm0.engineSign();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // object not initialized for signing
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      MGF1ParameterSpec mGF1ParameterSpec0 = MGF1ParameterSpec.SHA512;
      try { 
        pKISignatureAlgorithm0.engineSetParameter(mGF1ParameterSpec0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parameter accepted
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      try { 
        pKISignatureAlgorithm0.engineInitVerify((Key) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // not a DSA public key: null
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      byte[] byteArray0 = new byte[4];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "DSA");
      MGF1ParameterSpec mGF1ParameterSpec0 = MGF1ParameterSpec.SHA512_224;
      // Undeclared exception!
      try { 
        pKISignatureAlgorithm0.engineInitSign((Key) secretKeySpec0, (AlgorithmParameterSpec) mGF1ParameterSpec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.crypto.spec.SecretKeySpec cannot be cast to java.security.PrivateKey
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom();
      try { 
        pKISignatureAlgorithm0.engineInitSign((Key) null, (SecureRandom) mockSecureRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // not a DSA private key: null
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      byte[] byteArray0 = new byte[7];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "RVWE3<H");
      // Undeclared exception!
      try { 
        pKISignatureAlgorithm0.engineInitSign((Key) secretKeySpec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.crypto.spec.SecretKeySpec cannot be cast to java.security.PrivateKey
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = null;
      try {
        pKISignatureAlgorithm0 = new PKISignatureAlgorithm("?fXgQ-&6H7", "?fXgQ-&6H7");
        fail("Expecting exception: NoSuchProviderException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = null;
      try {
        pKISignatureAlgorithm0 = new PKISignatureAlgorithm("ECDSA", (String) null);
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(Throwable e) {
         //
         // ECDSA Signature not available
         //
         verifyException("java.security.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = null;
      try {
        pKISignatureAlgorithm0 = new PKISignatureAlgorithm((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.Signature", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      // Undeclared exception!
      try { 
        pKISignatureAlgorithm0.engineVerify((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.JavaUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = null;
      try {
        pKISignatureAlgorithm0 = new PKISignatureAlgorithm("ECDSA", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      byte[] byteArray0 = new byte[6];
      try { 
        pKISignatureAlgorithm0.engineUpdate(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // object not initialized for signature or verification
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      byte[] byteArray0 = new byte[14];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, (byte)2, (byte)2, "DSA");
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom();
      // Undeclared exception!
      try { 
        pKISignatureAlgorithm0.engineInitSign((Key) secretKeySpec0, (SecureRandom) mockSecureRandom0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.crypto.spec.SecretKeySpec cannot be cast to java.security.PrivateKey
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      pKISignatureAlgorithm0.engineSetParameter((AlgorithmParameterSpec) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      byte[] byteArray0 = new byte[4];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, (byte)2, (byte)2, "DSA");
      // Undeclared exception!
      try { 
        pKISignatureAlgorithm0.engineInitVerify(secretKeySpec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.crypto.spec.SecretKeySpec cannot be cast to java.security.PublicKey
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      try { 
        pKISignatureAlgorithm0.engineUpdate((byte)119);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // object not initialized for signature or verification
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      MGF1ParameterSpec mGF1ParameterSpec0 = MGF1ParameterSpec.SHA512_224;
      try { 
        pKISignatureAlgorithm0.engineInitSign((Key) null, (AlgorithmParameterSpec) mGF1ParameterSpec0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // not a DSA private key: null
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PKISignatureAlgorithm pKISignatureAlgorithm0 = new PKISignatureAlgorithm("DSA", (String) null);
      try { 
        pKISignatureAlgorithm0.engineInitSign((Key) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // not a DSA private key: null
         //
         verifyException("org.apache.xml.security.stax.impl.algorithms.PKISignatureAlgorithm", e);
      }
  }
}
