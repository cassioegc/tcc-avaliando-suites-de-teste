/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 20:19:26 GMT 2021
 */

package org.apache.xml.security.stax.impl.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import org.apache.xml.security.stax.impl.util.ConcreteLSInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcreteLSInput_ESTest extends ConcreteLSInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      concreteLSInput0.setSystemId("j>M}78enb<Z");
      String string0 = concreteLSInput0.getSystemId();
      assertEquals("j>M}78enb<Z", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      concreteLSInput0.setSystemId("");
      String string0 = concreteLSInput0.getSystemId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      concreteLSInput0.setStringData("0cTB2NS$E!NBBOqa");
      String string0 = concreteLSInput0.getStringData();
      assertEquals("0cTB2NS$E!NBBOqa", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      concreteLSInput0.setStringData("");
      String string0 = concreteLSInput0.getStringData();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      concreteLSInput0.setPublicId("8[|{!D:{Z{F&2!$kH");
      String string0 = concreteLSInput0.getPublicId();
      assertEquals("8[|{!D:{Z{F&2!$kH", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      concreteLSInput0.setEncoding("o");
      String string0 = concreteLSInput0.getEncoding();
      assertEquals("o", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      StringReader stringReader0 = new StringReader("org.apache.xml.security.stax.impl.util.ConcreteLSInput");
      concreteLSInput0.setCharacterStream(stringReader0);
      Reader reader0 = concreteLSInput0.getCharacterStream();
      assertSame(reader0, stringReader0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      concreteLSInput0.setCertifiedText(true);
      boolean boolean0 = concreteLSInput0.getCertifiedText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 2504);
      concreteLSInput0.setByteStream(pushbackInputStream0);
      InputStream inputStream0 = concreteLSInput0.getByteStream();
      assertSame(inputStream0, pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      concreteLSInput0.setBaseURI("");
      String string0 = concreteLSInput0.getBaseURI();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      String string0 = concreteLSInput0.getBaseURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      Reader reader0 = concreteLSInput0.getCharacterStream();
      assertNull(reader0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      String string0 = concreteLSInput0.getEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      concreteLSInput0.setEncoding("");
      String string0 = concreteLSInput0.getEncoding();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      concreteLSInput0.setPublicId("");
      String string0 = concreteLSInput0.getPublicId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      String string0 = concreteLSInput0.getStringData();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      boolean boolean0 = concreteLSInput0.getCertifiedText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      concreteLSInput0.setBaseURI("pMg");
      String string0 = concreteLSInput0.getBaseURI();
      assertEquals("pMg", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      String string0 = concreteLSInput0.getPublicId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      String string0 = concreteLSInput0.getSystemId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConcreteLSInput concreteLSInput0 = new ConcreteLSInput();
      InputStream inputStream0 = concreteLSInput0.getByteStream();
      assertNull(inputStream0);
  }
}
