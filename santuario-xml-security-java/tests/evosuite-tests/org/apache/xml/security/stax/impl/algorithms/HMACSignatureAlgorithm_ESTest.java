/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:03:16 GMT 2021
 */

package org.apache.xml.security.stax.impl.algorithms;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import org.apache.xml.security.stax.impl.algorithms.HMACSignatureAlgorithm;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HMACSignatureAlgorithm_ESTest extends HMACSignatureAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HMACSignatureAlgorithm hMACSignatureAlgorithm0 = null;
      try {
        hMACSignatureAlgorithm0 = new HMACSignatureAlgorithm("", "q?a=?@O{.=q}urD G");
        fail("Expecting exception: NoSuchProviderException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HMACSignatureAlgorithm hMACSignatureAlgorithm0 = null;
      try {
        hMACSignatureAlgorithm0 = new HMACSignatureAlgorithm((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HMACSignatureAlgorithm hMACSignatureAlgorithm0 = null;
      try {
        hMACSignatureAlgorithm0 = new HMACSignatureAlgorithm("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HMACSignatureAlgorithm hMACSignatureAlgorithm0 = null;
      try {
        hMACSignatureAlgorithm0 = new HMACSignatureAlgorithm("Missing message ID", (String) null);
        fail("Expecting exception: NoSuchAlgorithmException");
      
      } catch(Throwable e) {
         //
         // Algorithm Missing message ID not available
         //
         verifyException("javax.crypto.Mac", e);
      }
  }
}
