/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:28:47 GMT 2021
 */

package org.apache.xml.security.stax.impl.transformer.canonicalizer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import javax.xml.namespace.QName;
import org.apache.xml.security.stax.ext.stax.XMLSecAttribute;
import org.apache.xml.security.stax.ext.stax.XMLSecEvent;
import org.apache.xml.security.stax.ext.stax.XMLSecNamespace;
import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
import org.apache.xml.security.stax.impl.stax.XMLSecAttributeImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecNamespaceImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartElementImpl;
import org.apache.xml.security.stax.impl.transformer.canonicalizer.Canonicalizer20010315_Excl;
import org.apache.xml.security.stax.impl.transformer.canonicalizer.Canonicalizer20010315_ExclOmitCommentsTransformer;
import org.apache.xml.security.stax.impl.transformer.canonicalizer.Canonicalizer20010315_ExclWithCommentsTransformer;
import org.apache.xml.security.stax.impl.transformer.canonicalizer.CanonicalizerBase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Canonicalizer20010315_Excl_ESTest extends Canonicalizer20010315_Excl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Canonicalizer20010315_ExclOmitCommentsTransformer canonicalizer20010315_ExclOmitCommentsTransformer0 = new Canonicalizer20010315_ExclOmitCommentsTransformer();
      QName qName0 = new QName(":(");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      QName qName1 = new QName(":(", "inclusiveNamespacePrefixList");
      XMLSecAttributeImpl xMLSecAttributeImpl0 = new XMLSecAttributeImpl(qName1, ":(");
      linkedList0.add((XMLSecAttribute) xMLSecAttributeImpl0);
      // Undeclared exception!
      try { 
        canonicalizer20010315_ExclOmitCommentsTransformer0.transform((XMLSecEvent) xMLSecStartElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.canonicalizer.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Canonicalizer20010315_ExclOmitCommentsTransformer canonicalizer20010315_ExclOmitCommentsTransformer0 = new Canonicalizer20010315_ExclOmitCommentsTransformer();
      QName qName0 = new QName(":(");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      linkedList0.add((XMLSecAttribute) null);
      CanonicalizerBase.C14NStack<XMLSecEvent> canonicalizerBase_C14NStack0 = new CanonicalizerBase.C14NStack<XMLSecEvent>();
      List<XMLSecAttribute> list0 = canonicalizer20010315_ExclOmitCommentsTransformer0.getInitialUtilizedAttributes(xMLSecStartElementImpl0, canonicalizerBase_C14NStack0);
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Canonicalizer20010315_ExclWithCommentsTransformer canonicalizer20010315_ExclWithCommentsTransformer0 = new Canonicalizer20010315_ExclWithCommentsTransformer();
      // Undeclared exception!
      try { 
        canonicalizer20010315_ExclWithCommentsTransformer0.setProperties((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.canonicalizer.Canonicalizer20010315_Excl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Canonicalizer20010315_ExclWithCommentsTransformer canonicalizer20010315_ExclWithCommentsTransformer0 = new Canonicalizer20010315_ExclWithCommentsTransformer();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      BiFunction<Object, Object, XMLSecNamespaceImpl> biFunction0 = (BiFunction<Object, Object, XMLSecNamespaceImpl>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("propagateDefaultNamespace", canonicalizer20010315_ExclWithCommentsTransformer0, biFunction0);
      // Undeclared exception!
      try { 
        canonicalizer20010315_ExclWithCommentsTransformer0.setProperties(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.xml.security.stax.impl.transformer.canonicalizer.Canonicalizer20010315_ExclWithCommentsTransformer cannot be cast to java.lang.Boolean
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.canonicalizer.Canonicalizer20010315_Excl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        Canonicalizer20010315_Excl.getPrefixList(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.canonicalizer.Canonicalizer20010315_Excl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Canonicalizer20010315_ExclOmitCommentsTransformer canonicalizer20010315_ExclOmitCommentsTransformer0 = new Canonicalizer20010315_ExclOmitCommentsTransformer();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(xMLSecStartElement0).getOnElementDeclaredAttributes();
      CanonicalizerBase.C14NStack<XMLSecEvent> canonicalizerBase_C14NStack0 = new CanonicalizerBase.C14NStack<XMLSecEvent>();
      // Undeclared exception!
      try { 
        canonicalizer20010315_ExclOmitCommentsTransformer0.getInitialUtilizedAttributes(xMLSecStartElement0, canonicalizerBase_C14NStack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.canonicalizer.Canonicalizer20010315_Excl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Canonicalizer20010315_ExclOmitCommentsTransformer canonicalizer20010315_ExclOmitCommentsTransformer0 = new Canonicalizer20010315_ExclOmitCommentsTransformer();
      QName qName0 = QName.valueOf("");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      // Undeclared exception!
      try { 
        canonicalizer20010315_ExclOmitCommentsTransformer0.getCurrentUtilizedNamespaces(xMLSecStartElementImpl0, (CanonicalizerBase.C14NStack<XMLSecEvent>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.canonicalizer.Canonicalizer20010315_Excl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Canonicalizer20010315_ExclOmitCommentsTransformer canonicalizer20010315_ExclOmitCommentsTransformer0 = new Canonicalizer20010315_ExclOmitCommentsTransformer();
      QName qName0 = new QName("(", "propagateDefaultNamespace", "propagateDefaultNamespace");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      XMLSecAttributeImpl xMLSecAttributeImpl0 = new XMLSecAttributeImpl(qName0, "org.apache.xml.serity.stax.impl.transformer.canonicalizer.Canonicalizer20010315_Excl");
      linkedList0.add((XMLSecAttribute) xMLSecAttributeImpl0);
      linkedList0.add((XMLSecAttribute) xMLSecAttributeImpl0);
      // Undeclared exception!
      try { 
        canonicalizer20010315_ExclOmitCommentsTransformer0.transform((XMLSecEvent) xMLSecStartElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.canonicalizer.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Canonicalizer20010315_ExclOmitCommentsTransformer canonicalizer20010315_ExclOmitCommentsTransformer0 = new Canonicalizer20010315_ExclOmitCommentsTransformer();
      QName qName0 = QName.valueOf("propagateDefaultNamespace");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      XMLSecAttributeImpl xMLSecAttributeImpl0 = new XMLSecAttributeImpl(qName0, "inclusiveNamespacePrefixList");
      linkedList0.add((XMLSecAttribute) xMLSecAttributeImpl0);
      // Undeclared exception!
      try { 
        canonicalizer20010315_ExclOmitCommentsTransformer0.transform((XMLSecEvent) xMLSecStartElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.canonicalizer.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("#default");
      List<String> list0 = Canonicalizer20010315_Excl.getPrefixList(linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("3+pXt0~80ET79+Wkc");
      List<String> list0 = Canonicalizer20010315_Excl.getPrefixList(linkedList0);
      assertNotNull(list0);
      assertTrue(list0.contains("3+pXt0~80ET79+Wkc"));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = Canonicalizer20010315_Excl.getPrefixList(list0);
      assertNull(list1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Canonicalizer20010315_ExclWithCommentsTransformer canonicalizer20010315_ExclWithCommentsTransformer0 = new Canonicalizer20010315_ExclWithCommentsTransformer();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Boolean boolean0 = Boolean.valueOf("propagateDefaultNamespace");
      hashMap0.put("propagateDefaultNamespace", boolean0);
      canonicalizer20010315_ExclWithCommentsTransformer0.setProperties(hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Canonicalizer20010315_ExclOmitCommentsTransformer canonicalizer20010315_ExclOmitCommentsTransformer0 = new Canonicalizer20010315_ExclOmitCommentsTransformer();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      canonicalizer20010315_ExclOmitCommentsTransformer0.setProperties(hashMap0);
      assertEquals(0, hashMap0.size());
  }
}
