/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:48:09 GMT 2021
 */

package org.apache.xml.security.stax.impl.stax;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.List;
import javax.xml.namespace.QName;
import org.apache.xml.security.stax.ext.stax.XMLSecAttribute;
import org.apache.xml.security.stax.ext.stax.XMLSecNamespace;
import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
import org.apache.xml.security.stax.impl.stax.XMLSecDTDImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartElementImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLSecDTDImpl_ESTest extends XMLSecDTDImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl((QName) null, linkedList0, linkedList1);
      XMLSecDTDImpl xMLSecDTDImpl0 = new XMLSecDTDImpl((String) null, xMLSecStartElementImpl0);
      String string0 = xMLSecDTDImpl0.getDocumentTypeDeclaration();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XMLSecDTDImpl xMLSecDTDImpl0 = new XMLSecDTDImpl("", (XMLSecStartElement) null);
      String string0 = xMLSecDTDImpl0.getDocumentTypeDeclaration();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QName qName0 = QName.valueOf("&amp;");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      XMLSecDTDImpl xMLSecDTDImpl0 = new XMLSecDTDImpl("", xMLSecStartElementImpl0);
      // Undeclared exception!
      try { 
        xMLSecDTDImpl0.writeAsEncodedUnicode((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.stax.XMLSecDTDImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XMLSecDTDImpl xMLSecDTDImpl0 = new XMLSecDTDImpl("%Lcb#WJ$", (XMLSecStartElement) null);
      String string0 = xMLSecDTDImpl0.getDocumentTypeDeclaration();
      assertEquals("%Lcb#WJ$", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      QName qName0 = QName.valueOf("amO{");
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      XMLSecDTDImpl xMLSecDTDImpl0 = new XMLSecDTDImpl("amO{", xMLSecStartElementImpl0);
      StringWriter stringWriter0 = new StringWriter();
      xMLSecDTDImpl0.writeAsEncodedUnicode(stringWriter0);
      assertEquals("amO{", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      QName qName0 = QName.valueOf("amO{");
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      XMLSecDTDImpl xMLSecDTDImpl0 = new XMLSecDTDImpl("amO{", xMLSecStartElementImpl0);
      int int0 = xMLSecDTDImpl0.getEventType();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      QName qName0 = QName.valueOf("amO{");
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      XMLSecDTDImpl xMLSecDTDImpl0 = new XMLSecDTDImpl("amO{", xMLSecStartElementImpl0);
      List list0 = xMLSecDTDImpl0.getEntities();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      QName qName0 = QName.valueOf("amO{");
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      XMLSecDTDImpl xMLSecDTDImpl0 = new XMLSecDTDImpl("amO{", xMLSecStartElementImpl0);
      List list0 = xMLSecDTDImpl0.getNotations();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      QName qName0 = QName.valueOf("amO{");
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      XMLSecDTDImpl xMLSecDTDImpl0 = new XMLSecDTDImpl("amO{", xMLSecStartElementImpl0);
      Object object0 = xMLSecDTDImpl0.getProcessedDTD();
      assertNull(object0);
  }
}
