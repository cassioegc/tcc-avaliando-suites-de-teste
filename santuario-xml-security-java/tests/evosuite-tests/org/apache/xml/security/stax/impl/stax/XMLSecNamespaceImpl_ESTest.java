/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:54:08 GMT 2021
 */

package org.apache.xml.security.stax.impl.stax;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.List;
import javax.xml.namespace.QName;
import org.apache.xml.security.stax.ext.stax.XMLSecNamespace;
import org.apache.xml.security.stax.impl.stax.XMLSecNamespaceImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLSecNamespaceImpl_ESTest extends XMLSecNamespaceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("xURF3I&\"RE0 gJJV", "xURF3I&\"RE0 gJJV");
      StringWriter stringWriter0 = new StringWriter(0);
      ((XMLSecNamespaceImpl) xMLSecNamespace0).writeAsEncodedUnicode(stringWriter0);
      assertEquals("xmlns:xURF3I&\"RE0 gJJV=\"xURF3I&amp;&quot;RE0 gJJV\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("ZP\"XI?uds(v#!+-AFi", "ZP\"XI?uds(v#!+-AFi");
      StringWriter stringWriter0 = new StringWriter(71);
      ((XMLSecNamespaceImpl) xMLSecNamespace0).writeAsEncodedUnicode(stringWriter0);
      assertEquals("xmlns:ZP\"XI?uds(v#!+-AFi=\"ZP&quot;XI?uds(v#!+-AFi\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("N&]JrQ~ubLM", "N&]JrQ~ubLM");
      StringWriter stringWriter0 = new StringWriter(2732);
      ((XMLSecNamespaceImpl) xMLSecNamespace0).writeAsEncodedUnicode(stringWriter0);
      assertEquals("xmlns:N&]JrQ~ubLM=\"N&amp;]JrQ~ubLM\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("ZPXI?uds(v#e!+-AFi", "ZPXI?uds(v#e!+-AFi");
      XMLSecNamespaceImpl xMLSecNamespaceImpl0 = (XMLSecNamespaceImpl)XMLSecNamespaceImpl.getInstance("C", "ZPXI?uds(v#e!+-AFi");
      boolean boolean0 = xMLSecNamespaceImpl0.equals(xMLSecNamespace0);
      assertFalse(boolean0);
      assertEquals("C", xMLSecNamespaceImpl0.getPrefix());
      assertEquals("ZPXI?uds(v#e!+-AFi", xMLSecNamespaceImpl0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("xmlns=\"", "?Q`|GK6R\u0005");
      xMLSecNamespace0.getElementPath();
      XMLSecNamespace xMLSecNamespace1 = XMLSecNamespaceImpl.getInstance("xmlns=\"", "?Q`|GK6R\u0005");
      XMLSecNamespaceImpl.getInstance("xURF3I&.RE0 gJJV", "xmlns=\"");
      XMLSecNamespaceImpl.getInstance("E.wDCi", (String) null);
      XMLSecNamespaceImpl.getInstance("#}gw", "xmlns=\"");
      XMLSecNamespaceImpl.getInstance("a!@~+b>PaA{{JVzs8`", "#}gw");
      XMLSecNamespaceImpl.getInstance("?Q`|GK6R\u0005", "17BV0h\"Wl*A9");
      XMLSecNamespaceImpl.getInstance("", "E.wDCi");
      XMLSecNamespaceImpl.getInstance("org.apache.xml.security.stax.impl.stax.XMLSecAttributeImpl", " [|zsSXixN^3'Ac}p_");
      XMLSecNamespace xMLSecNamespace2 = XMLSecNamespaceImpl.getInstance("E.wDCi", "xURF3I&.RE0 gJJV");
      XMLSecNamespace xMLSecNamespace3 = XMLSecNamespaceImpl.getInstance((String) null, "");
      LinkedList<QName> linkedList0 = new LinkedList<QName>();
      xMLSecNamespace3.getElementPath((List<QName>) linkedList0);
      StringWriter stringWriter0 = new StringWriter(0);
      ((XMLSecNamespaceImpl) xMLSecNamespace1).writeAsEncodedUnicode(stringWriter0);
      ((XMLSecNamespaceImpl) xMLSecNamespace0).isDefaultNamespaceDeclaration();
      ((XMLSecNamespaceImpl) xMLSecNamespace1).isDefaultNamespaceDeclaration();
      ((XMLSecNamespaceImpl) xMLSecNamespace2).writeAsEncodedUnicode(stringWriter0);
      ((XMLSecNamespaceImpl) xMLSecNamespace3).writeAsEncodedUnicode(stringWriter0);
      assertEquals("xmlns:xmlns=\"=\"?Q`|GK6R\u0005\"xmlns:E.wDCi=\"xURF3I&amp;.RE0 gJJV\"xmlns=\"\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("5NJ6", "rZiWv7$74%S");
      String string0 = ((XMLSecNamespaceImpl) xMLSecNamespace0).getValue();
      assertEquals("rZiWv7$74%S", string0);
      assertEquals("5NJ6", xMLSecNamespace0.getPrefix());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("xo]/ins", "=\"");
      String string0 = ((XMLSecNamespaceImpl) xMLSecNamespace0).getPrefix();
      assertEquals("xo]/ins", string0);
      assertEquals("=\"", xMLSecNamespace0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("[Y~fo Y#6N_>iQ:92Q\"", "[Y~fo Y#6N_>iQ:92Q\"");
      String string0 = ((XMLSecNamespaceImpl) xMLSecNamespace0).getNamespaceURI();
      assertEquals("[Y~fo Y#6N_>iQ:92Q\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("", "");
      XMLSecNamespaceImpl xMLSecNamespaceImpl0 = (XMLSecNamespaceImpl)XMLSecNamespaceImpl.getInstance("xURF3I&\"RE0 gJJV", "xURF3I&\"RE0 gJJV");
      xMLSecNamespaceImpl0.compareTo(xMLSecNamespace0);
      assertEquals("xURF3I&\"RE0 gJJV", xMLSecNamespaceImpl0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("5NJ6", "rZiWv7$74%S");
      XMLSecNamespaceImpl xMLSecNamespaceImpl0 = (XMLSecNamespaceImpl)XMLSecNamespaceImpl.getInstance((String) null, "5NJ6");
      int int0 = xMLSecNamespaceImpl0.compareTo(xMLSecNamespace0);
      assertEquals((-4), int0);
      assertEquals("5NJ6", xMLSecNamespaceImpl0.getNamespaceURI());
      assertEquals("rZiWv7$74%S", xMLSecNamespace0.getValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("HEa2A;EK`P,aIcEZ6|", "\"");
      // Undeclared exception!
      try { 
        ((XMLSecNamespaceImpl) xMLSecNamespace0).writeAsEncodedUnicode((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.stax.XMLSecNamespaceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLSecNamespaceImpl xMLSecNamespaceImpl0 = (XMLSecNamespaceImpl)XMLSecNamespaceImpl.getInstance((String) null, (String) null);
      // Undeclared exception!
      try { 
        xMLSecNamespaceImpl0.compareTo((XMLSecNamespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.stax.XMLSecNamespaceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("HEa2A;EK`P,aIcEZ6|", "\"");
      ((XMLSecNamespaceImpl) xMLSecNamespace0).getName();
      assertEquals("HEa2A;EK`P,aIcEZ6|", xMLSecNamespace0.getPrefix());
      assertEquals("\"", xMLSecNamespace0.getValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("", "");
      XMLSecNamespace xMLSecNamespace1 = XMLSecNamespaceImpl.getInstance("JB3jT>zO", (String) null);
      assertEquals("JB3jT>zO", xMLSecNamespace1.getPrefix());
      
      XMLSecNamespaceImpl.getInstance("", "http://www.w3.org/2000/xmlns/");
      XMLSecNamespace xMLSecNamespace2 = XMLSecNamespaceImpl.getInstance("", "org.apache.xml.security.stax.impl.stax.XMLSecEventBaseImpl");
      XMLSecNamespaceImpl xMLSecNamespaceImpl0 = (XMLSecNamespaceImpl)XMLSecNamespaceImpl.getInstance("", (String) null);
      XMLSecNamespaceImpl xMLSecNamespaceImpl1 = (XMLSecNamespaceImpl)XMLSecNamespaceImpl.getInstance("", "JB3jT>zO");
      xMLSecNamespaceImpl1.compareTo(xMLSecNamespace2);
      XMLSecNamespaceImpl xMLSecNamespaceImpl2 = (XMLSecNamespaceImpl)XMLSecNamespaceImpl.getInstance("", "JB3jT>zO");
      XMLSecNamespaceImpl.getInstance(".DS*", "_W|->[qE/x");
      XMLSecNamespaceImpl.getInstance("Y][Fz T`Ev}", ".DS*");
      xMLSecNamespaceImpl0.hashCode();
      assertSame(xMLSecNamespaceImpl0, xMLSecNamespace0);
      assertNotSame(xMLSecNamespaceImpl0, xMLSecNamespaceImpl2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("org.apache.xml.security.stax.impl.stax.XMLSecAttributeImpl", "");
      XMLSecNamespace xMLSecNamespace1 = XMLSecNamespaceImpl.getInstance("p*6c+t", "p*6c+t");
      xMLSecNamespace1.getElementPath();
      XMLSecNamespace xMLSecNamespace2 = XMLSecNamespaceImpl.getInstance("http://www.w3.org/2000/xmlns/", "p;");
      boolean boolean0 = ((XMLSecNamespaceImpl) xMLSecNamespace2).isSpecified();
      assertEquals("p;", xMLSecNamespace2.getValue());
      assertTrue(boolean0);
      
      ((XMLSecNamespaceImpl) xMLSecNamespace0).getValue();
      assertFalse(xMLSecNamespace0.isDefaultNamespaceDeclaration());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("", "");
      String string0 = ((XMLSecNamespaceImpl) xMLSecNamespace0).getPrefix();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLSecNamespaceImpl xMLSecNamespaceImpl0 = (XMLSecNamespaceImpl)XMLSecNamespaceImpl.getInstance("", "N&]JrQ~ubLM");
      String string0 = xMLSecNamespaceImpl0.toString();
      assertEquals("xmlns=\"N&]JrQ~ubLM\"", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLSecNamespaceImpl xMLSecNamespaceImpl0 = (XMLSecNamespaceImpl)XMLSecNamespaceImpl.getInstance("\"hO*Cm;Qk/e;I", "\"hO*Cm;Qk/e;I");
      String string0 = xMLSecNamespaceImpl0.toString();
      assertEquals("xmlns:\"hO*Cm;Qk/e;I=\"\"hO*Cm;Qk/e;I\"", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance((String) null, (String) null);
      boolean boolean0 = ((XMLSecNamespaceImpl) xMLSecNamespace0).isDefaultNamespaceDeclaration();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLSecNamespaceImpl xMLSecNamespaceImpl0 = (XMLSecNamespaceImpl)XMLSecNamespaceImpl.getInstance((String) null, (String) null);
      boolean boolean0 = xMLSecNamespaceImpl0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLSecNamespaceImpl xMLSecNamespaceImpl0 = (XMLSecNamespaceImpl)XMLSecNamespaceImpl.getInstance("ZPXI?uds(v#e!+-AFi", "ZPXI?uds(v#e!+-AFi");
      boolean boolean0 = xMLSecNamespaceImpl0.equals(xMLSecNamespaceImpl0);
      assertFalse(boolean0);
      assertEquals("ZPXI?uds(v#e!+-AFi", xMLSecNamespaceImpl0.getPrefix());
      assertEquals("ZPXI?uds(v#e!+-AFi", xMLSecNamespaceImpl0.getNamespaceURI());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("", "");
      String string0 = ((XMLSecNamespaceImpl) xMLSecNamespace0).getNamespaceURI();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("\"hO*Cm;Qk/e;I", "\"hO*Cm;Qk/e;I");
      String string0 = ((XMLSecNamespaceImpl) xMLSecNamespace0).getDTDType();
      assertEquals("CDATA", string0);
      assertEquals("\"hO*Cm;Qk/e;I", xMLSecNamespace0.getValue());
      assertEquals("\"hO*Cm;Qk/e;I", xMLSecNamespace0.getPrefix());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("\"hO*Cm;Qk/e;I", "\"hO*Cm;Qk/e;I");
      boolean boolean0 = ((XMLSecNamespaceImpl) xMLSecNamespace0).isNamespace();
      assertTrue(boolean0);
      assertEquals("\"hO*Cm;Qk/e;I", xMLSecNamespace0.getNamespaceURI());
      assertEquals("\"hO*Cm;Qk/e;I", xMLSecNamespace0.getPrefix());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("\"hO*Cm;Qk/e;I", "\"hO*Cm;Qk/e;I");
      int int0 = ((XMLSecNamespaceImpl) xMLSecNamespace0).getEventType();
      assertFalse(xMLSecNamespace0.isDefaultNamespaceDeclaration());
      assertEquals(13, int0);
      assertEquals("\"hO*Cm;Qk/e;I", xMLSecNamespace0.getValue());
  }
}
