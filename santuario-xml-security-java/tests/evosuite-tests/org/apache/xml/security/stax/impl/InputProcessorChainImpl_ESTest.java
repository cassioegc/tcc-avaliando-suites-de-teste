/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 20:15:25 GMT 2021
 */

package org.apache.xml.security.stax.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.List;
import org.apache.xml.security.stax.ext.DocumentContext;
import org.apache.xml.security.stax.ext.InboundSecurityContext;
import org.apache.xml.security.stax.ext.InputProcessor;
import org.apache.xml.security.stax.ext.InputProcessorChain;
import org.apache.xml.security.stax.ext.XMLSecurityConstants;
import org.apache.xml.security.stax.ext.XMLSecurityProperties;
import org.apache.xml.security.stax.ext.stax.XMLSecEvent;
import org.apache.xml.security.stax.impl.DocumentContextImpl;
import org.apache.xml.security.stax.impl.InputProcessorChainImpl;
import org.apache.xml.security.stax.impl.processor.input.LogInputProcessor;
import org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor;
import org.apache.xml.security.stax.impl.processor.output.XMLEncryptOutputProcessor;
import org.apache.xml.security.stax.impl.stax.XMLSecEndDocumentImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InputProcessorChainImpl_ESTest extends InputProcessorChainImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      InputProcessorChain inputProcessorChain0 = inputProcessorChainImpl0.createSubChain((InputProcessor) xMLSecurityInputProcessor0);
      assertNotSame(inputProcessorChain0, inputProcessorChainImpl0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, (-1));
      LogInputProcessor logInputProcessor0 = new LogInputProcessor((XMLSecurityProperties) null);
      inputProcessorChainImpl0.removeProcessor(logInputProcessor0);
      assertEquals(XMLSecurityConstants.Phase.POSTPROCESSING, logInputProcessor0.getPhase());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      LogInputProcessor logInputProcessor0 = new LogInputProcessor(xMLSecurityProperties0);
      XMLSecurityConstants.Phase xMLSecurityConstants_Phase0 = XMLSecurityConstants.Phase.PROCESSING;
      logInputProcessor0.setPhase(xMLSecurityConstants_Phase0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      inputProcessorChainImpl0.addProcessor(logInputProcessor0);
      assertEquals(XMLSecurityConstants.Phase.PROCESSING, logInputProcessor0.getPhase());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      XMLSecEvent xMLSecEvent0 = inputProcessorChainImpl0.processHeaderEvent();
      assertNull(xMLSecEvent0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      ArrayDeque<XMLSecEvent> arrayDeque0 = new ArrayDeque<XMLSecEvent>();
      XMLSecEndDocumentImpl xMLSecEndDocumentImpl0 = new XMLSecEndDocumentImpl();
      arrayDeque0.add(xMLSecEndDocumentImpl0);
      XMLSecurityInputProcessor.InternalReplayProcessor xMLSecurityInputProcessor_InternalReplayProcessor0 = new XMLSecurityInputProcessor.InternalReplayProcessor((XMLSecurityProperties) null, arrayDeque0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor_InternalReplayProcessor0);
      XMLSecEvent xMLSecEvent0 = inputProcessorChainImpl0.processEvent();
      assertFalse(xMLSecEvent0.isStartElement());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, documentContextImpl0, (-2808), (List<InputProcessor>) null);
      List<InputProcessor> list0 = inputProcessorChainImpl0.getProcessors();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      List<InputProcessor> list0 = inputProcessorChainImpl0.getProcessors();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, (DocumentContextImpl) null);
      DocumentContext documentContext0 = inputProcessorChainImpl0.getDocumentContext();
      assertNull(documentContext0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, documentContextImpl0);
      documentContextImpl0.setIsInSignedContent((-3450), (Object) null);
      DocumentContext documentContext0 = inputProcessorChainImpl0.getDocumentContext();
      assertSame(documentContextImpl0, documentContext0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      documentContextImpl0.setIsInEncryptedContent((-1808), documentContextImpl0);
      LinkedList<InputProcessor> linkedList0 = new LinkedList<InputProcessor>();
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, documentContextImpl0, 0, linkedList0);
      DocumentContext documentContext0 = inputProcessorChainImpl0.getDocumentContext();
      assertNull(documentContext0.getBaseURI());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, (-1598));
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.removeProcessor((InputProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.InputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, documentContextImpl0, 20, (List<InputProcessor>) null);
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.processHeaderEvent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.InputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, (-1572));
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.processHeaderEvent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, documentContextImpl0, (-2808), (List<InputProcessor>) null);
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.processEvent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.InputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, (-1598));
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.processEvent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      try { 
        inputProcessorChainImpl0.doFinal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.impl.processor.input.XMLSecurityInputProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, documentContextImpl0, 3243, (List<InputProcessor>) null);
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.doFinal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.InputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      LogInputProcessor logInputProcessor0 = new LogInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.removeProcessor(logInputProcessor0);
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.doFinal();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      LogInputProcessor logInputProcessor0 = new LogInputProcessor(xMLSecurityProperties0);
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, (DocumentContextImpl) null);
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.createSubChain((InputProcessor) logInputProcessor0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.InputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      LogInputProcessor logInputProcessor0 = new LogInputProcessor(xMLSecurityProperties0);
      InputProcessorChain inputProcessorChain0 = inputProcessorChainImpl0.createSubChain((InputProcessor) logInputProcessor0, true);
      assertNotSame(inputProcessorChain0, inputProcessorChainImpl0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      ArrayDeque<XMLSecEvent> arrayDeque0 = new ArrayDeque<XMLSecEvent>();
      XMLSecurityInputProcessor.InternalReplayProcessor xMLSecurityInputProcessor_InternalReplayProcessor0 = new XMLSecurityInputProcessor.InternalReplayProcessor((XMLSecurityProperties) null, arrayDeque0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor_InternalReplayProcessor0);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      assertEquals(XMLSecurityConstants.Phase.POSTPROCESSING, xMLSecurityInputProcessor0.getPhase());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, documentContextImpl0, (-2808), (List<InputProcessor>) null);
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.addProcessor((InputProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.InputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      LogInputProcessor logInputProcessor0 = new LogInputProcessor(xMLSecurityProperties0);
      InputProcessorChain inputProcessorChain0 = inputProcessorChainImpl0.createSubChain((InputProcessor) logInputProcessor0, false);
      assertNotSame(inputProcessorChain0, inputProcessorChainImpl0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      LogInputProcessor logInputProcessor0 = new LogInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.removeProcessor(logInputProcessor0);
      inputProcessorChainImpl0.removeProcessor(xMLSecurityInputProcessor0);
      assertEquals(XMLSecurityConstants.Phase.POSTPROCESSING, xMLSecurityInputProcessor0.getPhase());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      xMLSecurityInputProcessor0.addAfterProcessor(xMLSecurityInputProcessor0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      xMLSecurityInputProcessor0.addBeforeProcessor(xMLEncryptOutputProcessor0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      assertEquals(XMLSecurityConstants.Phase.POSTPROCESSING, xMLSecurityInputProcessor0.getPhase());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      LogInputProcessor logInputProcessor0 = new LogInputProcessor(xMLSecurityProperties0);
      logInputProcessor0.addBeforeProcessor("AeRM4&Sp2FiXv");
      inputProcessorChainImpl0.addProcessor(logInputProcessor0);
      assertEquals(XMLSecurityConstants.Phase.POSTPROCESSING, logInputProcessor0.getPhase());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      Object object0 = new Object();
      xMLSecurityInputProcessor0.addAfterProcessor(object0);
      xMLSecurityInputProcessor0.addBeforeProcessor((Object) null);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      assertEquals(XMLSecurityConstants.Phase.POSTPROCESSING, xMLSecurityInputProcessor0.getPhase());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      xMLSecurityInputProcessor0.addAfterProcessor(xMLSecurityInputProcessor0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      assertEquals(XMLSecurityConstants.Phase.POSTPROCESSING, xMLSecurityInputProcessor0.getPhase());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      LogInputProcessor logInputProcessor0 = new LogInputProcessor(xMLSecurityProperties0);
      logInputProcessor0.addAfterProcessor((Object) null);
      inputProcessorChainImpl0.addProcessor(logInputProcessor0);
      assertEquals(XMLSecurityConstants.Phase.POSTPROCESSING, logInputProcessor0.getPhase());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      XMLSecurityInputProcessor xMLSecurityInputProcessor0 = new XMLSecurityInputProcessor(xMLSecurityProperties0);
      inputProcessorChainImpl0.addProcessor(xMLSecurityInputProcessor0);
      LogInputProcessor logInputProcessor0 = new LogInputProcessor(xMLSecurityProperties0);
      XMLSecurityConstants.Phase xMLSecurityConstants_Phase0 = XMLSecurityConstants.Phase.PROCESSING;
      logInputProcessor0.setPhase(xMLSecurityConstants_Phase0);
      inputProcessorChainImpl0.addProcessor(logInputProcessor0);
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.processEvent();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, 0);
      InboundSecurityContext inboundSecurityContext0 = inputProcessorChainImpl0.getSecurityContext();
      assertNull(inboundSecurityContext0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, (-1598));
      inputProcessorChainImpl0.reset();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.doFinal();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null, documentContextImpl0);
      // Undeclared exception!
      try { 
        inputProcessorChainImpl0.processHeaderEvent();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InputProcessorChainImpl inputProcessorChainImpl0 = new InputProcessorChainImpl((InboundSecurityContext) null);
      List<InputProcessor> list0 = inputProcessorChainImpl0.getProcessors();
      assertTrue(list0.isEmpty());
  }
}
