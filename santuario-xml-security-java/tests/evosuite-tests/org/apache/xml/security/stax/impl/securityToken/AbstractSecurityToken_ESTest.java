/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:18:54 GMT 2021
 */

package org.apache.xml.security.stax.impl.securityToken;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.Key;
import java.security.PublicKey;
import java.security.cert.X509Certificate;
import java.util.List;
import java.util.Map;
import javax.crypto.spec.SecretKeySpec;
import org.apache.xml.security.binding.xmldsig.DSAKeyValueType;
import org.apache.xml.security.binding.xmldsig.RSAKeyValueType;
import org.apache.xml.security.stax.ext.InboundSecurityContext;
import org.apache.xml.security.stax.impl.securityToken.DsaKeyValueSecurityToken;
import org.apache.xml.security.stax.impl.securityToken.GenericOutboundSecurityToken;
import org.apache.xml.security.stax.impl.securityToken.RsaKeyValueSecurityToken;
import org.apache.xml.security.stax.impl.securityToken.X509IssuerSerialSecurityToken;
import org.apache.xml.security.stax.impl.securityToken.X509SKISecurityToken;
import org.apache.xml.security.stax.securityToken.SecurityTokenConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractSecurityToken_ESTest extends AbstractSecurityToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DSAKeyValueType dSAKeyValueType0 = new DSAKeyValueType();
      DsaKeyValueSecurityToken dsaKeyValueSecurityToken0 = new DsaKeyValueSecurityToken(dSAKeyValueType0, (InboundSecurityContext) null);
      Map<String, Key> map0 = dsaKeyValueSecurityToken0.getSecretKey();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = rsaKeyValueSecurityToken0.getTokenType();
      X509SKISecurityToken x509SKISecurityToken0 = new X509SKISecurityToken(securityTokenConstants_TokenType0, (InboundSecurityContext) null, "4");
      SecurityTokenConstants.TokenUsage securityTokenConstants_TokenUsage0 = new SecurityTokenConstants.TokenUsage("");
      x509SKISecurityToken0.addTokenUsage(securityTokenConstants_TokenUsage0);
      assertTrue(x509SKISecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      boolean boolean0 = rsaKeyValueSecurityToken0.isAsymmetric();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = new SecurityTokenConstants.TokenType("72gbc");
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("72gbc", securityTokenConstants_TokenType0);
      boolean boolean0 = genericOutboundSecurityToken0.isAsymmetric();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = rsaKeyValueSecurityToken0.getTokenType();
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("4", securityTokenConstants_TokenType0, (Key) null);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[2];
      genericOutboundSecurityToken0.setX509Certificates(x509CertificateArray0);
      genericOutboundSecurityToken0.getX509Certificates();
      assertFalse(genericOutboundSecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenUsage securityTokenConstants_TokenUsage0 = new SecurityTokenConstants.TokenUsage("4");
      rsaKeyValueSecurityToken0.addTokenUsage(securityTokenConstants_TokenUsage0);
      List<SecurityTokenConstants.TokenUsage> list0 = rsaKeyValueSecurityToken0.getTokenUsages();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      String string0 = rsaKeyValueSecurityToken0.getSha1Identifier();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      rsaKeyValueSecurityToken0.setSha1Identifier("4");
      String string0 = rsaKeyValueSecurityToken0.getSha1Identifier();
      assertEquals("4", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DSAKeyValueType dSAKeyValueType0 = new DSAKeyValueType();
      DsaKeyValueSecurityToken dsaKeyValueSecurityToken0 = new DsaKeyValueSecurityToken(dSAKeyValueType0, (InboundSecurityContext) null);
      dsaKeyValueSecurityToken0.setSha1Identifier("");
      String string0 = dsaKeyValueSecurityToken0.getSha1Identifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = rsaKeyValueSecurityToken0.getTokenType();
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("4", securityTokenConstants_TokenType0, (Key) null);
      genericOutboundSecurityToken0.getPublicKey();
      assertFalse(genericOutboundSecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      byte[] byteArray0 = new byte[5];
      rSAKeyValueType0.setModulus(byteArray0);
      rSAKeyValueType0.setExponent(byteArray0);
      try { 
        rsaKeyValueSecurityToken0.getPublicKey();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.security.InvalidKeyException: RSA keys must be at least 512 bits long
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.RsaKeyValueSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      rsaKeyValueSecurityToken0.setSecretKey("4", (Key) null);
      assertTrue(rsaKeyValueSecurityToken0.isIncludedInMessage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DSAKeyValueType dSAKeyValueType0 = new DSAKeyValueType();
      DsaKeyValueSecurityToken dsaKeyValueSecurityToken0 = new DsaKeyValueSecurityToken(dSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = dsaKeyValueSecurityToken0.getTokenType();
      X509IssuerSerialSecurityToken x509IssuerSerialSecurityToken0 = new X509IssuerSerialSecurityToken(securityTokenConstants_TokenType0, (InboundSecurityContext) null, "M3e%");
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "M3e%");
      x509IssuerSerialSecurityToken0.setSecretKey("M3e%", secretKeySpec0);
      assertEquals("M3e%", x509IssuerSerialSecurityToken0.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = rsaKeyValueSecurityToken0.getTokenType();
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("4", securityTokenConstants_TokenType0, (Key) null);
      genericOutboundSecurityToken0.getX509Certificates();
      assertFalse(genericOutboundSecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = rsaKeyValueSecurityToken0.getTokenType();
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("4", securityTokenConstants_TokenType0, (Key) null);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[2];
      genericOutboundSecurityToken0.setX509Certificates(x509CertificateArray0);
      // Undeclared exception!
      try { 
        genericOutboundSecurityToken0.getPublicKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.AbstractSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "_M/3e%");
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = rsaKeyValueSecurityToken0.getTokenType();
      X509Certificate[] x509CertificateArray0 = new X509Certificate[0];
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("^`/6!3)kRNE8E3/", securityTokenConstants_TokenType0, secretKeySpec0, x509CertificateArray0);
      genericOutboundSecurityToken0.getPublicKey();
      assertFalse(genericOutboundSecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      // Undeclared exception!
      try { 
        rsaKeyValueSecurityToken0.setSecretKey((String) null, (Key) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // algorithmURI must not be null
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.AbstractSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = new SecurityTokenConstants.TokenType("");
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = null;
      try {
        genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("", securityTokenConstants_TokenType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No id specified
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.AbstractSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = null;
      try {
        genericOutboundSecurityToken0 = new GenericOutboundSecurityToken((String) null, (SecurityTokenConstants.TokenType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No id specified
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.AbstractSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = rsaKeyValueSecurityToken0.getTokenType();
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("\"r+M0", securityTokenConstants_TokenType0);
      genericOutboundSecurityToken0.getId();
      assertFalse(genericOutboundSecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DSAKeyValueType dSAKeyValueType0 = new DSAKeyValueType();
      DsaKeyValueSecurityToken dsaKeyValueSecurityToken0 = new DsaKeyValueSecurityToken(dSAKeyValueType0, (InboundSecurityContext) null);
      dsaKeyValueSecurityToken0.setPublicKey((PublicKey) null);
      assertTrue(dsaKeyValueSecurityToken0.isIncludedInMessage());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DSAKeyValueType dSAKeyValueType0 = new DSAKeyValueType();
      DsaKeyValueSecurityToken dsaKeyValueSecurityToken0 = new DsaKeyValueSecurityToken(dSAKeyValueType0, (InboundSecurityContext) null);
      dsaKeyValueSecurityToken0.setAsymmetric(false);
      assertTrue(dsaKeyValueSecurityToken0.isIncludedInMessage());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = rsaKeyValueSecurityToken0.getTokenType();
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("4", securityTokenConstants_TokenType0, (Key) null);
      SecurityTokenConstants.TokenUsage securityTokenConstants_TokenUsage0 = new SecurityTokenConstants.TokenUsage("4");
      genericOutboundSecurityToken0.addTokenUsage(securityTokenConstants_TokenUsage0);
      assertFalse(genericOutboundSecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      List<SecurityTokenConstants.TokenUsage> list0 = rsaKeyValueSecurityToken0.getTokenUsages();
      assertEquals(0, list0.size());
  }
}
