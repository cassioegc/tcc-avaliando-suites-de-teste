/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 20:02:32 GMT 2021
 */

package org.apache.xml.security.stax.impl.processor.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import org.apache.xml.security.stax.ext.OutboundSecurityContext;
import org.apache.xml.security.stax.ext.OutputProcessor;
import org.apache.xml.security.stax.ext.OutputProcessorChain;
import org.apache.xml.security.stax.ext.SecurePart;
import org.apache.xml.security.stax.ext.XMLSecurityConstants;
import org.apache.xml.security.stax.ext.stax.XMLSecAttribute;
import org.apache.xml.security.stax.ext.stax.XMLSecEvent;
import org.apache.xml.security.stax.ext.stax.XMLSecNamespace;
import org.apache.xml.security.stax.ext.stax.XMLSecStartDocument;
import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
import org.apache.xml.security.stax.impl.DocumentContextImpl;
import org.apache.xml.security.stax.impl.OutboundSecurityContextImpl;
import org.apache.xml.security.stax.impl.OutputProcessorChainImpl;
import org.apache.xml.security.stax.impl.XMLSecurityStreamWriter;
import org.apache.xml.security.stax.impl.processor.output.FinalOutputProcessor;
import org.apache.xml.security.stax.impl.stax.XMLSecAttributeImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecCommentImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartDocumentImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartElementImpl;
import org.apache.xml.security.stax.securityToken.OutboundSecurityToken;
import org.apache.xml.security.stax.securityToken.SecurityTokenProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FinalOutputProcessor_ESTest extends FinalOutputProcessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(dataOutputStream0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(objectOutputStream0, (String) null);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (DocumentContextImpl) null);
      try { 
        finalOutputProcessor0.doFinal(outputProcessorChainImpl0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.apache.xml.security.stax.impl.processor.output.FinalOutputProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      documentContextImpl0.getContentTypeMap();
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      xMLSecurityStreamWriter0.writeEmptyElement((String) null, (String) null, (String) null);
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      xMLSecurityStreamWriter0.setPrefix((String) null, (String) null);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      // Undeclared exception!
      try { 
        finalOutputProcessor0.doFinal(outputProcessorChainImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-878));
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      XMLSecurityConstants.Phase xMLSecurityConstants_Phase0 = XMLSecurityConstants.Phase.PREPROCESSING;
      finalOutputProcessor0.setPhase(xMLSecurityConstants_Phase0);
      QName qName0 = new QName("Exponent", "M/");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      outboundSecurityContextImpl0.getAsList((Object) "Exponent");
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, (Collection<XMLSecNamespace>) null);
      XMLSecStartElementImpl xMLSecStartElementImpl1 = new XMLSecStartElementImpl(qName0, linkedList0, (List<XMLSecNamespace>) null, xMLSecStartElementImpl0);
      XMLSecCommentImpl xMLSecCommentImpl0 = new XMLSecCommentImpl("M/", xMLSecStartElementImpl1);
      OutputProcessorChain outputProcessorChain0 = outputProcessorChainImpl0.createSubChain((OutputProcessor) finalOutputProcessor0, (XMLSecStartElement) xMLSecStartElementImpl1);
      // Undeclared exception!
      try { 
        finalOutputProcessor0.processEvent(xMLSecCommentImpl0, outputProcessorChain0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom((-2648));
      MockFile mockFile0 = new MockFile("U6+k", "U6+k");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.format("U6+k", (Object[]) null);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(printStream0, (String) null);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      OutputProcessorChain outputProcessorChain0 = outputProcessorChainImpl0.createSubChain((OutputProcessor) finalOutputProcessor0);
      finalOutputProcessor0.doFinal(outputProcessorChain0);
      assertEquals((-1), finalOutputProcessor0.getActionOrder());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((OutputStream) null, "");
      XMLSecNamespace xMLSecNamespace0 = finalOutputProcessor0.createNamespace("", "+<'/Z");
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      OutboundSecurityContextImpl outboundSecurityContextImpl1 = new OutboundSecurityContextImpl();
      outboundSecurityContextImpl1.getRegisteredSecurityTokenProviders();
      outboundSecurityContextImpl1.getSecurityTokenProvider("+<'/Z");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("", (SecurityTokenProvider<OutboundSecurityToken>) null);
      // Undeclared exception!
      try { 
        finalOutputProcessor0.processEvent(xMLSecNamespace0, outputProcessorChainImpl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(byteArrayOutputStream0, (String) null);
      Boolean boolean0 = Boolean.FALSE;
      XMLSecStartDocumentImpl xMLSecStartDocumentImpl0 = new XMLSecStartDocumentImpl(" :3m$", " :3m$", boolean0, (String) null);
      XMLSecStartDocument xMLSecStartDocument0 = xMLSecStartDocumentImpl0.asStartDocument();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null, 0);
      // Undeclared exception!
      try { 
        finalOutputProcessor0.processEvent(xMLSecStartDocument0, outputProcessorChainImpl0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  :3m$
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 20);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      outboundSecurityContextImpl0.getSecurityTokenProvider("Sv");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("B>,[8z6fSc^,?I", (SecurityTokenProvider<OutboundSecurityToken>) null);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      QName qName0 = QName.valueOf("bU6@;D:FB%0pn.yoJ");
      XMLSecAttributeImpl xMLSecAttributeImpl0 = new XMLSecAttributeImpl(qName0, "bU6@;D:FB%0pn.yoJ");
      XMLSecNamespace xMLSecNamespace0 = xMLSecAttributeImpl0.getAttributeNamespace();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl1 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      try { 
        finalOutputProcessor0.processEvent(xMLSecNamespace0, outputProcessorChainImpl1);
        fail("Expecting exception: XMLStreamException");
      
      } catch(XMLStreamException e) {
         //
         // No open start element.
         //
         verifyException("org.apache.xml.security.stax.impl.XMLSecurityStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      List<XMLSecurityConstants.ContentType> list0 = documentContextImpl0.getProtectionOrder();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      QName qName0 = new QName("", "", "");
      outboundSecurityContextImpl0.getAsList((Object) list0);
      outboundSecurityContextImpl0.getAsList((Object) "");
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, (Collection<XMLSecAttribute>) null, (Collection<XMLSecNamespace>) null);
      finalOutputProcessor0.processEvent(xMLSecStartElementImpl0, outputProcessorChainImpl0);
      assertFalse(xMLSecStartElementImpl0.isNamespace());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      SecurePart.Modifier securePart_Modifier0 = SecurePart.Modifier.Content;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F`#Uj#";
      SecurePart securePart0 = new SecurePart((QName) null, securePart_Modifier0, stringArray0, "F`#Uj#");
      securePart0.setExternalReference("F`#Uj#");
      xMLSecurityStreamWriter0.setEncryptEntireRequestPart(securePart0);
      String string0 = "";
      Boolean boolean0 = Boolean.valueOf(true);
      XMLSecStartDocumentImpl xMLSecStartDocumentImpl0 = new XMLSecStartDocumentImpl("", "", boolean0, "Hg[J");
      // Undeclared exception!
      try { 
        finalOutputProcessor0.processEvent(xMLSecStartDocumentImpl0, outputProcessorChainImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (DocumentContextImpl) null);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      finalOutputProcessor0.getAction();
      finalOutputProcessor0.setAction((XMLSecurityConstants.Action) null, (-1002));
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      outboundSecurityContextImpl0.getSecurityTokenProvider("");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("aB,ySE^eU_|nSd}Th", (SecurityTokenProvider<OutboundSecurityToken>) null);
      outputProcessorChainImpl0.addProcessor(finalOutputProcessor0);
      SecurePart.Modifier securePart_Modifier0 = SecurePart.Modifier.Element;
      SecurePart securePart0 = new SecurePart(securePart_Modifier0);
      securePart0.setRequired(true);
      xMLSecurityStreamWriter0.setSignEntireRequestPart(securePart0);
      // Undeclared exception!
      try { 
        finalOutputProcessor0.doFinal(outputProcessorChainImpl0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((XMLStreamWriter) null);
      Boolean boolean0 = new Boolean(false);
      XMLSecStartDocumentImpl xMLSecStartDocumentImpl0 = new XMLSecStartDocumentImpl("", (String) null, boolean0, "");
      XMLSecStartDocument xMLSecStartDocument0 = xMLSecStartDocumentImpl0.asStartDocument();
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 1);
      // Undeclared exception!
      try { 
        finalOutputProcessor0.processEvent(xMLSecStartDocument0, outputProcessorChainImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.XMLSecurityEventWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter((OutputProcessorChain) null);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      // Undeclared exception!
      try { 
        finalOutputProcessor0.processEvent((XMLSecEvent) null, (OutputProcessorChain) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // XMLEvent must be an instance of XMLSecEvent
         //
         verifyException("org.apache.xml.security.stax.impl.XMLSecurityEventWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 8);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      // Undeclared exception!
      try { 
        finalOutputProcessor0.doFinal(outputProcessorChainImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((XMLStreamWriter) null);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      outboundSecurityContextImpl0.getSecurityTokenProvider("<0!Q8HuYCn|)e~^");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("<0!Q8HuYCn|)e~^", (SecurityTokenProvider<OutboundSecurityToken>) null);
      outputProcessorChainImpl0.reset();
      // Undeclared exception!
      try { 
        finalOutputProcessor0.doFinal(outputProcessorChainImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.XMLSecurityEventWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "W[$#tUT::Pi*tX5<";
      String string1 = "Y&";
      String string2 = "LdPzOLN}w#i\"#8PS\\";
      MockFile mockFile0 = new MockFile("$_kkHSt6X[ut^Sll?]", "LdPzOLN}w#i\"#8PS");
      File file0 = MockFile.createTempFile("W[$#tUT::Pi*tX5<", "Y&", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      String string3 = "*uq&QD..\"I%M^tC";
      FinalOutputProcessor finalOutputProcessor0 = null;
      try {
        finalOutputProcessor0 = new FinalOutputProcessor(mockFileOutputStream0, "*uq&QD..\"I%M^tC");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // java.io.UnsupportedEncodingException: *uq&QD..\"I%M^tC
         //
         verifyException("org.apache.xml.security.stax.impl.processor.output.FinalOutputProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-1148));
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      // Undeclared exception!
      try { 
        finalOutputProcessor0.doFinal(outputProcessorChainImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      assertEquals((-1), finalOutputProcessor0.getActionOrder());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FinalOutputProcessor finalOutputProcessor0 = null;
      try {
        finalOutputProcessor0 = new FinalOutputProcessor(byteArrayOutputStream0, ";B`!E|m");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // java.io.UnsupportedEncodingException: ;B`!E|m
         //
         verifyException("org.apache.xml.security.stax.impl.processor.output.FinalOutputProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((OutputStream) null, (String) null);
      assertEquals((-1), finalOutputProcessor0.getActionOrder());
  }
}
