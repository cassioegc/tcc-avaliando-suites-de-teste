/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:08:04 GMT 2021
 */

package org.apache.xml.security.stax.impl.securityToken;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.xml.security.binding.xmldsig11.ECKeyValueType;
import org.apache.xml.security.binding.xmldsig11.ECParametersType;
import org.apache.xml.security.binding.xmldsig11.NamedCurveType;
import org.apache.xml.security.stax.ext.InboundSecurityContext;
import org.apache.xml.security.stax.impl.securityToken.ECKeyValueSecurityToken;
import org.apache.xml.security.stax.securityToken.SecurityTokenConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ECKeyValueSecurityToken_ESTest extends ECKeyValueSecurityToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ECKeyValueType eCKeyValueType0 = new ECKeyValueType();
      byte[] byteArray0 = new byte[2];
      eCKeyValueType0.setPublicKey(byteArray0);
      NamedCurveType namedCurveType0 = new NamedCurveType();
      namedCurveType0.setURI("1.2.840.10045.3.0.5");
      eCKeyValueType0.setNamedCurve(namedCurveType0);
      ECKeyValueSecurityToken eCKeyValueSecurityToken0 = new ECKeyValueSecurityToken(eCKeyValueType0, (InboundSecurityContext) null);
      // Undeclared exception!
      try { 
        eCKeyValueSecurityToken0.getPublicKey();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only uncompressed format is supported
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ECKeyValueType eCKeyValueType0 = new ECKeyValueType();
      byte[] byteArray0 = new byte[0];
      eCKeyValueType0.setPublicKey(byteArray0);
      NamedCurveType namedCurveType0 = new NamedCurveType();
      namedCurveType0.setURI("1.2.840.10045.3.0.5");
      eCKeyValueType0.setNamedCurve(namedCurveType0);
      ECKeyValueSecurityToken eCKeyValueSecurityToken0 = new ECKeyValueSecurityToken(eCKeyValueType0, (InboundSecurityContext) null);
      // Undeclared exception!
      try { 
        eCKeyValueSecurityToken0.getPublicKey();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ECKeyValueSecurityToken eCKeyValueSecurityToken0 = null;
      try {
        eCKeyValueSecurityToken0 = new ECKeyValueSecurityToken((ECKeyValueType) null, (InboundSecurityContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.ECKeyValueSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ECKeyValueType eCKeyValueType0 = new ECKeyValueType();
      NamedCurveType namedCurveType0 = new NamedCurveType();
      namedCurveType0.setURI("1.2.840.10045.3.0.5");
      eCKeyValueType0.setNamedCurve(namedCurveType0);
      ECKeyValueSecurityToken eCKeyValueSecurityToken0 = new ECKeyValueSecurityToken(eCKeyValueType0, (InboundSecurityContext) null);
      // Undeclared exception!
      try { 
        eCKeyValueSecurityToken0.getPublicKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ECKeyValueType eCKeyValueType0 = new ECKeyValueType();
      NamedCurveType namedCurveType0 = new NamedCurveType();
      eCKeyValueType0.setNamedCurve(namedCurveType0);
      namedCurveType0.setURI("urn:oid:");
      ECKeyValueSecurityToken eCKeyValueSecurityToken0 = new ECKeyValueSecurityToken(eCKeyValueType0, (InboundSecurityContext) null);
      try { 
        eCKeyValueSecurityToken0.getPublicKey();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.ECKeyValueSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ECKeyValueType eCKeyValueType0 = new ECKeyValueType();
      ECKeyValueSecurityToken eCKeyValueSecurityToken0 = null;
      try {
        eCKeyValueSecurityToken0 = new ECKeyValueSecurityToken(eCKeyValueType0, (InboundSecurityContext) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.ECKeyValueSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ECKeyValueType eCKeyValueType0 = new ECKeyValueType();
      ECParametersType eCParametersType0 = new ECParametersType();
      eCKeyValueType0.setECParameters(eCParametersType0);
      ECKeyValueSecurityToken eCKeyValueSecurityToken0 = null;
      try {
        eCKeyValueSecurityToken0 = new ECKeyValueSecurityToken(eCKeyValueType0, (InboundSecurityContext) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.ECKeyValueSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ECKeyValueType eCKeyValueType0 = new ECKeyValueType();
      NamedCurveType namedCurveType0 = new NamedCurveType();
      eCKeyValueType0.setNamedCurve(namedCurveType0);
      ECKeyValueSecurityToken eCKeyValueSecurityToken0 = new ECKeyValueSecurityToken(eCKeyValueType0, (InboundSecurityContext) null);
      boolean boolean0 = eCKeyValueSecurityToken0.isAsymmetric();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ECKeyValueType eCKeyValueType0 = new ECKeyValueType();
      NamedCurveType namedCurveType0 = new NamedCurveType();
      eCKeyValueType0.setNamedCurve(namedCurveType0);
      ECKeyValueSecurityToken eCKeyValueSecurityToken0 = new ECKeyValueSecurityToken(eCKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = eCKeyValueSecurityToken0.getTokenType();
      assertEquals("KeyValueToken", securityTokenConstants_TokenType0.getName());
  }
}
