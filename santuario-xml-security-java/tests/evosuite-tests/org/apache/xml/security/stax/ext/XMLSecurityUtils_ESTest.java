/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 20:27:32 GMT 2021
 */

package org.apache.xml.security.stax.ext;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.security.PublicKey;
import java.security.cert.X509Certificate;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.validation.Schema;
import org.apache.xml.security.binding.xmldsig.DSAKeyValueType;
import org.apache.xml.security.stax.ext.AbstractOutputProcessor;
import org.apache.xml.security.stax.ext.InboundSecurityContext;
import org.apache.xml.security.stax.ext.OutboundSecurityContext;
import org.apache.xml.security.stax.ext.OutputProcessorChain;
import org.apache.xml.security.stax.ext.XMLSecurityConstants;
import org.apache.xml.security.stax.ext.XMLSecurityUtils;
import org.apache.xml.security.stax.ext.stax.XMLSecAttribute;
import org.apache.xml.security.stax.ext.stax.XMLSecEvent;
import org.apache.xml.security.stax.ext.stax.XMLSecNamespace;
import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
import org.apache.xml.security.stax.impl.DocumentContextImpl;
import org.apache.xml.security.stax.impl.OutboundSecurityContextImpl;
import org.apache.xml.security.stax.impl.OutputProcessorChainImpl;
import org.apache.xml.security.stax.impl.SignaturePartDef;
import org.apache.xml.security.stax.impl.XMLSecurityStreamWriter;
import org.apache.xml.security.stax.impl.processor.output.AbstractSignatureOutputProcessor;
import org.apache.xml.security.stax.impl.processor.output.FinalOutputProcessor;
import org.apache.xml.security.stax.impl.processor.output.XMLEncryptOutputProcessor;
import org.apache.xml.security.stax.impl.processor.output.XMLSignatureEndingOutputProcessor;
import org.apache.xml.security.stax.impl.processor.output.XMLSignatureOutputProcessor;
import org.apache.xml.security.stax.impl.securityToken.DsaKeyValueSecurityToken;
import org.apache.xml.security.stax.impl.stax.XMLSecAttributeImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecEndDocumentImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecEndElementImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecEntityDeclarationImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecNamespaceImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartDocumentImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartElementImpl;
import org.apache.xml.security.stax.impl.transformer.TransformEnvelopedSignature;
import org.apache.xml.security.stax.securityEvent.TokenSecurityEvent;
import org.apache.xml.security.stax.securityToken.InboundSecurityToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLSecurityUtils_ESTest extends XMLSecurityUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<QName, String> hashMap0 = new HashMap<QName, String>();
      QName qName0 = XMLSecurityConstants.TAG_dsig_Transform;
      hashMap0.put(qName0, "5`>D-c`S|(?ReOw*");
      String string0 = XMLSecurityUtils.getQNameAttribute(hashMap0, qName0);
      assertEquals("5`>D-c`S|(?ReOw*", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLSecurityUtils.prepareSecretKey("", (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLSecurityUtils.getXMLEventAsString((XMLSecEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("http://www.w3.org/2001/XMLSchema.dtd");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      XMLSecurityConstants.DIRECTION xMLSecurityConstants_DIRECTION0 = XMLSecurityConstants.DIRECTION.IN;
      // Undeclared exception!
      try { 
        XMLSecurityUtils.getTransformer(transformEnvelopedSignature0, mockFileOutputStream0, hashMap0, "http://www.w3.org/2001/XMLSchema.dtd", xMLSecurityConstants_DIRECTION0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.config.TransformerAlgorithmMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLSecurityUtils.getQNameType((List<Object>) null, (QName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = XMLSecurityConstants.TAG_dsig_G;
      // Undeclared exception!
      try { 
        XMLSecurityUtils.getQNameAttribute((Map<QName, String>) null, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayDeque<XMLSecNamespace> arrayDeque0 = new ArrayDeque<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl((QName) null, (Collection<XMLSecAttribute>) null, arrayDeque0);
      List<XMLSecNamespace> list0 = xMLSecStartElementImpl0.getOnElementDeclaredNamespaces();
      XMLSecStartElementImpl xMLSecStartElementImpl1 = new XMLSecStartElementImpl((QName) null, (List<XMLSecAttribute>) null, list0, xMLSecStartElementImpl0);
      // Undeclared exception!
      try { 
        XMLSecurityUtils.getExcC14NInclusiveNamespacePrefixes(xMLSecStartElementImpl1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-1045));
      X509Certificate[] x509CertificateArray0 = new X509Certificate[1];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509SubjectNameStructure((AbstractOutputProcessor) xMLEncryptOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("U`.@  $_hVBf");
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(mockPrintStream0, (String) null);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[0];
      try { 
        XMLSecurityUtils.createX509SubjectNameStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) null, x509CertificateArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[9];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509SubjectNameStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-1551));
      X509Certificate[] x509CertificateArray0 = new X509Certificate[1];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509SubjectNameStructure((AbstractOutputProcessor) xMLSignatureEndingOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[4];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509IssuerSerialStructure((AbstractOutputProcessor) xMLEncryptOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[2];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509CertificateStructure((AbstractOutputProcessor) null, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((XMLStreamWriter) null);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[0];
      try { 
        XMLSecurityUtils.createX509CertificateStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[6];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509CertificateStructure((AbstractOutputProcessor) null, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createTokenSecurityEvent((InboundSecurityToken) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((OutputStream) null, "");
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createKeyNameTokenStructure(finalOutputProcessor0, outputProcessorChainImpl0, "V8blGO^md");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(6);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        XMLSecurityUtils.copy((InputStream) null, pipedOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PROP_USE_THIS_TOKEN_ID_FOR_ENCRYPTED_KEY");
      try { 
        XMLSecurityUtils.copy(pipedInputStream0, mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-1131));
      X509Certificate[] x509CertificateArray0 = new X509Certificate[5];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509IssuerSerialStructure((AbstractOutputProcessor) xMLEncryptOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      try { 
        XMLSecurityUtils.createX509IssuerSerialStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, (X509Certificate[]) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((XMLStreamWriter) null);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[7];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509SubjectNameStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) null, x509CertificateArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.AbstractOutputProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((OutputStream) null, "");
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[6];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509CertificateStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[1];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509SubjectKeyIdentifierStructure((AbstractOutputProcessor) xMLSignatureEndingOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      try { 
        XMLSecurityUtils.createKeyNameTokenStructure((AbstractOutputProcessor) null, outputProcessorChainImpl0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createKeyNameTokenStructure((AbstractOutputProcessor) null, outputProcessorChainImpl0, "w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-1855));
      try { 
        XMLSecurityUtils.createKeyNameTokenStructure(xMLEncryptOutputProcessor0, outputProcessorChainImpl0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.prepareSecretKey("", byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("*e3|!/@.;p");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      XMLSecurityUtils.copy(byteArrayInputStream0, dataOutputStream0);
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      QName qName0 = XMLSecurityConstants.ATT_NULL_MimeType;
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, (Collection<XMLSecNamespace>) null);
      XMLSecStartElementImpl xMLSecStartElementImpl1 = new XMLSecStartElementImpl(qName0, linkedList0, (List<XMLSecNamespace>) null, xMLSecStartElementImpl0);
      Set<String> set0 = XMLSecurityUtils.getExcC14NInclusiveNamespacePrefixes(xMLSecStartElementImpl1, true);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      QName qName0 = XMLSecurityConstants.TAG_dsig_SignatureMethod;
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, (Collection<XMLSecNamespace>) null);
      XMLSecStartElementImpl xMLSecStartElementImpl1 = new XMLSecStartElementImpl(qName0, linkedList0, (List<XMLSecNamespace>) null, xMLSecStartElementImpl0);
      XMLSecNamespace xMLSecNamespace0 = xMLSecStartElementImpl0.getElementNamespace();
      xMLSecStartElementImpl0.addNamespace(xMLSecNamespace0);
      Set<String> set0 = XMLSecurityUtils.getExcC14NInclusiveNamespacePrefixes(xMLSecStartElementImpl1, true);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      QName qName0 = XMLSecurityConstants.TAG_dsig_SignatureMethod;
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, (Collection<XMLSecNamespace>) null);
      XMLSecStartElementImpl xMLSecStartElementImpl1 = new XMLSecStartElementImpl(qName0, linkedList0, (List<XMLSecNamespace>) null, xMLSecStartElementImpl0);
      Set<String> set0 = XMLSecurityUtils.getExcC14NInclusiveNamespacePrefixes(xMLSecStartElementImpl1, false);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Set<String> set0 = XMLSecurityUtils.getExcC14NInclusiveNamespacePrefixes((XMLSecStartElement) null, false);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      QName qName0 = XMLSecurityConstants.TAG_dsig_SignatureMethod;
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, (Collection<XMLSecNamespace>) null);
      Set<String> set0 = XMLSecurityUtils.getExcC14NInclusiveNamespacePrefixes(xMLSecStartElementImpl0, true);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DSAKeyValueType dSAKeyValueType0 = new DSAKeyValueType();
      DsaKeyValueSecurityToken dsaKeyValueSecurityToken0 = new DsaKeyValueSecurityToken(dSAKeyValueType0, (InboundSecurityContext) null);
      TokenSecurityEvent<? extends InboundSecurityToken> tokenSecurityEvent0 = XMLSecurityUtils.createTokenSecurityEvent(dsaKeyValueSecurityToken0, "aAY%B");
      assertEquals("aAY%B", tokenSecurityEvent0.getCorrelationID());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[2];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509IssuerSerialStructure((AbstractOutputProcessor) null, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[0];
      try { 
        XMLSecurityUtils.createX509IssuerSerialStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null, 47);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[5];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509IssuerSerialStructure((AbstractOutputProcessor) xMLEncryptOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((XMLStreamWriter) null);
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null, documentContextImpl0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[2];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509SubjectNameStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      QName qName0 = XMLSecurityConstants.TAG_dsig_Seed;
      LinkedList<XMLSecNamespace> linkedList0 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, (Collection<XMLSecAttribute>) null, linkedList0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      AbstractSignatureOutputProcessor.InternalSignatureOutputProcessor abstractSignatureOutputProcessor_InternalSignatureOutputProcessor0 = xMLSignatureOutputProcessor0.new InternalSignatureOutputProcessor(signaturePartDef0, xMLSecStartElementImpl0);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 76);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[0];
      try { 
        XMLSecurityUtils.createX509SubjectNameStructure((AbstractOutputProcessor) abstractSignatureOutputProcessor_InternalSignatureOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null, documentContextImpl0);
      try { 
        XMLSecurityUtils.createX509SubjectNameStructure((AbstractOutputProcessor) null, (OutputProcessorChain) outputProcessorChainImpl0, (X509Certificate[]) null, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-1507));
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[1];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509CertificateStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[0];
      try { 
        XMLSecurityUtils.createX509CertificateStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null, (-2595));
      try { 
        XMLSecurityUtils.createX509CertificateStructure((AbstractOutputProcessor) xMLSignatureOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, (X509Certificate[]) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[0];
      try { 
        XMLSecurityUtils.createX509SubjectKeyIdentifierStructure((AbstractOutputProcessor) xMLSignatureEndingOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((OutputStream) null, "38af09d98727705120c921bb5e9e26296a3cdcf2f35757a0eafd87b830e7");
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      try { 
        XMLSecurityUtils.createX509SubjectKeyIdentifierStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, (X509Certificate[]) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      QName qName0 = XMLSecurityConstants.TAG_dsigmore_RSAPSSPARAMS;
      ArrayDeque<XMLSecAttribute> arrayDeque0 = new ArrayDeque<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList0 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, arrayDeque0, linkedList0);
      AbstractSignatureOutputProcessor.InternalSignatureOutputProcessor abstractSignatureOutputProcessor_InternalSignatureOutputProcessor0 = xMLSignatureOutputProcessor0.new InternalSignatureOutputProcessor(signaturePartDef0, xMLSecStartElementImpl0);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null);
      try { 
        XMLSecurityUtils.createKeyValueTokenStructure((AbstractOutputProcessor) abstractSignatureOutputProcessor_InternalSignatureOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, (PublicKey) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[8];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createKeyValueTokenStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 4096);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[0];
      try { 
        XMLSecurityUtils.createKeyValueTokenStructure((AbstractOutputProcessor) null, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      try { 
        XMLSecurityUtils.createKeyValueTokenStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, (X509Certificate[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      linkedList0.add((Object) transformEnvelopedSignature0);
      QName qName0 = XMLSecurityConstants.TAG_dsig_G;
      XMLSecNamespaceImpl xMLSecNamespaceImpl0 = XMLSecurityUtils.getQNameType((List<Object>) linkedList0, qName0);
      assertNull(xMLSecNamespaceImpl0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XMLSecEntityDeclarationImpl xMLSecEntityDeclarationImpl0 = new XMLSecEntityDeclarationImpl("=x11P9LNkVI58`'bSlJ");
      // Undeclared exception!
      try { 
        XMLSecurityUtils.getXMLEventAsString(xMLSecEntityDeclarationImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal XMLSecEvent received: 15
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLSecAttributeImpl xMLSecAttributeImpl0 = new XMLSecAttributeImpl((QName) null, "http://www.w3.org/2001/04/xmldsig-more#hmac-md5");
      String string0 = XMLSecurityUtils.getXMLEventAsString(xMLSecAttributeImpl0);
      assertEquals("ATTRIBUTE", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XMLSecEndDocumentImpl xMLSecEndDocumentImpl0 = new XMLSecEndDocumentImpl();
      String string0 = XMLSecurityUtils.getXMLEventAsString(xMLSecEndDocumentImpl0);
      assertEquals("END_DOCUMENT", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("P;-1yWYC Ett");
      XMLSecStartDocumentImpl xMLSecStartDocumentImpl0 = new XMLSecStartDocumentImpl((String) null, "", boolean0, "");
      String string0 = XMLSecurityUtils.getXMLEventAsString(xMLSecStartDocumentImpl0);
      assertEquals("START_DOCUMENT", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      QName qName0 = XMLSecurityConstants.TAG_xenc_CipherValue;
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, (XMLSecStartElement) null);
      XMLSecEndElementImpl xMLSecEndElementImpl0 = new XMLSecEndElementImpl(qName0, xMLSecStartElementImpl0);
      String string0 = XMLSecurityUtils.getXMLEventAsString(xMLSecEndElementImpl0);
      assertEquals("END_ELEMENT", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      QName qName0 = XMLSecurityConstants.TAG_dsig_G;
      XMLSecAttributeImpl xMLSecAttributeImpl0 = new XMLSecAttributeImpl(qName0, "H)`c`fr`\"c*Ch*4Pv4");
      XMLSecNamespace xMLSecNamespace0 = xMLSecAttributeImpl0.getAttributeNamespace();
      String string0 = XMLSecurityUtils.getXMLEventAsString(xMLSecNamespace0);
      assertEquals("NAMESPACE", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      QName qName0 = XMLSecurityConstants.TAG_dsig_Seed;
      LinkedList<XMLSecNamespace> linkedList0 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, (Collection<XMLSecAttribute>) null, linkedList0);
      String string0 = XMLSecurityUtils.getXMLEventAsString(xMLSecStartElementImpl0);
      assertEquals("START_ELEMENT", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = XMLSecurityUtils.dropReferenceMarker("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = XMLSecurityUtils.dropReferenceMarker("S5zS");
      assertEquals("S5zS", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = XMLSecurityUtils.dropReferenceMarker((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<QName, String> hashMap0 = new HashMap<QName, String>();
      QName qName0 = XMLSecurityConstants.TAG_dsig_X509IssuerName;
      String string0 = XMLSecurityUtils.getQNameAttribute(hashMap0, qName0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      X509Certificate[] x509CertificateArray0 = new X509Certificate[5];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509SubjectKeyIdentifierStructure((AbstractOutputProcessor) xMLSignatureOutputProcessor0, (OutputProcessorChain) null, x509CertificateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[6];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509SubjectNameStructure((AbstractOutputProcessor) null, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XMLSecurityUtils xMLSecurityUtils0 = new XMLSecurityUtils();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((XMLStreamWriter) null);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      X509Certificate[] x509CertificateArray0 = new X509Certificate[1];
      // Undeclared exception!
      try { 
        XMLSecurityUtils.createX509CertificateStructure((AbstractOutputProcessor) finalOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, x509CertificateArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Schema schema0 = XMLSecurityUtils.loadXMLSecuritySchemas();
      assertNotNull(schema0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      try { 
        XMLSecurityUtils.createX509IssuerSerialStructure((AbstractOutputProcessor) xMLEncryptOutputProcessor0, (OutputProcessorChain) outputProcessorChainImpl0, (X509Certificate[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.stax.ext.XMLSecurityUtils", e);
      }
  }
}
