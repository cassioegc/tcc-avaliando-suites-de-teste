/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:40:59 GMT 2021
 */

package org.apache.xml.security.stax.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import org.apache.xml.security.stax.ext.DocumentContext;
import org.apache.xml.security.stax.ext.OutboundSecurityContext;
import org.apache.xml.security.stax.ext.OutputProcessor;
import org.apache.xml.security.stax.ext.OutputProcessorChain;
import org.apache.xml.security.stax.ext.XMLSecurityConstants;
import org.apache.xml.security.stax.ext.XMLSecurityProperties;
import org.apache.xml.security.stax.ext.stax.XMLSecAttribute;
import org.apache.xml.security.stax.ext.stax.XMLSecEndDocument;
import org.apache.xml.security.stax.ext.stax.XMLSecEndElement;
import org.apache.xml.security.stax.ext.stax.XMLSecEvent;
import org.apache.xml.security.stax.ext.stax.XMLSecNamespace;
import org.apache.xml.security.stax.ext.stax.XMLSecStartDocument;
import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
import org.apache.xml.security.stax.impl.DocumentContextImpl;
import org.apache.xml.security.stax.impl.InboundSecurityContextImpl;
import org.apache.xml.security.stax.impl.OutboundSecurityContextImpl;
import org.apache.xml.security.stax.impl.OutputProcessorChainImpl;
import org.apache.xml.security.stax.impl.SignaturePartDef;
import org.apache.xml.security.stax.impl.XMLSecurityStreamWriter;
import org.apache.xml.security.stax.impl.processor.output.AbstractSignatureOutputProcessor;
import org.apache.xml.security.stax.impl.processor.output.FinalOutputProcessor;
import org.apache.xml.security.stax.impl.processor.output.XMLEncryptOutputProcessor;
import org.apache.xml.security.stax.impl.processor.output.XMLSignatureEndingOutputProcessor;
import org.apache.xml.security.stax.impl.processor.output.XMLSignatureOutputProcessor;
import org.apache.xml.security.stax.impl.stax.XMLSecAttributeImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecEndDocumentImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecEndElementImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecEntityDeclarationImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecEntityReferenceImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecNamespaceImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartDocumentImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartElementImpl;
import org.apache.xml.security.stax.securityEvent.AlgorithmSuiteSecurityEvent;
import org.apache.xml.security.stax.securityEvent.SecurityEvent;
import org.apache.xml.security.stax.securityEvent.SignatureValueSecurityEvent;
import org.apache.xml.security.stax.securityEvent.X509TokenSecurityEvent;
import org.apache.xml.security.stax.securityToken.OutboundSecurityToken;
import org.apache.xml.security.stax.securityToken.SecurityTokenProvider;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputProcessorChainImpl_ESTest extends OutputProcessorChainImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      XMLSecEndDocumentImpl xMLSecEndDocumentImpl0 = new XMLSecEndDocumentImpl();
      QName qName0 = QName.valueOf("Removing processor {} from output chain");
      outboundSecurityContextImpl0.getAsList((Object) outputProcessorChainImpl0);
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      xMLSignatureOutputProcessor0.createStartElementAndOutputAsEvent((OutputProcessorChain) outputProcessorChainImpl0, qName0, (List<XMLSecNamespace>) null, (List<XMLSecAttribute>) linkedList0);
      XMLSecEndDocument xMLSecEndDocument0 = xMLSecEndDocumentImpl0.asEndEndDocument();
      xMLSignatureEndingOutputProcessor0.processEvent(xMLSecEndDocument0, outputProcessorChainImpl0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureEndingOutputProcessor0);
      xMLSignatureOutputProcessor0.createCharactersAndOutputAsEvent((OutputProcessorChain) outputProcessorChainImpl0, (String) null);
      outboundSecurityContextImpl0.getSecurityTokenProvider((String) null);
      outboundSecurityContextImpl0.registerSecurityTokenProvider("TUIm)@?*I[P,", (SecurityTokenProvider<OutboundSecurityToken>) null);
      xMLSignatureEndingOutputProcessor0.createEndElement((QName) null);
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      xMLSignatureEndingOutputProcessor0.createEndElementAndOutputAsEvent(outputProcessorChainImpl0, (QName) null);
      char[] charArray0 = new char[0];
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      xMLSignatureEndingOutputProcessor0.createCharacters(charArray0);
      xMLSignatureOutputProcessor0.createNamespace("", "");
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-473));
      outputProcessorChainImpl0.getProcessors();
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      XMLSecurityConstants.Action xMLSecurityConstants_Action0 = new XMLSecurityConstants.Action("R@4HDI");
      xMLSignatureOutputProcessor0.setAction(xMLSecurityConstants_Action0, 966);
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      Random.setNextRandom((-2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      DocumentContextImpl documentContextImpl1 = documentContextImpl0.clone();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl1);
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      QName qName0 = xMLSecurityProperties0.getIdAttributeNS();
      XMLSecStartElement xMLSecStartElement0 = null;
      XMLSecEndElementImpl xMLSecEndElementImpl0 = new XMLSecEndElementImpl(qName0, (XMLSecStartElement) null);
      XMLSecEndElement xMLSecEndElement0 = xMLSecEndElementImpl0.asEndElement();
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.processEvent(xMLSecEndElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      OutputProcessorChain outputProcessorChain0 = outputProcessorChainImpl0.createSubChain((OutputProcessor) finalOutputProcessor0);
      outputProcessorChainImpl0.getProcessors();
      QName qName0 = new QName("org.apache.xml.security.utils.UnsyncBufferedOutputStream");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      QName.valueOf("");
      int int0 = 3;
      documentContextImpl0.setIsInSignedContent(3, outputProcessorChain0);
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("'8F4l^[Xpn Z", "mLM");
      outboundSecurityContextImpl0.getAsList((Object) xMLSecNamespace0);
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, (Collection<XMLSecNamespace>) null);
      xMLSecStartElementImpl0.isEndDocument();
      outputProcessorChainImpl0.createSubChain((OutputProcessor) finalOutputProcessor0, (XMLSecStartElement) xMLSecStartElementImpl0);
      outputProcessorChainImpl0.addProcessor(finalOutputProcessor0);
      Random.setNextRandom(3);
      OutputProcessorChain outputProcessorChain1 = outputProcessorChainImpl0.createSubChain((OutputProcessor) finalOutputProcessor0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      xMLSignatureOutputProcessor0.getBeforeProcessors();
      outputProcessorChain1.createSubChain((OutputProcessor) xMLSignatureOutputProcessor0);
      // Undeclared exception!
      try { 
        ((OutputProcessorChainImpl) outputProcessorChain0).doFinal();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      XMLSecEndDocumentImpl xMLSecEndDocumentImpl0 = new XMLSecEndDocumentImpl();
      xMLSignatureOutputProcessor0.setAction((XMLSecurityConstants.Action) null, 1006);
      XMLSecEndDocument xMLSecEndDocument0 = xMLSecEndDocumentImpl0.asEndEndDocument();
      xMLSignatureEndingOutputProcessor0.processEvent(xMLSecEndDocument0, outputProcessorChainImpl0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureEndingOutputProcessor0);
      outputProcessorChainImpl0.removeProcessor(xMLSignatureOutputProcessor0);
      xMLSignatureOutputProcessor0.createCharactersAndOutputAsEvent((OutputProcessorChain) outputProcessorChainImpl0, (String) null);
      outboundSecurityContextImpl0.getSecurityTokenProvider((String) null);
      outboundSecurityContextImpl0.registerSecurityTokenProvider("TUIm)@?*I[P,", (SecurityTokenProvider<OutboundSecurityToken>) null);
      xMLSignatureEndingOutputProcessor0.createEndElement((QName) null);
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      char[] charArray0 = new char[0];
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      xMLSignatureEndingOutputProcessor0.createCharacters(charArray0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureEndingOutputProcessor0);
      xMLSignatureOutputProcessor0.createNamespace("", "");
      // Undeclared exception!
      outputProcessorChainImpl0.doFinal();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      OutputProcessorChain outputProcessorChain0 = outputProcessorChainImpl0.createSubChain((OutputProcessor) finalOutputProcessor0);
      outputProcessorChainImpl0.getProcessors();
      QName qName0 = new QName("org.apache.xml.security.utils.UnsyncBufferedOutputStream");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      QName.valueOf("");
      int int0 = 3;
      documentContextImpl0.setIsInSignedContent(3, outputProcessorChain0);
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("'8F4l^[Xpn Z", "mLM");
      outboundSecurityContextImpl0.getAsList((Object) xMLSecNamespace0);
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, (Collection<XMLSecNamespace>) null);
      xMLSecStartElementImpl0.isEndDocument();
      outputProcessorChainImpl0.createSubChain((OutputProcessor) finalOutputProcessor0, (XMLSecStartElement) xMLSecStartElementImpl0);
      outputProcessorChainImpl0.addProcessor(finalOutputProcessor0);
      Random.setNextRandom(3);
      outputProcessorChainImpl0.createSubChain((OutputProcessor) finalOutputProcessor0);
      try { 
        outputProcessorChainImpl0.processEvent(xMLSecNamespace0);
        fail("Expecting exception: XMLStreamException");
      
      } catch(XMLStreamException e) {
         //
         // No open start element.
         //
         verifyException("org.apache.xml.security.stax.impl.XMLSecurityStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      XMLSecEndDocumentImpl xMLSecEndDocumentImpl0 = new XMLSecEndDocumentImpl();
      XMLSecEndDocument xMLSecEndDocument0 = xMLSecEndDocumentImpl0.asEndEndDocument();
      xMLSignatureEndingOutputProcessor0.processEvent(xMLSecEndDocument0, outputProcessorChainImpl0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureEndingOutputProcessor0);
      outputProcessorChainImpl0.removeProcessor(xMLSignatureOutputProcessor0);
      xMLSignatureOutputProcessor0.createCharactersAndOutputAsEvent((OutputProcessorChain) outputProcessorChainImpl0, (String) null);
      outboundSecurityContextImpl0.getSecurityTokenProvider((String) null);
      outboundSecurityContextImpl0.registerSecurityTokenProvider("TUIm)@?*I[P,", (SecurityTokenProvider<OutboundSecurityToken>) null);
      xMLSignatureEndingOutputProcessor0.createEndElement((QName) null);
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      xMLSignatureEndingOutputProcessor0.createEndElementAndOutputAsEvent(outputProcessorChainImpl0, (QName) null);
      char[] charArray0 = new char[0];
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      xMLSignatureEndingOutputProcessor0.createCharacters(charArray0);
      xMLSignatureOutputProcessor0.createNamespace("", "");
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-473));
      outputProcessorChainImpl0.getProcessors();
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      xMLSignatureOutputProcessor0.createCharacters("?ETJ:0L'E");
      xMLSignatureOutputProcessor0.createNamespace("5V>xt}xtV>)0CA!1K", "5V>xt}xtV>)0CA!1K");
      XMLSecurityConstants.Phase xMLSecurityConstants_Phase0 = XMLSecurityConstants.Phase.POSTPROCESSING;
      xMLSignatureOutputProcessor0.setPhase(xMLSecurityConstants_Phase0);
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      assertEquals((-1), xMLSignatureOutputProcessor0.getActionOrder());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (DocumentContextImpl) null);
      outputProcessorChainImpl0.getProcessors();
      String string0 = "org.apache.xml.security.binding.xmldsig11.ECValidationDataType";
      AlgorithmSuiteSecurityEvent algorithmSuiteSecurityEvent0 = new AlgorithmSuiteSecurityEvent();
      outboundSecurityContextImpl0.forwardSecurityEvent(algorithmSuiteSecurityEvent0);
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      outputProcessorChainImpl0.removeProcessor(xMLEncryptOutputProcessor0);
      outboundSecurityContextImpl0.registerSecurityTokenProvider("org.apache.xml.security.binding.xmldsig11.ECValidationDataType", (SecurityTokenProvider<OutboundSecurityToken>) null);
      XMLSecurityConstants.Action xMLSecurityConstants_Action0 = new XMLSecurityConstants.Action("org.apache.xml.security.binding.xmldsig11.ECValidationDataType");
      xMLEncryptOutputProcessor0.setAction(xMLSecurityConstants_Action0, (-2401));
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.processEvent((XMLSecEvent) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      String string0 = "PREPROCESSING";
      outboundSecurityContextImpl0.getSecurityTokenProvider("");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("PREPROCESSING", (SecurityTokenProvider<OutboundSecurityToken>) null);
      int int0 = 1005;
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 1005);
      outputProcessorChainImpl0.getSecurityContext();
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((OutputStream) null, "No id specified");
      finalOutputProcessor0.getBeforeProcessors();
      XMLSecurityConstants.Action xMLSecurityConstants_Action0 = new XMLSecurityConstants.Action("PREPROCESSING");
      finalOutputProcessor0.setAction(xMLSecurityConstants_Action0, 1005);
      outputProcessorChainImpl0.addProcessor(finalOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(finalOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(finalOutputProcessor0);
      InboundSecurityContextImpl inboundSecurityContextImpl0 = null;
      try {
        inboundSecurityContextImpl0 = new InboundSecurityContextImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      documentContextImpl0.setIsInEncryptedContent(0, outboundSecurityContextImpl0);
      LinkedList<OutputProcessor> linkedList0 = new LinkedList<OutputProcessor>();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0, 3140, linkedList0);
      outputProcessorChainImpl0.getProcessors();
      documentContextImpl0.setEncoding("- #Fp%*+#T's");
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl((QName) null, (Collection<XMLSecAttribute>) null, linkedList1);
      AbstractSignatureOutputProcessor.InternalSignatureOutputProcessor abstractSignatureOutputProcessor_InternalSignatureOutputProcessor0 = xMLSignatureOutputProcessor0.new InternalSignatureOutputProcessor(signaturePartDef0, xMLSecStartElementImpl0);
      abstractSignatureOutputProcessor_InternalSignatureOutputProcessor0.getSecurityProperties();
      xMLSignatureOutputProcessor0.setXMLSecurityProperties((XMLSecurityProperties) null);
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      OutputProcessorChain outputProcessorChain0 = outputProcessorChainImpl0.createSubChain((OutputProcessor) xMLSignatureEndingOutputProcessor0);
      outputProcessorChainImpl0.getDocumentContext();
      assertNotSame(outputProcessorChainImpl0, outputProcessorChain0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      String string0 = "8^jWG";
      outboundSecurityContextImpl0.getSecurityTokenProvider("m0Q{");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("8^jWG", (SecurityTokenProvider<OutboundSecurityToken>) null);
      outboundSecurityContextImpl0.registerSecurityTokenProvider("8^jWG", (SecurityTokenProvider<OutboundSecurityToken>) null);
      outboundSecurityContextImpl0.forwardSecurityEvent((SecurityEvent) null);
      int int0 = 1491;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m0Q{");
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 1491);
      outputProcessorChainImpl0.getDocumentContext();
      outputProcessorChainImpl0.getDocumentContext();
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      xMLSecurityProperties0.getSignaturePositionQName();
      // Undeclared exception!
      try { 
        xMLEncryptOutputProcessor0.createEndElementAndOutputAsEvent(outputProcessorChainImpl0, (QName) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1491, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      documentContextImpl0.getContentTypeMap();
      int int0 = 11;
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0, 11, (List<OutputProcessor>) null);
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor1 = new XMLEncryptOutputProcessor();
      outboundSecurityContextImpl0.getAsList((Object) xMLEncryptOutputProcessor1);
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl((QName) null, linkedList0, (Collection<XMLSecNamespace>) null);
      XMLSecStartElementImpl xMLSecStartElementImpl1 = new XMLSecStartElementImpl((QName) null, linkedList0, (List<XMLSecNamespace>) null, xMLSecStartElementImpl0);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.createSubChain((OutputProcessor) xMLEncryptOutputProcessor0, (XMLSecStartElement) xMLSecStartElementImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.OutputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      XMLSecEndDocumentImpl xMLSecEndDocumentImpl0 = new XMLSecEndDocumentImpl();
      XMLSecEndDocument xMLSecEndDocument0 = xMLSecEndDocumentImpl0.asEndEndDocument();
      xMLSignatureEndingOutputProcessor0.processEvent(xMLSecEndDocument0, outputProcessorChainImpl0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureEndingOutputProcessor0);
      outputProcessorChainImpl0.removeProcessor(xMLSignatureOutputProcessor0);
      String string0 = null;
      xMLSignatureOutputProcessor0.createCharactersAndOutputAsEvent((OutputProcessorChain) outputProcessorChainImpl0, (String) null);
      outboundSecurityContextImpl0.getSecurityTokenProvider((String) null);
      outboundSecurityContextImpl0.registerSecurityTokenProvider("TUIm)@?*I[P,", (SecurityTokenProvider<OutboundSecurityToken>) null);
      QName qName0 = null;
      xMLSignatureEndingOutputProcessor0.createEndElement((QName) null);
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      char[] charArray0 = new char[0];
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      xMLSignatureEndingOutputProcessor0.createCharacters(charArray0);
      xMLSignatureOutputProcessor0.createNamespace("", "");
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      assertNull(documentContextImpl0.getBaseURI());
      
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null, documentContextImpl0, 1, (List<OutputProcessor>) null);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      Class<AbstractSignatureOutputProcessor.InternalSignatureOutputProcessor> class0 = AbstractSignatureOutputProcessor.InternalSignatureOutputProcessor.class;
      xMLSignatureOutputProcessor0.addBeforeProcessor(class0);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.OutputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      outboundSecurityContextImpl0.getSecurityTokenProvider("/.1EzG?{_A");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("/.1EzG?{_A", (SecurityTokenProvider<OutboundSecurityToken>) null);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (DocumentContextImpl) null);
      DocumentContext documentContext0 = outputProcessorChainImpl0.getDocumentContext();
      assertNull(documentContext0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      DocumentContextImpl documentContextImpl1 = documentContextImpl0.clone();
      outboundSecurityContextImpl0.getAsList((Object) null);
      AlgorithmSuiteSecurityEvent algorithmSuiteSecurityEvent0 = new AlgorithmSuiteSecurityEvent();
      outboundSecurityContextImpl0.forwardSecurityEvent(algorithmSuiteSecurityEvent0);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl1, 0, (List<OutputProcessor>) null);
      outputProcessorChainImpl0.reset();
      outputProcessorChainImpl0.getSecurityContext();
      outputProcessorChainImpl0.getSecurityContext();
      XMLSecEntityDeclarationImpl xMLSecEntityDeclarationImpl0 = new XMLSecEntityDeclarationImpl("");
      XMLSecStartElement xMLSecStartElement0 = null;
      XMLSecEntityReferenceImpl xMLSecEntityReferenceImpl0 = new XMLSecEntityReferenceImpl("", xMLSecEntityDeclarationImpl0, (XMLSecStartElement) null);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.processEvent(xMLSecEntityReferenceImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      DocumentContextImpl documentContextImpl1 = documentContextImpl0.clone();
      outboundSecurityContextImpl0.getAsList((Object) null);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl1, 38, (List<OutputProcessor>) null);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      QName qName0 = new QName("oaIHW,> ", "oaIHW,> ");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecAttributeImpl xMLSecAttributeImpl0 = new XMLSecAttributeImpl(qName0, "oaIHW,> ");
      xMLSecAttributeImpl0.getStartElementAtLevel(112);
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, (XMLSecStartElement) null);
      List<XMLSecAttribute> list0 = xMLSecStartElementImpl0.getOnElementDeclaredAttributes();
      XMLSecStartElementImpl xMLSecStartElementImpl1 = new XMLSecStartElementImpl(qName0, list0, linkedList1);
      AbstractSignatureOutputProcessor.InternalSignatureOutputProcessor abstractSignatureOutputProcessor_InternalSignatureOutputProcessor0 = xMLSignatureOutputProcessor0.new InternalSignatureOutputProcessor(signaturePartDef0, xMLSecStartElementImpl1);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.createSubChain((OutputProcessor) abstractSignatureOutputProcessor_InternalSignatureOutputProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.OutputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      DocumentContextImpl documentContextImpl1 = documentContextImpl0.clone();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null, documentContextImpl1, 60, (List<OutputProcessor>) null);
      List<OutputProcessor> list0 = outputProcessorChainImpl0.getProcessors();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      outboundSecurityContextImpl0.getSecurityTokenProvider("p=ynNs{^MPmS0X");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("Name: {} phase: {}", (SecurityTokenProvider<OutboundSecurityToken>) null);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      xMLSignatureOutputProcessor0.createNamespace("p=ynNs{^MPmS0X", (String) null);
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      outputProcessorChainImpl0.addProcessor(xMLEncryptOutputProcessor0);
      outputProcessorChainImpl0.getDocumentContext();
      outputProcessorChainImpl0.removeProcessor(xMLEncryptOutputProcessor0);
      assertEquals(XMLSecurityConstants.Phase.PROCESSING, xMLEncryptOutputProcessor0.getPhase());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      outboundSecurityContextImpl0.getSecurityTokenProvider("EPb]=>X#ulu!>V.,+");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("", (SecurityTokenProvider<OutboundSecurityToken>) null);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-640));
      outputProcessorChainImpl0.reset();
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      DocumentContextImpl documentContextImpl1 = documentContextImpl0.clone();
      documentContextImpl1.getProtectionOrder();
      documentContextImpl0.setIsInSignedContent(871, (Object) null);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null, documentContextImpl1);
      outputProcessorChainImpl0.reset();
      outputProcessorChainImpl0.getProcessors();
      outputProcessorChainImpl0.getSecurityContext();
      OutputProcessorChain outputProcessorChain0 = outputProcessorChainImpl0.createSubChain((OutputProcessor) null);
      outputProcessorChainImpl0.getDocumentContext();
      assertNotSame(outputProcessorChainImpl0, outputProcessorChain0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      outboundSecurityContextImpl0.forwardSecurityEvent((SecurityEvent) null);
      Class<FinalOutputProcessor> class0 = FinalOutputProcessor.class;
      xMLSignatureEndingOutputProcessor0.addAfterProcessor(class0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = 'V';
      charArray0[2] = '?';
      charArray0[3] = '0';
      charArray0[4] = '7';
      charArray0[5] = '8';
      charArray0[6] = '5';
      charArray0[7] = '\'';
      xMLSignatureOutputProcessor0.createCharacters(charArray0);
      LinkedList<XMLSecNamespace> linkedList0 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl((QName) null, (Collection<XMLSecAttribute>) null, linkedList0);
      xMLSecStartElementImpl0.getStartElementAtLevel(8);
      List<XMLSecAttribute> list0 = xMLSecStartElementImpl0.getOnElementDeclaredAttributes();
      outboundSecurityContextImpl0.getAsList((Object) outputProcessorChainImpl0);
      XMLSecStartElementImpl xMLSecStartElementImpl1 = new XMLSecStartElementImpl((QName) null, list0, (List<XMLSecNamespace>) null, xMLSecStartElementImpl0);
      outputProcessorChainImpl0.processEvent(xMLSecStartElementImpl1);
      OutputProcessorChain outputProcessorChain0 = outputProcessorChainImpl0.createSubChain((OutputProcessor) xMLSignatureEndingOutputProcessor0, (XMLSecStartElement) xMLSecStartElementImpl1);
      outputProcessorChainImpl0.getSecurityContext();
      outputProcessorChainImpl0.getDocumentContext();
      assertNotSame(outputProcessorChainImpl0, outputProcessorChain0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-473));
      outputProcessorChainImpl0.getProcessors();
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      xMLSignatureOutputProcessor0.createCharacters("?ETJ:0L'E");
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      assertEquals((-1), xMLSignatureOutputProcessor0.getActionOrder());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      outputProcessorChainImpl0.reset();
      outputProcessorChainImpl0.getProcessors();
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      assertEquals((-1), xMLSignatureOutputProcessor0.getActionOrder());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      outboundSecurityContextImpl0.getSecurityTokenProvider(">uXKz9])d=FI:Q;m`qg");
      outboundSecurityContextImpl0.registerSecurityTokenProvider(">uXKz9])d=FI:Q;m`qg", (SecurityTokenProvider<OutboundSecurityToken>) null);
      SignatureValueSecurityEvent signatureValueSecurityEvent0 = new SignatureValueSecurityEvent();
      outboundSecurityContextImpl0.forwardSecurityEvent(signatureValueSecurityEvent0);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 1756);
      outputProcessorChainImpl0.getSecurityContext();
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureEndingOutputProcessor0);
      assertEquals((-1), xMLSignatureEndingOutputProcessor0.getActionOrder());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      documentContextImpl0.setIsInEncryptedContent(6, xMLSignatureOutputProcessor0);
      outboundSecurityContextImpl0.getAsList((Object) documentContextImpl0);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0, 6, (List<OutputProcessor>) null);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.removeProcessor(xMLSignatureOutputProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.OutputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      int int0 = 2;
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 2);
      Boolean boolean0 = new Boolean(false);
      XMLSecStartDocumentImpl xMLSecStartDocumentImpl0 = new XMLSecStartDocumentImpl("", "", boolean0, "g/");
      XMLSecStartDocument xMLSecStartDocument0 = xMLSecStartDocumentImpl0.asStartDocument();
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.processEvent(xMLSecStartDocument0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null, documentContextImpl0);
      outputProcessorChainImpl0.getDocumentContext();
      QName qName0 = new QName("Ag\"2");
      XMLSecAttributeImpl xMLSecAttributeImpl0 = new XMLSecAttributeImpl(qName0, "Ag\"2");
      XMLSecNamespace xMLSecNamespace0 = xMLSecAttributeImpl0.getAttributeNamespace();
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.processEvent(xMLSecNamespace0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      LinkedList<OutputProcessor> linkedList0 = new LinkedList<OutputProcessor>();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0, 0, linkedList0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      OutputProcessorChain outputProcessorChain0 = outputProcessorChainImpl0.createSubChain((OutputProcessor) xMLSignatureEndingOutputProcessor0, (XMLSecStartElement) null);
      assertNotSame(outputProcessorChain0, outputProcessorChainImpl0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      outputProcessorChainImpl0.removeProcessor(xMLSignatureOutputProcessor0);
      outputProcessorChainImpl0.addProcessor((OutputProcessor) null);
      outputProcessorChainImpl0.removeProcessor(xMLSignatureOutputProcessor0);
      List<OutputProcessor> list0 = outputProcessorChainImpl0.getProcessors();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      outboundSecurityContextImpl0.getAsList((Object) documentContextImpl0);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0, 1, (List<OutputProcessor>) null);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.removeProcessor(xMLSignatureEndingOutputProcessor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.OutputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      DocumentContextImpl documentContextImpl1 = documentContextImpl0.clone();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl1);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.removeProcessor((OutputProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.OutputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null, 0);
      OutboundSecurityContext outboundSecurityContext0 = outputProcessorChainImpl0.getSecurityContext();
      assertNull(outboundSecurityContext0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      QName qName0 = new QName("", "K4$[HHj9_Y|^dMY", "");
      outboundSecurityContextImpl0.getAsList((Object) outputProcessorChainImpl0);
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, (Collection<XMLSecAttribute>) null, (Collection<XMLSecNamespace>) null);
      XMLSecStartElementImpl xMLSecStartElementImpl1 = new XMLSecStartElementImpl(qName0, (List<XMLSecAttribute>) null, (List<XMLSecNamespace>) null, xMLSecStartElementImpl0);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.processEvent(xMLSecStartElementImpl1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      outboundSecurityContextImpl0.getAsList((Object) documentContextImpl0);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0, (-551), (List<OutputProcessor>) null);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.processEvent((XMLSecEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      DocumentContextImpl documentContextImpl1 = documentContextImpl0.clone();
      documentContextImpl1.setIsInSignedContent(3278, (Object) null);
      documentContextImpl1.clone();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null, documentContextImpl1, (-1186), (List<OutputProcessor>) null);
      outputProcessorChainImpl0.reset();
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.OutputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      QName qName0 = new QName("Removing processor {} from output chain", "Removing processor {} from output chain", "3WmPo");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      outboundSecurityContextImpl0.getAsList((Object) qName0);
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, (Collection<XMLSecNamespace>) null);
      outputProcessorChainImpl0.createSubChain((OutputProcessor) xMLSignatureEndingOutputProcessor0, (XMLSecStartElement) xMLSecStartElementImpl0);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureEndingOutputProcessor0);
      outputProcessorChainImpl0.getProcessors();
      outputProcessorChainImpl0.reset();
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      QName qName0 = new QName("eWnh", "eWnh", "f]&Dza]'hM)/A27g\"w");
      ArrayDeque<XMLSecAttribute> arrayDeque0 = new ArrayDeque<XMLSecAttribute>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, arrayDeque0, (Collection<XMLSecNamespace>) null);
      OutputProcessorChain outputProcessorChain0 = outputProcessorChainImpl0.createSubChain((OutputProcessor) null, (XMLSecStartElement) xMLSecStartElementImpl0);
      outputProcessorChainImpl0.reset();
      assertNotSame(outputProcessorChainImpl0, outputProcessorChain0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 81920);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      OutputProcessorChain outputProcessorChain0 = outputProcessorChainImpl0.createSubChain((OutputProcessor) xMLSignatureOutputProcessor0);
      assertNotSame(outputProcessorChain0, outputProcessorChainImpl0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-1));
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      assertEquals(XMLSecurityConstants.Phase.PROCESSING, xMLSignatureOutputProcessor0.getPhase());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 2320);
      List<OutputProcessor> list0 = outputProcessorChainImpl0.getProcessors();
      OutputProcessorChainImpl outputProcessorChainImpl1 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0, 2320, list0);
      OutboundSecurityContext outboundSecurityContext0 = outputProcessorChainImpl1.getSecurityContext();
      assertSame(outboundSecurityContextImpl0, outboundSecurityContext0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl((OutboundSecurityContext) null);
      List<OutputProcessor> list0 = outputProcessorChainImpl0.getProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      outputProcessorChainImpl0.reset();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      DocumentContext documentContext0 = outputProcessorChainImpl0.getDocumentContext();
      assertSame(documentContextImpl0, documentContext0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      QName qName0 = new QName("", "", "");
      outboundSecurityContextImpl0.getAsList((Object) outputProcessorChainImpl0);
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, (Collection<XMLSecAttribute>) null, (Collection<XMLSecNamespace>) null);
      XMLSecStartElementImpl xMLSecStartElementImpl1 = new XMLSecStartElementImpl(qName0, (List<XMLSecAttribute>) null, (List<XMLSecNamespace>) null, xMLSecStartElementImpl0);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.processEvent(xMLSecStartElementImpl1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      outboundSecurityContextImpl0.getSecurityTokenProvider("Name: {} phase: {}");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("Name: {} phase: {}", (SecurityTokenProvider<OutboundSecurityToken>) null);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSecurityProperties xMLSecurityProperties0 = new XMLSecurityProperties();
      xMLSignatureOutputProcessor0.setXMLSecurityProperties(xMLSecurityProperties0);
      xMLSignatureOutputProcessor0.createNamespace("Name: {} phase: {}", "Name: {} phase: {}");
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      outputProcessorChainImpl0.addProcessor(xMLEncryptOutputProcessor0);
      outputProcessorChainImpl0.getDocumentContext();
      outputProcessorChainImpl0.removeProcessor(xMLEncryptOutputProcessor0);
      List<OutputProcessor> list0 = outputProcessorChainImpl0.getProcessors();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      outboundSecurityContextImpl0.getSecurityTokenProvider("");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("PREPROCESSING", (SecurityTokenProvider<OutboundSecurityToken>) null);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 1005);
      outputProcessorChainImpl0.getSecurityContext();
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor((OutputStream) null, "PREPROCESSING");
      finalOutputProcessor0.getBeforeProcessors();
      XMLSecurityConstants.Action xMLSecurityConstants_Action0 = new XMLSecurityConstants.Action("PREPROCESSING");
      finalOutputProcessor0.setAction(xMLSecurityConstants_Action0, 1005);
      outputProcessorChainImpl0.addProcessor(finalOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(finalOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(finalOutputProcessor0);
      InboundSecurityContextImpl inboundSecurityContextImpl0 = null;
      try {
        inboundSecurityContextImpl0 = new InboundSecurityContextImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      QName qName0 = new QName("Name: {} phase: {}", "Name: {} phase: {}", "3WmPo");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      outboundSecurityContextImpl0.getAsList((Object) qName0);
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, (Collection<XMLSecNamespace>) null);
      outputProcessorChainImpl0.createSubChain((OutputProcessor) xMLSignatureEndingOutputProcessor0, (XMLSecStartElement) xMLSecStartElementImpl0);
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      XMLSecEndDocumentImpl xMLSecEndDocumentImpl0 = new XMLSecEndDocumentImpl();
      XMLSecEndDocument xMLSecEndDocument0 = xMLSecEndDocumentImpl0.asEndEndDocument();
      xMLSignatureEndingOutputProcessor0.processEvent(xMLSecEndDocument0, outputProcessorChainImpl0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureEndingOutputProcessor0);
      xMLSignatureOutputProcessor0.createCharactersAndOutputAsEvent((OutputProcessorChain) outputProcessorChainImpl0, (String) null);
      outboundSecurityContextImpl0.getSecurityTokenProvider((String) null);
      XMLSecurityStreamWriter xMLSecurityStreamWriter0 = new XMLSecurityStreamWriter(outputProcessorChainImpl0);
      FinalOutputProcessor finalOutputProcessor0 = new FinalOutputProcessor(xMLSecurityStreamWriter0);
      finalOutputProcessor0.createNamespace("", "#98*0Nf(t@4`[");
      outputProcessorChainImpl0.addProcessor(finalOutputProcessor0);
      outboundSecurityContextImpl0.registerSecurityTokenProvider("TUIm)@?*I[P,", (SecurityTokenProvider<OutboundSecurityToken>) null);
      xMLSignatureEndingOutputProcessor0.createEndElement((QName) null);
      xMLSignatureOutputProcessor0.createNamespace("", "");
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      XMLSecEndDocumentImpl xMLSecEndDocumentImpl0 = new XMLSecEndDocumentImpl();
      XMLSecEndDocument xMLSecEndDocument0 = xMLSecEndDocumentImpl0.asEndEndDocument();
      xMLSignatureEndingOutputProcessor0.processEvent(xMLSecEndDocument0, outputProcessorChainImpl0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureEndingOutputProcessor0);
      xMLSignatureOutputProcessor0.createCharactersAndOutputAsEvent((OutputProcessorChain) outputProcessorChainImpl0, (String) null);
      outboundSecurityContextImpl0.getSecurityTokenProvider((String) null);
      outboundSecurityContextImpl0.registerSecurityTokenProvider("TUIm)@?*I[P,", (SecurityTokenProvider<OutboundSecurityToken>) null);
      xMLSignatureEndingOutputProcessor0.createEndElement((QName) null);
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      xMLSignatureEndingOutputProcessor0.createEndElementAndOutputAsEvent(outputProcessorChainImpl0, (QName) null);
      char[] charArray0 = new char[0];
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      xMLSignatureEndingOutputProcessor0.createCharacters(charArray0);
      xMLSignatureOutputProcessor0.createNamespace("", "");
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, documentContextImpl0);
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureEndingOutputProcessor0);
      outputProcessorChainImpl0.removeProcessor(xMLSignatureOutputProcessor0);
      xMLSignatureEndingOutputProcessor0.createEndElement((QName) null);
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      xMLSignatureEndingOutputProcessor0.createEndElementAndOutputAsEvent(outputProcessorChainImpl0, (QName) null);
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      xMLSignatureOutputProcessor0.createNamespace("", "");
      // Undeclared exception!
      try { 
        outputProcessorChainImpl0.doFinal();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-473));
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      XMLSecurityConstants.Action xMLSecurityConstants_Action0 = new XMLSecurityConstants.Action("R@4HDI");
      xMLSignatureOutputProcessor0.setAction(xMLSecurityConstants_Action0, 966);
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureOutputProcessor0);
      Random.setNextRandom((-2));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      outboundSecurityContextImpl0.getRegisteredSecurityTokenProviders();
      outboundSecurityContextImpl0.getSecurityTokenProvider(":3zB\"SQo!");
      outboundSecurityContextImpl0.registerSecurityTokenProvider("c]-BM&f", (SecurityTokenProvider<OutboundSecurityToken>) null);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, 0);
      outputProcessorChainImpl0.getProcessors();
      X509TokenSecurityEvent x509TokenSecurityEvent0 = new X509TokenSecurityEvent();
      QName qName0 = new QName("&s!@Kb?S:L8,h\"II");
      ArrayDeque<XMLSecAttribute> arrayDeque0 = new ArrayDeque<XMLSecAttribute>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, arrayDeque0, (Collection<XMLSecNamespace>) null);
      List<XMLSecAttribute> list0 = xMLSecStartElementImpl0.getOnElementDeclaredAttributes();
      LinkedList<XMLSecNamespace> linkedList0 = new LinkedList<XMLSecNamespace>();
      xMLSecStartElementImpl0.getLocation();
      XMLSecStartElementImpl xMLSecStartElementImpl1 = new XMLSecStartElementImpl(qName0, list0, linkedList0, xMLSecStartElementImpl0);
      linkedList0.clone();
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      XMLSignatureEndingOutputProcessor xMLSignatureEndingOutputProcessor0 = new XMLSignatureEndingOutputProcessor(xMLSignatureOutputProcessor0);
      outputProcessorChainImpl0.addProcessor(xMLSignatureEndingOutputProcessor0);
      outputProcessorChainImpl0.processEvent(xMLSecStartElementImpl1);
      assertFalse(xMLSecStartElementImpl1.isEndDocument());
  }
}
