/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:17:36 GMT 2021
 */

package org.apache.xml.security.stax.impl.securityToken;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.Key;
import java.security.cert.X509Certificate;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.stax.ext.InboundSecurityContext;
import org.apache.xml.security.stax.ext.OutputProcessor;
import org.apache.xml.security.stax.impl.processor.output.XMLEncryptOutputProcessor;
import org.apache.xml.security.stax.impl.securityToken.GenericOutboundSecurityToken;
import org.apache.xml.security.stax.impl.securityToken.KeyNameSecurityToken;
import org.apache.xml.security.stax.securityToken.OutboundSecurityToken;
import org.apache.xml.security.stax.securityToken.SecurityTokenConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GenericOutboundSecurityToken_ESTest extends GenericOutboundSecurityToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = new SecurityTokenConstants.TokenType("");
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("http://www.w3.org/2009/xmlenc11#aes128-gcm", securityTokenConstants_TokenType0);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType1 = genericOutboundSecurityToken0.getTokenType();
      assertSame(securityTokenConstants_TokenType0, securityTokenConstants_TokenType1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("Z]Mp\"j.2", (SecurityTokenConstants.TokenType) null);
      XMLEncryptOutputProcessor xMLEncryptOutputProcessor0 = new XMLEncryptOutputProcessor();
      genericOutboundSecurityToken0.setProcessor(xMLEncryptOutputProcessor0);
      OutputProcessor outputProcessor0 = genericOutboundSecurityToken0.getProcessor();
      assertSame(outputProcessor0, xMLEncryptOutputProcessor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = new SecurityTokenConstants.TokenType("m");
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("http://www.w3.org/2009/xmlenc11#aes128-gcm", securityTokenConstants_TokenType0);
      genericOutboundSecurityToken0.setAsymmetric(true);
      genericOutboundSecurityToken0.setKeyWrappingToken(genericOutboundSecurityToken0);
      OutboundSecurityToken outboundSecurityToken0 = genericOutboundSecurityToken0.getKeyWrappingToken();
      assertTrue(outboundSecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = new SecurityTokenConstants.TokenType((String) null);
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("SIGNATURE", securityTokenConstants_TokenType0);
      genericOutboundSecurityToken0.setKeyWrappingToken(genericOutboundSecurityToken0);
      OutboundSecurityToken outboundSecurityToken0 = genericOutboundSecurityToken0.getKeyWrappingToken();
      assertSame(genericOutboundSecurityToken0, outboundSecurityToken0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("Z]Mp\"j.2", (SecurityTokenConstants.TokenType) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Z]Mp\"j.2");
      genericOutboundSecurityToken0.setCustomTokenReference(iIOMetadataNode0);
      Element element0 = genericOutboundSecurityToken0.getCustomTokenReference();
      assertSame(element0, iIOMetadataNode0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = new SecurityTokenConstants.TokenType("p`8z=O<)");
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = null;
      try {
        genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("", securityTokenConstants_TokenType0, (Key) null, (X509Certificate[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No id specified
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.AbstractSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = null;
      try {
        genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("", (SecurityTokenConstants.TokenType) null, (Key) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No id specified
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.AbstractSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = new SecurityTokenConstants.TokenType("org.apache.xml.security.stax.impl.securityToken.GenericOutboundSecurityToken");
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = null;
      try {
        genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("", securityTokenConstants_TokenType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No id specified
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.AbstractSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = new SecurityTokenConstants.TokenType((String) null);
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("SIGNATURE", securityTokenConstants_TokenType0);
      Key key0 = genericOutboundSecurityToken0.getSecretKey((String) null);
      assertNull(key0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("Ze4", (SecurityTokenConstants.TokenType) null, (Key) null);
      Key key0 = genericOutboundSecurityToken0.getSecretKey("Ze4");
      assertNull(key0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = new SecurityTokenConstants.TokenType("cwqcVWHGb");
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("cwqcVWHGb", securityTokenConstants_TokenType0);
      genericOutboundSecurityToken0.addWrappedToken(genericOutboundSecurityToken0);
      assertNull(genericOutboundSecurityToken0.getSha1Identifier());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = new SecurityTokenConstants.TokenType("cwqcVWHGb");
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("cwqcVWHGb", securityTokenConstants_TokenType0);
      genericOutboundSecurityToken0.setTokenType(securityTokenConstants_TokenType0);
      assertEquals("cwqcVWHGb", genericOutboundSecurityToken0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KeyNameSecurityToken keyNameSecurityToken0 = new KeyNameSecurityToken("D,lWlX%", (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = keyNameSecurityToken0.getTokenType();
      byte[] byteArray0 = new byte[1];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "D,lWlX%");
      X509Certificate[] x509CertificateArray0 = new X509Certificate[2];
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("D,lWlX%", securityTokenConstants_TokenType0, secretKeySpec0, x509CertificateArray0);
      Key key0 = genericOutboundSecurityToken0.getSecretKey("");
      assertSame(secretKeySpec0, key0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = new SecurityTokenConstants.TokenType("cwqcVWHGb");
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("cwqcVWHGb", securityTokenConstants_TokenType0);
      OutputProcessor outputProcessor0 = genericOutboundSecurityToken0.getProcessor();
      assertNull(outputProcessor0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("Ze4", (SecurityTokenConstants.TokenType) null, (Key) null);
      genericOutboundSecurityToken0.getWrappedTokens();
      assertFalse(genericOutboundSecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("Ze4", (SecurityTokenConstants.TokenType) null, (Key) null);
      genericOutboundSecurityToken0.getKeyIdentifier();
      assertFalse(genericOutboundSecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("Ze4", (SecurityTokenConstants.TokenType) null, (Key) null);
      genericOutboundSecurityToken0.getCustomTokenReference();
      assertFalse(genericOutboundSecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("Ze4", (SecurityTokenConstants.TokenType) null, (Key) null);
      genericOutboundSecurityToken0.getTokenType();
      assertFalse(genericOutboundSecurityToken0.isAsymmetric());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GenericOutboundSecurityToken genericOutboundSecurityToken0 = new GenericOutboundSecurityToken("Ze4", (SecurityTokenConstants.TokenType) null, (Key) null);
      genericOutboundSecurityToken0.getKeyWrappingToken();
      assertFalse(genericOutboundSecurityToken0.isAsymmetric());
  }
}
