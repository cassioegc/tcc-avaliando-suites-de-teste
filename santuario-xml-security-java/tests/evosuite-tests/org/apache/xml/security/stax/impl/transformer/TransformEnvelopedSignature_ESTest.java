/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:21:25 GMT 2021
 */

package org.apache.xml.security.stax.impl.transformer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.LinkedList;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import org.apache.xml.security.stax.ext.XMLSecurityConstants;
import org.apache.xml.security.stax.ext.stax.XMLSecAttribute;
import org.apache.xml.security.stax.ext.stax.XMLSecEvent;
import org.apache.xml.security.stax.ext.stax.XMLSecNamespace;
import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
import org.apache.xml.security.stax.impl.stax.XMLSecEndElementImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecEntityDeclarationImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecNamespaceImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartDocumentImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartElementImpl;
import org.apache.xml.security.stax.impl.transformer.TransformEnvelopedSignature;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformEnvelopedSignature_ESTest extends TransformEnvelopedSignature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      MockFile mockFile0 = new MockFile("org.apache.xml.security.stax.impl.transformer.TransformEnvelopedSignature$1", "._");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      transformEnvelopedSignature0.setOutputStream(mockFileOutputStream0);
      XMLSecEntityDeclarationImpl xMLSecEntityDeclarationImpl0 = new XMLSecEntityDeclarationImpl("Dg`nq");
      transformEnvelopedSignature0.transform((XMLSecEvent) xMLSecEntityDeclarationImpl0);
      assertFalse(xMLSecEntityDeclarationImpl0.isEndElement());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      QName qName0 = new QName("", "", "?-4BaMwN?t=Y");
      MockPrintStream mockPrintStream0 = new MockPrintStream("*o;M1=}.*~");
      transformEnvelopedSignature0.setOutputStream(mockPrintStream0);
      XMLSecEndElementImpl xMLSecEndElementImpl0 = new XMLSecEndElementImpl(qName0, (XMLSecStartElement) null);
      try { 
        transformEnvelopedSignature0.transform((XMLSecEvent) xMLSecEndElementImpl0);
        fail("Expecting exception: XMLStreamException");
      
      } catch(XMLStreamException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      transformEnvelopedSignature0.setOutputStream(bufferedOutputStream0);
      Boolean boolean0 = Boolean.valueOf("org.apache.xml.security.stax.ext.XMLSecurityConstants");
      XMLSecStartDocumentImpl xMLSecStartDocumentImpl0 = new XMLSecStartDocumentImpl("org.apache.xml.security.stax.ext.XMLSecurityConstants", "DigestValue", boolean0, "org.apache.xml.security.stax.ext.XMLSecurityConstants");
      // Undeclared exception!
      try { 
        transformEnvelopedSignature0.transform((XMLSecEvent) xMLSecStartDocumentImpl0);
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // DigestValue
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      MockFile mockFile0 = new MockFile("org.apache.xml.security.stax.impl.transformer.TransformEnvelopedSignature$1", "._");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      transformEnvelopedSignature0.setOutputStream(mockFileOutputStream0);
      Boolean boolean0 = Boolean.valueOf("._");
      XMLSecStartDocumentImpl xMLSecStartDocumentImpl0 = new XMLSecStartDocumentImpl("Dg`nq", "org.apache.xml.security.stax.impl.transformer.TransformEnvelopedSignature$1", boolean0, "");
      // Undeclared exception!
      try { 
        transformEnvelopedSignature0.transform((XMLSecEvent) xMLSecStartDocumentImpl0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // org.apache.xml.security.stax.impl.transformer.TransformEnvelopedSignature$1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      transformEnvelopedSignature0.setOutputStream(pipedOutputStream0);
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("InclusiveNamespaces", "InclusiveNamespaces");
      // Undeclared exception!
      try { 
        transformEnvelopedSignature0.transform((XMLSecEvent) xMLSecNamespace0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      // Undeclared exception!
      try { 
        transformEnvelopedSignature0.getPreferredTransformMethod((XMLSecurityConstants.TransformMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.TransformEnvelopedSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      QName qName0 = new QName("", "");
      XMLSecEndElementImpl xMLSecEndElementImpl0 = new XMLSecEndElementImpl(qName0, (XMLSecStartElement) null);
      // Undeclared exception!
      try { 
        transformEnvelopedSignature0.transform((XMLSecEvent) xMLSecEndElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.TransformIdentity", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      QName qName0 = new QName("Unsupported class ", "Unsupported class ");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1);
      // Undeclared exception!
      try { 
        transformEnvelopedSignature0.transform((XMLSecEvent) xMLSecStartElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.TransformIdentity", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      XMLSecurityConstants.TransformMethod xMLSecurityConstants_TransformMethod0 = XMLSecurityConstants.TransformMethod.InputStream;
      XMLSecurityConstants.TransformMethod xMLSecurityConstants_TransformMethod1 = transformEnvelopedSignature0.getPreferredTransformMethod(xMLSecurityConstants_TransformMethod0);
      assertNotSame(xMLSecurityConstants_TransformMethod1, xMLSecurityConstants_TransformMethod0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      XMLSecurityConstants.TransformMethod xMLSecurityConstants_TransformMethod0 = XMLSecurityConstants.TransformMethod.XMLSecEvent;
      XMLSecurityConstants.TransformMethod xMLSecurityConstants_TransformMethod1 = transformEnvelopedSignature0.getPreferredTransformMethod(xMLSecurityConstants_TransformMethod0);
      assertSame(xMLSecurityConstants_TransformMethod0, xMLSecurityConstants_TransformMethod1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      // Undeclared exception!
      try { 
        transformEnvelopedSignature0.transform((InputStream) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // transform(InputStream) not supported
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.TransformEnvelopedSignature", e);
      }
  }
}
