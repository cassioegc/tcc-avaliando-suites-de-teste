/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:22:52 GMT 2021
 */

package org.apache.xml.security.stax.impl.transformer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLEventWriter;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import org.apache.xml.security.stax.ext.Transformer;
import org.apache.xml.security.stax.ext.XMLSecurityConstants;
import org.apache.xml.security.stax.ext.stax.XMLSecAttribute;
import org.apache.xml.security.stax.ext.stax.XMLSecEvent;
import org.apache.xml.security.stax.ext.stax.XMLSecNamespace;
import org.apache.xml.security.stax.impl.stax.XMLSecEndElementImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecEntityDeclarationImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartDocumentImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartElementImpl;
import org.apache.xml.security.stax.impl.transformer.TransformEnvelopedSignature;
import org.apache.xml.security.stax.impl.transformer.TransformIdentity;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformIdentity_ESTest extends TransformIdentity_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=\"", true);
      transformIdentity0.setOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      transformIdentity0.transform((InputStream) dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      XMLEventWriter xMLEventWriter0 = transformIdentity0.getXmlEventWriterForOutputStream();
      assertNull(xMLEventWriter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      Transformer transformer0 = transformEnvelopedSignature0.getTransformer();
      assertNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      transformIdentity0.setTransformer(transformEnvelopedSignature0);
      Transformer transformer0 = transformIdentity0.getTransformer();
      assertSame(transformer0, transformEnvelopedSignature0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      transformEnvelopedSignature0.setOutputStream(mockPrintStream0);
      OutputStream outputStream0 = transformEnvelopedSignature0.getOutputStream();
      assertSame(outputStream0, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      MockFile mockFile0 = new MockFile("", "$8^77HB}eY8ol9z0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      transformIdentity0.setOutputStream(mockPrintStream0);
      QName qName0 = new QName("8ktP.etJ)j<!p", "$8^77HB}eY8ol9z0");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1);
      XMLSecEndElementImpl xMLSecEndElementImpl0 = new XMLSecEndElementImpl(qName0, xMLSecStartElementImpl0);
      try { 
        transformIdentity0.transform((XMLSecEvent) xMLSecEndElementImpl0);
        fail("Expecting exception: XMLStreamException");
      
      } catch(XMLStreamException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        transformEnvelopedSignature0.transform((InputStream) sequenceInputStream0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // transform(InputStream) not supported
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.TransformEnvelopedSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      transformIdentity0.setOutputStream(mockPrintStream0);
      XMLSecEntityDeclarationImpl xMLSecEntityDeclarationImpl0 = new XMLSecEntityDeclarationImpl("zOPm*FK=]_U");
      transformIdentity0.transform((XMLSecEvent) xMLSecEntityDeclarationImpl0);
      assertFalse(xMLSecEntityDeclarationImpl0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      XMLSecurityConstants.TransformMethod xMLSecurityConstants_TransformMethod0 = XMLSecurityConstants.TransformMethod.InputStream;
      XMLSecurityConstants.TransformMethod xMLSecurityConstants_TransformMethod1 = transformIdentity0.getPreferredTransformMethod(xMLSecurityConstants_TransformMethod0);
      assertSame(xMLSecurityConstants_TransformMethod1, xMLSecurityConstants_TransformMethod0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      TransformIdentity transformIdentity1 = new TransformIdentity();
      transformIdentity0.setTransformer(transformIdentity1);
      transformIdentity0.doFinal();
      assertFalse(transformIdentity0.equals((Object)transformIdentity1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      transformIdentity0.doFinal();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      MockFile mockFile0 = new MockFile("", "$8^77HB}eY8ol9z0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      transformIdentity0.setOutputStream(mockPrintStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      try { 
        transformIdentity0.transform((InputStream) bufferedInputStream0);
        fail("Expecting exception: XMLStreamException");
      
      } catch(XMLStreamException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.TransformIdentity", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      XMLSecurityConstants.TransformMethod xMLSecurityConstants_TransformMethod0 = XMLSecurityConstants.TransformMethod.XMLSecEvent;
      XMLSecurityConstants.TransformMethod xMLSecurityConstants_TransformMethod1 = transformIdentity0.getPreferredTransformMethod(xMLSecurityConstants_TransformMethod0);
      assertSame(xMLSecurityConstants_TransformMethod1, xMLSecurityConstants_TransformMethod0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      transformEnvelopedSignature0.setOutputStream(byteArrayOutputStream0);
      Boolean boolean0 = Boolean.valueOf(false);
      XMLSecStartDocumentImpl xMLSecStartDocumentImpl0 = new XMLSecStartDocumentImpl("", "", boolean0, "");
      // Undeclared exception!
      try { 
        transformEnvelopedSignature0.transform((XMLSecEvent) xMLSecStartDocumentImpl0);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLInputFactory xMLInputFactory0 = TransformIdentity.getXmlInputFactory();
      XMLInputFactory xMLInputFactory1 = TransformIdentity.getXmlInputFactory();
      assertSame(xMLInputFactory1, xMLInputFactory0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      TransformIdentity.getXmlOutputFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      transformEnvelopedSignature0.setOutputStream(byteArrayOutputStream0);
      XMLEventWriter xMLEventWriter0 = transformEnvelopedSignature0.getXmlEventWriterForOutputStream();
      assertNotNull(xMLEventWriter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      MockFile mockFile0 = new MockFile("mZC)?p^tePVVe", "http://www.w3.org/2004/08/xop/include");
      mockFile0.createNewFile();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      TransformIdentity transformIdentity1 = new TransformIdentity();
      transformIdentity0.setTransformer(transformIdentity1);
      // Undeclared exception!
      try { 
        transformIdentity0.transform((InputStream) mockFileInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.TransformIdentity", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      transformIdentity0.setTransformer(transformEnvelopedSignature0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1227);
      // Undeclared exception!
      try { 
        transformIdentity0.transform((InputStream) pipedInputStream0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.apache.xml.security.stax.impl.processor.input.XMLEventReaderInputProcessor
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.TransformIdentity$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        transformEnvelopedSignature0.setProperties(hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no properties supported
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.TransformIdentity", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      OutputStream outputStream0 = transformIdentity0.getOutputStream();
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      MockFile mockFile0 = new MockFile("", "$8^77HB}eY8ol9z0");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      transformIdentity0.setOutputStream(mockPrintStream0);
      transformIdentity0.getXmlEventWriterForOutputStream();
      transformIdentity0.doFinal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TransformIdentity transformIdentity0 = new TransformIdentity();
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      transformIdentity0.setTransformer(transformEnvelopedSignature0);
      // Undeclared exception!
      try { 
        transformIdentity0.transform((XMLSecEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.transformer.TransformEnvelopedSignature", e);
      }
  }
}
