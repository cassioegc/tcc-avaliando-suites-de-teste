/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 20:16:51 GMT 2021
 */

package org.apache.xml.security.stax.impl.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.xml.security.stax.impl.util.ReplaceableOuputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReplaceableOuputStream_ESTest extends ReplaceableOuputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "org.apache.xml.security.stax.impl.util.ReplaceableOuputStream");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        replaceableOuputStream0.write((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        replaceableOuputStream0.write(byteArray0, (int) (byte)0, (int) (byte) (-126));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[8];
      try { 
        replaceableOuputStream0.write(byteArray0, (-1), (int) (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        replaceableOuputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[5];
      try { 
        replaceableOuputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        replaceableOuputStream0.write(3956);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.util.ReplaceableOuputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream(pipedOutputStream0);
      try { 
        replaceableOuputStream0.write((-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[4];
      replaceableOuputStream0.write(byteArray0, 0, (int) (byte)0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream(byteArrayOutputStream0);
      replaceableOuputStream0.write((int) (byte) (-126));
      assertEquals("\uFFFD", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream(mockPrintStream0);
      byte[] byteArray0 = new byte[1];
      replaceableOuputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream(mockPrintStream0);
      replaceableOuputStream0.setNewOutputStream(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ReplaceableOuputStream replaceableOuputStream0 = new ReplaceableOuputStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        replaceableOuputStream0.write(byteArray0, (int) (byte)126, (-1720));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }
}
