/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:00:59 GMT 2021
 */

package org.apache.xml.security.stax.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import javax.xml.namespace.QName;
import org.apache.xml.security.stax.ext.SecurePart;
import org.apache.xml.security.stax.impl.SignaturePartDef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SignaturePartDef_ESTest extends SignaturePartDef_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      signaturePartDef0.setExternalResource(true);
      boolean boolean0 = signaturePartDef0.isExternalResource();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      String[] stringArray0 = new String[7];
      signaturePartDef0.setTransforms(stringArray0);
      String[] stringArray1 = signaturePartDef0.getTransforms();
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      String[] stringArray0 = new String[0];
      signaturePartDef0.setTransforms(stringArray0);
      String[] stringArray1 = signaturePartDef0.getTransforms();
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      signaturePartDef0.setSigRefId("");
      String string0 = signaturePartDef0.getSigRefId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      SecurePart securePart0 = new SecurePart("org.apache.xml.security.stax.impl.SignaturePartDef", (String[]) null, "org.apache.xml.security.stax.impl.SignaturePartDef");
      securePart0.setSecureEntireRequest(true);
      signaturePartDef0.setSecurePart(securePart0);
      SecurePart securePart1 = signaturePartDef0.getSecurePart();
      assertNull(securePart1.getIdToSign());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      SecurePart securePart0 = new SecurePart("4{OS");
      securePart0.setRequired(false);
      signaturePartDef0.setSecurePart(securePart0);
      SecurePart securePart1 = signaturePartDef0.getSecurePart();
      assertFalse(securePart1.isRequired());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      String[] stringArray0 = new String[5];
      QName qName0 = QName.valueOf("");
      SecurePart.Modifier securePart_Modifier0 = SecurePart.Modifier.Element;
      SecurePart securePart0 = new SecurePart(qName0, true, securePart_Modifier0, stringArray0, (String) null);
      signaturePartDef0.setSecurePart(securePart0);
      SecurePart securePart1 = signaturePartDef0.getSecurePart();
      assertSame(securePart1, securePart0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      signaturePartDef0.setInclusiveNamespacesPrefixes("4{OS");
      String string0 = signaturePartDef0.getInclusiveNamespacesPrefixes();
      assertEquals("4{OS", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      signaturePartDef0.setInclusiveNamespacesPrefixes("");
      String string0 = signaturePartDef0.getInclusiveNamespacesPrefixes();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      signaturePartDef0.setDigestValue("org.apache.xml.security.stax.impl.SignaturePartDef");
      String string0 = signaturePartDef0.getDigestValue();
      assertEquals("org.apache.xml.security.stax.impl.SignaturePartDef", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      signaturePartDef0.setDigestValue("");
      String string0 = signaturePartDef0.getDigestValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      signaturePartDef0.setDigestAlgo("");
      String string0 = signaturePartDef0.getDigestAlgo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      signaturePartDef0.setDigestAlgo(":u-Ud0\"r<liDt.Ot");
      String string0 = signaturePartDef0.getDigestAlgo();
      assertEquals(":u-Ud0\"r<liDt.Ot", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      String string0 = signaturePartDef0.getInclusiveNamespacesPrefixes();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      String[] stringArray0 = signaturePartDef0.getTransforms();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      String string0 = signaturePartDef0.getDigestValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      signaturePartDef0.setSigRefId(":u-Ud0\"r<liDt.Ot");
      String string0 = signaturePartDef0.getSigRefId();
      assertEquals(":u-Ud0\"r<liDt.Ot", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      String string0 = signaturePartDef0.getDigestAlgo();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      boolean boolean0 = signaturePartDef0.isGenerateXPointer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      SecurePart securePart0 = signaturePartDef0.getSecurePart();
      assertNull(securePart0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      boolean boolean0 = signaturePartDef0.isExcludeVisibleC14Nprefixes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      String string0 = signaturePartDef0.getSigRefId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      signaturePartDef0.setGenerateXPointer(true);
      boolean boolean0 = signaturePartDef0.isGenerateXPointer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      boolean boolean0 = signaturePartDef0.isExternalResource();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      signaturePartDef0.setExcludeVisibleC14Nprefixes(true);
      boolean boolean0 = signaturePartDef0.isExcludeVisibleC14Nprefixes();
      assertTrue(boolean0);
  }
}
