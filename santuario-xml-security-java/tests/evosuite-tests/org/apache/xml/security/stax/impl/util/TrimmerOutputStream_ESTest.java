/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 20:16:38 GMT 2021
 */

package org.apache.xml.security.stax.impl.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.xml.security.stax.impl.util.TrimmerOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrimmerOutputStream_ESTest extends TrimmerOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(byteArrayOutputStream0, 736, 1, 1);
      trimmerOutputStream0.write(0);
      trimmerOutputStream0.write((-959));
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        trimmerOutputStream0.write(byteArray0, 736, 736);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = MockFile.createTempFile("K7m7sS<z&)-7", "K7m7sS<z&)-7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(dataOutputStream0, 1023, 1023, 300);
      trimmerOutputStream0.write(300);
      byte[] byteArray0 = new byte[8];
      trimmerOutputStream0.write(byteArray0, (int) (byte) (-26), (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("3(P}J39U");
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(mockPrintStream0, 619, 1, 1);
      trimmerOutputStream0.flush();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(byteArrayOutputStream0, 736, 1, 1);
      trimmerOutputStream0.write(0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        trimmerOutputStream0.write(byteArray0, 736, 736);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      MockFile mockFile0 = new MockFile("", "");
      File file0 = MockFile.createTempFile("S&SD", "", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(mockFileOutputStream0, 2776, (-1388), 731);
      try { 
        trimmerOutputStream0.write(byteArray0, (int) (byte)0, 2776);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("kdt;ls$KrrMn(Nk>", "");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(mockPrintStream0, 1, 0, 1);
      // Undeclared exception!
      try { 
        trimmerOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.util.TrimmerOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(bufferedOutputStream0, 1, (-1), (-268));
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        trimmerOutputStream0.write(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("N2^%c0:z");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(mockFileOutputStream0, 1, 1, 1);
      byte[] byteArray0 = new byte[8];
      try { 
        trimmerOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream((OutputStream) null, 1, 1, 1);
      trimmerOutputStream0.write(1);
      trimmerOutputStream0.write(1);
      // Undeclared exception!
      try { 
        trimmerOutputStream0.write(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.util.TrimmerOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(pipedOutputStream0, 1, (-126), (-4640));
      trimmerOutputStream0.write((-782));
      // Undeclared exception!
      try { 
        trimmerOutputStream0.write((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile(";y", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(mockFileOutputStream0, 1, (-117), 1);
      trimmerOutputStream0.write(1);
      try { 
        trimmerOutputStream0.write(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream((OutputStream) null, 1, 1725, 1);
      // Undeclared exception!
      try { 
        trimmerOutputStream0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.util.TrimmerOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 1);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(bufferedOutputStream0, 1, (-1), (-268));
      // Undeclared exception!
      try { 
        trimmerOutputStream0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = MockFile.createTempFile("_]:Wa_p=3f^MuP88I", "_]:Wa_p=3f^MuP88I");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(mockPrintStream0, 874, (-2300), (-2300));
      // Undeclared exception!
      try { 
        trimmerOutputStream0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.xml.security.stax.impl.util.TrimmerOutputStream", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(mockFileOutputStream0, 1, 1070, (-1883));
      try { 
        trimmerOutputStream0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ch3W");
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(mockPrintStream0, 1337, 1337, 1337);
      trimmerOutputStream0.write((byte[]) null, 1337, 1337);
      // Undeclared exception!
      try { 
        trimmerOutputStream0.write((byte[]) null, 1337, 1337);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(byteArrayOutputStream0, 736, 1, 1);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        trimmerOutputStream0.write(byteArray0, 736, 736);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(byteArrayOutputStream0, 1, 1, 1);
      byte[] byteArray0 = new byte[8];
      trimmerOutputStream0.write(byteArray0);
      // Undeclared exception!
      try { 
        trimmerOutputStream0.write(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.xml.security.stax.impl.util.TrimmerOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TrimmerOutputStream trimmerOutputStream0 = null;
      try {
        trimmerOutputStream0 = new TrimmerOutputStream((OutputStream) null, 1, 1866, 1866);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bufferSize < endTrimLength
         //
         verifyException("org.apache.xml.security.stax.impl.util.TrimmerOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      TrimmerOutputStream trimmerOutputStream0 = null;
      try {
        trimmerOutputStream0 = new TrimmerOutputStream(byteArrayOutputStream0, (-896), (-896), (-896));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bufferSize <= 0
         //
         verifyException("org.apache.xml.security.stax.impl.util.TrimmerOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      TrimmerOutputStream trimmerOutputStream0 = new TrimmerOutputStream(byteArrayOutputStream0, 736, (-1), 0);
      byte[] byteArray0 = new byte[2];
      trimmerOutputStream0.write(byteArray0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }
}
