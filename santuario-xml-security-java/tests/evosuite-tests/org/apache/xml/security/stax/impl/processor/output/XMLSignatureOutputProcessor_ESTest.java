/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:59:04 GMT 2021
 */

package org.apache.xml.security.stax.impl.processor.output;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.LinkedList;
import javax.xml.namespace.QName;
import org.apache.xml.security.stax.ext.OutputProcessorChain;
import org.apache.xml.security.stax.ext.stax.XMLSecAttribute;
import org.apache.xml.security.stax.ext.stax.XMLSecCharacters;
import org.apache.xml.security.stax.ext.stax.XMLSecEvent;
import org.apache.xml.security.stax.ext.stax.XMLSecNamespace;
import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
import org.apache.xml.security.stax.impl.OutboundSecurityContextImpl;
import org.apache.xml.security.stax.impl.OutputProcessorChainImpl;
import org.apache.xml.security.stax.impl.SignaturePartDef;
import org.apache.xml.security.stax.impl.processor.output.AbstractSignatureOutputProcessor;
import org.apache.xml.security.stax.impl.processor.output.XMLSignatureEndingOutputProcessor;
import org.apache.xml.security.stax.impl.processor.output.XMLSignatureOutputProcessor;
import org.apache.xml.security.stax.impl.stax.XMLSecStartElementImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLSignatureOutputProcessor_ESTest extends XMLSignatureOutputProcessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      // Undeclared exception!
      try { 
        xMLSignatureOutputProcessor0.processEvent((XMLSecEvent) null, (OutputProcessorChain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.processor.output.XMLSignatureOutputProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      // Undeclared exception!
      try { 
        xMLSignatureOutputProcessor0.init((OutputProcessorChain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.ext.AbstractOutputProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      Class<XMLSignatureEndingOutputProcessor> class0 = XMLSignatureEndingOutputProcessor.class;
      xMLSignatureOutputProcessor0.addAfterProcessor(class0);
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      // Undeclared exception!
      try { 
        xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Conflicting order of processors org.apache.xml.security.stax.impl.processor.output.XMLSignatureEndingOutputProcessor@5 and org.apache.xml.security.stax.impl.processor.output.XMLSignatureOutputProcessor@1
         //
         verifyException("org.apache.xml.security.stax.impl.OutputProcessorChainImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      SignaturePartDef signaturePartDef0 = new SignaturePartDef();
      QName qName0 = new QName("\"4E^9Q%:", "\"4E^9Q%:");
      AbstractSignatureOutputProcessor.InternalSignatureOutputProcessor abstractSignatureOutputProcessor_InternalSignatureOutputProcessor0 = xMLSignatureOutputProcessor0.new InternalSignatureOutputProcessor(signaturePartDef0, (XMLSecStartElement) null);
      xMLSignatureOutputProcessor0.setActiveInternalSignatureOutputProcessor(abstractSignatureOutputProcessor_InternalSignatureOutputProcessor0);
      ArrayDeque<XMLSecAttribute> arrayDeque0 = new ArrayDeque<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList0 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, arrayDeque0, linkedList0);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      // Undeclared exception!
      try { 
        xMLSignatureOutputProcessor0.processEvent(xMLSecStartElementImpl0, outputProcessorChainImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      QName qName0 = QName.valueOf("!=d^Jxgf");
      ArrayDeque<XMLSecAttribute> arrayDeque0 = new ArrayDeque<XMLSecAttribute>();
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>(arrayDeque0);
      ArrayDeque<XMLSecNamespace> arrayDeque1 = new ArrayDeque<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, arrayDeque1);
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0, (-1));
      // Undeclared exception!
      try { 
        xMLSignatureOutputProcessor0.processEvent(xMLSecStartElementImpl0, outputProcessorChainImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      XMLSecCharacters xMLSecCharacters0 = xMLSignatureOutputProcessor0.createCharacters("HmacMD5");
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      // Undeclared exception!
      try { 
        xMLSignatureOutputProcessor0.processEvent(xMLSecCharacters0, outputProcessorChainImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XMLSignatureOutputProcessor xMLSignatureOutputProcessor0 = new XMLSignatureOutputProcessor();
      OutboundSecurityContextImpl outboundSecurityContextImpl0 = new OutboundSecurityContextImpl();
      OutputProcessorChainImpl outputProcessorChainImpl0 = new OutputProcessorChainImpl(outboundSecurityContextImpl0);
      xMLSignatureOutputProcessor0.init(outputProcessorChainImpl0);
      XMLSecNamespace xMLSecNamespace0 = xMLSignatureOutputProcessor0.createNamespace("^.z :6GUbB7DI$*17", "^.z :6GUbB7DI$*17");
      xMLSignatureOutputProcessor0.processEvent(xMLSecNamespace0, outputProcessorChainImpl0);
      assertEquals("CDATA", xMLSecNamespace0.getDTDType());
  }
}
