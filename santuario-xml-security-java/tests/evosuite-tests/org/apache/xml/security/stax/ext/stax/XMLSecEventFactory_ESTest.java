/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 20:35:25 GMT 2021
 */

package org.apache.xml.security.stax.ext.stax;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import javax.xml.namespace.QName;
import javax.xml.stream.util.StreamReaderDelegate;
import org.apache.xml.security.stax.ext.stax.XMLSecAttribute;
import org.apache.xml.security.stax.ext.stax.XMLSecCharacters;
import org.apache.xml.security.stax.ext.stax.XMLSecComment;
import org.apache.xml.security.stax.ext.stax.XMLSecDTD;
import org.apache.xml.security.stax.ext.stax.XMLSecEndDocument;
import org.apache.xml.security.stax.ext.stax.XMLSecEndElement;
import org.apache.xml.security.stax.ext.stax.XMLSecEntityDeclaration;
import org.apache.xml.security.stax.ext.stax.XMLSecEntityReference;
import org.apache.xml.security.stax.ext.stax.XMLSecEventFactory;
import org.apache.xml.security.stax.ext.stax.XMLSecNamespace;
import org.apache.xml.security.stax.ext.stax.XMLSecProcessingInstruction;
import org.apache.xml.security.stax.ext.stax.XMLSecStartDocument;
import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
import org.apache.xml.security.stax.impl.stax.XMLSecNamespaceImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartElementImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLSecEventFactory_ESTest extends XMLSecEventFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLSecProcessingInstruction xMLSecProcessingInstruction0 = XMLSecEventFactory.createXMLSecProcessingInstruction("uO J#u=/[IG<'E>z#Y", "5IRy:9");
      assertEquals("uO J#u=/[IG<'E>z#Y", xMLSecProcessingInstruction0.getTarget());
      assertEquals("5IRy:9", xMLSecProcessingInstruction0.getData());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      XMLSecStartDocument xMLSecStartDocument0 = XMLSecEventFactory.createXmlSecStartDocument("", "org.apache.xml.security.stax.impl.stax.XMLSecAttributeImpl", boolean0, "z2SCMRv0NfLa");
      assertEquals("", xMLSecStartDocument0.getSystemId());
      assertEquals("z2SCMRv0NfLa", xMLSecStartDocument0.getVersion());
      assertEquals("org.apache.xml.security.stax.impl.stax.XMLSecAttributeImpl", xMLSecStartDocument0.getCharacterEncodingScheme());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[1];
      XMLSecCharacters xMLSecCharacters0 = XMLSecEventFactory.createXmlSecCharacters(charArray0, 0, 0);
      assertFalse(xMLSecCharacters0.isWhiteSpace());
      assertEquals(4, xMLSecCharacters0.getEventType());
      assertFalse(xMLSecCharacters0.isIgnorableWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QName qName0 = new QName("");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      List<XMLSecAttribute> list0 = linkedList0.subList(0, 0);
      XMLSecAttribute xMLSecAttribute0 = XMLSecEventFactory.createXMLSecAttribute(qName0, "");
      linkedList0.add(xMLSecAttribute0);
      XMLSecStartElement xMLSecStartElement0 = XMLSecEventFactory.createXmlSecStartElement(qName0, (Collection<XMLSecAttribute>) linkedList0, (Collection<XMLSecNamespace>) null);
      List<XMLSecNamespace> list1 = xMLSecStartElement0.getOnElementDeclaredNamespaces();
      // Undeclared exception!
      try { 
        XMLSecEventFactory.createXmlSecStartElement(qName0, list0, list1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QName qName0 = new QName("", "Namespace event not supported", "Namespace event not supported");
      LinkedList<XMLSecNamespace> linkedList0 = new LinkedList<XMLSecNamespace>();
      XMLSecNamespace xMLSecNamespace0 = XMLSecNamespaceImpl.getInstance("Namespace event not supported", "Namespace event not supported");
      List<XMLSecNamespace> list0 = linkedList0.subList(0, 0);
      linkedList0.add(xMLSecNamespace0);
      // Undeclared exception!
      try { 
        XMLSecEventFactory.createXmlSecStartElement(qName0, (Collection<XMLSecAttribute>) null, (Collection<XMLSecNamespace>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        XMLSecEventFactory.createXmlSecCharacters(charArray0, (-2313), (-3032));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2313 > -5345
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        XMLSecEventFactory.createXmlSecCharacters(charArray0, 776, 776);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName("");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      XMLSecStartElement xMLSecStartElement0 = XMLSecEventFactory.createXmlSecStartElement(qName0, (List<XMLSecAttribute>) linkedList0, (List<XMLSecNamespace>) null);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      streamReaderDelegate0.setParent(streamReaderDelegate0);
      // Undeclared exception!
      try { 
        XMLSecEventFactory.allocate(streamReaderDelegate0, xMLSecStartElement0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QName qName0 = QName.valueOf("rDC,");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1);
      StreamReaderDelegate streamReaderDelegate0 = new StreamReaderDelegate();
      // Undeclared exception!
      try { 
        XMLSecEventFactory.allocate(streamReaderDelegate0, xMLSecStartElementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLSecComment xMLSecComment0 = XMLSecEventFactory.createXMLSecComment("Xn6}&");
      assertFalse(xMLSecComment0.isEndDocument());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLSecCharacters xMLSecCharacters0 = XMLSecEventFactory.createXMLSecCData("UwJAK7j[`*;ff.");
      assertEquals(12, xMLSecCharacters0.getEventType());
      assertFalse(xMLSecCharacters0.isWhiteSpace());
      assertFalse(xMLSecCharacters0.isIgnorableWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLSecDTD xMLSecDTD0 = XMLSecEventFactory.createXMLSecDTD((String) null);
      assertFalse(xMLSecDTD0.isEntityReference());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLSecCharacters xMLSecCharacters0 = XMLSecEventFactory.createXmlSecCharacters((String) null);
      assertFalse(xMLSecCharacters0.isWhiteSpace());
      assertFalse(xMLSecCharacters0.isIgnorableWhiteSpace());
      assertFalse(xMLSecCharacters0.isCData());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLSecEntityDeclaration xMLSecEntityDeclaration0 = XMLSecEventFactory.createXmlSecEntityDeclaration("`g-,L`wkE%coN;,3");
      XMLSecEntityReference xMLSecEntityReference0 = XMLSecEventFactory.createXMLSecEntityReference("", xMLSecEntityDeclaration0);
      assertFalse(xMLSecEntityReference0.isStartDocument());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLSecNamespace xMLSecNamespace0 = XMLSecEventFactory.createXMLSecNamespace("Entity declaration event not supported", "");
      assertEquals("", xMLSecNamespace0.getValue());
      assertFalse(xMLSecNamespace0.isDefaultNamespaceDeclaration());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLSecEndDocument xMLSecEndDocument0 = XMLSecEventFactory.createXMLSecEndDocument();
      assertFalse(xMLSecEndDocument0.isProcessingInstruction());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[3];
      XMLSecCharacters xMLSecCharacters0 = XMLSecEventFactory.createXmlSecCharacters(charArray0);
      assertFalse(xMLSecCharacters0.isWhiteSpace());
      assertEquals(4, xMLSecCharacters0.getEventType());
      assertFalse(xMLSecCharacters0.isIgnorableWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QName qName0 = new QName("`g-,L`wkE%coN;,3", "`g-,L`wkE%coN;,3");
      XMLSecEndElement xMLSecEndElement0 = XMLSecEventFactory.createXmlSecEndElement(qName0);
      assertFalse(xMLSecEndElement0.isCharacters());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLSecEventFactory.createXmlSecCharacters((char[]) null, (-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
