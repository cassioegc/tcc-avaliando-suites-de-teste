/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:13:58 GMT 2021
 */

package org.apache.xml.security.stax.impl.securityToken;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.xml.security.binding.xmldsig.RSAKeyValueType;
import org.apache.xml.security.stax.ext.InboundSecurityContext;
import org.apache.xml.security.stax.impl.securityToken.RsaKeyValueSecurityToken;
import org.apache.xml.security.stax.securityToken.SecurityTokenConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RsaKeyValueSecurityToken_ESTest extends RsaKeyValueSecurityToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      byte[] byteArray0 = new byte[10];
      rSAKeyValueType0.setExponent(byteArray0);
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      rSAKeyValueType0.setModulus(byteArray0);
      try { 
        rsaKeyValueSecurityToken0.getPublicKey();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.security.InvalidKeyException: RSA keys must be at least 512 bits long
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.RsaKeyValueSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = rsaKeyValueSecurityToken0.getTokenType();
      assertEquals("KeyValueToken", securityTokenConstants_TokenType0.getName());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      // Undeclared exception!
      try { 
        rsaKeyValueSecurityToken0.getPublicKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RSAKeyValueType rSAKeyValueType0 = new RSAKeyValueType();
      RsaKeyValueSecurityToken rsaKeyValueSecurityToken0 = new RsaKeyValueSecurityToken(rSAKeyValueType0, (InboundSecurityContext) null);
      boolean boolean0 = rsaKeyValueSecurityToken0.isAsymmetric();
      assertTrue(boolean0);
  }
}
