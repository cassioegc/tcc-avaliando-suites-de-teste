/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 18:49:09 GMT 2021
 */

package org.apache.xml.security.stax.securityEvent;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.xml.security.binding.xmldsig.DSAKeyValueType;
import org.apache.xml.security.stax.ext.InboundSecurityContext;
import org.apache.xml.security.stax.ext.XMLSecurityConstants;
import org.apache.xml.security.stax.impl.DocumentContextImpl;
import org.apache.xml.security.stax.impl.securityToken.DsaKeyValueSecurityToken;
import org.apache.xml.security.stax.impl.securityToken.KeyNameSecurityToken;
import org.apache.xml.security.stax.securityEvent.ContentEncryptedElementSecurityEvent;
import org.apache.xml.security.stax.securityEvent.EncryptedElementSecurityEvent;
import org.apache.xml.security.stax.securityEvent.SignedElementSecurityEvent;
import org.apache.xml.security.stax.securityToken.InboundSecurityToken;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractSecuredElementSecurityEvent_ESTest extends AbstractSecuredElementSecurityEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ContentEncryptedElementSecurityEvent contentEncryptedElementSecurityEvent0 = new ContentEncryptedElementSecurityEvent((InboundSecurityToken) null, false, (List<XMLSecurityConstants.ContentType>) null);
      assertFalse(contentEncryptedElementSecurityEvent0.isSigned());
      
      contentEncryptedElementSecurityEvent0.setSigned(true);
      boolean boolean0 = contentEncryptedElementSecurityEvent0.isSigned();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      List<XMLSecurityConstants.ContentType> list0 = documentContextImpl0.getProtectionOrder();
      SignedElementSecurityEvent signedElementSecurityEvent0 = new SignedElementSecurityEvent((InboundSecurityToken) null, false, list0);
      boolean boolean0 = signedElementSecurityEvent0.isEncrypted();
      assertFalse(signedElementSecurityEvent0.isSigned());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SignedElementSecurityEvent signedElementSecurityEvent0 = new SignedElementSecurityEvent((InboundSecurityToken) null, true, (List<XMLSecurityConstants.ContentType>) null);
      signedElementSecurityEvent0.setAttachment(true);
      boolean boolean0 = signedElementSecurityEvent0.isAttachment();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DSAKeyValueType dSAKeyValueType0 = new DSAKeyValueType();
      DsaKeyValueSecurityToken dsaKeyValueSecurityToken0 = new DsaKeyValueSecurityToken(dSAKeyValueType0, (InboundSecurityContext) null);
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      List<XMLSecurityConstants.ContentType> list0 = documentContextImpl0.getProtectionOrder();
      EncryptedElementSecurityEvent encryptedElementSecurityEvent0 = new EncryptedElementSecurityEvent(dsaKeyValueSecurityToken0, true, list0);
      encryptedElementSecurityEvent0.getSecurityToken();
      assertTrue(encryptedElementSecurityEvent0.isEncrypted());
      assertFalse(encryptedElementSecurityEvent0.isSigned());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KeyNameSecurityToken keyNameSecurityToken0 = new KeyNameSecurityToken("k{&nOzqdE6d@", (InboundSecurityContext) null);
      LinkedList<XMLSecurityConstants.ContentType> linkedList0 = new LinkedList<XMLSecurityConstants.ContentType>();
      ContentEncryptedElementSecurityEvent contentEncryptedElementSecurityEvent0 = new ContentEncryptedElementSecurityEvent(keyNameSecurityToken0, false, linkedList0);
      contentEncryptedElementSecurityEvent0.getSecurityToken();
      assertFalse(contentEncryptedElementSecurityEvent0.isEncrypted());
      assertFalse(contentEncryptedElementSecurityEvent0.isSigned());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ContentEncryptedElementSecurityEvent contentEncryptedElementSecurityEvent0 = new ContentEncryptedElementSecurityEvent((InboundSecurityToken) null, false, (List<XMLSecurityConstants.ContentType>) null);
      contentEncryptedElementSecurityEvent0.getProtectionOrder();
      assertFalse(contentEncryptedElementSecurityEvent0.isEncrypted());
      assertFalse(contentEncryptedElementSecurityEvent0.isSigned());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      List<XMLSecurityConstants.ContentType> list0 = documentContextImpl0.getProtectionOrder();
      ContentEncryptedElementSecurityEvent contentEncryptedElementSecurityEvent0 = new ContentEncryptedElementSecurityEvent((InboundSecurityToken) null, true, list0);
      contentEncryptedElementSecurityEvent0.getProtectionOrder();
      assertTrue(contentEncryptedElementSecurityEvent0.isEncrypted());
      assertFalse(contentEncryptedElementSecurityEvent0.isSigned());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentContextImpl documentContextImpl0 = new DocumentContextImpl();
      documentContextImpl0.setIsInEncryptedContent(8192, (Object) null);
      List<XMLSecurityConstants.ContentType> list0 = documentContextImpl0.getProtectionOrder();
      EncryptedElementSecurityEvent encryptedElementSecurityEvent0 = new EncryptedElementSecurityEvent((InboundSecurityToken) null, true, list0);
      encryptedElementSecurityEvent0.getProtectionOrder();
      assertFalse(encryptedElementSecurityEvent0.isSigned());
      assertTrue(encryptedElementSecurityEvent0.isEncrypted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SignedElementSecurityEvent signedElementSecurityEvent0 = new SignedElementSecurityEvent((InboundSecurityToken) null, false, (List<XMLSecurityConstants.ContentType>) null);
      signedElementSecurityEvent0.isAttachment();
      assertFalse(signedElementSecurityEvent0.isEncrypted());
      assertFalse(signedElementSecurityEvent0.isSigned());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<XMLSecurityConstants.ContentType> linkedList0 = new LinkedList<XMLSecurityConstants.ContentType>();
      ContentEncryptedElementSecurityEvent contentEncryptedElementSecurityEvent0 = new ContentEncryptedElementSecurityEvent((InboundSecurityToken) null, true, linkedList0);
      contentEncryptedElementSecurityEvent0.setProtectionOrder(linkedList0);
      assertTrue(contentEncryptedElementSecurityEvent0.isEncrypted());
      assertFalse(contentEncryptedElementSecurityEvent0.isSigned());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<XMLSecurityConstants.ContentType> linkedList0 = new LinkedList<XMLSecurityConstants.ContentType>();
      ContentEncryptedElementSecurityEvent contentEncryptedElementSecurityEvent0 = new ContentEncryptedElementSecurityEvent((InboundSecurityToken) null, true, linkedList0);
      boolean boolean0 = contentEncryptedElementSecurityEvent0.isSigned();
      assertTrue(contentEncryptedElementSecurityEvent0.isEncrypted());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<XMLSecurityConstants.ContentType> linkedList0 = new LinkedList<XMLSecurityConstants.ContentType>();
      ContentEncryptedElementSecurityEvent contentEncryptedElementSecurityEvent0 = new ContentEncryptedElementSecurityEvent((InboundSecurityToken) null, true, linkedList0);
      boolean boolean0 = contentEncryptedElementSecurityEvent0.isEncrypted();
      assertTrue(boolean0);
      assertFalse(contentEncryptedElementSecurityEvent0.isSigned());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<XMLSecurityConstants.ContentType> linkedList0 = new LinkedList<XMLSecurityConstants.ContentType>();
      ContentEncryptedElementSecurityEvent contentEncryptedElementSecurityEvent0 = new ContentEncryptedElementSecurityEvent((InboundSecurityToken) null, true, linkedList0);
      contentEncryptedElementSecurityEvent0.setEncrypted(true);
      assertTrue(contentEncryptedElementSecurityEvent0.isEncrypted());
      assertFalse(contentEncryptedElementSecurityEvent0.isSigned());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<XMLSecurityConstants.ContentType> linkedList0 = new LinkedList<XMLSecurityConstants.ContentType>();
      ContentEncryptedElementSecurityEvent contentEncryptedElementSecurityEvent0 = new ContentEncryptedElementSecurityEvent((InboundSecurityToken) null, true, linkedList0);
      contentEncryptedElementSecurityEvent0.setSecurityToken((InboundSecurityToken) null);
      assertTrue(contentEncryptedElementSecurityEvent0.isEncrypted());
      assertFalse(contentEncryptedElementSecurityEvent0.isSigned());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SignedElementSecurityEvent signedElementSecurityEvent0 = new SignedElementSecurityEvent((InboundSecurityToken) null, false, (List<XMLSecurityConstants.ContentType>) null);
      signedElementSecurityEvent0.getSecurityToken();
      assertFalse(signedElementSecurityEvent0.isEncrypted());
      assertFalse(signedElementSecurityEvent0.isSigned());
  }
}
