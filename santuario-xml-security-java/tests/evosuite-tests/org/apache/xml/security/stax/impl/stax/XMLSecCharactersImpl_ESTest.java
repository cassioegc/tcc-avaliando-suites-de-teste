/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:42:20 GMT 2021
 */

package org.apache.xml.security.stax.impl.stax;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import javax.xml.namespace.QName;
import org.apache.xml.security.stax.ext.stax.XMLSecAttribute;
import org.apache.xml.security.stax.ext.stax.XMLSecCharacters;
import org.apache.xml.security.stax.ext.stax.XMLSecNamespace;
import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
import org.apache.xml.security.stax.impl.stax.XMLSecCharactersImpl;
import org.apache.xml.security.stax.impl.stax.XMLSecStartElementImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLSecCharactersImpl_ESTest extends XMLSecCharactersImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("zj7&a65OmsH(8[>UTZc", false, false, false, (XMLSecStartElement) null);
      StringWriter stringWriter0 = new StringWriter(4);
      xMLSecCharactersImpl0.writeAsEncodedUnicode(stringWriter0);
      assertEquals("zj7&amp;a65OmsH(8[&gt;UTZc", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("|)F|Bwg>mlw^R/", false, true, false, (XMLSecStartElement) null);
      StringWriter stringWriter0 = new StringWriter(4);
      xMLSecCharactersImpl0.writeAsEncodedUnicode(stringWriter0);
      assertEquals("|)F|Bwg&gt;mlw^R/", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[2] = '<';
      charArray0[3] = '<';
      LinkedList<XMLSecNamespace> linkedList0 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl((QName) null, (List<XMLSecAttribute>) null, linkedList0, xMLSecStartElement0);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl(charArray0, false, true, true, xMLSecStartElementImpl0);
      StringWriter stringWriter0 = new StringWriter();
      xMLSecCharactersImpl0.writeAsEncodedUnicode(stringWriter0);
      assertEquals("\u0000\u0000&lt;&lt;\u0000\u0000\u0000\u0000", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QName qName0 = new QName("wE/55gb<eN*ezKzH");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1, xMLSecStartElement0);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("wE/55gb<eN*ezKzH", false, true, false, xMLSecStartElementImpl0);
      // Undeclared exception!
      try { 
        xMLSecCharactersImpl0.writeAsEncodedUnicode((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.stax.XMLSecCharactersImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QName qName0 = new QName("tduu8|5kk6V`@P\"]}", "&Tmk|6%:(", "tduu8|5kk6V`@P\"]}");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("tduu8|5kk6V`@P\"]}", false, true, false, xMLSecStartElementImpl0);
      boolean boolean0 = xMLSecCharactersImpl0.isWhiteSpace();
      assertTrue(xMLSecCharactersImpl0.isIgnorableWhiteSpace());
      assertFalse(boolean0);
      assertEquals(4, xMLSecCharactersImpl0.getEventType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = new QName("M1 f", "");
      LinkedList<XMLSecNamespace> linkedList0 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, (Collection<XMLSecAttribute>) null, linkedList0);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("M1 f", true, false, false, xMLSecStartElementImpl0);
      boolean boolean0 = xMLSecCharactersImpl0.isIgnorableWhiteSpace();
      assertFalse(boolean0);
      assertEquals(12, xMLSecCharactersImpl0.getEventType());
      assertFalse(xMLSecCharactersImpl0.isWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QName qName0 = new QName("org.apache.xml.security.stax.impl.stax.XMLSecNamespaceImpl", "org.apache.xml.security.stax.impl.stax.XMLSecNamespaceImpl", "");
      LinkedList<XMLSecNamespace> linkedList0 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, (Collection<XMLSecAttribute>) null, linkedList0);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("-QW`IC`HH(#4&4", false, true, true, xMLSecStartElementImpl0);
      boolean boolean0 = xMLSecCharactersImpl0.isCData();
      assertTrue(xMLSecCharactersImpl0.isWhiteSpace());
      assertTrue(xMLSecCharactersImpl0.isIgnorableWhiteSpace());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName("");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, (Collection<XMLSecNamespace>) null);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("", false, true, false, xMLSecStartElementImpl0);
      xMLSecCharactersImpl0.getText();
      assertFalse(xMLSecCharactersImpl0.isWhiteSpace());
      assertFalse(xMLSecCharactersImpl0.isCData());
      assertTrue(xMLSecCharactersImpl0.isIgnorableWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[0];
      QName qName0 = new QName("");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl(charArray0, false, false, false, xMLSecStartElementImpl0);
      xMLSecCharactersImpl0.getData();
      assertEquals(4, xMLSecCharactersImpl0.getEventType());
      assertFalse(xMLSecCharactersImpl0.isWhiteSpace());
      assertFalse(xMLSecCharactersImpl0.isIgnorableWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QName qName0 = new QName("ode_FyR6r4O", "ode_FyR6r4O");
      LinkedList<XMLSecNamespace> linkedList0 = new LinkedList<XMLSecNamespace>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, (Collection<XMLSecAttribute>) null, linkedList0);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl((char[]) null, true, false, false, xMLSecStartElementImpl0);
      // Undeclared exception!
      try { 
        xMLSecCharactersImpl0.getText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.stax.impl.stax.XMLSecCharactersImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl((QName) null, linkedList0, (Collection<XMLSecNamespace>) null);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl(charArray0, false, false, true, xMLSecStartElementImpl0);
      xMLSecCharactersImpl0.getText();
      assertTrue(xMLSecCharactersImpl0.isWhiteSpace());
      assertFalse(xMLSecCharactersImpl0.isCData());
      assertFalse(xMLSecCharactersImpl0.isIgnorableWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("O", true, true, true, (XMLSecStartElement) null);
      StringWriter stringWriter0 = new StringWriter();
      xMLSecCharactersImpl0.writeAsEncodedUnicode(stringWriter0);
      assertEquals("<![CDATA[O]]>", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      QName qName0 = new QName("A");
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("A", true, true, true, xMLSecStartElementImpl0);
      int int0 = xMLSecCharactersImpl0.getEventType();
      assertEquals(12, int0);
      assertTrue(xMLSecCharactersImpl0.isWhiteSpace());
      assertTrue(xMLSecCharactersImpl0.isIgnorableWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("|)F|BwTg_>mlw^R/&", false, false, false, (XMLSecStartElement) null);
      int int0 = xMLSecCharactersImpl0.getEventType();
      assertFalse(xMLSecCharactersImpl0.isWhiteSpace());
      assertEquals(4, int0);
      assertFalse(xMLSecCharactersImpl0.isIgnorableWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("|)F|BwTg_>mlw^R/&", false, false, false, (XMLSecStartElement) null);
      StringWriter stringWriter0 = new StringWriter();
      xMLSecCharactersImpl0.writeAsEncodedUnicode(stringWriter0);
      assertEquals("|)F|BwTg_&gt;mlw^R/&amp;", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("|)F|BwTg_>mlw^R/&", false, false, false, (XMLSecStartElement) null);
      xMLSecCharactersImpl0.getData();
      assertFalse(xMLSecCharactersImpl0.isCData());
      assertFalse(xMLSecCharactersImpl0.isWhiteSpace());
      assertFalse(xMLSecCharactersImpl0.isIgnorableWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      QName qName0 = new QName("A");
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("A", true, true, true, xMLSecStartElementImpl0);
      XMLSecCharacters xMLSecCharacters0 = xMLSecCharactersImpl0.asCharacters();
      assertTrue(xMLSecCharacters0.isWhiteSpace());
      assertTrue(xMLSecCharacters0.isCData());
      assertTrue(xMLSecCharacters0.isIgnorableWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QName qName0 = new QName("<![CDATA[", "r%DCG$gv*!<0Qgtbv");
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      XMLSecStartElement xMLSecStartElement0 = mock(XMLSecStartElement.class, new ViolatedAssumptionAnswer());
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, (List<XMLSecNamespace>) null, xMLSecStartElement0);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl((char[]) null, true, true, true, xMLSecStartElementImpl0);
      // Undeclared exception!
      try { 
        xMLSecCharactersImpl0.getData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("O", true, true, true, (XMLSecStartElement) null);
      boolean boolean0 = xMLSecCharactersImpl0.isIgnorableWhiteSpace();
      assertTrue(xMLSecCharactersImpl0.isWhiteSpace());
      assertTrue(boolean0);
      assertTrue(xMLSecCharactersImpl0.isCData());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<XMLSecAttribute> linkedList0 = new LinkedList<XMLSecAttribute>();
      LinkedList<XMLSecNamespace> linkedList1 = new LinkedList<XMLSecNamespace>();
      QName qName0 = new QName("A");
      XMLSecStartElementImpl xMLSecStartElementImpl0 = new XMLSecStartElementImpl(qName0, linkedList0, linkedList1);
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("A", true, true, true, xMLSecStartElementImpl0);
      boolean boolean0 = xMLSecCharactersImpl0.isCData();
      assertTrue(boolean0);
      assertTrue(xMLSecCharactersImpl0.isIgnorableWhiteSpace());
      assertTrue(xMLSecCharactersImpl0.isWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("O", true, true, true, (XMLSecStartElement) null);
      boolean boolean0 = xMLSecCharactersImpl0.isWhiteSpace();
      assertTrue(boolean0);
      assertEquals(12, xMLSecCharactersImpl0.getEventType());
      assertTrue(xMLSecCharactersImpl0.isIgnorableWhiteSpace());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLSecCharactersImpl xMLSecCharactersImpl0 = new XMLSecCharactersImpl("|)F|BwTg_>mlw^R/&", false, false, false, (XMLSecStartElement) null);
      boolean boolean0 = xMLSecCharactersImpl0.isCharacters();
      assertFalse(xMLSecCharactersImpl0.isWhiteSpace());
      assertTrue(boolean0);
      assertEquals(4, xMLSecCharactersImpl0.getEventType());
      assertFalse(xMLSecCharactersImpl0.isIgnorableWhiteSpace());
  }
}
