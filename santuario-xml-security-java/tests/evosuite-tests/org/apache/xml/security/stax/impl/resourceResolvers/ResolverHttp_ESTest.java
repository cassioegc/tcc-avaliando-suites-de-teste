/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:32:47 GMT 2021
 */

package org.apache.xml.security.stax.impl.resourceResolvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.net.Proxy;
import org.apache.xml.security.stax.ext.ResourceResolver;
import org.apache.xml.security.stax.ext.ResourceResolverLookup;
import org.apache.xml.security.stax.ext.stax.XMLSecStartElement;
import org.apache.xml.security.stax.impl.resourceResolvers.ResolverHttp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResolverHttp_ESTest extends ResolverHttp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResolverHttp resolverHttp0 = new ResolverHttp("#@yP5", "#@yP5");
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http:/-/");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "V[>$8|RA-WMSU9b");
      ResourceResolver resourceResolver0 = resolverHttp0.newInstance("#@yP5", "http:/-/");
      InputStream inputStream0 = resourceResolver0.getInputStreamFromExternalReference();
      assertNotNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResolverHttp resolverHttp0 = new ResolverHttp();
      // Undeclared exception!
      try { 
        resolverHttp0.getInputStreamFromExternalReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResolverHttp resolverHttp0 = new ResolverHttp("#@yP5", "#@yP5");
      ResourceResolver resourceResolver0 = resolverHttp0.newInstance("#@yP5", "http:/-/");
      Proxy proxy0 = Proxy.NO_PROXY;
      ResolverHttp.setProxy(proxy0);
      try { 
        resourceResolver0.getInputStreamFromExternalReference();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.apache.xml.security.stax.impl.resourceResolvers.ResolverHttp", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResolverHttp resolverHttp0 = new ResolverHttp("", "");
      // Undeclared exception!
      try { 
        resolverHttp0.getInputStreamFromExternalReference();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResolverHttp resolverHttp0 = new ResolverHttp("F$E|Q/7", "F$E|Q/7");
      ResourceResolverLookup resourceResolverLookup0 = resolverHttp0.canResolve("F$E|Q/7", "http://");
      assertSame(resolverHttp0, resourceResolverLookup0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResolverHttp resolverHttp0 = new ResolverHttp("jypEMf?ogCb<|8RU~/", (String) null);
      ResourceResolverLookup resourceResolverLookup0 = resolverHttp0.canResolve("jypEMf?ogCb<|8RU~/", (String) null);
      assertNull(resourceResolverLookup0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResolverHttp resolverHttp0 = new ResolverHttp("QCg]JF@$zF#xDrRB$@8", "QCg]JF@$zF#xDrRB$@8");
      ResourceResolverLookup resourceResolverLookup0 = resolverHttp0.canResolve((String) null, (String) null);
      assertNull(resourceResolverLookup0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResolverHttp resolverHttp0 = new ResolverHttp("#@yP5", "#@yP5");
      ResourceResolverLookup resourceResolverLookup0 = resolverHttp0.canResolve("$/i[.t7~~C0SL", "#@yP5");
      assertNull(resourceResolverLookup0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResolverHttp resolverHttp0 = new ResolverHttp("QCg]JF@$zF#xDrRB$@8", "QCg]JF@$zF#xDrRB$@8");
      boolean boolean0 = resolverHttp0.isSameDocumentReference();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResolverHttp resolverHttp0 = new ResolverHttp();
      ResolverHttp resolverHttp1 = (ResolverHttp)resolverHttp0.canResolve("http://", "http://");
      assertFalse(resolverHttp1.isSameDocumentReference());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResolverHttp resolverHttp0 = new ResolverHttp("", "");
      boolean boolean0 = resolverHttp0.matches((XMLSecStartElement) null);
      assertFalse(boolean0);
  }
}
