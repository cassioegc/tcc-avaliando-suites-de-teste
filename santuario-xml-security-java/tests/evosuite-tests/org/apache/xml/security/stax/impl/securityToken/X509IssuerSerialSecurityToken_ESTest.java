/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 19:11:40 GMT 2021
 */

package org.apache.xml.security.stax.impl.securityToken;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.xml.security.binding.xmldsig.DSAKeyValueType;
import org.apache.xml.security.stax.ext.InboundSecurityContext;
import org.apache.xml.security.stax.impl.securityToken.DsaKeyValueSecurityToken;
import org.apache.xml.security.stax.impl.securityToken.KeyNameSecurityToken;
import org.apache.xml.security.stax.impl.securityToken.X509IssuerSerialSecurityToken;
import org.apache.xml.security.stax.securityToken.SecurityTokenConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class X509IssuerSerialSecurityToken_ESTest extends X509IssuerSerialSecurityToken_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      X509IssuerSerialSecurityToken x509IssuerSerialSecurityToken0 = new X509IssuerSerialSecurityToken((SecurityTokenConstants.TokenType) null, (InboundSecurityContext) null, "M*\"VyWDdxo");
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-62);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      x509IssuerSerialSecurityToken0.setSerialNumber(bigInteger0);
      BigInteger bigInteger1 = x509IssuerSerialSecurityToken0.getSerialNumber();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      X509IssuerSerialSecurityToken x509IssuerSerialSecurityToken0 = new X509IssuerSerialSecurityToken((SecurityTokenConstants.TokenType) null, (InboundSecurityContext) null, "M*\"VyWDdxo");
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)45;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      x509IssuerSerialSecurityToken0.setSerialNumber(bigInteger0);
      BigInteger bigInteger1 = x509IssuerSerialSecurityToken0.getSerialNumber();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      X509IssuerSerialSecurityToken x509IssuerSerialSecurityToken0 = new X509IssuerSerialSecurityToken((SecurityTokenConstants.TokenType) null, (InboundSecurityContext) null, "M*\"VyWDdxo");
      x509IssuerSerialSecurityToken0.setIssuerName("");
      String string0 = x509IssuerSerialSecurityToken0.getIssuerName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KeyNameSecurityToken keyNameSecurityToken0 = new KeyNameSecurityToken("", (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = keyNameSecurityToken0.getTokenType();
      X509IssuerSerialSecurityToken x509IssuerSerialSecurityToken0 = null;
      try {
        x509IssuerSerialSecurityToken0 = new X509IssuerSerialSecurityToken(securityTokenConstants_TokenType0, (InboundSecurityContext) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No id specified
         //
         verifyException("org.apache.xml.security.stax.impl.securityToken.AbstractSecurityToken", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DSAKeyValueType dSAKeyValueType0 = new DSAKeyValueType();
      DsaKeyValueSecurityToken dsaKeyValueSecurityToken0 = new DsaKeyValueSecurityToken(dSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = dsaKeyValueSecurityToken0.getTokenType();
      X509IssuerSerialSecurityToken x509IssuerSerialSecurityToken0 = new X509IssuerSerialSecurityToken(securityTokenConstants_TokenType0, (InboundSecurityContext) null, ".>z_'WK");
      BigInteger bigInteger0 = BigInteger.ZERO;
      x509IssuerSerialSecurityToken0.setSerialNumber(bigInteger0);
      BigInteger bigInteger1 = x509IssuerSerialSecurityToken0.getSerialNumber();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DSAKeyValueType dSAKeyValueType0 = new DSAKeyValueType();
      DsaKeyValueSecurityToken dsaKeyValueSecurityToken0 = new DsaKeyValueSecurityToken(dSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = dsaKeyValueSecurityToken0.getTokenType();
      X509IssuerSerialSecurityToken x509IssuerSerialSecurityToken0 = new X509IssuerSerialSecurityToken(securityTokenConstants_TokenType0, (InboundSecurityContext) null, ".>z_'WK");
      x509IssuerSerialSecurityToken0.setIssuerName(".>z_'WK");
      String string0 = x509IssuerSerialSecurityToken0.getIssuerName();
      assertEquals(".>z_'WK", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      X509IssuerSerialSecurityToken x509IssuerSerialSecurityToken0 = new X509IssuerSerialSecurityToken((SecurityTokenConstants.TokenType) null, (InboundSecurityContext) null, "M*\"VyWDdxo");
      String string0 = x509IssuerSerialSecurityToken0.getIssuerName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DSAKeyValueType dSAKeyValueType0 = new DSAKeyValueType();
      DsaKeyValueSecurityToken dsaKeyValueSecurityToken0 = new DsaKeyValueSecurityToken(dSAKeyValueType0, (InboundSecurityContext) null);
      SecurityTokenConstants.TokenType securityTokenConstants_TokenType0 = dsaKeyValueSecurityToken0.getTokenType();
      X509IssuerSerialSecurityToken x509IssuerSerialSecurityToken0 = new X509IssuerSerialSecurityToken(securityTokenConstants_TokenType0, (InboundSecurityContext) null, ".>z_'WK");
      BigInteger bigInteger0 = x509IssuerSerialSecurityToken0.getSerialNumber();
      assertNull(bigInteger0);
  }
}
