/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 18:27:18 GMT 2021
 */

package org.apache.xml.security.c14n.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.c14n.implementations.CanonicalizerPhysical;
import org.apache.xml.security.c14n.implementations.NameSpaceSymbTable;
import org.apache.xml.security.signature.XMLSignatureInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.Comment;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.ProcessingInstruction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CanonicalizerPhysical_ESTest extends CanonicalizerPhysical_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      ProcessingInstruction processingInstruction0 = mock(ProcessingInstruction.class, new ViolatedAssumptionAnswer());
      doReturn("xml").when(processingInstruction0).getData();
      doReturn("Rf*e^OwV").when(processingInstruction0).getTarget();
      File file0 = MockFile.createTempFile("IGkHn%\"nz0N", "org.apache.xml.security.c14n.implementations.Canonicalizer11_OmitComments");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      canonicalizerPhysical0.outputPItoWriter(processingInstruction0, mockPrintStream0, 1693);
      assertEquals(17L, file0.length());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      Comment comment0 = mock(Comment.class, new ViolatedAssumptionAnswer());
      doReturn("http://www.w3.org/XML/1998/namespace").when(comment0).getData();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      canonicalizerPhysical0.outputCommentToWriter(comment0, bufferedOutputStream0, 68);
      assertEquals("http://santuario.apache.org/c14n/physical", canonicalizerPhysical0.engineGetURI());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SY", false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("SY");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ProcessingInstruction processingInstruction0 = mock(ProcessingInstruction.class, new ViolatedAssumptionAnswer());
      try { 
        canonicalizerPhysical0.outputPItoWriter(processingInstruction0, mockFileOutputStream0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Comment comment0 = mock(Comment.class, new ViolatedAssumptionAnswer());
      try { 
        canonicalizerPhysical0.outputCommentToWriter(comment0, pipedOutputStream0, 579);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      // Undeclared exception!
      try { 
        canonicalizerPhysical0.outputAttributesSubtree((Element) null, (NameSpaceSymbTable) null, hashMap0, byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerPhysical", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      MockFile mockFile0 = new MockFile("http://www.w3.org/2000/xmlns/", "]}IG8sp14*8kNL'!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      canonicalizerPhysical0.outputAttributesSubtree(iIOMetadataNode0, nameSpaceSymbTable0, hashMap0, mockFileOutputStream0);
      assertEquals(0, nameSpaceSymbTable0.getLevel());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      Comment comment0 = mock(Comment.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comment0).getData();
      File file0 = MockFile.createTempFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        canonicalizerPhysical0.outputCommentToWriter(comment0, mockPrintStream0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      canonicalizerPhysical0.handleParent(iIOMetadataNode0, nameSpaceSymbTable0);
      assertEquals("http://santuario.apache.org/c14n/physical", canonicalizerPhysical0.engineGetURI());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      MockFile mockFile0 = new MockFile((String) null, "xuatm3Q1*wt(jZNG1r");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      try { 
        canonicalizerPhysical0.outputAttributes(iIOMetadataNode0, nameSpaceSymbTable0, hashMap0, mockFileOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerPhysical", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("xml");
      try { 
        canonicalizerPhysical0.engineCanonicalizeSubTree((Node) iIOMetadataNode0, "http://santuario.apache.org/c14n/physical", true, (OutputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerPhysical", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      MockPrintStream mockPrintStream0 = new MockPrintStream("<>-;0u#BE");
      try { 
        canonicalizerPhysical0.engineCanonicalizeSubTree((Node) null, "", (OutputStream) mockPrintStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerPhysical", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("SY", false);
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      try { 
        canonicalizerPhysical0.engineCanonicalizeXPathNodeSet((Set<Node>) linkedHashSet0, "v/x&suVk)G]qLEF", (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerPhysical", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      MockFile mockFile0 = new MockFile("http://www.w3.org/2000/xmlns/", "]}IG8sp14*8kNL'!");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      // Undeclared exception!
      try { 
        canonicalizerPhysical0.outputPItoWriter((ProcessingInstruction) null, mockFileOutputStream0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      byte[] byteArray0 = new byte[0];
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(byteArray0);
      canonicalizerPhysical0.circumventBugIfNeeded(xMLSignatureInput0);
      assertTrue(xMLSignatureInput0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      String string0 = canonicalizerPhysical0.engineGetURI();
      assertEquals("http://santuario.apache.org/c14n/physical", string0);
  }
}
