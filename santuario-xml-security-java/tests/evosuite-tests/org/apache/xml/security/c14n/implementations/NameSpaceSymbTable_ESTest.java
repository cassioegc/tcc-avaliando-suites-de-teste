/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 18:36:00 GMT 2021
 */

package org.apache.xml.security.c14n.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.xml.security.c14n.implementations.NameSpaceSymbTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NameSpaceSymbTable_ESTest extends NameSpaceSymbTable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      Node node0 = nameSpaceSymbTable0.addMappingAndRender("iG,q%}3rDZ-c[$5sc5P", "a[nN/EQ", (Attr) null);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      boolean boolean0 = nameSpaceSymbTable0.addMapping("gmiGc0KK!kT", "gmiGc0KK!kT", (Attr) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.push();
      nameSpaceSymbTable0.push();
      nameSpaceSymbTable0.outputNodePush();
      nameSpaceSymbTable0.addMappingAndRender("", "", (Attr) null);
      nameSpaceSymbTable0.outputNodePop();
      assertEquals(2, nameSpaceSymbTable0.getLevel());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.needsClone();
      assertEquals(0, nameSpaceSymbTable0.getLevel());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      boolean boolean0 = nameSpaceSymbTable0.removeMappingIfRender("<y2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      Attr attr0 = nameSpaceSymbTable0.getMapping("");
      assertNull(attr0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.outputNodePush();
      int int0 = nameSpaceSymbTable0.getLevel();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      // Undeclared exception!
      try { 
        nameSpaceSymbTable0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.outputNodePush();
      nameSpaceSymbTable0.outputNodePop();
      // Undeclared exception!
      try { 
        nameSpaceSymbTable0.needsClone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.addMapping((String) null, (String) null, (Attr) null);
      // Undeclared exception!
      try { 
        nameSpaceSymbTable0.getUnrenderedNodes((Collection<Attr>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.SymbMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.push();
      nameSpaceSymbTable0.pop();
      // Undeclared exception!
      try { 
        nameSpaceSymbTable0.addMappingAndRender("org.apache.xml.security.c14n.implementations.NameSpaceSymbTable", "org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry", (Attr) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.push();
      nameSpaceSymbTable0.pop();
      // Undeclared exception!
      try { 
        nameSpaceSymbTable0.addMapping("e08=__}zKcMh@", "{r", (Attr) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      boolean boolean0 = nameSpaceSymbTable0.addMapping((String) null, "Error cloning the initial map", (Attr) null);
      boolean boolean1 = nameSpaceSymbTable0.removeMappingIfRender((String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.getMapping("[6");
      Node node0 = nameSpaceSymbTable0.addMappingAndRender("xmlns", "0fC}0AQ GNXz ", (Attr) null);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.addMappingAndRender((String) null, "p;Wqj[{b236*", (Attr) null);
      Attr attr0 = nameSpaceSymbTable0.getMappingWithoutRendered((String) null);
      assertNull(attr0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.outputNodePush();
      nameSpaceSymbTable0.addMappingAndRender("[mS8!{(psd:", "[mS8!{(psd:", (Attr) null);
      nameSpaceSymbTable0.pop();
      assertEquals(0, nameSpaceSymbTable0.getLevel());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.addMapping((String) null, (String) null, (Attr) null);
      nameSpaceSymbTable0.removeMappingIfNotRender((String) null);
      assertEquals(0, nameSpaceSymbTable0.getLevel());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.removeMappingIfNotRender("Error cloning the symbol map");
      assertEquals(0, nameSpaceSymbTable0.getLevel());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.removeMapping("");
      assertEquals(0, nameSpaceSymbTable0.getLevel());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      Attr attr0 = nameSpaceSymbTable0.getMappingWithoutRendered("");
      assertNull(attr0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      nameSpaceSymbTable0.addMappingAndRender("f!l/vfXUV-`;<Cz{|-$", "f!l/vfXUV-`;<Cz{|-$", (Attr) null);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      nameSpaceSymbTable0.getUnrenderedNodes(linkedList0);
      assertEquals(0, nameSpaceSymbTable0.getLevel());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      boolean boolean0 = nameSpaceSymbTable0.addMapping("", "2aiJe", (Attr) null);
      assertTrue(boolean0);
      
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      nameSpaceSymbTable0.getUnrenderedNodes(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      int int0 = nameSpaceSymbTable0.getLevel();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      // Undeclared exception!
      try { 
        nameSpaceSymbTable0.outputNodePop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
