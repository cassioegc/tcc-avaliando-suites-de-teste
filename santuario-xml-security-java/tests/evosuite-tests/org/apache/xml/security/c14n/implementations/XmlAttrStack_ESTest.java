/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 18:30:01 GMT 2021
 */

package org.apache.xml.security.c14n.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.xml.security.c14n.implementations.XmlAttrStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlAttrStack_ESTest extends XmlAttrStack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(false);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      xmlAttrStack0.push(47);
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(true);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      xmlAttrStack0.push(331);
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      xmlAttrStack0.addXmlnsAttr(attr0);
      xmlAttrStack0.push(1254);
      Attr attr1 = mock(Attr.class, new ViolatedAssumptionAnswer());
      xmlAttrStack0.addXmlnsAttr(attr1);
      xmlAttrStack0.push(1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(true);
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(attr0).getName();
      doReturn((String) null).when(attr0).getLocalName();
      Attr attr1 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(attr1).getName();
      doReturn((String) null).when(attr1).getLocalName();
      xmlAttrStack0.addXmlnsAttr(attr1);
      xmlAttrStack0.addXmlnsAttr(attr0);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(false);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      xmlAttrStack0.addXmlnsAttr((Attr) null);
      // Undeclared exception!
      try { 
        xmlAttrStack0.getXmlnsAttr(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.XmlAttrStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(true);
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("base").when(attr0).getValue();
      doReturn("base").when(attr0).getLocalName();
      Attr attr1 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("base").when(attr1).getValue();
      doReturn("base").when(attr1).getLocalName();
      xmlAttrStack0.addXmlnsAttr(attr1);
      xmlAttrStack0.addXmlnsAttr(attr0);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      assertTrue(linkedList0.contains(attr1));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(true);
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("").when(attr0).getValue();
      doReturn("base").when(attr0).getLocalName();
      Attr attr1 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("/../").when(attr1).getValue();
      doReturn("base").when(attr1).getLocalName();
      xmlAttrStack0.addXmlnsAttr(attr1);
      xmlAttrStack0.addXmlnsAttr(attr0);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      assertTrue(linkedList0.contains(attr1));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(true);
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(attr0).getName();
      doReturn((String) null).when(attr0).getLocalName();
      Attr attr1 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(attr1).getName();
      doReturn((String) null).when(attr1).getLocalName();
      xmlAttrStack0.addXmlnsAttr(attr1);
      xmlAttrStack0.addXmlnsAttr(attr0);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      Attr attr2 = mock(Attr.class, new ViolatedAssumptionAnswer());
      linkedList0.add(attr2);
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(false);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("h", "h").when(attr0).getName();
      xmlAttrStack0.addXmlnsAttr(attr0);
      Attr attr1 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("h").when(attr1).getName();
      xmlAttrStack0.addXmlnsAttr(attr1);
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(true);
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(attr0).getName();
      doReturn((String) null).when(attr0).getLocalName();
      xmlAttrStack0.addXmlnsAttr(attr0);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      assertFalse(linkedList0.contains(attr0));
      assertEquals(0, linkedList0.size());
      
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(true);
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("./").when(attr0).getValue();
      doReturn("base").when(attr0).getLocalName();
      xmlAttrStack0.addXmlnsAttr(attr0);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      Attr attr1 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("./").when(attr1).getValue();
      doReturn("base").when(attr1).getLocalName();
      linkedList0.add(attr1);
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(true);
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn("./").when(attr0).getValue();
      doReturn("base").when(attr0).getLocalName();
      xmlAttrStack0.addXmlnsAttr(attr0);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      Attr attr1 = mock(Attr.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(attr1).getLocalName();
      linkedList0.add(attr1);
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(true);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(true);
      LinkedList<Attr> linkedList0 = new LinkedList<Attr>();
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      xmlAttrStack0.push(0);
      xmlAttrStack0.push((-1));
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      xmlAttrStack0.push(0);
      xmlAttrStack0.getXmlnsAttr(linkedList0);
      xmlAttrStack0.push((-589));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlAttrStack xmlAttrStack0 = new XmlAttrStack(false);
      // Undeclared exception!
      try { 
        xmlAttrStack0.push((-2268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
