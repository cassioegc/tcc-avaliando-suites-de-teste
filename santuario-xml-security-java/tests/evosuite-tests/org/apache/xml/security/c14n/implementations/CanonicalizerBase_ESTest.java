/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 18:24:43 GMT 2021
 */

package org.apache.xml.security.c14n.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.c14n.implementations.Canonicalizer11_OmitComments;
import org.apache.xml.security.c14n.implementations.Canonicalizer11_WithComments;
import org.apache.xml.security.c14n.implementations.Canonicalizer20010315ExclOmitComments;
import org.apache.xml.security.c14n.implementations.Canonicalizer20010315ExclWithComments;
import org.apache.xml.security.c14n.implementations.Canonicalizer20010315OmitComments;
import org.apache.xml.security.c14n.implementations.CanonicalizerBase;
import org.apache.xml.security.c14n.implementations.CanonicalizerPhysical;
import org.apache.xml.security.c14n.implementations.NameSpaceSymbTable;
import org.apache.xml.security.signature.XMLSignatureInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.ProcessingInstruction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CanonicalizerBase_ESTest extends CanonicalizerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Canonicalizer11_WithComments canonicalizer11_WithComments0 = new Canonicalizer11_WithComments();
      assertEquals("http://www.w3.org/2006/12/xml-c14n11#WithComments", canonicalizer11_WithComments0.engineGetURI());
      assertNotNull(canonicalizer11_WithComments0);
      
      Comment comment0 = mock(Comment.class, new ViolatedAssumptionAnswer());
      doReturn("CzZ").when(comment0).getData();
      MockPrintStream mockPrintStream0 = new MockPrintStream("http://www.w3.org/XML/1998/namespace");
      assertNotNull(mockPrintStream0);
      
      canonicalizer11_WithComments0.outputCommentToWriter(comment0, mockPrintStream0, (-2114));
      assertEquals("http://www.w3.org/2006/12/xml-c14n11#WithComments", canonicalizer11_WithComments0.engineGetURI());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      assertEquals("http://santuario.apache.org/c14n/physical", canonicalizerPhysical0.engineGetURI());
      assertNotNull(canonicalizerPhysical0);
      
      ProcessingInstruction processingInstruction0 = mock(ProcessingInstruction.class, new ViolatedAssumptionAnswer());
      doReturn("http://www.w3.org/XML/1998/namespace").when(processingInstruction0).getData();
      doReturn("http://www.w3.org/2000/xmlns/").when(processingInstruction0).getTarget();
      MockFile mockFile0 = new MockFile("xml", "http://www.w3.org/2000/xmlns/");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      assertNotNull(mockFileOutputStream0);
      
      canonicalizerPhysical0.outputPItoWriter(processingInstruction0, mockFileOutputStream0, (-3011));
      assertEquals("http://santuario.apache.org/c14n/physical", canonicalizerPhysical0.engineGetURI());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("xmlns", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/santuario-xml-security-java/xml/http:/www.w3.org/2000/xmlns", mockFile0.toString());
      assertEquals(70L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/cassioegc/tcc/santuario-xml-security-java/xml/http:/www.w3.org/2000", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Canonicalizer11_OmitComments canonicalizer11_OmitComments0 = new Canonicalizer11_OmitComments();
      assertEquals("http://www.w3.org/2006/12/xml-c14n11", canonicalizer11_OmitComments0.engineGetURI());
      assertNotNull(canonicalizer11_OmitComments0);
      
      ProcessingInstruction processingInstruction0 = mock(ProcessingInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(processingInstruction0).getTarget();
      MockFile mockFile0 = new MockFile("", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      assertNotNull(mockFileOutputStream0);
      
      // Undeclared exception!
      try { 
        canonicalizer11_OmitComments0.outputPItoWriter(processingInstruction0, mockFileOutputStream0, (-3096));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Canonicalizer11_OmitComments canonicalizer11_OmitComments0 = new Canonicalizer11_OmitComments();
      assertEquals("http://www.w3.org/2006/12/xml-c14n11", canonicalizer11_OmitComments0.engineGetURI());
      assertNotNull(canonicalizer11_OmitComments0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("xmlns");
      assertNotNull(iIOMetadataNode0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(45);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      canonicalizer11_OmitComments0.engineCanonicalizeSubTree((Node) iIOMetadataNode0, (OutputStream) pipedOutputStream0);
      assertEquals("http://www.w3.org/2006/12/xml-c14n11", canonicalizer11_OmitComments0.engineGetURI());
      assertEquals(15, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Canonicalizer20010315ExclWithComments canonicalizer20010315ExclWithComments0 = new Canonicalizer20010315ExclWithComments();
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#WithComments", canonicalizer20010315ExclWithComments0.engineGetURI());
      assertNotNull(canonicalizer20010315ExclWithComments0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      assertNotNull(iIOMetadataNode0);
      
      int int0 = canonicalizer20010315ExclWithComments0.isVisibleInt(iIOMetadataNode0);
      assertEquals(1, int0);
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#WithComments", canonicalizer20010315ExclWithComments0.engineGetURI());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Canonicalizer20010315ExclOmitComments canonicalizer20010315ExclOmitComments0 = new Canonicalizer20010315ExclOmitComments();
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#", canonicalizer20010315ExclOmitComments0.engineGetURI());
      assertNotNull(canonicalizer20010315ExclOmitComments0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Comment comment0 = mock(Comment.class, new ViolatedAssumptionAnswer());
      try { 
        canonicalizer20010315ExclOmitComments0.outputCommentToWriter(comment0, pipedOutputStream0, 6);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("http://www.w3.org/2000/xmlns/");
      assertNotNull(mockFileOutputStream0);
      
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        CanonicalizerBase.outputAttrToWriter((String) null, "kOF8c3vrAvP7Y{IM812", mockFileOutputStream0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.UtfHelpper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      try { 
        CanonicalizerBase.outputAttrToWriter("xmlns", "http://santuario.apache.org/c14n/physical", pipedOutputStream0, hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Canonicalizer11_OmitComments canonicalizer11_OmitComments0 = new Canonicalizer11_OmitComments();
      assertEquals("http://www.w3.org/2006/12/xml-c14n11", canonicalizer11_OmitComments0.engineGetURI());
      assertNotNull(canonicalizer11_OmitComments0);
      
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      assertEquals(0, nameSpaceSymbTable0.getLevel());
      assertNotNull(nameSpaceSymbTable0);
      
      // Undeclared exception!
      try { 
        canonicalizer11_OmitComments0.handleParent((Element) null, nameSpaceSymbTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.Canonicalizer20010315", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Canonicalizer20010315OmitComments canonicalizer20010315OmitComments0 = new Canonicalizer20010315OmitComments();
      assertEquals("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", canonicalizer20010315OmitComments0.engineGetURI());
      assertNotNull(canonicalizer20010315OmitComments0);
      
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((Node) null);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        canonicalizer20010315OmitComments0.engineCanonicalizeXPathNodeSet((Set<Node>) linkedHashSet0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Canonicalizer11_OmitComments canonicalizer11_OmitComments0 = new Canonicalizer11_OmitComments();
      assertEquals("http://www.w3.org/2006/12/xml-c14n11", canonicalizer11_OmitComments0.engineGetURI());
      assertNotNull(canonicalizer11_OmitComments0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("xmlns");
      assertNotNull(iIOMetadataNode0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      try { 
        canonicalizer11_OmitComments0.engineCanonicalizeSubTree((Node) iIOMetadataNode0, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Canonicalizer11_WithComments canonicalizer11_WithComments0 = new Canonicalizer11_WithComments();
      assertEquals("http://www.w3.org/2006/12/xml-c14n11#WithComments", canonicalizer11_WithComments0.engineGetURI());
      assertNotNull(canonicalizer11_WithComments0);
      
      // Undeclared exception!
      try { 
        canonicalizer11_WithComments0.engineCanonicalize((XMLSignatureInput) null, (OutputStream) pipedOutputStream0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Canonicalizer20010315ExclOmitComments canonicalizer20010315ExclOmitComments0 = new Canonicalizer20010315ExclOmitComments();
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#", canonicalizer20010315ExclOmitComments0.engineGetURI());
      assertNotNull(canonicalizer20010315ExclOmitComments0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      canonicalizer20010315ExclOmitComments0.engineCanonicalizeSubTree((Node) null, (Node) null, (OutputStream) pipedOutputStream0);
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#", canonicalizer20010315ExclOmitComments0.engineGetURI());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      assertEquals("http://santuario.apache.org/c14n/physical", canonicalizerPhysical0.engineGetURI());
      assertNotNull(canonicalizerPhysical0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("xml");
      assertNotNull(mockPrintStream0);
      
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput((Set<Node>) null);
      assertFalse(xMLSignatureInput0.isOutputStreamSet());
      assertNull(xMLSignatureInput0.getSourceURI());
      assertFalse(xMLSignatureInput0.isElement());
      assertFalse(xMLSignatureInput0.isExcludeComments());
      assertNull(xMLSignatureInput0.getMIMEType());
      assertNull(xMLSignatureInput0.getPreCalculatedDigest());
      assertFalse(xMLSignatureInput0.isByteArray());
      assertFalse(xMLSignatureInput0.isOctetStream());
      assertFalse(xMLSignatureInput0.isNeedsToBeExpanded());
      assertFalse(xMLSignatureInput0.isPreCalculatedDigest());
      assertFalse(xMLSignatureInput0.isInitialized());
      assertFalse(xMLSignatureInput0.isNodeSet());
      assertFalse(xMLSignatureInput0.isSecureValidation());
      assertNotNull(xMLSignatureInput0);
      
      canonicalizerPhysical0.engineCanonicalize(xMLSignatureInput0, (OutputStream) mockPrintStream0, false);
      assertEquals("http://santuario.apache.org/c14n/physical", canonicalizerPhysical0.engineGetURI());
      assertFalse(xMLSignatureInput0.isOutputStreamSet());
      assertNull(xMLSignatureInput0.getSourceURI());
      assertFalse(xMLSignatureInput0.isElement());
      assertFalse(xMLSignatureInput0.isExcludeComments());
      assertNull(xMLSignatureInput0.getMIMEType());
      assertNull(xMLSignatureInput0.getPreCalculatedDigest());
      assertFalse(xMLSignatureInput0.isByteArray());
      assertFalse(xMLSignatureInput0.isOctetStream());
      assertFalse(xMLSignatureInput0.isNeedsToBeExpanded());
      assertFalse(xMLSignatureInput0.isPreCalculatedDigest());
      assertFalse(xMLSignatureInput0.isInitialized());
      assertFalse(xMLSignatureInput0.isNodeSet());
      assertFalse(xMLSignatureInput0.isSecureValidation());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G~");
      assertNotNull(mockFileOutputStream0);
      
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/xmlns/");
      assertNotNull(iIOMetadataNode0);
      
      Canonicalizer20010315OmitComments canonicalizer20010315OmitComments0 = new Canonicalizer20010315OmitComments();
      assertEquals("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", canonicalizer20010315OmitComments0.engineGetURI());
      assertNotNull(canonicalizer20010315OmitComments0);
      
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      assertFalse(xMLSignatureInput0.isOctetStream());
      assertFalse(xMLSignatureInput0.isByteArray());
      assertNull(xMLSignatureInput0.getMIMEType());
      assertFalse(xMLSignatureInput0.isNodeSet());
      assertFalse(xMLSignatureInput0.isExcludeComments());
      assertFalse(xMLSignatureInput0.isNeedsToBeExpanded());
      assertFalse(xMLSignatureInput0.isPreCalculatedDigest());
      assertTrue(xMLSignatureInput0.isElement());
      assertNull(xMLSignatureInput0.getSourceURI());
      assertNull(xMLSignatureInput0.getPreCalculatedDigest());
      assertFalse(xMLSignatureInput0.isOutputStreamSet());
      assertFalse(xMLSignatureInput0.isSecureValidation());
      assertFalse(xMLSignatureInput0.isInitialized());
      assertNotNull(xMLSignatureInput0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      assertNotNull(filterOutputStream0);
      
      canonicalizer20010315OmitComments0.engineCanonicalize(xMLSignatureInput0, (OutputStream) filterOutputStream0, true);
      assertEquals("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", canonicalizer20010315OmitComments0.engineGetURI());
      assertFalse(xMLSignatureInput0.isOctetStream());
      assertFalse(xMLSignatureInput0.isByteArray());
      assertNull(xMLSignatureInput0.getMIMEType());
      assertFalse(xMLSignatureInput0.isNodeSet());
      assertFalse(xMLSignatureInput0.isExcludeComments());
      assertFalse(xMLSignatureInput0.isNeedsToBeExpanded());
      assertFalse(xMLSignatureInput0.isPreCalculatedDigest());
      assertTrue(xMLSignatureInput0.isElement());
      assertNull(xMLSignatureInput0.getSourceURI());
      assertNull(xMLSignatureInput0.getPreCalculatedDigest());
      assertFalse(xMLSignatureInput0.isOutputStreamSet());
      assertFalse(xMLSignatureInput0.isSecureValidation());
      assertFalse(xMLSignatureInput0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Canonicalizer20010315OmitComments canonicalizer20010315OmitComments0 = new Canonicalizer20010315OmitComments();
      assertEquals("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", canonicalizer20010315OmitComments0.engineGetURI());
      assertNotNull(canonicalizer20010315OmitComments0);
      
      // Undeclared exception!
      try { 
        canonicalizer20010315OmitComments0.getNullNode((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to create nullNode: java.lang.NullPointerException
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Canonicalizer20010315OmitComments canonicalizer20010315OmitComments0 = new Canonicalizer20010315OmitComments();
      assertEquals("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", canonicalizer20010315OmitComments0.engineGetURI());
      assertNotNull(canonicalizer20010315OmitComments0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        canonicalizer20010315OmitComments0.outputCommentToWriter((Comment) null, dataOutputStream0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G~");
      assertNotNull(mockFileOutputStream0);
      
      Canonicalizer20010315OmitComments canonicalizer20010315OmitComments0 = new Canonicalizer20010315OmitComments();
      assertEquals("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", canonicalizer20010315OmitComments0.engineGetURI());
      assertNotNull(canonicalizer20010315OmitComments0);
      
      Comment comment0 = mock(Comment.class, new ViolatedAssumptionAnswer());
      doReturn("G~").when(comment0).getData();
      canonicalizer20010315OmitComments0.outputCommentToWriter(comment0, mockFileOutputStream0, (byte)0);
      assertEquals("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", canonicalizer20010315OmitComments0.engineGetURI());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      HashMap<String, byte[]> hashMap0 = new HashMap<String, byte[]>();
      CanonicalizerBase.outputAttrToWriter("http://www.w3.org/XML/1998/namespace", "xmlns", dataOutputStream0, hashMap0);
      assertEquals(45, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Canonicalizer20010315ExclWithComments canonicalizer20010315ExclWithComments0 = new Canonicalizer20010315ExclWithComments();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("xml");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(7041);
      iIOMetadataNode0.insertBefore(iIOMetadataNode1, iIOMetadataNode1);
      canonicalizer20010315ExclWithComments0.engineCanonicalizeSubTree((Node) iIOMetadataNode1, (Node) iIOMetadataNode1, (OutputStream) byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Canonicalizer20010315ExclOmitComments canonicalizer20010315ExclOmitComments0 = new Canonicalizer20010315ExclOmitComments();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/XML/1998/namespace");
      NameSpaceSymbTable nameSpaceSymbTable0 = new NameSpaceSymbTable();
      canonicalizer20010315ExclOmitComments0.handleParent(iIOMetadataNode0, nameSpaceSymbTable0);
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#", canonicalizer20010315ExclOmitComments0.engineGetURI());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Canonicalizer20010315OmitComments canonicalizer20010315OmitComments0 = new Canonicalizer20010315OmitComments();
      boolean boolean0 = canonicalizer20010315OmitComments0.isVisible((Node) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Canonicalizer20010315OmitComments canonicalizer20010315OmitComments0 = new Canonicalizer20010315OmitComments();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      int int0 = canonicalizer20010315OmitComments0.isVisibleDO(iIOMetadataNode0, 1208);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      ProcessingInstruction processingInstruction0 = mock(ProcessingInstruction.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8192);
      ProcessingInstruction processingInstruction1 = mock(ProcessingInstruction.class, new ViolatedAssumptionAnswer());
      doReturn((short)0, (short)0).when(processingInstruction1).getNodeType();
      canonicalizerPhysical0.engineCanonicalizeSubTree((Node) processingInstruction1, (Node) processingInstruction0, (OutputStream) byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/XML/1998/namespace");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      Set<Node> set0 = xMLSignatureInput0.getNodeSet(false);
      XMLSignatureInput xMLSignatureInput1 = new XMLSignatureInput(set0);
      byte[] byteArray0 = xMLSignatureInput1.getBytes();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Canonicalizer20010315ExclWithComments canonicalizer20010315ExclWithComments0 = new Canonicalizer20010315ExclWithComments();
      byte[] byteArray0 = new byte[6];
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)0);
      try { 
        canonicalizer20010315ExclWithComments0.engineCanonicalize(xMLSignatureInput0, (OutputStream) byteArrayOutputStream0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/XML/1998/namespace");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      xMLSignatureInput0.getNodeSet(false);
      byte[] byteArray0 = xMLSignatureInput0.getBytes();
      assertEquals(77, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CanonicalizerPhysical canonicalizerPhysical0 = new CanonicalizerPhysical();
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        canonicalizerPhysical0.engineCanonicalizeXPathNodeSet((Set<Node>) linkedHashSet0, (OutputStream) filterOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library. Original message was \"\"
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Canonicalizer11_OmitComments canonicalizer11_OmitComments0 = new Canonicalizer11_OmitComments();
      // Undeclared exception!
      try { 
        canonicalizer11_OmitComments0.engineCanonicalizeSubTree((Node) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }
}
