/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 18:22:30 GMT 2021
 */

package org.apache.xml.security.c14n.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry;
import org.apache.xml.security.c14n.implementations.SymbMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Attr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SymbMap_ESTest extends SymbMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      symbMap0.free = (-1);
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      NameSpaceSymbEntry nameSpaceSymbEntry0 = new NameSpaceSymbEntry("hP 5~Z+iI&BTc2Pi1,", attr0, true, "");
      symbMap0.put("", nameSpaceSymbEntry0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      symbMap0.index((Object) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      Object object0 = new Object();
      symbMap0.index(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry";
      stringArray0[1] = "dtdmSqJer:IKr#";
      symbMap0.keys = stringArray0;
      // Undeclared exception!
      symbMap0.rehash(1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      // Undeclared exception!
      try { 
        symbMap0.rehash((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.SymbMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      symbMap0.keys = stringArray0;
      // Undeclared exception!
      try { 
        symbMap0.rehash(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      NameSpaceSymbEntry nameSpaceSymbEntry0 = symbMap0.get("`yx%");
      symbMap0.put("`yx%", (NameSpaceSymbEntry) null);
      symbMap0.rehash(1);
      // Undeclared exception!
      symbMap0.put("", nameSpaceSymbEntry0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      NameSpaceSymbEntry nameSpaceSymbEntry0 = new NameSpaceSymbEntry("AhF/IB.+", attr0, true, "AhF/IB.+");
      symbMap0.keys = null;
      // Undeclared exception!
      try { 
        symbMap0.put("AhF/IB.+", nameSpaceSymbEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      SymbMap symbMap1 = symbMap0.clone();
      NameSpaceSymbEntry[] nameSpaceSymbEntryArray0 = new NameSpaceSymbEntry[3];
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      NameSpaceSymbEntry nameSpaceSymbEntry0 = new NameSpaceSymbEntry("JK+xC)$Y=c1y6mC", attr0, true, "");
      symbMap1.entries = nameSpaceSymbEntryArray0;
      // Undeclared exception!
      try { 
        symbMap1.put("$V<|FfI_!VZGJ", nameSpaceSymbEntry0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.xml.security.c14n.implementations.SymbMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      symbMap0.rehash(0);
      // Undeclared exception!
      try { 
        symbMap0.put("}", (NameSpaceSymbEntry) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      Object object0 = new Object();
      symbMap0.keys = null;
      // Undeclared exception!
      try { 
        symbMap0.index(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      symbMap0.rehash(0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        symbMap0.index(object0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "O]";
      stringArray0[1] = "vQ@t1<";
      stringArray0[2] = "vQ@t1<";
      stringArray0[3] = "Ci{V&?v\"l.";
      stringArray0[4] = "org.apache.xml.security.c14n.implementations.SymbMap";
      stringArray0[5] = "vQ@t1<";
      symbMap0.keys = stringArray0;
      // Undeclared exception!
      symbMap0.get("3OYO b");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      SymbMap symbMap1 = symbMap0.clone();
      symbMap1.keys = null;
      // Undeclared exception!
      try { 
        symbMap1.get("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      SymbMap symbMap1 = symbMap0.clone();
      SymbMap symbMap2 = symbMap1.clone();
      NameSpaceSymbEntry[] nameSpaceSymbEntryArray0 = new NameSpaceSymbEntry[9];
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      NameSpaceSymbEntry nameSpaceSymbEntry0 = new NameSpaceSymbEntry("", attr0, true, "q41d}pGW");
      Attr attr1 = mock(Attr.class, new ViolatedAssumptionAnswer());
      NameSpaceSymbEntry nameSpaceSymbEntry1 = new NameSpaceSymbEntry("org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry", attr1, true, "");
      symbMap1.get("q41d}pGW");
      symbMap0.get("q41d}pGW");
      Attr attr2 = mock(Attr.class, new ViolatedAssumptionAnswer());
      NameSpaceSymbEntry nameSpaceSymbEntry2 = new NameSpaceSymbEntry("org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry", attr2, true, "org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry");
      symbMap2.entries = nameSpaceSymbEntryArray0;
      // Undeclared exception!
      try { 
        symbMap2.get("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.xml.security.c14n.implementations.SymbMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      symbMap0.rehash(0);
      // Undeclared exception!
      try { 
        symbMap0.get("!T[RAf08#G9sdp");
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      symbMap0.entries = null;
      // Undeclared exception!
      try { 
        symbMap0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.SymbMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      NameSpaceSymbEntry[] nameSpaceSymbEntryArray0 = new NameSpaceSymbEntry[7];
      symbMap0.entries = nameSpaceSymbEntryArray0;
      symbMap0.entries = null;
      // Undeclared exception!
      try { 
        symbMap0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.SymbMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      symbMap0.keys = stringArray0;
      String[] stringArray1 = new String[9];
      stringArray1[3] = "org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry";
      stringArray1[4] = "org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry";
      stringArray1[5] = "org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry";
      stringArray1[6] = "VXn6=SE>";
      symbMap0.keys = stringArray1;
      NameSpaceSymbEntry nameSpaceSymbEntry0 = new NameSpaceSymbEntry("org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry", attr0, false, "VXn6=SE>");
      symbMap0.put("VXn6=SE>", nameSpaceSymbEntry0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry";
      symbMap0.keys = stringArray0;
      Object object0 = new Object();
      // Undeclared exception!
      symbMap0.index(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      NameSpaceSymbEntry nameSpaceSymbEntry0 = new NameSpaceSymbEntry("?if|WDP1X<z", (Attr) null, false, "");
      symbMap0.rehash(2);
      SymbMap symbMap1 = symbMap0.clone();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.xml.security.c14n.implementations.NameSpaceSymbEntry";
      symbMap1.keys = stringArray0;
      symbMap0.put("N", nameSpaceSymbEntry0);
      symbMap1.rehash(5254);
      NameSpaceSymbEntry nameSpaceSymbEntry1 = symbMap0.get("org.apache.xml.security.c14n.implementations.SymbMap");
      assertNull(nameSpaceSymbEntry1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      NameSpaceSymbEntry nameSpaceSymbEntry0 = new NameSpaceSymbEntry("", attr0, true, "g663I");
      symbMap0.put("IUmS)+.fGW3?MFJ`jW", nameSpaceSymbEntry0);
      List<NameSpaceSymbEntry> list0 = symbMap0.entrySet();
      assertFalse(list0.contains(nameSpaceSymbEntry0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      NameSpaceSymbEntry[] nameSpaceSymbEntryArray0 = new NameSpaceSymbEntry[3];
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      NameSpaceSymbEntry nameSpaceSymbEntry0 = new NameSpaceSymbEntry("JK+xC)$Y=c1y6mC", attr0, true, "");
      nameSpaceSymbEntryArray0[0] = nameSpaceSymbEntry0;
      symbMap0.put("$V<|FfI_!VZGJ", nameSpaceSymbEntryArray0[0]);
      List<NameSpaceSymbEntry> list0 = symbMap0.entrySet();
      assertTrue(list0.contains(nameSpaceSymbEntry0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      NameSpaceSymbEntry nameSpaceSymbEntry0 = new NameSpaceSymbEntry("?if|WDP1X<z", (Attr) null, false, "");
      symbMap0.free = 2;
      symbMap0.put("N", nameSpaceSymbEntry0);
      symbMap0.put("", (NameSpaceSymbEntry) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SymbMap symbMap0 = new SymbMap();
      SymbMap symbMap1 = symbMap0.clone();
      NameSpaceSymbEntry[] nameSpaceSymbEntryArray0 = new NameSpaceSymbEntry[3];
      Attr attr0 = mock(Attr.class, new ViolatedAssumptionAnswer());
      NameSpaceSymbEntry nameSpaceSymbEntry0 = new NameSpaceSymbEntry("JK+xC)$Y=c1y6mC", attr0, true, "");
      symbMap1.get("$V<|FfI_!VZGJ");
      symbMap0.get("$V<|FfI_!VZGJ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$V<|FfI_!VZGJ";
      symbMap0.keys = stringArray0;
      symbMap0.put("$V<|FfI_!VZGJ", nameSpaceSymbEntryArray0[1]);
      assertNotSame(symbMap0, symbMap1);
  }
}
