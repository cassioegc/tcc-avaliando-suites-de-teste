/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 17:16:28 GMT 2021
 */

package org.apache.xml.security.encryption;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.xml.security.encryption.Serializer;
import org.apache.xml.security.encryption.XMLCipher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLCipher_ESTest extends XMLCipher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        XMLCipher.getProviderInstance((Serializer) null, "Mj/9yReH=e?", "\"B9cAGd7", "\"B9cAGd7");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No such provider: \"B9cAGd7
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLCipher.getProviderInstance((Serializer) null, (String) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformation unexpectedly null...
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLCipher.getInstance((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformation unexpectedly null...
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLCipher.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformation unexpectedly null...
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLCipher.getProviderInstance((Serializer) null, "", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing provider
         //
         verifyException("javax.crypto.Cipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLCipher.getProviderInstance((String) null, (String) null, "+%$';~f-:Ipm", "pM}TWnN9SGL'<Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Provider unexpectedly null..
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        XMLCipher.getProviderInstance("or=0", "or=0", "or=0", (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLCipher.getProviderInstance((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Provider unexpectedly null..
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        XMLCipher.getProviderInstance("org.apache.xml.security.keys.keyresolver.implementations.RSAKeyValueResolver", "org.apache.xml.security.keys.keyresolver.implementations.RSAKeyValueResolver", "org.apache.xml.security.keys.keyresolver.implementations.RSAKeyValueResolver");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLCipher.getProviderInstance((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Provider unexpectedly null..
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      try { 
        XMLCipher.getProviderInstance("", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLCipher.getInstance((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformation unexpectedly null...
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        XMLCipher.getProviderInstance("V)o,dZ/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        XMLCipher.getInstance("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        XMLCipher.getInstance("org.apache.xml.security.keys.keyresolver.implementations.X509SubjectNameResolver", "org.apache.xml.security.keys.keyresolver.implementations.X509SubjectNameResolver");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      try { 
        XMLCipher.getInstance("http://www.w3.org/2001/04/xmldsig-more#camellia128-cbc", "http://www.w3.org/2001/04/xmldsig-more#camellia128-cbc", ".:6U8,&tt{");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      try { 
        XMLCipher.getInstance();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      try { 
        XMLCipher.getInstance((Serializer) null, "BZd9t:u");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No transformation given
         //
         verifyException("org.apache.xml.security.encryption.XMLCipher", e);
      }
  }
}
