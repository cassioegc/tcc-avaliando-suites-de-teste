/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 17:12:32 GMT 2021
 */

package org.apache.xml.security.encryption;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.xml.security.encryption.CipherData;
import org.apache.xml.security.encryption.CipherReference;
import org.apache.xml.security.encryption.CipherValue;
import org.apache.xml.security.encryption.EncryptedType;
import org.apache.xml.security.encryption.XMLCipherInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLCipherInput_ESTest extends XMLCipherInput_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CipherData cipherData0 = mock(CipherData.class, new ViolatedAssumptionAnswer());
      EncryptedType encryptedType0 = mock(EncryptedType.class, new ViolatedAssumptionAnswer());
      doReturn(cipherData0).when(encryptedType0).getCipherData();
      XMLCipherInput xMLCipherInput0 = new XMLCipherInput(encryptedType0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CipherValue cipherValue0 = mock(CipherValue.class, new ViolatedAssumptionAnswer());
      CipherData cipherData0 = mock(CipherData.class, new ViolatedAssumptionAnswer());
      doReturn(3506, 0).when(cipherData0).getDataType();
      XMLCipherInput xMLCipherInput0 = new XMLCipherInput(cipherData0);
      try { 
        xMLCipherInput0.getBytes();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipherInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CipherValue cipherValue0 = mock(CipherValue.class, new ViolatedAssumptionAnswer());
      CipherData cipherData0 = mock(CipherData.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(cipherData0).getDataType();
      XMLCipherInput xMLCipherInput0 = new XMLCipherInput(cipherData0);
      try { 
        xMLCipherInput0.getBytes();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipherInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CipherData cipherData0 = mock(CipherData.class, new ViolatedAssumptionAnswer());
      doReturn((CipherReference) null).when(cipherData0).getCipherReference();
      doReturn(2).when(cipherData0).getDataType();
      XMLCipherInput xMLCipherInput0 = new XMLCipherInput(cipherData0);
      // Undeclared exception!
      try { 
        xMLCipherInput0.getBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.encryption.XMLCipherInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XMLCipherInput xMLCipherInput0 = null;
      try {
        xMLCipherInput0 = new XMLCipherInput((CipherData) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipherInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CipherValue cipherValue0 = mock(CipherValue.class, new ViolatedAssumptionAnswer());
      doReturn("*&-UUEX9Lt>SP").when(cipherValue0).getValue();
      CipherData cipherData0 = mock(CipherData.class, new ViolatedAssumptionAnswer());
      doReturn(cipherValue0).when(cipherData0).getCipherValue();
      doReturn(1, 1).when(cipherData0).getDataType();
      XMLCipherInput xMLCipherInput0 = new XMLCipherInput(cipherData0);
      // Undeclared exception!
      try { 
        xMLCipherInput0.getBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Last unit does not have enough valid bits
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CipherReference cipherReference0 = mock(CipherReference.class, new ViolatedAssumptionAnswer());
      CipherData cipherData0 = mock(CipherData.class, new ViolatedAssumptionAnswer());
      doReturn((CipherReference) null).when(cipherData0).getCipherReference();
      doReturn(2).when(cipherData0).getDataType();
      XMLCipherInput xMLCipherInput0 = new XMLCipherInput(cipherData0);
      // Undeclared exception!
      try { 
        xMLCipherInput0.getBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.encryption.XMLCipherInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XMLCipherInput xMLCipherInput0 = null;
      try {
        xMLCipherInput0 = new XMLCipherInput((EncryptedType) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipherInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CipherData cipherData0 = mock(CipherData.class, new ViolatedAssumptionAnswer());
      XMLCipherInput xMLCipherInput0 = new XMLCipherInput(cipherData0);
      xMLCipherInput0.setSecureValidation(false);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CipherData cipherData0 = mock(CipherData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(cipherData0).getDataType();
      XMLCipherInput xMLCipherInput0 = new XMLCipherInput(cipherData0);
      try { 
        xMLCipherInput0.getBytes();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.encryption.XMLCipherInput", e);
      }
  }
}
