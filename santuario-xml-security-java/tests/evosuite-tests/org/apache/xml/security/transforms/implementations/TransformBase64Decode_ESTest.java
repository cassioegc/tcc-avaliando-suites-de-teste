/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 16:50:59 GMT 2021
 */

package org.apache.xml.security.transforms.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.signature.XMLSignatureInput;
import org.apache.xml.security.transforms.implementations.TransformBase64Decode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformBase64Decode_ESTest extends TransformBase64Decode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransformBase64Decode transformBase64Decode0 = new TransformBase64Decode();
      byte[] byteArray0 = new byte[0];
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(byteArray0);
      XMLSignatureInput xMLSignatureInput1 = transformBase64Decode0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, (Element) null, (String) null, false);
      assertNull(xMLSignatureInput1.getSourceURI());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransformBase64Decode transformBase64Decode0 = new TransformBase64Decode();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput("signature.Transform.node");
      xMLSignatureInput0.setNodeSet(true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      // Undeclared exception!
      try { 
        transformBase64Decode0.enginePerformTransform(xMLSignatureInput0, dataOutputStream0, iIOMetadataNode0, "org.apache.xml.security.exceptions.XMLSecurityException", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // getNodeSet() called but no input data present
         //
         verifyException("org.apache.xml.security.signature.XMLSignatureInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransformBase64Decode transformBase64Decode0 = new TransformBase64Decode();
      MockFile mockFile0 = new MockFile("`[");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        transformBase64Decode0.enginePerformTransform((XMLSignatureInput) null, mockPrintStream0, iIOMetadataNode0, "X:-=q-c-IS_M", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.transforms.implementations.TransformBase64Decode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransformBase64Decode transformBase64Decode0 = new TransformBase64Decode();
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)68;
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Hp7S)9Q5F>Su");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Hp7S)9Q5F>Su");
      // Undeclared exception!
      try { 
        transformBase64Decode0.enginePerformTransform(xMLSignatureInput0, mockFileOutputStream0, iIOMetadataNode0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Last unit does not have enough valid bits
         //
         verifyException("java.util.Base64$Decoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransformBase64Decode transformBase64Decode0 = new TransformBase64Decode();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(pushbackInputStream0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      try { 
        transformBase64Decode0.enginePerformTransform(xMLSignatureInput0, byteArrayOutputStream0, iIOMetadataNode0, "", false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransformBase64Decode transformBase64Decode0 = new TransformBase64Decode();
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(linkedHashSet0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("~deu<N{MhY.S^4b");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        transformBase64Decode0.enginePerformTransform(xMLSignatureInput0, mockPrintStream0, iIOMetadataNode0, "~deu<N{MhY.S^4b", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library. Original message was \"\"
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransformBase64Decode transformBase64Decode0 = new TransformBase64Decode();
      byte[] byteArray0 = new byte[3];
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      XMLSignatureInput xMLSignatureInput1 = transformBase64Decode0.enginePerformTransform(xMLSignatureInput0, filterOutputStream0, (Element) null, "l^?V", false);
      assertFalse(xMLSignatureInput1.isOctetStream());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      TransformBase64Decode transformBase64Decode0 = new TransformBase64Decode();
      XMLSignatureInput xMLSignatureInput1 = transformBase64Decode0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, iIOMetadataNode0, "", true);
      assertTrue(xMLSignatureInput1.isSecureValidation());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransformBase64Decode transformBase64Decode0 = new TransformBase64Decode();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#base64");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      MockFile mockFile0 = new MockFile("http://www.w3.org/2000/09/xmldsig#base64", "http://www.w3.org/2000/09/xmldsig#base64");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      XMLSignatureInput xMLSignatureInput1 = transformBase64Decode0.enginePerformTransform(xMLSignatureInput0, mockPrintStream0, iIOMetadataNode0, "http://www.w3.org/2000/09/xmldsig#base64", false);
      assertFalse(xMLSignatureInput1.isSecureValidation());
      assertTrue(xMLSignatureInput1.isOutputStreamSet());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransformBase64Decode transformBase64Decode0 = new TransformBase64Decode();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(sequenceInputStream0);
      File file0 = MockFile.createTempFile("hJJOL`]|rsT_4l7", "hJJOL`]|rsT_4l7");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLSignatureInput xMLSignatureInput1 = transformBase64Decode0.enginePerformTransform(xMLSignatureInput0, mockPrintStream0, iIOMetadataNode0, "", true);
      try { 
        transformBase64Decode0.enginePerformTransform(xMLSignatureInput1, mockPrintStream0, iIOMetadataNode0, "hJJOL`]|rsT_4l7", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.transforms.implementations.TransformBase64Decode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransformBase64Decode transformBase64Decode0 = new TransformBase64Decode();
      String string0 = transformBase64Decode0.engineGetURI();
      assertEquals("http://www.w3.org/2000/09/xmldsig#base64", string0);
  }
}
