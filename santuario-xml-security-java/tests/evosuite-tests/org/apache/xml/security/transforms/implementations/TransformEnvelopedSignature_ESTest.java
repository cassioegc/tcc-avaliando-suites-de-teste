/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 16:42:36 GMT 2021
 */

package org.apache.xml.security.transforms.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.signature.XMLSignatureInput;
import org.apache.xml.security.transforms.implementations.TransformEnvelopedSignature;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformEnvelopedSignature_ESTest extends TransformEnvelopedSignature_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("signature.Transform.node");
      TransformEnvelopedSignature.EnvelopedNodeFilter transformEnvelopedSignature_EnvelopedNodeFilter0 = new TransformEnvelopedSignature.EnvelopedNodeFilter(iIOMetadataNode0);
      Node node0 = iIOMetadataNode0.cloneNode(true);
      Node node1 = iIOMetadataNode0.appendChild(node0);
      int int0 = transformEnvelopedSignature_EnvelopedNodeFilter0.isNodeInclude(node1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      TransformEnvelopedSignature.EnvelopedNodeFilter transformEnvelopedSignature_EnvelopedNodeFilter0 = new TransformEnvelopedSignature.EnvelopedNodeFilter(iIOMetadataNode0);
      int int0 = transformEnvelopedSignature_EnvelopedNodeFilter0.isNodeInclude((Node) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      TransformEnvelopedSignature.EnvelopedNodeFilter transformEnvelopedSignature_EnvelopedNodeFilter0 = new TransformEnvelopedSignature.EnvelopedNodeFilter(iIOMetadataNode0);
      int int0 = transformEnvelopedSignature_EnvelopedNodeFilter0.isNodeInclude(iIOMetadataNode0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#");
      TransformEnvelopedSignature.EnvelopedNodeFilter transformEnvelopedSignature_EnvelopedNodeFilter0 = new TransformEnvelopedSignature.EnvelopedNodeFilter((Node) null);
      int int0 = transformEnvelopedSignature_EnvelopedNodeFilter0.isNodeIncludeDO(iIOMetadataNode0, (-4));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      try { 
        transformEnvelopedSignature0.enginePerformTransform((XMLSignatureInput) null, byteArrayOutputStream0, (Element) null, "Ai&-tsB!T", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.transforms.implementations.TransformEnvelopedSignature", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      TransformEnvelopedSignature.EnvelopedNodeFilter transformEnvelopedSignature_EnvelopedNodeFilter0 = new TransformEnvelopedSignature.EnvelopedNodeFilter(iIOMetadataNode0);
      int int0 = transformEnvelopedSignature_EnvelopedNodeFilter0.isNodeIncludeDO(iIOMetadataNode0, 65);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      byte[] byteArray0 = new byte[8];
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        transformEnvelopedSignature0.enginePerformTransform(xMLSignatureInput0, byteArrayOutputStream0, iIOMetadataNode0, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TransformEnvelopedSignature transformEnvelopedSignature0 = new TransformEnvelopedSignature();
      String string0 = transformEnvelopedSignature0.engineGetURI();
      assertEquals("http://www.w3.org/2000/09/xmldsig#enveloped-signature", string0);
  }
}
