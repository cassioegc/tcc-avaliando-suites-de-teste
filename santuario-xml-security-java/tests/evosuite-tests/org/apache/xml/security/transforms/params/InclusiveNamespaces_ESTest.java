/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 16:59:00 GMT 2021
 */

package org.apache.xml.security.transforms.params;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.SortedSet;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.transforms.params.InclusiveNamespaces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InclusiveNamespaces_ESTest extends InclusiveNamespaces_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InclusiveNamespaces inclusiveNamespaces0 = null;
      try {
        inclusiveNamespaces0 = new InclusiveNamespaces((Document) null, "\nOriginal Exception was ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("InclusiveNamespaces");
      iIOMetadataNode0.setAttributeNS("!", "PrefixList", "!");
      InclusiveNamespaces inclusiveNamespaces0 = new InclusiveNamespaces(iIOMetadataNode0, "InclusiveNamespaces");
      String string0 = inclusiveNamespaces0.getInclusiveNamespaces();
      assertEquals("!", string0);
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#", inclusiveNamespaces0.getBaseNamespace());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      InclusiveNamespaces inclusiveNamespaces0 = null;
      try {
        inclusiveNamespaces0 = new InclusiveNamespaces(iIOMetadataNode0, "\nOriginal Exception was ");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SortedSet<String> sortedSet0 = InclusiveNamespaces.prefixStr2Set("#default");
      assertEquals(1, sortedSet0.size());
      assertFalse(sortedSet0.contains("#default"));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SortedSet<String> sortedSet0 = InclusiveNamespaces.prefixStr2Set("JD^FcV$SdS");
      assertTrue(sortedSet0.contains("JD^FcV$SdS"));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("InclusiveNamespaces");
      InclusiveNamespaces inclusiveNamespaces0 = new InclusiveNamespaces(iIOMetadataNode0, "JD^FcV$SdS");
      String string0 = inclusiveNamespaces0.getBaseNamespace();
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("InclusiveNamespaces");
      InclusiveNamespaces inclusiveNamespaces0 = new InclusiveNamespaces(iIOMetadataNode0, "JD^FcV$SdS");
      inclusiveNamespaces0.getBaseLocalName();
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#", inclusiveNamespaces0.getBaseNamespace());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SortedSet<String> sortedSet0 = InclusiveNamespaces.prefixStr2Set("");
      assertFalse(sortedSet0.contains(""));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SortedSet<String> sortedSet0 = InclusiveNamespaces.prefixStr2Set((String) null);
      InclusiveNamespaces inclusiveNamespaces0 = null;
      try {
        inclusiveNamespaces0 = new InclusiveNamespaces((Document) null, sortedSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("InclusiveNamespaces");
      InclusiveNamespaces inclusiveNamespaces0 = new InclusiveNamespaces(iIOMetadataNode0, "InclusiveNamespaces");
      inclusiveNamespaces0.getInclusiveNamespaces();
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#", inclusiveNamespaces0.getBaseNamespace());
  }
}
