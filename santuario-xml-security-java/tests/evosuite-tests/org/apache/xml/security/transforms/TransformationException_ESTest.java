/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 16:38:58 GMT 2021
 */

package org.apache.xml.security.transforms;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.xml.security.transforms.TransformationException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformationException_ESTest extends TransformationException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TransformationException transformationException0 = null;
      try {
        transformationException0 = new TransformationException((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.exceptions.XMLSecurityException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TransformationException transformationException0 = new TransformationException("");
      TransformationException transformationException1 = new TransformationException(transformationException0, "");
      assertFalse(transformationException1.equals((Object)transformationException0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TransformationException transformationException0 = new TransformationException("");
      StackTraceElement[] stackTraceElementArray0 = transformationException0.getStackTrace();
      TransformationException transformationException1 = new TransformationException((String) null, stackTraceElementArray0);
      assertFalse(transformationException1.equals((Object)transformationException0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TransformationException transformationException0 = new TransformationException("");
      StackTraceElement[] stackTraceElementArray0 = transformationException0.getStackTrace();
      TransformationException transformationException1 = new TransformationException("", stackTraceElementArray0, transformationException0);
      assertFalse(transformationException1.equals((Object)transformationException0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TransformationException transformationException0 = new TransformationException();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TransformationException transformationException0 = new TransformationException("");
      TransformationException transformationException1 = new TransformationException(transformationException0);
      assertFalse(transformationException1.equals((Object)transformationException0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TransformationException transformationException0 = new TransformationException("");
      MockThrowable mockThrowable0 = new MockThrowable(transformationException0);
      StackTraceElement[] stackTraceElementArray0 = mockThrowable0.getStackTrace();
      TransformationException transformationException1 = new TransformationException(transformationException0, (String) null, stackTraceElementArray0);
      assertFalse(transformationException1.equals((Object)transformationException0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TransformationException transformationException0 = new TransformationException("");
      TransformationException transformationException1 = new TransformationException("org.apache.xml.security.exceptions.XMLSecurityException", transformationException0);
      assertFalse(transformationException1.equals((Object)transformationException0));
  }
}
