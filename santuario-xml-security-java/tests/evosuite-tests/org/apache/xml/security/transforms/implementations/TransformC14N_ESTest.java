/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 16:43:54 GMT 2021
 */

package org.apache.xml.security.transforms.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.c14n.implementations.Canonicalizer20010315;
import org.apache.xml.security.signature.XMLSignatureInput;
import org.apache.xml.security.transforms.implementations.TransformC14N;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformC14N_ESTest extends TransformC14N_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransformC14N transformC14N0 = new TransformC14N();
      Canonicalizer20010315 canonicalizer20010315_0 = transformC14N0.getCanonicalizer();
      assertEquals("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", canonicalizer20010315_0.engineGetURI());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransformC14N transformC14N0 = new TransformC14N();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Dga2");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      XMLSignatureInput xMLSignatureInput1 = transformC14N0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, iIOMetadataNode0, "org.apache.xml.security.transforms.TransformationException", false);
      assertFalse(xMLSignatureInput1.isSecureValidation());
      assertTrue(xMLSignatureInput1.isInitialized());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransformC14N transformC14N0 = new TransformC14N();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput((Node) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLSignatureInput xMLSignatureInput1 = transformC14N0.enginePerformTransform(xMLSignatureInput0, byteArrayOutputStream0, iIOMetadataNode0, "['.]", true);
      assertFalse(xMLSignatureInput1.isPreCalculatedDigest());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransformC14N transformC14N0 = new TransformC14N();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Dga2");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      // Undeclared exception!
      transformC14N0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, iIOMetadataNode0, "http://www.w3.org/2000/xmlns/", true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransformC14N transformC14N0 = new TransformC14N();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput((byte[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(557);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      xMLSignatureInput0.setNodeSet(true);
      // Undeclared exception!
      try { 
        transformC14N0.enginePerformTransform(xMLSignatureInput0, byteArrayOutputStream0, iIOMetadataNode0, "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // getNodeSet() called but no input data present
         //
         verifyException("org.apache.xml.security.signature.XMLSignatureInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransformC14N transformC14N0 = new TransformC14N();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput("http://www.w3.org/XML/1998/namespace");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLSignatureInput xMLSignatureInput1 = transformC14N0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, iIOMetadataNode0, "http://www.w3.org/XML/1998/namespace", true);
      assertFalse(xMLSignatureInput1.isOctetStream());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransformC14N transformC14N0 = new TransformC14N();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Dga2");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      xMLSignatureInput0.setNodeSet(true);
      XMLSignatureInput xMLSignatureInput1 = transformC14N0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, iIOMetadataNode0, "http://www.w3.org/2000/xmlns/", true);
      assertTrue(xMLSignatureInput1.isSecureValidation());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransformC14N transformC14N0 = new TransformC14N();
      byte[] byteArray0 = new byte[1];
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(byteArray0);
      try { 
        transformC14N0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, (Element) null, "xml", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      TransformC14N transformC14N0 = new TransformC14N();
      // Undeclared exception!
      try { 
        transformC14N0.enginePerformTransform((XMLSignatureInput) null, pipedOutputStream0, iIOMetadataNode0, "L[H@,c!7^Q3<", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransformC14N transformC14N0 = new TransformC14N();
      String string0 = transformC14N0.engineGetURI();
      assertEquals("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      TransformC14N transformC14N0 = new TransformC14N();
      // Undeclared exception!
      try { 
        transformC14N0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, iIOMetadataNode0, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.UtfHelpper", e);
      }
  }
}
