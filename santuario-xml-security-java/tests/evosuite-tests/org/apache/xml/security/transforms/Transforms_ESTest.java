/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 16:54:34 GMT 2021
 */

package org.apache.xml.security.transforms;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.signature.XMLSignatureInput;
import org.apache.xml.security.transforms.Transforms;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Transforms_ESTest extends Transforms_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      transforms0.setElement(iIOMetadataNode0, "http://www.w3.org/TR/1999/REC-xpath-19991116");
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(linkedHashSet0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      XMLSignatureInput xMLSignatureInput1 = transforms0.performTransforms(xMLSignatureInput0, (OutputStream) byteArrayOutputStream0);
      assertFalse(xMLSignatureInput1.isSecureValidation());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      transforms0.setElement(iIOMetadataNode0, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      MockFile mockFile0 = new MockFile("F9hSLPlmT>I", "MAw");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      XMLSignatureInput xMLSignatureInput1 = transforms0.performTransforms(xMLSignatureInput0, (OutputStream) mockFileOutputStream0);
      assertSame(xMLSignatureInput0, xMLSignatureInput1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      transforms0.setElement(iIOMetadataNode0, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      XMLSignatureInput xMLSignatureInput1 = transforms0.performTransforms(xMLSignatureInput0);
      assertFalse(xMLSignatureInput1.isSecureValidation());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      transforms0.setElement(iIOMetadataNode0, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput("http://www.w3.org/2001/10/xml-exc-c14n#WithComments");
      XMLSignatureInput xMLSignatureInput1 = transforms0.performTransforms(xMLSignatureInput0);
      assertFalse(xMLSignatureInput1.isInitialized());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      transforms0.setElement(iIOMetadataNode0, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      int int0 = transforms0.getLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput((Set<Node>) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("http://www.w3.org/TR/1999/REC-xslt-19991116");
      // Undeclared exception!
      try { 
        transforms0.performTransforms(xMLSignatureInput0, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      transforms0.setElement(iIOMetadataNode0, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      // Undeclared exception!
      try { 
        transforms0.item((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.xml.security.transforms.Transforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/TR/1999/REC-xpath-19991116");
      transforms0.setElement(iIOMetadataNode0, "[]^Vma");
      // Undeclared exception!
      try { 
        transforms0.addTransform("hE3D", (NodeList) iIOMetadataNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      transforms0.setElement(iIOMetadataNode0, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      // Undeclared exception!
      try { 
        transforms0.addTransform((String) null, (Element) iIOMetadataNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      transforms0.setElement(iIOMetadataNode0, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      // Undeclared exception!
      try { 
        transforms0.addTransform("http://www.w3.org/2000/09/xmldsig#enveloped-signature");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("4oV)&e_bsce]/Is)iM");
      Transforms transforms0 = null;
      try {
        transforms0 = new Transforms(iIOMetadataNode0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      transforms0.setElement(iIOMetadataNode0, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      XMLSignatureInput xMLSignatureInput0 = transforms0.performTransforms((XMLSignatureInput) null, (OutputStream) pipedOutputStream0);
      assertNull(xMLSignatureInput0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      String string0 = transforms0.getBaseLocalName();
      assertEquals("Transforms", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      // Undeclared exception!
      try { 
        transforms0.getLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      transforms0.setElement(iIOMetadataNode0, "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
      transforms0.performTransforms((XMLSignatureInput) null);
      XMLSignatureInput xMLSignatureInput0 = transforms0.performTransforms((XMLSignatureInput) null);
      assertNull(xMLSignatureInput0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      transforms0.setSecureValidation(false);
      assertEquals("Transforms", transforms0.getBaseLocalName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      // Undeclared exception!
      try { 
        transforms0.performTransforms((XMLSignatureInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        transforms0.addTransform("w%62v{{:qGySgAB)", (Element) iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      // Undeclared exception!
      try { 
        transforms0.addTransform("http://www.w3.org/TR/2001/REC-xml-c14n-20010315", (NodeList) iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Transforms transforms0 = null;
      try {
        transforms0 = new Transforms((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      // Undeclared exception!
      try { 
        transforms0.addTransform("http://www.w3.org/2006/12/xml-c14n11#WithComments");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Transforms");
      Transforms transforms0 = null;
      try {
        transforms0 = new Transforms(iIOMetadataNode0, "Transforms");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.transforms.Transforms", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transforms transforms0 = new Transforms();
      // Undeclared exception!
      try { 
        transforms0.item((-3407));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }
}
