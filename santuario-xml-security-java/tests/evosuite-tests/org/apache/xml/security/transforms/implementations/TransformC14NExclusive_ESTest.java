/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 16:41:22 GMT 2021
 */

package org.apache.xml.security.transforms.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.util.LinkedHashSet;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.c14n.implementations.Canonicalizer20010315Excl;
import org.apache.xml.security.signature.XMLSignatureInput;
import org.apache.xml.security.transforms.implementations.TransformC14NExclusive;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformC14NExclusive_ESTest extends TransformC14NExclusive_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TransformC14NExclusive transformC14NExclusive0 = new TransformC14NExclusive();
      Canonicalizer20010315Excl canonicalizer20010315Excl0 = transformC14NExclusive0.getCanonicalizer();
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#", canonicalizer20010315Excl0.engineGetURI());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TransformC14NExclusive transformC14NExclusive0 = new TransformC14NExclusive();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput("ec");
      MockPrintStream mockPrintStream0 = new MockPrintStream("o");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("o");
      XMLSignatureInput xMLSignatureInput1 = transformC14NExclusive0.enginePerformTransform(xMLSignatureInput0, mockPrintStream0, iIOMetadataNode0, "ec", false);
      assertFalse(xMLSignatureInput1.isOctetStream());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TransformC14NExclusive transformC14NExclusive0 = new TransformC14NExclusive();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput("ec");
      MockPrintStream mockPrintStream0 = new MockPrintStream("o");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("o");
      xMLSignatureInput0.setNodeSet(true);
      // Undeclared exception!
      try { 
        transformC14NExclusive0.enginePerformTransform(xMLSignatureInput0, mockPrintStream0, iIOMetadataNode0, "o", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // getNodeSet() called but no input data present
         //
         verifyException("org.apache.xml.security.signature.XMLSignatureInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TransformC14NExclusive transformC14NExclusive0 = new TransformC14NExclusive();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-77), (-2147483645));
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(byteArrayInputStream0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JZtSNqWzy\"y{");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("JZtSNqWzy\"y{");
      // Undeclared exception!
      try { 
        transformC14NExclusive0.enginePerformTransform(xMLSignatureInput0, mockFileOutputStream0, iIOMetadataNode0, (String) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      TransformC14NExclusive transformC14NExclusive0 = new TransformC14NExclusive();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Node node0 = iIOMetadataNode0.appendChild(iIOMetadataNode0);
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(node0);
      // Undeclared exception!
      transformC14NExclusive0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, iIOMetadataNode0, "org.apache.xml.security.transforms.implementations.TransformC14NExclusive", true);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TransformC14NExclusive transformC14NExclusive0 = new TransformC14NExclusive();
      LinkedHashSet<Node> linkedHashSet0 = new LinkedHashSet<Node>(0);
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(linkedHashSet0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("^J]");
      // Undeclared exception!
      try { 
        transformC14NExclusive0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, iIOMetadataNode0, "InclusiveNamespaces", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library. Original message was \"\"
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      TransformC14NExclusive transformC14NExclusive0 = new TransformC14NExclusive();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("http://www.w3.org/XML/1998/namespace");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode1);
      XMLSignatureInput xMLSignatureInput1 = transformC14NExclusive0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, iIOMetadataNode1, "xmlns", true);
      try { 
        transformC14NExclusive0.enginePerformTransform(xMLSignatureInput1, (OutputStream) null, iIOMetadataNode0, "org.apache.xml.security.transforms.implementations.TransformC14NExclusive", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.transforms.implementations.TransformC14NExclusive", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput("");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      TransformC14NExclusive transformC14NExclusive0 = new TransformC14NExclusive();
      XMLSignatureInput xMLSignatureInput1 = transformC14NExclusive0.enginePerformTransform(xMLSignatureInput0, (OutputStream) null, iIOMetadataNode0, "", false);
      assertFalse(xMLSignatureInput1.isOctetStream());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      TransformC14NExclusive transformC14NExclusive0 = new TransformC14NExclusive();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        transformC14NExclusive0.enginePerformTransform((XMLSignatureInput) null, byteArrayOutputStream0, iIOMetadataNode0, "org.apache.xml.security.transforms.TransformSpi", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.c14n.implementations.CanonicalizerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      TransformC14NExclusive transformC14NExclusive0 = new TransformC14NExclusive();
      String string0 = transformC14NExclusive0.engineGetURI();
      assertEquals("http://www.w3.org/2001/10/xml-exc-c14n#", string0);
  }
}
