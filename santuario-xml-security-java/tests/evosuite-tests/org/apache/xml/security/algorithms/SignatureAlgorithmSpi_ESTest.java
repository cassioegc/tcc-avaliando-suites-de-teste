/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 17:10:07 GMT 2021
 */

package org.apache.xml.security.algorithms;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.Key;
import java.security.Signature;
import javax.crypto.spec.SecretKeySpec;
import org.apache.xml.security.algorithms.SignatureAlgorithmSpi;
import org.apache.xml.security.algorithms.implementations.IntegrityHmac;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.security.MockSecureRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SignatureAlgorithmSpi_ESTest extends SignatureAlgorithmSpi_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "WG3#[yrUyQD)YmSX'D");
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom();
      try { 
        SignatureAlgorithmSpi.engineInitSign(secretKeySpec0, mockSecureRandom0, (Signature) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.algorithms.SignatureAlgorithmSpi", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom();
      try { 
        SignatureAlgorithmSpi.engineInitSign((Key) null, mockSecureRandom0, (Signature) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.algorithms.SignatureAlgorithmSpi", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "WG3#[rUQD)YS'D");
      try { 
        SignatureAlgorithmSpi.engineInitVerify(secretKeySpec0, (Signature) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.algorithms.SignatureAlgorithmSpi", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      try { 
        SignatureAlgorithmSpi.engineInitVerify((Key) null, (Signature) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.algorithms.SignatureAlgorithmSpi", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntegrityHmac.IntegrityHmacSHA1 integrityHmac_IntegrityHmacSHA1_0 = null;
      try {
        integrityHmac_IntegrityHmacSHA1_0 = new IntegrityHmac.IntegrityHmacSHA1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
