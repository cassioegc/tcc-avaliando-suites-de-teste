/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 17:07:49 GMT 2021
 */

package org.apache.xml.security.algorithms.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.math.BigInteger;
import java.security.interfaces.ECPublicKey;
import java.security.spec.ECFieldF2m;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.EllipticCurve;
import org.apache.xml.security.algorithms.implementations.ECDSAUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ECDSAUtils_ESTest extends ECDSAUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byte[] byteArray1 = ECDSAUtils.stripLeadingZeros(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      ECFieldF2m eCFieldF2m0 = new ECFieldF2m((byte)57);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      EllipticCurve ellipticCurve0 = new EllipticCurve(eCFieldF2m0, bigInteger0, bigInteger0, byteArray0);
      // Undeclared exception!
      try { 
        ECDSAUtils.decodePoint(byteArray0, ellipticCurve0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only uncompressed format is supported
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = BigInteger.ZERO;
      ECPoint eCPoint0 = new ECPoint(bigInteger0, bigInteger0);
      ECFieldF2m eCFieldF2m0 = new ECFieldF2m((byte)7);
      EllipticCurve ellipticCurve0 = new EllipticCurve(eCFieldF2m0, bigInteger0, bigInteger0, byteArray0);
      byte[] byteArray1 = ECDSAUtils.encodePoint(eCPoint0, ellipticCurve0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = new ECDSAUtils.ECCurveDefinition("P", "P", "J{$u^8~p>q+QD", "P", "P", "", "zzwM?.'", "J{$u^8~p>q+QD", 10);
      BigInteger bigInteger1 = BigInteger.ZERO;
      eCDSAUtils_ECCurveDefinition0.equals(bigInteger0, bigInteger1, bigInteger1, bigInteger1, bigInteger1, bigInteger0, 10);
      assertEquals("J{$u^8~p>q+QD", eCDSAUtils_ECCurveDefinition0.getField());
      assertEquals("J{$u^8~p>q+QD", eCDSAUtils_ECCurveDefinition0.getN());
      assertEquals(10, eCDSAUtils_ECCurveDefinition0.getH());
      assertEquals("P", eCDSAUtils_ECCurveDefinition0.getA());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getX());
      assertEquals("zzwM?.'", eCDSAUtils_ECCurveDefinition0.getY());
      assertEquals("P", eCDSAUtils_ECCurveDefinition0.getB());
      assertEquals("P", eCDSAUtils_ECCurveDefinition0.getOid());
      assertEquals("P", eCDSAUtils_ECCurveDefinition0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ECPoint eCPoint0 = ECPoint.POINT_INFINITY;
      ECFieldF2m eCFieldF2m0 = new ECFieldF2m(6);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[0];
      EllipticCurve ellipticCurve0 = new EllipticCurve(eCFieldF2m0, bigInteger0, bigInteger0, byteArray0);
      EllipticCurve ellipticCurve1 = new EllipticCurve(eCFieldF2m0, bigInteger0, bigInteger1, byteArray0);
      ECParameterSpec eCParameterSpec0 = mock(ECParameterSpec.class, new ViolatedAssumptionAnswer());
      doReturn((-2225)).when(eCParameterSpec0).getCofactor();
      doReturn(ellipticCurve0, ellipticCurve1, ellipticCurve0).when(eCParameterSpec0).getCurve();
      doReturn(eCPoint0, eCPoint0).when(eCParameterSpec0).getGenerator();
      doReturn(bigInteger0).when(eCParameterSpec0).getOrder();
      ECPublicKey eCPublicKey0 = mock(ECPublicKey.class, new ViolatedAssumptionAnswer());
      doReturn(eCParameterSpec0).when(eCPublicKey0).getParams();
      // Undeclared exception!
      try { 
        ECDSAUtils.getOIDFromPublicKey(eCPublicKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils$ECCurveDefinition", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)121;
      byte[] byteArray1 = ECDSAUtils.convertXMLDSIGtoASN1(byteArray0);
      assertArrayEquals(new byte[] {(byte)48, (byte)8, (byte)2, (byte)0, (byte)2, (byte)4, (byte)121, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)80;
      try { 
        ECDSAUtils.convertASN1toXMLDSIG(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid ASN.1 format of ECDSA signature
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ECDSAUtils.stripLeadingZeros(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ECDSAUtils.stripLeadingZeros((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ECFieldF2m eCFieldF2m0 = new ECFieldF2m(255);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      EllipticCurve ellipticCurve0 = new EllipticCurve(eCFieldF2m0, bigInteger0, bigInteger0, byteArray0);
      // Undeclared exception!
      try { 
        ECDSAUtils.encodePoint((ECPoint) null, ellipticCurve0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ECDSAUtils.decodePoint((byte[]) null, (EllipticCurve) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ECDSAUtils.convertXMLDSIGtoASN1((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        ECDSAUtils.convertXMLDSIGtoASN1(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        ECDSAUtils.convertASN1toXMLDSIG((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)96;
      byteArray0[3] = (byte) (-73);
      // Undeclared exception!
      try { 
        ECDSAUtils.convertASN1toXMLDSIG(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = ECDSAUtils.stripLeadingZeros(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = new ECDSAUtils.ECCurveDefinition("", "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012", "\"6WW>seu>djCf;", "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012", "", "nD|Z,!m\"-&]X!B", "", "QN1Z01f*ky`W^uf(", 0);
      String string0 = eCDSAUtils_ECCurveDefinition0.getOid();
      assertEquals(0, eCDSAUtils_ECCurveDefinition0.getH());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getY());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getB());
      assertEquals("QN1Z01f*ky`W^uf(", eCDSAUtils_ECCurveDefinition0.getN());
      assertEquals("188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012", string0);
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getName());
      assertEquals("nD|Z,!m\"-&]X!B", eCDSAUtils_ECCurveDefinition0.getX());
      assertEquals("188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012", eCDSAUtils_ECCurveDefinition0.getA());
      assertEquals("\"6WW>seu>djCf;", eCDSAUtils_ECCurveDefinition0.getField());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)76;
      byte[] byteArray1 = ECDSAUtils.stripLeadingZeros(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ECFieldF2m eCFieldF2m0 = new ECFieldF2m(3344);
      BigInteger bigInteger0 = BigInteger.ZERO;
      EllipticCurve ellipticCurve0 = new EllipticCurve(eCFieldF2m0, bigInteger0, bigInteger0, byteArray0);
      // Undeclared exception!
      try { 
        ECDSAUtils.decodePoint(byteArray0, ellipticCurve0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only uncompressed format is supported
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = ECDSAUtils.getECCurveDefinition("1.2.840.10045.3.1.6");
      assertNotNull(eCDSAUtils_ECCurveDefinition0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      eCDSAUtils_ECCurveDefinition0.equals(bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, bigInteger0, 48);
      assertEquals("1.2.840.10045.3.1.6", eCDSAUtils_ECCurveDefinition0.getOid());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-1);
      byte[] byteArray1 = ECDSAUtils.convertXMLDSIGtoASN1(byteArray0);
      ECDSAUtils.convertASN1toXMLDSIG(byteArray1);
      assertArrayEquals(new byte[] {(byte)48, (byte)6, (byte)2, (byte)0, (byte)2, (byte)2, (byte)0, (byte) (-1)}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-111);
      byte[] byteArray1 = ECDSAUtils.convertXMLDSIGtoASN1(byteArray0);
      byte[] byteArray2 = ECDSAUtils.convertASN1toXMLDSIG(byteArray1);
      assertArrayEquals(new byte[] {(byte)48, (byte)8, (byte)2, (byte)4, (byte)0, (byte) (-111), (byte)0, (byte)0, (byte)2, (byte)0}, byteArray1);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)96;
      try { 
        ECDSAUtils.convertASN1toXMLDSIG(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid ASN.1 format of ECDSA signature
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)43;
      byte[] byteArray1 = ECDSAUtils.convertXMLDSIGtoASN1(byteArray0);
      byte[] byteArray2 = ECDSAUtils.convertASN1toXMLDSIG(byteArray1);
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)43, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)48, (byte)7, (byte)2, (byte)3, (byte)43, (byte)0, (byte)0, (byte)2, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      try { 
        ECDSAUtils.convertASN1toXMLDSIG(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid ASN.1 format of ECDSA signature
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      try { 
        ECDSAUtils.convertASN1toXMLDSIG(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid ASN.1 format of ECDSA signature
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      try { 
        ECDSAUtils.convertASN1toXMLDSIG(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid ASN.1 format of ECDSA signature
         //
         verifyException("org.apache.xml.security.algorithms.implementations.ECDSAUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      ECPoint eCPoint0 = new ECPoint(bigInteger0, bigInteger0);
      ECFieldF2m eCFieldF2m0 = new ECFieldF2m(10);
      EllipticCurve ellipticCurve0 = new EllipticCurve(eCFieldF2m0, bigInteger0, bigInteger0);
      byte[] byteArray0 = ECDSAUtils.encodePoint(eCPoint0, ellipticCurve0);
      ECPoint eCPoint1 = ECDSAUtils.decodePoint(byteArray0, ellipticCurve0);
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte)1, (byte)0, (byte)1}, byteArray0);
      assertTrue(eCPoint1.equals((Object)eCPoint0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = new ECDSAUtils.ECCurveDefinition("2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "", "", "2bg^)=P0gH1", "", 6);
      String string0 = eCDSAUtils_ECCurveDefinition0.getField();
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getOid());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getA());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getX());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getName());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getB());
      assertEquals("2bg^)=P0gH1", string0);
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getN());
      assertEquals(6, eCDSAUtils_ECCurveDefinition0.getH());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getY());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = new ECDSAUtils.ECCurveDefinition("2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "", "", "2bg^)=P0gH1", "", 6);
      String string0 = eCDSAUtils_ECCurveDefinition0.getB();
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getName());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getOid());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getN());
      assertEquals(6, eCDSAUtils_ECCurveDefinition0.getH());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getY());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getField());
      assertEquals("", string0);
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getX());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getA());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = new ECDSAUtils.ECCurveDefinition("2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "", "", "2bg^)=P0gH1", "", 6);
      String string0 = eCDSAUtils_ECCurveDefinition0.getX();
      assertEquals("", string0);
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getOid());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getA());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getField());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getB());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getName());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getN());
      assertEquals(6, eCDSAUtils_ECCurveDefinition0.getH());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getY());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = ECDSAUtils.getECCurveDefinition("01ccda380f1c9e318d90f95d07e5426fe87e45c0e8184698e45962364e34116177dd2259");
      assertNull(eCDSAUtils_ECCurveDefinition0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = new ECDSAUtils.ECCurveDefinition("2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "", "", "2bg^)=P0gH1", "", 6);
      int int0 = eCDSAUtils_ECCurveDefinition0.getH();
      assertEquals(6, int0);
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getN());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getY());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getOid());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getB());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getName());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getField());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getA());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getX());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = new ECDSAUtils.ECCurveDefinition("2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "", "", "2bg^)=P0gH1", "", 6);
      String string0 = eCDSAUtils_ECCurveDefinition0.getA();
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getB());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getName());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getField());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getX());
      assertEquals("2bg^)=P0gH1", string0);
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getN());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getY());
      assertEquals(6, eCDSAUtils_ECCurveDefinition0.getH());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getOid());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = new ECDSAUtils.ECCurveDefinition("2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "", "", "2bg^)=P0gH1", "", 6);
      String string0 = eCDSAUtils_ECCurveDefinition0.getN();
      assertEquals(6, eCDSAUtils_ECCurveDefinition0.getH());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getY());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getName());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getOid());
      assertEquals("", string0);
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getB());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getField());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getX());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getA());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = new ECDSAUtils.ECCurveDefinition("2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "2bg^)=P0gH1", "", "", "2bg^)=P0gH1", "", 6);
      String string0 = eCDSAUtils_ECCurveDefinition0.getY();
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getX());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getB());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getN());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getName());
      assertEquals(6, eCDSAUtils_ECCurveDefinition0.getH());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getOid());
      assertEquals("2bg^)=P0gH1", string0);
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getField());
      assertEquals("2bg^)=P0gH1", eCDSAUtils_ECCurveDefinition0.getA());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ECDSAUtils.ECCurveDefinition eCDSAUtils_ECCurveDefinition0 = new ECDSAUtils.ECCurveDefinition("", "", "", "", "G\"+2f|GbIl\"wl j 0S", "G\"+2f|GbIl\"wl j 0S", "", "G\"+2f|GbIl\"wl j 0S", (-6490));
      String string0 = eCDSAUtils_ECCurveDefinition0.getName();
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getY());
      assertEquals("", string0);
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getOid());
      assertEquals("G\"+2f|GbIl\"wl j 0S", eCDSAUtils_ECCurveDefinition0.getN());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getField());
      assertEquals("G\"+2f|GbIl\"wl j 0S", eCDSAUtils_ECCurveDefinition0.getB());
      assertEquals("", eCDSAUtils_ECCurveDefinition0.getA());
      assertEquals("G\"+2f|GbIl\"wl j 0S", eCDSAUtils_ECCurveDefinition0.getX());
      assertEquals((-6490), eCDSAUtils_ECCurveDefinition0.getH());
  }
}
