/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 17:01:48 GMT 2021
 */

package org.apache.xml.security.algorithms;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.Provider;
import java.security.spec.MGF1ParameterSpec;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.algorithms.SignatureAlgorithm;
import org.apache.xml.security.algorithms.implementations.SignatureBaseRSA;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.security.MockSecureRandom;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SignatureAlgorithm_ESTest extends SignatureAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          // Undeclared exception!
          try { 
            SignatureAlgorithm.register("u#Xo{U<is?r/=[", "");
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.security.SecurityPermission\" \"org.apache.xml.security.register\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.apache.xml.security.utils.JavaUtils.checkRegisterPermission(JavaUtils.java:218)
             // org.apache.xml.security.algorithms.SignatureAlgorithm.register(SignatureAlgorithm.java:362)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Class<SignatureBaseRSA.SignatureRSASHA3_224MGF1> class0 = SignatureBaseRSA.SignatureRSASHA3_224MGF1.class;
          // Undeclared exception!
          try { 
            SignatureAlgorithm.register("http://www.w3.org/2009/xmldsig11#dsa-sha56", class0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.security.SecurityPermission\" \"org.apache.xml.security.register\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.apache.xml.security.utils.JavaUtils.checkRegisterPermission(JavaUtils.java:218)
             // org.apache.xml.security.algorithms.SignatureAlgorithm.register(SignatureAlgorithm.java:398)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom();
      Provider provider0 = mockSecureRandom0.getProvider();
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm(iIOMetadataNode0, "", true, provider0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm(iIOMetadataNode0, "", false);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("SignatureMethod");
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm(iIOMetadataNode0, ":)+ 3*B];o");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.algorithms.SignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom(0L);
      Provider provider0 = mockSecureRandom0.getProvider();
      MGF1ParameterSpec mGF1ParameterSpec0 = MGF1ParameterSpec.SHA384;
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm((Document) null, "", provider0, mGF1ParameterSpec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("SignatureMethod");
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm(iIOMetadataNode0, "SignatureMethod", false, (Provider) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.algorithms.SignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("SignatureMethod");
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm(iIOMetadataNode0, "SignatureMethod", true, (Provider) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.algorithms.SignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("SignatureMethod");
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom();
      Provider provider0 = mockSecureRandom0.getProvider();
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm(iIOMetadataNode0, "SignatureMethod", provider0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.algorithms.SignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("SignatureMethod");
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm(iIOMetadataNode0, "P4+*?]6$yA1d", false);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.algorithms.SignatureAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SignatureAlgorithm.registerDefaultAlgorithms();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm((Document) null, "", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm(iIOMetadataNode0, "elpg5+S}");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom((-1L));
      Provider provider0 = mockSecureRandom0.getProvider();
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm((Document) null, "signature.signatureAlgorithm", provider0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm((Document) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SignatureAlgorithm signatureAlgorithm0 = null;
      try {
        signatureAlgorithm0 = new SignatureAlgorithm((Document) null, "RfPC->pHGKlbA@fr", (-20), (Provider) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }
}
