/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 22:01:45 GMT 2021
 */

package org.apache.xml.security.keys.content.x509;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.cert.X509Certificate;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.keys.content.x509.XMLX509Certificate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLX509Certificate_ESTest extends XMLX509Certificate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Certificate");
      XMLX509Certificate xMLX509Certificate0 = new XMLX509Certificate(iIOMetadataNode0, "X509Certificate");
      XMLX509Certificate xMLX509Certificate1 = new XMLX509Certificate(iIOMetadataNode0, "X509Certificate");
      boolean boolean0 = xMLX509Certificate0.equals(xMLX509Certificate1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLX509Certificate xMLX509Certificate0 = null;
      try {
        xMLX509Certificate0 = new XMLX509Certificate(iIOMetadataNode0, "IG");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Certificate");
      XMLX509Certificate xMLX509Certificate0 = new XMLX509Certificate(iIOMetadataNode0, "X509Certificate");
      try { 
        xMLX509Certificate0.getX509Certificate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not parse certificate: java.io.IOException: Empty input
         //
         verifyException("org.apache.xml.security.keys.content.x509.XMLX509Certificate", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Certificate");
      XMLX509Certificate xMLX509Certificate0 = new XMLX509Certificate(iIOMetadataNode0, "X509Certificate");
      String string0 = xMLX509Certificate0.getBaseLocalName();
      assertEquals("X509Certificate", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Certificate");
      XMLX509Certificate xMLX509Certificate0 = new XMLX509Certificate(iIOMetadataNode0, "X509Certificate");
      byte[] byteArray0 = xMLX509Certificate0.getCertificateBytes();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Certificate");
      XMLX509Certificate xMLX509Certificate0 = new XMLX509Certificate(iIOMetadataNode0, "X509Certificate");
      xMLX509Certificate0.hashCode();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Certificate");
      XMLX509Certificate xMLX509Certificate0 = new XMLX509Certificate(iIOMetadataNode0, "X509Certificate");
      boolean boolean0 = xMLX509Certificate0.equals("X509Certificate");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Certificate");
      XMLX509Certificate xMLX509Certificate0 = new XMLX509Certificate(iIOMetadataNode0, "X509Certificate");
      try { 
        xMLX509Certificate0.getPublicKey();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not parse certificate: java.io.IOException: Empty input
         //
         verifyException("org.apache.xml.security.keys.content.x509.XMLX509Certificate", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      XMLX509Certificate xMLX509Certificate0 = null;
      try {
        xMLX509Certificate0 = new XMLX509Certificate((Document) null, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      XMLX509Certificate xMLX509Certificate0 = null;
      try {
        xMLX509Certificate0 = new XMLX509Certificate((Document) null, x509Certificate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }
}
