/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 22:08:37 GMT 2021
 */

package org.apache.xml.security.keys.content;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.security.cert.X509Certificate;
import javax.imageio.metadata.IIOMetadataNode;
import javax.security.auth.x500.X500Principal;
import org.apache.xml.security.keys.content.X509Data;
import org.apache.xml.security.keys.content.x509.XMLX509Certificate;
import org.apache.xml.security.keys.content.x509.XMLX509IssuerSerial;
import org.apache.xml.security.keys.content.x509.XMLX509SKI;
import org.apache.xml.security.keys.content.x509.XMLX509SubjectName;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class X509Data_ESTest extends X509Data_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      int int0 = x509Data0.lengthIssuerSerial();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      int int0 = x509Data0.lengthSubjectName();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      String string0 = x509Data0.getBaseLocalName();
      assertEquals("X509Data", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      boolean boolean0 = x509Data0.containsCRL();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      boolean boolean0 = x509Data0.containsSKI();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      XMLX509Certificate xMLX509Certificate0 = x509Data0.itemCertificate(0);
      assertNull(xMLX509Certificate0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      XMLX509SubjectName xMLX509SubjectName0 = x509Data0.itemSubjectName(351);
      assertNull(xMLX509SubjectName0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      XMLX509SKI xMLX509SKI0 = x509Data0.itemSKI(5);
      assertNull(xMLX509SKI0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      XMLX509IssuerSerial xMLX509IssuerSerial0 = x509Data0.itemIssuerSerial(351);
      assertNull(xMLX509IssuerSerial0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      // Undeclared exception!
      try { 
        x509Data0.lengthUnknownElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      X509Data x509Data0 = null;
      try {
        x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.keys.content.X509Data", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      int int0 = x509Data0.lengthCRL();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        x509Data0.addCertificate(x509Certificate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        x509Data0.addDigest(byteArray0, "X509Data");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.Signature11ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        x509Data0.addSKI(x509Certificate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        x509Data0.addIssuerSerial("X509Data", bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      int int0 = x509Data0.lengthSKI();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      Element element0 = x509Data0.itemUnknownElement(351);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        x509Data0.addSKI(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      // Undeclared exception!
      try { 
        x509Data0.addSubjectName("X509Data");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      // Undeclared exception!
      try { 
        x509Data0.add((XMLX509SKI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      X509Data x509Data0 = null;
      try {
        x509Data0 = new X509Data((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      // Undeclared exception!
      try { 
        x509Data0.add((XMLX509IssuerSerial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      boolean boolean0 = x509Data0.containsIssuerSerial();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      int int0 = x509Data0.lengthDigest();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      // Undeclared exception!
      try { 
        x509Data0.addUnknownElement(iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      int int0 = x509Data0.lengthCertificate();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        x509Data0.addCertificate(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((X500Principal) null).when(x509Certificate0).getSubjectX500Principal();
      // Undeclared exception!
      try { 
        x509Data0.addSubjectName(x509Certificate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.keys.content.x509.XMLX509SubjectName", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      boolean boolean0 = x509Data0.containsSubjectName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509Data");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      X509Data x509Data0 = new X509Data(iIOMetadataNode0, "X509Data");
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        x509Data0.addCRL(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }
}
