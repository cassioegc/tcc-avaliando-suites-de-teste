/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 21:57:07 GMT 2021
 */

package org.apache.xml.security.keys.content.x509;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.cert.X509Certificate;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.keys.content.x509.XMLX509SKI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLX509SKI_ESTest extends XMLX509SKI_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509SKI");
      XMLX509SKI xMLX509SKI0 = new XMLX509SKI(iIOMetadataNode0, "X509SKI");
      XMLX509SKI xMLX509SKI1 = new XMLX509SKI(iIOMetadataNode0, (String) null);
      boolean boolean0 = xMLX509SKI0.equals(xMLX509SKI1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(x509Certificate0).getVersion();
      doReturn((byte[]) null).when(x509Certificate0).getExtensionValue(anyString());
      try { 
        XMLX509SKI.getSKIBytesFromCert(x509Certificate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.keys.content.x509.XMLX509SKI", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn(2697).when(x509Certificate0).getVersion();
      doReturn(byteArray0).when(x509Certificate0).getExtensionValue(anyString());
      byte[] byteArray1 = XMLX509SKI.getSKIBytesFromCert(x509Certificate0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLX509SKI.getSKIBytesFromCert((X509Certificate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.keys.content.x509.XMLX509SKI", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn(533).when(x509Certificate0).getVersion();
      doReturn(byteArray0).when(x509Certificate0).getExtensionValue(anyString());
      // Undeclared exception!
      try { 
        XMLX509SKI.getSKIBytesFromCert(x509Certificate0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.keys.content.x509.XMLX509SKI", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("\"(f");
      XMLX509SKI xMLX509SKI0 = null;
      try {
        xMLX509SKI0 = new XMLX509SKI(iIOMetadataNode0, "\"(f");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509SKI");
      XMLX509SKI xMLX509SKI0 = new XMLX509SKI(iIOMetadataNode0, "X509SKI");
      String string0 = xMLX509SKI0.getBaseLocalName();
      assertEquals("X509SKI", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509SKI");
      XMLX509SKI xMLX509SKI0 = new XMLX509SKI(iIOMetadataNode0, "X509SKI");
      byte[] byteArray0 = xMLX509SKI0.getSKIBytes();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509SKI");
      XMLX509SKI xMLX509SKI0 = new XMLX509SKI(iIOMetadataNode0, "X509SKI");
      boolean boolean0 = xMLX509SKI0.equals("X509SKI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn((-1519), (-1519)).when(x509Certificate0).getVersion();
      try { 
        XMLX509SKI.getSKIBytesFromCert(x509Certificate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.keys.content.x509.XMLX509SKI", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      doReturn(187).when(x509Certificate0).getVersion();
      doReturn(byteArray0).when(x509Certificate0).getExtensionValue(anyString());
      byte[] byteArray1 = XMLX509SKI.getSKIBytesFromCert(x509Certificate0);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      XMLX509SKI xMLX509SKI0 = null;
      try {
        xMLX509SKI0 = new XMLX509SKI((Document) null, x509Certificate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      XMLX509SKI xMLX509SKI0 = null;
      try {
        xMLX509SKI0 = new XMLX509SKI((Document) null, byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("X509SKI");
      XMLX509SKI xMLX509SKI0 = new XMLX509SKI(iIOMetadataNode0, "X509SKI");
      xMLX509SKI0.hashCode();
  }
}
