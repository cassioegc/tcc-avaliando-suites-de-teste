/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 22:12:18 GMT 2021
 */

package org.apache.xml.security.keys;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.X509Certificate;
import javax.crypto.SecretKey;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.keys.KeyInfo;
import org.apache.xml.security.keys.content.KeyInfoReference;
import org.apache.xml.security.keys.content.MgmtData;
import org.apache.xml.security.keys.content.PGPData;
import org.apache.xml.security.keys.content.RetrievalMethod;
import org.apache.xml.security.keys.keyresolver.implementations.X509DigestResolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyInfo_ESTest extends KeyInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      int int0 = keyInfo0.lengthInternalKeyResolver();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      X509Certificate x509Certificate0 = keyInfo0.getX509CertificateFromStaticResolvers();
      assertNull(x509Certificate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      SecretKey secretKey0 = keyInfo0.getSecretKeyFromStaticResolvers();
      assertNull(secretKey0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      SecretKey secretKey0 = keyInfo0.getSecretKeyFromInternalResolvers();
      assertNull(secretKey0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      PublicKey publicKey0 = keyInfo0.getPublicKeyFromStaticResolvers();
      assertNull(publicKey0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      PublicKey publicKey0 = keyInfo0.getPublicKeyFromInternalResolvers();
      assertNull(publicKey0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      PrivateKey privateKey0 = keyInfo0.getPrivateKeyFromStaticResolvers();
      assertNull(privateKey0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      PrivateKey privateKey0 = keyInfo0.getPrivateKeyFromInternalResolvers();
      assertNull(privateKey0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      // Undeclared exception!
      try { 
        keyInfo0.itemInternalKeyResolver(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      KeyInfo keyInfo0 = null;
      try {
        keyInfo0 = new KeyInfo(iIOMetadataNode0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeyInfo keyInfo0 = null;
      try {
        keyInfo0 = new KeyInfo((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      int int0 = keyInfo0.lengthDEREncodedKeyValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      int int0 = keyInfo0.lengthRetrievalMethod();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      int int0 = keyInfo0.lengthSPKIData();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      int int0 = keyInfo0.lengthKeyValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      int int0 = keyInfo0.lengthMgmtData();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      int int0 = keyInfo0.lengthPGPData();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      PrivateKey privateKey0 = keyInfo0.getPrivateKey();
      assertNull(privateKey0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      SecretKey secretKey0 = keyInfo0.getSecretKey();
      assertNull(secretKey0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      X509DigestResolver x509DigestResolver0 = new X509DigestResolver();
      keyInfo0.registerInternalKeyResolver(x509DigestResolver0);
      X509Certificate x509Certificate0 = keyInfo0.getX509Certificate();
      assertNull(x509Certificate0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      PublicKey publicKey0 = keyInfo0.getPublicKey();
      assertNull(publicKey0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      boolean boolean0 = keyInfo0.containsKeyInfoReference();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      boolean boolean0 = keyInfo0.containsX509Data();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      boolean boolean0 = keyInfo0.containsUnknownElement();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      boolean boolean0 = keyInfo0.containsKeyName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      boolean boolean0 = keyInfo0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      KeyInfoReference keyInfoReference0 = keyInfo0.itemKeyInfoReference(0);
      assertNull(keyInfoReference0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      RetrievalMethod retrievalMethod0 = keyInfo0.itemRetrievalMethod(0);
      assertNull(retrievalMethod0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      PGPData pGPData0 = keyInfo0.itemPGPData(0);
      assertNull(pGPData0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      MgmtData mgmtData0 = keyInfo0.itemMgmtData(0);
      assertNull(mgmtData0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      int int0 = keyInfo0.lengthUnknownElement();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      int int0 = keyInfo0.lengthX509Data();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      // Undeclared exception!
      try { 
        keyInfo0.setId("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      keyInfo0.setId((String) null);
      assertEquals("http://www.w3.org/2000/09/xmldsig#", keyInfo0.getBaseNamespace());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      boolean boolean0 = keyInfo0.containsRetrievalMethod();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      // Undeclared exception!
      try { 
        keyInfo0.addKeyValue((Element) iIOMetadataNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      boolean boolean0 = keyInfo0.containsDEREncodedKeyValue();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      // Undeclared exception!
      try { 
        keyInfo0.addMgmtData("KeyInfo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      // Undeclared exception!
      try { 
        keyInfo0.add((MgmtData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      boolean boolean0 = keyInfo0.containsPGPData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      X509DigestResolver x509DigestResolver0 = new X509DigestResolver();
      keyInfo0.registerInternalKeyResolver(x509DigestResolver0);
      PublicKey publicKey0 = keyInfo0.getPublicKey();
      assertNull(publicKey0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      // Undeclared exception!
      try { 
        keyInfo0.add((PGPData) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      boolean boolean0 = keyInfo0.containsMgmtData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      X509Certificate x509Certificate0 = keyInfo0.getX509CertificateFromInternalResolvers();
      assertNull(x509Certificate0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      boolean boolean0 = keyInfo0.containsSPKIData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      boolean boolean0 = keyInfo0.containsKeyValue();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      int int0 = keyInfo0.lengthKeyInfoReference();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "");
      // Undeclared exception!
      try { 
        keyInfo0.addKeyValue((PublicKey) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      int int0 = keyInfo0.lengthKeyName();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      // Undeclared exception!
      try { 
        keyInfo0.add((PublicKey) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.SignatureElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "KeyInfo");
      keyInfo0.setSecureValidation(false);
      assertEquals("http://www.w3.org/2000/09/xmldsig#", keyInfo0.getBaseNamespace());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("KeyInfo");
      KeyInfo keyInfo0 = new KeyInfo(iIOMetadataNode0, "{4ZV!wQ1q<#,]P]$CA");
      // Undeclared exception!
      try { 
        keyInfo0.itemInternalKeyResolver((-2596));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
