/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 21:37:00 GMT 2021
 */

package org.apache.xml.security.keys.keyresolver.implementations;

import org.junit.Test;
import static org.junit.Assert.*;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.X509Certificate;
import javax.crypto.SecretKey;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.keys.keyresolver.implementations.RetrievalMethodResolver;
import org.apache.xml.security.keys.storage.StorageResolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RetrievalMethodResolver_ESTest extends RetrievalMethodResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RetrievalMethodResolver retrievalMethodResolver0 = new RetrievalMethodResolver();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("RetrievalMethod");
      X509Certificate x509Certificate0 = retrievalMethodResolver0.engineResolveX509Certificate(iIOMetadataNode0, "", (StorageResolver) null, false);
      assertNull(x509Certificate0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RetrievalMethodResolver retrievalMethodResolver0 = new RetrievalMethodResolver();
      StorageResolver storageResolver0 = new StorageResolver((X509Certificate) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("RetrievalMethod");
      PublicKey publicKey0 = retrievalMethodResolver0.engineResolvePublicKey(iIOMetadataNode0, "RetrievalMethod", storageResolver0, false);
      assertNull(publicKey0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RetrievalMethodResolver retrievalMethodResolver0 = new RetrievalMethodResolver();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      StorageResolver storageResolver0 = new StorageResolver((X509Certificate) null);
      boolean boolean0 = retrievalMethodResolver0.engineCanResolve(iIOMetadataNode0, "", storageResolver0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RetrievalMethodResolver retrievalMethodResolver0 = new RetrievalMethodResolver();
      SecretKey secretKey0 = retrievalMethodResolver0.engineResolveSecretKey((Element) null, "Now we haD^ a {", (StorageResolver) null, false);
      assertNull(secretKey0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RetrievalMethodResolver retrievalMethodResolver0 = new RetrievalMethodResolver();
      StorageResolver storageResolver0 = new StorageResolver((X509Certificate) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      PrivateKey privateKey0 = retrievalMethodResolver0.engineResolvePrivateKey(iIOMetadataNode0, "Now we haD^ a {", storageResolver0, false);
      assertNull(privateKey0);
  }
}
