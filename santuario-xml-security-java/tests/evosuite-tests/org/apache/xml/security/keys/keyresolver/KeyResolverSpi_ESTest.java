/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 21:48:25 GMT 2021
 */

package org.apache.xml.security.keys.keyresolver;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.cert.X509Certificate;
import javax.crypto.SecretKey;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.keys.keyresolver.KeyResolverSpi;
import org.apache.xml.security.keys.keyresolver.implementations.DEREncodedKeyValueResolver;
import org.apache.xml.security.keys.keyresolver.implementations.X509CertificateResolver;
import org.apache.xml.security.keys.storage.StorageResolver;
import org.apache.xml.security.keys.storage.implementations.SingleCertificateResolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyResolverSpi_ESTest extends KeyResolverSpi_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        KeyResolverSpi.getDocFromBytes((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      X509CertificateResolver x509CertificateResolver0 = new X509CertificateResolver();
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      SingleCertificateResolver singleCertificateResolver0 = new SingleCertificateResolver(x509Certificate0);
      StorageResolver storageResolver0 = new StorageResolver(singleCertificateResolver0);
      // Undeclared exception!
      try { 
        x509CertificateResolver0.engineLookupResolveX509Certificate((Element) null, "", storageResolver0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.keys.keyresolver.implementations.X509CertificateResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      X509CertificateResolver x509CertificateResolver0 = new X509CertificateResolver();
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      SingleCertificateResolver singleCertificateResolver0 = new SingleCertificateResolver(x509Certificate0);
      StorageResolver storageResolver0 = new StorageResolver(singleCertificateResolver0);
      // Undeclared exception!
      try { 
        x509CertificateResolver0.engineLookupAndResolveSecretKey((Element) null, "", storageResolver0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.keys.keyresolver.implementations.X509CertificateResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      X509CertificateResolver x509CertificateResolver0 = new X509CertificateResolver();
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      SingleCertificateResolver singleCertificateResolver0 = new SingleCertificateResolver(x509Certificate0);
      StorageResolver storageResolver0 = new StorageResolver(singleCertificateResolver0);
      // Undeclared exception!
      try { 
        x509CertificateResolver0.engineLookupAndResolvePrivateKey((Element) null, "M", storageResolver0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.keys.keyresolver.implementations.X509CertificateResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      try { 
        KeyResolverSpi.getDocFromBytes(byteArray0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.keys.keyresolver.KeyResolverSpi", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      X509CertificateResolver x509CertificateResolver0 = new X509CertificateResolver();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      SingleCertificateResolver singleCertificateResolver0 = new SingleCertificateResolver(x509Certificate0);
      StorageResolver storageResolver0 = new StorageResolver(singleCertificateResolver0);
      PrivateKey privateKey0 = x509CertificateResolver0.engineLookupAndResolvePrivateKey(iIOMetadataNode0, "", storageResolver0, true);
      assertNull(privateKey0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      X509CertificateResolver x509CertificateResolver0 = new X509CertificateResolver();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      SingleCertificateResolver singleCertificateResolver0 = new SingleCertificateResolver(x509Certificate0);
      StorageResolver storageResolver0 = new StorageResolver(singleCertificateResolver0);
      SecretKey secretKey0 = x509CertificateResolver0.engineLookupAndResolveSecretKey(iIOMetadataNode0, "M", storageResolver0, true);
      assertNull(secretKey0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      X509CertificateResolver x509CertificateResolver0 = new X509CertificateResolver();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      SingleCertificateResolver singleCertificateResolver0 = new SingleCertificateResolver(x509Certificate0);
      StorageResolver storageResolver0 = new StorageResolver(singleCertificateResolver0);
      X509Certificate x509Certificate1 = x509CertificateResolver0.engineLookupResolveX509Certificate(iIOMetadataNode0, "M", storageResolver0, true);
      assertNull(x509Certificate1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      X509Certificate x509Certificate0 = mock(X509Certificate.class, new ViolatedAssumptionAnswer());
      SingleCertificateResolver singleCertificateResolver0 = new SingleCertificateResolver(x509Certificate0);
      StorageResolver storageResolver0 = new StorageResolver(singleCertificateResolver0);
      DEREncodedKeyValueResolver dEREncodedKeyValueResolver0 = new DEREncodedKeyValueResolver();
      PublicKey publicKey0 = dEREncodedKeyValueResolver0.engineLookupAndResolvePublicKey(iIOMetadataNode0, "M", storageResolver0, true);
      assertNull(publicKey0);
  }
}
