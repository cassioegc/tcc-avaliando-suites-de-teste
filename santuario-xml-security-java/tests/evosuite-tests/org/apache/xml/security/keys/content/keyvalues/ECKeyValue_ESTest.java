/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 21:53:41 GMT 2021
 */

package org.apache.xml.security.keys.content.keyvalues;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.security.Key;
import java.security.spec.ECFieldF2m;
import java.security.spec.ECPoint;
import java.security.spec.EllipticCurve;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.xml.security.keys.content.keyvalues.ECKeyValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ECKeyValue_ESTest extends ECKeyValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ECKeyValue");
      Node node0 = iIOMetadataNode0.cloneNode(false);
      iIOMetadataNode0.appendChild(node0);
      ECKeyValue eCKeyValue0 = new ECKeyValue(iIOMetadataNode0, "\"8_>A");
      try { 
        eCKeyValue0.getPublicKey();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid ECKeyValue
         //
         verifyException("org.apache.xml.security.keys.content.keyvalues.ECKeyValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      ECKeyValue eCKeyValue0 = null;
      try {
        eCKeyValue0 = new ECKeyValue(iIOMetadataNode0, "");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.
         //
         verifyException("org.apache.xml.security.utils.ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ECKeyValue eCKeyValue0 = null;
      try {
        eCKeyValue0 = new ECKeyValue((Document) null, (Key) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Document is null
         //
         verifyException("org.apache.xml.security.utils.Signature11ElementProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ECFieldF2m eCFieldF2m0 = new ECFieldF2m(1827);
      MockRandom mockRandom0 = new MockRandom((-1L));
      BigInteger bigInteger0 = BigInteger.probablePrime(1827, mockRandom0);
      EllipticCurve ellipticCurve0 = new EllipticCurve(eCFieldF2m0, bigInteger0, bigInteger0);
      ECPoint eCPoint0 = new ECPoint(bigInteger0, bigInteger0);
      ECKeyValue.Curve eCKeyValue_Curve0 = new ECKeyValue.Curve("", " element", ellipticCurve0, eCPoint0, bigInteger0, 1827);
      assertEquals(1827, eCKeyValue_Curve0.getCofactor());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ECKeyValue");
      ECKeyValue eCKeyValue0 = new ECKeyValue(iIOMetadataNode0, "\"8_>A");
      String string0 = eCKeyValue0.getBaseLocalName();
      assertEquals("ECKeyValue", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ECKeyValue");
      ECKeyValue eCKeyValue0 = new ECKeyValue(iIOMetadataNode0, "\"8_>A");
      try { 
        eCKeyValue0.getPublicKey();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // KeyValue must contain at least one type
         //
         verifyException("org.apache.xml.security.keys.content.keyvalues.ECKeyValue", e);
      }
  }
}
