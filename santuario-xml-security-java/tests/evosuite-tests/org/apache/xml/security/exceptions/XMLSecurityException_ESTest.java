/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 21:24:06 GMT 2021
 */

package org.apache.xml.security.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.xml.security.exceptions.XMLSecurityException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLSecurityException_ESTest extends XMLSecurityException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) "Missing message string";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "Missing message string";
      objectArray0[5] = (Object) "Missing message string";
      objectArray0[6] = (Object) "Missing message string";
      MockException mockException0 = new MockException();
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException(mockException0);
      String string0 = xMLSecurityException0.getMsgID();
      assertEquals("Missing message ID", string0);
      assertNotNull(string0);
      
      String string1 = xMLSecurityException0.toString();
      assertEquals("org.apache.xml.security.exceptions.XMLSecurityException\nOriginal Exception was org.evosuite.runtime.mock.java.lang.MockThrowable", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLSecurityException xMLSecurityException0 = null;
      try {
        xMLSecurityException0 = new XMLSecurityException((Exception) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.exceptions.XMLSecurityException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException("");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "je6@2x!)CIcc##";
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "T}", "T}", (-1971));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "org.apache.xml.security.exceptions.XMLSecurityException", "", 2945);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("36*^D;E&??D-W`|\"~B", "je6@2x!)CIcc##", "m@pA-b|(?{J]6J {TK!", 2945);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("org.apache.xml.security.exceptions.XMLSecurityException", "m@pA-b|(?{J]6J {TK!", "m@pA-b|(?{J]6J {TK!", 787);
      stackTraceElementArray0[3] = stackTraceElement3;
      xMLSecurityException0.setStackTrace(stackTraceElementArray0);
      objectArray0[1] = (Object) "je6@2x!)CIcc##";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) xMLSecurityException0;
      xMLSecurityException0.getLocalizedMessage();
      XMLSecurityException xMLSecurityException1 = new XMLSecurityException("je6@2x!)CIcc##", objectArray0, xMLSecurityException0);
      xMLSecurityException1.getCause();
      xMLSecurityException1.printStackTrace();
      xMLSecurityException0.initCause(xMLSecurityException1);
      xMLSecurityException0.getCause();
      xMLSecurityException0.msgID = "";
      // Undeclared exception!
      try { 
        xMLSecurityException0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException();
      XMLSecurityException xMLSecurityException1 = new XMLSecurityException(xMLSecurityException0, "");
      assertFalse(xMLSecurityException1.equals((Object)xMLSecurityException0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException("");
      String string0 = xMLSecurityException0.getMsgID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException();
      xMLSecurityException0.getMessage();
      xMLSecurityException0.getOriginalException();
      xMLSecurityException0.printStackTrace();
      xMLSecurityException0.printStackTrace();
      String string0 = xMLSecurityException0.toString();
      assertEquals("org.apache.xml.security.exceptions.XMLSecurityException: Missing message string", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException(": ");
      XMLSecurityException xMLSecurityException1 = new XMLSecurityException("_c{.F; JqpNM/_|m%%", (Object[]) null, xMLSecurityException0);
      XMLSecurityException xMLSecurityException2 = new XMLSecurityException("", (Object[]) null, xMLSecurityException1);
      assertFalse(xMLSecurityException2.equals((Object)xMLSecurityException0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockException mockException0 = new MockException("");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException(mockException0, "", objectArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockException mockException0 = new MockException();
      mockException0.getSuppressed();
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException("M;]=I!wgkaQq7T1d", mockException0);
      Exception exception0 = xMLSecurityException0.getOriginalException();
      assertSame(mockException0, exception0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException();
      Exception exception0 = xMLSecurityException0.getOriginalException();
      assertNull(exception0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException();
      XMLSecurityException xMLSecurityException1 = new XMLSecurityException(xMLSecurityException0);
      String string0 = xMLSecurityException1.toString();
      assertEquals("org.apache.xml.security.exceptions.XMLSecurityException: Missing message string\nOriginal Exception was org.apache.xml.security.exceptions.XMLSecurityException: Missing message string", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException();
      String string0 = xMLSecurityException0.getMsgID();
      assertNotNull(string0);
      assertEquals("Missing message ID", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException("", objectArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException();
      xMLSecurityException0.printStackTrace();
      assertEquals("Missing message ID", xMLSecurityException0.getMsgID());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockException mockException0 = new MockException();
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException(mockException0);
      String string0 = xMLSecurityException0.getMsgID();
      assertNotNull(string0);
      assertEquals("Missing message ID", string0);
      
      String string1 = xMLSecurityException0.toString();
      assertNotNull(string1);
      assertEquals("org.apache.xml.security.exceptions.XMLSecurityException\nOriginal Exception was org.evosuite.runtime.mock.java.lang.MockThrowable", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException("Now I try to bind prefixes:");
      XMLSecurityException xMLSecurityException1 = new XMLSecurityException("Now I try to bind prefixes:", xMLSecurityException0);
      XMLSecurityException xMLSecurityException2 = new XMLSecurityException("Now I try to bind prefixes:", objectArray0, xMLSecurityException1);
      xMLSecurityException1.printStackTrace();
      xMLSecurityException1.printStackTrace();
      Exception exception0 = xMLSecurityException1.getOriginalException();
      assertSame(exception0, xMLSecurityException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      XMLSecurityException xMLSecurityException0 = new XMLSecurityException("Missing message sErng", objectArray0);
      String string0 = xMLSecurityException0.toString();
      assertEquals("org.apache.xml.security.exceptions.XMLSecurityException: You must initialize the xml-security library correctly before you use it. Call the static method \"org.apache.xml.security.Init.init();\" to do that before you use any functionality from that library.", string0);
      
      xMLSecurityException0.getOriginalException();
      String string1 = xMLSecurityException0.getMsgID();
      assertEquals("Missing message sErng", string1);
  }
}
