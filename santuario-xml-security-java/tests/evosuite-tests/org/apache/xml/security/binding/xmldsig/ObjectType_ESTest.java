/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 17:33:20 GMT 2021
 */

package org.apache.xml.security.binding.xmldsig;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.xml.security.binding.xmldsig.ObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectType_ESTest extends ObjectType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.mimeType = "y)f_.5Q?`Lz";
      String string0 = objectType0.getMimeType();
      assertEquals("y)f_.5Q?`Lz", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.setMimeType("");
      String string0 = objectType0.getMimeType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.setId("`^Xd${YEaI@5rnU'i");
      String string0 = objectType0.getId();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.setId("");
      String string0 = objectType0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.setEncoding("org.apache.xml.security.binding.xmldsig.ObjectType");
      String string0 = objectType0.getEncoding();
      assertEquals("org.apache.xml.security.binding.xmldsig.ObjectType", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      objectType0.encoding = "";
      String string0 = objectType0.getEncoding();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      List<Object> list0 = objectType0.getContent();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(list0);
      objectType0.content = (List<Object>) linkedList0;
      List<Object> list1 = objectType0.getContent();
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      String string0 = objectType0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      String string0 = objectType0.getEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ObjectType objectType0 = new ObjectType();
      String string0 = objectType0.getMimeType();
      assertNull(string0);
  }
}
