/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 17:46:53 GMT 2021
 */

package org.apache.xml.security.binding.xmldsig;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.xml.security.binding.xmldsig.SignaturePropertiesType;
import org.apache.xml.security.binding.xmldsig.SignaturePropertyType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SignaturePropertiesType_ESTest extends SignaturePropertiesType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SignaturePropertiesType signaturePropertiesType0 = new SignaturePropertiesType();
      LinkedList<SignaturePropertyType> linkedList0 = new LinkedList<SignaturePropertyType>();
      SignaturePropertyType signaturePropertyType0 = new SignaturePropertyType();
      linkedList0.add(signaturePropertyType0);
      signaturePropertiesType0.signatureProperty = (List<SignaturePropertyType>) linkedList0;
      List<SignaturePropertyType> list0 = signaturePropertiesType0.getSignatureProperty();
      assertTrue(list0.contains(signaturePropertyType0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SignaturePropertiesType signaturePropertiesType0 = new SignaturePropertiesType();
      signaturePropertiesType0.setId("org.apache.xml.security.binding.xmldsig.SignaturePropertiesType");
      String string0 = signaturePropertiesType0.getId();
      assertEquals("org.apache.xml.security.binding.xmldsig.SignaturePropertiesType", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SignaturePropertiesType signaturePropertiesType0 = new SignaturePropertiesType();
      signaturePropertiesType0.id = "";
      String string0 = signaturePropertiesType0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SignaturePropertiesType signaturePropertiesType0 = new SignaturePropertiesType();
      List<SignaturePropertyType> list0 = signaturePropertiesType0.getSignatureProperty();
      List<SignaturePropertyType> list1 = signaturePropertiesType0.getSignatureProperty();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SignaturePropertiesType signaturePropertiesType0 = new SignaturePropertiesType();
      String string0 = signaturePropertiesType0.getId();
      assertNull(string0);
  }
}
