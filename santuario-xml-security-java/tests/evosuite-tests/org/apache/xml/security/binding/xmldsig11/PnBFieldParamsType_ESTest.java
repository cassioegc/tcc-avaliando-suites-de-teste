/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 17:55:58 GMT 2021
 */

package org.apache.xml.security.binding.xmldsig11;

import org.junit.Test;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.apache.xml.security.binding.xmldsig11.PnBFieldParamsType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PnBFieldParamsType_ESTest extends PnBFieldParamsType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PnBFieldParamsType pnBFieldParamsType0 = new PnBFieldParamsType();
      BigInteger bigInteger0 = BigInteger.ZERO;
      pnBFieldParamsType0.k3 = bigInteger0;
      BigInteger bigInteger1 = pnBFieldParamsType0.getK3();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PnBFieldParamsType pnBFieldParamsType0 = new PnBFieldParamsType();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(658, mockRandom0);
      pnBFieldParamsType0.setK3(bigInteger0);
      BigInteger bigInteger1 = pnBFieldParamsType0.getK3();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PnBFieldParamsType pnBFieldParamsType0 = new PnBFieldParamsType();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.andNot(bigInteger0);
      pnBFieldParamsType0.setK2(bigInteger1);
      BigInteger bigInteger2 = pnBFieldParamsType0.getK2();
      assertEquals((byte)0, bigInteger2.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PnBFieldParamsType pnBFieldParamsType0 = new PnBFieldParamsType();
      BigInteger bigInteger0 = BigInteger.ONE;
      pnBFieldParamsType0.k2 = bigInteger0;
      BigInteger bigInteger1 = pnBFieldParamsType0.getK2();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PnBFieldParamsType pnBFieldParamsType0 = new PnBFieldParamsType();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.negate();
      pnBFieldParamsType0.setK2(bigInteger1);
      BigInteger bigInteger2 = pnBFieldParamsType0.getK2();
      assertEquals((byte) (-10), bigInteger2.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PnBFieldParamsType pnBFieldParamsType0 = new PnBFieldParamsType();
      BigInteger bigInteger0 = BigInteger.ZERO;
      pnBFieldParamsType0.setK1(bigInteger0);
      BigInteger bigInteger1 = pnBFieldParamsType0.getK1();
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PnBFieldParamsType pnBFieldParamsType0 = new PnBFieldParamsType();
      BigInteger bigInteger0 = pnBFieldParamsType0.getK3();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PnBFieldParamsType pnBFieldParamsType0 = new PnBFieldParamsType();
      BigInteger bigInteger0 = BigInteger.ONE;
      pnBFieldParamsType0.setK3(bigInteger0);
      BigInteger bigInteger1 = pnBFieldParamsType0.getK3();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PnBFieldParamsType pnBFieldParamsType0 = new PnBFieldParamsType();
      BigInteger bigInteger0 = pnBFieldParamsType0.getK1();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PnBFieldParamsType pnBFieldParamsType0 = new PnBFieldParamsType();
      BigInteger bigInteger0 = pnBFieldParamsType0.getK2();
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PnBFieldParamsType pnBFieldParamsType0 = new PnBFieldParamsType();
      BigInteger bigInteger0 = BigInteger.ONE;
      pnBFieldParamsType0.setK1(bigInteger0);
      BigInteger bigInteger1 = pnBFieldParamsType0.getK1();
      assertEquals((byte)1, bigInteger1.byteValue());
  }
}
