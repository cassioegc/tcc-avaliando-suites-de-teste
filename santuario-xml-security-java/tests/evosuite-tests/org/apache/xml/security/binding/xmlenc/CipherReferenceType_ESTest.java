/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 17:59:26 GMT 2021
 */

package org.apache.xml.security.binding.xmlenc;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.xml.security.binding.xmlenc.CipherReferenceType;
import org.apache.xml.security.binding.xmlenc.TransformsType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CipherReferenceType_ESTest extends CipherReferenceType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CipherReferenceType cipherReferenceType0 = new CipherReferenceType();
      cipherReferenceType0.uri = "org.apache.xml.security.binding.xmldsig.TransformType";
      String string0 = cipherReferenceType0.getURI();
      assertEquals("org.apache.xml.security.binding.xmldsig.TransformType", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CipherReferenceType cipherReferenceType0 = new CipherReferenceType();
      cipherReferenceType0.uri = "";
      String string0 = cipherReferenceType0.getURI();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CipherReferenceType cipherReferenceType0 = new CipherReferenceType();
      String string0 = cipherReferenceType0.getURI();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CipherReferenceType cipherReferenceType0 = new CipherReferenceType();
      cipherReferenceType0.setURI("Q}$L_");
      assertEquals("Q}$L_", cipherReferenceType0.getURI());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CipherReferenceType cipherReferenceType0 = new CipherReferenceType();
      TransformsType transformsType0 = new TransformsType();
      cipherReferenceType0.setTransforms(transformsType0);
      TransformsType transformsType1 = cipherReferenceType0.getTransforms();
      assertSame(transformsType1, transformsType0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CipherReferenceType cipherReferenceType0 = new CipherReferenceType();
      TransformsType transformsType0 = cipherReferenceType0.getTransforms();
      assertNull(transformsType0);
  }
}
