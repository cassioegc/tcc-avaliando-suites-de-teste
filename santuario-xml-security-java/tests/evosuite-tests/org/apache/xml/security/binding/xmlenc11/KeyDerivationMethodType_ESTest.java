/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 18:11:10 GMT 2021
 */

package org.apache.xml.security.binding.xmlenc11;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.xml.security.binding.xmlenc11.KeyDerivationMethodType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KeyDerivationMethodType_ESTest extends KeyDerivationMethodType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      KeyDerivationMethodType keyDerivationMethodType0 = new KeyDerivationMethodType();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      keyDerivationMethodType0.any = (List<Object>) linkedList0;
      Object object0 = new Object();
      linkedList0.offerLast(object0);
      List<Object> list0 = keyDerivationMethodType0.getAny();
      assertTrue(list0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      KeyDerivationMethodType keyDerivationMethodType0 = new KeyDerivationMethodType();
      keyDerivationMethodType0.setAlgorithm("[gG~dQz+jd'yy+RS");
      String string0 = keyDerivationMethodType0.getAlgorithm();
      assertEquals("[gG~dQz+jd'yy+RS", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      KeyDerivationMethodType keyDerivationMethodType0 = new KeyDerivationMethodType();
      keyDerivationMethodType0.algorithm = "";
      String string0 = keyDerivationMethodType0.getAlgorithm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      KeyDerivationMethodType keyDerivationMethodType0 = new KeyDerivationMethodType();
      keyDerivationMethodType0.getAny();
      List<Object> list0 = keyDerivationMethodType0.getAny();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      KeyDerivationMethodType keyDerivationMethodType0 = new KeyDerivationMethodType();
      String string0 = keyDerivationMethodType0.getAlgorithm();
      assertNull(string0);
  }
}
