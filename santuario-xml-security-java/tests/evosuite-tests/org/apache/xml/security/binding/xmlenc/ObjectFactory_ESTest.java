/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 18:05:31 GMT 2021
 */

package org.apache.xml.security.binding.xmlenc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.math.BigInteger;
import javax.xml.bind.JAXBElement;
import org.apache.xml.security.binding.xmldsig.KeyInfoType;
import org.apache.xml.security.binding.xmlenc.AgreementMethodType;
import org.apache.xml.security.binding.xmlenc.CipherDataType;
import org.apache.xml.security.binding.xmlenc.CipherReferenceType;
import org.apache.xml.security.binding.xmlenc.CipherValueType;
import org.apache.xml.security.binding.xmlenc.EncryptedDataType;
import org.apache.xml.security.binding.xmlenc.EncryptedKeyType;
import org.apache.xml.security.binding.xmlenc.EncryptionMethodType;
import org.apache.xml.security.binding.xmlenc.EncryptionPropertiesType;
import org.apache.xml.security.binding.xmlenc.EncryptionPropertyType;
import org.apache.xml.security.binding.xmlenc.ObjectFactory;
import org.apache.xml.security.binding.xmlenc.ReferenceList;
import org.apache.xml.security.binding.xmlenc.ReferenceType;
import org.apache.xml.security.binding.xmlenc.TransformsType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectFactory_ESTest extends ObjectFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      JAXBElement<AgreementMethodType> jAXBElement0 = objectFactory0.createAgreementMethod((AgreementMethodType) null);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      JAXBElement<KeyInfoType> jAXBElement0 = objectFactory0.createAgreementMethodTypeOriginatorKeyInfo((KeyInfoType) null);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      BigInteger bigInteger0 = BigInteger.TEN;
      JAXBElement<BigInteger> jAXBElement0 = objectFactory0.createEncryptionMethodTypeKeySize(bigInteger0);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      JAXBElement<CipherDataType> jAXBElement0 = objectFactory0.createCipherData((CipherDataType) null);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      JAXBElement<KeyInfoType> jAXBElement0 = objectFactory0.createAgreementMethodTypeRecipientKeyInfo((KeyInfoType) null);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      JAXBElement<byte[]> jAXBElement0 = objectFactory0.createEncryptionMethodTypeOAEPparams((byte[]) null);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      CipherDataType cipherDataType0 = objectFactory0.createCipherDataType();
      assertNotNull(cipherDataType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      ReferenceType referenceType0 = objectFactory0.createReferenceType();
      JAXBElement<ReferenceType> jAXBElement0 = objectFactory0.createReferenceListKeyReference(referenceType0);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      EncryptionMethodType encryptionMethodType0 = objectFactory0.createEncryptionMethodType();
      assertNull(encryptionMethodType0.getAlgorithm());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      EncryptionPropertyType encryptionPropertyType0 = objectFactory0.createEncryptionPropertyType();
      JAXBElement<EncryptionPropertyType> jAXBElement0 = objectFactory0.createEncryptionProperty(encryptionPropertyType0);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      AgreementMethodType agreementMethodType0 = objectFactory0.createAgreementMethodType();
      assertNull(agreementMethodType0.getAlgorithm());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      EncryptedDataType encryptedDataType0 = objectFactory0.createEncryptedDataType();
      JAXBElement<EncryptedDataType> jAXBElement0 = objectFactory0.createEncryptedData(encryptedDataType0);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      ReferenceList referenceList0 = objectFactory0.createReferenceList();
      assertNotNull(referenceList0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      EncryptedKeyType encryptedKeyType0 = objectFactory0.createEncryptedKeyType();
      assertNull(encryptedKeyType0.getMimeType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      ReferenceType referenceType0 = objectFactory0.createReferenceType();
      JAXBElement<ReferenceType> jAXBElement0 = objectFactory0.createReferenceListDataReference(referenceType0);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      TransformsType transformsType0 = objectFactory0.createTransformsType();
      assertNotNull(transformsType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      CipherReferenceType cipherReferenceType0 = objectFactory0.createCipherReferenceType();
      JAXBElement<CipherReferenceType> jAXBElement0 = objectFactory0.createCipherReference(cipherReferenceType0);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      CipherValueType cipherValueType0 = objectFactory0.createCipherValueType();
      JAXBElement<CipherValueType> jAXBElement0 = objectFactory0.createCipherValue(cipherValueType0);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      JAXBElement<byte[]> jAXBElement0 = objectFactory0.createAgreementMethodTypeKANonce((byte[]) null);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      EncryptedKeyType encryptedKeyType0 = new EncryptedKeyType();
      JAXBElement<EncryptedKeyType> jAXBElement0 = objectFactory0.createEncryptedKey(encryptedKeyType0);
      assertNotNull(jAXBElement0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectFactory objectFactory0 = new ObjectFactory();
      EncryptionPropertiesType encryptionPropertiesType0 = objectFactory0.createEncryptionPropertiesType();
      JAXBElement<EncryptionPropertiesType> jAXBElement0 = objectFactory0.createEncryptionProperties(encryptionPropertiesType0);
      assertNotNull(jAXBElement0);
  }
}
