/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 17:59:34 GMT 2021
 */

package org.apache.xml.security.binding.xmlenc;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.xml.security.binding.xmlenc.CipherDataType;
import org.apache.xml.security.binding.xmlenc.CipherReferenceType;
import org.apache.xml.security.binding.xmlenc.CipherValueType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CipherDataType_ESTest extends CipherDataType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CipherDataType cipherDataType0 = new CipherDataType();
      CipherReferenceType cipherReferenceType0 = new CipherReferenceType();
      cipherDataType0.setCipherReference(cipherReferenceType0);
      CipherReferenceType cipherReferenceType1 = cipherDataType0.getCipherReference();
      assertNull(cipherReferenceType1.getURI());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CipherDataType cipherDataType0 = new CipherDataType();
      CipherValueType cipherValueType0 = cipherDataType0.getCipherValue();
      assertNull(cipherValueType0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CipherDataType cipherDataType0 = new CipherDataType();
      CipherReferenceType cipherReferenceType0 = cipherDataType0.getCipherReference();
      assertNull(cipherReferenceType0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CipherDataType cipherDataType0 = new CipherDataType();
      CipherValueType cipherValueType0 = new CipherValueType();
      cipherDataType0.setCipherValue(cipherValueType0);
      CipherValueType cipherValueType1 = cipherDataType0.getCipherValue();
      assertSame(cipherValueType1, cipherValueType0);
  }
}
