/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 18:02:54 GMT 2021
 */

package org.apache.xml.security.binding.xmlenc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import org.apache.xml.security.binding.xmlenc.EncryptionPropertyType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EncryptionPropertyType_ESTest extends EncryptionPropertyType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EncryptionPropertyType encryptionPropertyType0 = new EncryptionPropertyType();
      encryptionPropertyType0.setTarget("org.apache.xml.security.binding.xmlenc.EncryptionPropertyType");
      String string0 = encryptionPropertyType0.getTarget();
      assertEquals("org.apache.xml.security.binding.xmlenc.EncryptionPropertyType", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EncryptionPropertyType encryptionPropertyType0 = new EncryptionPropertyType();
      encryptionPropertyType0.setTarget("");
      String string0 = encryptionPropertyType0.getTarget();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EncryptionPropertyType encryptionPropertyType0 = new EncryptionPropertyType();
      encryptionPropertyType0.setId("QyA-&");
      String string0 = encryptionPropertyType0.getId();
      assertEquals("QyA-&", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EncryptionPropertyType encryptionPropertyType0 = new EncryptionPropertyType();
      encryptionPropertyType0.id = "";
      String string0 = encryptionPropertyType0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EncryptionPropertyType encryptionPropertyType0 = new EncryptionPropertyType();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      QName qName0 = QName.valueOf("hBw3lHm55U");
      linkedList0.add((Object) qName0);
      encryptionPropertyType0.content = (List<Object>) linkedList0;
      List<Object> list0 = encryptionPropertyType0.getContent();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EncryptionPropertyType encryptionPropertyType0 = new EncryptionPropertyType();
      encryptionPropertyType0.getContent();
      List<Object> list0 = encryptionPropertyType0.getContent();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      EncryptionPropertyType encryptionPropertyType0 = new EncryptionPropertyType();
      String string0 = encryptionPropertyType0.getTarget();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EncryptionPropertyType encryptionPropertyType0 = new EncryptionPropertyType();
      Map<QName, String> map0 = encryptionPropertyType0.getOtherAttributes();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      EncryptionPropertyType encryptionPropertyType0 = new EncryptionPropertyType();
      String string0 = encryptionPropertyType0.getId();
      assertNull(string0);
  }
}
