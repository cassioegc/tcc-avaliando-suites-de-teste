/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 23:11:04 GMT 2021
 */

package org.apache.jcp.xml.dsig.internal.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.util.Iterator;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.crypto.XMLCryptoContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import org.apache.jcp.xml.dsig.internal.dom.Utils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utils_ESTest extends Utils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = true;
      Iterator<Node> iterator0 = (Iterator<Node>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      // Undeclared exception!
      try { 
        Utils.toNodeSet(iterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = Utils.readBytesFromStream(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte) (-58), (byte)113, (byte)31, (byte) (-110), (byte)116}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Utils.parseIdFromSameDocumentURI("v");
      Utils.sameDocumentURI("");
      Utils.parseIdFromSameDocumentURI("");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Iterator<Node> iterator0 = (Iterator<Node>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Utils.toNodeSet(iterator0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-105);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-105), 1);
      // Undeclared exception!
      try { 
        Utils.readBytesFromStream(byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(4036);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 4036);
      try { 
        Utils.readBytesFromStream(bufferedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Utils.sameDocumentURI((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Iterator<Node> iterator0 = (Iterator<Node>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Utils.toNodeSet(iterator0);
      Utils.sameDocumentURI("");
      Utils.sameDocumentURI("5wofr&?J9v3\u0004qC!");
      // Undeclared exception!
      try { 
        Utils.readBytesFromStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Utils.parseIdFromSameDocumentURI("SHA3-256");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream0.write((-1369));
      pipedInputStream0.skip(0L);
      Utils.readBytesFromStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = Utils.sameDocumentURI("HA3-256");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Iterator<Node> iterator0 = null;
      // Undeclared exception!
      try { 
        Utils.toNodeSet((Iterator<Node>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utils.parseIdFromSameDocumentURI((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Utils.sameDocumentURI("tGO?O_{*@J3D#IB");
      boolean boolean1 = Utils.secureValidation((XMLCryptoContext) null);
      assertFalse(boolean1);
      
      boolean boolean2 = Utils.sameDocumentURI("#1,o}ols.ev");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utils.parseIdFromSameDocumentURI("5CL,IHzccg}>9M4t5");
      Utils.parseIdFromSameDocumentURI("5CL,IHzccg}>9M4t5");
      MockFile mockFile0 = new MockFile("M|xZY?re$6&@a2E^-B", "{ZsZO+f;!5x_f&Er");
      File file0 = MockFile.createTempFile("M|xZY?re$6&@a2E^-B", "CL,IHzccg}>9M4t5", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      Utils.readBytesFromStream(dataInputStream0);
      assertEquals((-1), mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLCryptoContext xMLCryptoContext0 = null;
      Utils.secureValidation((XMLCryptoContext) null);
      Utils.secureValidation((XMLCryptoContext) null);
      String string0 = ".4K8||T6ml&9";
      Utils.sameDocumentURI(".4K8||T6ml&9");
      Iterator<Node> iterator0 = (Iterator<Node>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Utils.toNodeSet(iterator0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.read();
      byteArrayInputStream0.mark(0);
      byteArrayInputStream0.skip(13L);
      Utils.readBytesFromStream(byteArrayInputStream0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      Iterator<Node> iterator1 = (Iterator<Node>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator1).hasNext();
      doReturn(iIOMetadataNode0).when(iterator1).next();
      Utils.toNodeSet(iterator1);
      int int0 = 0;
      byteArrayInputStream0.mark(int0);
      Utils.secureValidation(xMLCryptoContext0);
      Utils.sameDocumentURI(string0);
      Utils.readBytesFromStream(byteArrayInputStream0);
      Utils.secureValidation(xMLCryptoContext0);
      String string1 = "cx/Gp";
      String string2 = Utils.parseIdFromSameDocumentURI(string1);
      Utils.sameDocumentURI(string2);
      String string3 = "";
      Utils.parseIdFromSameDocumentURI(string3);
      Utils.secureValidation(xMLCryptoContext0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utils.readBytesFromStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utils.sameDocumentURI("_3");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)107;
      byteArray0[0] = (byte)107;
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "_3");
      secretKeySpec0.getEncoded();
      DOMValidateContext dOMValidateContext0 = null;
      try {
        dOMValidateContext0 = new DOMValidateContext(secretKeySpec0, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // node is null
         //
         verifyException("javax.xml.crypto.dsig.dom.DOMValidateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)94;
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "S^LTE{ ");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      String string0 = "";
      IIOMetadataNode iIOMetadataNode1 = new IIOMetadataNode("");
      Node node0 = iIOMetadataNode0.replaceChild(iIOMetadataNode1, iIOMetadataNode1);
      DOMValidateContext dOMValidateContext0 = new DOMValidateContext(secretKeySpec0, node0);
      Utils.secureValidation(dOMValidateContext0);
      Utils.parseIdFromSameDocumentURI("");
      Utils.parseIdFromSameDocumentURI("");
      Utils.sameDocumentURI("S^LTE{ ");
      Utils.secureValidation(dOMValidateContext0);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)90);
      MockFile mockFile0 = new MockFile("t/XbU%f?Vgb~ZEB'<");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Iterator<Node> iterator0 = (Iterator<Node>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Utils.toNodeSet(iterator0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "";
      Utils.parseIdFromSameDocumentURI("");
      Utils.sameDocumentURI("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-108), 0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      byteArrayInputStream0.markSupported();
      pushbackInputStream0.unread(byteArray0);
      byte[] byteArray1 = Utils.readBytesFromStream(pushbackInputStream0);
      SecretKeySpec secretKeySpec0 = null;
      try {
        secretKeySpec0 = new SecretKeySpec(byteArray1, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Utils.sameDocumentURI("org.apache.jcp.xml.dsig.internal.dom.DOMDigestMethod$SHA224");
      Utils.sameDocumentURI("");
      Utils.sameDocumentURI("org.apache.jcp.xml.dsig.internal.dom.DOMDigestMethod$SHA224");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      pipedInputStream0.mark(0);
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
