/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 22:51:44 GMT 2021
 */

package org.apache.jcp.xml.dsig.internal.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.InvalidAlgorithmParameterException;
import java.security.spec.AlgorithmParameterSpec;
import java.util.LinkedList;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.spec.HMACParameterSpec;
import javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec;
import javax.xml.crypto.dsig.spec.XPathFilterParameterSpec;
import org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;
import org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDOMSignatureMethod_ESTest extends AbstractDOMSignatureMethod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      dOMSignatureMethod_RIPEMD160withRSAandMGF1_0.checkParams((SignatureMethodParameterSpec) null);
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#ripemd160-rsa-MGF1", dOMSignatureMethod_RIPEMD160withRSAandMGF1_0.getAlgorithm());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("RIPEMD160withECDSA");
      DOMSignatureMethod.SHA256withRSA dOMSignatureMethod_SHA256withRSA0 = new DOMSignatureMethod.SHA256withRSA(iIOMetadataNode0);
      dOMSignatureMethod_SHA256withRSA0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMHMACSignatureMethod.RIPEMD160 dOMHMACSignatureMethod_RIPEMD160_0 = new DOMHMACSignatureMethod.RIPEMD160(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMHMACSignatureMethod_RIPEMD160_0.unmarshalParams(iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("SHA3-384");
      DOMHMACSignatureMethod.SHA1 dOMHMACSignatureMethod_SHA1_0 = new DOMHMACSignatureMethod.SHA1(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMHMACSignatureMethod_SHA1_0.marshalParams(iIOMetadataNode0, "SHA3-384");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("?n`");
      DOMSignatureMethod.SHA512withRSAandMGF1 dOMSignatureMethod_SHA512withRSAandMGF1_0 = new DOMSignatureMethod.SHA512withRSAandMGF1(iIOMetadataNode0);
      byte[] byteArray0 = new byte[7];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "?n`");
      DOMSignContext dOMSignContext0 = new DOMSignContext(secretKeySpec0, iIOMetadataNode0, iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMSignatureMethod_SHA512withRSAandMGF1_0.marshal(iIOMetadataNode0, "?n`", dOMSignContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("?n`");
      DOMSignatureMethod.SHA512withRSAandMGF1 dOMSignatureMethod_SHA512withRSAandMGF1_0 = new DOMSignatureMethod.SHA512withRSAandMGF1(iIOMetadataNode0);
      boolean boolean0 = dOMSignatureMethod_SHA512withRSAandMGF1_0.paramsEqual((AlgorithmParameterSpec) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("wa3>\"M5D?mr}");
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      XPathFilterParameterSpec xPathFilterParameterSpec0 = new XPathFilterParameterSpec("wa3>\"M5D?mr}");
      boolean boolean0 = dOMSignatureMethod_RIPEMD160withRSAandMGF1_0.paramsEqual(xPathFilterParameterSpec0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMHMACSignatureMethod.SHA1 dOMHMACSignatureMethod_SHA1_0 = new DOMHMACSignatureMethod.SHA1(iIOMetadataNode0);
      DOMHMACSignatureMethod.SHA1 dOMHMACSignatureMethod_SHA1_1 = new DOMHMACSignatureMethod.SHA1(iIOMetadataNode0);
      boolean boolean0 = dOMHMACSignatureMethod_SHA1_0.equals(dOMHMACSignatureMethod_SHA1_1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA512withRSA dOMSignatureMethod_SHA512withRSA0 = new DOMSignatureMethod.SHA512withRSA(iIOMetadataNode0);
      DOMSignatureMethod.SHA224withECDSA dOMSignatureMethod_SHA224withECDSA0 = new DOMSignatureMethod.SHA224withECDSA(iIOMetadataNode0);
      boolean boolean0 = dOMSignatureMethod_SHA512withRSA0.equals(dOMSignatureMethod_SHA224withECDSA0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("wa3>\"M5D?mr}");
      DOMSignatureMethod.SHA384withECDSA dOMSignatureMethod_SHA384withECDSA0 = new DOMSignatureMethod.SHA384withECDSA(iIOMetadataNode0);
      LinkedList<XMLStructure> linkedList0 = new LinkedList<XMLStructure>();
      linkedList0.addLast(dOMSignatureMethod_SHA384withECDSA0);
      boolean boolean0 = dOMSignatureMethod_SHA384withECDSA0.equalsContent(linkedList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSA dOMSignatureMethod_RIPEMD160withRSA0 = new DOMSignatureMethod.RIPEMD160withRSA(iIOMetadataNode0);
      boolean boolean0 = dOMSignatureMethod_RIPEMD160withRSA0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA512withRSAandMGF1 dOMSignatureMethod_SHA512withRSAandMGF1_0 = new DOMSignatureMethod.SHA512withRSAandMGF1(iIOMetadataNode0);
      HMACParameterSpec hMACParameterSpec0 = new HMACParameterSpec((-1631642269));
      try { 
        dOMSignatureMethod_SHA512withRSAandMGF1_0.checkParams(hMACParameterSpec0);
        fail("Expecting exception: InvalidAlgorithmParameterException");
      
      } catch(InvalidAlgorithmParameterException e) {
         //
         // no parameters should be specified for the http://www.w3.org/2007/05/xmldsig-more#sha512-rsa-MGF1 SignatureMethod algorithm
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DOMSignatureMethod.SHA512withRSA dOMSignatureMethod_SHA512withRSA0 = new DOMSignatureMethod.SHA512withRSA((AlgorithmParameterSpec) null);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      try { 
        dOMSignatureMethod_SHA512withRSA0.unmarshalParams(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(MarshalException e) {
         //
         // no parameters should be specified for the http://www.w3.org/2001/04/xmldsig-more#rsa-sha512 SignatureMethod algorithm
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.jcp.xml.dsig.internal.dom.DOMDigestMethod$SHA3_384");
      DOMSignatureMethod.SHA384withECDSA dOMSignatureMethod_SHA384withECDSA0 = new DOMSignatureMethod.SHA384withECDSA(iIOMetadataNode0);
      try { 
        dOMSignatureMethod_SHA384withECDSA0.marshalParams(iIOMetadataNode0, "org.apache.jcp.xml.dsig.internal.dom.DOMDigestMethod$SHA3_384");
        fail("Expecting exception: MarshalException");
      
      } catch(MarshalException e) {
         //
         // no parameters should be specified for the http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384 SignatureMethod algorithm
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod", e);
      }
  }
}
