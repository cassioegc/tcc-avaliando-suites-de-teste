/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 23:04:00 GMT 2021
 */

package org.apache.jcp.xml.dsig.internal.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.security.KeyException;
import java.security.PublicKey;
import java.security.interfaces.DSAPublicKey;
import java.security.interfaces.ECPublicKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.DSAParameterSpec;
import java.security.spec.ECParameterSpec;
import java.security.spec.ECPoint;
import java.security.spec.EllipticCurve;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.crypto.KeySelector;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.dom.DOMCryptoContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.keyinfo.KeyValue;
import org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DOMKeyValue_ESTest extends DOMKeyValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMKeyValue.Unknown dOMKeyValue_Unknown0 = new DOMKeyValue.Unknown(iIOMetadataNode0);
      PublicKey publicKey0 = dOMKeyValue_Unknown0.unmarshalKeyValue(iIOMetadataNode0);
      assertNull(publicKey0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      BigInteger bigInteger0 = BigInteger.ZERO;
      RSAPublicKey rSAPublicKey0 = mock(RSAPublicKey.class, new ViolatedAssumptionAnswer());
      doReturn(bigInteger0).when(rSAPublicKey0).getModulus();
      doReturn(bigInteger0).when(rSAPublicKey0).getPublicExponent();
      DOMKeyValue.RSA dOMKeyValue_RSA0 = new DOMKeyValue.RSA(rSAPublicKey0);
      try { 
        dOMKeyValue_RSA0.unmarshalKeyValue(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(MarshalException e) {
         //
         // Missing Modulus element
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DSAParameterSpec dSAParameterSpec0 = new DSAParameterSpec(bigInteger0, bigInteger0, bigInteger0);
      DSAPublicKey dSAPublicKey0 = mock(DSAPublicKey.class, new ViolatedAssumptionAnswer());
      doReturn(dSAParameterSpec0).when(dSAPublicKey0).getParams();
      doReturn(bigInteger0).when(dSAPublicKey0).getY();
      DOMKeyValue.DSA dOMKeyValue_DSA0 = new DOMKeyValue.DSA(dSAPublicKey0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      try { 
        dOMKeyValue_DSA0.unmarshalKeyValue(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(MarshalException e) {
         //
         // KeyValue must contain at least one type
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue$DSA", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMKeyValue.unmarshal((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ECParameterSpec eCParameterSpec0 = mock(ECParameterSpec.class, new ViolatedAssumptionAnswer());
      ECPublicKey eCPublicKey0 = mock(ECPublicKey.class, new ViolatedAssumptionAnswer());
      doReturn((ECParameterSpec) null).when(eCPublicKey0).getParams();
      doReturn((ECPoint) null).when(eCPublicKey0).getW();
      DOMKeyValue.EC dOMKeyValue_EC0 = null;
      try {
        dOMKeyValue_EC0 = new DOMKeyValue.EC(eCPublicKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue$EC", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      try { 
        DOMKeyValue.decode(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(MarshalException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMKeyValue.Unknown dOMKeyValue_Unknown0 = new DOMKeyValue.Unknown(iIOMetadataNode0);
      byte[] byteArray0 = new byte[3];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "j2I5=E");
      KeySelector keySelector0 = KeySelector.singletonKeySelector(secretKeySpec0);
      DOMValidateContext dOMValidateContext0 = new DOMValidateContext(keySelector0, iIOMetadataNode0);
      dOMKeyValue_Unknown0.marshalPublicKey(iIOMetadataNode0, (Document) null, "j2I5=E", dOMValidateContext0);
      DOMKeyValue.EC dOMKeyValue_EC0 = null;
      try {
        dOMKeyValue_EC0 = new DOMKeyValue.EC(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(Throwable e) {
         //
         // Invalid ECKeyValue
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue$EC", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("g;}`OS*q>4{");
      DOMKeyValue.DSA dOMKeyValue_DSA0 = null;
      try {
        dOMKeyValue_DSA0 = new DOMKeyValue.DSA(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(Throwable e) {
         //
         // KeyValue must contain at least one type
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue$DSA", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMKeyValue.Unknown dOMKeyValue_Unknown0 = new DOMKeyValue.Unknown(iIOMetadataNode0);
      dOMKeyValue_Unknown0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Kwizd|nSs");
      DOMKeyValue.Unknown dOMKeyValue_Unknown0 = new DOMKeyValue.Unknown(iIOMetadataNode0);
      boolean boolean0 = dOMKeyValue_Unknown0.equals("Kwizd|nSs");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMKeyValue.Unknown dOMKeyValue_Unknown0 = new DOMKeyValue.Unknown(iIOMetadataNode0);
      byte[] byteArray0 = new byte[3];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "j2I5=E");
      KeySelector keySelector0 = KeySelector.singletonKeySelector(secretKeySpec0);
      DOMValidateContext dOMValidateContext0 = new DOMValidateContext(keySelector0, iIOMetadataNode0);
      dOMKeyValue_Unknown0.marshalPublicKey(iIOMetadataNode0, (Document) null, "j2I5=E", dOMValidateContext0);
      KeyValue keyValue0 = DOMKeyValue.unmarshal(iIOMetadataNode0);
      try { 
        keyValue0.getPublicKey();
        fail("Expecting exception: KeyException");
      
      } catch(KeyException e) {
         //
         // can't convert KeyValue to PublicKey
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("org.apache.jcp.xml.dsig.internal.dom.DOMDigestMethod$SHA3_512");
      try { 
        DOMKeyValue.unmarshal(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(MarshalException e) {
         //
         // KeyValue must contain at least one type
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DOMKeyValue.DSA dOMKeyValue_DSA0 = null;
      try {
        dOMKeyValue_DSA0 = new DOMKeyValue.DSA((DSAPublicKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key cannot be null
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Kwizd|nSs");
      DOMKeyValue.RSA dOMKeyValue_RSA0 = null;
      try {
        dOMKeyValue_RSA0 = new DOMKeyValue.RSA(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(Throwable e) {
         //
         // Missing Modulus element
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMKeyValue.Unknown dOMKeyValue_Unknown0 = new DOMKeyValue.Unknown(iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMKeyValue_Unknown0.marshal(iIOMetadataNode0, "&wM'P19cs)VWol{", (DOMCryptoContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMKeyValue.Unknown dOMKeyValue_Unknown0 = new DOMKeyValue.Unknown(iIOMetadataNode0);
      byte[] byteArray0 = new byte[16];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "j2I5=E");
      KeySelector keySelector0 = KeySelector.singletonKeySelector(secretKeySpec0);
      DOMValidateContext dOMValidateContext0 = new DOMValidateContext(keySelector0, iIOMetadataNode0);
      dOMKeyValue_Unknown0.marshalPublicKey(iIOMetadataNode0, (Document) null, "j2I5=E", dOMValidateContext0);
      DOMKeyValue.DSA dOMKeyValue_DSA0 = null;
      try {
        dOMKeyValue_DSA0 = new DOMKeyValue.DSA(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(Throwable e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      DOMKeyValue.EC.Curve dOMKeyValue_EC_Curve0 = null;
      try {
        dOMKeyValue_EC_Curve0 = new DOMKeyValue.EC.Curve("AfTv.#zn", "http://www.w3.org/2001/04/xmlenc#", (EllipticCurve) null, (ECPoint) null, bigInteger0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // curve is null
         //
         verifyException("java.security.spec.ECParameterSpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMKeyValue.EC dOMKeyValue_EC0 = null;
      try {
        dOMKeyValue_EC0 = new DOMKeyValue.EC(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(Throwable e) {
         //
         // KeyValue must contain at least one type
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyValue$EC", e);
      }
  }
}
