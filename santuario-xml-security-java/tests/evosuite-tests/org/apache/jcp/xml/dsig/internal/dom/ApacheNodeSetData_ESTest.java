/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 23:13:45 GMT 2021
 */

package org.apache.jcp.xml.dsig.internal.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.util.Iterator;
import javax.imageio.metadata.IIOMetadataNode;
import org.apache.jcp.xml.dsig.internal.dom.ApacheNodeSetData;
import org.apache.xml.security.signature.NodeFilter;
import org.apache.xml.security.signature.XMLSignatureInput;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ApacheNodeSetData_ESTest extends ApacheNodeSetData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      ApacheNodeSetData apacheNodeSetData0 = new ApacheNodeSetData(xMLSignatureInput0);
      xMLSignatureInput0.setSecureValidation(true);
      XMLSignatureInput xMLSignatureInput1 = apacheNodeSetData0.getXMLSignatureInput();
      assertSame(xMLSignatureInput1, xMLSignatureInput0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput((InputStream) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      xMLSignatureInput0.setOutputStream(byteArrayOutputStream0);
      ApacheNodeSetData apacheNodeSetData0 = new ApacheNodeSetData(xMLSignatureInput0);
      XMLSignatureInput xMLSignatureInput1 = apacheNodeSetData0.getXMLSignatureInput();
      assertFalse(xMLSignatureInput1.isElement());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("(=M");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      ApacheNodeSetData apacheNodeSetData0 = new ApacheNodeSetData(xMLSignatureInput0);
      apacheNodeSetData0.iterator();
      apacheNodeSetData0.getXMLSignatureInput();
      assertFalse(xMLSignatureInput0.isElement());
      assertTrue(xMLSignatureInput0.isInitialized());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput("%cJ`)F:~'5pr!");
      xMLSignatureInput0.setNeedsToBeExpanded(true);
      ApacheNodeSetData apacheNodeSetData0 = new ApacheNodeSetData(xMLSignatureInput0);
      XMLSignatureInput xMLSignatureInput1 = apacheNodeSetData0.getXMLSignatureInput();
      assertEquals("%cJ`)F:~'5pr!", xMLSignatureInput1.getPreCalculatedDigest());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("(=M");
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(iIOMetadataNode0);
      xMLSignatureInput0.setExcludeComments(true);
      ApacheNodeSetData apacheNodeSetData0 = new ApacheNodeSetData(xMLSignatureInput0);
      XMLSignatureInput xMLSignatureInput1 = apacheNodeSetData0.getXMLSignatureInput();
      assertFalse(xMLSignatureInput1.isOutputStreamSet());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput(byteArray0);
      ApacheNodeSetData apacheNodeSetData0 = new ApacheNodeSetData(xMLSignatureInput0);
      XMLSignatureInput xMLSignatureInput1 = apacheNodeSetData0.getXMLSignatureInput();
      assertFalse(xMLSignatureInput1.isPreCalculatedDigest());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput("50VVnqzv");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      xMLSignatureInput0.addNodeFilter(nodeFilter0);
      xMLSignatureInput0.setExcludeComments(true);
      ApacheNodeSetData apacheNodeSetData0 = new ApacheNodeSetData(xMLSignatureInput0);
      Iterator<Node> iterator0 = apacheNodeSetData0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput((Node) null);
      ApacheNodeSetData apacheNodeSetData0 = new ApacheNodeSetData(xMLSignatureInput0);
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      xMLSignatureInput0.addNodeFilter(nodeFilter0);
      xMLSignatureInput0.setNeedsToBeExpanded(true);
      // Undeclared exception!
      try { 
        apacheNodeSetData0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.security.utils.XMLUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput("50VVnqzv");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      xMLSignatureInput0.addNodeFilter(nodeFilter0);
      ApacheNodeSetData apacheNodeSetData0 = new ApacheNodeSetData(xMLSignatureInput0);
      Iterator<Node> iterator0 = apacheNodeSetData0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLSignatureInput xMLSignatureInput0 = new XMLSignatureInput("50VVnqzv");
      ApacheNodeSetData apacheNodeSetData0 = new ApacheNodeSetData(xMLSignatureInput0);
      // Undeclared exception!
      try { 
        apacheNodeSetData0.iterator();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unrecoverable error retrieving nodeset
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.ApacheNodeSetData", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApacheNodeSetData apacheNodeSetData0 = new ApacheNodeSetData((XMLSignatureInput) null);
      XMLSignatureInput xMLSignatureInput0 = apacheNodeSetData0.getXMLSignatureInput();
      assertNull(xMLSignatureInput0);
  }
}
