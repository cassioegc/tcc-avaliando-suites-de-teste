/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 23:17:33 GMT 2021
 */

package org.apache.jcp.xml.dsig.internal.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dsig.TransformService;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import org.apache.jcp.xml.dsig.internal.dom.DOMSignatureProperty;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DOMSignatureProperty_ESTest extends DOMSignatureProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.offer(dOMStructure0);
      DOMSignatureProperty dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "NEi", "NEi");
      String string0 = dOMSignatureProperty0.getTarget();
      assertEquals("NEi", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.offer(dOMStructure0);
      DOMSignatureProperty dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "", (String) null);
      String string0 = dOMSignatureProperty0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.offer(dOMStructure0);
      DOMSignatureProperty dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "", "");
      String string0 = dOMSignatureProperty0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.offer(dOMStructure0);
      DOMSignatureProperty dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "NEi", "NEi");
      boolean boolean0 = dOMSignatureProperty0.equals(dOMSignatureProperty0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Nci");
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.offer(dOMStructure0);
      DOMSignatureProperty dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "Nci", "Nci");
      byte[] byteArray0 = new byte[22];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "Nci");
      DOMSignContext dOMSignContext0 = new DOMSignContext(secretKeySpec0, iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMSignatureProperty0.marshal(iIOMetadataNode0, "", dOMSignContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DOMSignatureProperty dOMSignatureProperty0 = null;
      try {
        dOMSignatureProperty0 = new DOMSignatureProperty((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Nci");
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.offer(dOMStructure0);
      DOMSignatureProperty dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "Nci", "Nci");
      dOMSignatureProperty0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.offer(dOMStructure0);
      DOMSignatureProperty dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "", (String) null);
      dOMSignatureProperty0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Nci");
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.offer(dOMStructure0);
      DOMSignatureProperty dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "Nci", "Nci");
      boolean boolean0 = dOMSignatureProperty0.equals(dOMStructure0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("/&jlEe_04R=PcwP");
      DOMSignatureProperty dOMSignatureProperty0 = null;
      try {
        dOMSignatureProperty0 = new DOMSignatureProperty(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(Throwable e) {
         //
         // target cannot be null
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMSignatureProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      linkedList0.add((javax.xml.crypto.dom.DOMStructure) null);
      DOMSignatureProperty dOMSignatureProperty0 = null;
      try {
        dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "$sl", "QkFlX?Y~Ll%RmC+");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // content[0] is not a valid type
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMSignatureProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<TransformService> linkedList0 = new LinkedList<TransformService>();
      DOMSignatureProperty dOMSignatureProperty0 = null;
      try {
        dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "Signatur}Property", "@o]='OvB;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // content cannot be empty
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMSignatureProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DOMSignatureProperty dOMSignatureProperty0 = null;
      try {
        dOMSignatureProperty0 = new DOMSignatureProperty((List<? extends XMLStructure>) null, "", "7VdUd)RLE:(*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // content cannot be null
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMSignatureProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.offer(dOMStructure0);
      DOMSignatureProperty dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "", (String) null);
      String string0 = dOMSignatureProperty0.getTarget();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Nci");
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.offer(dOMStructure0);
      DOMSignatureProperty dOMSignatureProperty0 = new DOMSignatureProperty(linkedList0, "Nci", "Nci");
      String string0 = dOMSignatureProperty0.getId();
      assertEquals("Nci", string0);
  }
}
