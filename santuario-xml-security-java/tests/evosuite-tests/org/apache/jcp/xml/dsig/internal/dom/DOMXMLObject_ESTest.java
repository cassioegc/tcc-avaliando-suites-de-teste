/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 22:36:08 GMT 2021
 */

package org.apache.jcp.xml.dsig.internal.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.spec.AlgorithmParameterSpec;
import java.util.LinkedList;
import java.util.List;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import org.apache.jcp.xml.dsig.internal.dom.DOMDigestMethod;
import org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;
import org.apache.jcp.xml.dsig.internal.dom.DOMKeyName;
import org.apache.jcp.xml.dsig.internal.dom.DOMXMLObject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DOMXMLObject_ESTest extends DOMXMLObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<DOMHMACSignatureMethod.SHA256> linkedList0 = new LinkedList<DOMHMACSignatureMethod.SHA256>();
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, "gDi", "gDi", "");
      String string0 = dOMXMLObject0.getMimeType();
      assertEquals("gDi", dOMXMLObject0.getId());
      assertEquals("", dOMXMLObject0.getEncoding());
      assertEquals("gDi", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<DOMDigestMethod.SHA3_384> linkedList0 = new LinkedList<DOMDigestMethod.SHA3_384>();
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, (String) null, (String) null, (String) null);
      String string0 = dOMXMLObject0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<DOMHMACSignatureMethod.SHA512> linkedList0 = new LinkedList<DOMHMACSignatureMethod.SHA512>();
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, "", "", "Q$XWEO");
      String string0 = dOMXMLObject0.getId();
      assertEquals("", dOMXMLObject0.getMimeType());
      assertEquals("", string0);
      assertEquals("Q$XWEO", dOMXMLObject0.getEncoding());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<DOMHMACSignatureMethod.SHA1> linkedList0 = new LinkedList<DOMHMACSignatureMethod.SHA1>();
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, (String) null, (String) null, (String) null);
      String string0 = dOMXMLObject0.getEncoding();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<DOMKeyName> linkedList0 = new LinkedList<DOMKeyName>();
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, "o8f\u0007A%LpFK", "o8f\u0007A%LpFK", "Pre-digested input:");
      String string0 = dOMXMLObject0.getEncoding();
      assertEquals("o8f\u0007A%LpFK", dOMXMLObject0.getMimeType());
      assertEquals("o8f\u0007A%LpFK", dOMXMLObject0.getId());
      assertEquals("Pre-digested input:", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<DOMHMACSignatureMethod.SHA512> linkedList0 = new LinkedList<DOMHMACSignatureMethod.SHA512>();
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, "", "", "Q$XWEO");
      String string0 = dOMXMLObject0.getMimeType();
      assertEquals("", string0);
      assertEquals("Q$XWEO", dOMXMLObject0.getEncoding());
      assertEquals("", dOMXMLObject0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<DOMDigestMethod.SHA256> linkedList0 = new LinkedList<DOMDigestMethod.SHA256>();
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, "]>", "]>", "D6rrn/MJr|");
      String string0 = dOMXMLObject0.getId();
      assertEquals("D6rrn/MJr|", dOMXMLObject0.getEncoding());
      assertEquals("]>", string0);
      assertEquals("]>", dOMXMLObject0.getMimeType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<DOMHMACSignatureMethod.SHA512> linkedList0 = new LinkedList<DOMHMACSignatureMethod.SHA512>();
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, "L8F8C6Pp-@CX", "YSZVQ*N6%kZ$WRI3y*", "");
      String string0 = dOMXMLObject0.getEncoding();
      assertEquals("", string0);
      assertEquals("YSZVQ*N6%kZ$WRI3y*", dOMXMLObject0.getMimeType());
      assertEquals("L8F8C6Pp-@CX", dOMXMLObject0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<DOMDigestMethod.SHA224> linkedList0 = new LinkedList<DOMDigestMethod.SHA224>();
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, "77{l?a&_", "77{l?a&_", "77{l?a&_");
      dOMXMLObject0.hashCode();
      assertEquals("77{l?a&_", dOMXMLObject0.getEncoding());
      assertEquals("77{l?a&_", dOMXMLObject0.getMimeType());
      assertEquals("77{l?a&_", dOMXMLObject0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<DOMDigestMethod.SHA256> linkedList0 = new LinkedList<DOMDigestMethod.SHA256>();
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, "&IKau58,B#0%#2", "&IKau58,B#0%#2", "&IKau58,B#0%#2");
      boolean boolean0 = dOMXMLObject0.equals("&IKau58,B#0%#2");
      assertFalse(boolean0);
      assertEquals("&IKau58,B#0%#2", dOMXMLObject0.getEncoding());
      assertEquals("&IKau58,B#0%#2", dOMXMLObject0.getId());
      assertEquals("&IKau58,B#0%#2", dOMXMLObject0.getMimeType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<DOMHMACSignatureMethod.SHA512> linkedList0 = new LinkedList<DOMHMACSignatureMethod.SHA512>();
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, "L8F8C6Pp-@CX", "YSZVQ*N6%kZ$WRI3y*", "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      byte[] byteArray0 = new byte[8];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      DOMValidateContext dOMValidateContext0 = new DOMValidateContext(secretKeySpec0, iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMXMLObject0.marshal(iIOMetadataNode0, "L8F8C6Pp-@CX", dOMValidateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<DOMHMACSignatureMethod.SHA256> linkedList0 = new LinkedList<DOMHMACSignatureMethod.SHA256>();
      linkedList0.add((DOMHMACSignatureMethod.SHA256) null);
      DOMXMLObject dOMXMLObject0 = null;
      try {
        dOMXMLObject0 = new DOMXMLObject(linkedList0, "Ixt|5hO?O", "DigestValue element expected", (String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // content[0] is not a valid type
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMXMLObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<DOMDigestMethod.SHA256> linkedList0 = new LinkedList<DOMDigestMethod.SHA256>();
      DOMDigestMethod.SHA256 dOMDigestMethod_SHA256_0 = new DOMDigestMethod.SHA256((AlgorithmParameterSpec) null);
      linkedList0.add(dOMDigestMethod_SHA256_0);
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject(linkedList0, "&IKau58,B#0%#2", "&IKau58,B#0%#2", "&IKau58,B#0%#2");
      assertEquals("&IKau58,B#0%#2", dOMXMLObject0.getId());
      assertEquals("&IKau58,B#0%#2", dOMXMLObject0.getEncoding());
      assertEquals("&IKau58,B#0%#2", dOMXMLObject0.getMimeType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DOMXMLObject dOMXMLObject0 = new DOMXMLObject((List<? extends XMLStructure>) null, "h)2xo>J[0Y[v.", "v1zT5OO", "G!sRLSJs,+/");
      assertEquals("h)2xo>J[0Y[v.", dOMXMLObject0.getId());
      assertEquals("G!sRLSJs,+/", dOMXMLObject0.getEncoding());
      assertEquals("v1zT5OO", dOMXMLObject0.getMimeType());
  }
}
