/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 23:00:09 GMT 2021
 */

package org.apache.jcp.xml.dsig.internal.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.Provider;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.crypto.KeySelector;
import javax.xml.crypto.XMLCryptoContext;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dsig.Transform;
import javax.xml.crypto.dsig.TransformService;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import org.apache.jcp.xml.dsig.internal.dom.DOMRetrievalMethod;
import org.apache.jcp.xml.dsig.internal.dom.DOMTransform;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DOMRetrievalMethod_ESTest extends DOMRetrievalMethod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<TransformService> linkedList0 = new LinkedList<TransformService>();
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("", "", linkedList0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      byte[] byteArray0 = new byte[9];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, ":");
      KeySelector keySelector0 = KeySelector.singletonKeySelector(secretKeySpec0);
      DOMValidateContext dOMValidateContext0 = new DOMValidateContext(keySelector0, iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMRetrievalMethod0.marshal(iIOMetadataNode0, "", dOMValidateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("Transform", (String) null, (List<? extends Transform>) null);
      LinkedList<XMLStructure> linkedList0 = new LinkedList<XMLStructure>();
      linkedList0.add((XMLStructure) dOMRetrievalMethod0);
      boolean boolean0 = dOMRetrievalMethod0.equalsContent(linkedList0, linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<TransformService> linkedList0 = new LinkedList<TransformService>();
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("org.apache.jcp.xml.dsig.internal.dom.DOMRetrievalMethod", "org.apache.jcp.xml.dsig.internal.dom.DOMRetrievalMethod", linkedList0);
      String string0 = dOMRetrievalMethod0.getURI();
      assertEquals("org.apache.jcp.xml.dsig.internal.dom.DOMRetrievalMethod", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<TransformService> linkedList0 = new LinkedList<TransformService>();
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("", "", linkedList0);
      String string0 = dOMRetrievalMethod0.getURI();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<TransformService> linkedList0 = new LinkedList<TransformService>();
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("RZO,;KxY$ED", "RZO,;KxY$ED", linkedList0);
      String string0 = dOMRetrievalMethod0.getType();
      assertEquals("RZO,;KxY$ED", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSignContext dOMSignContext0 = new DOMSignContext(secretKeySpec0, iIOMetadataNode0);
      DOMRetrievalMethod dOMRetrievalMethod0 = null;
      try {
        dOMRetrievalMethod0 = new DOMRetrievalMethod((Element) null, dOMSignContext0, (Provider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<TransformService> linkedList0 = new LinkedList<TransformService>();
      DOMRetrievalMethod dOMRetrievalMethod0 = null;
      try {
        dOMRetrievalMethod0 = new DOMRetrievalMethod("ZH@&0Z+AL&@Xl7u Y ", "ZH@&0Z+AL&@Xl7u Y ", linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 12: ZH@&0Z+AL&@Xl7u Y 
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMRetrievalMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<DOMTransform> linkedHashSet0 = new LinkedHashSet<DOMTransform>();
      LinkedList<DOMTransform> linkedList0 = new LinkedList<DOMTransform>(linkedHashSet0);
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("", "http://www.w3.org/2007/05/xmldsig-more#sha3-512", linkedList0);
      byte[] byteArray0 = new byte[1];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      KeySelector keySelector0 = KeySelector.singletonKeySelector(secretKeySpec0);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignContext dOMSignContext0 = new DOMSignContext(keySelector0, iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMRetrievalMethod0.dereference(dOMSignContext0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.apache.jcp.xml.dsig.internal.dom.DOMURIDereferencer
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMRetrievalMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<DOMTransform> linkedList0 = new LinkedList<DOMTransform>();
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("org.apache.jcp.xml.dsig.internal.dom.DOMRetrievalMethod", ", expected Transforms", linkedList0);
      // Undeclared exception!
      try { 
        dOMRetrievalMethod0.dereference((XMLCryptoContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // context cannot be null
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMRetrievalMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<TransformService> linkedList0 = new LinkedList<TransformService>();
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("U+", "Transform", linkedList0);
      dOMRetrievalMethod0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<TransformService> linkedList0 = new LinkedList<TransformService>();
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("U+", "Transform", linkedList0);
      Object object0 = new Object();
      boolean boolean0 = dOMRetrievalMethod0.equals(object0);
      assertEquals("U+", dOMRetrievalMethod0.getURI());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<TransformService> linkedList0 = new LinkedList<TransformService>();
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("U+", "Transform", linkedList0);
      // Undeclared exception!
      try { 
        dOMRetrievalMethod0.dereferenceAsXMLStructure((XMLCryptoContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // context cannot be null
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMRetrievalMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<DOMTransform> linkedList0 = new LinkedList<DOMTransform>();
      linkedList0.add((DOMTransform) null);
      DOMRetrievalMethod dOMRetrievalMethod0 = null;
      try {
        dOMRetrievalMethod0 = new DOMRetrievalMethod("+", "+", linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // transforms[0] is not a valid type
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMRetrievalMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<DOMTransform> linkedList0 = new LinkedList<DOMTransform>();
      DOMTransform dOMTransform0 = new DOMTransform((TransformService) null);
      linkedList0.add(dOMTransform0);
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("+", "+", linkedList0);
      assertEquals("+", dOMRetrievalMethod0.getType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<DOMTransform> linkedList0 = new LinkedList<DOMTransform>();
      DOMRetrievalMethod dOMRetrievalMethod0 = null;
      try {
        dOMRetrievalMethod0 = new DOMRetrievalMethod((String) null, "U+", linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // uri cannot be null
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMRetrievalMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<TransformService> linkedList0 = new LinkedList<TransformService>();
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("", "", linkedList0);
      List<Transform> list0 = dOMRetrievalMethod0.getTransforms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("Transform", (String) null, (List<? extends Transform>) null);
      Node node0 = dOMRetrievalMethod0.getHere();
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<TransformService> linkedList0 = new LinkedList<TransformService>();
      DOMRetrievalMethod dOMRetrievalMethod0 = new DOMRetrievalMethod("", "", linkedList0);
      String string0 = dOMRetrievalMethod0.getType();
      assertEquals("", string0);
  }
}
