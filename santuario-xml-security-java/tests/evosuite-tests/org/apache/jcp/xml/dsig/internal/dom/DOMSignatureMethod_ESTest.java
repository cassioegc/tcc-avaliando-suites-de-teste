/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 22:49:05 GMT 2021
 */

package org.apache.jcp.xml.dsig.internal.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.InvalidAlgorithmParameterException;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.MGF1ParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.dsig.SignedInfo;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.spec.HMACParameterSpec;
import org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DOMSignatureMethod_ESTest extends DOMSignatureMethod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA256withRSA dOMSignatureMethod_SHA256withRSA0 = new DOMSignatureMethod.SHA256withRSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA256withRSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2001/04/xmldsig-more#rsa-sha256", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("http://www.w3.org/2001/04/xmldsig-more#hmac-ripemd160");
      DOMSignatureMethod.SHA224withRSA dOMSignatureMethod_SHA224withRSA0 = new DOMSignatureMethod.SHA224withRSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA224withRSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2001/04/xmldsig-more#rsa-sha224", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("^)");
      // Undeclared exception!
      try { 
        DOMSignatureMethod.unmarshal(iIOMetadataNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DOMSignatureMethod.SHA1withRSAandMGF1 dOMSignatureMethod_SHA1withRSAandMGF1_0 = new DOMSignatureMethod.SHA1withRSAandMGF1((AlgorithmParameterSpec) null);
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#sha1-rsa-MGF1", dOMSignatureMethod_SHA1withRSAandMGF1_0.getAlgorithm());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DOMSignatureMethod.SHA384withRSA dOMSignatureMethod_SHA384withRSA0 = new DOMSignatureMethod.SHA384withRSA((AlgorithmParameterSpec) null);
      String string0 = dOMSignatureMethod_SHA384withRSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2001/04/xmldsig-more#rsa-sha384", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DOMSignatureMethod.SHA384withRSAandMGF1 dOMSignatureMethod_SHA384withRSAandMGF1_0 = new DOMSignatureMethod.SHA384withRSAandMGF1((AlgorithmParameterSpec) null);
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#sha384-rsa-MGF1", dOMSignatureMethod_SHA384withRSAandMGF1_0.getAlgorithm());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DOMSignatureMethod.SHA1withECDSA dOMSignatureMethod_SHA1withECDSA0 = new DOMSignatureMethod.SHA1withECDSA((AlgorithmParameterSpec) null);
      assertEquals("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1", dOMSignatureMethod_SHA1withECDSA0.getAlgorithm());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DOMSignatureMethod.SHA224withRSA dOMSignatureMethod_SHA224withRSA0 = new DOMSignatureMethod.SHA224withRSA((AlgorithmParameterSpec) null);
      assertEquals("http://www.w3.org/2001/04/xmldsig-more#rsa-sha224", dOMSignatureMethod_SHA224withRSA0.getAlgorithm());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">");
      DOMSignatureMethod.SHA224withRSA dOMSignatureMethod_SHA224withRSA0 = new DOMSignatureMethod.SHA224withRSA(iIOMetadataNode0);
      byte[] byteArray0 = new byte[7];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "Oc$");
      DOMSignContext dOMSignContext0 = new DOMSignContext(secretKeySpec0, iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMSignatureMethod_SHA224withRSA0.sign(secretKeySpec0, (SignedInfo) null, dOMSignContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("27b6916a894d3aee7106fe805fc34b44");
      DOMSignatureMethod.SHA1withRSAandMGF1 dOMSignatureMethod_SHA1withRSAandMGF1_0 = new DOMSignatureMethod.SHA1withRSAandMGF1(iIOMetadataNode0);
      byte[] byteArray0 = new byte[6];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "4|;c3qr8Lj~i9w/|9-");
      DOMValidateContext dOMValidateContext0 = new DOMValidateContext(secretKeySpec0, iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMSignatureMethod_SHA1withRSAandMGF1_0.verify(secretKeySpec0, (SignedInfo) null, byteArray0, dOMValidateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      DOMSignatureMethod.SHA384withRSAandMGF1 dOMSignatureMethod_SHA384withRSAandMGF1_0 = null;
      try {
        dOMSignatureMethod_SHA384withRSAandMGF1_0 = new DOMSignatureMethod.SHA384withRSAandMGF1(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(Throwable e) {
         //
         // no parameters should be specified for the http://www.w3.org/2007/05/xmldsig-more#sha384-rsa-MGF1 SignatureMethod algorithm
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ri&k.HQf<5%BGXX");
      DOMSignatureMethod.SHA1withDSA dOMSignatureMethod_SHA1withDSA0 = new DOMSignatureMethod.SHA1withDSA(iIOMetadataNode0);
      dOMSignatureMethod_SHA1withDSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DOMSignatureMethod.SHA1withDSA dOMSignatureMethod_SHA1withDSA0 = new DOMSignatureMethod.SHA1withDSA((AlgorithmParameterSpec) null);
      String string0 = dOMSignatureMethod_SHA1withDSA0.getJCAAlgorithm();
      assertEquals("SHA1withDSA", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HMACParameterSpec hMACParameterSpec0 = new HMACParameterSpec(820);
      DOMSignatureMethod.SHA1withDSA dOMSignatureMethod_SHA1withDSA0 = null;
      try {
        dOMSignatureMethod_SHA1withDSA0 = new DOMSignatureMethod.SHA1withDSA(hMACParameterSpec0);
        fail("Expecting exception: InvalidAlgorithmParameterException");
      
      } catch(Throwable e) {
         //
         // no parameters should be specified for the http://www.w3.org/2000/09/xmldsig#dsa-sha1 SignatureMethod algorithm
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA256withRSAandMGF1 dOMSignatureMethod_SHA256withRSAandMGF1_0 = new DOMSignatureMethod.SHA256withRSAandMGF1(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA256withRSAandMGF1_0.getAlgorithm();
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#sha256-rsa-MGF1", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DOMSignatureMethod.SHA256withRSAandMGF1 dOMSignatureMethod_SHA256withRSAandMGF1_0 = new DOMSignatureMethod.SHA256withRSAandMGF1((AlgorithmParameterSpec) null);
      dOMSignatureMethod_SHA256withRSAandMGF1_0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA256withRSAandMGF1 dOMSignatureMethod_SHA256withRSAandMGF1_0 = new DOMSignatureMethod.SHA256withRSAandMGF1(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA256withRSAandMGF1_0.getJCAAlgorithm();
      assertEquals("SHA256withRSAandMGF1", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("ri&k.HQf<5%BGXX");
      DOMSignatureMethod.SHA384withRSA dOMSignatureMethod_SHA384withRSA0 = new DOMSignatureMethod.SHA384withRSA(iIOMetadataNode0);
      try { 
        dOMSignatureMethod_SHA384withRSA0.unmarshalParams(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(MarshalException e) {
         //
         // no parameters should be specified for the http://www.w3.org/2001/04/xmldsig-more#rsa-sha384 SignatureMethod algorithm
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MGF1ParameterSpec mGF1ParameterSpec0 = new MGF1ParameterSpec("60B(&sW8#i");
      DOMSignatureMethod.SHA384withRSA dOMSignatureMethod_SHA384withRSA0 = null;
      try {
        dOMSignatureMethod_SHA384withRSA0 = new DOMSignatureMethod.SHA384withRSA(mGF1ParameterSpec0);
        fail("Expecting exception: InvalidAlgorithmParameterException");
      
      } catch(Throwable e) {
         //
         // params must be of type SignatureMethodParameterSpec
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      DOMSignatureMethod.SHA384withRSA dOMSignatureMethod_SHA384withRSA0 = new DOMSignatureMethod.SHA384withRSA(iIOMetadataNode0);
      dOMSignatureMethod_SHA384withRSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSignatureMethod.SHA384withRSA dOMSignatureMethod_SHA384withRSA0 = new DOMSignatureMethod.SHA384withRSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA384withRSA0.getJCAAlgorithm();
      assertEquals("SHA384withRSA", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DOMSignatureMethod.SHA256withRSA dOMSignatureMethod_SHA256withRSA0 = new DOMSignatureMethod.SHA256withRSA((AlgorithmParameterSpec) null);
      String string0 = dOMSignatureMethod_SHA256withRSA0.getJCAAlgorithm();
      assertEquals("SHA256withRSA", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA256withRSA dOMSignatureMethod_SHA256withRSA0 = new DOMSignatureMethod.SHA256withRSA(iIOMetadataNode0);
      dOMSignatureMethod_SHA256withRSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DOMSignatureMethod.SHA512withRSA dOMSignatureMethod_SHA512withRSA0 = new DOMSignatureMethod.SHA512withRSA((AlgorithmParameterSpec) null);
      AlgorithmParameterSpec algorithmParameterSpec0 = dOMSignatureMethod_SHA512withRSA0.getParameterSpec();
      assertNull(algorithmParameterSpec0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA1withECDSA dOMSignatureMethod_SHA1withECDSA0 = new DOMSignatureMethod.SHA1withECDSA(iIOMetadataNode0);
      dOMSignatureMethod_SHA1withECDSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA1withECDSA dOMSignatureMethod_SHA1withECDSA0 = new DOMSignatureMethod.SHA1withECDSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA1withECDSA0.getJCAAlgorithm();
      assertEquals("SHA1withECDSA", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HMACParameterSpec hMACParameterSpec0 = new HMACParameterSpec(0);
      DOMSignatureMethod.SHA1withECDSA dOMSignatureMethod_SHA1withECDSA0 = null;
      try {
        dOMSignatureMethod_SHA1withECDSA0 = new DOMSignatureMethod.SHA1withECDSA(hMACParameterSpec0);
        fail("Expecting exception: InvalidAlgorithmParameterException");
      
      } catch(Throwable e) {
         //
         // no parameters should be specified for the http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha1 SignatureMethod algorithm
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA384withECDSA dOMSignatureMethod_SHA384withECDSA0 = new DOMSignatureMethod.SHA384withECDSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA384withECDSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DOMSignatureMethod.SHA384withECDSA dOMSignatureMethod_SHA384withECDSA0 = new DOMSignatureMethod.SHA384withECDSA((AlgorithmParameterSpec) null);
      dOMSignatureMethod_SHA384withECDSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" v)z$kt");
      DOMSignatureMethod.SHA384withECDSA dOMSignatureMethod_SHA384withECDSA0 = new DOMSignatureMethod.SHA384withECDSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA384withECDSA0.getJCAAlgorithm();
      assertEquals("SHA384withECDSA", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]/fP");
      DOMSignatureMethod.SHA224withRSAandMGF1 dOMSignatureMethod_SHA224withRSAandMGF1_0 = new DOMSignatureMethod.SHA224withRSAandMGF1(iIOMetadataNode0);
      dOMSignatureMethod_SHA224withRSAandMGF1_0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]/fP");
      DOMSignatureMethod.SHA224withRSAandMGF1 dOMSignatureMethod_SHA224withRSAandMGF1_0 = new DOMSignatureMethod.SHA224withRSAandMGF1(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA224withRSAandMGF1_0.getAlgorithm();
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#sha224-rsa-MGF1", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DOMSignatureMethod.SHA224withRSAandMGF1 dOMSignatureMethod_SHA224withRSAandMGF1_0 = new DOMSignatureMethod.SHA224withRSAandMGF1((AlgorithmParameterSpec) null);
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#sha224-rsa-MGF1", dOMSignatureMethod_SHA224withRSAandMGF1_0.getAlgorithm());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      DOMSignatureMethod.SHA224withRSAandMGF1 dOMSignatureMethod_SHA224withRSAandMGF1_0 = new DOMSignatureMethod.SHA224withRSAandMGF1(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA224withRSAandMGF1_0.getJCAAlgorithm();
      assertEquals("SHA224withRSAandMGF1", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA1withRSAandMGF1 dOMSignatureMethod_SHA1withRSAandMGF1_0 = new DOMSignatureMethod.SHA1withRSAandMGF1(iIOMetadataNode0);
      dOMSignatureMethod_SHA1withRSAandMGF1_0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("037bf27342da639b6dccfffeb73d69d78c6c27a6009cbbca1980f8533921e8a684423e43bab08a576291af8f461bb2a8b3531d2f0485c19b16e2f1516e23dd3c1a4827af1b8ac15b");
      DOMSignatureMethod.SHA1withRSAandMGF1 dOMSignatureMethod_SHA1withRSAandMGF1_0 = new DOMSignatureMethod.SHA1withRSAandMGF1(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA1withRSAandMGF1_0.getJCAAlgorithm();
      assertEquals("SHA1withRSAandMGF1", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA1withRSAandMGF1 dOMSignatureMethod_SHA1withRSAandMGF1_0 = new DOMSignatureMethod.SHA1withRSAandMGF1(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA1withRSAandMGF1_0.getAlgorithm();
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#sha1-rsa-MGF1", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA512withECDSA dOMSignatureMethod_SHA512withECDSA0 = new DOMSignatureMethod.SHA512withECDSA(iIOMetadataNode0);
      try { 
        dOMSignatureMethod_SHA512withECDSA0.unmarshalParams(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(MarshalException e) {
         //
         // no parameters should be specified for the http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512 SignatureMethod algorithm
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.AbstractDOMSignatureMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA512withECDSA dOMSignatureMethod_SHA512withECDSA0 = new DOMSignatureMethod.SHA512withECDSA(iIOMetadataNode0);
      dOMSignatureMethod_SHA512withECDSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA512withECDSA dOMSignatureMethod_SHA512withECDSA0 = new DOMSignatureMethod.SHA512withECDSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA512withECDSA0.getJCAAlgorithm();
      assertEquals("SHA512withECDSA", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DOMSignatureMethod.SHA512withECDSA dOMSignatureMethod_SHA512withECDSA0 = new DOMSignatureMethod.SHA512withECDSA((AlgorithmParameterSpec) null);
      String string0 = dOMSignatureMethod_SHA512withECDSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">");
      DOMSignatureMethod.SHA512withRSAandMGF1 dOMSignatureMethod_SHA512withRSAandMGF1_0 = new DOMSignatureMethod.SHA512withRSAandMGF1(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA512withRSAandMGF1_0.getAlgorithm();
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#sha512-rsa-MGF1", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA512withRSAandMGF1 dOMSignatureMethod_SHA512withRSAandMGF1_0 = new DOMSignatureMethod.SHA512withRSAandMGF1(iIOMetadataNode0);
      dOMSignatureMethod_SHA512withRSAandMGF1_0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DOMSignatureMethod.SHA512withRSAandMGF1 dOMSignatureMethod_SHA512withRSAandMGF1_0 = new DOMSignatureMethod.SHA512withRSAandMGF1((AlgorithmParameterSpec) null);
      String string0 = dOMSignatureMethod_SHA512withRSAandMGF1_0.getJCAAlgorithm();
      assertEquals("SHA512withRSAandMGF1", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("params must be of type SignatureMethodParameterSpec");
      DOMSignatureMethod.SHA1withRSA dOMSignatureMethod_SHA1withRSA0 = new DOMSignatureMethod.SHA1withRSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA1withRSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2000/09/xmldsig#rsa-sha1", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DOMSignatureMethod.SHA1withRSA dOMSignatureMethod_SHA1withRSA0 = new DOMSignatureMethod.SHA1withRSA((AlgorithmParameterSpec) null);
      assertEquals("http://www.w3.org/2000/09/xmldsig#rsa-sha1", dOMSignatureMethod_SHA1withRSA0.getAlgorithm());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("^)");
      DOMSignatureMethod.SHA1withRSA dOMSignatureMethod_SHA1withRSA0 = new DOMSignatureMethod.SHA1withRSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA1withRSA0.getJCAAlgorithm();
      assertEquals("SHA1withRSA", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("a");
      DOMSignatureMethod.SHA1withRSA dOMSignatureMethod_SHA1withRSA0 = new DOMSignatureMethod.SHA1withRSA(iIOMetadataNode0);
      dOMSignatureMethod_SHA1withRSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSA dOMSignatureMethod_RIPEMD160withRSA0 = new DOMSignatureMethod.RIPEMD160withRSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_RIPEMD160withRSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2001/04/xmldsig-more#rsa-ripemd160", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSA dOMSignatureMethod_RIPEMD160withRSA0 = new DOMSignatureMethod.RIPEMD160withRSA(iIOMetadataNode0);
      dOMSignatureMethod_RIPEMD160withRSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DOMSignatureMethod.RIPEMD160withRSA dOMSignatureMethod_RIPEMD160withRSA0 = new DOMSignatureMethod.RIPEMD160withRSA((AlgorithmParameterSpec) null);
      String string0 = dOMSignatureMethod_RIPEMD160withRSA0.getJCAAlgorithm();
      assertEquals("RIPEMD160withRSA", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("]/fP");
      DOMSignatureMethod.RIPEMD160withECDSA dOMSignatureMethod_RIPEMD160withECDSA0 = new DOMSignatureMethod.RIPEMD160withECDSA(iIOMetadataNode0);
      dOMSignatureMethod_RIPEMD160withECDSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">x#oOf9}}");
      DOMSignatureMethod.RIPEMD160withECDSA dOMSignatureMethod_RIPEMD160withECDSA0 = new DOMSignatureMethod.RIPEMD160withECDSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_RIPEMD160withECDSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#ecdsa-ripemd160", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DOMSignatureMethod.RIPEMD160withECDSA dOMSignatureMethod_RIPEMD160withECDSA0 = new DOMSignatureMethod.RIPEMD160withECDSA((AlgorithmParameterSpec) null);
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#ecdsa-ripemd160", dOMSignatureMethod_RIPEMD160withECDSA0.getAlgorithm());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSignatureMethod.RIPEMD160withECDSA dOMSignatureMethod_RIPEMD160withECDSA0 = new DOMSignatureMethod.RIPEMD160withECDSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_RIPEMD160withECDSA0.getJCAAlgorithm();
      assertEquals("RIPEMD160withECDSA", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">");
      DOMSignatureMethod.SHA224withRSA dOMSignatureMethod_SHA224withRSA0 = new DOMSignatureMethod.SHA224withRSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA224withRSA0.getJCAAlgorithm();
      assertEquals("SHA224withRSA", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("#s%zcu1OA K j");
      DOMSignatureMethod.SHA224withRSA dOMSignatureMethod_SHA224withRSA0 = new DOMSignatureMethod.SHA224withRSA(iIOMetadataNode0);
      dOMSignatureMethod_SHA224withRSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DOMSignatureMethod.SHA256withDSA dOMSignatureMethod_SHA256withDSA0 = new DOMSignatureMethod.SHA256withDSA((AlgorithmParameterSpec) null);
      dOMSignatureMethod_SHA256withDSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSignatureMethod.SHA256withDSA dOMSignatureMethod_SHA256withDSA0 = new DOMSignatureMethod.SHA256withDSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA256withDSA0.getJCAAlgorithm();
      assertEquals("SHA256withDSA", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(">x#oOf9}}");
      DOMSignatureMethod.SHA256withDSA dOMSignatureMethod_SHA256withDSA0 = new DOMSignatureMethod.SHA256withDSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA256withDSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2009/xmldsig11#dsa-sha256", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("=8[&uQ?F|.`{T,F4(Q");
      DOMSignatureMethod.SHA384withRSAandMGF1 dOMSignatureMethod_SHA384withRSAandMGF1_0 = new DOMSignatureMethod.SHA384withRSAandMGF1(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA384withRSAandMGF1_0.getAlgorithm();
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#sha384-rsa-MGF1", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSignatureMethod.SHA384withRSAandMGF1 dOMSignatureMethod_SHA384withRSAandMGF1_0 = new DOMSignatureMethod.SHA384withRSAandMGF1(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA384withRSAandMGF1_0.getJCAAlgorithm();
      assertEquals("SHA384withRSAandMGF1", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("iv} [(Hn[N");
      DOMSignatureMethod.SHA384withRSAandMGF1 dOMSignatureMethod_SHA384withRSAandMGF1_0 = new DOMSignatureMethod.SHA384withRSAandMGF1(iIOMetadataNode0);
      dOMSignatureMethod_SHA384withRSAandMGF1_0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSignatureMethod.SHA224withECDSA dOMSignatureMethod_SHA224withECDSA0 = new DOMSignatureMethod.SHA224withECDSA(iIOMetadataNode0);
      dOMSignatureMethod_SHA224withECDSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DOMSignatureMethod.SHA224withECDSA dOMSignatureMethod_SHA224withECDSA0 = new DOMSignatureMethod.SHA224withECDSA((AlgorithmParameterSpec) null);
      String string0 = dOMSignatureMethod_SHA224withECDSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha224", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA224withECDSA dOMSignatureMethod_SHA224withECDSA0 = new DOMSignatureMethod.SHA224withECDSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA224withECDSA0.getJCAAlgorithm();
      assertEquals("SHA224withECDSA", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1((AlgorithmParameterSpec) null);
      String string0 = dOMSignatureMethod_RIPEMD160withRSAandMGF1_0.getJCAAlgorithm();
      assertEquals("RIPEMD160withRSAandMGF1", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      dOMSignatureMethod_RIPEMD160withRSAandMGF1_0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_RIPEMD160withRSAandMGF1_0.getAlgorithm();
      assertEquals("http://www.w3.org/2007/05/xmldsig-more#ripemd160-rsa-MGF1", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DOMSignatureMethod.SHA256withECDSA dOMSignatureMethod_SHA256withECDSA0 = new DOMSignatureMethod.SHA256withECDSA((AlgorithmParameterSpec) null);
      dOMSignatureMethod_SHA256withECDSA0.getAlgorithmType();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.SHA256withECDSA dOMSignatureMethod_SHA256withECDSA0 = new DOMSignatureMethod.SHA256withECDSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA256withECDSA0.getJCAAlgorithm();
      assertEquals("SHA256withECDSA", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DOMSignatureMethod.SHA256withECDSA dOMSignatureMethod_SHA256withECDSA0 = new DOMSignatureMethod.SHA256withECDSA((AlgorithmParameterSpec) null);
      String string0 = dOMSignatureMethod_SHA256withECDSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DOMSignatureMethod.SHA512withRSA dOMSignatureMethod_SHA512withRSA0 = new DOMSignatureMethod.SHA512withRSA((AlgorithmParameterSpec) null);
      String string0 = dOMSignatureMethod_SHA512withRSA0.getJCAAlgorithm();
      assertEquals("SHA512withRSA", string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode((String) null);
      DOMSignatureMethod.SHA512withRSA dOMSignatureMethod_SHA512withRSA0 = new DOMSignatureMethod.SHA512withRSA(iIOMetadataNode0);
      String string0 = dOMSignatureMethod_SHA512withRSA0.getAlgorithm();
      assertEquals("http://www.w3.org/2001/04/xmldsig-more#rsa-sha512", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DOMSignatureMethod.SHA512withRSA dOMSignatureMethod_SHA512withRSA0 = new DOMSignatureMethod.SHA512withRSA((AlgorithmParameterSpec) null);
      dOMSignatureMethod_SHA512withRSA0.getAlgorithmType();
  }
}
