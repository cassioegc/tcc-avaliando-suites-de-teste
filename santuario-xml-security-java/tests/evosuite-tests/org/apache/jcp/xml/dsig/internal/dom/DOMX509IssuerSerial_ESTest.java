/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 22:45:02 GMT 2021
 */

package org.apache.jcp.xml.dsig.internal.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.security.spec.RSAKeyGenParameterSpec;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.dom.DOMCryptoContext;
import org.apache.jcp.xml.dsig.internal.dom.DOMX509IssuerSerial;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DOMX509IssuerSerial_ESTest extends DOMX509IssuerSerial_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-114);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DOMX509IssuerSerial dOMX509IssuerSerial0 = new DOMX509IssuerSerial("", bigInteger0);
      BigInteger bigInteger1 = dOMX509IssuerSerial0.getSerialNumber();
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DOMX509IssuerSerial dOMX509IssuerSerial0 = new DOMX509IssuerSerial("", bigInteger0);
      BigInteger bigInteger1 = dOMX509IssuerSerial0.getSerialNumber();
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-70);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DOMX509IssuerSerial dOMX509IssuerSerial0 = new DOMX509IssuerSerial("", bigInteger0);
      BigInteger bigInteger1 = dOMX509IssuerSerial0.getSerialNumber();
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DOMX509IssuerSerial dOMX509IssuerSerial0 = null;
      try {
        dOMX509IssuerSerial0 = new DOMX509IssuerSerial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      DOMX509IssuerSerial dOMX509IssuerSerial0 = null;
      try {
        dOMX509IssuerSerial0 = new DOMX509IssuerSerial("m061%", bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // improperly specified input name: m061%
         //
         verifyException("javax.security.auth.x500.X500Principal", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = RSAKeyGenParameterSpec.F4;
      DOMX509IssuerSerial dOMX509IssuerSerial0 = new DOMX509IssuerSerial("", bigInteger0);
      boolean boolean0 = dOMX509IssuerSerial0.equals(dOMX509IssuerSerial0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = RSAKeyGenParameterSpec.F4;
      DOMX509IssuerSerial dOMX509IssuerSerial0 = new DOMX509IssuerSerial("", bigInteger0);
      boolean boolean0 = dOMX509IssuerSerial0.equals(bigInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DOMX509IssuerSerial dOMX509IssuerSerial0 = null;
      try {
        dOMX509IssuerSerial0 = new DOMX509IssuerSerial("'H!I:p$}:Bksf", (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // serialNumber cannot be null
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMX509IssuerSerial", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DOMX509IssuerSerial dOMX509IssuerSerial0 = null;
      try {
        dOMX509IssuerSerial0 = new DOMX509IssuerSerial((String) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // issuerName cannot be null
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMX509IssuerSerial", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      DOMX509IssuerSerial dOMX509IssuerSerial0 = new DOMX509IssuerSerial("", bigInteger0);
      String string0 = dOMX509IssuerSerial0.getIssuerName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      BigInteger bigInteger0 = BigInteger.ZERO;
      DOMX509IssuerSerial dOMX509IssuerSerial0 = new DOMX509IssuerSerial("", bigInteger0);
      // Undeclared exception!
      try { 
        dOMX509IssuerSerial0.marshal(iIOMetadataNode0, "", (DOMCryptoContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = RSAKeyGenParameterSpec.F4;
      DOMX509IssuerSerial dOMX509IssuerSerial0 = new DOMX509IssuerSerial("", bigInteger0);
      dOMX509IssuerSerial0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = RSAKeyGenParameterSpec.F4;
      DOMX509IssuerSerial dOMX509IssuerSerial0 = new DOMX509IssuerSerial("", bigInteger0);
      BigInteger bigInteger1 = dOMX509IssuerSerial0.getSerialNumber();
      assertEquals((byte)1, bigInteger1.byteValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMX509IssuerSerial dOMX509IssuerSerial0 = null;
      try {
        dOMX509IssuerSerial0 = new DOMX509IssuerSerial(iIOMetadataNode0);
        fail("Expecting exception: MarshalException");
      
      } catch(Throwable e) {
         //
         // Missing X509IssuerName element
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }
}
