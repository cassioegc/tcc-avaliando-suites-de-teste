/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 13 23:08:00 GMT 2021
 */

package org.apache.jcp.xml.dsig.internal.dom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.security.Provider;
import java.util.LinkedList;
import java.util.List;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.metadata.IIOMetadataNode;
import javax.xml.crypto.KeySelector;
import javax.xml.crypto.MarshalException;
import javax.xml.crypto.XMLCryptoContext;
import javax.xml.crypto.XMLStructure;
import javax.xml.crypto.dom.DOMCryptoContext;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.dom.DOMValidateContext;
import javax.xml.crypto.dsig.keyinfo.KeyInfo;
import org.apache.jcp.xml.dsig.internal.dom.DOMHMACSignatureMethod;
import org.apache.jcp.xml.dsig.internal.dom.DOMKeyInfo;
import org.apache.jcp.xml.dsig.internal.dom.DOMSignatureMethod;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DOMKeyInfo_ESTest extends DOMKeyInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "BBGK4R.]");
      dOMKeyInfo0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, (String) null);
      String string0 = dOMKeyInfo0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "");
      String string0 = dOMKeyInfo0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        DOMKeyInfo.getContent((KeyInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DOMKeyInfo dOMKeyInfo0 = null;
      try {
        dOMKeyInfo0 = new DOMKeyInfo((Element) null, (XMLCryptoContext) null, (Provider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Ct{|QpN#}'9Q(I&t");
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.add(dOMStructure0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, ">kbUqO@j7I/'n|\"z6");
      String string0 = dOMKeyInfo0.getId();
      assertEquals(">kbUqO@j7I/'n|\"z6", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<javax.xml.crypto.dom.DOMStructure> linkedList0 = new LinkedList<javax.xml.crypto.dom.DOMStructure>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("Ct{|QpN#}'9Q(I&t");
      javax.xml.crypto.dom.DOMStructure dOMStructure0 = new javax.xml.crypto.dom.DOMStructure(iIOMetadataNode0);
      linkedList0.add(dOMStructure0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, ">kbUqO@j7I/'n|\"z6");
      List<XMLStructure> list0 = dOMKeyInfo0.getContent();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "");
      dOMKeyInfo0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "BBGK4R.]");
      linkedList0.add(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo1 = new DOMKeyInfo(linkedList0, "com.sun.org.apache.xml.internal.security.useC14N11");
      boolean boolean0 = dOMKeyInfo0.equals(dOMKeyInfo1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "");
      boolean boolean0 = dOMKeyInfo0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "");
      boolean boolean0 = dOMKeyInfo0.equals(dOMKeyInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("");
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "");
      byte[] byteArray0 = new byte[21];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      KeySelector keySelector0 = KeySelector.singletonKeySelector(secretKeySpec0);
      DOMSignContext dOMSignContext0 = new DOMSignContext(keySelector0, iIOMetadataNode0, iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMKeyInfo0.marshal((XMLStructure) null, (XMLCryptoContext) dOMSignContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // parent is null
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "");
      byte[] byteArray0 = new byte[4];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      KeySelector keySelector0 = KeySelector.singletonKeySelector(secretKeySpec0);
      DOMSignContext dOMSignContext0 = new DOMSignContext(keySelector0, iIOMetadataNode0, iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMKeyInfo0.marshal((XMLStructure) dOMSignatureMethod_RIPEMD160withRSAandMGF1_0, (XMLCryptoContext) dOMSignContext0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // parent must be of type DOMStructure
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMKeyInfo dOMKeyInfo0 = null;
      try {
        dOMKeyInfo0 = new DOMKeyInfo(iIOMetadataNode0, (XMLCryptoContext) null, (Provider) null);
        fail("Expecting exception: MarshalException");
      
      } catch(Throwable e) {
         //
         // KeyInfo must contain at least one type
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<DOMHMACSignatureMethod.SHA1> linkedList0 = new LinkedList<DOMHMACSignatureMethod.SHA1>();
      linkedList0.add((DOMHMACSignatureMethod.SHA1) null);
      DOMKeyInfo dOMKeyInfo0 = null;
      try {
        dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "d");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // content[0] is not a valid KeyInfo type
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withECDSA> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withECDSA>();
      DOMKeyInfo dOMKeyInfo0 = null;
      try {
        dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "hYb8wIJ/0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // content cannot be empty
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DOMKeyInfo dOMKeyInfo0 = null;
      try {
        dOMKeyInfo0 = new DOMKeyInfo((List<? extends XMLStructure>) null, "@r+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // content cannot be null
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMKeyInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "");
      byte[] byteArray0 = new byte[3];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      KeySelector keySelector0 = KeySelector.singletonKeySelector(secretKeySpec0);
      DOMSignContext dOMSignContext0 = new DOMSignContext(keySelector0, iIOMetadataNode0, iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMKeyInfo0.marshal((Node) iIOMetadataNode0, "", (DOMCryptoContext) dOMSignContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "");
      List<XMLStructure> list0 = DOMKeyInfo.getContent((KeyInfo) dOMKeyInfo0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "");
      byte[] byteArray0 = new byte[3];
      SecretKeySpec secretKeySpec0 = new SecretKeySpec(byteArray0, "");
      DOMValidateContext dOMValidateContext0 = new DOMValidateContext(secretKeySpec0, iIOMetadataNode0);
      // Undeclared exception!
      try { 
        dOMKeyInfo0.marshal((Node) iIOMetadataNode0, (Node) iIOMetadataNode0, "com.sun.org.apache.xml.internal.security.useC14N11", (DOMCryptoContext) dOMValidateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.jcp.xml.dsig.internal.dom.DOMUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1> linkedList0 = new LinkedList<DOMSignatureMethod.RIPEMD160withRSAandMGF1>();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      DOMSignatureMethod.RIPEMD160withRSAandMGF1 dOMSignatureMethod_RIPEMD160withRSAandMGF1_0 = new DOMSignatureMethod.RIPEMD160withRSAandMGF1(iIOMetadataNode0);
      linkedList0.offer(dOMSignatureMethod_RIPEMD160withRSAandMGF1_0);
      DOMKeyInfo dOMKeyInfo0 = new DOMKeyInfo(linkedList0, "BBGK4R.]");
      DOMKeyInfo dOMKeyInfo1 = new DOMKeyInfo(linkedList0, "com.sun.org.apache.xml.internal.security.useC14N11");
      boolean boolean0 = dOMKeyInfo0.equals(dOMKeyInfo1);
      assertFalse(boolean0);
  }
}
