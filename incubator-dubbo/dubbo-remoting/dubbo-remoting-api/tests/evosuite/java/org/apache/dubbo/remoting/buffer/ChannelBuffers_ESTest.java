/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 03:21:22 GMT 2021
 */

package org.apache.dubbo.remoting.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer;
import org.apache.dubbo.remoting.buffer.ChannelBuffer;
import org.apache.dubbo.remoting.buffer.ChannelBufferFactory;
import org.apache.dubbo.remoting.buffer.ChannelBuffers;
import org.apache.dubbo.remoting.buffer.DirectChannelBufferFactory;
import org.apache.dubbo.remoting.buffer.HeapChannelBuffer;
import org.apache.dubbo.remoting.buffer.HeapChannelBufferFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChannelBuffers_ESTest extends ChannelBuffers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1595);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)115;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte) (-120);
      byteArray1[4] = (byte) (-80);
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)0;
      byteBufferBackedChannelBuffer0.readBytes(byteArray1);
      byteArray0[0] = (byte)31;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      ChannelBuffers.compare(byteBufferBackedChannelBuffer0, heapChannelBuffer0);
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteBuffer0);
      ChannelBuffers.compare(heapChannelBuffer0, channelBuffer0);
      ChannelBuffers.equals((ChannelBuffer) byteBufferBackedChannelBuffer0, (ChannelBuffer) byteBufferBackedChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1595);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-5);
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      ChannelBuffers.compare(byteBufferBackedChannelBuffer0, heapChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1595);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      ChannelBuffers.compare(byteBufferBackedChannelBuffer0, heapChannelBuffer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChannelBuffers.buffer(0);
      ChannelBuffers.dynamicBuffer();
      ChannelBuffers.dynamicBuffer();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte)99;
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer(byteArray0, 1, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChannelBuffers.directBuffer((byte)0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)40;
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(7, channelBuffer0.capacity());
      assertEquals(7, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(7, channelBuffer0.readableBytes());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)40, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(channelBuffer0);
      
      boolean boolean0 = channelBuffer0.writable();
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(7, channelBuffer0.capacity());
      assertEquals(7, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(7, channelBuffer0.readableBytes());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)40, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int0 = ChannelBuffers.hasCode(channelBuffer0);
      assertEquals(1744001975, int0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(7, channelBuffer0.capacity());
      assertEquals(7, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(7, channelBuffer0.readableBytes());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)40, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      ChannelBuffers.buffer(1744001975);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChannelBuffer channelBuffer0 = ChannelBuffers.dynamicBuffer();
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertNotNull(channelBuffer0);
      
      channelBuffer0.skipBytes((-20));
      assertTrue(channelBuffer0.hasArray());
      assertEquals((-20), channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(20, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      
      // Undeclared exception!
      try { 
        ChannelBuffers.hasCode(channelBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      assertNotNull(heapChannelBufferFactory0);
      
      // Undeclared exception!
      ChannelBuffers.dynamicBuffer(1744031643, (ChannelBufferFactory) heapChannelBufferFactory0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)3;
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(4, channelBuffer0.writerIndex());
      assertEquals(4, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(4, channelBuffer0.readableBytes());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3}, byteArray0);
      assertNotNull(channelBuffer0);
      
      MockFile mockFile0 = new MockFile("vtDtHbOz*");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("vtDtHbOz*", "vtDtHbOz*", (File) mockFile0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("vtDtHbOz*", mockFile0.toString());
      assertEquals("vtDtHbOz*", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/home/cassioegc/incubator-dubbo/dubbo-remoting/dubbo-remoting-api/vtDtHbOz*/vtDtHbOz*0vtDtHbOz*", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/cassioegc/incubator-dubbo/dubbo-remoting/dubbo-remoting-api/vtDtHbOz*", file0.getParent());
      assertEquals("vtDtHbOz*0vtDtHbOz*", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertFalse(file0.equals((Object)mockFile0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      channelBuffer0.readBytes((OutputStream) mockPrintStream0, (-1994));
      assertEquals(4, byteArray0.length);
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals((-1994), channelBuffer0.readerIndex());
      assertEquals(4, channelBuffer0.writerIndex());
      assertEquals(4, channelBuffer0.capacity());
      assertEquals(1998, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("vtDtHbOz*", mockFile0.toString());
      assertEquals("vtDtHbOz*", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals("/home/cassioegc/incubator-dubbo/dubbo-remoting/dubbo-remoting-api/vtDtHbOz*/vtDtHbOz*0vtDtHbOz*", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("/home/cassioegc/incubator-dubbo/dubbo-remoting/dubbo-remoting-api/vtDtHbOz*", file0.getParent());
      assertEquals("vtDtHbOz*0vtDtHbOz*", file0.getName());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3}, byteArray0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      
      // Undeclared exception!
      try { 
        ChannelBuffers.equals(channelBuffer0, channelBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)55;
      byte byte0 = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)40;
      byte byte1 = (byte)31;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)1;
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(7, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(7, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(7, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertArrayEquals(new byte[] {(byte)8, (byte)55, (byte) (-80), (byte)40, (byte)31, (byte) (-4), (byte)1}, byteArray0);
      assertNotNull(channelBuffer0);
      
      channelBuffer0.skipBytes((-1050214028));
      assertEquals(7, byteArray0.length);
      assertEquals(7, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals((-1050214028), channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(7, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertEquals(1050214035, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertArrayEquals(new byte[] {(byte)8, (byte)55, (byte) (-80), (byte)40, (byte)31, (byte) (-4), (byte)1}, byteArray0);
      
      // Undeclared exception!
      try { 
        ChannelBuffers.compare(channelBuffer0, channelBuffer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 2041139634;
      // Undeclared exception!
      ChannelBuffers.directBuffer(2041139634);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte) (-31);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)93, (byte) (-45), (byte) (-24), (byte)17, (byte) (-31)}, byteArray0);
      assertNotNull(byteBuffer0);
      
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteBuffer0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, channelBuffer0.readableBytes());
      assertEquals(8, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(8, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)93, (byte) (-45), (byte) (-24), (byte)17, (byte) (-31)}, byteArray0);
      assertNotNull(channelBuffer0);
      
      int int0 = ChannelBuffers.compare(channelBuffer0, channelBuffer0);
      assertEquals(0, int0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, channelBuffer0.readableBytes());
      assertEquals(8, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(8, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)93, (byte) (-45), (byte) (-24), (byte)17, (byte) (-31)}, byteArray0);
      
      boolean boolean0 = ChannelBuffers.equals(channelBuffer0, channelBuffer0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, channelBuffer0.readableBytes());
      assertEquals(8, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(8, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)93, (byte) (-45), (byte) (-24), (byte)17, (byte) (-31)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1830576846;
      // Undeclared exception!
      ChannelBuffers.dynamicBuffer(1830576846);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ChannelBuffer channelBuffer0 = ChannelBuffers.buffer(0);
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertNotNull(channelBuffer0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.dynamicBuffer(690);
      assertFalse(channelBuffer1.isDirect());
      assertEquals(690, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.readableBytes());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.writerIndex());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertNotNull(channelBuffer1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertArrayEquals(new byte[] {(byte) (-51)}, byteArray0);
      assertNotNull(byteBuffer0);
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertEquals(1, byteArray0.length);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertEquals(1, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(1, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(1, byteBufferBackedChannelBuffer0.capacity());
      assertArrayEquals(new byte[] {(byte) (-51)}, byteArray0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer1 = new ByteBufferBackedChannelBuffer(byteBufferBackedChannelBuffer0);
      assertEquals(1, byteArray0.length);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertEquals(1, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(1, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(1, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer1.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer1.arrayOffset());
      assertEquals(1, byteBufferBackedChannelBuffer1.capacity());
      assertTrue(byteBufferBackedChannelBuffer1.readable());
      assertEquals(1, byteBufferBackedChannelBuffer1.readableBytes());
      assertEquals(1, byteBufferBackedChannelBuffer1.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer1.readerIndex());
      assertTrue(byteBufferBackedChannelBuffer1.hasArray());
      assertArrayEquals(new byte[] {(byte) (-51)}, byteArray0);
      assertNotNull(byteBufferBackedChannelBuffer1);
      assertTrue(byteBufferBackedChannelBuffer1.equals((Object)byteBufferBackedChannelBuffer0));
      
      int int0 = ChannelBuffers.compare(byteBufferBackedChannelBuffer1, byteBufferBackedChannelBuffer0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertTrue(byteBuffer0.hasArray());
      assertEquals(1, byteBuffer0.remaining());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertEquals(1, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(1, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(1, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer1.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer1.arrayOffset());
      assertEquals(1, byteBufferBackedChannelBuffer1.capacity());
      assertTrue(byteBufferBackedChannelBuffer1.readable());
      assertEquals(1, byteBufferBackedChannelBuffer1.readableBytes());
      assertEquals(1, byteBufferBackedChannelBuffer1.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer1.readerIndex());
      assertTrue(byteBufferBackedChannelBuffer1.hasArray());
      assertArrayEquals(new byte[] {(byte) (-51)}, byteArray0);
      assertNotSame(byteBufferBackedChannelBuffer0, byteBufferBackedChannelBuffer1);
      assertNotSame(byteBufferBackedChannelBuffer1, byteBufferBackedChannelBuffer0);
      assertTrue(byteBufferBackedChannelBuffer0.equals((Object)byteBufferBackedChannelBuffer1));
      assertTrue(byteBufferBackedChannelBuffer1.equals((Object)byteBufferBackedChannelBuffer0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-10);
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertArrayEquals(new byte[] {(byte)2, (byte) (-10)}, byteArray0);
      assertNotNull(channelBuffer0);
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(channelBuffer1.readable());
      assertFalse(channelBuffer1.isDirect());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(2, channelBuffer1.writerIndex());
      assertEquals(2, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(2, channelBuffer1.readableBytes());
      assertArrayEquals(new byte[] {(byte)2, (byte) (-10)}, byteArray0);
      assertNotSame(channelBuffer1, channelBuffer0);
      assertNotNull(channelBuffer1);
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      
      boolean boolean0 = ChannelBuffers.equals(channelBuffer1, channelBuffer0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer1.readable());
      assertFalse(channelBuffer1.isDirect());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(2, channelBuffer1.writerIndex());
      assertEquals(2, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(2, channelBuffer1.readableBytes());
      assertArrayEquals(new byte[] {(byte)2, (byte) (-10)}, byteArray0);
      assertNotSame(channelBuffer0, channelBuffer1);
      assertNotSame(channelBuffer1, channelBuffer0);
      assertTrue(channelBuffer0.equals((Object)channelBuffer1));
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      
      int int0 = ChannelBuffers.compare(channelBuffer0, channelBuffer0);
      assertEquals(0, int0);
      assertEquals(2, byteArray0.length);
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertArrayEquals(new byte[] {(byte)2, (byte) (-10)}, byteArray0);
      assertNotSame(channelBuffer0, channelBuffer1);
      assertTrue(channelBuffer0.equals((Object)channelBuffer1));
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.dynamicBuffer(0);
      assertEquals(0, channelBuffer2.capacity());
      assertEquals(0, channelBuffer2.readerIndex());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertEquals(0, channelBuffer2.writerIndex());
      assertFalse(channelBuffer2.isDirect());
      assertTrue(channelBuffer2.hasArray());
      assertEquals(0, channelBuffer2.readableBytes());
      assertNotNull(channelBuffer2);
      
      ChannelBuffer channelBuffer3 = ChannelBuffers.buffer((byte)2);
      assertFalse(channelBuffer3.isDirect());
      assertEquals(2, channelBuffer3.capacity());
      assertEquals(0, channelBuffer3.writerIndex());
      assertFalse(channelBuffer3.readable());
      assertEquals(0, channelBuffer3.readerIndex());
      assertEquals(0, channelBuffer3.arrayOffset());
      assertEquals(0, channelBuffer3.readableBytes());
      assertTrue(channelBuffer3.hasArray());
      assertNotSame(channelBuffer3, channelBuffer1);
      assertNotSame(channelBuffer3, channelBuffer0);
      assertNotNull(channelBuffer3);
      assertFalse(channelBuffer3.equals((Object)channelBuffer1));
      assertFalse(channelBuffer3.equals((Object)channelBuffer0));
      
      ChannelBuffer channelBuffer4 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(channelBuffer4.isDirect());
      assertEquals(2, channelBuffer4.capacity());
      assertTrue(channelBuffer4.readable());
      assertEquals(0, channelBuffer4.arrayOffset());
      assertEquals(2, channelBuffer4.readableBytes());
      assertEquals(0, channelBuffer4.readerIndex());
      assertEquals(2, channelBuffer4.writerIndex());
      assertTrue(channelBuffer4.hasArray());
      assertArrayEquals(new byte[] {(byte)2, (byte) (-10)}, byteArray0);
      assertNotSame(channelBuffer4, channelBuffer0);
      assertNotSame(channelBuffer4, channelBuffer3);
      assertNotSame(channelBuffer4, channelBuffer1);
      assertNotNull(channelBuffer4);
      assertTrue(channelBuffer4.equals((Object)channelBuffer0));
      assertTrue(channelBuffer4.equals((Object)channelBuffer1));
      assertFalse(channelBuffer4.equals((Object)channelBuffer3));
      
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer(byteArray0, 40, 3542);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ChannelBuffer channelBuffer0 = ChannelBuffers.directBuffer(2537);
      assertEquals(2537, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readableBytes());
      assertNotNull(channelBuffer0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2537);
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2537 cap=2537]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(2537, byteBuffer0.remaining());
      assertEquals(2537, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2537, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
      
      ByteBuffer byteBuffer1 = byteBuffer0.putInt(1612);
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=2537 cap=2537]", byteBuffer0.toString());
      assertEquals(2537, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.position());
      assertEquals(2537, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2533, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(2533, byteBuffer1.remaining());
      assertEquals(2537, byteBuffer1.capacity());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(2537, byteBuffer1.limit());
      assertEquals(4, byteBuffer1.position());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=2537 cap=2537]", byteBuffer1.toString());
      assertTrue(byteBuffer1.hasArray());
      assertSame(byteBuffer0, byteBuffer1);
      assertSame(byteBuffer1, byteBuffer0);
      assertNotNull(byteBuffer1);
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.wrappedBuffer(byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=2537 cap=2537]", byteBuffer0.toString());
      assertEquals(2537, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.position());
      assertEquals(2537, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2533, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(2533, channelBuffer1.capacity());
      assertTrue(channelBuffer1.readable());
      assertEquals(2533, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(2533, channelBuffer1.writerIndex());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertSame(byteBuffer0, byteBuffer1);
      assertNotNull(channelBuffer1);
      
      ChannelBufferFactory channelBufferFactory0 = HeapChannelBufferFactory.getInstance();
      assertNotNull(channelBufferFactory0);
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.dynamicBuffer(1612, channelBufferFactory0);
      assertEquals(1612, channelBuffer2.capacity());
      assertTrue(channelBuffer2.hasArray());
      assertEquals(0, channelBuffer2.readableBytes());
      assertEquals(0, channelBuffer2.writerIndex());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertFalse(channelBuffer2.isDirect());
      assertEquals(0, channelBuffer2.readerIndex());
      assertNotNull(channelBuffer2);
      
      ChannelBuffer channelBuffer3 = ChannelBuffers.wrappedBuffer(byteBuffer0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=2537 cap=2537]", byteBuffer0.toString());
      assertEquals(2537, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.position());
      assertEquals(2537, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2533, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, channelBuffer3.readerIndex());
      assertEquals(2533, channelBuffer3.writerIndex());
      assertEquals(2533, channelBuffer3.readableBytes());
      assertEquals(0, channelBuffer3.arrayOffset());
      assertFalse(channelBuffer3.isDirect());
      assertEquals(2533, channelBuffer3.capacity());
      assertTrue(channelBuffer3.hasArray());
      assertTrue(channelBuffer3.readable());
      assertSame(byteBuffer0, byteBuffer1);
      assertNotSame(channelBuffer3, channelBuffer1);
      assertNotNull(channelBuffer3);
      assertTrue(channelBuffer3.equals((Object)channelBuffer1));
      
      int int0 = (-2482);
      // Undeclared exception!
      try { 
        ChannelBuffers.directBuffer((-2482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -2482
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte) (-75), (byte)71, (byte)0, (byte) (-48), (byte)0}, byteArray0);
      assertNotNull(byteBuffer0);
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertEquals(5, byteArray0.length);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(5, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(5, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte) (-75), (byte)71, (byte)0, (byte) (-48), (byte)0}, byteArray0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer1 = new ByteBufferBackedChannelBuffer(byteBufferBackedChannelBuffer0);
      assertEquals(5, byteArray0.length);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(5, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(5, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertTrue(byteBufferBackedChannelBuffer1.hasArray());
      assertTrue(byteBufferBackedChannelBuffer1.readable());
      assertEquals(5, byteBufferBackedChannelBuffer1.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer1.readerIndex());
      assertFalse(byteBufferBackedChannelBuffer1.isDirect());
      assertEquals(5, byteBufferBackedChannelBuffer1.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer1.arrayOffset());
      assertEquals(5, byteBufferBackedChannelBuffer1.capacity());
      assertArrayEquals(new byte[] {(byte) (-75), (byte)71, (byte)0, (byte) (-48), (byte)0}, byteArray0);
      assertNotNull(byteBufferBackedChannelBuffer1);
      assertTrue(byteBufferBackedChannelBuffer1.equals((Object)byteBufferBackedChannelBuffer0));
      
      ChannelBuffer channelBuffer0 = byteBufferBackedChannelBuffer0.readBytes(0);
      assertEquals(5, byteArray0.length);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(5, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(5, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertArrayEquals(new byte[] {(byte) (-75), (byte)71, (byte)0, (byte) (-48), (byte)0}, byteArray0);
      assertNotSame(byteBufferBackedChannelBuffer0, byteBufferBackedChannelBuffer1);
      assertNotNull(channelBuffer0);
      assertTrue(byteBufferBackedChannelBuffer0.equals((Object)byteBufferBackedChannelBuffer1));
      
      int int0 = ChannelBuffers.compare(byteBufferBackedChannelBuffer1, channelBuffer0);
      assertEquals(5, int0);
      assertEquals(5, byteArray0.length);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(5, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertEquals(5, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertTrue(byteBufferBackedChannelBuffer1.hasArray());
      assertTrue(byteBufferBackedChannelBuffer1.readable());
      assertEquals(5, byteBufferBackedChannelBuffer1.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer1.readerIndex());
      assertFalse(byteBufferBackedChannelBuffer1.isDirect());
      assertEquals(5, byteBufferBackedChannelBuffer1.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer1.arrayOffset());
      assertEquals(5, byteBufferBackedChannelBuffer1.capacity());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertArrayEquals(new byte[] {(byte) (-75), (byte)71, (byte)0, (byte) (-48), (byte)0}, byteArray0);
      assertNotSame(byteBufferBackedChannelBuffer0, byteBufferBackedChannelBuffer1);
      assertNotSame(byteBufferBackedChannelBuffer1, byteBufferBackedChannelBuffer0);
      assertTrue(byteBufferBackedChannelBuffer0.equals((Object)byteBufferBackedChannelBuffer1));
      assertTrue(byteBufferBackedChannelBuffer1.equals((Object)byteBufferBackedChannelBuffer0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChannelBuffers.compare((ChannelBuffer) null, (ChannelBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ChannelBuffer channelBuffer0 = null;
      // Undeclared exception!
      try { 
        ChannelBuffers.equals((ChannelBuffer) null, (ChannelBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertNotNull(heapChannelBuffer0);
      
      heapChannelBuffer0.discardReadBytes();
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.capacity());
      
      boolean boolean0 = ChannelBuffers.equals((ChannelBuffer) heapChannelBuffer0, (ChannelBuffer) heapChannelBuffer0);
      assertTrue(boolean0);
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.capacity());
      
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-30);
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte)16, (byte) (-30)}, byteArray0);
      assertNotNull(channelBuffer0);
      
      boolean boolean0 = ChannelBuffers.equals(channelBuffer0, channelBuffer0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte)16, (byte) (-30)}, byteArray0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(2, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertArrayEquals(new byte[] {(byte)16, (byte) (-30)}, byteArray0);
      assertNotNull(byteBuffer0);
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(2, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(2, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(2, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte)16, (byte) (-30)}, byteArray0);
      assertNotNull(byteBufferBackedChannelBuffer0);
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer1 = new ByteBufferBackedChannelBuffer(byteBufferBackedChannelBuffer0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(2, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(2, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(2, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer1.readerIndex());
      assertEquals(2, byteBufferBackedChannelBuffer1.capacity());
      assertFalse(byteBufferBackedChannelBuffer1.isDirect());
      assertEquals(2, byteBufferBackedChannelBuffer1.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer1.arrayOffset());
      assertEquals(2, byteBufferBackedChannelBuffer1.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer1.hasArray());
      assertTrue(byteBufferBackedChannelBuffer1.readable());
      assertArrayEquals(new byte[] {(byte)16, (byte) (-30)}, byteArray0);
      assertNotNull(byteBufferBackedChannelBuffer1);
      assertTrue(byteBufferBackedChannelBuffer1.equals((Object)byteBufferBackedChannelBuffer0));
      
      ChannelBufferFactory channelBufferFactory0 = byteBufferBackedChannelBuffer1.factory();
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(2, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(2, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(2, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer1.readerIndex());
      assertEquals(2, byteBufferBackedChannelBuffer1.capacity());
      assertFalse(byteBufferBackedChannelBuffer1.isDirect());
      assertEquals(2, byteBufferBackedChannelBuffer1.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer1.arrayOffset());
      assertEquals(2, byteBufferBackedChannelBuffer1.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer1.hasArray());
      assertTrue(byteBufferBackedChannelBuffer1.readable());
      assertArrayEquals(new byte[] {(byte)16, (byte) (-30)}, byteArray0);
      assertNotSame(byteBufferBackedChannelBuffer0, byteBufferBackedChannelBuffer1);
      assertNotSame(byteBufferBackedChannelBuffer1, byteBufferBackedChannelBuffer0);
      assertNotNull(channelBufferFactory0);
      assertTrue(byteBufferBackedChannelBuffer0.equals((Object)byteBufferBackedChannelBuffer1));
      assertTrue(byteBufferBackedChannelBuffer1.equals((Object)byteBufferBackedChannelBuffer0));
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.dynamicBuffer(167, channelBufferFactory0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(2, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(2, byteBufferBackedChannelBuffer0.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertEquals(2, byteBufferBackedChannelBuffer0.capacity());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(0, byteBufferBackedChannelBuffer1.readerIndex());
      assertEquals(2, byteBufferBackedChannelBuffer1.capacity());
      assertFalse(byteBufferBackedChannelBuffer1.isDirect());
      assertEquals(2, byteBufferBackedChannelBuffer1.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer1.arrayOffset());
      assertEquals(2, byteBufferBackedChannelBuffer1.writerIndex());
      assertTrue(byteBufferBackedChannelBuffer1.hasArray());
      assertTrue(byteBufferBackedChannelBuffer1.readable());
      assertTrue(channelBuffer1.hasArray());
      assertFalse(channelBuffer1.isDirect());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(167, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.writerIndex());
      assertArrayEquals(new byte[] {(byte)16, (byte) (-30)}, byteArray0);
      assertNotSame(byteBufferBackedChannelBuffer0, byteBufferBackedChannelBuffer1);
      assertNotSame(byteBufferBackedChannelBuffer1, byteBufferBackedChannelBuffer0);
      assertNotNull(channelBuffer1);
      assertTrue(byteBufferBackedChannelBuffer0.equals((Object)byteBufferBackedChannelBuffer1));
      assertTrue(byteBufferBackedChannelBuffer1.equals((Object)byteBufferBackedChannelBuffer0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-21);
      byteArray0[0] = (byte) (-21);
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(1, channelBuffer0.readableBytes());
      assertEquals(1, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertArrayEquals(new byte[] {(byte) (-21)}, byteArray0);
      assertNotNull(channelBuffer0);
      
      int int0 = ChannelBuffers.compare(channelBuffer0, channelBuffer0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(1, channelBuffer0.readableBytes());
      assertEquals(1, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertArrayEquals(new byte[] {(byte) (-21)}, byteArray0);
      
      int int1 = 64;
      ChannelBuffer channelBuffer1 = ChannelBuffers.directBuffer(64);
      assertEquals(64, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.isDirect());
      assertFalse(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.readable());
      assertNotNull(channelBuffer1);
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.directBuffer(0);
      assertEquals(0, channelBuffer2.readerIndex());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertFalse(channelBuffer2.isDirect());
      assertEquals(0, channelBuffer2.capacity());
      assertTrue(channelBuffer2.hasArray());
      assertEquals(0, channelBuffer2.writerIndex());
      assertEquals(0, channelBuffer2.readableBytes());
      assertNotSame(channelBuffer2, channelBuffer0);
      assertNotNull(channelBuffer2);
      assertFalse(channelBuffer2.equals((Object)channelBuffer0));
      
      boolean boolean0 = ChannelBuffers.equals(channelBuffer1, channelBuffer0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(1, channelBuffer0.readableBytes());
      assertEquals(1, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertEquals(64, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.isDirect());
      assertFalse(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.readable());
      assertArrayEquals(new byte[] {(byte) (-21)}, byteArray0);
      assertNotSame(channelBuffer0, channelBuffer2);
      assertFalse(channelBuffer0.equals((Object)channelBuffer2));
      
      // Undeclared exception!
      try { 
        ChannelBuffers.directBuffer((-457));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -457
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ChannelBuffer channelBuffer0 = ChannelBuffers.dynamicBuffer();
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readableBytes());
      assertNotNull(channelBuffer0);
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.dynamicBuffer();
      assertEquals(256, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.readerIndex());
      assertFalse(channelBuffer1.readable());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.readableBytes());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.writerIndex());
      assertNotSame(channelBuffer1, channelBuffer0);
      assertNotNull(channelBuffer1);
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte) (-39);
      byteArray0[8] = (byte)0;
      ChannelBuffer channelBuffer2 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, channelBuffer2.writerIndex());
      assertEquals(0, channelBuffer2.readerIndex());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertTrue(channelBuffer2.hasArray());
      assertTrue(channelBuffer2.readable());
      assertEquals(9, channelBuffer2.capacity());
      assertFalse(channelBuffer2.isDirect());
      assertEquals(9, channelBuffer2.readableBytes());
      assertArrayEquals(new byte[] {(byte)114, (byte)48, (byte) (-65), (byte)78, (byte)84, (byte)0, (byte)110, (byte) (-39), (byte)0}, byteArray0);
      assertNotNull(channelBuffer2);
      
      boolean boolean0 = ChannelBuffers.equals(channelBuffer2, channelBuffer0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(9, channelBuffer2.writerIndex());
      assertEquals(0, channelBuffer2.readerIndex());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertTrue(channelBuffer2.hasArray());
      assertTrue(channelBuffer2.readable());
      assertEquals(9, channelBuffer2.capacity());
      assertFalse(channelBuffer2.isDirect());
      assertEquals(9, channelBuffer2.readableBytes());
      assertArrayEquals(new byte[] {(byte)114, (byte)48, (byte) (-65), (byte)78, (byte)84, (byte)0, (byte)110, (byte) (-39), (byte)0}, byteArray0);
      assertNotSame(channelBuffer0, channelBuffer1);
      assertTrue(channelBuffer0.equals((Object)channelBuffer1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChannelBuffers.dynamicBuffer((-1378));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // estimatedLength: -1378
         //
         verifyException("org.apache.dubbo.remoting.buffer.DynamicChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ChannelBuffer channelBuffer0 = ChannelBuffers.dynamicBuffer();
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertNotNull(channelBuffer0);
      
      int int0 = ChannelBuffers.hasCode(channelBuffer0);
      assertEquals(1, int0);
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      assertNotNull(directChannelBufferFactory0);
      
      ChannelBuffer channelBuffer1 = directChannelBufferFactory0.getBuffer(2044);
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.isDirect());
      assertFalse(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(2044, channelBuffer1.capacity());
      assertNotNull(channelBuffer1);
      
      int int1 = ChannelBuffers.compare(channelBuffer0, channelBuffer1);
      assertEquals(0, int1);
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.isDirect());
      assertFalse(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(2044, channelBuffer1.capacity());
      assertFalse(int1 == int0);
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.dynamicBuffer(2226, (ChannelBufferFactory) directChannelBufferFactory0);
      assertEquals(2226, channelBuffer2.capacity());
      assertTrue(channelBuffer2.isDirect());
      assertFalse(channelBuffer2.hasArray());
      assertEquals(0, channelBuffer2.readerIndex());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.readableBytes());
      assertEquals(0, channelBuffer2.writerIndex());
      assertNotSame(channelBuffer2, channelBuffer0);
      assertNotNull(channelBuffer2);
      assertTrue(channelBuffer2.equals((Object)channelBuffer0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(channelBuffer0);
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.dynamicBuffer();
      assertEquals(256, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertTrue(channelBuffer1.hasArray());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.readerIndex());
      assertNotNull(channelBuffer1);
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.dynamicBuffer();
      assertEquals(0, channelBuffer2.readableBytes());
      assertFalse(channelBuffer2.isDirect());
      assertTrue(channelBuffer2.hasArray());
      assertEquals(256, channelBuffer2.capacity());
      assertEquals(0, channelBuffer2.readerIndex());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertEquals(0, channelBuffer2.writerIndex());
      assertNotSame(channelBuffer2, channelBuffer1);
      assertNotNull(channelBuffer2);
      assertTrue(channelBuffer2.equals((Object)channelBuffer1));
      
      ChannelBuffer channelBuffer3 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, channelBuffer3.capacity());
      assertFalse(channelBuffer3.isDirect());
      assertFalse(channelBuffer3.readable());
      assertEquals(0, channelBuffer3.arrayOffset());
      assertEquals(0, channelBuffer3.readableBytes());
      assertTrue(channelBuffer3.hasArray());
      assertEquals(0, channelBuffer3.writerIndex());
      assertEquals(0, channelBuffer3.readerIndex());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertSame(channelBuffer3, channelBuffer0);
      assertNotNull(channelBuffer3);
      
      int int0 = ChannelBuffers.compare(channelBuffer2, channelBuffer2);
      assertEquals(0, int0);
      assertEquals(0, channelBuffer2.readableBytes());
      assertFalse(channelBuffer2.isDirect());
      assertTrue(channelBuffer2.hasArray());
      assertEquals(256, channelBuffer2.capacity());
      assertEquals(0, channelBuffer2.readerIndex());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertEquals(0, channelBuffer2.writerIndex());
      assertNotSame(channelBuffer2, channelBuffer1);
      assertTrue(channelBuffer2.equals((Object)channelBuffer1));
      
      String string0 = "^@9]1(g@!7";
      // Undeclared exception!
      try { 
        Charset.forName("^@9]1(g@!7");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ^@9]1(g@!7
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      assertNotNull(directChannelBufferFactory0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'v';
      charArray0[2] = '?';
      charArray0[3] = '';
      charArray0[4] = 'r';
      charArray0[5] = ' ';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.capacity());
      assertEquals("lv?r ", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertArrayEquals(new char[] {'l', 'v', '?', '', 'r', ' '}, charArray0);
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertEquals(6, charArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(6, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(6, byteBuffer0.limit());
      assertEquals(6, byteBuffer0.capacity());
      assertArrayEquals(new char[] {'l', 'v', '?', '', 'r', ' '}, charArray0);
      assertNotNull(byteBuffer0);
      
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertEquals(6, charArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(6, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(6, byteBuffer0.limit());
      assertEquals(6, byteBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertEquals(6, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(6, channelBuffer0.readableBytes());
      assertEquals(6, channelBuffer0.capacity());
      assertArrayEquals(new char[] {'l', 'v', '?', '', 'r', ' '}, charArray0);
      assertNotNull(channelBuffer0);
      
      ByteBuffer byteBuffer1 = charset0.encode("4'0anC.up*Gp@|");
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=14 cap=15]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertEquals(15, byteBuffer1.capacity());
      assertEquals(14, byteBuffer1.limit());
      assertTrue(byteBuffer1.hasArray());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(14, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isDirect());
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotNull(byteBuffer1);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      
      ChannelBuffer channelBuffer1 = directChannelBufferFactory0.getBuffer(byteBuffer1);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=14 cap=15]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertEquals(15, byteBuffer1.capacity());
      assertEquals(14, byteBuffer1.limit());
      assertTrue(byteBuffer1.hasArray());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(14, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isDirect());
      assertTrue(channelBuffer1.readable());
      assertEquals(14, channelBuffer1.writerIndex());
      assertEquals(14, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.isDirect());
      assertFalse(channelBuffer1.hasArray());
      assertEquals(14, channelBuffer1.readableBytes());
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotSame(channelBuffer1, channelBuffer0);
      assertNotNull(channelBuffer1);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(channelBuffer1.equals((Object)channelBuffer0));
      
      int int0 = ChannelBuffers.hasCode(channelBuffer1);
      assertEquals((-1881203782), int0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=14 cap=15]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertEquals(15, byteBuffer1.capacity());
      assertEquals(14, byteBuffer1.limit());
      assertTrue(byteBuffer1.hasArray());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals(14, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isDirect());
      assertTrue(channelBuffer1.readable());
      assertEquals(14, channelBuffer1.writerIndex());
      assertEquals(14, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.isDirect());
      assertFalse(channelBuffer1.hasArray());
      assertEquals(14, channelBuffer1.readableBytes());
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotSame(channelBuffer1, channelBuffer0);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(channelBuffer1.equals((Object)channelBuffer0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ChannelBuffer channelBuffer0 = ChannelBuffers.dynamicBuffer();
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertNotNull(channelBuffer0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ChannelBuffer channelBuffer1 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertFalse(channelBuffer1.isDirect());
      assertTrue(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(9, channelBuffer1.capacity());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(9, channelBuffer1.writerIndex());
      assertArrayEquals(new byte[] {(byte) (-76), (byte)0, (byte)0, (byte)31, (byte) (-122), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(channelBuffer1);
      
      int int0 = ChannelBuffers.compare(channelBuffer0, channelBuffer0);
      assertEquals(0, int0);
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.buffer((byte)0);
      assertFalse(channelBuffer2.isDirect());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertEquals(0, channelBuffer2.readableBytes());
      assertTrue(channelBuffer2.hasArray());
      assertEquals(0, channelBuffer2.writerIndex());
      assertEquals(0, channelBuffer2.capacity());
      assertEquals(0, channelBuffer2.readerIndex());
      assertNotSame(channelBuffer2, channelBuffer1);
      assertNotNull(channelBuffer2);
      assertFalse(channelBuffer2.equals((Object)channelBuffer1));
      
      HeapChannelBuffer heapChannelBuffer0 = (HeapChannelBuffer)ChannelBuffers.EMPTY_BUFFER;
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertNotSame(heapChannelBuffer0, channelBuffer1);
      assertSame(heapChannelBuffer0, channelBuffer2);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.equals((Object)channelBuffer1));
      
      ChannelBufferFactory channelBufferFactory0 = heapChannelBuffer0.factory();
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertNotSame(heapChannelBuffer0, channelBuffer1);
      assertSame(heapChannelBuffer0, channelBuffer2);
      assertNotNull(channelBufferFactory0);
      assertFalse(heapChannelBuffer0.equals((Object)channelBuffer1));
      
      ChannelBuffer channelBuffer3 = ChannelBuffers.dynamicBuffer(1084, channelBufferFactory0);
      assertEquals(0, channelBuffer3.readableBytes());
      assertEquals(0, channelBuffer3.writerIndex());
      assertFalse(channelBuffer3.readable());
      assertEquals(1084, channelBuffer3.capacity());
      assertTrue(channelBuffer3.hasArray());
      assertEquals(0, channelBuffer3.arrayOffset());
      assertEquals(0, channelBuffer3.readerIndex());
      assertFalse(channelBuffer3.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertNotSame(channelBuffer3, channelBuffer0);
      assertNotSame(heapChannelBuffer0, channelBuffer1);
      assertSame(heapChannelBuffer0, channelBuffer2);
      assertNotNull(channelBuffer3);
      assertTrue(channelBuffer3.equals((Object)channelBuffer0));
      assertFalse(heapChannelBuffer0.equals((Object)channelBuffer1));
      
      int int1 = ChannelBuffers.compare(channelBuffer3, channelBuffer0);
      assertEquals(0, int1);
      assertEquals(0, channelBuffer3.readableBytes());
      assertEquals(0, channelBuffer3.writerIndex());
      assertFalse(channelBuffer3.readable());
      assertEquals(1084, channelBuffer3.capacity());
      assertTrue(channelBuffer3.hasArray());
      assertEquals(0, channelBuffer3.arrayOffset());
      assertEquals(0, channelBuffer3.readerIndex());
      assertFalse(channelBuffer3.isDirect());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertNotSame(channelBuffer3, channelBuffer0);
      assertNotSame(channelBuffer0, channelBuffer3);
      assertNotSame(heapChannelBuffer0, channelBuffer1);
      assertSame(heapChannelBuffer0, channelBuffer2);
      assertTrue(channelBuffer3.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)channelBuffer3));
      assertTrue(int1 == int0);
      assertFalse(heapChannelBuffer0.equals((Object)channelBuffer1));
      
      ChannelBuffer channelBuffer4 = ChannelBuffers.dynamicBuffer();
      assertEquals(0, channelBuffer4.writerIndex());
      assertFalse(channelBuffer4.isDirect());
      assertEquals(0, channelBuffer4.readableBytes());
      assertEquals(0, channelBuffer4.arrayOffset());
      assertEquals(0, channelBuffer4.readerIndex());
      assertEquals(256, channelBuffer4.capacity());
      assertFalse(channelBuffer4.readable());
      assertTrue(channelBuffer4.hasArray());
      assertNotSame(channelBuffer4, channelBuffer0);
      assertNotSame(channelBuffer4, channelBuffer3);
      assertNotNull(channelBuffer4);
      assertTrue(channelBuffer4.equals((Object)channelBuffer0));
      assertTrue(channelBuffer4.equals((Object)channelBuffer3));
      
      ChannelBuffer channelBuffer5 = ChannelBuffers.dynamicBuffer(2258, channelBufferFactory0);
      assertEquals(0, channelBuffer5.readerIndex());
      assertEquals(2258, channelBuffer5.capacity());
      assertFalse(channelBuffer5.readable());
      assertTrue(channelBuffer5.hasArray());
      assertEquals(0, channelBuffer5.readableBytes());
      assertEquals(0, channelBuffer5.writerIndex());
      assertFalse(channelBuffer5.isDirect());
      assertEquals(0, channelBuffer5.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertNotSame(channelBuffer5, channelBuffer3);
      assertNotSame(channelBuffer5, channelBuffer4);
      assertNotSame(channelBuffer5, channelBuffer0);
      assertNotSame(heapChannelBuffer0, channelBuffer1);
      assertSame(heapChannelBuffer0, channelBuffer2);
      assertNotNull(channelBuffer5);
      assertTrue(channelBuffer5.equals((Object)channelBuffer3));
      assertTrue(channelBuffer5.equals((Object)channelBuffer0));
      assertTrue(channelBuffer5.equals((Object)channelBuffer4));
      assertFalse(heapChannelBuffer0.equals((Object)channelBuffer1));
      
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer(byteArray0, 711, (int) (byte) (-122));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = (HeapChannelBuffer)ChannelBuffers.EMPTY_BUFFER;
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertNotNull(heapChannelBuffer0);
      
      boolean boolean0 = ChannelBuffers.equals((ChannelBuffer) heapChannelBuffer0, (ChannelBuffer) heapChannelBuffer0);
      assertTrue(boolean0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        ChannelBuffers.dynamicBuffer((-1), (ChannelBufferFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // estimatedLength: -1
         //
         verifyException("org.apache.dubbo.remoting.buffer.DynamicChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ChannelBufferFactory channelBufferFactory0 = DirectChannelBufferFactory.getInstance();
      assertNotNull(channelBufferFactory0);
      
      ChannelBuffer channelBuffer0 = ChannelBuffers.dynamicBuffer(0, channelBufferFactory0);
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertNotNull(channelBuffer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ChannelBuffer channelBuffer1 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(channelBuffer1.hasArray());
      assertEquals(1, channelBuffer1.writerIndex());
      assertEquals(1, channelBuffer1.readableBytes());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(1, channelBuffer1.capacity());
      assertTrue(channelBuffer1.readable());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(channelBuffer1);
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.directBuffer((byte)0);
      assertEquals(0, channelBuffer2.readableBytes());
      assertEquals(0, channelBuffer2.readerIndex());
      assertTrue(channelBuffer2.hasArray());
      assertEquals(0, channelBuffer2.capacity());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.writerIndex());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertFalse(channelBuffer2.isDirect());
      assertNotSame(channelBuffer2, channelBuffer1);
      assertNotNull(channelBuffer2);
      assertFalse(channelBuffer2.equals((Object)channelBuffer1));
      
      ChannelBuffer channelBuffer3 = ChannelBuffers.dynamicBuffer();
      assertTrue(channelBuffer3.hasArray());
      assertEquals(0, channelBuffer3.readableBytes());
      assertEquals(0, channelBuffer3.writerIndex());
      assertEquals(256, channelBuffer3.capacity());
      assertEquals(0, channelBuffer3.readerIndex());
      assertFalse(channelBuffer3.isDirect());
      assertEquals(0, channelBuffer3.arrayOffset());
      assertFalse(channelBuffer3.readable());
      assertNotSame(channelBuffer3, channelBuffer0);
      assertNotNull(channelBuffer3);
      assertTrue(channelBuffer3.equals((Object)channelBuffer0));
      
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer(byteArray0, 433, 433);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0, (int) (byte)0, 1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(1, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(channelBuffer0);
      
      int int0 = ChannelBuffers.compare(channelBuffer0, channelBuffer0);
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(1, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.dynamicBuffer();
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertTrue(channelBuffer1.hasArray());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(256, channelBuffer1.capacity());
      assertNotNull(channelBuffer1);
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.dynamicBuffer(0);
      assertEquals(0, channelBuffer2.capacity());
      assertEquals(0, channelBuffer2.readerIndex());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertFalse(channelBuffer2.isDirect());
      assertEquals(0, channelBuffer2.readableBytes());
      assertEquals(0, channelBuffer2.writerIndex());
      assertFalse(channelBuffer2.readable());
      assertTrue(channelBuffer2.hasArray());
      assertNotSame(channelBuffer2, channelBuffer1);
      assertNotNull(channelBuffer2);
      assertTrue(channelBuffer2.equals((Object)channelBuffer1));
      
      ChannelBuffer channelBuffer3 = ChannelBuffers.dynamicBuffer();
      assertEquals(0, channelBuffer3.arrayOffset());
      assertFalse(channelBuffer3.isDirect());
      assertEquals(256, channelBuffer3.capacity());
      assertEquals(0, channelBuffer3.readerIndex());
      assertTrue(channelBuffer3.hasArray());
      assertEquals(0, channelBuffer3.readableBytes());
      assertEquals(0, channelBuffer3.writerIndex());
      assertFalse(channelBuffer3.readable());
      assertNotSame(channelBuffer3, channelBuffer2);
      assertNotSame(channelBuffer3, channelBuffer1);
      assertNotNull(channelBuffer3);
      assertTrue(channelBuffer3.equals((Object)channelBuffer2));
      assertTrue(channelBuffer3.equals((Object)channelBuffer1));
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      ChannelBuffer channelBuffer4 = ChannelBuffers.wrappedBuffer(byteArray1);
      assertEquals(1, byteArray1.length);
      assertTrue(channelBuffer4.hasArray());
      assertFalse(channelBuffer4.isDirect());
      assertEquals(1, channelBuffer4.writerIndex());
      assertTrue(channelBuffer4.readable());
      assertEquals(0, channelBuffer4.readerIndex());
      assertEquals(0, channelBuffer4.arrayOffset());
      assertEquals(1, channelBuffer4.capacity());
      assertEquals(1, channelBuffer4.readableBytes());
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(channelBuffer4, channelBuffer0);
      assertNotNull(channelBuffer4);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(channelBuffer4.equals((Object)channelBuffer0));
      
      ChannelBuffer channelBuffer5 = ChannelBuffers.dynamicBuffer();
      assertFalse(channelBuffer5.readable());
      assertTrue(channelBuffer5.hasArray());
      assertEquals(0, channelBuffer5.readableBytes());
      assertFalse(channelBuffer5.isDirect());
      assertEquals(256, channelBuffer5.capacity());
      assertEquals(0, channelBuffer5.readerIndex());
      assertEquals(0, channelBuffer5.arrayOffset());
      assertEquals(0, channelBuffer5.writerIndex());
      assertNotSame(channelBuffer5, channelBuffer3);
      assertNotSame(channelBuffer5, channelBuffer1);
      assertNotSame(channelBuffer5, channelBuffer2);
      assertNotNull(channelBuffer5);
      assertTrue(channelBuffer5.equals((Object)channelBuffer2));
      assertTrue(channelBuffer5.equals((Object)channelBuffer1));
      assertTrue(channelBuffer5.equals((Object)channelBuffer3));
      
      ChannelBuffer channelBuffer6 = ChannelBuffers.wrappedBuffer(byteArray1, 1, (int) (byte)0);
      assertEquals(1, byteArray1.length);
      assertEquals(0, channelBuffer6.arrayOffset());
      assertFalse(channelBuffer6.isDirect());
      assertFalse(channelBuffer6.readable());
      assertEquals(0, channelBuffer6.capacity());
      assertEquals(0, channelBuffer6.writerIndex());
      assertTrue(channelBuffer6.hasArray());
      assertEquals(0, channelBuffer6.readableBytes());
      assertEquals(0, channelBuffer6.readerIndex());
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(channelBuffer6, channelBuffer4);
      assertNotSame(channelBuffer6, channelBuffer0);
      assertNotNull(channelBuffer6);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(channelBuffer6.equals((Object)channelBuffer4));
      assertFalse(channelBuffer6.equals((Object)channelBuffer0));
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-115);
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      ChannelBuffer channelBuffer7 = ChannelBuffers.wrappedBuffer(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(5, channelBuffer7.capacity());
      assertEquals(0, channelBuffer7.arrayOffset());
      assertEquals(5, channelBuffer7.readableBytes());
      assertFalse(channelBuffer7.isDirect());
      assertTrue(channelBuffer7.readable());
      assertTrue(channelBuffer7.hasArray());
      assertEquals(0, channelBuffer7.readerIndex());
      assertEquals(5, channelBuffer7.writerIndex());
      assertArrayEquals(new byte[] {(byte) (-115), (byte)2, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotSame(channelBuffer7, channelBuffer4);
      assertNotSame(channelBuffer7, channelBuffer6);
      assertNotSame(channelBuffer7, channelBuffer0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotNull(channelBuffer7);
      assertFalse(channelBuffer7.equals((Object)channelBuffer4));
      assertFalse(channelBuffer7.equals((Object)channelBuffer6));
      assertFalse(channelBuffer7.equals((Object)channelBuffer0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      ChannelBuffer channelBuffer0 = ChannelBuffers.dynamicBuffer(0);
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertNotNull(channelBuffer0);
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.dynamicBuffer();
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.readableBytes());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(256, channelBuffer1.capacity());
      assertNotSame(channelBuffer1, channelBuffer0);
      assertNotNull(channelBuffer1);
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.dynamicBuffer();
      assertEquals(0, channelBuffer2.writerIndex());
      assertFalse(channelBuffer2.isDirect());
      assertEquals(0, channelBuffer2.readableBytes());
      assertTrue(channelBuffer2.hasArray());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertFalse(channelBuffer2.readable());
      assertEquals(256, channelBuffer2.capacity());
      assertEquals(0, channelBuffer2.readerIndex());
      assertNotSame(channelBuffer2, channelBuffer0);
      assertNotSame(channelBuffer2, channelBuffer1);
      assertNotNull(channelBuffer2);
      assertTrue(channelBuffer2.equals((Object)channelBuffer1));
      assertTrue(channelBuffer2.equals((Object)channelBuffer0));
      
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ChannelBuffer channelBuffer0 = ChannelBuffers.dynamicBuffer();
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(256, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertNotNull(channelBuffer0);
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.buffer(638);
      assertEquals(638, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.writerIndex());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertFalse(channelBuffer1.readable());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertNotNull(channelBuffer1);
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.directBuffer(638);
      assertEquals(0, channelBuffer2.readerIndex());
      assertFalse(channelBuffer2.hasArray());
      assertEquals(0, channelBuffer2.readableBytes());
      assertEquals(0, channelBuffer2.writerIndex());
      assertTrue(channelBuffer2.isDirect());
      assertEquals(638, channelBuffer2.capacity());
      assertFalse(channelBuffer2.readable());
      assertNotNull(channelBuffer2);
      
      int int0 = ChannelBuffers.compare(channelBuffer0, channelBuffer0);
      assertEquals(0, int0);
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(256, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      
      int int1 = ChannelBuffers.hasCode(channelBuffer0);
      assertEquals(1, int1);
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(256, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(int1 == int0);
      
      ChannelBuffer channelBuffer3 = ChannelBuffers.dynamicBuffer(41);
      assertEquals(41, channelBuffer3.capacity());
      assertEquals(0, channelBuffer3.readableBytes());
      assertEquals(0, channelBuffer3.writerIndex());
      assertFalse(channelBuffer3.readable());
      assertTrue(channelBuffer3.hasArray());
      assertEquals(0, channelBuffer3.readerIndex());
      assertEquals(0, channelBuffer3.arrayOffset());
      assertFalse(channelBuffer3.isDirect());
      assertNotSame(channelBuffer3, channelBuffer0);
      assertNotNull(channelBuffer3);
      assertTrue(channelBuffer3.equals((Object)channelBuffer0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ChannelBuffer channelBuffer0 = ChannelBuffers.dynamicBuffer();
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertNotNull(channelBuffer0);
      
      boolean boolean0 = ChannelBuffers.equals(channelBuffer0, channelBuffer0);
      assertTrue(boolean0);
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      
      int int0 = ChannelBuffers.hasCode(channelBuffer0);
      assertEquals(1, int0);
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      
      int int1 = ChannelBuffers.compare(channelBuffer0, channelBuffer0);
      assertEquals(0, int1);
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(256, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(int1 == int0);
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.dynamicBuffer(1);
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.readable());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(1, channelBuffer1.capacity());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.readerIndex());
      assertNotSame(channelBuffer1, channelBuffer0);
      assertNotNull(channelBuffer1);
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.directBuffer(1);
      assertEquals(0, channelBuffer2.readableBytes());
      assertEquals(0, channelBuffer2.writerIndex());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.readerIndex());
      assertEquals(1, channelBuffer2.capacity());
      assertTrue(channelBuffer2.isDirect());
      assertFalse(channelBuffer2.hasArray());
      assertNotNull(channelBuffer2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ChannelBuffer channelBuffer0 = ChannelBuffers.buffer(0);
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertNotNull(channelBuffer0);
      
      int int0 = ChannelBuffers.compare(channelBuffer0, channelBuffer0);
      assertEquals(0, int0);
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.dynamicBuffer();
      assertEquals(256, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertFalse(channelBuffer1.readable());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.writerIndex());
      assertEquals(0, channelBuffer1.readerIndex());
      assertFalse(channelBuffer1.isDirect());
      assertNotNull(channelBuffer1);
      
      boolean boolean0 = ChannelBuffers.equals(channelBuffer1, channelBuffer0);
      assertTrue(boolean0);
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(256, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertFalse(channelBuffer1.readable());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.writerIndex());
      assertEquals(0, channelBuffer1.readerIndex());
      assertFalse(channelBuffer1.isDirect());
      
      ChannelBuffer channelBuffer2 = ChannelBuffers.dynamicBuffer();
      assertEquals(0, channelBuffer2.writerIndex());
      assertFalse(channelBuffer2.isDirect());
      assertEquals(0, channelBuffer2.readableBytes());
      assertEquals(0, channelBuffer2.readerIndex());
      assertEquals(256, channelBuffer2.capacity());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertTrue(channelBuffer2.hasArray());
      assertFalse(channelBuffer2.readable());
      assertNotSame(channelBuffer2, channelBuffer1);
      assertNotNull(channelBuffer2);
      assertTrue(channelBuffer2.equals((Object)channelBuffer1));
      
      int int1 = ChannelBuffers.compare(channelBuffer2, channelBuffer2);
      assertEquals(0, int1);
      assertEquals(0, channelBuffer2.writerIndex());
      assertFalse(channelBuffer2.isDirect());
      assertEquals(0, channelBuffer2.readableBytes());
      assertEquals(0, channelBuffer2.readerIndex());
      assertEquals(256, channelBuffer2.capacity());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertTrue(channelBuffer2.hasArray());
      assertFalse(channelBuffer2.readable());
      assertNotSame(channelBuffer2, channelBuffer1);
      assertTrue(channelBuffer2.equals((Object)channelBuffer1));
      assertTrue(int1 == int0);
      
      ChannelBuffer channelBuffer3 = ChannelBuffers.dynamicBuffer();
      assertTrue(channelBuffer3.hasArray());
      assertEquals(0, channelBuffer3.readableBytes());
      assertEquals(0, channelBuffer3.writerIndex());
      assertFalse(channelBuffer3.readable());
      assertEquals(0, channelBuffer3.arrayOffset());
      assertFalse(channelBuffer3.isDirect());
      assertEquals(0, channelBuffer3.readerIndex());
      assertEquals(256, channelBuffer3.capacity());
      assertNotSame(channelBuffer3, channelBuffer2);
      assertNotSame(channelBuffer3, channelBuffer1);
      assertNotNull(channelBuffer3);
      assertTrue(channelBuffer3.equals((Object)channelBuffer2));
      assertTrue(channelBuffer3.equals((Object)channelBuffer1));
      
      int int2 = (-3664);
      // Undeclared exception!
      try { 
        ChannelBuffers.dynamicBuffer((-3664));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // estimatedLength: -3664
         //
         verifyException("org.apache.dubbo.remoting.buffer.DynamicChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChannelBuffers.dynamicBuffer(573, (ChannelBufferFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // factory
         //
         verifyException("org.apache.dubbo.remoting.buffer.DynamicChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChannelBuffers.hasCode((ChannelBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2181);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer1 = new ByteBufferBackedChannelBuffer(byteBufferBackedChannelBuffer0);
      ChannelBuffer channelBuffer0 = byteBufferBackedChannelBuffer1.copy(0, 0);
      int int0 = ChannelBuffers.compare(channelBuffer0, byteBufferBackedChannelBuffer1);
      assertEquals((-2181), int0);
      
      int int1 = ChannelBuffers.compare(byteBufferBackedChannelBuffer1, byteBufferBackedChannelBuffer1);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)0;
      ChannelBuffers.wrappedBuffer(byteArray0);
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      ChannelBufferFactory channelBufferFactory0 = heapChannelBuffer0.factory();
      ChannelBuffer channelBuffer1 = ChannelBuffers.dynamicBuffer(0, channelBufferFactory0);
      assertEquals(0, channelBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      ChannelBuffer channelBuffer0 = heapChannelBufferFactory0.getBuffer(2);
      boolean boolean0 = ChannelBuffers.equals(channelBuffer0, channelBuffer0);
      assertEquals(2, channelBuffer0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset charset1 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-4);
      charset1.encode("wR");
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0, 0, (int) (byte)0);
      CharBuffer charBuffer0 = charset1.decode(byteBuffer0);
      charBuffer0.asReadOnlyBuffer();
      charset0.encode(charBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode("OkZ}7koIG;~:;09");
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteBuffer1);
      assertEquals(15, channelBuffer0.readableBytes());
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.dynamicBuffer();
      int int0 = ChannelBuffers.hasCode(channelBuffer1);
      assertEquals(1, int0);
      
      ChannelBuffers.wrappedBuffer(byteBuffer0);
      ChannelBuffer channelBuffer2 = ChannelBuffers.dynamicBuffer();
      assertEquals(256, channelBuffer2.capacity());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1597);
      byteBuffer0.clear();
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteBuffer0);
      assertEquals(1597, channelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0);
      assertEquals(3, channelBuffer0.writerIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      ChannelBuffer channelBuffer0 = ChannelBuffers.dynamicBuffer(0, (ChannelBufferFactory) heapChannelBufferFactory0);
      assertEquals(0, channelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 160;
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer((byte[]) null, 160, 160);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array == null
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-2226);
      // Undeclared exception!
      try { 
        ChannelBuffers.buffer((-2226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity can not be negative
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte)3;
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer(byteArray0, (int) (byte)110, (int) (byte)110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-3584);
      // Undeclared exception!
      try { 
        ChannelBuffers.directBuffer((-3584));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -3584
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-50);
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, channelBuffer0.readableBytes());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ChannelBuffers.dynamicBuffer(0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer((byte[]) null, 2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array == null
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChannelBuffers.buffer((-62));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity can not be negative
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer(byteArray0, 3, 465);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array == null
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ChannelBuffers.wrappedBuffer(byteArray0);
      HeapChannelBuffer heapChannelBuffer0 = null;
      try {
        heapChannelBuffer0 = new HeapChannelBuffer(byteArray0, 367, 367);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1595);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      int int0 = ChannelBuffers.compare(byteBufferBackedChannelBuffer0, heapChannelBuffer0);
      assertEquals((-1), int0);
      
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteBuffer0);
      int int1 = ChannelBuffers.compare(heapChannelBuffer0, channelBuffer0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0);
      int int0 = ChannelBuffers.hasCode(channelBuffer0);
      assertEquals(1742810335, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte)52;
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0);
      ChannelBuffers.dynamicBuffer((int) (byte)0);
      ChannelBufferFactory channelBufferFactory0 = DirectChannelBufferFactory.getInstance();
      ChannelBuffer channelBuffer1 = ChannelBuffers.dynamicBuffer((int) (byte)52, channelBufferFactory0);
      ChannelBuffers.equals(channelBuffer1, channelBuffer0);
      // Undeclared exception!
      try { 
        ChannelBuffers.buffer((byte) (-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity can not be negative
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer((byte[]) null, (-1959), (-1959));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array == null
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteBuffer0);
      int int0 = ChannelBuffers.compare(channelBuffer0, channelBuffer0);
      assertEquals(0, int0);
      assertEquals(10, channelBuffer0.writerIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      byte[] byteArray0 = new byte[2];
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      heapChannelBufferFactory0.getBuffer(byteBuffer0);
      heapChannelBufferFactory0.getBuffer(byteArray0, 0, 0);
      // Undeclared exception!
      try { 
        ChannelBuffers.wrappedBuffer((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array == null
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ChannelBuffer channelBuffer0 = ChannelBuffers.wrappedBuffer(byteArray0);
      boolean boolean0 = ChannelBuffers.equals(channelBuffer0, channelBuffer0);
      assertTrue(boolean0);
      
      ChannelBuffer channelBuffer1 = ChannelBuffers.directBuffer((byte)0);
      assertFalse(channelBuffer1.equals((Object)channelBuffer0));
      assertNotSame(channelBuffer1, channelBuffer0);
  }
}
