/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 04:01:41 GMT 2021
 */

package org.apache.dubbo.remoting.telnet.support.command;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.dubbo.remoting.Channel;
import org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClearTelnetHandler_ESTest extends ClearTelnetHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClearTelnetHandler clearTelnetHandler0 = new ClearTelnetHandler();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        clearTelnetHandler0.telnet(channel0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.telnet.support.command.ClearTelnetHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClearTelnetHandler clearTelnetHandler0 = new ClearTelnetHandler();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      clearTelnetHandler0.telnet(channel0, "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ClearTelnetHandler clearTelnetHandler0 = new ClearTelnetHandler();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      clearTelnetHandler0.telnet(channel0, "96");
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClearTelnetHandler clearTelnetHandler0 = new ClearTelnetHandler();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      String string0 = clearTelnetHandler0.telnet(channel0, "");
      assertEquals("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", string0);
  }
}
