/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 04:13:19 GMT 2021
 */

package org.apache.dubbo.remoting.exchange.support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import org.apache.dubbo.remoting.exchange.support.MultiMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiMessage_ESTest extends MultiMessage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiMessage multiMessage0 = MultiMessage.createFromArray(objectArray0);
      multiMessage0.addMessage((Object) null);
      int int0 = multiMessage0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiMessage multiMessage0 = MultiMessage.create();
      Iterator iterator0 = multiMessage0.iterator();
      multiMessage0.addMessage(iterator0);
      Object object0 = multiMessage0.get(0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MultiMessage multiMessage0 = MultiMessage.createFromArray(objectArray0);
      multiMessage0.addMessage((Object) null);
      multiMessage0.addMessage((Object) null);
      multiMessage0.addMessage((Object) null);
      Object object0 = multiMessage0.get(2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiMessage multiMessage0 = MultiMessage.create();
      // Undeclared exception!
      try { 
        multiMessage0.get((-938));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiMessage.createFromCollection((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiMessage.createFromArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiMessage multiMessage0 = MultiMessage.create();
      // Undeclared exception!
      try { 
        multiMessage0.addMessages((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiMessage multiMessage0 = MultiMessage.create();
      Collection collection0 = multiMessage0.removeMessages();
      MultiMessage multiMessage1 = MultiMessage.createFromCollection(collection0);
      assertTrue(multiMessage1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiMessage multiMessage0 = MultiMessage.create();
      boolean boolean0 = multiMessage0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiMessage multiMessage0 = MultiMessage.create();
      assertTrue(multiMessage0.isEmpty());
      
      multiMessage0.addMessage("`#7kAyV-3");
      boolean boolean0 = multiMessage0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiMessage multiMessage0 = MultiMessage.create();
      int int0 = multiMessage0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiMessage multiMessage0 = MultiMessage.create();
      Collection collection0 = multiMessage0.removeMessages();
      multiMessage0.addMessages(collection0);
      assertTrue(multiMessage0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MultiMessage multiMessage0 = MultiMessage.createFromArray(objectArray0);
      assertFalse(multiMessage0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiMessage multiMessage0 = MultiMessage.create();
      // Undeclared exception!
      try { 
        multiMessage0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiMessage multiMessage0 = MultiMessage.create();
      Collection collection0 = multiMessage0.getMessages();
      multiMessage0.addMessage("org.apache.dubbo.remoting.exchange.support.MultiMessage");
      MultiMessage multiMessage1 = MultiMessage.createFromCollection(collection0);
      assertEquals(1, multiMessage1.size());
  }
}
