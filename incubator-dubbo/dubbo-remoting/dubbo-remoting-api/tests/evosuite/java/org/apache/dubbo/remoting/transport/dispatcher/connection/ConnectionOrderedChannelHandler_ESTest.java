/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 04:03:08 GMT 2021
 */

package org.apache.dubbo.remoting.transport.dispatcher.connection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import org.apache.dubbo.common.URL;
import org.apache.dubbo.remoting.Channel;
import org.apache.dubbo.remoting.ChannelHandler;
import org.apache.dubbo.remoting.transport.ChannelHandlerAdapter;
import org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConnectionOrderedChannelHandler_ESTest extends ConnectionOrderedChannelHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChannelHandler channelHandler0 = mock(ChannelHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uRL0).getIp();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(uRL0).getParameter(anyString());
      doReturn(0).when(uRL0).getParameter(anyString() , anyInt());
      doReturn("4pz&ttmnojWl}F#4B").when(uRL0).getParameter(anyString() , anyString());
      doReturn(0, 0, 0, 0, 0).when(uRL0).getPort();
      doReturn(6).when(uRL0).getPositiveParameter(anyString() , anyInt());
      doReturn((String) null).when(uRL0).getProtocol();
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler(channelHandler0, uRL0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.caught(channel0, throwable0);
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.getPreferredExecutorService("sMadF?1v$p");
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.connected(channel2);
      connectionOrderedChannelHandler0.caught(channel1, (Throwable) null);
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.disconnected(channel3);
      Channel channel4 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.sent(channel4, "");
      connectionOrderedChannelHandler0.getPreferredExecutorService("");
      Channel channel5 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.received(channel5, "r`");
      connectionOrderedChannelHandler0.getSharedExecutorService();
      Channel channel6 = null;
      connectionOrderedChannelHandler0.disconnected((Channel) null);
      connectionOrderedChannelHandler0.sent((Channel) null, (Object) null);
      connectionOrderedChannelHandler0.caught((Channel) null, (Throwable) null);
      connectionOrderedChannelHandler0.connected((Channel) null);
      connectionOrderedChannelHandler0.disconnected((Channel) null);
      connectionOrderedChannelHandler0.caught((Channel) null, (Throwable) null);
      connectionOrderedChannelHandler0.connected((Channel) null);
      connectionOrderedChannelHandler0.connected((Channel) null);
      try { 
        connectionOrderedChannelHandler0.disconnected((Channel) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // class org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler error when process disconnected event .
         //
         verifyException("org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChannelHandler channelHandler0 = mock(ChannelHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uRL0).getIp();
      doReturn((String) null, (String) null).when(uRL0).getParameter(anyString());
      doReturn(0).when(uRL0).getParameter(anyString() , anyInt());
      doReturn("J").when(uRL0).getParameter(anyString() , anyString());
      doReturn(0, 0, 0).when(uRL0).getPort();
      doReturn(1).when(uRL0).getPositiveParameter(anyString() , anyInt());
      doReturn((String) null).when(uRL0).getProtocol();
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler(channelHandler0, uRL0);
      Channel channel0 = null;
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.caught((Channel) null, throwable0);
      String string0 = "1o(9.<W:%aX`cjS*H";
      connectionOrderedChannelHandler0.connected((Channel) null);
      connectionOrderedChannelHandler0.connected((Channel) null);
      connectionOrderedChannelHandler0.received((Channel) null, "1o(9.<W:%aX`cjS*H");
      try { 
        connectionOrderedChannelHandler0.connected((Channel) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // class org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler error when process connected event .
         //
         verifyException("org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChannelHandlerAdapter channelHandlerAdapter0 = new ChannelHandlerAdapter();
      URL uRL0 = URL.valueOf("javassist.CtMember");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      URL uRL1 = uRL0.addMethodParameter("javassist.CtMember", (String) null, "d");
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler(channelHandlerAdapter0, uRL1);
      connectionOrderedChannelHandler0.disconnected((Channel) null);
      System.setCurrentTimeMillis(2514L);
      connectionOrderedChannelHandler0.disconnected((Channel) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChannelHandler channelHandler0 = mock(ChannelHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL0).getParameter(anyString() , anyInt());
      doReturn("").when(uRL0).getParameter(anyString() , anyString());
      doReturn(3243).when(uRL0).getPositiveParameter(anyString() , anyInt());
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler(channelHandler0, uRL0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.disconnected(channel0);
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.disconnected(channel1);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.connected(channel2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChannelHandler channelHandler0 = mock(ChannelHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(uRL0).getParameter(anyString());
      doReturn(0).when(uRL0).getParameter(anyString() , anyInt());
      doReturn("p)-b`0X").when(uRL0).getParameter(anyString() , anyString());
      doReturn(0, 0, 0, 0, 0).when(uRL0).getPort();
      doReturn(19).when(uRL0).getPositiveParameter(anyString() , anyInt());
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler(channelHandler0, uRL0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.caught(channel2, throwable0);
      connectionOrderedChannelHandler0.getSharedExecutorService();
      connectionOrderedChannelHandler0.received(channel1, "");
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.received(channel3, channel3);
      connectionOrderedChannelHandler0.received(channel0, "caught event");
      Channel channel4 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.disconnected(channel4);
      Channel channel5 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.disconnected(channel5);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChannelHandler channelHandler0 = mock(ChannelHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(uRL0).getParameter(anyString());
      doReturn(0).when(uRL0).getParameter(anyString() , anyInt());
      doReturn("p4r+\"`").when(uRL0).getParameter(anyString() , anyString());
      doReturn(0, 0).when(uRL0).getPort();
      doReturn(1000).when(uRL0).getPositiveParameter(anyString() , anyInt());
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler(channelHandler0, uRL0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.received(channel0, (Object) null);
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.sent(channel1, channel1);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.sent(channel2, channel2);
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.connected(channel3);
      connectionOrderedChannelHandler0.disconnected((Channel) null);
      Channel channel4 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.received(channel4, channel4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChannelHandler channelHandler0 = mock(ChannelHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL0).getParameter(anyString() , anyInt());
      doReturn("Zj4039|2B}_").when(uRL0).getParameter(anyString() , anyString());
      doReturn(1172).when(uRL0).getPositiveParameter(anyString() , anyInt());
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler(channelHandler0, uRL0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.connected(channel0);
      connectionOrderedChannelHandler0.disconnected((Channel) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChannelHandler channelHandler0 = mock(ChannelHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL0).getParameter(anyString() , anyInt());
      doReturn(" error when process connected event .").when(uRL0).getParameter(anyString() , anyString());
      doReturn(10).when(uRL0).getPositiveParameter(anyString() , anyInt());
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler(channelHandler0, uRL0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.disconnected(channel0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChannelHandler channelHandler0 = null;
      URL uRL0 = null;
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = null;
      try {
        connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler((ChannelHandler) null, (URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChannelHandler channelHandler0 = mock(ChannelHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uRL0).getParameter(anyString() , anyString());
      doReturn(0).when(uRL0).getPositiveParameter(anyString() , anyInt());
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = null;
      try {
        connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler(channelHandler0, uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.LinkedBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uRL0).getParameter(anyString() , anyString());
      doReturn(0).when(uRL0).getPositiveParameter(anyString() , anyInt());
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = null;
      try {
        connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler((ChannelHandler) null, uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.LinkedBlockingQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChannelHandlerAdapter channelHandlerAdapter0 = new ChannelHandlerAdapter();
      assertNotNull(channelHandlerAdapter0);
      
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uRL0).getIp();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(uRL0).getParameter(anyString());
      doReturn(0).when(uRL0).getParameter(anyString() , anyInt());
      doReturn("").when(uRL0).getParameter(anyString() , anyString());
      doReturn(0, 0, 0, 0, 0).when(uRL0).getPort();
      doReturn(4).when(uRL0).getPositiveParameter(anyString() , anyInt());
      doReturn((String) null).when(uRL0).getProtocol();
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler(channelHandlerAdapter0, uRL0);
      assertNotNull(connectionOrderedChannelHandler0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ExecutorService executorService0 = connectionOrderedChannelHandler0.getSharedExecutorService();
      connectionOrderedChannelHandler0.disconnected(channel1);
      connectionOrderedChannelHandler0.received(channel0, channel0);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.connected(channel2);
      Channel channel3 = null;
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.received((Channel) null, (Object) null);
      connectionOrderedChannelHandler0.caught((Channel) null, throwable0);
      Channel channel4 = null;
      connectionOrderedChannelHandler0.connected((Channel) null);
      connectionOrderedChannelHandler0.received((Channel) null, executorService0);
      connectionOrderedChannelHandler0.sent((Channel) null, executorService0);
      connectionOrderedChannelHandler0.disconnected((Channel) null);
      connectionOrderedChannelHandler0.disconnected((Channel) null);
      connectionOrderedChannelHandler0.received((Channel) null, (Object) null);
      Throwable throwable1 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      connectionOrderedChannelHandler0.caught((Channel) null, throwable1);
      try { 
        connectionOrderedChannelHandler0.disconnected((Channel) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // class org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler error when process disconnected event .
         //
         verifyException("org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChannelHandler channelHandler0 = mock(ChannelHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(uRL0).getParameter(anyString() , anyString());
      doReturn(0).when(uRL0).getPositiveParameter(anyString() , anyInt());
      ConnectionOrderedChannelHandler connectionOrderedChannelHandler0 = null;
      try {
        connectionOrderedChannelHandler0 = new ConnectionOrderedChannelHandler(channelHandler0, uRL0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.LinkedBlockingQueue", e);
      }
  }
}
