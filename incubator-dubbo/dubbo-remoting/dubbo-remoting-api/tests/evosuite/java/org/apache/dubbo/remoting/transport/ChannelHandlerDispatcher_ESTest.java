/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 03:39:28 GMT 2021
 */

package org.apache.dubbo.remoting.transport;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.dubbo.common.logger.Logger;
import org.apache.dubbo.common.logger.LoggerAdapter;
import org.apache.dubbo.common.logger.LoggerFactory;
import org.apache.dubbo.remoting.Channel;
import org.apache.dubbo.remoting.ChannelHandler;
import org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChannelHandlerDispatcher_ESTest extends ChannelHandlerDispatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChannelHandlerDispatcher channelHandlerDispatcher0 = new ChannelHandlerDispatcher();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher0.disconnected(channel0);
      ChannelHandlerDispatcher channelHandlerDispatcher1 = channelHandlerDispatcher0.addChannelHandler((ChannelHandler) null);
      ChannelHandlerDispatcher channelHandlerDispatcher2 = channelHandlerDispatcher1.addChannelHandler((ChannelHandler) null);
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerDispatcher channelHandlerDispatcher3 = new ChannelHandlerDispatcher((ChannelHandler[]) null);
      channelHandlerDispatcher1.sent(channel2, channelHandlerDispatcher3);
      channelHandlerDispatcher2.connected(channel1);
      ChannelHandlerDispatcher channelHandlerDispatcher4 = channelHandlerDispatcher0.removeChannelHandler(channelHandlerDispatcher2);
      ChannelHandlerDispatcher channelHandlerDispatcher5 = channelHandlerDispatcher1.removeChannelHandler(channelHandlerDispatcher4);
      channelHandlerDispatcher5.removeChannelHandler(channelHandlerDispatcher2);
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher2.caught(channel3, throwable0);
      assertSame(channelHandlerDispatcher0, channelHandlerDispatcher2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[3];
      ChannelHandlerDispatcher channelHandlerDispatcher0 = new ChannelHandlerDispatcher();
      channelHandlerArray0[0] = (ChannelHandler) channelHandlerDispatcher0;
      Collection<ChannelHandler> collection0 = channelHandlerDispatcher0.getChannelHandlers();
      ChannelHandlerDispatcher channelHandlerDispatcher1 = new ChannelHandlerDispatcher(collection0);
      channelHandlerArray0[1] = (ChannelHandler) channelHandlerDispatcher1;
      ChannelHandlerDispatcher channelHandlerDispatcher2 = new ChannelHandlerDispatcher(collection0);
      channelHandlerArray0[2] = (ChannelHandler) channelHandlerDispatcher2;
      ChannelHandlerDispatcher channelHandlerDispatcher3 = new ChannelHandlerDispatcher(channelHandlerArray0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher3.sent(channel0, channelHandlerArray0[1]);
      ChannelHandlerDispatcher channelHandlerDispatcher4 = channelHandlerDispatcher3.addChannelHandler(channelHandlerDispatcher2);
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher4.sent(channel1, channelHandlerDispatcher0);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher2.sent(channel2, (Object) null);
      assertFalse(channelHandlerDispatcher2.equals((Object)channelHandlerDispatcher1));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChannelHandlerDispatcher channelHandlerDispatcher0 = new ChannelHandlerDispatcher();
      ChannelHandlerDispatcher channelHandlerDispatcher1 = new ChannelHandlerDispatcher((ChannelHandler[]) null);
      ChannelHandlerDispatcher channelHandlerDispatcher2 = channelHandlerDispatcher0.removeChannelHandler(channelHandlerDispatcher1);
      Collection<ChannelHandler> collection0 = channelHandlerDispatcher0.getChannelHandlers();
      ChannelHandlerDispatcher channelHandlerDispatcher3 = new ChannelHandlerDispatcher(collection0);
      ChannelHandlerDispatcher channelHandlerDispatcher4 = channelHandlerDispatcher3.addChannelHandler(channelHandlerDispatcher0);
      LoggerFactory.setLoggerAdapter((LoggerAdapter) null);
      channelHandlerDispatcher4.received((Channel) null, collection0);
      channelHandlerDispatcher4.connected((Channel) null);
      channelHandlerDispatcher4.connected((Channel) null);
      assertFalse(channelHandlerDispatcher4.equals((Object)channelHandlerDispatcher2));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[2];
      ChannelHandlerDispatcher channelHandlerDispatcher0 = new ChannelHandlerDispatcher();
      channelHandlerArray0[0] = (ChannelHandler) channelHandlerDispatcher0;
      Collection<ChannelHandler> collection0 = channelHandlerDispatcher0.getChannelHandlers();
      ChannelHandlerDispatcher channelHandlerDispatcher1 = new ChannelHandlerDispatcher(collection0);
      channelHandlerArray0[1] = (ChannelHandler) channelHandlerDispatcher1;
      ChannelHandlerDispatcher channelHandlerDispatcher2 = new ChannelHandlerDispatcher(channelHandlerArray0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher2.caught(channel0, throwable0);
      assertFalse(channelHandlerDispatcher2.equals((Object)channelHandlerDispatcher1));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[2];
      ChannelHandlerDispatcher channelHandlerDispatcher0 = new ChannelHandlerDispatcher();
      ChannelHandlerDispatcher channelHandlerDispatcher1 = channelHandlerDispatcher0.removeChannelHandler(channelHandlerDispatcher0);
      ChannelHandlerDispatcher channelHandlerDispatcher2 = channelHandlerDispatcher0.addChannelHandler(channelHandlerDispatcher1);
      Collection<ChannelHandler> collection0 = channelHandlerDispatcher2.getChannelHandlers();
      ChannelHandlerDispatcher channelHandlerDispatcher3 = new ChannelHandlerDispatcher(collection0);
      channelHandlerArray0[0] = (ChannelHandler) channelHandlerDispatcher3;
      ChannelHandlerDispatcher channelHandlerDispatcher4 = new ChannelHandlerDispatcher();
      channelHandlerArray0[1] = (ChannelHandler) channelHandlerDispatcher4;
      ChannelHandlerDispatcher channelHandlerDispatcher5 = new ChannelHandlerDispatcher(channelHandlerArray0);
      Collection<ChannelHandler> collection1 = channelHandlerDispatcher5.getChannelHandlers();
      assertFalse(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ChannelHandlerDispatcher channelHandlerDispatcher0 = new ChannelHandlerDispatcher();
      Collection<ChannelHandler> collection0 = channelHandlerDispatcher0.getChannelHandlers();
      ChannelHandlerDispatcher channelHandlerDispatcher1 = new ChannelHandlerDispatcher(collection0);
      ChannelHandlerDispatcher channelHandlerDispatcher2 = channelHandlerDispatcher1.addChannelHandler(channelHandlerDispatcher0);
      Channel channel0 = null;
      channelHandlerDispatcher1.received((Channel) null, "");
      channelHandlerDispatcher2.disconnected((Channel) null);
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher1.disconnected(channel1);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher0.caught(channel2, throwable0);
      ChannelHandlerDispatcher channelHandlerDispatcher3 = channelHandlerDispatcher0.removeChannelHandler(channelHandlerDispatcher1);
      channelHandlerDispatcher3.connected((Channel) null);
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher2.disconnected(channel3);
      ChannelHandlerDispatcher channelHandlerDispatcher4 = new ChannelHandlerDispatcher();
      ChannelHandlerDispatcher channelHandlerDispatcher5 = channelHandlerDispatcher0.removeChannelHandler(channelHandlerDispatcher4);
      channelHandlerDispatcher0.sent((Channel) null, channelHandlerDispatcher4);
      channelHandlerDispatcher4.disconnected((Channel) null);
      channelHandlerDispatcher4.getChannelHandlers();
      channelHandlerDispatcher5.removeChannelHandler(channelHandlerDispatcher2);
      channelHandlerDispatcher5.received((Channel) null, (Object) null);
      channelHandlerDispatcher2.addChannelHandler(channelHandlerDispatcher4);
      String string0 = "";
      LoggerAdapter loggerAdapter0 = mock(LoggerAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((Logger) null).when(loggerAdapter0).getLogger(anyString());
      // Undeclared exception!
      try { 
        LoggerFactory.setLoggerAdapter(loggerAdapter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.common.logger.LoggerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ChannelHandlerDispatcher channelHandlerDispatcher0 = new ChannelHandlerDispatcher();
      ChannelHandlerDispatcher channelHandlerDispatcher1 = channelHandlerDispatcher0.removeChannelHandler((ChannelHandler) null);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher1.received(channel0, channelHandlerDispatcher0);
      ChannelHandlerDispatcher channelHandlerDispatcher2 = channelHandlerDispatcher0.addChannelHandler((ChannelHandler) null);
      ChannelHandlerDispatcher channelHandlerDispatcher3 = channelHandlerDispatcher0.removeChannelHandler(channelHandlerDispatcher1);
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher1.addChannelHandler((ChannelHandler) null);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher3.sent(channel2, channelHandlerDispatcher1);
      Collection<ChannelHandler> collection0 = channelHandlerDispatcher2.getChannelHandlers();
      ChannelHandlerDispatcher channelHandlerDispatcher4 = channelHandlerDispatcher3.removeChannelHandler(channelHandlerDispatcher1);
      ChannelHandlerDispatcher channelHandlerDispatcher5 = new ChannelHandlerDispatcher(collection0);
      ChannelHandlerDispatcher channelHandlerDispatcher6 = channelHandlerDispatcher5.addChannelHandler((ChannelHandler) null);
      channelHandlerDispatcher3.removeChannelHandler(channelHandlerDispatcher6);
      channelHandlerDispatcher3.received(channel1, (Object) null);
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher1.disconnected(channel3);
      Channel channel4 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      channelHandlerDispatcher3.caught(channel4, throwable0);
      channelHandlerDispatcher2.addChannelHandler(channelHandlerDispatcher6);
      ChannelHandlerDispatcher channelHandlerDispatcher7 = channelHandlerDispatcher5.addChannelHandler(channelHandlerDispatcher4);
      ChannelHandlerDispatcher channelHandlerDispatcher8 = channelHandlerDispatcher6.removeChannelHandler(channelHandlerDispatcher7);
      assertSame(channelHandlerDispatcher8, channelHandlerDispatcher5);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ChannelHandlerDispatcher channelHandlerDispatcher0 = new ChannelHandlerDispatcher();
      Collection<ChannelHandler> collection0 = channelHandlerDispatcher0.getChannelHandlers();
      ChannelHandlerDispatcher channelHandlerDispatcher1 = new ChannelHandlerDispatcher(collection0);
      Collection<ChannelHandler> collection1 = channelHandlerDispatcher1.getChannelHandlers();
      ChannelHandlerDispatcher channelHandlerDispatcher2 = new ChannelHandlerDispatcher(collection1);
      assertFalse(channelHandlerDispatcher2.equals((Object)channelHandlerDispatcher0));
  }
}
