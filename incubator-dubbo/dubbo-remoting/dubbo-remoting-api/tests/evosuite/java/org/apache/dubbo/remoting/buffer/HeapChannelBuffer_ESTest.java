/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 03:26:09 GMT 2021
 */

package org.apache.dubbo.remoting.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.channels.GatheringByteChannel;
import java.nio.channels.ScatteringByteChannel;
import org.apache.dubbo.remoting.buffer.ChannelBuffer;
import org.apache.dubbo.remoting.buffer.ChannelBufferFactory;
import org.apache.dubbo.remoting.buffer.HeapChannelBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HeapChannelBuffer_ESTest extends HeapChannelBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-30);
      byteArray0[7] = (byte)0;
      HeapChannelBuffer heapChannelBuffer1 = new HeapChannelBuffer(byteArray0);
      ChannelBuffer channelBuffer0 = heapChannelBuffer1.copy((int) (byte)0, 0);
      heapChannelBuffer0.readBytes(channelBuffer0);
      heapChannelBuffer0.isDirect();
      HeapChannelBuffer heapChannelBuffer2 = new HeapChannelBuffer(byteArray0, 0, (byte)0);
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer();
      heapChannelBuffer2.readBytes(byteBuffer0);
      heapChannelBuffer0.setBytes((int) (byte)0, (ChannelBuffer) heapChannelBuffer2, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        heapChannelBuffer1.setBytes(1, (InputStream) null, (int) (byte)23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0, (byte)0, (byte)0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(4, heapChannelBuffer0.capacity());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer();
      assertNotNull(byteBuffer0);
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(4, heapChannelBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      heapChannelBuffer0.setBytes(0, byteBuffer0);
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(4, heapChannelBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      heapChannelBuffer0.resetReaderIndex();
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(4, heapChannelBuffer0.capacity());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteBuffer byteBuffer1 = heapChannelBuffer0.toByteBuffer();
      assertNotNull(byteBuffer1);
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(4, heapChannelBuffer0.capacity());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.isReadOnly());
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals(0, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.position());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=4]", byteBuffer1.toString());
      assertEquals(4, byteBuffer1.capacity());
      assertEquals(4, byteArray0.length);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertNotSame(byteBuffer1, byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes((int) (byte) (-45), (byte[]) null, 224, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-31);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-72);
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(8, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(8, heapChannelBuffer0.writerIndex());
      assertEquals(8, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-31), (byte)0, (byte)84, (byte)0, (byte)0, (byte) (-5), (byte) (-72)}, byteArray0);
      
      int int0 = 7;
      int int1 = 2980;
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer();
      assertNotNull(byteBuffer0);
      assertEquals(8, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(8, heapChannelBuffer0.writerIndex());
      assertEquals(8, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-31), (byte)0, (byte)84, (byte)0, (byte)0, (byte) (-5), (byte) (-72)}, byteArray0);
      
      heapChannelBuffer0.setByte((byte)0, (byte)0);
      assertEquals(8, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(8, heapChannelBuffer0.writerIndex());
      assertEquals(8, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-31), (byte)0, (byte)84, (byte)0, (byte)0, (byte) (-5), (byte) (-72)}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.copy((int) (byte) (-72), 951);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0, (byte)0, (byte)0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer((int) (byte)0, (int) (byte)0);
      assertNotNull(byteBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-435)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      heapChannelBuffer0.writeBytes(byteBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      int int0 = heapChannelBuffer0.setBytes(0, inputStream0, 0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      int int1 = 0;
      int int2 = 0;
      HeapChannelBuffer heapChannelBuffer1 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer1);
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(0, heapChannelBuffer1.capacity());
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertTrue(heapChannelBuffer1.hasArray());
      assertTrue(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      
      int int3 = 0;
      heapChannelBuffer1.getBytes(0, byteArray0, 1, 0);
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(0, heapChannelBuffer1.capacity());
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertTrue(heapChannelBuffer1.hasArray());
      assertEquals(2, byteArray0.length);
      assertTrue(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer1, heapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes(0, (ChannelBuffer) heapChannelBuffer1, (-335), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 41;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(41);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(41, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      
      OutputStream outputStream0 = null;
      int int1 = 2;
      int int2 = 1489;
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer();
      assertNotNull(byteBuffer0);
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(41, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(41, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=41]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes(1489, byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 40;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(40);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(40, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      
      HeapChannelBuffer heapChannelBuffer1 = new HeapChannelBuffer(40);
      assertNotNull(heapChannelBuffer1);
      assertFalse(heapChannelBuffer1.isDirect());
      assertTrue(heapChannelBuffer1.hasArray());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(40, heapChannelBuffer1.capacity());
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertTrue(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer();
      assertNotNull(byteBuffer0);
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(40, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(40, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=40]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-4554)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      int int1 = heapChannelBuffer0.setBytes((-2707), inputStream0, (-2707));
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(40, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals((-1), int1);
      assertTrue(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertFalse(int1 == int0);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      heapChannelBuffer1.getBytes((-1763), outputStream0, (-2707));
      assertFalse(heapChannelBuffer1.isDirect());
      assertTrue(heapChannelBuffer1.hasArray());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(40, heapChannelBuffer1.capacity());
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertTrue(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer1, heapChannelBuffer0);
      
      int int2 = 1457;
      int int3 = 299;
      // Undeclared exception!
      try { 
        heapChannelBuffer0.readBytes((ChannelBuffer) heapChannelBuffer1, 1457, 299);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 40;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(40);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(40, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      
      HeapChannelBuffer heapChannelBuffer1 = new HeapChannelBuffer(40);
      assertNotNull(heapChannelBuffer1);
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertTrue(heapChannelBuffer1.hasArray());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(40, heapChannelBuffer1.capacity());
      assertTrue(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer();
      assertNotNull(byteBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(40, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=40]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(40, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(1426).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      int int1 = heapChannelBuffer0.setBytes((-2707), inputStream0, (-2707));
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(40, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(1426, int1);
      assertTrue(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertFalse(int1 == int0);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      heapChannelBuffer1.getBytes(2903, outputStream0, (-2707));
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertTrue(heapChannelBuffer1.hasArray());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(40, heapChannelBuffer1.capacity());
      assertTrue(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer1, heapChannelBuffer0);
      
      int int2 = 1457;
      int int3 = 299;
      // Undeclared exception!
      try { 
        heapChannelBuffer0.readBytes((ChannelBuffer) heapChannelBuffer1, 1457, 299);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)1;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(4, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(4, heapChannelBuffer0.readableBytes());
      assertEquals(4, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertTrue(heapChannelBuffer0.hasArray());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-73), (byte)1}, byteArray0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1763)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      int int0 = heapChannelBuffer0.writeBytes(inputStream0, (-1254));
      assertEquals(4, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(4, heapChannelBuffer0.readableBytes());
      assertEquals(4, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertTrue(heapChannelBuffer0.hasArray());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals((-1), int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-73), (byte)1}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.copy((-1254), 4110);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 704;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(704);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(704, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.readable());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)1;
      int int1 = (-1254);
      int int2 = (-973);
      int int3 = (-1);
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes((-1), (ChannelBuffer) null, (-222), (int) (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ScatteringByteChannel scatteringByteChannel0 = mock(ScatteringByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn((-1485)).when(scatteringByteChannel0).read(any(java.nio.ByteBuffer.class));
      int int0 = heapChannelBuffer0.setBytes((int) (byte)0, scatteringByteChannel0, (int) (byte)0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        heapChannelBuffer0.toByteBuffer((-1124), (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      
      boolean boolean0 = heapChannelBuffer0.hasArray();
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertTrue(boolean0);
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer(0, 0);
      assertNotNull(byteBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      
      heapChannelBuffer0.setBytes(0, byteBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      
      GatheringByteChannel gatheringByteChannel0 = mock(GatheringByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn(5236).when(gatheringByteChannel0).write(any(java.nio.ByteBuffer.class));
      int int1 = heapChannelBuffer0.getBytes(0, gatheringByteChannel0, 0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(5236, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getByte(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      int int0 = 0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0, 0, 0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ChannelBuffer channelBuffer0 = heapChannelBuffer0.copy();
      assertNotNull(channelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(2, byteArray0.length);
      assertTrue(channelBuffer0.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, heapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      heapChannelBuffer0.writeBytes(channelBuffer0, (int) (byte)0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(2, byteArray0.length);
      assertTrue(heapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, heapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.toByteBuffer((-3041), (-90));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      
      ScatteringByteChannel scatteringByteChannel0 = mock(ScatteringByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(scatteringByteChannel0).read(any(java.nio.ByteBuffer.class));
      int int1 = heapChannelBuffer0.setBytes(0, scatteringByteChannel0, 0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = (-907);
      int int3 = 0;
      // Undeclared exception!
      try { 
        heapChannelBuffer0.toByteBuffer((-907), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)1;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(8, heapChannelBuffer0.capacity());
      assertEquals(8, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(8, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)40, (byte)0, (byte)0, (byte) (-67), (byte)40, (byte)1}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setBytes((int) (byte) (-67), (ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      
      int int0 = heapChannelBuffer0.capacity();
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      heapChannelBuffer0.writeBytes(byteArray0, (int) (byte)0, 0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)14, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-12);
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes(0, byteArray0, 3649, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      heapChannelBuffer0.getBytes(0, outputStream0, 0);
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      
      GatheringByteChannel gatheringByteChannel0 = null;
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes(0, (GatheringByteChannel) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)2;
      byteArray0[1] = (byte)2;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      
      byte byte2 = heapChannelBuffer0.getByte((byte)0);
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals((byte)0, byte2);
      assertEquals(2, byteArray0.length);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)2}, byteArray0);
      
      int int0 = 766;
      // Undeclared exception!
      try { 
        heapChannelBuffer0.writeBytes(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setBytes(0, (byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)1;
      HeapChannelBuffer heapChannelBuffer1 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer1);
      assertTrue(heapChannelBuffer1.readable());
      assertEquals(8, heapChannelBuffer1.capacity());
      assertTrue(heapChannelBuffer1.hasArray());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(8, heapChannelBuffer1.writerIndex());
      assertEquals(8, heapChannelBuffer1.readableBytes());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertEquals(8, byteArray0.length);
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte) (-59), (byte)23, (byte)0, (byte)0, (byte)55, (byte) (-30), (byte)9, (byte)1}, byteArray0);
      
      ChannelBuffer channelBuffer0 = heapChannelBuffer1.copy((int) (byte)0, 0);
      assertNotNull(channelBuffer0);
      assertTrue(heapChannelBuffer1.readable());
      assertEquals(8, heapChannelBuffer1.capacity());
      assertTrue(heapChannelBuffer1.hasArray());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(8, heapChannelBuffer1.writerIndex());
      assertEquals(8, heapChannelBuffer1.readableBytes());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(8, byteArray0.length);
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertFalse(channelBuffer0.equals((Object)heapChannelBuffer1));
      assertTrue(channelBuffer0.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer1, heapChannelBuffer0);
      assertNotSame(heapChannelBuffer1, channelBuffer0);
      assertNotSame(channelBuffer0, heapChannelBuffer0);
      assertNotSame(channelBuffer0, heapChannelBuffer1);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)23, (byte)0, (byte)0, (byte)55, (byte) (-30), (byte)9, (byte)1}, byteArray0);
      
      heapChannelBuffer0.readBytes(channelBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer1.readable());
      assertEquals(8, heapChannelBuffer1.capacity());
      assertTrue(heapChannelBuffer1.hasArray());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(8, heapChannelBuffer1.writerIndex());
      assertEquals(8, heapChannelBuffer1.readableBytes());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(8, byteArray0.length);
      assertTrue(heapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertFalse(heapChannelBuffer1.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)heapChannelBuffer1));
      assertTrue(channelBuffer0.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      assertNotSame(heapChannelBuffer1, heapChannelBuffer0);
      assertNotSame(heapChannelBuffer1, channelBuffer0);
      assertNotSame(channelBuffer0, heapChannelBuffer0);
      assertNotSame(channelBuffer0, heapChannelBuffer1);
      assertArrayEquals(new byte[] {(byte) (-59), (byte)23, (byte)0, (byte)0, (byte)55, (byte) (-30), (byte)9, (byte)1}, byteArray0);
      
      boolean boolean0 = heapChannelBuffer0.isDirect();
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(boolean0);
      assertTrue(heapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      
      HeapChannelBuffer heapChannelBuffer2 = new HeapChannelBuffer(byteArray0, 0, (byte)0);
      assertNotNull(heapChannelBuffer2);
      assertFalse(heapChannelBuffer2.isDirect());
      assertEquals(0, heapChannelBuffer2.arrayOffset());
      assertFalse(heapChannelBuffer2.readable());
      assertEquals(0, heapChannelBuffer2.writerIndex());
      assertEquals(0, heapChannelBuffer2.readableBytes());
      assertEquals(8, heapChannelBuffer2.capacity());
      assertTrue(heapChannelBuffer2.hasArray());
      assertEquals(0, heapChannelBuffer2.readerIndex());
      assertEquals(8, byteArray0.length);
      assertFalse(heapChannelBuffer2.equals((Object)heapChannelBuffer1));
      assertTrue(heapChannelBuffer2.equals((Object)heapChannelBuffer0));
      assertTrue(heapChannelBuffer2.equals((Object)channelBuffer0));
      assertArrayEquals(new byte[] {(byte) (-59), (byte)23, (byte)0, (byte)0, (byte)55, (byte) (-30), (byte)9, (byte)1}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setBytes((int) (byte)0, (ChannelBuffer) heapChannelBuffer2, (int) (byte)1, (-617));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      
      boolean boolean0 = heapChannelBuffer0.isDirect();
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(1);
      assertNotNull(heapChannelBuffer0);
      assertEquals(1, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer();
      assertNotNull(byteBuffer0);
      assertEquals(1, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      
      heapChannelBuffer0.getBytes(1, byteBuffer0);
      assertEquals(1, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(1, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      
      int int0 = (-752);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      int int1 = 338;
      String string0 = heapChannelBuffer0.toString();
      assertNotNull(string0);
      assertEquals(1, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals("HeapChannelBuffer(ridx=0, widx=0, cap=1)", string0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.checkReadableBytes(338);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)1;
      byte byte1 = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(9, heapChannelBuffer0.writerIndex());
      assertEquals(9, heapChannelBuffer0.capacity());
      assertEquals(9, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)41, (byte) (-1), (byte)89, (byte)1, (byte)0, (byte)1}, byteArray0);
      
      int int0 = 0;
      int int1 = 0;
      int int2 = 0;
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer((int) (byte)0, (int) (byte)0);
      assertNotNull(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=9]", byteBuffer0.toString());
      assertEquals(9, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(9, heapChannelBuffer0.writerIndex());
      assertEquals(9, heapChannelBuffer0.capacity());
      assertEquals(9, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)41, (byte) (-1), (byte)89, (byte)1, (byte)0, (byte)1}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setBytes(1831, byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-39);
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(4, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(4, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(4, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-39)}, byteArray0);
      
      int int0 = heapChannelBuffer0.arrayOffset();
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(4, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(4, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(4, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(0, int0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-39)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 501;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(501);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(501, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte byte1 = (byte)110;
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      heapChannelBuffer0.getBytes(0, outputStream0, 1040);
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(501, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      
      heapChannelBuffer0.writeBytes(byteArray0);
      assertTrue(heapChannelBuffer0.readable());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(7, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(7, heapChannelBuffer0.readableBytes());
      assertEquals(501, heapChannelBuffer0.capacity());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ChannelBuffer channelBuffer0 = heapChannelBuffer0.copy((int) (byte)0, (int) (byte)0);
      assertNotNull(channelBuffer0);
      assertTrue(heapChannelBuffer0.readable());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(7, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(7, heapChannelBuffer0.readableBytes());
      assertEquals(501, heapChannelBuffer0.capacity());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, heapChannelBuffer0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes(1997, channelBuffer0, (int) (byte)0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)40;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(8, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(8, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(8, heapChannelBuffer0.readableBytes());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)0, (byte)1, (byte) (-71), (byte) (-124), (byte)1, (byte)118, (byte)40}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.copy((-4554), (int) (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer(0, 0);
      assertNotNull(byteBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      
      heapChannelBuffer0.setBytes(0, byteBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)0;
      heapChannelBuffer0.setBytes(0, byteArray0, 0, 0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)38, (byte)110, (byte) (-12), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(6, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(6, heapChannelBuffer0.readableBytes());
      assertEquals(6, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      HeapChannelBuffer heapChannelBuffer1 = new HeapChannelBuffer(byteArray0, (byte)0, 0);
      assertNotNull(heapChannelBuffer1);
      assertEquals(6, heapChannelBuffer1.capacity());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertTrue(heapChannelBuffer1.hasArray());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(6, byteArray0.length);
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes(0, (ChannelBuffer) heapChannelBuffer1, 658, (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)127}, byteArray0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      int int0 = heapChannelBuffer0.setBytes((-1763), inputStream0, (-1763));
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(0, int0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)127}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0, (byte)0, (byte)0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(1, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      int int0 = heapChannelBuffer0.setBytes((-1545), inputStream0, (int) (byte)0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(1, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, int0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = null;
      try {
        heapChannelBuffer0 = new HeapChannelBuffer((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 571;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(571);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(571, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      
      int int1 = 1960;
      int int2 = 0;
      // Undeclared exception!
      try { 
        heapChannelBuffer0.toByteBuffer((-1035), 571);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)45;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(6, heapChannelBuffer0.writerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(6, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(6, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)102, (byte)70, (byte) (-1), (byte)67, (byte)1, (byte)45}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setBytes((int) (byte) (-1), (ChannelBuffer) null, 3513, (-1571));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      
      boolean boolean0 = heapChannelBuffer0.hasArray();
      assertFalse(heapChannelBuffer0.readable());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertTrue(boolean0);
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer(0, 0);
      assertNotNull(byteBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      
      heapChannelBuffer0.setBytes(0, byteBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      
      GatheringByteChannel gatheringByteChannel0 = mock(GatheringByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(gatheringByteChannel0).write(any(java.nio.ByteBuffer.class));
      int int1 = heapChannelBuffer0.getBytes(0, gatheringByteChannel0, 0);
      assertFalse(heapChannelBuffer0.readable());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getByte(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-72);
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(8, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(8, heapChannelBuffer0.readableBytes());
      assertEquals(8, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte) (-31), (byte)0, (byte)84, (byte)0, (byte)0, (byte) (-5), (byte) (-72)}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getByte((byte) (-72));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -72
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(5, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(5, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(5, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte)20, (byte)124, (byte) (-92), (byte)0}, byteArray0);
      
      boolean boolean0 = heapChannelBuffer0.hasArray();
      assertEquals(5, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(5, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(5, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)74, (byte)20, (byte)124, (byte) (-92), (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 41;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(41);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(41, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      heapChannelBuffer0.getBytes(41, outputStream0, 41);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(41, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer();
      assertNotNull(byteBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(41, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(41, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=41]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      
      int int1 = (-22);
      // Undeclared exception!
      try { 
        heapChannelBuffer0.copy(41, (-22));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        heapChannelBuffer0.copy(0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-30);
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-30)}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.copy(721, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      heapChannelBuffer0.getBytes(1158, outputStream0, 0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(64);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(64, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      
      byte[] byteArray0 = heapChannelBuffer0.array();
      assertNotNull(byteArray0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(64, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(64, byteArray0.length);
      
      int int0 = heapChannelBuffer0.capacity();
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(64, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(64, int0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes(64, byteArray0, (-1178), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-123);
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(1, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(1, heapChannelBuffer0.writerIndex());
      assertEquals(1, heapChannelBuffer0.capacity());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray0);
      
      ChannelBuffer channelBuffer0 = heapChannelBuffer0.copy();
      assertNotNull(channelBuffer0);
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(1, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(1, heapChannelBuffer0.writerIndex());
      assertEquals(1, heapChannelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(1, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(1, channelBuffer0.readableBytes());
      assertEquals(1, byteArray0.length);
      assertTrue(channelBuffer0.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, heapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte) (-123)}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.toByteBuffer(55, 2220);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(40);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(40, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)59;
      byteArray0[0] = (byte)59;
      heapChannelBuffer0.writeByte(40);
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(1, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(40, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(1, heapChannelBuffer0.writerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      
      HeapChannelBuffer heapChannelBuffer1 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer1);
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(0, heapChannelBuffer1.capacity());
      assertTrue(heapChannelBuffer1.hasArray());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      
      ByteBuffer byteBuffer0 = heapChannelBuffer1.toByteBuffer();
      assertNotNull(byteBuffer0);
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(0, heapChannelBuffer1.capacity());
      assertTrue(heapChannelBuffer1.hasArray());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer1, heapChannelBuffer0);
      
      heapChannelBuffer0.readBytes(byteBuffer0);
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(1, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(40, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(1, heapChannelBuffer0.writerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(0, heapChannelBuffer1.capacity());
      assertTrue(heapChannelBuffer1.hasArray());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertFalse(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      assertNotSame(heapChannelBuffer1, heapChannelBuffer0);
      
      byte byte1 = (byte)61;
      byteArray0[1] = (byte)61;
      int int0 = (-1253);
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setBytes(40, byteArray0, (-1253), 40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = heapChannelBuffer0.array();
      assertNotNull(byteArray1);
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setByte(3631, 2085);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3631
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-2775);
      HeapChannelBuffer heapChannelBuffer0 = null;
      try {
        heapChannelBuffer0 = new HeapChannelBuffer((byte[]) null, (-2775), (-2775));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertTrue(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer();
      assertNotNull(byteBuffer0);
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertTrue(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(2, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
      
      heapChannelBuffer0.getBytes((int) (byte)0, byteBuffer0);
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertTrue(heapChannelBuffer0.readable());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertEquals(2, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.limit());
      assertEquals(2, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = 0;
      int int1 = 0;
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      HeapChannelBuffer heapChannelBuffer1 = null;
      try {
        heapChannelBuffer1 = new HeapChannelBuffer((-2074));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      heapChannelBuffer0.markWriterIndex();
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = heapChannelBuffer0.writable();
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      HeapChannelBuffer heapChannelBuffer1 = new HeapChannelBuffer(1);
      assertNotNull(heapChannelBuffer1);
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertTrue(heapChannelBuffer1.hasArray());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(1, heapChannelBuffer1.capacity());
      assertFalse(heapChannelBuffer1.readable());
      assertTrue(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setBytes((-3255), (ChannelBuffer) heapChannelBuffer1, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.capacity());
      
      int int1 = 0;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-81);
      byteArray0[0] = (byte) (-81);
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes((int) (byte) (-81), (OutputStream) null, (int) (byte) (-81));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)0;
      byte byte0 = (byte) (-74);
      byteArray0[5] = (byte) (-74);
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(6, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(6, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(6, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte) (-1), (byte)86, (byte)0, (byte) (-74)}, byteArray0);
      
      HeapChannelBuffer heapChannelBuffer1 = new HeapChannelBuffer((byte)0);
      assertNotNull(heapChannelBuffer1);
      assertEquals(0, heapChannelBuffer1.capacity());
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertFalse(heapChannelBuffer1.isDirect());
      assertTrue(heapChannelBuffer1.hasArray());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      
      int int0 = heapChannelBuffer0.compareTo((ChannelBuffer) heapChannelBuffer1);
      assertEquals(6, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(6, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(6, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer1.capacity());
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertFalse(heapChannelBuffer1.isDirect());
      assertTrue(heapChannelBuffer1.hasArray());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(6, int0);
      assertEquals(6, byteArray0.length);
      assertFalse(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      assertNotSame(heapChannelBuffer1, heapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte) (-1), (byte)86, (byte)0, (byte) (-74)}, byteArray0);
      
      GatheringByteChannel gatheringByteChannel0 = mock(GatheringByteChannel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes((int) (byte)86, gatheringByteChannel0, (-2545));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(1);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(1, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      
      ScatteringByteChannel scatteringByteChannel0 = mock(ScatteringByteChannel.class, new ViolatedAssumptionAnswer());
      int int0 = 64;
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setBytes(1, scatteringByteChannel0, 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      
      ChannelBuffer channelBuffer0 = heapChannelBuffer0.readBytes(0);
      assertNotNull(channelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, heapChannelBuffer0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setBytes((-906), channelBuffer0, (-1246), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0, 0, 0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(1, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)40}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes(0, (OutputStream) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0, 0, (byte)0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(3, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)97}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes((int) (byte)0, (GatheringByteChannel) null, (-284));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer(0, 0);
      assertNotNull(byteBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      heapChannelBuffer0.getBytes(0, byteBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(439);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(439, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      
      ChannelBufferFactory channelBufferFactory0 = heapChannelBuffer0.factory();
      assertNotNull(channelBufferFactory0);
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(439, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      
      ScatteringByteChannel scatteringByteChannel0 = mock(ScatteringByteChannel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setBytes(439, scatteringByteChannel0, (-1695));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(2814);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(2814, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        heapChannelBuffer0.readBytes(byteArray0, (int) (byte) (-1), (-3105));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)99;
      byteArray0[0] = (byte)99;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[5] = (byte)0;
      int int0 = (-1);
      HeapChannelBuffer heapChannelBuffer0 = null;
      try {
        heapChannelBuffer0 = new HeapChannelBuffer(byteArray0, (-1), (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(1247);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(1247, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      
      ScatteringByteChannel scatteringByteChannel0 = mock(ScatteringByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(scatteringByteChannel0).read(any(java.nio.ByteBuffer.class));
      int int1 = heapChannelBuffer0.setBytes(0, scatteringByteChannel0, 0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer(0, 0);
      assertNotNull(byteBuffer0);
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.isDirect());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes(2139, (ChannelBuffer) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[0] = (byte) (-121);
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)0}, byteArray0);
      
      byte byte0 = heapChannelBuffer0.getByte((byte)0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals((byte) (-121), byte0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)0}, byteArray0);
      
      byte[] byteArray1 = heapChannelBuffer0.array();
      assertNotNull(byteArray1);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(2, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(2, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(2, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)0}, byteArray1);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.writeByte(1604);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = null;
      try {
        heapChannelBuffer0 = new HeapChannelBuffer((byte[]) null, 1796, 1796);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 29;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(29);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(29, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      
      ScatteringByteChannel scatteringByteChannel0 = mock(ScatteringByteChannel.class, new ViolatedAssumptionAnswer());
      doReturn(29).when(scatteringByteChannel0).read(any(java.nio.ByteBuffer.class));
      int int1 = heapChannelBuffer0.setBytes(29, scatteringByteChannel0, 0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(29, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(29, int1);
      assertTrue(int1 == int0);
      
      int int2 = (-907);
      int int3 = 1;
      // Undeclared exception!
      try { 
        heapChannelBuffer0.toByteBuffer((-907), 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(9, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(9, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(9, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-15), (byte) (-1), (byte)0, (byte)1, (byte) (-15), (byte)0, (byte)45, (byte)0}, byteArray0);
      
      ScatteringByteChannel scatteringByteChannel0 = mock(ScatteringByteChannel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        heapChannelBuffer0.setBytes(40, scatteringByteChannel0, (int) (byte) (-15));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)23;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-30);
      byteArray0[7] = (byte)0;
      HeapChannelBuffer heapChannelBuffer1 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer1);
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertEquals(8, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(8, heapChannelBuffer1.writerIndex());
      assertEquals(8, heapChannelBuffer1.capacity());
      assertTrue(heapChannelBuffer1.hasArray());
      assertTrue(heapChannelBuffer1.readable());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(8, byteArray0.length);
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)23, (byte)0, (byte)0, (byte)55, (byte) (-30), (byte)0, (byte)0}, byteArray0);
      
      ChannelBuffer channelBuffer0 = heapChannelBuffer1.copy((int) (byte)0, 0);
      assertNotNull(channelBuffer0);
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertEquals(8, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(8, heapChannelBuffer1.writerIndex());
      assertEquals(8, heapChannelBuffer1.capacity());
      assertTrue(heapChannelBuffer1.hasArray());
      assertTrue(heapChannelBuffer1.readable());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(8, byteArray0.length);
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertFalse(channelBuffer0.equals((Object)heapChannelBuffer1));
      assertTrue(channelBuffer0.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer1, channelBuffer0);
      assertNotSame(heapChannelBuffer1, heapChannelBuffer0);
      assertNotSame(channelBuffer0, heapChannelBuffer1);
      assertNotSame(channelBuffer0, heapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)23, (byte)0, (byte)0, (byte)55, (byte) (-30), (byte)0, (byte)0}, byteArray0);
      
      heapChannelBuffer0.readBytes(channelBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertEquals(8, heapChannelBuffer1.readableBytes());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(8, heapChannelBuffer1.writerIndex());
      assertEquals(8, heapChannelBuffer1.capacity());
      assertTrue(heapChannelBuffer1.hasArray());
      assertTrue(heapChannelBuffer1.readable());
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(8, byteArray0.length);
      assertFalse(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertTrue(heapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(heapChannelBuffer1.equals((Object)channelBuffer0));
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertFalse(channelBuffer0.equals((Object)heapChannelBuffer1));
      assertTrue(channelBuffer0.equals((Object)heapChannelBuffer0));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      assertNotSame(heapChannelBuffer1, channelBuffer0);
      assertNotSame(heapChannelBuffer1, heapChannelBuffer0);
      assertNotSame(channelBuffer0, heapChannelBuffer1);
      assertNotSame(channelBuffer0, heapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)23, (byte)0, (byte)0, (byte)55, (byte) (-30), (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = heapChannelBuffer0.isDirect();
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(boolean0);
      assertFalse(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertTrue(heapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      
      HeapChannelBuffer heapChannelBuffer2 = new HeapChannelBuffer(byteArray0, 0, (byte)0);
      assertNotNull(heapChannelBuffer2);
      assertTrue(heapChannelBuffer2.hasArray());
      assertFalse(heapChannelBuffer2.readable());
      assertEquals(8, heapChannelBuffer2.capacity());
      assertEquals(0, heapChannelBuffer2.readerIndex());
      assertEquals(0, heapChannelBuffer2.readableBytes());
      assertEquals(0, heapChannelBuffer2.arrayOffset());
      assertFalse(heapChannelBuffer2.isDirect());
      assertEquals(0, heapChannelBuffer2.writerIndex());
      assertEquals(8, byteArray0.length);
      assertTrue(heapChannelBuffer2.equals((Object)channelBuffer0));
      assertTrue(heapChannelBuffer2.equals((Object)heapChannelBuffer0));
      assertFalse(heapChannelBuffer2.equals((Object)heapChannelBuffer1));
      assertArrayEquals(new byte[] {(byte)0, (byte)23, (byte)0, (byte)0, (byte)55, (byte) (-30), (byte)0, (byte)0}, byteArray0);
      
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer();
      assertNotNull(byteBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertTrue(heapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(heapChannelBuffer0.equals((Object)heapChannelBuffer2));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer2);
      
      heapChannelBuffer2.readBytes(byteBuffer0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer2.hasArray());
      assertFalse(heapChannelBuffer2.readable());
      assertEquals(8, heapChannelBuffer2.capacity());
      assertEquals(0, heapChannelBuffer2.readerIndex());
      assertEquals(0, heapChannelBuffer2.readableBytes());
      assertEquals(0, heapChannelBuffer2.arrayOffset());
      assertFalse(heapChannelBuffer2.isDirect());
      assertEquals(0, heapChannelBuffer2.writerIndex());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteArray0.length);
      assertFalse(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertTrue(heapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(heapChannelBuffer0.equals((Object)heapChannelBuffer2));
      assertTrue(heapChannelBuffer2.equals((Object)channelBuffer0));
      assertTrue(heapChannelBuffer2.equals((Object)heapChannelBuffer0));
      assertFalse(heapChannelBuffer2.equals((Object)heapChannelBuffer1));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer2);
      assertNotSame(heapChannelBuffer2, heapChannelBuffer0);
      assertNotSame(heapChannelBuffer2, heapChannelBuffer1);
      assertNotSame(heapChannelBuffer2, channelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)23, (byte)0, (byte)0, (byte)55, (byte) (-30), (byte)0, (byte)0}, byteArray0);
      
      heapChannelBuffer0.setBytes((int) (byte)0, (ChannelBuffer) heapChannelBuffer2, (int) (byte)0, (int) (byte)0);
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertTrue(heapChannelBuffer0.hasArray());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertTrue(heapChannelBuffer2.hasArray());
      assertFalse(heapChannelBuffer2.readable());
      assertEquals(8, heapChannelBuffer2.capacity());
      assertEquals(0, heapChannelBuffer2.readerIndex());
      assertEquals(0, heapChannelBuffer2.readableBytes());
      assertEquals(0, heapChannelBuffer2.arrayOffset());
      assertFalse(heapChannelBuffer2.isDirect());
      assertEquals(0, heapChannelBuffer2.writerIndex());
      assertEquals(8, byteArray0.length);
      assertFalse(heapChannelBuffer0.equals((Object)heapChannelBuffer1));
      assertTrue(heapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(heapChannelBuffer0.equals((Object)heapChannelBuffer2));
      assertTrue(heapChannelBuffer2.equals((Object)channelBuffer0));
      assertTrue(heapChannelBuffer2.equals((Object)heapChannelBuffer0));
      assertFalse(heapChannelBuffer2.equals((Object)heapChannelBuffer1));
      assertNotSame(heapChannelBuffer0, channelBuffer0);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer1);
      assertNotSame(heapChannelBuffer0, heapChannelBuffer2);
      assertNotSame(heapChannelBuffer2, heapChannelBuffer0);
      assertNotSame(heapChannelBuffer2, heapChannelBuffer1);
      assertNotSame(heapChannelBuffer2, channelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)23, (byte)0, (byte)0, (byte)55, (byte) (-30), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(9, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertTrue(heapChannelBuffer0.hasArray());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(9, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(9, heapChannelBuffer0.readableBytes());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)101, (byte) (-51), (byte)0, (byte)0, (byte)76, (byte)0, (byte)1}, byteArray0);
      
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      InputStream inputStream1 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream1).read(any(byte[].class) , anyInt() , anyInt());
      int int0 = heapChannelBuffer0.setBytes((int) (byte)0, inputStream1, (-2707));
      assertEquals(9, heapChannelBuffer0.writerIndex());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertTrue(heapChannelBuffer0.hasArray());
      assertTrue(heapChannelBuffer0.readable());
      assertEquals(9, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(9, heapChannelBuffer0.readableBytes());
      assertEquals(0, int0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)101, (byte) (-51), (byte)0, (byte)0, (byte)76, (byte)0, (byte)1}, byteArray0);
      
      HeapChannelBuffer heapChannelBuffer1 = new HeapChannelBuffer(byteArray0, (byte)0, (byte)0);
      assertNotNull(heapChannelBuffer1);
      assertFalse(heapChannelBuffer1.isDirect());
      assertEquals(0, heapChannelBuffer1.readerIndex());
      assertEquals(0, heapChannelBuffer1.readableBytes());
      assertTrue(heapChannelBuffer1.hasArray());
      assertEquals(0, heapChannelBuffer1.writerIndex());
      assertEquals(9, heapChannelBuffer1.capacity());
      assertFalse(heapChannelBuffer1.readable());
      assertEquals(0, heapChannelBuffer1.arrayOffset());
      assertEquals(9, byteArray0.length);
      assertFalse(heapChannelBuffer1.equals((Object)heapChannelBuffer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)101, (byte) (-51), (byte)0, (byte)0, (byte)76, (byte)0, (byte)1}, byteArray0);
      
      // Undeclared exception!
      try { 
        heapChannelBuffer0.getBytes((int) (byte)0, (ChannelBuffer) heapChannelBuffer1, (int) (byte) (-51));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(0);
      assertNotNull(heapChannelBuffer0);
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      heapChannelBuffer0.getBytes(0, outputStream0, 0);
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      
      int int0 = heapChannelBuffer0.arrayOffset();
      assertEquals(0, heapChannelBuffer0.arrayOffset());
      assertFalse(heapChannelBuffer0.readable());
      assertEquals(0, heapChannelBuffer0.capacity());
      assertFalse(heapChannelBuffer0.isDirect());
      assertEquals(0, heapChannelBuffer0.writerIndex());
      assertTrue(heapChannelBuffer0.hasArray());
      assertEquals(0, heapChannelBuffer0.readableBytes());
      assertEquals(0, heapChannelBuffer0.readerIndex());
      assertEquals(0, int0);
      
      GatheringByteChannel gatheringByteChannel0 = mock(GatheringByteChannel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        heapChannelBuffer0.toByteBuffer((-140), 2007);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(byteArray0, (byte)0, (byte)0);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1545)).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      int int0 = heapChannelBuffer0.setBytes((-1545), inputStream0, (int) (byte)0);
      assertEquals((-1), int0);
      assertFalse(heapChannelBuffer0.readable());
  }
}
