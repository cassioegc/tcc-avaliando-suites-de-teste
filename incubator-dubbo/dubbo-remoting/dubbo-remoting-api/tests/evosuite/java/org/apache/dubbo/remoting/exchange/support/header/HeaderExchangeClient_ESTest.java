/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 03:46:35 GMT 2021
 */

package org.apache.dubbo.remoting.exchange.support.header;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import org.apache.dubbo.common.URL;
import org.apache.dubbo.remoting.ChannelHandler;
import org.apache.dubbo.remoting.Client;
import org.apache.dubbo.remoting.exchange.ExchangeHandler;
import org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HeaderExchangeClient_ESTest extends HeaderExchangeClient_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(client0).getAttribute(anyString());
      doReturn(false, false).when(client0).hasAttribute(anyString());
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean0 = headerExchangeClient0.isClosed();
      assertFalse(boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.setAttribute((String) null, (Object) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.close(12);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean1 = headerExchangeClient0.hasAttribute("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean2 = headerExchangeClient0.hasAttribute((String) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.startClose();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object0 = headerExchangeClient0.getAttribute("nm[glw**6I$7<}");
      assertNull(object0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean3 = headerExchangeClient0.isClosed();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.setAttribute("dN=+4g|1*.{u(|lw=", (Object) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.removeAttribute("");
      assertFalse(headerExchangeClient0.canHandleIdle());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(client0).getAttribute(anyString());
      doReturn((InetSocketAddress) null).when(client0).getRemoteAddress();
      doReturn((InetSocketAddress) null).when(client0).getLocalAddress();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object0 = headerExchangeClient0.getAttribute("dubbo-client-idleCheck");
      assertNull(object0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object1 = headerExchangeClient0.getAttribute("dubbo-client-idleCheck");
      assertNull(object1);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.close(240);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      InetSocketAddress inetSocketAddress0 = headerExchangeClient0.getRemoteAddress();
      assertNull(inetSocketAddress0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.startClose();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.removeAttribute("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient");
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object2 = headerExchangeClient0.getAttribute("dubbo-client-idleCheck");
      assertNull(object2);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      try { 
        headerExchangeClient0.send((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to send message null, cause: The channel org.apache.dubbo.remoting.Client$MockitoMock$952229901@0000000003 is closed!
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((InetSocketAddress) null).when(client0).getLocalAddress();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean0 = headerExchangeClient0.isClosed();
      assertFalse(boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      String string0 = "a>TMVt+";
      headerExchangeClient0.send((Object) "a>TMVt+", false);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.close(3);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      try { 
        headerExchangeClient0.send((Object) "a>TMVt+", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to send message a>TMVt+, cause: The channel org.apache.dubbo.remoting.Client$MockitoMock$952229901@0000000003 is closed!
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(client0).getAttribute(anyString());
      doReturn((ChannelHandler) null).when(client0).getChannelHandler();
      doReturn((URL) null, (URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      HeaderExchangeClient headerExchangeClient1 = new HeaderExchangeClient(headerExchangeClient0, false);
      assertNotNull(headerExchangeClient1);
      assertFalse(headerExchangeClient1.equals((Object)headerExchangeClient0));
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertFalse(headerExchangeClient1.canHandleIdle());
      
      URL uRL0 = headerExchangeClient1.getUrl();
      assertNull(uRL0);
      assertFalse(headerExchangeClient0.equals((Object)headerExchangeClient1));
      assertFalse(headerExchangeClient1.equals((Object)headerExchangeClient0));
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertFalse(headerExchangeClient1.canHandleIdle());
      assertNotSame(headerExchangeClient0, headerExchangeClient1);
      assertNotSame(headerExchangeClient1, headerExchangeClient0);
      
      headerExchangeClient0.reset((URL) null);
      assertFalse(headerExchangeClient0.equals((Object)headerExchangeClient1));
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertNotSame(headerExchangeClient0, headerExchangeClient1);
      
      Object object0 = headerExchangeClient0.getAttribute("java.lang.Thread");
      assertNull(object0);
      assertFalse(headerExchangeClient0.equals((Object)headerExchangeClient1));
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertNotSame(headerExchangeClient0, headerExchangeClient1);
      
      ChannelHandler channelHandler0 = headerExchangeClient0.getChannelHandler();
      assertNull(channelHandler0);
      assertFalse(headerExchangeClient0.equals((Object)headerExchangeClient1));
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertNotSame(headerExchangeClient0, headerExchangeClient1);
      
      // Undeclared exception!
      try { 
        headerExchangeClient0.request((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((InetSocketAddress) null).when(client0).getLocalAddress();
      doReturn((URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean0 = headerExchangeClient0.isClosed();
      assertFalse(boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      InetSocketAddress inetSocketAddress0 = headerExchangeClient0.getLocalAddress();
      assertNull(inetSocketAddress0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      // Undeclared exception!
      try { 
        headerExchangeClient0.request((Object) "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(client0).getAttribute(anyString());
      doReturn((InetSocketAddress) null).when(client0).getRemoteAddress();
      doReturn(false).when(client0).hasAttribute(anyString());
      doReturn((InetSocketAddress) null).when(client0).getLocalAddress();
      doReturn((URL) null).when(client0).getUrl();
      boolean boolean0 = false;
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      URL uRL0 = headerExchangeClient0.getUrl();
      assertNull(uRL0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.reset((URL) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      String string0 = "R@dh4";
      headerExchangeClient0.startClose();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object0 = headerExchangeClient0.getAttribute("R@dh4");
      assertNull(object0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.send((Object) null, false);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      InetSocketAddress inetSocketAddress0 = headerExchangeClient0.getRemoteAddress();
      assertNull(inetSocketAddress0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.close(1638);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.removeAttribute("");
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.setAttribute("AKhhmTEPRp_O^#", (Object) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean1 = headerExchangeClient0.hasAttribute("Prs1 f)9AXoo!");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.setAttribute("AKhhmTEPRp_O^#", "Prs1 f)9AXoo!");
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      ExecutorService executorService0 = mock(ExecutorService.class, new ViolatedAssumptionAnswer());
      try { 
        headerExchangeClient0.request((Object) "AKhhmTEPRp_O^#", 1638, executorService0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to send request AKhhmTEPRp_O^#, cause: The channel org.apache.dubbo.remoting.Client$MockitoMock$952229901@0000000004 is closed!
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(client0).getAttribute(anyString());
      doReturn((URL) null, (URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.removeAttribute("");
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      URL uRL0 = headerExchangeClient0.getUrl();
      assertNull(uRL0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.reset((URL) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object0 = headerExchangeClient0.getAttribute("");
      assertNull(object0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      ExecutorService executorService0 = null;
      headerExchangeClient0.send((Object) "HeaderExchangeClient [channel=");
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      String string0 = headerExchangeClient0.toString();
      assertNotNull(string0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.send((Object) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      // Undeclared exception!
      try { 
        headerExchangeClient0.request((Object) null, (ExecutorService) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(client0).getAttribute(anyString());
      doReturn((InetSocketAddress) null).when(client0).getRemoteAddress();
      doReturn((URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      InetSocketAddress inetSocketAddress0 = headerExchangeClient0.getRemoteAddress();
      assertNull(inetSocketAddress0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.send((Object) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.reconnect();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object0 = headerExchangeClient0.getAttribute("");
      assertNull(object0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      ExecutorService executorService0 = mock(ExecutorService.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        headerExchangeClient0.request((Object) null, executorService0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(client0).getAttribute(anyString());
      doReturn((URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object0 = headerExchangeClient0.getAttribute("The root logger cannot be set to null.");
      assertNull(object0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.startClose();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      ExecutorService executorService0 = mock(ExecutorService.class, new ViolatedAssumptionAnswer());
      headerExchangeClient0.send((Object) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      // Undeclared exception!
      try { 
        headerExchangeClient0.request((Object) null, (-2072), executorService0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.DefaultFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HeaderExchangeClient headerExchangeClient0 = null;
      try {
        headerExchangeClient0 = new HeaderExchangeClient((Client) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Client can't be null
         //
         verifyException("org.apache.dubbo.common.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(client0).getAttribute(anyString());
      doReturn(false).when(client0).isConnected();
      doReturn((InetSocketAddress) null).when(client0).getLocalAddress();
      doReturn((URL) null, (URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      String string0 = headerExchangeClient0.toString();
      assertNotNull(string0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      URL uRL0 = headerExchangeClient0.getUrl();
      assertNull(uRL0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      URL uRL1 = headerExchangeClient0.getUrl();
      assertNull(uRL1);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.removeAttribute("Wgk0r2UIv ]OyyQq");
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.reconnect();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.send((Object) "Wgk0r2UIv ]OyyQq", false);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.reconnect();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object0 = headerExchangeClient0.getAttribute("Wgk0r2UIv ]OyyQq");
      assertNull(object0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.send((Object) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.close((-2572));
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean0 = headerExchangeClient0.isConnected();
      assertFalse(boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.setAttribute("Wgk0r2UIv ]OyyQq", "Wgk0r2UIv ]OyyQq");
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      String string1 = headerExchangeClient0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object1 = headerExchangeClient0.getAttribute("HeaderExchangeClient [channel=org.apache.dubbo.remoting.Client$MockitoMock$263838559@0000000003]");
      assertNull(object1);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      try { 
        headerExchangeClient0.request((Object) null, (-2572));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to send request null, cause: The channel org.apache.dubbo.remoting.Client$MockitoMock$952229901@0000000003 is closed!
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = null;
      try {
        headerExchangeClient0 = new HeaderExchangeClient(client0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(client0).getAttribute(anyString());
      doReturn((URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.reconnect();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      HeaderExchangeClient headerExchangeClient1 = new HeaderExchangeClient(headerExchangeClient0, false);
      assertNotNull(headerExchangeClient1);
      assertFalse(headerExchangeClient1.equals((Object)headerExchangeClient0));
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertFalse(headerExchangeClient1.canHandleIdle());
      
      Object object0 = headerExchangeClient1.getAttribute("Could not find root logger information. Is this OK?");
      assertNull(object0);
      assertFalse(headerExchangeClient0.equals((Object)headerExchangeClient1));
      assertFalse(headerExchangeClient1.equals((Object)headerExchangeClient0));
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertFalse(headerExchangeClient1.canHandleIdle());
      assertNotSame(headerExchangeClient0, headerExchangeClient1);
      assertNotSame(headerExchangeClient1, headerExchangeClient0);
      
      String string0 = headerExchangeClient0.toString();
      assertNotNull(string0);
      assertFalse(headerExchangeClient0.equals((Object)headerExchangeClient1));
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertNotSame(headerExchangeClient0, headerExchangeClient1);
      
      // Undeclared exception!
      try { 
        headerExchangeClient0.request((Object) null, (-1499));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.DefaultFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(client0).getAttribute(anyString());
      doReturn((InetSocketAddress) null, (InetSocketAddress) null).when(client0).getRemoteAddress();
      doReturn(false).when(client0).isConnected();
      doReturn((ChannelHandler) null, (ChannelHandler) null, (ChannelHandler) null, (ChannelHandler) null, (ChannelHandler) null).when(client0).getChannelHandler();
      doReturn((InetSocketAddress) null, (InetSocketAddress) null).when(client0).getLocalAddress();
      doReturn((URL) null, (URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object0 = headerExchangeClient0.getAttribute("");
      assertNull(object0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.send((Object) null, false);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      ChannelHandler channelHandler0 = headerExchangeClient0.getChannelHandler();
      assertNull(channelHandler0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean0 = headerExchangeClient0.isClosed();
      assertFalse(boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean1 = headerExchangeClient0.isConnected();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      String string0 = headerExchangeClient0.toString();
      assertNotNull(string0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      ExchangeHandler exchangeHandler0 = headerExchangeClient0.getExchangeHandler();
      assertNull(exchangeHandler0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean2 = headerExchangeClient0.isClosed();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object1 = headerExchangeClient0.getAttribute("HeaderExchangeClient [channel=org.apache.dubbo.remoting.Client$MockitoMock$263838559@0000000004]");
      assertNull(object1);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.send((Object) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      URL uRL0 = headerExchangeClient0.getUrl();
      assertNull(uRL0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      String string1 = headerExchangeClient0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      ChannelHandler channelHandler1 = headerExchangeClient0.getChannelHandler();
      assertNull(channelHandler1);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      InetSocketAddress inetSocketAddress0 = headerExchangeClient0.getRemoteAddress();
      assertNull(inetSocketAddress0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      ChannelHandler channelHandler2 = headerExchangeClient0.getChannelHandler();
      assertNull(channelHandler2);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      InetSocketAddress inetSocketAddress1 = headerExchangeClient0.getLocalAddress();
      assertNull(inetSocketAddress1);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      InetSocketAddress inetSocketAddress2 = headerExchangeClient0.getRemoteAddress();
      assertNull(inetSocketAddress2);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.removeAttribute("");
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      URL uRL1 = headerExchangeClient0.getUrl();
      assertNull(uRL1);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      ChannelHandler channelHandler3 = headerExchangeClient0.getChannelHandler();
      assertNull(channelHandler3);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.reconnect();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.close((-268));
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object2 = headerExchangeClient0.getAttribute("");
      assertNull(object2);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      try { 
        headerExchangeClient0.send((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to send message null, cause: The channel org.apache.dubbo.remoting.Client$MockitoMock$952229901@0000000004 is closed!
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = null;
      try {
        headerExchangeClient0 = new HeaderExchangeClient(client0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = null;
      try {
        headerExchangeClient0 = new HeaderExchangeClient(client0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      URL uRL0 = headerExchangeClient0.getUrl();
      assertNull(uRL0);
      assertFalse(headerExchangeClient0.canHandleIdle());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(client0).getAttribute(anyString());
      doReturn((InetSocketAddress) null).when(client0).getRemoteAddress();
      doReturn(false).when(client0).hasAttribute(anyString());
      doReturn((ChannelHandler) null).when(client0).getChannelHandler();
      doReturn((URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      assertNotNull(headerExchangeClient0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean0 = headerExchangeClient0.isClosed();
      assertFalse(boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      InetSocketAddress inetSocketAddress0 = headerExchangeClient0.getRemoteAddress();
      assertNull(inetSocketAddress0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean1 = headerExchangeClient0.hasAttribute("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      Object object0 = headerExchangeClient0.getAttribute("");
      assertNull(object0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.send((Object) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      URL uRL0 = headerExchangeClient0.getUrl();
      assertNull(uRL0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.reset((URL) null);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.send((Object) "");
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.startClose();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      boolean boolean2 = headerExchangeClient0.isClosed();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      String string0 = headerExchangeClient0.toString();
      assertNotNull(string0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.send((Object) null, false);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      ChannelHandler channelHandler0 = headerExchangeClient0.getChannelHandler();
      assertNull(channelHandler0);
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      String string1 = headerExchangeClient0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.reconnect();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.reconnect();
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.close((-846));
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.setAttribute("", "");
      assertFalse(headerExchangeClient0.canHandleIdle());
      
      headerExchangeClient0.close();
      assertFalse(headerExchangeClient0.canHandleIdle());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Client client0 = mock(Client.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(client0).isConnected();
      doReturn((ChannelHandler) null, (ChannelHandler) null).when(client0).getChannelHandler();
      doReturn((InetSocketAddress) null).when(client0).getLocalAddress();
      doReturn((URL) null, (URL) null).when(client0).getUrl();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(client0, false);
      headerExchangeClient0.startClose();
      headerExchangeClient0.getExchangeHandler();
      headerExchangeClient0.getExchangeHandler();
      headerExchangeClient0.getUrl();
      headerExchangeClient0.reset((URL) null);
      headerExchangeClient0.startClose();
      headerExchangeClient0.getLocalAddress();
      headerExchangeClient0.isConnected();
      ExecutorService executorService0 = mock(ExecutorService.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        headerExchangeClient0.request((Object) "+O5", (-1215), executorService0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.DefaultFuture", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HeaderExchangeClient headerExchangeClient0 = null;
      try {
        headerExchangeClient0 = new HeaderExchangeClient((Client) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Client can't be null
         //
         verifyException("org.apache.dubbo.common.utils.Assert", e);
      }
  }
}
