/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 04:15:45 GMT 2021
 */

package org.apache.dubbo.remoting.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.dubbo.common.URL;
import org.apache.dubbo.remoting.utils.UrlUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UrlUtils_ESTest extends UrlUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((-3860), (-3860)).when(uRL0).getParameter(anyString() , anyInt());
      int int0 = UrlUtils.getIdleTimeout(uRL0);
      assertEquals((-3860), int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((-1284)).when(uRL0).getParameter(anyString() , anyInt());
      int int0 = UrlUtils.getHeartbeat(uRL0);
      assertEquals((-1284), int0);
      
      URL uRL1 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((-1284)).when(uRL1).getParameter(anyString() , anyInt());
      int int1 = UrlUtils.getHeartbeat(uRL1);
      assertTrue(int1 == int0);
      assertEquals((-1284), int1);
      
      UrlUtils urlUtils0 = new UrlUtils();
      assertNotNull(urlUtils0);
      
      URL uRL2 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn((-1284)).when(uRL2).getParameter(anyString() , anyInt());
      int int2 = UrlUtils.getHeartbeat(uRL2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1284), int2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(2226).when(uRL0).getParameter(anyString() , anyInt());
      int int0 = UrlUtils.getHeartbeat(uRL0);
      assertEquals(2226, int0);
      
      int int1 = 0;
      URL uRL1 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 2226).when(uRL1).getParameter(anyString() , anyInt());
      int int2 = UrlUtils.getIdleTimeout(uRL1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2226, int2);
      
      URL uRL2 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(2226).when(uRL2).getParameter(anyString() , anyInt());
      int int3 = UrlUtils.getHeartbeat(uRL2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(2226, int3);
      
      URL uRL3 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(95).when(uRL3).getParameter(anyString() , anyInt());
      int int4 = UrlUtils.getHeartbeat(uRL3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(95, int4);
      
      UrlUtils urlUtils0 = new UrlUtils();
      assertNotNull(urlUtils0);
      
      URL uRL4 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL4).getParameter(anyString() , anyInt());
      int int5 = UrlUtils.getHeartbeat(uRL4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      
      URL uRL5 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL5).getParameter(anyString() , anyInt());
      int int6 = UrlUtils.getIdleTimeout(uRL5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertFalse(int6 == int2);
      assertEquals(0, int6);
      
      URL uRL6 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(2226, 0).when(uRL6).getParameter(anyString() , anyInt());
      // Undeclared exception!
      try { 
        UrlUtils.getIdleTimeout(uRL6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // idleTimeout < heartbeatInterval * 2
         //
         verifyException("org.apache.dubbo.remoting.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL0).getParameter(anyString() , anyInt());
      int int0 = UrlUtils.getHeartbeat(uRL0);
      assertEquals(0, int0);
      
      URL uRL1 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL1).getParameter(anyString() , anyInt());
      int int1 = UrlUtils.getIdleTimeout(uRL1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      UrlUtils urlUtils0 = new UrlUtils();
      assertNotNull(urlUtils0);
      
      URL uRL2 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL2).getParameter(anyString() , anyInt());
      int int2 = UrlUtils.getIdleTimeout(uRL2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      URL uRL3 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL3).getParameter(anyString() , anyInt());
      int int3 = UrlUtils.getHeartbeat(uRL3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      URL uRL4 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL4).getParameter(anyString() , anyInt());
      int int4 = UrlUtils.getIdleTimeout(uRL4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      
      URL uRL5 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL5).getParameter(anyString() , anyInt());
      int int5 = UrlUtils.getHeartbeat(uRL5);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      
      URL uRL6 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL6).getParameter(anyString() , anyInt());
      int int6 = UrlUtils.getHeartbeat(uRL6);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertEquals(0, int6);
      
      URL uRL7 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL7).getParameter(anyString() , anyInt());
      int int7 = UrlUtils.getIdleTimeout(uRL7);
      assertTrue(int7 == int2);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertEquals(0, int7);
      
      URL uRL8 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL8).getParameter(anyString() , anyInt());
      int int8 = UrlUtils.getHeartbeat(uRL8);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int1);
      assertTrue(int8 == int3);
      assertTrue(int8 == int2);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertTrue(int8 == int0);
      assertEquals(0, int8);
      
      URL uRL9 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL9).getParameter(anyString() , anyInt());
      int int9 = UrlUtils.getHeartbeat(uRL9);
      assertTrue(int9 == int5);
      assertTrue(int9 == int4);
      assertTrue(int9 == int3);
      assertTrue(int9 == int7);
      assertTrue(int9 == int8);
      assertTrue(int9 == int1);
      assertTrue(int9 == int2);
      assertTrue(int9 == int0);
      assertTrue(int9 == int6);
      assertEquals(0, int9);
      
      URL uRL10 = null;
      // Undeclared exception!
      try { 
        UrlUtils.getHeartbeat((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UrlUtils urlUtils0 = new UrlUtils();
      assertNotNull(urlUtils0);
      
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL0).getParameter(anyString() , anyInt());
      int int0 = UrlUtils.getHeartbeat(uRL0);
      assertEquals(0, int0);
      
      URL uRL1 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL1).getParameter(anyString() , anyInt());
      int int1 = UrlUtils.getHeartbeat(uRL1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      URL uRL2 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL2).getParameter(anyString() , anyInt());
      int int2 = UrlUtils.getIdleTimeout(uRL2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      URL uRL3 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL3).getParameter(anyString() , anyInt());
      int int3 = UrlUtils.getIdleTimeout(uRL3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      URL uRL4 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL4).getParameter(anyString() , anyInt());
      int int4 = UrlUtils.getIdleTimeout(uRL4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      
      URL uRL5 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL5).getParameter(anyString() , anyInt());
      int int5 = UrlUtils.getIdleTimeout(uRL5);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      
      URL uRL6 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL6).getParameter(anyString() , anyInt());
      int int6 = UrlUtils.getIdleTimeout(uRL6);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertEquals(0, int6);
      
      URL uRL7 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL7).getParameter(anyString() , anyInt());
      int int7 = UrlUtils.getIdleTimeout(uRL7);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertEquals(0, int7);
      
      URL uRL8 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL8).getParameter(anyString() , anyInt());
      int int8 = UrlUtils.getIdleTimeout(uRL8);
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int3);
      assertTrue(int8 == int6);
      assertEquals(0, int8);
      
      URL uRL9 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL9).getParameter(anyString() , anyInt());
      int int9 = UrlUtils.getHeartbeat(uRL9);
      assertTrue(int9 == int8);
      assertTrue(int9 == int3);
      assertTrue(int9 == int7);
      assertTrue(int9 == int4);
      assertTrue(int9 == int2);
      assertTrue(int9 == int6);
      assertTrue(int9 == int1);
      assertTrue(int9 == int0);
      assertTrue(int9 == int5);
      assertEquals(0, int9);
      
      URL uRL10 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL10).getParameter(anyString() , anyInt());
      int int10 = UrlUtils.getHeartbeat(uRL10);
      assertTrue(int10 == int5);
      assertTrue(int10 == int2);
      assertTrue(int10 == int8);
      assertTrue(int10 == int0);
      assertTrue(int10 == int4);
      assertTrue(int10 == int3);
      assertTrue(int10 == int7);
      assertTrue(int10 == int1);
      assertTrue(int10 == int9);
      assertTrue(int10 == int6);
      assertEquals(0, int10);
      
      URL uRL11 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL11).getParameter(anyString() , anyInt());
      int int11 = UrlUtils.getIdleTimeout(uRL11);
      assertTrue(int11 == int10);
      assertTrue(int11 == int1);
      assertTrue(int11 == int9);
      assertTrue(int11 == int6);
      assertTrue(int11 == int0);
      assertTrue(int11 == int8);
      assertTrue(int11 == int5);
      assertTrue(int11 == int2);
      assertTrue(int11 == int7);
      assertTrue(int11 == int4);
      assertTrue(int11 == int3);
      assertEquals(0, int11);
      
      URL uRL12 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL12).getParameter(anyString() , anyInt());
      int int12 = UrlUtils.getIdleTimeout(uRL12);
      assertTrue(int12 == int5);
      assertTrue(int12 == int11);
      assertTrue(int12 == int8);
      assertTrue(int12 == int9);
      assertTrue(int12 == int1);
      assertTrue(int12 == int6);
      assertTrue(int12 == int7);
      assertTrue(int12 == int4);
      assertTrue(int12 == int3);
      assertTrue(int12 == int2);
      assertTrue(int12 == int0);
      assertTrue(int12 == int10);
      assertEquals(0, int12);
      
      URL uRL13 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL13).getParameter(anyString() , anyInt());
      int int13 = UrlUtils.getIdleTimeout(uRL13);
      assertTrue(int13 == int1);
      assertTrue(int13 == int6);
      assertTrue(int13 == int8);
      assertTrue(int13 == int10);
      assertTrue(int13 == int7);
      assertTrue(int13 == int9);
      assertTrue(int13 == int12);
      assertTrue(int13 == int11);
      assertTrue(int13 == int5);
      assertTrue(int13 == int2);
      assertTrue(int13 == int0);
      assertTrue(int13 == int3);
      assertTrue(int13 == int4);
      assertEquals(0, int13);
      
      URL uRL14 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL14).getParameter(anyString() , anyInt());
      int int14 = UrlUtils.getIdleTimeout(uRL14);
      assertTrue(int14 == int2);
      assertTrue(int14 == int5);
      assertTrue(int14 == int9);
      assertTrue(int14 == int7);
      assertTrue(int14 == int3);
      assertTrue(int14 == int11);
      assertTrue(int14 == int8);
      assertTrue(int14 == int0);
      assertTrue(int14 == int1);
      assertTrue(int14 == int6);
      assertTrue(int14 == int12);
      assertTrue(int14 == int13);
      assertTrue(int14 == int10);
      assertTrue(int14 == int4);
      assertEquals(0, int14);
      
      // Undeclared exception!
      try { 
        UrlUtils.getIdleTimeout((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UrlUtils urlUtils0 = new UrlUtils();
      assertNotNull(urlUtils0);
      
      int int0 = 1151;
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(1151, 1151).when(uRL0).getParameter(anyString() , anyInt());
      // Undeclared exception!
      try { 
        UrlUtils.getIdleTimeout(uRL0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // idleTimeout < heartbeatInterval * 2
         //
         verifyException("org.apache.dubbo.remoting.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UrlUtils urlUtils0 = new UrlUtils();
      URL uRL0 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL0).getParameter(anyString() , anyInt());
      UrlUtils.getIdleTimeout(uRL0);
      URL uRL1 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL1).getParameter(anyString() , anyInt());
      UrlUtils.getIdleTimeout(uRL1);
      URL uRL2 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL2).getParameter(anyString() , anyInt());
      UrlUtils.getHeartbeat(uRL2);
      URL uRL3 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL3).getParameter(anyString() , anyInt());
      UrlUtils.getHeartbeat(uRL3);
      URL uRL4 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(uRL4).getParameter(anyString() , anyInt());
      UrlUtils.getHeartbeat(uRL4);
      URL uRL5 = mock(URL.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(uRL5).getParameter(anyString() , anyInt());
      int int0 = UrlUtils.getIdleTimeout(uRL5);
      assertEquals(0, int0);
  }
}
