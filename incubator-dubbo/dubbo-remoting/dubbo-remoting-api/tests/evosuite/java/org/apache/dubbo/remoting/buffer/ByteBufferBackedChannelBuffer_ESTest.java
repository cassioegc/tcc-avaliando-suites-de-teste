/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 03:18:49 GMT 2021
 */

package org.apache.dubbo.remoting.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Enumeration;
import org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer;
import org.apache.dubbo.remoting.buffer.ChannelBuffer;
import org.apache.dubbo.remoting.buffer.DirectChannelBufferFactory;
import org.apache.dubbo.remoting.buffer.DynamicChannelBuffer;
import org.apache.dubbo.remoting.buffer.HeapChannelBuffer;
import org.apache.dubbo.remoting.buffer.HeapChannelBufferFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteBufferBackedChannelBuffer_ESTest extends ByteBufferBackedChannelBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = byteBufferBackedChannelBuffer0.setBytes(7, (InputStream) sequenceInputStream0, (-1502));
      assertEquals(2039, byteBufferBackedChannelBuffer0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      byteBuffer0.getFloat();
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      int int0 = byteBufferBackedChannelBuffer0.setBytes(1151, (InputStream) pushbackInputStream0, (int) (byte)0);
      assertEquals(2035, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.toByteBuffer(0, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.toByteBuffer((-4918), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(2);
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer(2, 0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(0, (ChannelBuffer) heapChannelBuffer0, 2, 3894);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[5];
      byteBufferBackedChannelBuffer0.setBytes(0, byteArray0, 0, (int) (byte)2);
      assertEquals(2039, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setByte(1, (-2670));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      byteBuffer0.getFloat();
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes((-91), (OutputStream) pipedOutputStream0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(3674, directChannelBufferFactory0);
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(467);
      // Undeclared exception!
      try { 
        channelBuffer0.getBytes(1374, (ChannelBuffer) dynamicChannelBuffer0, (-63));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ChannelBuffer channelBuffer0 = byteBufferBackedChannelBuffer0.copy();
      assertTrue(channelBuffer0.isDirect());
      assertEquals(2039, channelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(800);
      ByteBuffer byteBuffer0 = dynamicChannelBuffer0.toByteBuffer(0, 800);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.setByte(1, 1);
      assertEquals(800, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(".jz]if~}m\"N~x");
      byte[] byteArray0 = new byte[13];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 7);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      int int0 = byteBufferBackedChannelBuffer0.setBytes(0, (InputStream) byteArrayInputStream0, 3);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.isDirect();
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.hasArray();
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.getByte(1);
      assertEquals(2039, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(275);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBuffer0.putFloat(545.15F);
      byte byte0 = byteBufferBackedChannelBuffer0.getByte(0);
      assertEquals((byte)68, byte0);
      assertEquals(275, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte byte0 = byteBufferBackedChannelBuffer0.getByte((byte)0);
      assertEquals(4, byteBufferBackedChannelBuffer0.capacity());
      assertEquals((byte) (-38), byte0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3674);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ChannelBuffer channelBuffer0 = byteBufferBackedChannelBuffer0.copy((int) (byte)0, 1383);
      assertEquals(1383, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ChannelBuffer channelBuffer0 = byteBufferBackedChannelBuffer0.copy(0, (int) (byte)0);
      assertEquals(0, channelBuffer0.capacity());
      assertTrue(channelBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      int int0 = byteBufferBackedChannelBuffer0.capacity();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("SENSITIVE");
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.arrayOffset();
      assertEquals(9, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(1646);
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer(1646, 0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.arrayOffset();
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1356);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.array();
      assertEquals(1356, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.toByteBuffer(0, (-22));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(0, heapChannelBufferFactory0);
      ByteBuffer byteBuffer0 = dynamicChannelBuffer0.toByteBuffer(0, 0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(0, (byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(0, byteArray0, (-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes((int) (byte) (-12), (byte[]) null, 4162, (-6355));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(3, (ChannelBuffer) null, 21, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ChannelBuffer channelBuffer0 = byteBufferBackedChannelBuffer0.readBytes(3);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(3, channelBuffer0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("O\u0007WQ");
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(325, byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(0, (InputStream) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(0, (InputStream) pipedInputStream0, (-16));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3674);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 1383);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(2494, (InputStream) byteArrayInputStream0, 1768);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1398), 4162);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(12, (InputStream) byteArrayInputStream0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        byteBufferBackedChannelBuffer0.setBytes(0, (InputStream) pipedInputStream0, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(40);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes(40, byteArray0, 81, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes(0, (byte[]) null, (-924), 1217);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes((int) (byte)0, (ChannelBuffer) byteBufferBackedChannelBuffer0, (int) (byte) (-12), 4162);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(2);
      ByteBuffer byteBuffer0 = heapChannelBuffer0.toByteBuffer(2, 0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes((-534), (ChannelBuffer) heapChannelBuffer0, (-534), 3894);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes((-1), byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(821);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      MockFile mockFile0 = new MockFile("<rn&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3380);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes(698, (OutputStream) bufferedOutputStream0, 1846);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3674);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes((int) (byte)0, (OutputStream) null, 1374);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1530);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes((-749), (OutputStream) null, (-749));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(821);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      MockFile mockFile0 = new MockFile("<rn&");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 3380);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes((-1), (OutputStream) bufferedOutputStream0, 1846);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("=$T@(");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes((-22), (OutputStream) bufferedOutputStream0, 1817);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        byteBufferBackedChannelBuffer0.getBytes((int) (byte)0, (OutputStream) pipedOutputStream0, 2255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.copy((int) (byte) (-82), (int) (byte) (-38));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(0, heapChannelBufferFactory0);
      ByteBuffer byteBuffer0 = dynamicChannelBuffer0.toByteBuffer(0, 0);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer1);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.array();
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1036);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.array();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ChannelBuffer channelBuffer0 = byteBufferBackedChannelBuffer0.readBytes(0);
      // Undeclared exception!
      try { 
        channelBuffer0.array();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = null;
      try {
        byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer((ByteBufferBackedChannelBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.skipBytes((-20));
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer1 = null;
      try {
        byteBufferBackedChannelBuffer1 = new ByteBufferBackedChannelBuffer(byteBufferBackedChannelBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = byteBufferBackedChannelBuffer0.setBytes(0, (InputStream) byteArrayInputStream0, 0);
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(1, (ChannelBuffer) byteBufferBackedChannelBuffer0, 2167, 1146);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1356);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.factory();
      assertEquals(1356, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.setBytes(0, byteBuffer0);
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      int int0 = byteBufferBackedChannelBuffer0.capacity();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1356);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.getBytes(0, byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=1356 lim=1356 cap=1356]", byteBuffer0.toString());
      assertEquals(1356, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 1383);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.setBytes(2494, (InputStream) byteArrayInputStream0, 1768);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = byteBufferBackedChannelBuffer0.setBytes(0, (InputStream) pipedInputStream0, 0);
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(7);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ByteBuffer byteBuffer1 = byteBufferBackedChannelBuffer0.toByteBuffer(0, 0);
      assertEquals(7, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(0, byteBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.toByteBuffer(0, 0);
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ByteBuffer byteBuffer1 = byteBufferBackedChannelBuffer0.toByteBuffer(41, 493);
      assertEquals(2039, byteBufferBackedChannelBuffer0.capacity());
      assertEquals(41, byteBuffer1.arrayOffset());
      assertEquals(493, byteBuffer1.capacity());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(3674, directChannelBufferFactory0);
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(467);
      channelBuffer0.setBytes((int) (byte)0, (ChannelBuffer) dynamicChannelBuffer0, 3674, (int) (byte)0);
      assertEquals(467, channelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(0, heapChannelBufferFactory0);
      ByteBuffer byteBuffer0 = dynamicChannelBuffer0.toByteBuffer(0, 0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.getBytes(3, (OutputStream) null, 0);
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byteBufferBackedChannelBuffer0.getBytes(554, (OutputStream) pipedOutputStream0, 1);
      assertEquals(1, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HeapChannelBuffer heapChannelBuffer0 = new HeapChannelBuffer(2);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes((-534), (ChannelBuffer) heapChannelBuffer0, (-534), 3894);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1356);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getBytes(40, (ChannelBuffer) null, (-2474), 2296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ChannelBuffer channelBuffer0 = byteBufferBackedChannelBuffer0.copy(0, 0);
      assertEquals(0, channelBuffer0.capacity());
      assertFalse(channelBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.copy(572, (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.factory();
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = null;
      try {
        byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buffer
         //
         verifyException("org.apache.dubbo.remoting.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.arrayOffset();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(0, heapChannelBufferFactory0);
      ByteBuffer byteBuffer0 = dynamicChannelBuffer0.toByteBuffer(0, 0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.array();
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.isDirect();
      assertEquals(0, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2202);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.hasArray();
      assertEquals(2202, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(2202, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.setBytes(256, (ChannelBuffer) byteBufferBackedChannelBuffer0, (int) (byte)26);
      assertEquals(2013, byteBufferBackedChannelBuffer0.readableBytes());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byteBufferBackedChannelBuffer0.getBytes(1, (ChannelBuffer) byteBufferBackedChannelBuffer0, 554, 2);
      assertEquals(2039, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(2039, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBufferBackedChannelBuffer0.getByte(1996);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1996
         //
         verifyException("java.nio.DirectByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      byte[] byteArray0 = new byte[5];
      byteBufferBackedChannelBuffer0.getBytes((int) (byte)0, byteArray0, 0, (int) (byte)0);
      assertEquals(2039, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(2039, byteBufferBackedChannelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2039);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer1 = new ByteBufferBackedChannelBuffer(byteBufferBackedChannelBuffer0);
      assertEquals(2039, byteBufferBackedChannelBuffer1.capacity());
      assertEquals(2039, byteBufferBackedChannelBuffer1.writerIndex());
  }
}
