/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 04:16:55 GMT 2021
 */

package org.apache.dubbo.remoting.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.dubbo.remoting.buffer.ChannelBuffer;
import org.apache.dubbo.remoting.buffer.ChannelBufferFactory;
import org.apache.dubbo.remoting.buffer.HeapChannelBufferFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HeapChannelBufferFactory_ESTest extends HeapChannelBufferFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      byte[] byteArray0 = new byte[9];
      ChannelBuffer channelBuffer0 = heapChannelBufferFactory0.getBuffer(byteArray0, 0, (int) (byte)1);
      assertEquals(1, channelBuffer0.writerIndex());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      ChannelBuffer channelBuffer0 = heapChannelBufferFactory0.getBuffer(0);
      assertEquals(0, channelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChannelBufferFactory channelBufferFactory0 = HeapChannelBufferFactory.getInstance();
      // Undeclared exception!
      try { 
        channelBufferFactory0.getBuffer((byte[]) null, (-150), (-150));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array == null
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        heapChannelBufferFactory0.getBuffer(byteArray0, 1, (int) (byte) (-126));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        heapChannelBufferFactory0.getBuffer(byteArray0, (int) (byte)71, (int) (byte)71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      // Undeclared exception!
      try { 
        heapChannelBufferFactory0.getBuffer((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.HeapChannelBufferFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      ChannelBuffer channelBuffer0 = heapChannelBufferFactory0.getBuffer(31);
      assertEquals(31, channelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(byteBuffer1).get(any(byte[].class) , anyInt() , anyInt());
      ChannelBuffer channelBuffer0 = heapChannelBufferFactory0.getBuffer(byteBuffer1);
      assertEquals(0, channelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ChannelBufferFactory channelBufferFactory0 = HeapChannelBufferFactory.getInstance();
      // Undeclared exception!
      try { 
        channelBufferFactory0.getBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity can not be negative
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory();
      byte[] byteArray0 = new byte[7];
      ChannelBuffer channelBuffer0 = heapChannelBufferFactory0.getBuffer(byteArray0, (int) (byte)0, 0);
      assertFalse(channelBuffer0.readable());
  }
}
