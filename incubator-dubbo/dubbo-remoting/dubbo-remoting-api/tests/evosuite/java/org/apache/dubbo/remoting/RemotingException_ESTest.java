/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 03:44:45 GMT 2021
 */

package org.apache.dubbo.remoting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import org.apache.dubbo.common.URL;
import org.apache.dubbo.remoting.Channel;
import org.apache.dubbo.remoting.ChannelHandler;
import org.apache.dubbo.remoting.RemotingException;
import org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient;
import org.apache.dubbo.remoting.transport.ChannelDelegate;
import org.apache.dubbo.remoting.transport.ClientDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemotingException_ESTest extends RemotingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("", 0);
      RemotingException remotingException0 = new RemotingException(inetSocketAddress0, inetSocketAddress0, "");
      InetSocketAddress inetSocketAddress1 = remotingException0.getRemoteAddress();
      assertSame(inetSocketAddress1, inetSocketAddress0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(895);
      RemotingException remotingException0 = new RemotingException(mockInetSocketAddress0, (InetSocketAddress) null, "\u0000%");
      InetSocketAddress inetSocketAddress0 = remotingException0.getLocalAddress();
      assertSame(mockInetSocketAddress0, inetSocketAddress0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      RemotingException remotingException0 = null;
      try {
        remotingException0 = new RemotingException(clientDelegate0, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(clientDelegate0, false);
      MockThrowable mockThrowable0 = new MockThrowable();
      RemotingException remotingException0 = null;
      try {
        remotingException0 = new RemotingException(headerExchangeClient0, "", mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChannelDelegate channelDelegate0 = new ChannelDelegate();
      RemotingException remotingException0 = null;
      try {
        remotingException0 = new RemotingException(channelDelegate0, "PlHI'U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ChannelDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(895);
      RemotingException remotingException0 = new RemotingException(mockInetSocketAddress0, (InetSocketAddress) null, "\u0000%");
      RemotingException remotingException1 = new RemotingException((InetSocketAddress) null, mockInetSocketAddress0, "\u0000%", remotingException0);
      InetSocketAddress inetSocketAddress0 = remotingException1.getRemoteAddress();
      assertEquals("192.168.1.42", inetSocketAddress0.getHostString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("", 0);
      RemotingException remotingException0 = new RemotingException(inetSocketAddress0, inetSocketAddress0, "");
      InetSocketAddress inetSocketAddress1 = remotingException0.getLocalAddress();
      assertSame(inetSocketAddress0, inetSocketAddress1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[9];
      URL uRL0 = URL.valueOf("@cc#W|[", stringArray0);
      InetSocketAddress inetSocketAddress0 = uRL0.toInetSocketAddress();
      RemotingException remotingException0 = new RemotingException((Channel) null, "org.apache.dubbo.remoting.RemotingException");
      RemotingException remotingException1 = new RemotingException(inetSocketAddress0, inetSocketAddress0, remotingException0);
      assertFalse(remotingException1.equals((Object)remotingException0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RemotingException remotingException0 = new RemotingException((Channel) null, "org.apache.dubbo.remoting.RemotingException");
      RemotingException remotingException1 = new RemotingException((Channel) null, "@cc#W|[", remotingException0);
      assertFalse(remotingException1.equals((Object)remotingException0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RemotingException remotingException0 = new RemotingException((Channel) null, "");
      RemotingException remotingException1 = new RemotingException((Channel) null, remotingException0);
      assertFalse(remotingException1.equals((Object)remotingException0));
  }
}
