/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 04:26:09 GMT 2021
 */

package org.apache.dubbo.remoting.exchange.support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.dubbo.common.URL;
import org.apache.dubbo.remoting.Channel;
import org.apache.dubbo.remoting.ChannelHandler;
import org.apache.dubbo.remoting.exchange.ExchangeChannel;
import org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher;
import org.apache.dubbo.remoting.exchange.support.Replier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExchangeHandlerDispatcher_ESTest extends ExchangeHandlerDispatcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ExchangeHandlerDispatcher exchangeHandlerDispatcher0 = new ExchangeHandlerDispatcher();
      ExchangeHandlerDispatcher exchangeHandlerDispatcher1 = new ExchangeHandlerDispatcher();
      ExchangeHandlerDispatcher exchangeHandlerDispatcher2 = exchangeHandlerDispatcher0.removeChannelHandler(exchangeHandlerDispatcher1);
      Class<Integer> class0 = Integer.class;
      exchangeHandlerDispatcher2.removeReplier(class0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      exchangeHandlerDispatcher1.caught(channel0, throwable0);
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((URL) null).when(channel1).getUrl();
      // Undeclared exception!
      try { 
        exchangeHandlerDispatcher1.telnet(channel1, "@ps.c;E&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Replier<Object> replier0 = (Replier<Object>) mock(Replier.class, new ViolatedAssumptionAnswer());
      ExchangeHandlerDispatcher exchangeHandlerDispatcher0 = new ExchangeHandlerDispatcher(replier0);
      Class<Object> class0 = Object.class;
      Replier<Object> replier1 = (Replier<Object>) mock(Replier.class, new ViolatedAssumptionAnswer());
      exchangeHandlerDispatcher0.addReplier(class0, replier1);
      Class<Object> class1 = Object.class;
      Replier<Object> replier2 = (Replier<Object>) mock(Replier.class, new ViolatedAssumptionAnswer());
      ExchangeHandlerDispatcher exchangeHandlerDispatcher1 = exchangeHandlerDispatcher0.addReplier(class1, replier2);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      exchangeHandlerDispatcher0.received(channel0, channel0);
      ExchangeHandlerDispatcher exchangeHandlerDispatcher2 = exchangeHandlerDispatcher1.addChannelHandler(exchangeHandlerDispatcher0);
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((URL) null).when(channel1).getUrl();
      exchangeHandlerDispatcher2.removeChannelHandler(exchangeHandlerDispatcher1);
      // Undeclared exception!
      try { 
        exchangeHandlerDispatcher2.telnet(channel1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[4];
      ExchangeHandlerDispatcher exchangeHandlerDispatcher0 = new ExchangeHandlerDispatcher(channelHandlerArray0);
      Class<Object> class0 = Object.class;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher1 = exchangeHandlerDispatcher0.removeReplier(class0);
      ExchangeHandlerDispatcher exchangeHandlerDispatcher2 = exchangeHandlerDispatcher1.removeChannelHandler(exchangeHandlerDispatcher0);
      channelHandlerArray0[0] = (ChannelHandler) exchangeHandlerDispatcher2;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher3 = new ExchangeHandlerDispatcher();
      channelHandlerArray0[1] = (ChannelHandler) exchangeHandlerDispatcher3;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher4 = exchangeHandlerDispatcher3.removeChannelHandler(exchangeHandlerDispatcher2);
      exchangeHandlerDispatcher0.removeChannelHandler(channelHandlerArray0[1]);
      channelHandlerArray0[2] = (ChannelHandler) exchangeHandlerDispatcher4;
      Replier<Object> replier0 = (Replier<Object>) mock(Replier.class, new ViolatedAssumptionAnswer());
      ExchangeHandlerDispatcher exchangeHandlerDispatcher5 = new ExchangeHandlerDispatcher(replier0, channelHandlerArray0);
      channelHandlerArray0[3] = (ChannelHandler) exchangeHandlerDispatcher5;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher6 = new ExchangeHandlerDispatcher(channelHandlerArray0);
      Class<String> class1 = String.class;
      exchangeHandlerDispatcher2.removeReplier(class1);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      exchangeHandlerDispatcher5.sent(channel0, exchangeHandlerDispatcher2);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Replier<Object> replier0 = (Replier<Object>) mock(Replier.class, new ViolatedAssumptionAnswer());
      ExchangeHandlerDispatcher exchangeHandlerDispatcher0 = new ExchangeHandlerDispatcher(replier0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Throwable throwable0 = mock(Throwable.class, new ViolatedAssumptionAnswer());
      exchangeHandlerDispatcher0.caught(channel0, throwable0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Replier<Object> replier0 = (Replier<Object>) mock(Replier.class, new ViolatedAssumptionAnswer());
      ExchangeHandlerDispatcher exchangeHandlerDispatcher0 = new ExchangeHandlerDispatcher(replier0);
      Class<String> class0 = String.class;
      Replier<String> replier1 = (Replier<String>) mock(Replier.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      exchangeHandlerDispatcher0.received(channel0, channel0);
      ExchangeHandlerDispatcher exchangeHandlerDispatcher1 = exchangeHandlerDispatcher0.addReplier(class0, replier1);
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      exchangeHandlerDispatcher1.connected(channel1);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((URL) null).when(channel2).getUrl();
      // Undeclared exception!
      try { 
        exchangeHandlerDispatcher0.telnet(channel2, "Start ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[6];
      Replier<Object> replier0 = (Replier<Object>) mock(Replier.class, new ViolatedAssumptionAnswer());
      ExchangeHandlerDispatcher exchangeHandlerDispatcher0 = new ExchangeHandlerDispatcher(replier0);
      channelHandlerArray0[0] = (ChannelHandler) exchangeHandlerDispatcher0;
      Replier<String> replier1 = (Replier<String>) mock(Replier.class, new ViolatedAssumptionAnswer());
      ChannelHandler[] channelHandlerArray1 = new ChannelHandler[5];
      channelHandlerArray1[0] = (ChannelHandler) exchangeHandlerDispatcher0;
      channelHandlerArray1[1] = (ChannelHandler) exchangeHandlerDispatcher0;
      channelHandlerArray1[2] = (ChannelHandler) exchangeHandlerDispatcher0;
      channelHandlerArray1[3] = (ChannelHandler) exchangeHandlerDispatcher0;
      channelHandlerArray1[4] = (ChannelHandler) exchangeHandlerDispatcher0;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher1 = new ExchangeHandlerDispatcher(replier1, channelHandlerArray1);
      channelHandlerArray0[1] = (ChannelHandler) exchangeHandlerDispatcher1;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher2 = new ExchangeHandlerDispatcher();
      channelHandlerArray0[2] = (ChannelHandler) exchangeHandlerDispatcher2;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher3 = new ExchangeHandlerDispatcher();
      channelHandlerArray0[3] = (ChannelHandler) exchangeHandlerDispatcher3;
      Replier<Object> replier2 = (Replier<Object>) mock(Replier.class, new ViolatedAssumptionAnswer());
      ExchangeHandlerDispatcher exchangeHandlerDispatcher4 = new ExchangeHandlerDispatcher(replier2);
      channelHandlerArray0[4] = (ChannelHandler) exchangeHandlerDispatcher4;
      Replier<Object> replier3 = (Replier<Object>) mock(Replier.class, new ViolatedAssumptionAnswer());
      ExchangeHandlerDispatcher exchangeHandlerDispatcher5 = new ExchangeHandlerDispatcher(replier3);
      channelHandlerArray0[5] = (ChannelHandler) exchangeHandlerDispatcher5;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher6 = new ExchangeHandlerDispatcher(channelHandlerArray0);
      Class<Object> class0 = Object.class;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher7 = exchangeHandlerDispatcher6.removeReplier(class0);
      Replier<Object> replier4 = (Replier<Object>) mock(Replier.class, new ViolatedAssumptionAnswer());
      ExchangeHandlerDispatcher exchangeHandlerDispatcher8 = exchangeHandlerDispatcher7.addReplier(class0, replier4);
      ExchangeHandlerDispatcher exchangeHandlerDispatcher9 = exchangeHandlerDispatcher8.addChannelHandler(channelHandlerArray0[1]);
      exchangeHandlerDispatcher6.removeReplier(class0);
      ExchangeHandlerDispatcher exchangeHandlerDispatcher10 = exchangeHandlerDispatcher9.removeChannelHandler(channelHandlerArray1[1]);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ExchangeChannel exchangeChannel0 = mock(ExchangeChannel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        exchangeHandlerDispatcher10.reply(exchangeChannel0, exchangeHandlerDispatcher2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Replier not found, Unsupported message object: class org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.ReplierDispatcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[3];
      Replier<String> replier0 = (Replier<String>) mock(Replier.class, new ViolatedAssumptionAnswer());
      ChannelHandler[] channelHandlerArray1 = new ChannelHandler[9];
      ExchangeHandlerDispatcher exchangeHandlerDispatcher0 = new ExchangeHandlerDispatcher();
      Class<String> class0 = String.class;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher1 = exchangeHandlerDispatcher0.removeReplier(class0);
      ExchangeHandlerDispatcher exchangeHandlerDispatcher2 = exchangeHandlerDispatcher1.addReplier(class0, replier0);
      channelHandlerArray1[0] = (ChannelHandler) exchangeHandlerDispatcher2;
      Class<Object> class1 = Object.class;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher3 = exchangeHandlerDispatcher0.removeReplier(class1);
      channelHandlerArray1[1] = (ChannelHandler) exchangeHandlerDispatcher3;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher4 = new ExchangeHandlerDispatcher(channelHandlerArray1);
      channelHandlerArray1[2] = (ChannelHandler) exchangeHandlerDispatcher4;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher5 = exchangeHandlerDispatcher1.removeReplier(class0);
      channelHandlerArray1[3] = (ChannelHandler) exchangeHandlerDispatcher5;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher6 = new ExchangeHandlerDispatcher(channelHandlerArray0);
      channelHandlerArray1[4] = (ChannelHandler) exchangeHandlerDispatcher6;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher7 = new ExchangeHandlerDispatcher(channelHandlerArray0);
      Replier<Object> replier1 = null;
      // Undeclared exception!
      try { 
        exchangeHandlerDispatcher7.addReplier(class1, (Replier<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Replier<Integer> replier0 = (Replier<Integer>) mock(Replier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(replier0).reply(any(org.apache.dubbo.remoting.exchange.ExchangeChannel.class) , anyInt());
      ExchangeHandlerDispatcher exchangeHandlerDispatcher0 = new ExchangeHandlerDispatcher(replier0);
      ExchangeChannel exchangeChannel0 = mock(ExchangeChannel.class, new ViolatedAssumptionAnswer());
      exchangeHandlerDispatcher0.reply(exchangeChannel0, "}i&43r");
      Class<String> class0 = String.class;
      ExchangeHandlerDispatcher exchangeHandlerDispatcher1 = exchangeHandlerDispatcher0.removeReplier(class0);
      ExchangeChannel exchangeChannel1 = mock(ExchangeChannel.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      // Undeclared exception!
      try { 
        exchangeHandlerDispatcher1.reply(exchangeChannel1, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.ReplierDispatcher", e);
      }
  }
}
