/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 03:01:19 GMT 2021
 */

package org.apache.dubbo.remoting.telnet.support;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.apache.dubbo.remoting.telnet.support.TelnetUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TelnetUtils_ESTest extends TelnetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      linkedList1.add((List<String>) linkedList0);
      linkedList0.add("/[@9]@S$E");
      linkedList1.add((List<String>) linkedList0);
      linkedList0.add("/[@9]@S$E");
      linkedList0.add("SA'}3&#+|&2hH{)j<");
      String string0 = TelnetUtils.toTable((List<String>) linkedList0, (List<List<String>>) linkedList1);
      assertEquals("+-----------+-----------+-------------------+\r\n| /[@9]@S$E | /[@9]@S$E | SA'}3&#+|&2hH{)j< |\r\n+-----------+-----------+-------------------+\r\n| /[@9]@S$E | /[@9]@S$E | SA'}3&#+|&2hH{)j< |\r\n| /[@9]@S$E | /[@9]@S$E | SA'}3&#+|&2hH{)j< |\r\n+-----------+-----------+-------------------+\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        TelnetUtils.toTable(stringArray0, (List<List<String>>) linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.dubbo.remoting.telnet.support.TelnetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        TelnetUtils.toTable((List<String>) null, (List<List<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.telnet.support.TelnetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList0);
      linkedList1.add((List<String>) linkedList2);
      linkedList0.add("");
      // Undeclared exception!
      try { 
        TelnetUtils.toTable((List<String>) linkedList0, (List<List<String>>) linkedList1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        TelnetUtils.toList((List<List<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.telnet.support.TelnetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.offer(linkedList1);
      linkedList1.add("");
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList0.add((List<String>) linkedList2);
      // Undeclared exception!
      try { 
        TelnetUtils.toList(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("maP");
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      linkedList1.add((List<String>) linkedList0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("+-----+-----+\r\n| maP | maP |\r\n+-----+-----+\r\n| maP | maP |\r\n| maP | maP |\r\n+-----+-----+\r\n");
      String string0 = TelnetUtils.toTable((List<String>) linkedList2, (List<List<String>>) linkedList1);
      assertEquals("+------------------------------------------------------------------------+\r\n| +-----+-----+\r\n| maP | maP |\r\n+-----+-----+\r\n| maP | maP |\r\n| maP | maP |\r\n+-----+-----+\r\n |\r\n+------------------------------------------------------------------------+\r\n| maP                                                                    |\r\n+------------------------------------------------------------------------+\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("maP");
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      linkedList1.add((List<String>) linkedList0);
      linkedList0.add("maP");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+-----+-----+\r\n| maP | maP |\r\n+-----+-----+\r\n| maP | maP |\r\n+-----+-----+\r\n";
      stringArray0[1] = "maP";
      String string0 = TelnetUtils.toTable(stringArray0, (List<List<String>>) linkedList1);
      assertEquals("+-----------------------------------------------------------------------------++\r\n| +-----+-----+\r\n| maP | maP |\r\n+-----+-----+\r\n| maP | maP |\r\n+-----+-----+\r\n | maP |\r\n+-----------------------------------------------------------------------------++\r\n| maP                                                                         | maP |\r\n+-----------------------------------------------------------------------------++\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Not found class ");
      linkedList0.addFirst(linkedList1);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add("!y\"Mjt");
      String string0 = TelnetUtils.toTable((List<String>) linkedList2, (List<List<String>>) linkedList0);
      assertEquals("+------------------+\r\n| !y\"Mjt           |\r\n+------------------+\r\n| Not found class  |\r\n+------------------+\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("maP");
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      linkedList1.add((List<String>) linkedList0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+-----+-----+\r\n| maP | maP |\r\n+-----+-----+\r\n| maP | maP |\r\n+-----+-----+\r\n";
      stringArray0[1] = "maP";
      // Undeclared exception!
      try { 
        TelnetUtils.toTable(stringArray0, (List<List<String>>) linkedList1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      linkedList1.add((List<String>) linkedList0);
      // Undeclared exception!
      try { 
        TelnetUtils.toTable((List<String>) linkedList0, (List<List<String>>) linkedList1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.dubbo.remoting.telnet.support.TelnetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("maP");
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      linkedList1.add((List<String>) linkedList0);
      linkedList0.add("maP");
      String string0 = TelnetUtils.toList(linkedList1);
      assertEquals("maP - maP", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("maP");
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      linkedList1.add((List<String>) linkedList0);
      linkedList1.add((List<String>) linkedList0);
      String string0 = TelnetUtils.toList(linkedList1);
      assertEquals("maP\r\nmaP", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.offerFirst(linkedList1);
      String string0 = TelnetUtils.toList(linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        TelnetUtils.toTable(stringArray0, (List<List<String>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.telnet.support.TelnetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TelnetUtils telnetUtils0 = new TelnetUtils();
  }
}
