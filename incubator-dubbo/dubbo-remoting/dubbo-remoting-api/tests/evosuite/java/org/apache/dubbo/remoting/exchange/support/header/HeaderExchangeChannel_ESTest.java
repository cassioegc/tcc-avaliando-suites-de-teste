/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 03:11:35 GMT 2021
 */

package org.apache.dubbo.remoting.exchange.support.header;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetSocketAddress;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.dubbo.common.URL;
import org.apache.dubbo.common.threadlocal.NamedInternalThreadFactory;
import org.apache.dubbo.remoting.Channel;
import org.apache.dubbo.remoting.ChannelHandler;
import org.apache.dubbo.remoting.exchange.ExchangeHandler;
import org.apache.dubbo.remoting.exchange.Request;
import org.apache.dubbo.remoting.exchange.Response;
import org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher;
import org.apache.dubbo.remoting.exchange.support.Replier;
import org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel;
import org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient;
import org.apache.dubbo.remoting.transport.ChannelDelegate;
import org.apache.dubbo.remoting.transport.ChannelHandlerAdapter;
import org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher;
import org.apache.dubbo.remoting.transport.ClientDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HeaderExchangeChannel_ESTest extends HeaderExchangeChannel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      HeaderExchangeChannel headerExchangeChannel0 = new HeaderExchangeChannel(clientDelegate0);
      // Undeclared exception!
      try { 
        headerExchangeChannel0.setAttribute((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }



  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      ClientDelegate clientDelegate1 = new ClientDelegate(clientDelegate0);
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(clientDelegate1, false);
      ChannelDelegate channelDelegate0 = new ChannelDelegate(headerExchangeClient0);
      HeaderExchangeChannel headerExchangeChannel0 = new HeaderExchangeChannel(channelDelegate0);
      // Undeclared exception!
      try { 
        headerExchangeChannel0.hasAttribute("Failed to send request ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ChannelDelegate channelDelegate0 = new ChannelDelegate();
      HeaderExchangeChannel headerExchangeChannel0 = new HeaderExchangeChannel(channelDelegate0);
      // Undeclared exception!
      try { 
        headerExchangeChannel0.getRemoteAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ChannelDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Channel channel0 = null;
      HeaderExchangeChannel.removeChannelIfDisconnected((Channel) null);
      HeaderExchangeChannel headerExchangeChannel0 = null;
      try {
        headerExchangeChannel0 = new HeaderExchangeChannel((Channel) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // channel == null
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }


  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HeaderExchangeChannel.removeChannel((Channel) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChannelDelegate channelDelegate0 = new ChannelDelegate();
      HeaderExchangeChannel headerExchangeChannel0 = new HeaderExchangeChannel(channelDelegate0);
      // Undeclared exception!
      try { 
        headerExchangeChannel0.isConnected();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ChannelDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ChannelDelegate channelDelegate0 = new ChannelDelegate();
      // Undeclared exception!
      try { 
        HeaderExchangeChannel.removeChannelIfDisconnected(channelDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ChannelDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      HeaderExchangeChannel headerExchangeChannel0 = new HeaderExchangeChannel(clientDelegate0);
      // Undeclared exception!
      try { 
        headerExchangeChannel0.getChannelHandler();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HeaderExchangeChannel headerExchangeChannel0 = HeaderExchangeChannel.getOrAddChannel((Channel) null);
      assertNull(headerExchangeChannel0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      assertFalse(clientDelegate0.canHandleIdle());
      assertNotNull(clientDelegate0);
      
      HeaderExchangeChannel headerExchangeChannel0 = new HeaderExchangeChannel(clientDelegate0);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(headerExchangeChannel0.isClosed());
      assertNotNull(headerExchangeChannel0);
      
      headerExchangeChannel0.close();
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(headerExchangeChannel0.isClosed());
      
      // Undeclared exception!
      try { 
        headerExchangeChannel0.getLocalAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      assertFalse(clientDelegate0.canHandleIdle());
      assertNotNull(clientDelegate0);
      
      ClientDelegate clientDelegate1 = new ClientDelegate(clientDelegate0);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(clientDelegate1.canHandleIdle());
      assertFalse(clientDelegate1.equals((Object)clientDelegate0));
      assertNotNull(clientDelegate1);
      
      ChannelDelegate channelDelegate0 = new ChannelDelegate(clientDelegate1);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(clientDelegate1.canHandleIdle());
      assertFalse(clientDelegate0.equals((Object)clientDelegate1));
      assertFalse(clientDelegate1.equals((Object)clientDelegate0));
      assertNotNull(channelDelegate0);
      
      HeaderExchangeChannel headerExchangeChannel0 = new HeaderExchangeChannel(channelDelegate0);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(clientDelegate1.canHandleIdle());
      assertFalse(headerExchangeChannel0.isClosed());
      assertFalse(clientDelegate0.equals((Object)clientDelegate1));
      assertFalse(clientDelegate1.equals((Object)clientDelegate0));
      assertNotNull(headerExchangeChannel0);
      
      // Undeclared exception!
      try { 
        headerExchangeChannel0.removeAttribute("Kx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      assertFalse(clientDelegate0.canHandleIdle());
      assertNotNull(clientDelegate0);
      
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(clientDelegate0, false);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertNotNull(headerExchangeClient0);
      
      HeaderExchangeChannel headerExchangeChannel0 = new HeaderExchangeChannel(headerExchangeClient0);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertFalse(headerExchangeChannel0.isClosed());
      assertNotNull(headerExchangeChannel0);
      
      // Undeclared exception!
      try { 
        headerExchangeChannel0.getUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Channel channel0 = null;
      HeaderExchangeChannel headerExchangeChannel0 = null;
      try {
        headerExchangeChannel0 = new HeaderExchangeChannel((Channel) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // channel == null
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HeaderExchangeChannel headerExchangeChannel0 = null;
      try {
        headerExchangeChannel0 = new HeaderExchangeChannel((Channel) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // channel == null
         //
         verifyException("org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      assertFalse(clientDelegate0.canHandleIdle());
      assertNotNull(clientDelegate0);
      
      ClientDelegate clientDelegate1 = new ClientDelegate(clientDelegate0);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(clientDelegate1.canHandleIdle());
      assertFalse(clientDelegate1.equals((Object)clientDelegate0));
      assertNotNull(clientDelegate1);
      
      HeaderExchangeChannel headerExchangeChannel0 = new HeaderExchangeChannel(clientDelegate1);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(clientDelegate1.canHandleIdle());
      assertFalse(headerExchangeChannel0.isClosed());
      assertFalse(clientDelegate0.equals((Object)clientDelegate1));
      assertFalse(clientDelegate1.equals((Object)clientDelegate0));
      assertNotNull(headerExchangeChannel0);
      
      // Undeclared exception!
      try { 
        headerExchangeChannel0.startClose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ChannelDelegate channelDelegate0 = new ChannelDelegate();
      assertNotNull(channelDelegate0);
      
      // Undeclared exception!
      try { 
        HeaderExchangeChannel.getOrAddChannel(channelDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ChannelDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ChannelDelegate channelDelegate0 = new ChannelDelegate();
      assertNotNull(channelDelegate0);
      
      HeaderExchangeChannel headerExchangeChannel0 = new HeaderExchangeChannel(channelDelegate0);
      assertFalse(headerExchangeChannel0.isClosed());
      assertNotNull(headerExchangeChannel0);
      
      // Undeclared exception!
      try { 
        headerExchangeChannel0.getExchangeHandler();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ChannelDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      assertFalse(clientDelegate0.canHandleIdle());
      assertNotNull(clientDelegate0);
      
      ClientDelegate clientDelegate1 = new ClientDelegate(clientDelegate0);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(clientDelegate1.canHandleIdle());
      assertFalse(clientDelegate1.equals((Object)clientDelegate0));
      assertNotNull(clientDelegate1);
      
      // Undeclared exception!
      try { 
        HeaderExchangeChannel.getOrAddChannel(clientDelegate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      assertFalse(clientDelegate0.canHandleIdle());
      assertNotNull(clientDelegate0);
      
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(clientDelegate0, false);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertNotNull(headerExchangeClient0);
      
      ClientDelegate clientDelegate1 = new ClientDelegate(headerExchangeClient0);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertFalse(clientDelegate1.canHandleIdle());
      assertFalse(clientDelegate1.equals((Object)clientDelegate0));
      assertNotNull(clientDelegate1);
      
      // Undeclared exception!
      try { 
        HeaderExchangeChannel.getOrAddChannel(clientDelegate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClientDelegate clientDelegate0 = new ClientDelegate();
      assertFalse(clientDelegate0.canHandleIdle());
      assertNotNull(clientDelegate0);
      
      boolean boolean0 = false;
      HeaderExchangeClient headerExchangeClient0 = new HeaderExchangeClient(clientDelegate0, false);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertNotNull(headerExchangeClient0);
      
      ClientDelegate clientDelegate1 = new ClientDelegate(headerExchangeClient0);
      assertFalse(clientDelegate0.canHandleIdle());
      assertFalse(headerExchangeClient0.canHandleIdle());
      assertFalse(clientDelegate1.canHandleIdle());
      assertFalse(clientDelegate1.equals((Object)clientDelegate0));
      assertNotNull(clientDelegate1);
      
      // Undeclared exception!
      try { 
        headerExchangeClient0.request((Object) clientDelegate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ClientDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ChannelDelegate channelDelegate0 = new ChannelDelegate();
      assertNotNull(channelDelegate0);
      
      // Undeclared exception!
      try { 
        channelDelegate0.getLocalAddress();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.ChannelDelegate", e);
      }
  }

}
