/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 03:49:43 GMT 2021
 */

package org.apache.dubbo.remoting.exchange;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.dubbo.common.logger.Logger;
import org.apache.dubbo.remoting.exchange.Request;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Request_ESTest extends Request_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Request request0 = new Request();
      request0.setVersion("");
      Request request1 = request0.copy();
      request1.setData(request0);
      request1.setEvent(true);
      Request request2 = new Request((-1L));
      request2.getData();
      request1.setData((Object) null);
      request1.getVersion();
      request1.getVersion();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Request request0 = new Request(0L);
      request0.setHeartbeat(true);
      Request request1 = request0.copy();
      request1.getData();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Request request0 = new Request(0L);
      Request request1 = request0.copy();
      request1.setEvent("HM{7TCIqQ8H5|%yCXs");
      request1.toString();
      request1.setHeartbeat(true);
      request1.getId();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Request request0 = new Request();
      request0.setHeartbeat(false);
      request0.setEvent("t'Ln=s-:Sn]<");
      request0.getData();
      request0.setData("t'Ln=s-:Sn]<");
      request0.setBroken(true);
      request0.toString();
      request0.setVersion("Request [id=1139, version=null, twoway=true, event=true, broken=true, data=java.lang.String@0000000002]");
      request0.setEvent(false);
      request0.setBroken(false);
      request0.getId();
      request0.getVersion();
      request0.getData();
      request0.getId();
      request0.setBroken(true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Request request0 = new Request();
      Request request1 = request0.copy();
      request1.isHeartbeat();
      request0.setEvent("@<}:X^k<T<^,E");
      request1.isTwoWay();
      request0.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Request request0 = new Request();
      request0.isTwoWay();
      request0.copy();
      request0.getId();
      request0.isBroken();
      request0.isHeartbeat();
      request0.setEvent("");
      request0.isHeartbeat();
      request0.setVersion("");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Request request0 = new Request((-2426L));
      request0.isHeartbeat();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Request request0 = new Request();
      request0.setBroken(true);
      request0.setEvent("fpwNeN0s.c*p");
      request0.setEvent("fpwNeN0s.c*p");
      request0.isTwoWay();
      request0.setTwoWay(true);
      request0.setEvent(true);
      request0.setVersion("fpwNeN0s.c*p");
      request0.setEvent("");
      request0.isBroken();
      request0.setBroken(false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Request request0 = new Request();
      request0.toString();
      request0.setHeartbeat(false);
      request0.isEvent();
      request0.getData();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Request request0 = new Request();
      request0.setTwoWay(false);
      request0.setTwoWay(false);
      request0.setData("ECYJX1adkzr'sN]");
      request0.setBroken(true);
      request0.setData("ECYJX1adkzr'sN]");
      Request request1 = request0.copy();
      request0.isTwoWay();
      request0.setTwoWay(true);
      request1.getData();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Request request0 = new Request((-2449L));
      request0.setEvent("0{)VByKt/");
      request0.setEvent(true);
      Request request1 = request0.copy();
      request1.setEvent("Parsed \"");
      request1.setBroken(false);
      request1.getVersion();
      request1.getVersion();
      request1.setEvent("0{)VByKt/");
      request1.setEvent(true);
      request0.isEvent();
      request1.getId();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Request request0 = new Request((-1L));
      Request request1 = request0.copy();
      request1.getId();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Request request0 = new Request();
      request0.setEvent(false);
      request0.toString();
      request0.getVersion();
      request0.getVersion();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Request request0 = new Request(0L);
      Request request1 = request0.copy();
      request1.setHeartbeat(false);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Request request0 = new Request((-1L));
      request0.getData();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Request request0 = new Request(0L);
      request0.setHeartbeat(true);
      request0.getId();
      Request request1 = request0.copy();
      request1.setVersion(", data=");
      request1.isHeartbeat();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Request request0 = new Request(1077L);
      request0.setHeartbeat(true);
      request0.getVersion();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Request request0 = new Request();
      request0.toString();
      request0.isTwoWay();
      request0.setData("Appender \"");
      request0.getData();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Request request0 = new Request();
      request0.setBroken(false);
      request0.toString();
      request0.getId();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Request request0 = new Request();
      Request request1 = request0.copy();
      request1.getVersion();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Request request0 = new Request(1048576L);
      request0.setBroken(false);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Request request0 = new Request();
      request0.setEvent(true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Request request0 = new Request();
      request0.setEvent(", version=");
      request0.getData();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Request request0 = new Request(1L);
      request0.isEvent();
      request0.getData();
      request0.setData((Object) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Request request0 = new Request();
      request0.setTwoWay(false);
      request0.isHeartbeat();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Request request0 = new Request();
      request0.setVersion("_Np");
      request0.isBroken();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Request request0 = new Request();
      request0.getId();
      request0.setHeartbeat(false);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Request request0 = new Request();
      request0.getVersion();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Request request0 = new Request();
      request0.setBroken(false);
      request0.setData(request0);
      Logger logger0 = mock(Logger.class, new ViolatedAssumptionAnswer());
      request0.setBroken(false);
      request0.setEvent(false);
      request0.toString();
      request0.isEvent();
      request0.setHeartbeat(true);
      request0.setData("Request [id=1121, version=null, twoway=true, event=false, broken=false, data=this]");
      request0.isHeartbeat();
      request0.setHeartbeat(false);
      request0.isTwoWay();
      request0.setEvent(false);
      request0.setBroken(false);
      request0.toString();
      request0.setVersion("#,A>FA");
      request0.getData();
      request0.isHeartbeat();
      request0.isTwoWay();
      request0.isHeartbeat();
      request0.setHeartbeat(true);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Request request0 = new Request();
      Request request1 = request0.copy();
      request1.setTwoWay(true);
      request1.setHeartbeat(true);
      request1.setVersion((String) null);
      request0.getData();
      request0.setBroken(true);
      request1.setVersion((String) null);
      request0.setEvent((String) null);
      request1.setData((Object) null);
      request0.toString();
      request1.isBroken();
      request1.setEvent("Reading configuration from URL ");
      request0.setData((Object) null);
      request0.setBroken(true);
      request0.isHeartbeat();
      request1.setTwoWay(true);
      request1.setBroken(true);
      request0.setTwoWay(true);
      request0.isBroken();
      request1.isHeartbeat();
      request0.getVersion();
      request1.getId();
      Request request2 = request0.copy();
      request2.setVersion("Reading configuration from URL ");
      Request request3 = request0.copy();
      request3.getId();
      request2.copy();
      assertEquals(0L, request0.getId());
      assertTrue(request0.isHeartbeat());
  }
}
