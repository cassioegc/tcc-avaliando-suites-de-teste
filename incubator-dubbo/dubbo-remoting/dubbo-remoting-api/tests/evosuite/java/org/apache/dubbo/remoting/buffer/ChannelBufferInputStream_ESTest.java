/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 03:43:08 GMT 2021
 */

package org.apache.dubbo.remoting.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.dubbo.remoting.buffer.ChannelBuffer;
import org.apache.dubbo.remoting.buffer.ChannelBufferInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChannelBufferInputStream_ESTest extends ChannelBufferInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(channelBuffer0).readableBytes();
      doReturn(0, 0).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
      long long0 = channelBufferInputStream0.skip(2147483647L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(40, 0).when(channelBuffer0).readableBytes();
      ChannelBufferInputStream channelBufferInputStream0 = null;
      try {
        channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(1420, 1420).when(channelBuffer0).readableBytes();
      doReturn(255, 1420, 1420, (-2294)).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
      byte[] byteArray0 = new byte[1];
      channelBufferInputStream0.read(byteArray0);
      channelBufferInputStream0.readBytes();
      int int0 = channelBufferInputStream0.readBytes();
      assertEquals((-2549), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(1741, 1741).when(channelBuffer0).readableBytes();
      doReturn((-1483), (-1483), (-1483), 486, (-1483)).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
      byte[] byteArray0 = new byte[2];
      int int0 = channelBufferInputStream0.read(byteArray0);
      assertEquals((-228), int0);
      
      int int1 = channelBufferInputStream0.read(byteArray0, 6354, 64);
      assertEquals(64, int1);
      
      long long0 = channelBufferInputStream0.skip(1755L);
      assertEquals(1741L, long0);
      
      int int2 = channelBufferInputStream0.read(byteArray0, (int) (byte) (-64), 0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(channelBuffer0).readableBytes();
      doReturn(0, 0).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
      byte[] byteArray0 = new byte[2];
      int int0 = channelBufferInputStream0.read(byteArray0, 3859, 4745);
      assertEquals(0, channelBufferInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(channelBuffer0).readableBytes();
      doReturn(0, 0).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
      int int0 = channelBufferInputStream0.available();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MAX_VALUE, Integer.MAX_VALUE).when(channelBuffer0).readableBytes();
      doReturn(Integer.MAX_VALUE, 1105).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
      int int0 = channelBufferInputStream0.available();
      assertEquals((-1107), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ChannelBufferInputStream channelBufferInputStream0 = null;
      try {
        channelBufferInputStream0 = new ChannelBufferInputStream((ChannelBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((-1861)).when(channelBuffer0).readableBytes();
      ChannelBufferInputStream channelBufferInputStream0 = null;
      try {
        channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -1861
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(1741, 1741).when(channelBuffer0).readableBytes();
      doReturn((-1483), (-1483)).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
      int int0 = channelBufferInputStream0.available();
      assertEquals(1741, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MAX_VALUE).when(channelBuffer0).readableBytes();
      doReturn(1, Integer.MAX_VALUE).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0, 0);
      byte[] byteArray0 = new byte[7];
      int int0 = channelBufferInputStream0.read(byteArray0);
      assertEquals((-2147483646), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(channelBuffer0).readable();
      doReturn(0, 0).when(channelBuffer0).readableBytes();
      doReturn(0).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
      int int0 = channelBufferInputStream0.read();
      assertEquals((-1), int0);
      assertEquals(0, channelBufferInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((byte) (-1)).when(channelBuffer0).readByte();
      doReturn(true).when(channelBuffer0).readable();
      doReturn(Integer.MAX_VALUE).when(channelBuffer0).readableBytes();
      doReturn(1).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0, 0);
      int int0 = channelBufferInputStream0.read();
      assertEquals(255, int0);
      assertEquals(0, channelBufferInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(channelBuffer0).readableBytes();
      ChannelBufferInputStream channelBufferInputStream0 = null;
      try {
        channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0, 410);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      ChannelBufferInputStream channelBufferInputStream0 = null;
      try {
        channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0, (-729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length: -729
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ChannelBufferInputStream channelBufferInputStream0 = null;
      try {
        channelBufferInputStream0 = new ChannelBufferInputStream((ChannelBuffer) null, (-1628));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // buffer
         //
         verifyException("org.apache.dubbo.remoting.buffer.ChannelBufferInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(channelBuffer0).readableBytes();
      doReturn(0, 0).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
      int int0 = channelBufferInputStream0.readBytes();
      assertEquals(0, int0);
      assertEquals(0, channelBufferInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(channelBuffer0).readableBytes();
      doReturn(0).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
      channelBufferInputStream0.reset();
      assertEquals(0, channelBufferInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(channelBuffer0).readableBytes();
      doReturn(0).when(channelBuffer0).readerIndex();
      ChannelBufferInputStream channelBufferInputStream0 = new ChannelBufferInputStream(channelBuffer0);
      channelBufferInputStream0.mark((-2893));
      assertEquals(0, channelBufferInputStream0.available());
  }
}
