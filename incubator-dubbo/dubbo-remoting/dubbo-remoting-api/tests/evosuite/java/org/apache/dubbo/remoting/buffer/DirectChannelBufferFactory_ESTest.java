/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 03:36:44 GMT 2021
 */

package org.apache.dubbo.remoting.buffer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.dubbo.remoting.buffer.ChannelBuffer;
import org.apache.dubbo.remoting.buffer.ChannelBufferFactory;
import org.apache.dubbo.remoting.buffer.DirectChannelBufferFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DirectChannelBufferFactory_ESTest extends DirectChannelBufferFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      byte[] byteArray0 = new byte[2];
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteArray0, 1, 1);
      assertEquals(1, channelBuffer0.capacity());
      assertEquals(1, channelBuffer0.readableBytes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        directChannelBufferFactory0.getBuffer(byteArray0, (-1610), (-550));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // offset: -1610
         //
         verifyException("org.apache.dubbo.remoting.buffer.DirectChannelBufferFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      byte[] byteArray0 = new byte[2];
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteArray0, (int) (byte)0, (int) (byte)1);
      assertEquals(1, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      // Undeclared exception!
      try { 
        directChannelBufferFactory0.getBuffer((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.buffer.DirectChannelBufferFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(0);
      assertEquals(0, channelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      // Undeclared exception!
      try { 
        directChannelBufferFactory0.getBuffer((-1307));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity: -1307
         //
         verifyException("org.apache.dubbo.remoting.buffer.DirectChannelBufferFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuffer0).isReadOnly();
      doReturn((ByteBuffer) null).when(byteBuffer0).get(any(byte[].class) , anyInt() , anyInt());
      doReturn(false).when(byteBuffer0).isDirect();
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertEquals(0, channelBuffer0.readableBytes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(byteBuffer0).isReadOnly();
      doReturn(true).when(byteBuffer0).isDirect();
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteBuffer0);
      assertEquals(0, channelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        directChannelBufferFactory0.getBuffer(byteArray0, 879, (int) (byte)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // length: 1
         //
         verifyException("org.apache.dubbo.remoting.buffer.DirectChannelBufferFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      byte[] byteArray0 = new byte[2];
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteArray0, (int) (byte)1, (int) (byte)0);
      assertFalse(channelBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      // Undeclared exception!
      try { 
        directChannelBufferFactory0.getBuffer((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // array
         //
         verifyException("org.apache.dubbo.remoting.buffer.DirectChannelBufferFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(1167);
      assertEquals(1167, channelBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ChannelBufferFactory channelBufferFactory0 = DirectChannelBufferFactory.getInstance();
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(byteBuffer1).isReadOnly();
      doReturn(byteBuffer0).when(byteBuffer1).get(any(byte[].class) , anyInt() , anyInt());
      ChannelBuffer channelBuffer0 = channelBufferFactory0.getBuffer(byteBuffer1);
      assertFalse(channelBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        directChannelBufferFactory0.getBuffer(byteArray0, 1, (int) (byte) (-72));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity: -72
         //
         verifyException("org.apache.dubbo.remoting.buffer.DirectChannelBufferFactory", e);
      }
  }
}
