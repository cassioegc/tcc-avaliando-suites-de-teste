/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 10 04:19:33 GMT 2021
 */

package org.apache.dubbo.remoting.transport.codec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.dubbo.remoting.Channel;
import org.apache.dubbo.remoting.Codec;
import org.apache.dubbo.remoting.buffer.ChannelBuffer;
import org.apache.dubbo.remoting.transport.codec.CodecAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodecAdapter_ESTest extends CodecAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Codec codec0 = mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn("").when(codec0).decode(any(org.apache.dubbo.remoting.Channel.class) , any(java.io.InputStream.class));
      CodecAdapter codecAdapter0 = new CodecAdapter(codec0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(2054).when(channelBuffer0).readableBytes();
      doReturn(2054).when(channelBuffer0).readerIndex();
      Object object0 = codecAdapter0.decode(channel0, channelBuffer0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Codec codec0 = mock(Codec.class, new ViolatedAssumptionAnswer());
      CodecAdapter codecAdapter0 = new CodecAdapter(codec0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codecAdapter0.encode(channel0, (ChannelBuffer) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.codec.CodecAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Codec codec0 = mock(Codec.class, new ViolatedAssumptionAnswer());
      CodecAdapter codecAdapter0 = new CodecAdapter(codec0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        codecAdapter0.decode(channel0, (ChannelBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.codec.CodecAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Codec codec0 = mock(Codec.class, new ViolatedAssumptionAnswer());
      CodecAdapter codecAdapter0 = new CodecAdapter(codec0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((-171)).when(channelBuffer0).readableBytes();
      // Undeclared exception!
      try { 
        codecAdapter0.decode(channel0, channelBuffer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.dubbo.remoting.transport.codec.CodecAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CodecAdapter codecAdapter0 = null;
      try {
        codecAdapter0 = new CodecAdapter((Codec) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // codec == null
         //
         verifyException("org.apache.dubbo.common.utils.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Codec codec0 = mock(Codec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(codec0).decode(any(org.apache.dubbo.remoting.Channel.class) , any(java.io.InputStream.class));
      CodecAdapter codecAdapter0 = new CodecAdapter(codec0);
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(channelBuffer0).readableBytes();
      doReturn(0).when(channelBuffer0).readerIndex();
      Object object0 = codecAdapter0.decode(channel0, channelBuffer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Codec codec0 = mock(Codec.class, new ViolatedAssumptionAnswer());
      CodecAdapter codecAdapter0 = new CodecAdapter(codec0);
      ChannelBuffer channelBuffer0 = mock(ChannelBuffer.class, new ViolatedAssumptionAnswer());
      codecAdapter0.encode((Channel) null, channelBuffer0, (Object) null);
  }
}
