/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:09:17 GMT 2021
 */

package com.graphhopper.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.storage.DAType;
import com.graphhopper.storage.Directory;
import com.graphhopper.storage.GHDirectory;
import com.graphhopper.storage.MMapDirectory;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.storage.StorableProperties;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StorableProperties_ESTest extends StorableProperties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringReader stringReader0 = new StringReader("=");
      StorableProperties.loadProperties(hashMap0, stringReader0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DAType dAType0 = DAType.fromString("0");
      GHDirectory gHDirectory0 = new GHDirectory("0", dAType0);
      StorableProperties storableProperties0 = new StorableProperties(gHDirectory0);
      StorableProperties storableProperties1 = storableProperties0.create(1685L);
      storableProperties1.flush();
      assertSame(storableProperties1, storableProperties0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      rAMDirectory0.clear();
      boolean boolean0 = storableProperties0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DAType dAType0 = DAType.fromString("0");
      GHDirectory gHDirectory0 = new GHDirectory("0", dAType0);
      StorableProperties storableProperties0 = new StorableProperties(gHDirectory0);
      StorableProperties storableProperties1 = storableProperties0.create(1685L);
      long long0 = storableProperties1.getCapacity();
      assertEquals(32768L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory(")9: i!HPL");
      StorableProperties storableProperties0 = new StorableProperties(mMapDirectory0);
      boolean boolean0 = storableProperties0.check("", 0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("Oq.cG]&M)-h|<hx0%'+");
      StorableProperties storableProperties0 = new StorableProperties(mMapDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.putAll((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory((String) null);
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.Helper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(map0);
      // Undeclared exception!
      try { 
        StorableProperties.loadProperties(hashMap0, (Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V%.kr`{5V|4e0B=lx");
      // Undeclared exception!
      try { 
        StorableProperties.loadProperties((Map<String, String>) null, stringReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.StorableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      StringReader stringReader0 = new StringReader("");
      StorableProperties.loadProperties(hashMap0, stringReader0);
      try { 
        StorableProperties.loadProperties(hashMap0, stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      storableProperties0.create(0L);
      // Undeclared exception!
      try { 
        storableProperties0.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already initialized
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("%_LH AzQ-z");
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.Helper", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("0", dAType0);
      StorableProperties storableProperties0 = new StorableProperties(gHDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.flush();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // 0/properties does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      StorableProperties storableProperties0 = new StorableProperties(mMapDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.flush();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      rAMDirectory0.close();
      storableProperties0.create(1655L);
      // Undeclared exception!
      try { 
        storableProperties0.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already closed
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      // Undeclared exception!
      storableProperties0.create(4294967295L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DAType dAType0 = DAType.MMAP_RO;
      GHDirectory gHDirectory0 = new GHDirectory("org.apache.commons.io.filefilter.WildcardFileFilter", dAType0);
      StorableProperties storableProperties0 = new StorableProperties(gHDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.create((-2226L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException: File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      StorableProperties storableProperties1 = storableProperties0.create(4839L);
      // Undeclared exception!
      try { 
        storableProperties1.create(4839L);
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // already created
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.checkVersions(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Version of nodes unsupported: , expected:5. Make sure you are using the same GraphHopper version for reading the files that was used for creating them. See https://discuss.graphhopper.com/t/722
         //
         verifyException("com.graphhopper.storage.StorableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StorableProperties storableProperties0 = null;
      try {
        storableProperties0 = new StorableProperties((Directory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.StorableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      StorableProperties storableProperties0 = new StorableProperties(mMapDirectory0);
      storableProperties0.put("", (Object) "");
      String string0 = storableProperties0.get("");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      StorableProperties storableProperties0 = new StorableProperties(mMapDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.get("com.graphhopper.storage.StorableProperties");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Do not use upper case keys (com.graphhopper.storage.StorableProperties) for StorableProperties since 0.7
         //
         verifyException("com.graphhopper.storage.StorableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringReader stringReader0 = new StringReader("=");
      // Undeclared exception!
      try { 
        StorableProperties.loadProperties(map0, stringReader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringReader stringReader0 = new StringReader("The filter must not be null");
      StorableProperties.loadProperties(map0, stringReader0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringReader stringReader0 = new StringReader("#y!");
      StorableProperties.loadProperties(map0, stringReader0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      StringReader stringReader0 = new StringReader("//The filter must not be null");
      StorableProperties.loadProperties(map0, stringReader0);
      assertEquals(28, map0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DAType dAType0 = DAType.fromString("0");
      GHDirectory gHDirectory0 = new GHDirectory("0", dAType0);
      StorableProperties storableProperties0 = new StorableProperties(gHDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.check("0", 5, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Version of 0 unsupported: , expected:5. Make sure you are using the same GraphHopper version for reading the files that was used for creating them. See https://discuss.graphhopper.com/t/722
         //
         verifyException("com.graphhopper.storage.StorableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory((String) null, true);
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      storableProperties0.putCurrentVersions();
      boolean boolean0 = storableProperties0.checkVersions(true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DAType dAType0 = DAType.fromString("string_index");
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      StorableProperties storableProperties0 = new StorableProperties(gHDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.check("org.apache.commons.io.filefilter.AgeFileFilter", 2121, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Do not use upper case keys (org.apache.commons.io.filefilter.AgeFileFilter.version) for StorableProperties since 0.7
         //
         verifyException("com.graphhopper.storage.StorableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("Do not use upper case keys (");
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.put("_2hqp\r|Jrr(", (Object) ",,,,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Do not use upper case keys (_2hqp\r|Jrr() for StorableProperties since 0.7
         //
         verifyException("com.graphhopper.storage.StorableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("Do not use upper case keys (");
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      boolean boolean0 = storableProperties0.loadExisting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DAType dAType0 = DAType.fromString("0");
      GHDirectory gHDirectory0 = new GHDirectory("0", dAType0);
      StorableProperties storableProperties0 = new StorableProperties(gHDirectory0);
      String string0 = storableProperties0.versionsToString();
      assertEquals(",,,,", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      storableProperties0.close();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      StorableProperties storableProperties1 = storableProperties0.putAll(hashMap0);
      assertSame(storableProperties0, storableProperties1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      // Undeclared exception!
      try { 
        storableProperties0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DAType dAType0 = DAType.fromString("string_index");
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      StorableProperties storableProperties0 = new StorableProperties(gHDirectory0);
      long long0 = storableProperties0.getCapacity();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      StorableProperties storableProperties1 = storableProperties0.remove("location_index.version");
      assertSame(storableProperties0, storableProperties1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      StorableProperties storableProperties1 = storableProperties0.put("location_index.version", "");
      assertSame(storableProperties0, storableProperties1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      boolean boolean0 = storableProperties0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory((String) null, true);
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      String string0 = storableProperties0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      StorableProperties storableProperties0 = new StorableProperties(gHDirectory0);
      String string0 = storableProperties0.get("");
      assertEquals("", string0);
  }
}
