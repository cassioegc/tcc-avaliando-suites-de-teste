/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 01:39:21 GMT 2021
 */

package com.graphhopper.storage.index;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.carrotsearch.hppc.cursors.IntCursor;
import com.graphhopper.reader.ReaderElement;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.ev.BooleanEncodedValue;
import com.graphhopper.routing.ev.SimpleBooleanEncodedValue;
import com.graphhopper.routing.util.Car4WDFlagEncoder;
import com.graphhopper.routing.util.DefaultEdgeFilter;
import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
import com.graphhopper.routing.util.EdgeFilter;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.FlagEncoderFactory;
import com.graphhopper.routing.util.NameSimilarityEdgeFilter;
import com.graphhopper.storage.CHConfig;
import com.graphhopper.storage.DAType;
import com.graphhopper.storage.Directory;
import com.graphhopper.storage.GHDirectory;
import com.graphhopper.storage.Graph;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.MMapDirectory;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.storage.index.LocationIndex;
import com.graphhopper.storage.index.LocationIndexTree;
import com.graphhopper.util.DistanceCalc3D;
import com.graphhopper.util.DistanceCalcEarth;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.GHUtility;
import com.graphhopper.util.shapes.BBox;
import com.graphhopper.util.shapes.GHPoint;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.IntSummaryStatistics;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.LongSummaryStatistics;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import java.util.function.IntConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocationIndexTree_ESTest extends LocationIndexTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)42, (byte)22, (byte) (-126), (byte) (-115), (byte)3, (byte) (-48), (byte)30}, byteArray0);
      assertFalse(boolean0);
      
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertNotNull(mMapDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertNotNull(rAMDirectory0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SW9sPkM[EIBo|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.prepareIndex();
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      assertNotNull(intSummaryStatistics0);
      
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      assertNotNull(longSummaryStatistics0);
      
      IntConsumer intConsumer0 = intSummaryStatistics0.andThen(longSummaryStatistics0);
      assertNotNull(intConsumer0);
      
      locationIndexTree1.fillIDs((byte) (-126), intConsumer0);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      
      double double0 = locationIndexTree1.calculateRMin((byte)3, (-74.238995608), (byte)42);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      LocationIndexTree locationIndexTree2 = locationIndexTree0.setMaxRegionSearch(195);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree2.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      LocationIndexTree locationIndexTree3 = (LocationIndexTree)locationIndexTree0.setResolution((byte)25);
      assertSame(locationIndexTree3, locationIndexTree0);
      assertSame(locationIndexTree3, locationIndexTree2);
      assertSame(locationIndexTree3, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree3);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(25, locationIndexTree3.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(25, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree3);
      
      // Undeclared exception!
      try { 
        locationIndexTree2.create(195);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byteArray0[6] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertNotNull(mMapDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SW9sPkM[EIBo|");
      assertFalse(boolean0);
      
      graphHopperStorage0.close();
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.prepareIndex();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree locationIndexTree2 = locationIndexTree0.setMaxRegionSearch(195);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertEquals(300, locationIndexTree2.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      BBox bBox0 = graphHopperStorage0.getBounds();
      assertEquals(1.7976931348623157E308, bBox0.minLat, 0.01);
      assertEquals(Double.NaN, bBox0.maxEle, 0.01);
      assertEquals(1.7976931348623157E308, bBox0.minLon, 0.01);
      assertEquals((-1.7976931348623157E308), bBox0.maxLon, 0.01);
      assertEquals(Double.NaN, bBox0.minEle, 0.01);
      assertEquals((-1.7976931348623157E308), bBox0.maxLat, 0.01);
      assertFalse(bBox0.hasElevation());
      assertFalse(bBox0.isValid());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(bBox0);
      
      LocationIndex.Visitor locationIndex_Visitor0 = mock(LocationIndex.Visitor.class, new ViolatedAssumptionAnswer());
      locationIndexTree0.query(bBox0, locationIndex_Visitor0);
      assertEquals(1.7976931348623157E308, bBox0.minLat, 0.01);
      assertEquals(Double.NaN, bBox0.maxEle, 0.01);
      assertEquals(1.7976931348623157E308, bBox0.minLon, 0.01);
      assertEquals((-1.7976931348623157E308), bBox0.maxLon, 0.01);
      assertEquals(Double.NaN, bBox0.minEle, 0.01);
      assertEquals((-1.7976931348623157E308), bBox0.maxLat, 0.01);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertFalse(bBox0.hasElevation());
      assertFalse(bBox0.isValid());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      
      LocationIndex.Visitor locationIndex_Visitor1 = mock(LocationIndex.Visitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        locationIndexTree1.query((-2), bBox0, 4.003017359204114E7, 1974.9, 7.369704074554916, Double.NaN, locationIndex_Visitor1, 2147481146);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2147481146
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)42, (byte)22, (byte) (-126), (byte) (-115), (byte)3, (byte) (-48), (byte)30}, byteArray0);
      assertFalse(boolean0);
      
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertNotNull(mMapDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QdJ~BGl2qHpJ!PM3F1;");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.prepareIndex();
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      double double0 = locationIndexTree1.calculateRMin((byte)3, (-74.238995608), (byte)42);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      String string0 = encodingManager0.toFlagEncodersAsString();
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals("", string0);
      assertNotNull(string0);
      
      LocationIndexTree locationIndexTree2 = locationIndexTree0.setMaxRegionSearch(195);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertEquals(300, locationIndexTree2.getMinResolutionInMeter());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      LocationIndexTree locationIndexTree3 = (LocationIndexTree)locationIndexTree0.setResolution((byte)25);
      assertSame(locationIndexTree3, locationIndexTree0);
      assertSame(locationIndexTree3, locationIndexTree1);
      assertSame(locationIndexTree3, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree3);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertEquals(25, locationIndexTree3.getMinResolutionInMeter());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(25, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree3);
      
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      assertNotNull(booleanEncodedValue0);
      
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.allEdges(booleanEncodedValue0);
      assertNotNull(defaultEdgeFilter0);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree2.getPrepareInMemIndex(defaultEdgeFilter0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree3);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree3);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertEquals(25, locationIndexTree2.getMinResolutionInMeter());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(25, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("You need to create a new LocationIndex instance as it is already closed", false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      ReaderWay readerWay0 = new ReaderWay(10000000L);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(1, readerWay0.getType());
      assertEquals(10000000L, readerWay0.getId());
      assertFalse(readerWay0.hasTags());
      assertNotNull(readerWay0);
      
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertNotNull(encodingManager_AcceptWay0);
      
      boolean boolean0 = encodingManager0.acceptWay(readerWay0, encodingManager_AcceptWay0);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, readerWay0.getType());
      assertEquals(10000000L, readerWay0.getId());
      assertFalse(readerWay0.hasTags());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertFalse(boolean0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMaxRegionSearch(300);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree1.new InMemConstructionIndex(3128);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = locationIndexTree_InMemConstructionIndex0.root;
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[1];
      locationIndexTree_InMemEntryArray0[0] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemTreeEntry0.subEntries = locationIndexTree_InMemEntryArray0;
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      
      Collection<LocationIndexTree.InMemEntry> collection0 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection0);
      
      Collection<LocationIndexTree.InMemEntry> collection1 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertNotSame(collection1, collection0);
      assertTrue(collection1.equals((Object)collection0));
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection1);
      
      locationIndexTree1.close();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(300);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry1 = (LocationIndexTree.InMemLeafEntry)locationIndexTree_InMemLeafEntry0.getResults();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry1);
      
      locationIndexTree_InMemConstructionIndex0.addEdgeToOneTile(locationIndexTree_InMemLeafEntry0, (-1192), (-824), 1);
      assertEquals(1, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertFalse(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(1, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      assertNotNull(intSummaryStatistics0);
      
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      assertNotNull(longSummaryStatistics0);
      
      IntConsumer intConsumer0 = intSummaryStatistics0.andThen(longSummaryStatistics0);
      assertNotNull(intConsumer0);
      
      locationIndexTree0.prepareAlgo();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      
      // Undeclared exception!
      try { 
        locationIndexTree0.fillIDs((-12L), intConsumer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("You need to create a new LocationIndex instance as it is already closed", false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      ReaderWay readerWay0 = new ReaderWay(10000000L);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(1, readerWay0.getType());
      assertEquals(10000000L, readerWay0.getId());
      assertFalse(readerWay0.hasTags());
      assertNotNull(readerWay0);
      
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertNotNull(encodingManager_AcceptWay0);
      
      boolean boolean0 = encodingManager0.acceptWay(readerWay0, encodingManager_AcceptWay0);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(1, readerWay0.getType());
      assertEquals(10000000L, readerWay0.getId());
      assertFalse(readerWay0.hasTags());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertFalse(boolean0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMaxRegionSearch(300);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree1.new InMemConstructionIndex(3128);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = new LocationIndexTree.InMemTreeEntry(0);
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[1];
      locationIndexTree_InMemEntryArray0[0] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      Collection<LocationIndexTree.InMemEntry> collection0 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection0);
      
      Collection<LocationIndexTree.InMemEntry> collection1 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertNotSame(collection1, collection0);
      assertTrue(collection1.equals((Object)collection0));
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection1);
      
      locationIndexTree1.close();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(300);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry1 = (LocationIndexTree.InMemLeafEntry)locationIndexTree_InMemLeafEntry0.getResults();
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry1);
      
      locationIndexTree_InMemConstructionIndex0.addEdgeToOneTile(locationIndexTree_InMemLeafEntry0, (-1192), (-824), 1);
      assertEquals(1, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(1, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      assertNotNull(intSummaryStatistics0);
      
      // Undeclared exception!
      try { 
        locationIndexTree_InMemConstructionIndex0.addEdgeToAllTilesOnLine(1, 1, 0, (-1311.0993547), 279.12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree$InMemConstructionIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[2] = (byte)22;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)0, (byte)22, (byte)0, (byte) (-115), (byte)3, (byte) (-48), (byte)30}, byteArray0);
      assertFalse(boolean0);
      
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertNotNull(mMapDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertNotNull(rAMDirectory0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.prepareIndex();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      rAMDirectory0.clear();
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      
      double double0 = locationIndexTree1.calculateRMin((byte)3, (-74.238995608), (byte)0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      LocationIndexTree locationIndexTree2 = locationIndexTree0.setMaxRegionSearch(195);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree2.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      boolean boolean1 = locationIndexTree0.isClosed();
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertFalse(boolean1 == boolean0);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertTrue(boolean1);
      
      LocationIndexTree locationIndexTree3 = (LocationIndexTree)locationIndexTree0.setResolution((byte)25);
      assertSame(locationIndexTree3, locationIndexTree0);
      assertSame(locationIndexTree3, locationIndexTree2);
      assertSame(locationIndexTree3, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree3);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(25, locationIndexTree3.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(25, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree3);
      
      // Undeclared exception!
      try { 
        locationIndexTree2.create(195);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("You need to create a new LocationIndex instance as it is already closed", false);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertNotNull(rAMDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      ReaderWay readerWay0 = new ReaderWay(10000000L);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(2, ReaderElement.RELATION);
      assertFalse(readerWay0.hasTags());
      assertEquals(10000000L, readerWay0.getId());
      assertEquals(1, readerWay0.getType());
      assertNotNull(readerWay0);
      
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertNotNull(encodingManager_AcceptWay0);
      
      boolean boolean0 = encodingManager0.acceptWay(readerWay0, encodingManager_AcceptWay0);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertFalse(readerWay0.hasTags());
      assertEquals(10000000L, readerWay0.getId());
      assertEquals(1, readerWay0.getType());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertFalse(boolean0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMaxRegionSearch(300);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree1.new InMemConstructionIndex(3128);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = new LocationIndexTree.InMemTreeEntry(0);
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[1];
      locationIndexTree_InMemTreeEntry0.subEntries = locationIndexTree_InMemEntryArray0;
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      
      locationIndexTree_InMemEntryArray0[0] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemTreeEntry0.subEntries = locationIndexTree_InMemEntryArray0;
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      
      Collection<LocationIndexTree.InMemEntry> collection0 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection0);
      
      Collection<LocationIndexTree.InMemEntry> collection1 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertNotSame(collection1, collection0);
      assertTrue(collection1.equals((Object)collection0));
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection1);
      
      locationIndexTree1.close();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(300);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry1 = (LocationIndexTree.InMemLeafEntry)locationIndexTree_InMemLeafEntry0.getResults();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry1);
      
      locationIndexTree_InMemConstructionIndex0.addEdgeToOneTile(locationIndexTree_InMemLeafEntry0, (-1192), (-824), 1);
      assertEquals(1, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertFalse(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(1, locationIndexTree_InMemLeafEntry0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      assertNotNull(intSummaryStatistics0);
      
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      assertNotNull(longSummaryStatistics0);
      
      IntConsumer intConsumer0 = intSummaryStatistics0.andThen(longSummaryStatistics0);
      assertNotNull(intConsumer0);
      
      locationIndexTree_InMemConstructionIndex0.addEdgeToAllTilesOnLine(1, 1, 2526.25640163578, (-1311.0993547), 279.12);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      
      // Undeclared exception!
      try { 
        locationIndexTree0.fillIDs(0L, intConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT_STORE;
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isStoring());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isAllowWrites());
      assertNotNull(dAType0);
      
      GHDirectory gHDirectory0 = new GHDirectory(", depth:", dAType0);
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isStoring());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isAllowWrites());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertTrue(gHDirectory0.isStoring());
      assertNotNull(gHDirectory0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", depth:/location_index");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "*bb*h$c*v8");
      assertTrue(boolean0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      encodingManager0.releaseParsers();
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true);
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isStoring());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isAllowWrites());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertTrue(gHDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      Graph graph0 = graphHopperStorage0.getBaseGraph();
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isStoring());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isAllowWrites());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertTrue(gHDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertEquals(0, graph0.getEdges());
      assertNotNull(graph0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graph0, gHDirectory0);
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isStoring());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isAllowWrites());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertTrue(gHDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertEquals(0, graph0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      long long0 = 0L;
      String string0 = "";
      // Undeclared exception!
      try { 
        locationIndexTree0.loadExisting();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Problem while loading , depth:/location_index
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("You need to create a new LocationIndex instance as it is already closed", false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      ReaderWay readerWay0 = new ReaderWay(10000000L);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(1, readerWay0.getType());
      assertEquals(10000000L, readerWay0.getId());
      assertFalse(readerWay0.hasTags());
      assertNotNull(readerWay0);
      
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertNotNull(encodingManager_AcceptWay0);
      
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[1];
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(300);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry1 = (LocationIndexTree.InMemLeafEntry)locationIndexTree_InMemLeafEntry0.getResults();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry1);
      
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      assertNotNull(intSummaryStatistics0);
      
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      assertNotNull(longSummaryStatistics0);
      
      IntConsumer intConsumer0 = intSummaryStatistics0.andThen(longSummaryStatistics0);
      assertNotNull(intConsumer0);
      
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      assertNotNull(booleanEncodedValue0);
      
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.inEdges(booleanEncodedValue0);
      assertNotNull(defaultEdgeFilter0);
      
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      assertEquals(111194.92664455873, DistanceCalcEarth.METERS_PER_DEGREE, 0.01);
      assertEquals(6371000.0, DistanceCalcEarth.R, 0.01);
      assertEquals(6378137.0, DistanceCalcEarth.R_EQ, 0.01);
      assertEquals(1.609344, DistanceCalcEarth.KM_MILE, 0.01);
      assertEquals(4.003017359204114E7, DistanceCalcEarth.C, 0.01);
      assertEquals("EXACT3D", distanceCalc3D0.toString());
      assertNotNull(distanceCalc3D0);
      
      GHPoint gHPoint0 = distanceCalc3D0.projectCoordinate(1, (-36.722656184), 360.0, (-406.39207775));
      assertEquals(1.0022330064400586, gHPoint0.lat, 0.01);
      assertEquals((-36.72500078220056), gHPoint0.lon, 0.01);
      assertEquals(111194.92664455873, DistanceCalcEarth.METERS_PER_DEGREE, 0.01);
      assertEquals(6371000.0, DistanceCalcEarth.R, 0.01);
      assertEquals(6378137.0, DistanceCalcEarth.R_EQ, 0.01);
      assertEquals(1.609344, DistanceCalcEarth.KM_MILE, 0.01);
      assertEquals(4.003017359204114E7, DistanceCalcEarth.C, 0.01);
      assertEquals(1.0022330064400586, gHPoint0.getLat(), 0.01);
      assertTrue(gHPoint0.isValid());
      assertEquals((-36.72500078220056), gHPoint0.getLon(), 0.01);
      assertEquals("EXACT3D", distanceCalc3D0.toString());
      assertNotNull(gHPoint0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertNotNull(map0);
      
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(defaultEdgeFilter0, "You need to create a new LocationIndex instance as it is already closed", gHPoint0, 6371000.0, map0);
      assertEquals(1.0022330064400586, gHPoint0.lat, 0.01);
      assertEquals((-36.72500078220056), gHPoint0.lon, 0.01);
      assertEquals(111194.92664455873, DistanceCalcEarth.METERS_PER_DEGREE, 0.01);
      assertEquals(6371000.0, DistanceCalcEarth.R, 0.01);
      assertEquals(6378137.0, DistanceCalcEarth.R_EQ, 0.01);
      assertEquals(1.609344, DistanceCalcEarth.KM_MILE, 0.01);
      assertEquals(4.003017359204114E7, DistanceCalcEarth.C, 0.01);
      assertEquals(1.0022330064400586, gHPoint0.getLat(), 0.01);
      assertTrue(gHPoint0.isValid());
      assertEquals((-36.72500078220056), gHPoint0.getLon(), 0.01);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals("EXACT3D", distanceCalc3D0.toString());
      assertNotNull(nameSimilarityEdgeFilter0);
      
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.prepareIndex((EdgeFilter) nameSimilarityEdgeFilter0);
      assertEquals(1.0022330064400586, gHPoint0.lat, 0.01);
      assertEquals((-36.72500078220056), gHPoint0.lon, 0.01);
      assertEquals(111194.92664455873, DistanceCalcEarth.METERS_PER_DEGREE, 0.01);
      assertEquals(6371000.0, DistanceCalcEarth.R, 0.01);
      assertEquals(6378137.0, DistanceCalcEarth.R_EQ, 0.01);
      assertEquals(1.609344, DistanceCalcEarth.KM_MILE, 0.01);
      assertEquals(4.003017359204114E7, DistanceCalcEarth.C, 0.01);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(1.0022330064400586, gHPoint0.getLat(), 0.01);
      assertTrue(gHPoint0.isValid());
      assertEquals((-36.72500078220056), gHPoint0.getLon(), 0.01);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals("EXACT3D", distanceCalc3D0.toString());
      assertNotNull(locationIndexTree1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("You need to create a new LocationIndex instance as it is already closed", false);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertNotNull(rAMDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      ReaderWay readerWay0 = new ReaderWay(10000000L);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(1, readerWay0.getType());
      assertFalse(readerWay0.hasTags());
      assertEquals(10000000L, readerWay0.getId());
      assertNotNull(readerWay0);
      
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertNotNull(encodingManager_AcceptWay0);
      
      boolean boolean0 = encodingManager0.acceptWay(readerWay0, encodingManager_AcceptWay0);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, readerWay0.getType());
      assertFalse(readerWay0.hasTags());
      assertEquals(10000000L, readerWay0.getId());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertFalse(boolean0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMaxRegionSearch(300);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree1.new InMemConstructionIndex(3128);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = locationIndexTree_InMemConstructionIndex0.root;
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[1];
      locationIndexTree_InMemEntryArray0[0] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemTreeEntry0.subEntries = locationIndexTree_InMemEntryArray0;
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      
      Collection<LocationIndexTree.InMemEntry> collection0 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection0);
      
      Collection<LocationIndexTree.InMemEntry> collection1 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertNotSame(collection1, collection0);
      assertTrue(collection1.equals((Object)collection0));
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection1);
      
      locationIndexTree1.close();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(300);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry1 = (LocationIndexTree.InMemLeafEntry)locationIndexTree_InMemLeafEntry0.getResults();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry1);
      
      locationIndexTree_InMemConstructionIndex0.addEdgeToOneTile(locationIndexTree_InMemLeafEntry0, (-1192), (-824), 1);
      assertEquals(1, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals(1, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertFalse(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      assertNotNull(intSummaryStatistics0);
      
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      assertNotNull(longSummaryStatistics0);
      
      IntConsumer intConsumer0 = intSummaryStatistics0.andThen(longSummaryStatistics0);
      assertNotNull(intConsumer0);
      
      locationIndexTree0.prepareAlgo();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      
      // Undeclared exception!
      try { 
        locationIndexTree0.fillIDs(0L, intConsumer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "QdJ~BGl2qHpJ!PM3F1;";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byte byte0 = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byte byte1 = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)42, (byte)22, (byte) (-126), (byte) (-115), (byte)3, (byte) (-48), (byte)30}, byteArray0);
      assertFalse(boolean0);
      
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertNotNull(mMapDirectory0);
      
      String string1 = "";
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(graphHopperStorage0);
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertNotNull(rAMDirectory0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(locationIndexTree0);
      
      locationIndexTree0.close();
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SW9sPkM[EIBo|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 195;
      // Undeclared exception!
      try { 
        locationIndexTree0.prepareIndex();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Problem while storing location index. totalMB:0, usedMB:0
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("You need to create a new LocationIndex instance as it is already closed", false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertNotNull(rAMDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      ReaderWay readerWay0 = new ReaderWay(10000000L);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(1, readerWay0.getType());
      assertFalse(readerWay0.hasTags());
      assertEquals(10000000L, readerWay0.getId());
      assertNotNull(readerWay0);
      
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertNotNull(encodingManager_AcceptWay0);
      
      boolean boolean0 = encodingManager0.acceptWay(readerWay0, encodingManager_AcceptWay0);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(2, ReaderElement.RELATION);
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(1, readerWay0.getType());
      assertFalse(readerWay0.hasTags());
      assertEquals(10000000L, readerWay0.getId());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(boolean0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMinResolutionInMeter(0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(0, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree1.new InMemConstructionIndex(3128);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(0, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = locationIndexTree_InMemConstructionIndex0.root;
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[1];
      locationIndexTree_InMemEntryArray0[0] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemTreeEntry0.subEntries = locationIndexTree_InMemEntryArray0;
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(0, locationIndexTree1.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      
      Collection<LocationIndexTree.InMemEntry> collection0 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(0, locationIndexTree1.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection0);
      
      Collection<LocationIndexTree.InMemEntry> collection1 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertNotSame(collection1, collection0);
      assertTrue(collection1.equals((Object)collection0));
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(0, locationIndexTree1.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection1);
      
      locationIndexTree1.close();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(0, locationIndexTree1.getMinResolutionInMeter());
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(300);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry1 = (LocationIndexTree.InMemLeafEntry)locationIndexTree_InMemLeafEntry0.getResults();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry1);
      
      locationIndexTree_InMemConstructionIndex0.addEdgeToOneTile(locationIndexTree_InMemLeafEntry0, (-1192), (-824), 1);
      assertEquals(1, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertEquals(1, locationIndexTree_InMemLeafEntry0.size());
      assertFalse(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(0, locationIndexTree1.getMinResolutionInMeter());
      
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      assertNotNull(intSummaryStatistics0);
      
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      assertNotNull(longSummaryStatistics0);
      
      IntConsumer intConsumer0 = intSummaryStatistics0.andThen(longSummaryStatistics0);
      assertNotNull(intConsumer0);
      
      // Undeclared exception!
      try { 
        locationIndexTree0.fillIDs(0L, intConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertNotNull(mMapDirectory0);
      
      Stack<Car4WDFlagEncoder> stack0 = new Stack<Car4WDFlagEncoder>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      int int0 = 3122;
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, true, true, 3122);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, mMapDirectory0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMaxRegionSearch(3122);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree1.new InMemConstructionIndex(3122);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = locationIndexTree_InMemConstructionIndex0.root;
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      mMapDirectory0.close();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      
      mMapDirectory0.close();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      
      // Undeclared exception!
      try { 
        locationIndexTree_InMemConstructionIndex0.addEdgeToOneTile(locationIndexTree_InMemTreeEntry0, (-1156), (-1156), 6148914691236517205L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree$InMemConstructionIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("You need to create a new LocationIndex instance as it is already closed", false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertNotNull(rAMDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertNotNull(encodingManager_AcceptWay0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMinResolutionInMeter(3128);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      int int0 = 300;
      LocationIndexTree locationIndexTree2 = locationIndexTree1.setMaxRegionSearch(300);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree2.new InMemConstructionIndex(3128);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = new LocationIndexTree.InMemTreeEntry(3128);
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[9];
      Collection<LocationIndexTree.InMemEntry> collection0 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertNotNull(collection0);
      
      locationIndexTree_InMemEntryArray0[0] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemTreeEntry0.subEntries = locationIndexTree_InMemEntryArray0;
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      
      Collection<LocationIndexTree.InMemEntry> collection1 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertNotSame(collection1, collection0);
      assertFalse(collection1.equals((Object)collection0));
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertNotNull(collection1);
      
      Collection<LocationIndexTree.InMemEntry> collection2 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertNotSame(collection2, collection1);
      assertNotSame(collection2, collection0);
      assertTrue(collection2.equals((Object)collection1));
      assertFalse(collection2.equals((Object)collection0));
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertNotNull(collection2);
      
      locationIndexTree2.close();
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      
      // Undeclared exception!
      try { 
        locationIndexTree1.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already closed
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 342;
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = new LocationIndexTree.InMemTreeEntry(342);
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      DAType.MemRef dAType_MemRef0 = DAType.MemRef.MMAP;
      DAType dAType0 = new DAType(dAType_MemRef0, true, true, true);
      assertFalse(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isMMap());
      assertTrue(dAType0.isStoring());
      assertNotNull(dAType0);
      
      GHDirectory gHDirectory0 = new GHDirectory("network", dAType0);
      assertFalse(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isMMap());
      assertTrue(dAType0.isStoring());
      assertEquals("network/", gHDirectory0.toString());
      assertTrue(gHDirectory0.isStoring());
      assertEquals("network/", gHDirectory0.getLocation());
      assertNotNull(gHDirectory0);
      
      LocationIndexTree locationIndexTree0 = null;
      try {
        locationIndexTree0 = new LocationIndexTree((Graph) null, gHDirectory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)42, (byte)22, (byte) (-126), (byte) (-115), (byte)3, (byte) (-48), (byte)30}, byteArray0);
      assertFalse(boolean0);
      
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertNotNull(mMapDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SW9sPkM[EIBo|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.prepareIndex();
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree locationIndexTree2 = locationIndexTree0.setMaxRegionSearch(195);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertEquals(300, locationIndexTree2.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      LocationIndexTree locationIndexTree3 = (LocationIndexTree)locationIndexTree0.setResolution((byte)25);
      assertSame(locationIndexTree3, locationIndexTree0);
      assertSame(locationIndexTree3, locationIndexTree2);
      assertSame(locationIndexTree3, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree3);
      assertEquals(25, locationIndexTree3.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(25, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree3);
      
      long long0 = locationIndexTree3.getCapacity();
      assertSame(locationIndexTree3, locationIndexTree0);
      assertSame(locationIndexTree3, locationIndexTree2);
      assertSame(locationIndexTree3, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree3);
      assertEquals(25, locationIndexTree3.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(25, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(1048576L, long0);
      
      // Undeclared exception!
      try { 
        locationIndexTree2.create(195);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertNotNull(rAMDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      ReaderWay readerWay0 = new ReaderWay(10000000L);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(1, readerWay0.getType());
      assertFalse(readerWay0.hasTags());
      assertEquals(10000000L, readerWay0.getId());
      assertNotNull(readerWay0);
      
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertNotNull(encodingManager_AcceptWay0);
      
      boolean boolean0 = encodingManager0.acceptWay(readerWay0, encodingManager_AcceptWay0);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(2, ReaderElement.RELATION);
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(1, readerWay0.getType());
      assertFalse(readerWay0.hasTags());
      assertEquals(10000000L, readerWay0.getId());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(boolean0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMinResolutionInMeter(3128);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      int int0 = 300;
      LocationIndexTree locationIndexTree2 = locationIndexTree1.setMaxRegionSearch(300);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree2.new InMemConstructionIndex(3128);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = locationIndexTree_InMemConstructionIndex0.root;
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[1];
      locationIndexTree_InMemEntryArray0[0] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemTreeEntry0.subEntries = locationIndexTree_InMemEntryArray0;
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      
      Collection<LocationIndexTree.InMemEntry> collection0 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection0);
      
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      assertEquals(6371000.0, DistanceCalcEarth.R, 0.01);
      assertEquals(4.003017359204114E7, DistanceCalcEarth.C, 0.01);
      assertEquals(111194.92664455873, DistanceCalcEarth.METERS_PER_DEGREE, 0.01);
      assertEquals(1.609344, DistanceCalcEarth.KM_MILE, 0.01);
      assertEquals(6378137.0, DistanceCalcEarth.R_EQ, 0.01);
      assertEquals("EXACT3D", distanceCalc3D0.toString());
      assertNotNull(distanceCalc3D0);
      
      BBox bBox0 = distanceCalc3D0.createBBox(3, 3.2754240331355184, 3128);
      assertEquals(6371000.0, DistanceCalcEarth.R, 0.01);
      assertEquals(4.003017359204114E7, DistanceCalcEarth.C, 0.01);
      assertEquals(111194.92664455873, DistanceCalcEarth.METERS_PER_DEGREE, 0.01);
      assertEquals(1.609344, DistanceCalcEarth.KM_MILE, 0.01);
      assertEquals(6378137.0, DistanceCalcEarth.R_EQ, 0.01);
      assertEquals(2.971869220166862, bBox0.minLat, 0.01);
      assertEquals(Double.NaN, bBox0.maxEle, 0.01);
      assertEquals(3.028130779833138, bBox0.maxLat, 0.01);
      assertEquals(3.247254648139258, bBox0.minLon, 0.01);
      assertEquals(3.3035934181317788, bBox0.maxLon, 0.01);
      assertEquals(Double.NaN, bBox0.minEle, 0.01);
      assertEquals("EXACT3D", distanceCalc3D0.toString());
      assertFalse(bBox0.hasElevation());
      assertTrue(bBox0.isValid());
      assertNotNull(bBox0);
      
      LocationIndex.Visitor locationIndex_Visitor0 = mock(LocationIndex.Visitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        locationIndexTree2.query(bBox0, locationIndex_Visitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)42, (byte)22, (byte) (-126), (byte) (-115), (byte)3, (byte) (-48), (byte)30}, byteArray0);
      assertFalse(boolean0);
      
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertNotNull(mMapDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertNotNull(rAMDirectory0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SW9sPkM[EIBo|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.prepareIndex();
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree locationIndexTree2 = locationIndexTree0.setMaxRegionSearch(195);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree2.getMinResolutionInMeter());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      BBox bBox0 = graphHopperStorage0.getBounds();
      assertEquals((-1.7976931348623157E308), bBox0.maxLat, 0.01);
      assertEquals(1.7976931348623157E308, bBox0.minLon, 0.01);
      assertEquals(Double.NaN, bBox0.minEle, 0.01);
      assertEquals(Double.NaN, bBox0.maxEle, 0.01);
      assertEquals((-1.7976931348623157E308), bBox0.maxLon, 0.01);
      assertEquals(1.7976931348623157E308, bBox0.minLat, 0.01);
      assertFalse(bBox0.hasElevation());
      assertFalse(bBox0.isValid());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(bBox0);
      
      LocationIndex.Visitor locationIndex_Visitor0 = mock(LocationIndex.Visitor.class, new ViolatedAssumptionAnswer());
      locationIndexTree0.query(bBox0, locationIndex_Visitor0);
      assertEquals((-1.7976931348623157E308), bBox0.maxLat, 0.01);
      assertEquals(1.7976931348623157E308, bBox0.minLon, 0.01);
      assertEquals(Double.NaN, bBox0.minEle, 0.01);
      assertEquals(Double.NaN, bBox0.maxEle, 0.01);
      assertEquals((-1.7976931348623157E308), bBox0.maxLon, 0.01);
      assertEquals(1.7976931348623157E308, bBox0.minLat, 0.01);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertFalse(bBox0.hasElevation());
      assertFalse(bBox0.isValid());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      
      LocationIndexTree locationIndexTree3 = (LocationIndexTree)locationIndexTree0.setResolution((byte)25);
      assertSame(locationIndexTree3, locationIndexTree1);
      assertSame(locationIndexTree3, locationIndexTree2);
      assertSame(locationIndexTree3, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree3);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(25, locationIndexTree3.getMinResolutionInMeter());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals(25, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree3);
      
      // Undeclared exception!
      try { 
        locationIndexTree2.create(195);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)42, (byte)22, (byte) (-126), (byte) (-115), (byte)3, (byte) (-48), (byte)30}, byteArray0);
      assertFalse(boolean0);
      
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertNotNull(mMapDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      rAMDirectory0.close();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      
      EncodingManager.Builder encodingManager_Builder0 = EncodingManager.start();
      assertNotNull(encodingManager_Builder0);
      
      int int0 = 195;
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMaxRegionSearch(195);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      // Undeclared exception!
      try { 
        locationIndexTree1.findClosest(195, 195, (EdgeFilter) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You need to create a new LocationIndex instance as it is already closed
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(1);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry1 = (LocationIndexTree.InMemLeafEntry)locationIndexTree_InMemLeafEntry0.getResults();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertNotNull(locationIndexTree_InMemLeafEntry1);
      
      DAType dAType0 = DAType.RAM_STORE;
      assertTrue(dAType0.isStoring());
      assertFalse(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isMMap());
      assertNotNull(dAType0);
      
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      assertTrue(dAType0.isStoring());
      assertFalse(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isMMap());
      assertTrue(gHDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.toString());
      assertNotNull(gHDirectory0);
      
      Vector<FlagEncoder> vector0 = new Vector<FlagEncoder>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, true, 21569);
      assertTrue(dAType0.isStoring());
      assertFalse(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isMMap());
      assertTrue(gHDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, gHDirectory0);
      assertTrue(dAType0.isStoring());
      assertFalse(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isMMap());
      assertTrue(gHDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMinResolutionInMeter(21569);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertTrue(dAType0.isStoring());
      assertFalse(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isMMap());
      assertTrue(gHDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(21569, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(21569, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      // Undeclared exception!
      try { 
        locationIndexTree1.setResolution((-935));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Negative precision is not allowed!
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      List<BooleanEncodedValue> list0 = encodingManager0.getAccessEncFromNodeFlags(4L);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int int0 = 0;
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      ArrayList<CHConfig> arrayList0 = new ArrayList<CHConfig>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.addCHGraphs(arrayList0);
      assertSame(graphHopperStorage0, graphHopperStorage1);
      assertSame(graphHopperStorage1, graphHopperStorage0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, graphHopperStorage1.getNodes());
      assertEquals(0, graphHopperStorage1.getEdges());
      assertNotNull(graphHopperStorage1);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = new LocationIndexTree.InMemTreeEntry(9966);
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      LocationIndexTree.InMemEntry locationIndexTree_InMemEntry0 = locationIndexTree_InMemTreeEntry0.getSubEntry(1317);
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNull(locationIndexTree_InMemEntry0);
      
      locationIndexTree_InMemTreeEntry0.setSubEntry(1317, (LocationIndexTree.InMemEntry) null);
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage1, rAMDirectory0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, graphHopperStorage1.getNodes());
      assertEquals(0, graphHopperStorage1.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      locationIndexTree0.flush();
      assertSame(graphHopperStorage0, graphHopperStorage1);
      assertSame(graphHopperStorage1, graphHopperStorage0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, graphHopperStorage1.getNodes());
      assertEquals(0, graphHopperStorage1.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      
      // Undeclared exception!
      try { 
        locationIndexTree0.create(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT;
      assertFalse(dAType0.isMMap());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertNotNull(dAType0);
      
      GHDirectory gHDirectory0 = new GHDirectory(", depth:", dAType0);
      assertFalse(dAType0.isMMap());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertNotNull(gHDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      boolean boolean0 = false;
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false);
      assertFalse(dAType0.isMMap());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      Graph graph0 = graphHopperStorage0.getBaseGraph();
      assertFalse(dAType0.isMMap());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graph0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertNotNull(graph0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graph0, gHDirectory0);
      assertFalse(dAType0.isMMap());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graph0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      long long0 = 0L;
      boolean boolean1 = locationIndexTree0.isClosed();
      assertTrue(boolean1 == boolean0);
      assertFalse(dAType0.isMMap());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graph0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertFalse(boolean1);
      
      locationIndexTree0.prepareAlgo();
      assertFalse(dAType0.isMMap());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graph0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      
      DAType dAType1 = DAType.fromString("");
      assertNotSame(dAType1, dAType0);
      assertFalse(dAType1.equals((Object)dAType0));
      assertFalse(dAType1.isMMap());
      assertFalse(dAType1.isInteg());
      assertTrue(dAType1.isInMemory());
      assertTrue(dAType1.isAllowWrites());
      assertFalse(dAType1.isStoring());
      assertNotNull(dAType1);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", depth:");
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      DAType dAType2 = DAType.fromString("Problem! base:");
      assertSame(dAType2, dAType1);
      assertNotSame(dAType2, dAType0);
      assertFalse(dAType2.equals((Object)dAType0));
      assertFalse(dAType2.isInteg());
      assertTrue(dAType2.isAllowWrites());
      assertTrue(dAType2.isInMemory());
      assertFalse(dAType2.isStoring());
      assertFalse(dAType2.isMMap());
      assertNotNull(dAType2);
      
      // Undeclared exception!
      try { 
        locationIndexTree0.create(0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)42, (byte)22, (byte) (-126), (byte) (-115), (byte)3, (byte) (-48), (byte)30}, byteArray0);
      assertFalse(boolean0);
      
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertNotNull(mMapDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertNotNull(rAMDirectory0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SW9sPkM[EIBo|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 195;
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.prepareIndex();
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree locationIndexTree2 = locationIndexTree0.setMaxRegionSearch(195);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree2.getMinResolutionInMeter());
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      // Undeclared exception!
      try { 
        locationIndexTree0.setResolution((byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Negative precision is not allowed!
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)25, (byte)42, (byte)22, (byte) (-126), (byte) (-115), (byte)3, (byte) (-48), (byte)30}, byteArray0);
      assertFalse(boolean0);
      
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertNotNull(mMapDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertNotNull(rAMDirectory0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SW9sPkM[EIBo|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.prepareIndex();
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree locationIndexTree2 = locationIndexTree0.setMaxRegionSearch(195);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertEquals(300, locationIndexTree2.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      LocationIndexTree locationIndexTree3 = (LocationIndexTree)locationIndexTree0.setResolution((byte)25);
      assertSame(locationIndexTree3, locationIndexTree1);
      assertSame(locationIndexTree3, locationIndexTree2);
      assertSame(locationIndexTree3, locationIndexTree0);
      assertSame(locationIndexTree0, locationIndexTree3);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertEquals(25, locationIndexTree3.getMinResolutionInMeter());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.getLocation());
      assertEquals("QdJ~BGl2qHpJ!PM3F1;/", mMapDirectory0.toString());
      assertTrue(mMapDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals(25, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree3);
      
      // Undeclared exception!
      try { 
        locationIndexTree2.create(195);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("You need to create a new LocationIndex instance as it is already closed", true);
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertNotNull(rAMDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true);
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      ReaderWay readerWay0 = new ReaderWay(9999995L);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(0, ReaderElement.NODE);
      assertFalse(readerWay0.hasTags());
      assertEquals(9999995L, readerWay0.getId());
      assertEquals(1, readerWay0.getType());
      assertNotNull(readerWay0);
      
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertNotNull(encodingManager_AcceptWay0);
      
      boolean boolean0 = locationIndexTree0.loadExisting();
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertFalse(boolean0);
      
      rAMDirectory0.close();
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      
      int int0 = 3128;
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMinResolutionInMeter(3128);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      int int1 = 300;
      LocationIndexTree locationIndexTree2 = locationIndexTree1.setMaxRegionSearch(300);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree2.new InMemConstructionIndex(3128);
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = locationIndexTree_InMemConstructionIndex0.root;
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      Collection<LocationIndexTree.InMemEntry> collection0 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertNotNull(collection0);
      
      Collection<LocationIndexTree.InMemEntry> collection1 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertNotSame(collection1, collection0);
      assertTrue(collection1.equals((Object)collection0));
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertNotNull(collection1);
      
      locationIndexTree2.close();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(300);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry1 = (LocationIndexTree.InMemLeafEntry)locationIndexTree_InMemLeafEntry0.getResults();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry1);
      
      locationIndexTree_InMemConstructionIndex0.addEdgeToOneTile(locationIndexTree_InMemLeafEntry0, (-1192), (-824), 1);
      assertEquals(1, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertTrue(rAMDirectory0.isStoring());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(1, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      assertNotNull(intSummaryStatistics0);
      
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      assertNotNull(longSummaryStatistics0);
      
      IntConsumer intConsumer0 = intSummaryStatistics0.andThen(longSummaryStatistics0);
      assertNotNull(intConsumer0);
      
      // Undeclared exception!
      try { 
        locationIndexTree0.fillIDs(0L, intConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      RAMDirectory rAMDirectory1 = (RAMDirectory)rAMDirectory0.create();
      assertSame(rAMDirectory0, rAMDirectory1);
      assertSame(rAMDirectory1, rAMDirectory0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertFalse(rAMDirectory1.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory1.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory1.toString());
      assertNotNull(rAMDirectory1);
      
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      assertEquals(0, flagEncoderArray0.length);
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory1, encodingManager0, true, false, 21509);
      assertEquals(0, flagEncoderArray0.length);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertFalse(rAMDirectory1.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory1.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory1.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory1);
      assertEquals(0, flagEncoderArray0.length);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertFalse(rAMDirectory1.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory1.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory1.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.setResolution(21509);
      assertEquals(0, flagEncoderArray0.length);
      assertSame(rAMDirectory0, rAMDirectory1);
      assertSame(rAMDirectory1, rAMDirectory0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertFalse(rAMDirectory1.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory1.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory1.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(21509, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(21509, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      BBox bBox0 = new BBox(0.0, 18.6, 1.0E-4, 0.0, 191, 21509);
      assertEquals(0.0, bBox0.maxLat, 0.01);
      assertEquals(0.0, bBox0.minLon, 0.01);
      assertEquals(1.0E-4, bBox0.minLat, 0.01);
      assertEquals(21509.0, bBox0.maxEle, 0.01);
      assertEquals(18.6, bBox0.maxLon, 0.01);
      assertEquals(191.0, bBox0.minEle, 0.01);
      assertTrue(bBox0.hasElevation());
      assertFalse(bBox0.isValid());
      assertNotNull(bBox0);
      
      LocationIndex.Visitor locationIndex_Visitor0 = mock(LocationIndex.Visitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        locationIndexTree0.query(191, bBox0, (double) 191, 18.6, 191.0, 18.6, locationIndex_Visitor0, 17492);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertNotNull(rAMDirectory0);
      
      Vector<Car4WDFlagEncoder> vector0 = new Vector<Car4WDFlagEncoder>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMinResolutionInMeter(119);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(119, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(119, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree locationIndexTree2 = locationIndexTree1.setMaxRegionSearch(2621);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(119, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(119, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(119, locationIndexTree2.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      LocationIndexTree locationIndexTree3 = locationIndexTree2.setMaxRegionSearch(119);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree3);
      assertSame(locationIndexTree1, locationIndexTree3);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree3);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree3, locationIndexTree2);
      assertSame(locationIndexTree3, locationIndexTree1);
      assertSame(locationIndexTree3, locationIndexTree0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(119, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(119, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(119, locationIndexTree2.getMinResolutionInMeter());
      assertEquals(119, locationIndexTree3.getMinResolutionInMeter());
      assertNotNull(locationIndexTree3);
      
      long long0 = locationIndexTree3.getCapacity();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree0, locationIndexTree3);
      assertSame(locationIndexTree1, locationIndexTree3);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree2, locationIndexTree3);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree3, locationIndexTree2);
      assertSame(locationIndexTree3, locationIndexTree1);
      assertSame(locationIndexTree3, locationIndexTree0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(119, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(119, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(119, locationIndexTree2.getMinResolutionInMeter());
      assertEquals(119, locationIndexTree3.getMinResolutionInMeter());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        locationIndexTree3.setMaxRegionSearch((-224));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Region of location index must be at least 1 but was -224
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertNotNull(mMapDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      int int0 = (-450);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, (-450));
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      ArrayList<CHConfig> arrayList0 = new ArrayList<CHConfig>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.addCHGraphs(arrayList0);
      assertSame(graphHopperStorage0, graphHopperStorage1);
      assertSame(graphHopperStorage1, graphHopperStorage0);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, graphHopperStorage1.getEdges());
      assertEquals(0, graphHopperStorage1.getNodes());
      assertNotNull(graphHopperStorage1);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage1, mMapDirectory0);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, graphHopperStorage1.getEdges());
      assertEquals(0, graphHopperStorage1.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      // Undeclared exception!
      try { 
        locationIndexTree0.flush();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertNotNull(rAMDirectory0);
      
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      List<BooleanEncodedValue> list0 = encodingManager0.getAccessEncFromNodeFlags(4L);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = 0;
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      ArrayList<CHConfig> arrayList0 = new ArrayList<CHConfig>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.addCHGraphs(arrayList0);
      assertSame(graphHopperStorage0, graphHopperStorage1);
      assertSame(graphHopperStorage1, graphHopperStorage0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, graphHopperStorage1.getNodes());
      assertEquals(0, graphHopperStorage1.getEdges());
      assertNotNull(graphHopperStorage1);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/cassioegc/tcc/graphhopper.reader-osm/core");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = new LocationIndexTree.InMemTreeEntry(9966);
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      LocationIndexTree.InMemEntry locationIndexTree_InMemEntry0 = locationIndexTree_InMemTreeEntry0.getSubEntry(1317);
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertNull(locationIndexTree_InMemEntry0);
      
      locationIndexTree_InMemTreeEntry0.setSubEntry(1317, (LocationIndexTree.InMemEntry) null);
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMaxRegionSearch(96222);
      assertSame(graphHopperStorage0, graphHopperStorage1);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      int int1 = locationIndexTree1.calcChecksum();
      assertSame(graphHopperStorage0, graphHopperStorage1);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertTrue(int1 == int0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(0, int1);
      
      LocationIndexTree locationIndexTree2 = new LocationIndexTree(graphHopperStorage1, rAMDirectory0);
      assertFalse(locationIndexTree2.equals((Object)locationIndexTree1));
      assertFalse(locationIndexTree2.equals((Object)locationIndexTree0));
      assertEquals(300, locationIndexTree2.getMinResolutionInMeter());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, graphHopperStorage1.getNodes());
      assertEquals(0, graphHopperStorage1.getEdges());
      assertNotNull(locationIndexTree2);
      
      // Undeclared exception!
      try { 
        locationIndexTree2.create(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT;
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertNotNull(dAType0);
      
      GHDirectory gHDirectory0 = new GHDirectory(", depth:", dAType0);
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertNotNull(gHDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      boolean boolean0 = false;
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false);
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      Graph graph0 = graphHopperStorage0.getBaseGraph();
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graph0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertNotNull(graph0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graph0, gHDirectory0);
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graph0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      long long0 = 0L;
      boolean boolean1 = locationIndexTree0.isClosed();
      assertTrue(boolean1 == boolean0);
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertEquals(", depth:/", gHDirectory0.getLocation());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(", depth:/", gHDirectory0.toString());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graph0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertFalse(boolean1);
      
      DAType dAType1 = DAType.fromString("");
      assertNotSame(dAType1, dAType0);
      assertFalse(dAType1.equals((Object)dAType0));
      assertTrue(dAType1.isAllowWrites());
      assertFalse(dAType1.isInteg());
      assertTrue(dAType1.isInMemory());
      assertFalse(dAType1.isMMap());
      assertFalse(dAType1.isStoring());
      assertNotNull(dAType1);
      
      DAType dAType2 = DAType.fromString("Problem! base:");
      assertNotSame(dAType2, dAType0);
      assertSame(dAType2, dAType1);
      assertFalse(dAType2.equals((Object)dAType0));
      assertTrue(dAType2.isInMemory());
      assertTrue(dAType2.isAllowWrites());
      assertFalse(dAType2.isStoring());
      assertFalse(dAType2.isMMap());
      assertFalse(dAType2.isInteg());
      assertNotNull(dAType2);
      
      // Undeclared exception!
      try { 
        locationIndexTree0.create(0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[2];
      int int0 = 3446;
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(3446);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      locationIndexTree_InMemEntryArray0[1] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemLeafEntry0;
      RAMDirectory rAMDirectory0 = new RAMDirectory("h^+o", false);
      assertEquals("h^+o/", rAMDirectory0.toString());
      assertEquals("h^+o/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertEquals("h^+o/", rAMDirectory0.toString());
      assertEquals("h^+o/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      EncodingManager encodingManager1 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      assertNotSame(encodingManager1, encodingManager0);
      assertTrue(encodingManager1.equals((Object)encodingManager0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(encodingManager1.isEnableInstructions());
      assertEquals(1, encodingManager1.getIntsForFlags());
      assertNotNull(encodingManager1);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertTrue(encodingManager0.equals((Object)encodingManager1));
      assertEquals("h^+o/", rAMDirectory0.toString());
      assertEquals("h^+o/", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      // Undeclared exception!
      try { 
        locationIndexTree0.calculateRMin(3446, 2.0, 16661);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT;
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertNotNull(dAType0);
      
      DAType dAType1 = new DAType(dAType0);
      assertTrue(dAType1.equals((Object)dAType0));
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType1.isAllowWrites());
      assertTrue(dAType1.isInMemory());
      assertFalse(dAType1.isStoring());
      assertFalse(dAType1.isMMap());
      assertTrue(dAType1.isInteg());
      assertNotNull(dAType1);
      
      GHDirectory gHDirectory0 = new GHDirectory("vl&PM", dAType1);
      assertTrue(dAType0.equals((Object)dAType1));
      assertTrue(dAType1.equals((Object)dAType0));
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType1.isAllowWrites());
      assertTrue(dAType1.isInMemory());
      assertFalse(dAType1.isStoring());
      assertFalse(dAType1.isMMap());
      assertTrue(dAType1.isInteg());
      assertEquals("vl&PM/", gHDirectory0.getLocation());
      assertEquals("vl&PM/", gHDirectory0.toString());
      assertFalse(gHDirectory0.isStoring());
      assertNotNull(gHDirectory0);
      
      LinkedList<Car4WDFlagEncoder> linkedList0 = new LinkedList<Car4WDFlagEncoder>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true, true);
      assertTrue(dAType0.equals((Object)dAType1));
      assertTrue(dAType1.equals((Object)dAType0));
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType1.isAllowWrites());
      assertTrue(dAType1.isInMemory());
      assertFalse(dAType1.isStoring());
      assertFalse(dAType1.isMMap());
      assertTrue(dAType1.isInteg());
      assertEquals("vl&PM/", gHDirectory0.getLocation());
      assertEquals("vl&PM/", gHDirectory0.toString());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, gHDirectory0);
      assertTrue(dAType0.equals((Object)dAType1));
      assertTrue(dAType1.equals((Object)dAType0));
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType1.isAllowWrites());
      assertTrue(dAType1.isInMemory());
      assertFalse(dAType1.isStoring());
      assertFalse(dAType1.isMMap());
      assertTrue(dAType1.isInteg());
      assertEquals("vl&PM/", gHDirectory0.getLocation());
      assertEquals("vl&PM/", gHDirectory0.toString());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMaxRegionSearch(3120);
      assertNotSame(dAType0, dAType1);
      assertNotSame(dAType1, dAType0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertTrue(dAType0.equals((Object)dAType1));
      assertTrue(dAType1.equals((Object)dAType0));
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType1.isAllowWrites());
      assertTrue(dAType1.isInMemory());
      assertFalse(dAType1.isStoring());
      assertFalse(dAType1.isMMap());
      assertTrue(dAType1.isInteg());
      assertEquals("vl&PM/", gHDirectory0.getLocation());
      assertEquals("vl&PM/", gHDirectory0.toString());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree locationIndexTree2 = locationIndexTree1.setMaxRegionSearch(3120);
      assertNotSame(dAType0, dAType1);
      assertNotSame(dAType1, dAType0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertTrue(dAType0.equals((Object)dAType1));
      assertTrue(dAType1.equals((Object)dAType0));
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType1.isAllowWrites());
      assertTrue(dAType1.isInMemory());
      assertFalse(dAType1.isStoring());
      assertFalse(dAType1.isMMap());
      assertTrue(dAType1.isInteg());
      assertEquals("vl&PM/", gHDirectory0.getLocation());
      assertEquals("vl&PM/", gHDirectory0.toString());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree2.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree1.new InMemConstructionIndex(4);
      assertTrue(dAType0.equals((Object)dAType1));
      assertTrue(dAType1.equals((Object)dAType0));
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType1.isAllowWrites());
      assertTrue(dAType1.isInMemory());
      assertFalse(dAType1.isStoring());
      assertFalse(dAType1.isMMap());
      assertTrue(dAType1.isInteg());
      assertEquals("vl&PM/", gHDirectory0.getLocation());
      assertEquals("vl&PM/", gHDirectory0.toString());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
      
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      assertNotNull(booleanEncodedValue0);
      
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.allEdges(booleanEncodedValue0);
      assertNotNull(defaultEdgeFilter0);
      
      GHPoint gHPoint0 = new GHPoint();
      assertEquals(Double.NaN, gHPoint0.lat, 0.01);
      assertEquals(Double.NaN, gHPoint0.lon, 0.01);
      assertEquals(Double.NaN, gHPoint0.getLon(), 0.01);
      assertFalse(gHPoint0.isValid());
      assertEquals(Double.NaN, gHPoint0.getLat(), 0.01);
      assertNotNull(gHPoint0);
      
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(defaultEdgeFilter0, "vl&PM", gHPoint0, Double.NaN);
      assertEquals(Double.NaN, gHPoint0.lat, 0.01);
      assertEquals(Double.NaN, gHPoint0.lon, 0.01);
      assertEquals(Double.NaN, gHPoint0.getLon(), 0.01);
      assertFalse(gHPoint0.isValid());
      assertEquals(Double.NaN, gHPoint0.getLat(), 0.01);
      assertNotNull(nameSimilarityEdgeFilter0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter1 = new NameSimilarityEdgeFilter(nameSimilarityEdgeFilter0, "vl&PM", gHPoint0, Double.NaN, hashMap0);
      assertEquals(Double.NaN, gHPoint0.lat, 0.01);
      assertEquals(Double.NaN, gHPoint0.lon, 0.01);
      assertFalse(nameSimilarityEdgeFilter1.equals((Object)nameSimilarityEdgeFilter0));
      assertEquals(Double.NaN, gHPoint0.getLon(), 0.01);
      assertFalse(gHPoint0.isValid());
      assertEquals(Double.NaN, gHPoint0.getLat(), 0.01);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(nameSimilarityEdgeFilter1);
      
      locationIndexTree_InMemConstructionIndex0.prepare(nameSimilarityEdgeFilter1);
      assertEquals(Double.NaN, gHPoint0.lat, 0.01);
      assertEquals(Double.NaN, gHPoint0.lon, 0.01);
      assertNotSame(dAType0, dAType1);
      assertNotSame(dAType1, dAType0);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertNotSame(nameSimilarityEdgeFilter0, nameSimilarityEdgeFilter1);
      assertNotSame(nameSimilarityEdgeFilter1, nameSimilarityEdgeFilter0);
      assertTrue(dAType0.equals((Object)dAType1));
      assertTrue(dAType1.equals((Object)dAType0));
      assertFalse(nameSimilarityEdgeFilter0.equals((Object)nameSimilarityEdgeFilter1));
      assertFalse(nameSimilarityEdgeFilter1.equals((Object)nameSimilarityEdgeFilter0));
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType1.isAllowWrites());
      assertTrue(dAType1.isInMemory());
      assertFalse(dAType1.isStoring());
      assertFalse(dAType1.isMMap());
      assertTrue(dAType1.isInteg());
      assertEquals("vl&PM/", gHDirectory0.getLocation());
      assertEquals("vl&PM/", gHDirectory0.toString());
      assertFalse(gHDirectory0.isStoring());
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(Double.NaN, gHPoint0.getLon(), 0.01);
      assertFalse(gHPoint0.isValid());
      assertEquals(Double.NaN, gHPoint0.getLat(), 0.01);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory(" fe^K|U++c)2T");
      assertTrue(mMapDirectory0.isStoring());
      assertEquals(" fe^K|U++c)2T/", mMapDirectory0.getLocation());
      assertEquals(" fe^K|U++c)2T/", mMapDirectory0.toString());
      assertNotNull(mMapDirectory0);
      
      ArrayList<FlagEncoder> arrayList0 = new ArrayList<FlagEncoder>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      int int0 = 194;
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, true, false, 194);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals(" fe^K|U++c)2T/", mMapDirectory0.getLocation());
      assertEquals(" fe^K|U++c)2T/", mMapDirectory0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, mMapDirectory0);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals(" fe^K|U++c)2T/", mMapDirectory0.getLocation());
      assertEquals(" fe^K|U++c)2T/", mMapDirectory0.toString());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      assertFalse(simpleBooleanEncodedValue0.isStoreTwoDirections());
      assertEquals(0, simpleBooleanEncodedValue0.getMaxInt());
      assertEquals("unfavored", simpleBooleanEncodedValue0.getName());
      assertNotNull(simpleBooleanEncodedValue0);
      
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.inEdges(simpleBooleanEncodedValue0);
      assertFalse(simpleBooleanEncodedValue0.isStoreTwoDirections());
      assertEquals(0, simpleBooleanEncodedValue0.getMaxInt());
      assertEquals("unfavored", simpleBooleanEncodedValue0.getName());
      assertNotNull(defaultEdgeFilter0);
      
      // Undeclared exception!
      try { 
        locationIndexTree0.getPrepareInMemIndex(defaultEdgeFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = new LocationIndexTree.InMemTreeEntry(2);
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[5];
      locationIndexTree_InMemEntryArray0[0] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemEntryArray0[1] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemEntryArray0[2] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemEntryArray0[3] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemEntryArray0[4] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemTreeEntry0.subEntries = locationIndexTree_InMemEntryArray0;
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      
      Collection<LocationIndexTree.InMemEntry> collection0 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection0);
      
      boolean boolean0 = locationIndexTree_InMemTreeEntry0.isLeaf();
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(boolean0);
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(2);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(191);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      String string0 = locationIndexTree_InMemLeafEntry0.toString();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals("LEAF  []", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = new LocationIndexTree.InMemTreeEntry(2576);
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[9];
      locationIndexTree_InMemEntryArray0[0] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemEntryArray0[1] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      Collection<LocationIndexTree.InMemEntry> collection0 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection0);
      
      locationIndexTree_InMemEntryArray0[2] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemEntryArray0[3] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemEntryArray0[4] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemEntryArray0[5] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(2576);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      locationIndexTree_InMemEntryArray0[6] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemLeafEntry0;
      locationIndexTree_InMemEntryArray0[7] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemEntryArray0[8] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemTreeEntry0.subEntries = locationIndexTree_InMemEntryArray0;
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      
      String string0 = locationIndexTree_InMemTreeEntry0.toString();
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertEquals("TREE", string0);
      assertNotNull(string0);
      
      Directory directory0 = null;
      // Undeclared exception!
      try { 
        EncodingManager.create("TREE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Since 0.7 EncodingManager does no longer accept upper case profiles: TREE
         //
         verifyException("com.graphhopper.routing.util.EncodingManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(5461);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      boolean boolean0 = locationIndexTree_InMemLeafEntry0.isLeaf();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertNotNull(mMapDirectory0);
      
      Vector<Car4WDFlagEncoder> vector0 = new Vector<Car4WDFlagEncoder>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      boolean boolean0 = encodingManager0.hasEncoder("BV}.");
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertFalse(boolean0);
      
      int int0 = 0;
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 0);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      encodingManager0.releaseParsers();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, mMapDirectory0);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMinResolutionInMeter(337);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertTrue(mMapDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", mMapDirectory0.getLocation());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(337, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(337, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      double double0 = 0.0;
      GHUtility.DisabledEdgeIterator gHUtility_DisabledEdgeIterator0 = new GHUtility.DisabledEdgeIterator();
      assertNotNull(gHUtility_DisabledEdgeIterator0);
      
      double double1 = (-2608.2);
      List<FlagEncoder> list0 = encodingManager0.fetchEdgeEncoders();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      EdgeFilter edgeFilter0 = EdgeFilter.ALL_EDGES;
      assertNotNull(edgeFilter0);
      
      // Undeclared exception!
      try { 
        locationIndexTree0.findClosest(1.0, 579.34101, edgeFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = new LocationIndexTree.InMemTreeEntry(96222);
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      boolean boolean0 = locationIndexTree_InMemTreeEntry0.isLeaf();
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertNotNull(rAMDirectory0);
      
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      boolean boolean0 = false;
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals(0, linkedList0.size());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals(0, linkedList0.size());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        locationIndexTree0.create(0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      assertNotNull(defaultFlagEncoderFactory0);
      
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      int int0 = (-3466);
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMinResolutionInMeter((-3466));
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals((-3466), locationIndexTree0.getMinResolutionInMeter());
      assertEquals((-3466), locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = null;
      try {
        simpleBooleanEncodedValue0 = new SimpleBooleanEncodedValue("yield");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodedValue name wasn't valid: yield. Use lower case letters, underscore and numbers only.
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(2997);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      DAType dAType0 = DAType.RAM;
      assertFalse(dAType0.isStoring());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isInteg());
      assertNotNull(dAType0);
      
      GHDirectory gHDirectory0 = new GHDirectory("cRwf", dAType0);
      assertFalse(dAType0.isStoring());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isInteg());
      assertEquals("cRwf/", gHDirectory0.toString());
      assertEquals("cRwf/", gHDirectory0.getLocation());
      assertFalse(gHDirectory0.isStoring());
      assertNotNull(gHDirectory0);
      
      LocationIndexTree locationIndexTree0 = null;
      try {
        locationIndexTree0 = new LocationIndexTree((Graph) null, gHDirectory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("You need to create a new LocationIndex instance as it is already closed", false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      EncodingManager encodingManager0 = EncodingManager.create("");
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      ReaderWay readerWay0 = new ReaderWay(10000000L);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(1, ReaderElement.WAY);
      assertEquals(10000000L, readerWay0.getId());
      assertEquals(1, readerWay0.getType());
      assertFalse(readerWay0.hasTags());
      assertNotNull(readerWay0);
      
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertNotNull(encodingManager_AcceptWay0);
      
      boolean boolean0 = encodingManager0.acceptWay(readerWay0, encodingManager_AcceptWay0);
      assertEquals(0, ReaderElement.NODE);
      assertEquals(2, ReaderElement.RELATION);
      assertEquals(3, ReaderElement.FILEHEADER);
      assertEquals(1, ReaderElement.WAY);
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(10000000L, readerWay0.getId());
      assertEquals(1, readerWay0.getType());
      assertFalse(readerWay0.hasTags());
      assertFalse(encodingManager_AcceptWay0.hasAccepted());
      assertTrue(encodingManager_AcceptWay0.isEmpty());
      assertFalse(encodingManager_AcceptWay0.isFerry());
      assertFalse(boolean0);
      
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMinResolutionInMeter(3128);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      LocationIndexTree locationIndexTree2 = locationIndexTree1.setMaxRegionSearch(300);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertNotNull(locationIndexTree2);
      
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree2.new InMemConstructionIndex(3128);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertNotNull(locationIndexTree_InMemConstructionIndex0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = locationIndexTree_InMemConstructionIndex0.root;
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(locationIndexTree_InMemTreeEntry0);
      
      Collection<LocationIndexTree.InMemEntry> collection0 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection0);
      
      Collection<LocationIndexTree.InMemEntry> collection1 = locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertNotSame(collection1, collection0);
      assertTrue(collection1.equals((Object)collection0));
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemTreeEntry0.isLeaf());
      assertEquals("TREE", locationIndexTree_InMemTreeEntry0.toString());
      assertNotNull(collection1);
      
      locationIndexTree2.close();
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(300);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry1 = (LocationIndexTree.InMemLeafEntry)locationIndexTree_InMemLeafEntry0.getResults();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry1);
      
      locationIndexTree_InMemConstructionIndex0.addEdgeToOneTile(locationIndexTree_InMemLeafEntry0, (-1192), (-824), 1);
      assertEquals(1, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree0, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree2);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree0);
      assertSame(locationIndexTree2, locationIndexTree1);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.getLocation());
      assertEquals("You need to create a new LocationIndex instance as it is already closed/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(3128, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree1.getMinResolutionInMeter());
      assertEquals(3128, locationIndexTree2.getMinResolutionInMeter());
      assertFalse(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(1, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      assertNotNull(intSummaryStatistics0);
      
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      assertNotNull(longSummaryStatistics0);
      
      IntConsumer intConsumer0 = intSummaryStatistics0.andThen(longSummaryStatistics0);
      assertNotNull(intConsumer0);
      
      // Undeclared exception!
      try { 
        locationIndexTree0.fillIDs(0L, intConsumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("", false);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertNotNull(rAMDirectory0);
      
      Vector<Car4WDFlagEncoder> vector0 = new Vector<Car4WDFlagEncoder>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      Graph graph0 = graphHopperStorage0.getBaseGraph();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graph0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertNotNull(graph0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graph0, rAMDirectory0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graph0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      int int0 = 1508;
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMaxRegionSearch(1508);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.toString());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", rAMDirectory0.getLocation());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graph0.getEdges());
      assertEquals(0, graph0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(300, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
      
      long long0 = 1306L;
      Iterator<Car4WDFlagEncoder> iterator0 = vector0.iterator();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        locationIndexTree1.create(1306L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("=XMkZH)", false);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("=XMkZH)/", rAMDirectory0.toString());
      assertEquals("=XMkZH)/", rAMDirectory0.getLocation());
      assertNotNull(rAMDirectory0);
      
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("=XMkZH)/", rAMDirectory0.toString());
      assertEquals("=XMkZH)/", rAMDirectory0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertFalse(rAMDirectory0.isStoring());
      assertEquals("=XMkZH)/", rAMDirectory0.toString());
      assertEquals("=XMkZH)/", rAMDirectory0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      int int0 = (-415);
      // Undeclared exception!
      try { 
        locationIndexTree0.setMaxRegionSearch((-415));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Region of location index must be at least 1 but was -415
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("e{$0f2yQ.");
      assertEquals("e{$0f2yQ./", rAMDirectory0.toString());
      assertEquals("e{$0f2yQ./", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertNotNull(rAMDirectory0);
      
      Vector<Car4WDFlagEncoder> vector0 = new Vector<Car4WDFlagEncoder>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertNotNull(encodingManager0);
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, true, 1066);
      assertEquals("e{$0f2yQ./", rAMDirectory0.toString());
      assertEquals("e{$0f2yQ./", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertNotNull(graphHopperStorage0);
      
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      assertEquals("e{$0f2yQ./", rAMDirectory0.toString());
      assertEquals("e{$0f2yQ./", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(300, locationIndexTree0.getMinResolutionInMeter());
      assertNotNull(locationIndexTree0);
      
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.setResolution(1066);
      assertSame(locationIndexTree0, locationIndexTree1);
      assertSame(locationIndexTree1, locationIndexTree0);
      assertEquals("e{$0f2yQ./", rAMDirectory0.toString());
      assertEquals("e{$0f2yQ./", rAMDirectory0.getLocation());
      assertFalse(rAMDirectory0.isStoring());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      assertEquals(1066, locationIndexTree0.getMinResolutionInMeter());
      assertEquals(1066, locationIndexTree1.getMinResolutionInMeter());
      assertNotNull(locationIndexTree1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry((-587));
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry1 = (LocationIndexTree.InMemLeafEntry)locationIndexTree_InMemLeafEntry0.getResults();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      assertNotNull(locationIndexTree_InMemLeafEntry1);
      
      locationIndexTree_InMemLeafEntry1.trimToSize();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      
      Iterator<IntCursor> iterator0 = locationIndexTree_InMemLeafEntry1.iterator();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertEquals(0, locationIndexTree_InMemLeafEntry1.elementsCount);
      assertSame(locationIndexTree_InMemLeafEntry0, locationIndexTree_InMemLeafEntry1);
      assertSame(locationIndexTree_InMemLeafEntry1, locationIndexTree_InMemLeafEntry0);
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isLeaf());
      assertEquals(0, locationIndexTree_InMemLeafEntry1.size());
      assertTrue(locationIndexTree_InMemLeafEntry1.isEmpty());
      assertNotNull(iterator0);
      
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = null;
      try {
        locationIndexTree_InMemTreeEntry0 = new LocationIndexTree.InMemTreeEntry((-587));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree$InMemTreeEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(300);
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertNotNull(locationIndexTree_InMemLeafEntry0);
      
      boolean boolean0 = locationIndexTree_InMemLeafEntry0.isLeaf();
      assertEquals(0, locationIndexTree_InMemLeafEntry0.elementsCount);
      assertTrue(locationIndexTree_InMemLeafEntry0.isEmpty());
      assertEquals(0, locationIndexTree_InMemLeafEntry0.size());
      assertTrue(locationIndexTree_InMemLeafEntry0.isLeaf());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT_STORE;
      GHDirectory gHDirectory0 = new GHDirectory(", depth:", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      encodingManager0.releaseParsers();
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true);
      Graph graph0 = graphHopperStorage0.getBaseGraph();
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graph0, gHDirectory0);
      locationIndexTree0.prepareAlgo();
      locationIndexTree0.loadExisting();
      encodingManager0.fetchEdgeEncoders();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", depth:/location_index");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "UxDGTc4y");
      DAType.fromString("");
      DAType dAType1 = DAType.RAM_INT_STORE;
      locationIndexTree0.findEdgeIdsInNeighborhood(0L, 0L, (-415), (IntConsumer) null);
      // Undeclared exception!
      try { 
        locationIndexTree0.create(0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      // Undeclared exception!
      try { 
        EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "IE ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Since 0.7 EncodingManager does no longer accept upper case profiles: IE 
         //
         verifyException("com.graphhopper.routing.util.EncodingManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SW9sPkM[EIBo|");
      LocationIndexTree locationIndexTree1 = (LocationIndexTree)locationIndexTree0.prepareIndex();
      locationIndexTree1.calculateRMin((byte)3, (-74.238995608), (byte)42);
      LocationIndexTree locationIndexTree2 = locationIndexTree0.setMaxRegionSearch(195);
      locationIndexTree0.setResolution((byte)25);
      // Undeclared exception!
      try { 
        locationIndexTree2.create(195);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byteArray0[6] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SW9sPkM[EIBo|");
      locationIndexTree0.prepareIndex();
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMaxRegionSearch(195);
      BBox bBox0 = graphHopperStorage0.getBounds();
      LocationIndex.Visitor locationIndex_Visitor0 = mock(LocationIndex.Visitor.class, new ViolatedAssumptionAnswer());
      locationIndexTree0.query(bBox0, locationIndex_Visitor0);
      LocationIndexTree locationIndexTree2 = (LocationIndexTree)locationIndexTree0.setResolution((byte)25);
      LocationIndex.Visitor locationIndex_Visitor1 = mock(LocationIndex.Visitor.class, new ViolatedAssumptionAnswer());
      locationIndexTree1.query(bBox0, locationIndex_Visitor1);
      // Undeclared exception!
      try { 
        locationIndexTree2.create((byte)30);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)22;
      byteArray0[6] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte) (-24);
      MMapDirectory mMapDirectory0 = new MMapDirectory("QdJ~BGl2qHpJ!PM3F1;");
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SW9sPkM[EIBo|");
      locationIndexTree0.prepareIndex();
      locationIndexTree0.setMaxRegionSearch(195);
      BBox bBox0 = graphHopperStorage0.getBounds();
      LocationIndex.Visitor locationIndex_Visitor0 = mock(LocationIndex.Visitor.class, new ViolatedAssumptionAnswer());
      locationIndexTree0.query(bBox0, locationIndex_Visitor0);
      // Undeclared exception!
      try { 
        locationIndexTree0.setResolution((byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Negative precision is not allowed!
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = false;
      RAMDirectory rAMDirectory0 = new RAMDirectory("=XMkZH)", false);
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("=XMkZH)");
      boolean boolean1 = false;
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree0.new InMemConstructionIndex(572);
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = locationIndexTree_InMemConstructionIndex0.root;
      // Undeclared exception!
      try { 
        locationIndexTree_InMemConstructionIndex0.addEdgeToOneTile(locationIndexTree_InMemTreeEntry0, 25, 64, (-9223372036854775808L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree$InMemConstructionIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("You need to create a new LocationIndex instance as it is already closed", false);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      ReaderWay readerWay0 = new ReaderWay(10000000L);
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      encodingManager0.acceptWay(readerWay0, encodingManager_AcceptWay0);
      LocationIndexTree locationIndexTree1 = locationIndexTree0.setMaxRegionSearch(300);
      LocationIndexTree.InMemConstructionIndex locationIndexTree_InMemConstructionIndex0 = locationIndexTree1.new InMemConstructionIndex(3128);
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = locationIndexTree_InMemConstructionIndex0.root;
      LocationIndexTree.InMemEntry[] locationIndexTree_InMemEntryArray0 = new LocationIndexTree.InMemEntry[1];
      locationIndexTree_InMemEntryArray0[0] = (LocationIndexTree.InMemEntry) locationIndexTree_InMemTreeEntry0;
      locationIndexTree_InMemTreeEntry0.subEntries = locationIndexTree_InMemEntryArray0;
      locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      locationIndexTree_InMemTreeEntry0.getSubEntriesForDebug();
      locationIndexTree1.close();
      LocationIndexTree.InMemLeafEntry locationIndexTree_InMemLeafEntry0 = new LocationIndexTree.InMemLeafEntry(300);
      locationIndexTree_InMemLeafEntry0.getResults();
      locationIndexTree_InMemConstructionIndex0.addEdgeToOneTile(locationIndexTree_InMemLeafEntry0, (-1192), (-824), 1);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      LongSummaryStatistics longSummaryStatistics0 = new LongSummaryStatistics();
      IntConsumer intConsumer0 = intSummaryStatistics0.andThen(longSummaryStatistics0);
      locationIndexTree0.prepareAlgo();
      // Undeclared exception!
      try { 
        locationIndexTree0.fillIDs(0L, intConsumer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("Th", false);
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      int int0 = (-415);
      // Undeclared exception!
      try { 
        locationIndexTree0.setMaxRegionSearch((-415));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Region of location index must be at least 1 but was -415
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT_STORE;
      GHDirectory gHDirectory0 = new GHDirectory(", depth:", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      encodingManager0.releaseParsers();
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true);
      Graph graph0 = graphHopperStorage0.getBaseGraph();
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graph0, gHDirectory0);
      long long0 = 0L;
      locationIndexTree0.loadExisting();
      encodingManager0.fetchEdgeEncoders();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(", depth:/location_index");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "UxDGTc4y");
      DAType.fromString("");
      DAType dAType1 = DAType.RAM_INT_STORE;
      // Undeclared exception!
      try { 
        locationIndexTree0.findEdgeIdsInNeighborhood(0L, 0L, (-415), (IntConsumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT;
      GHDirectory gHDirectory0 = new GHDirectory(", depth:", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true);
      Graph graph0 = graphHopperStorage0.getBaseGraph();
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graph0, gHDirectory0);
      locationIndexTree0.loadExisting();
      DAType.fromString("");
      DAType.fromString("Problem! base:");
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = null;
      try {
        simpleBooleanEncodedValue0 = new SimpleBooleanEncodedValue("3(ZBlujJ!U<~~0D.wK$", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodedValue name wasn't valid: 3(ZBlujJ!U<~~0D.wK$. Use lower case letters, underscore and numbers only.
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      encodingManager0.getAccessEncFromNodeFlags(4L);
      int int0 = 0;
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 0);
      ArrayList<CHConfig> arrayList0 = new ArrayList<CHConfig>();
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.addCHGraphs(arrayList0);
      LocationIndexTree.InMemTreeEntry locationIndexTree_InMemTreeEntry0 = new LocationIndexTree.InMemTreeEntry(9966);
      locationIndexTree_InMemTreeEntry0.getSubEntry(1317);
      locationIndexTree_InMemTreeEntry0.setSubEntry(1317, (LocationIndexTree.InMemEntry) null);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage1, rAMDirectory0);
      // Undeclared exception!
      try { 
        locationIndexTree0.create(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Use prepareIndex instead.
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }
}
