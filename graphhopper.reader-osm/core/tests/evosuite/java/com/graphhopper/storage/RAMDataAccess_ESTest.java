/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 01:51:34 GMT 2021
 */

package com.graphhopper.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.storage.DAType;
import com.graphhopper.storage.RAMDataAccess;
import com.graphhopper.storage.RAMIntDataAccess;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RAMDataAccess_ESTest extends RAMDataAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertNull(rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertFalse(rAMDataAccess1.isStoring());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.getByte((-560L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("Wi_E|n+{8A)]GL;5", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("Wi_E|n+{8A)]GL;5", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      rAMDataAccess0.segmentSizePower = (-1741);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("Wi_E|n+{8A)]GL;5", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.getByte((-134L));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      rAMDataAccess0.segmentSizePower = (int) (short) (-814);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.setByte(1087L, (byte)8);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "B0|rj%(B");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.length());
      assertEquals("B0|rj%(B", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.length());
      assertEquals("B0|rj%(B", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess(", existing:", (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.length());
      assertEquals("B0|rj%(B", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(", existing:", rAMDataAccess0.getName());
      
      byte[] byteArray0 = new byte[0];
      RAMDataAccess rAMDataAccess1 = (RAMDataAccess)rAMDataAccess0.copyTo(rAMDataAccess0);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.length());
      assertEquals("B0|rj%(B", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.remaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(", existing:", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(", existing:", rAMDataAccess1.getName());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.getBytes((-3859L), byteArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(false);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals("", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      
      rAMDataAccess1.segmentSizePower = (-325);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals("", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        rAMDataAccess1.getBytes(10L, byteArray0, (short) (-814));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertNull(rAMDataAccess1.getName());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
      
      // Undeclared exception!
      try { 
        rAMDataAccess1.getBytes((byte)0, (byte[]) null, 1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(false);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals("", rAMDataAccess1.getName());
      
      rAMDataAccess1.segmentSizePower = (-325);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals("", rAMDataAccess1.getName());
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        rAMDataAccess0.setBytes(966L, byteArray0, 4);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1095);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertNull(rAMDataAccess1.getName());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      
      // Undeclared exception!
      try { 
        rAMDataAccess1.setBytes(1024, (byte[]) null, 1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1095);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      
      rAMDataAccess1.setInt((short)0, 32);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.getShort((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertNull(rAMDataAccess1.getName());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(2, rAMDataAccess1.getSegments());
      
      rAMDataAccess1.indexDivisor = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertNull(rAMDataAccess1.getName());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(2, rAMDataAccess1.getSegments());
      
      // Undeclared exception!
      try { 
        rAMDataAccess1.getShort(1352L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2, rAMDataAccess1.getSegments());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.setShort((-711L), (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMDataAccess rAMDataAccess1 = (RAMDataAccess)rAMDataAccess0.setSegmentSize((-325));
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals("", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      
      rAMDataAccess1.segmentSizePower = (-1808);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals("", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.setShort((-1066L), (short) (-16106));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("", rAMDataAccess0.getName());
      
      RAMDataAccess rAMDataAccess1 = (RAMDataAccess)rAMDataAccess0.setSegmentSize((-325));
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals("", rAMDataAccess1.getName());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals(0, rAMDataAccess1.getSegments());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.getInt((short) (-814));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("", rAMDataAccess0.getName());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(false);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      
      rAMDataAccess1.segmentSizePower = (-325);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      
      // Undeclared exception!
      try { 
        rAMDataAccess1.getInt(1071L);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertNull(rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.setInt((-639L), 1095);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(false);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      
      rAMDataAccess1.segmentSizePower = (-325);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.setInt((byte)53, (byte)53);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertNull(rAMDataAccess1.getName());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(2, rAMDataAccess1.getSegments());
      
      boolean boolean0 = rAMDataAccess0.ensureCapacity(1024);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      
      byte[] byteArray0 = new byte[7];
      rAMDataAccess1.setBytes(100L, byteArray0, (byte)0);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
      
      byte[] byteArray0 = new byte[1];
      rAMDataAccess1.getBytes(1024, byteArray0, (byte)0);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      rAMDataAccess0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(false);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess1.getName());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertTrue(rAMDataAccess1.isClosed());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertNull(rAMDataAccess0.getName());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2, rAMDataAccess1.getSegments());
      
      RAMDataAccess rAMDataAccess2 = rAMDataAccess0.store(false);
      assertNotNull(rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals(2048L, rAMDataAccess2.getCapacity());
      assertNull(rAMDataAccess2.getName());
      assertFalse(rAMDataAccess2.isStoring());
      assertEquals(1024, rAMDataAccess2.getSegmentSize());
      assertEquals(2, rAMDataAccess2.getSegments());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      rAMDataAccess0.segmentSizeInBytes = (-2495);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals((-2495), rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(2176L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals((-2495L), rAMDataAccess0.getCapacity());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals((-2495), rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals("@f#kG3X", rAMDataAccess1.getName());
      assertEquals((-2495L), rAMDataAccess1.getCapacity());
      assertEquals((-2495), rAMDataAccess1.getSegmentSize());
      assertTrue(rAMDataAccess1.isStoring());
      
      RAMDataAccess rAMDataAccess2 = rAMDataAccess1.store(true);
      assertNotNull(rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals((-2495L), rAMDataAccess0.getCapacity());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals((-2495), rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals("@f#kG3X", rAMDataAccess1.getName());
      assertEquals((-2495L), rAMDataAccess1.getCapacity());
      assertEquals((-2495), rAMDataAccess1.getSegmentSize());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals((-2495L), rAMDataAccess2.getCapacity());
      assertEquals((-2495), rAMDataAccess2.getSegmentSize());
      assertTrue(rAMDataAccess2.isStoring());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals("@f#kG3X", rAMDataAccess2.getName());
      assertEquals(1, rAMDataAccess2.getSegments());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("r", (String) null, true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("r", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      boolean boolean0 = rAMDataAccess0.isStoring();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("r", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1095);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertNull(rAMDataAccess1.getName());
      
      rAMDataAccess0.setInt(1095, 2142466180);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      
      short short0 = rAMDataAccess0.getShort(1095);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals((short)28804, short0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertNull(rAMDataAccess1.getName());
      
      int int0 = rAMDataAccess0.getSegments();
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      
      long long0 = rAMDataAccess1.getCapacity();
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess0.getName());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2048L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      rAMDataAccess0.segmentSizeInBytes = (-2495);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals((-2495), rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(2176L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals((-2495L), rAMDataAccess0.getCapacity());
      assertEquals((-2495), rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertTrue(rAMDataAccess1.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals("@f#kG3X", rAMDataAccess1.getName());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals((-2495L), rAMDataAccess1.getCapacity());
      assertEquals((-2495), rAMDataAccess1.getSegmentSize());
      
      long long0 = rAMDataAccess0.getCapacity();
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals((-2495L), rAMDataAccess0.getCapacity());
      assertEquals((-2495), rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals((-2495L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isStoring());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2, rAMDataAccess1.getSegments());
      
      rAMDataAccess1.setByte(1451L, (byte)91);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isStoring());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2, rAMDataAccess1.getSegments());
      
      byte byte0 = rAMDataAccess0.getByte(1451L);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertEquals((byte)91, byte0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      
      rAMDataAccess0.setShort(1451L, (short) (-1));
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      
      byte byte0 = rAMDataAccess0.getByte(1451L);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isClosed());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      
      rAMDataAccess0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertTrue(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1048576L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegments());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertTrue(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      assertNull(rAMDataAccess1.getName());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertTrue(rAMDataAccess1.isClosed());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1024, rAMDataAccess1.getSegments());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(true);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals("@f#kG3X", rAMDataAccess1.getName());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      
      rAMDataAccess1.closed = true;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess1.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals("@f#kG3X", rAMDataAccess1.getName());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      
      RAMDataAccess rAMDataAccess2 = (RAMDataAccess)rAMDataAccess1.copyTo(rAMDataAccess0);
      assertNotNull(rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess1.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals("@f#kG3X", rAMDataAccess1.getName());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals("@f#kG3X", rAMDataAccess2.getName());
      assertEquals(0, rAMDataAccess2.getSegments());
      assertTrue(rAMDataAccess2.isStoring());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertTrue(rAMDataAccess2.isClosed());
      assertEquals(0L, rAMDataAccess2.getCapacity());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("j|", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("j|", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-2700L));
      assertNotNull(rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      
      RAMIntDataAccess rAMIntDataAccess2 = (RAMIntDataAccess)rAMDataAccess0.copyTo(rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("j|", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      rAMDataAccess0.segmentSizeInBytes = (-2495);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals((-2495), rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMDataAccess rAMDataAccess1 = (RAMDataAccess)rAMDataAccess0.copyTo(rAMDataAccess0);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals((-2495), rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals("@f#kG3X", rAMDataAccess1.getName());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals((-2495), rAMDataAccess1.getSegmentSize());
      assertTrue(rAMDataAccess1.isStoring());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1095);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertNull(rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      
      rAMDataAccess1.indexDivisor = 1024;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertNull(rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.setShort(1024, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1024
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
      assertNull(rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        rAMDataAccess1.setBytes((-1406L), byteArray0, (-583));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertNull(rAMDataAccess0.getName());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertNull(rAMDataAccess0.getName());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertNull(rAMDataAccess1.getName());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      
      // Undeclared exception!
      try { 
        rAMDataAccess1.setByte((-867L), (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.rename("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newName mustn't be empty!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.flush();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't store bytes to 
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("#<(TL", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals("#<(TL", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(false);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals("#<(TL", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals("#<(TL", rAMDataAccess1.getName());
      
      rAMDataAccess1.segmentSizeInBytes = (-1292);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals((-1292), rAMDataAccess0.getSegmentSize());
      assertEquals("#<(TL", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals((-1292), rAMDataAccess1.getSegmentSize());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals("#<(TL", rAMDataAccess1.getName());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.create(65535L);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("@f#kG3X", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      RAMDataAccess rAMDataAccess1 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      assertNotNull(rAMDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals("@f#kG3X", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertTrue(rAMDataAccess1.isStoring());
      assertFalse(rAMDataAccess1.equals((Object)rAMDataAccess0));
      
      int[] intArray0 = new int[0];
      rAMDataAccess1.header = intArray0;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals("@f#kG3X", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertTrue(rAMDataAccess1.isStoring());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.copyTo(rAMDataAccess1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RAMDataAccess rAMDataAccess0 = null;
      try {
        rAMDataAccess0 = new RAMDataAccess("K[g}t:s+S", "K[g}t:s+S", true, (ByteOrder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.BitUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = null;
      try {
        rAMDataAccess0 = new RAMDataAccess("", "##default", false, byteOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      rAMDataAccess0.segmentSizeInBytes = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1095, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      assertNotNull(rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isClosed());
      assertNull(rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      
      rAMDataAccess1.indexDivisor = 1095;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
      assertEquals(2048L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isClosed());
      assertNull(rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1024, rAMDataAccess1.getSegmentSize());
      assertEquals(2, rAMDataAccess1.getSegments());
      assertEquals(2048L, rAMDataAccess1.getCapacity());
      
      // Undeclared exception!
      try { 
        rAMDataAccess1.getBytes(1451L, (byte[]) null, 129);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      rAMDataAccess0.segmentSizeInBytes = 1095;
      boolean boolean0 = rAMDataAccess0.ensureCapacity(1095);
      assertEquals(1, rAMDataAccess0.getSegments());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      boolean boolean0 = rAMDataAccess0.isStoring();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      long long0 = rAMDataAccess0.getCapacity();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      rAMDataAccess0.getSegments();
      assertTrue(rAMDataAccess0.isStoring());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      DAType dAType0 = rAMDataAccess0.getType();
      assertTrue(dAType0.isStoring());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      DAType dAType0 = rAMDataAccess0.getType();
      assertFalse(dAType0.isStoring());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      // Undeclared exception!
      try { 
        rAMDataAccess0.rename("X98#cN=|?8&uy~ut");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // File does not exist!? @f#kG3X Make sure that you flushed before renaming. Otherwise it could make problems for memory mapped DataAccess objects
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      rAMDataAccess0.rename("jLv+Ymtp@<X[\"Y_uoh");
      rAMDataAccess0.rename("jLv+Ymtp@<X[\"Y_uoh");
      assertEquals("jLv+Ymtp@<X[\"Y_uoh", rAMDataAccess0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      rAMDataAccess0.segmentSizeInBytes = 1095;
      rAMDataAccess0.create(1436L);
      rAMDataAccess0.getByte(1436L);
      assertEquals(2, rAMDataAccess0.getSegments());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      // Undeclared exception!
      try { 
        rAMDataAccess0.getByte(1436L);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      // Undeclared exception!
      try { 
        rAMDataAccess0.setByte(100L, (byte)0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      // Undeclared exception!
      try { 
        rAMDataAccess0.getBytes((short) (-814), byteArray0, 2146004664);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // the length has to be smaller or equal to the segment size: 2146004664 vs. 1048576
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        rAMDataAccess0.getBytes(10L, byteArray0, (short) (-814));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      rAMDataAccess0.segmentSizeInBytes = 1095;
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      rAMDataAccess1.indexDivisor = 1095;
      // Undeclared exception!
      try { 
        rAMDataAccess0.setBytes(1451L, (byte[]) null, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      rAMDataAccess0.segmentSizeInBytes = (-2494);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        rAMDataAccess0.setBytes(2145960609, byteArray0, 7);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // the length has to be smaller or equal to the segment size: 7 vs. -2494
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        rAMDataAccess0.setBytes(2145960609, byteArray0, 7);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      rAMDataAccess0.segmentSizeInBytes = 1095;
      rAMDataAccess0.create(1451L);
      rAMDataAccess0.getShort(1095);
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      // Undeclared exception!
      try { 
        rAMDataAccess0.getShort(1095);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      rAMDataAccess0.segmentSizeInBytes = 1095;
      rAMDataAccess0.create(1451L);
      rAMDataAccess0.segmentSizeInBytes = 2;
      rAMDataAccess0.setShort(2, (byte)0);
      assertEquals(2, rAMDataAccess0.getSegments());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      // Undeclared exception!
      try { 
        rAMDataAccess0.setShort(1024, (byte)0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      rAMDataAccess0.segmentSizeInBytes = 1095;
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1451L);
      rAMDataAccess1.indexDivisor = 1095;
      // Undeclared exception!
      try { 
        rAMDataAccess0.getInt(1451L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Padding required. Currently an int cannot be distributed over two segments. 1451
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      rAMDataAccess0.segmentSizeInBytes = 1095;
      rAMDataAccess0.create(1451L);
      rAMDataAccess0.getInt(510L);
      assertEquals(1024, rAMDataAccess0.getSegmentSize());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      // Undeclared exception!
      try { 
        rAMDataAccess0.getInt(510L);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      // Undeclared exception!
      try { 
        rAMDataAccess0.setInt(128L, 2142466162);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      rAMDataAccess0.segmentSizeInBytes = (-2495);
      rAMDataAccess0.create(2176L);
      rAMDataAccess0.flush();
      assertEquals((-2495), rAMDataAccess0.getSegmentSize());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      rAMDataAccess0.flush();
      assertFalse(rAMDataAccess0.isStoring());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      boolean boolean0 = rAMDataAccess0.loadExisting();
      assertFalse(boolean0);
      assertTrue(rAMDataAccess0.isStoring());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("@f#kG3X");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      // Undeclared exception!
      try { 
        rAMDataAccess0.loadExisting();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Problem while loading @f#kG3X
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      boolean boolean0 = rAMDataAccess0.loadExisting();
      assertFalse(boolean0);
      assertFalse(rAMDataAccess0.isStoring());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      rAMDataAccess0.close();
      // Undeclared exception!
      try { 
        rAMDataAccess0.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already closed
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      rAMDataAccess0.segmentSizeInBytes = (-2495);
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(2176L);
      // Undeclared exception!
      try { 
        rAMDataAccess1.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already initialized
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      boolean boolean0 = rAMDataAccess0.loadExisting();
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      boolean boolean0 = rAMDataAccess0.ensureCapacity((byte)0);
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(boolean0);
      assertFalse(rAMDataAccess0.isStoring());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      // Undeclared exception!
      try { 
        rAMDataAccess0.ensureCapacity((-4686L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new capacity has to be strictly positive
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("#<(TL", "", false, byteOrder0);
      rAMDataAccess0.ensureCapacity(2294L);
      // Undeclared exception!
      try { 
        rAMDataAccess0.create(65535L);
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // already created
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, true, byteOrder0);
      rAMDataAccess0.segmentSizeInBytes = 1095;
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1L);
      // Undeclared exception!
      try { 
        rAMDataAccess1.copyTo(rAMDataAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      rAMDataAccess0.flush();
      boolean boolean0 = rAMDataAccess0.loadExisting();
      assertFalse(boolean0);
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("@f#kG3X", "", true, byteOrder0);
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(true);
      rAMDataAccess1.closed = true;
      // Undeclared exception!
      try { 
        rAMDataAccess0.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already closed
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }
}
