/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:13:56 GMT 2021
 */

package com.graphhopper.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.osm.OSMReader;
import com.graphhopper.routing.util.AllEdgesIterator;
import com.graphhopper.routing.util.Car4WDFlagEncoder;
import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
import com.graphhopper.routing.util.EdgeFilter;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FiniteWeightFilter;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.FlagEncoderFactory;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.BaseGraph;
import com.graphhopper.storage.CHConfig;
import com.graphhopper.storage.CHGraph;
import com.graphhopper.storage.DAType;
import com.graphhopper.storage.Directory;
import com.graphhopper.storage.GHDirectory;
import com.graphhopper.storage.Graph;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.MMapDirectory;
import com.graphhopper.storage.NodeAccess;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.storage.RoutingCHGraph;
import com.graphhopper.storage.StorableProperties;
import com.graphhopper.storage.TurnCostStorage;
import com.graphhopper.util.shapes.BBox;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GraphHopperStorage_ESTest extends GraphHopperStorage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true, 37);
      // Undeclared exception!
      try { 
        graphHopperStorage0.getEdgeIteratorState((-2049), (-1099));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // edgeId -2049 out of bounds, edgeCount: 0
         //
         verifyException("com.graphhopper.storage.BaseGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      Stack<Car4WDFlagEncoder> stack0 = new Stack<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 1893);
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.create(1893);
      graphHopperStorage1.flush();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 200);
      graphHopperStorage0.close();
      graphHopperStorage0.isClosed();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 200);
      graphHopperStorage0.create(200);
      graphHopperStorage0.isAdjacentToNode(0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("|");
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true, 1);
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.create(1);
      graphHopperStorage1.isAdjacentToNode(1, (-754));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true, 37);
      graphHopperStorage0.getTurnCostStorage();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 228);
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.create(228);
      graphHopperStorage1.getOtherNode(0, (-679));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DAType dAType0 = DAType.MMAP;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true, true, 1485);
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.create(1485);
      graphHopperStorage1.getOtherNode(2, (-1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 200);
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.create(200);
      graphHopperStorage1.getEdgeIteratorStateForKey(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DAType dAType0 = DAType.MMAP;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      graphHopperStorage0.getBounds();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("[?P38DH@]]yj");
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("[?P38DH@]]yj/properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\bW.[cIqJ@Rk4z] 9");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, true);
      // Undeclared exception!
      try { 
        graphHopperStorage0.loadExisting();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Problem while loading [?P38DH@]]yj/properties
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 1893);
      graphHopperStorage0.create(1893);
      // Undeclared exception!
      try { 
        graphHopperStorage0.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You cannot configure this GraphStorage after calling create or loadExisting. Calling one of the methods twice is also not allowed.
         //
         verifyException("com.graphhopper.storage.BaseGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DAType dAType0 = DAType.RAM_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      // Undeclared exception!
      try { 
        graphHopperStorage0.isAdjacentToNode(375, 2171);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      // Undeclared exception!
      try { 
        graphHopperStorage0.getOtherNode(1485, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("VS");
      HashSet<Car4WDFlagEncoder> hashSet0 = new HashSet<Car4WDFlagEncoder>();
      LinkedList<Car4WDFlagEncoder> linkedList0 = new LinkedList<Car4WDFlagEncoder>(hashSet0);
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 2216);
      // Undeclared exception!
      try { 
        graphHopperStorage0.getEdgeIteratorStateForKey(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DAType dAType0 = DAType.fromString("");
      GHDirectory gHDirectory0 = new GHDirectory("`1", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true, false);
      // Undeclared exception!
      try { 
        graphHopperStorage0.getEdgeIteratorStateForKey((-698));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // edge keys must not be negative, given: -698
         //
         verifyException("com.graphhopper.storage.BaseGraph$EdgeIteratorStateImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("graph.flag_encoders");
      EncodingManager encodingManager0 = EncodingManager.create("  ");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 3969);
      // Undeclared exception!
      try { 
        graphHopperStorage0.flushAndCloseEarly();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory((String) null);
      Vector<Car4WDFlagEncoder> vector0 = new Vector<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, true, true);
      // Undeclared exception!
      try { 
        graphHopperStorage0.flush();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("[?P38DH@]]yj");
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      mMapDirectory0.clear();
      // Undeclared exception!
      try { 
        graphHopperStorage0.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already closed
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true, 37);
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.create(37);
      // Undeclared exception!
      graphHopperStorage1.edge(37, 2147483645);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 228);
      graphHopperStorage0.create(228);
      // Undeclared exception!
      try { 
        graphHopperStorage0.edge((-13), (-756));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("G64uytvJt3ZU_", dAType0);
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false);
      // Undeclared exception!
      try { 
        graphHopperStorage0.createEdgeExplorer((EdgeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instead null filter use EdgeFilter.ALL_EDGES
         //
         verifyException("com.graphhopper.storage.BaseGraph$EdgeIteratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("[?P38DH@]]yj");
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      // Undeclared exception!
      graphHopperStorage0.create((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DAType dAType0 = DAType.MMAP_RO;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      Vector<FlagEncoder> vector0 = new Vector<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true, false, (-1196));
      // Undeclared exception!
      try { 
        graphHopperStorage0.create((-1196));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException: File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DAType dAType0 = DAType.RAM_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true, true, 2147483645);
      // Undeclared exception!
      graphHopperStorage0.create(1598L);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 228);
      graphHopperStorage0.create(228);
      GraphHopperStorage graphHopperStorage1 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true);
      // Undeclared exception!
      try { 
        graphHopperStorage1.create(0);
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // already created
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("|");
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true, 1);
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.create(1);
      // Undeclared exception!
      try { 
        graphHopperStorage1.create((-754));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You cannot configure this GraphStorage after calling create or loadExisting. Calling one of the methods twice is also not allowed.
         //
         verifyException("com.graphhopper.storage.BaseGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, true);
      // Undeclared exception!
      try { 
        graphHopperStorage0.copyTo((Graph) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.BaseGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("[?P38DH@]]yj");
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, true);
      GraphHopperStorage graphHopperStorage1 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false);
      Graph graph0 = graphHopperStorage1.getBaseGraph();
      // Undeclared exception!
      try { 
        graphHopperStorage0.copyTo(graph0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // dimension cannot be different for cloned graph. Cloned: 2 vs 3
         //
         verifyException("com.graphhopper.storage.BaseGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      Stack<Car4WDFlagEncoder> stack0 = new Stack<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 1893);
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.create(1893);
      graphHopperStorage0.edge(1893, 1893);
      // Undeclared exception!
      try { 
        graphHopperStorage0.copyTo(graphHopperStorage1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Distance cannot be negative: -0.001
         //
         verifyException("com.graphhopper.storage.BaseGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("", false);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, true, (-136));
      // Undeclared exception!
      try { 
        graphHopperStorage0.addCHGraphs((List<CHConfig>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.GraphHopperStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Vector<FlagEncoder> vector0 = new Vector<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true);
      // Undeclared exception!
      try { 
        graphHopperStorage0.addCHGraph((CHConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.CHGraphImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Car4WDFlagEncoder> linkedList0 = new LinkedList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = null;
      try {
        graphHopperStorage0 = new GraphHopperStorage((Directory) null, encodingManager0, true, false, 500);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.StorableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      GraphHopperStorage graphHopperStorage0 = null;
      try {
        graphHopperStorage0 = new GraphHopperStorage((Directory) null, encodingManager0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.StorableProperties", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GraphHopperStorage graphHopperStorage0 = null;
      try {
        graphHopperStorage0 = new GraphHopperStorage((Directory) null, (EncodingManager) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodingManager needs to be non-null since 0.7. Create one using EncodingManager.create or EncodingManager.create(flagEncoderFactory, ghLocation)
         //
         verifyException("com.graphhopper.storage.GraphHopperStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GHDirectory gHDirectory0 = new GHDirectory("", (DAType) null);
      Vector<Car4WDFlagEncoder> vector0 = new Vector<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      GraphHopperStorage graphHopperStorage0 = null;
      try {
        graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("J-+mD52ho");
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, true);
      List<CHConfig> list0 = graphHopperStorage0.getCHConfigs();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("J-+mD52ho");
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, true);
      boolean boolean0 = graphHopperStorage0.isCHPossible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DAType dAType0 = DAType.MMAP;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      CHGraph cHGraph0 = graphHopperStorage0.getCHGraph("");
      assertNull(cHGraph0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DAType dAType0 = DAType.MMAP;
      GHDirectory gHDirectory0 = new GHDirectory("Z!pD", dAType0);
      LinkedList<Car4WDFlagEncoder> linkedList0 = new LinkedList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, true);
      // Undeclared exception!
      try { 
        graphHopperStorage0.getCHGraph();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // There is no CHGraph
         //
         verifyException("com.graphhopper.storage.GraphHopperStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DAType dAType0 = DAType.RAM_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("Sly;", dAType0);
      GraphHopperStorage graphHopperStorage0 = null;
      try {
        graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, (EncodingManager) null, true, false, (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodingManager needs to be non-null since 0.7. Create one using EncodingManager.create or EncodingManager.create(flagEncoderFactory, ghLocation)
         //
         verifyException("com.graphhopper.storage.GraphHopperStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 37);
      TurnCostStorage turnCostStorage0 = graphHopperStorage0.getTurnCostStorage();
      assertNull(turnCostStorage0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      Stack<Car4WDFlagEncoder> stack0 = new Stack<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 1893);
      StorableProperties storableProperties0 = graphHopperStorage0.getProperties();
      assertNotNull(storableProperties0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      Stack<Car4WDFlagEncoder> stack0 = new Stack<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 1893);
      Directory directory0 = graphHopperStorage0.getDirectory();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", directory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DAType dAType0 = DAType.MMAP_RO;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true, true);
      NodeAccess nodeAccess0 = graphHopperStorage0.getNodeAccess();
      assertTrue(nodeAccess0.is3D());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 228);
      String string0 = graphHopperStorage0.toString();
      assertEquals("|RAM|3D|no_turn_cost|,,,,", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DAType dAType0 = DAType.RAM_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      String string0 = graphHopperStorage0.toDetailsString();
      assertEquals("edges:0(0MB), nodes:0(0MB), name:(0MB), geo:0(0MB), bounds:1.7976931348623157E308,-1.7976931348623157E308,1.7976931348623157E308,-1.7976931348623157E308", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DAType dAType0 = DAType.MMAP;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      long long0 = graphHopperStorage0.getCapacity();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 200);
      // Undeclared exception!
      try { 
        graphHopperStorage0.flush();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DAType dAType0 = DAType.RAM_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      boolean boolean0 = graphHopperStorage0.loadExisting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 228);
      List<CHConfig> list0 = graphHopperStorage0.getCHConfigs(false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 200);
      List<String> list0 = graphHopperStorage0.getCHGraphNames();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DAType dAType0 = DAType.RAM_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      RoutingCHGraph routingCHGraph0 = graphHopperStorage0.getRoutingCHGraph((String) null);
      assertNull(routingCHGraph0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 200);
      Stack<CHConfig> stack1 = new Stack<CHConfig>();
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.addCHGraphs(stack1);
      assertEquals(0, graphHopperStorage1.getNodes());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, true, (-1943));
      CHConfig cHConfig0 = CHConfig.nodeBased("", (Weighting) null);
      // Undeclared exception!
      try { 
        graphHopperStorage0.addCHGraph(cHConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Weighting for CHGraph cannot be null
         //
         verifyException("com.graphhopper.storage.CHGraphImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 200);
      graphHopperStorage0.freeze();
      graphHopperStorage0.freeze();
      assertFalse(graphHopperStorage0.isCHPossible());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 200);
      graphHopperStorage0.create(200);
      long long0 = graphHopperStorage0.getCapacity();
      assertEquals(34048L, long0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      GraphHopperStorage graphHopperStorage0 = null;
      try {
        graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, (EncodingManager) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodingManager needs to be non-null since 0.7. Create one using EncodingManager.create or EncodingManager.create(flagEncoderFactory, ghLocation)
         //
         verifyException("com.graphhopper.storage.GraphHopperStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("J-+mD52ho");
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, true);
      String string0 = graphHopperStorage0.toString();
      assertEquals("|RAM|2D|turn_cost|,,,,", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DAType dAType0 = DAType.MMAP;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      // Undeclared exception!
      try { 
        graphHopperStorage0.getOtherNode(1485, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("[?P38DH@]]yj");
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, true);
      FiniteWeightFilter finiteWeightFilter0 = new FiniteWeightFilter((Weighting) null);
      BaseGraph.EdgeIteratorImpl baseGraph_EdgeIteratorImpl0 = (BaseGraph.EdgeIteratorImpl)graphHopperStorage0.createEdgeExplorer((EdgeFilter) finiteWeightFilter0);
      assertEquals(0, baseGraph_EdgeIteratorImpl0.getAdjNode());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DAType dAType0 = DAType.RAM_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      graphHopperStorage0.flushAndCloseEarly();
      // Undeclared exception!
      try { 
        graphHopperStorage0.flushAndCloseEarly();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already closed
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("J-+mD52ho");
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, true);
      AllEdgesIterator allEdgesIterator0 = graphHopperStorage0.getAllEdges();
      assertEquals((-2), allEdgesIterator0.getEdgeKey());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DAType dAType0 = DAType.RAM_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      // Undeclared exception!
      try { 
        graphHopperStorage0.getRoutingCHGraph();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // There is no CHGraph
         //
         verifyException("com.graphhopper.storage.GraphHopperStorage", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false, 200);
      BBox bBox0 = graphHopperStorage0.getBounds();
      assertEquals(1.7976931348623157E308, bBox0.minEle, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, true, (-1943));
      int int0 = graphHopperStorage0.getNodes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DAType dAType0 = DAType.RAM_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      boolean boolean0 = graphHopperStorage0.isClosed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DAType dAType0 = DAType.MMAP_RO;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true, true);
      // Undeclared exception!
      try { 
        graphHopperStorage0.isAdjacentToNode(0, 1194);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("[?P38DH@]]yj");
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, true);
      Graph graph0 = graphHopperStorage0.getBaseGraph();
      Graph graph1 = graphHopperStorage0.copyTo(graph0);
      assertEquals(0, graph1.getEdges());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("J-+mD52ho");
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, true);
      OSMReader oSMReader0 = new OSMReader(graphHopperStorage0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true);
      // Undeclared exception!
      try { 
        graphHopperStorage0.getEdgeIteratorStateForKey(1272);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("[?P38DH@]]yj");
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, true);
      boolean boolean0 = graphHopperStorage0.isFrozen();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, true);
      // Undeclared exception!
      try { 
        graphHopperStorage0.edge(380, 380);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The graph has not yet been initialized.
         //
         verifyException("com.graphhopper.storage.BaseGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("s'zb&", dAType0);
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false);
      // Undeclared exception!
      try { 
        graphHopperStorage0.flush();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // s'zb&/properties does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("J-+mD52ho");
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, true);
      int int0 = graphHopperStorage0.getEdges();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DAType dAType0 = DAType.MMAP;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      ArrayList<Car4WDFlagEncoder> arrayList0 = new ArrayList<Car4WDFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false, false);
      EncodingManager encodingManager1 = graphHopperStorage0.getEncodingManager();
      assertTrue(encodingManager1.isEnableInstructions());
  }
}
