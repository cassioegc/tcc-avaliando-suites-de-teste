/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:17:02 GMT 2021
 */

package com.graphhopper.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.storage.DAType;
import com.graphhopper.storage.RAMDataAccess;
import com.graphhopper.storage.RAMIntDataAccess;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RAMIntDataAccess_ESTest extends RAMIntDataAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("NNPM", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(10L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      rAMIntDataAccess0.segmentSizeInBytes = (-1789569705);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals((-1789569705), rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals((-1789569705L), rAMIntDataAccess0.getCapacity());
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
      
      short short0 = rAMIntDataAccess1.getShort(10L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals((-1789569705), rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals((-1789569705L), rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals((-1789569705L), rAMIntDataAccess1.getCapacity());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals((-1789569705), rAMIntDataAccess1.getSegmentSize());
      assertEquals((short)0, short0);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      rAMIntDataAccess1.rename("NNPM");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals((-1789569705), rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals((-1789569705L), rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals((-1789569705L), rAMIntDataAccess1.getCapacity());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals((-1789569705), rAMIntDataAccess1.getSegmentSize());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      int int0 = rAMIntDataAccess0.getInt(1L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals((-1789569705), rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals((-1789569705L), rAMIntDataAccess0.getCapacity());
      assertEquals(0, int0);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      boolean boolean1 = rAMIntDataAccess0.ensureCapacity(100L);
      assertFalse(boolean1 == boolean0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals((-1789569705), rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals((-1789569705L), rAMIntDataAccess0.getCapacity());
      assertTrue(boolean1);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals((-1789569705), rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals((-1789569705L), rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals((-1789569705L), rAMIntDataAccess1.getCapacity());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals((-1789569705), rAMIntDataAccess1.getSegmentSize());
      assertEquals("NNPM", rAMIntDataAccess2.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals((-1789569705), rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals((-1789569705L), rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      short short1 = rAMIntDataAccess2.getShort(10L);
      assertTrue(short1 == short0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals((-1789569705), rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals((-1789569705L), rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals((-1789569705L), rAMIntDataAccess1.getCapacity());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals((-1789569705), rAMIntDataAccess1.getSegmentSize());
      assertEquals("NNPM", rAMIntDataAccess2.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals((-1789569705), rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals((-1789569705L), rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals((short)0, short1);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.getShort((-1789569705));
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // bytePos of wrong multiple for RAMInt -1789569705
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("Use instance EMPTY instead of capacity 0", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      assertNotNull(byteOrder2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Use instance EMPTY instead of capacity 0");
      assertFalse(boolean0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(406L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      boolean boolean1 = rAMIntDataAccess1.checkBeforeRename("xUBpe^hCmMDR");
      assertFalse(boolean1 == boolean0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertTrue(boolean1);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      rAMIntDataAccess2.setInt(406L, (-1));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      long long0 = rAMIntDataAccess2.getCapacity();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, long0);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      rAMIntDataAccess0.setShort(406L, (short)1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.releaseSegment(371);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 371
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      short short0 = (short)220;
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)220;
      rAMIntDataAccess0.header = intArray0;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      
      RAMIntDataAccess rAMIntDataAccess2 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess1));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertNotNull(rAMIntDataAccess2);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.copyTo(rAMIntDataAccess1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("K/TM )^5i;]IY", (String) null, false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = new RAMIntDataAccess("K/TM )^5i;]IY", (String) null, false, byteOrder1);
      assertFalse(rAMIntDataAccess1.equals((Object)rAMIntDataAccess0));
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertNotNull(rAMIntDataAccess1);
      
      boolean boolean0 = rAMIntDataAccess0.ensureCapacity(303L);
      assertFalse(rAMIntDataAccess0.equals((Object)rAMIntDataAccess1));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(boolean0);
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(0L);
      assertFalse(rAMIntDataAccess1.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertSame(byteOrder1, byteOrder0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertNotSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      rAMIntDataAccess2.flush();
      assertFalse(rAMIntDataAccess1.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertSame(byteOrder1, byteOrder0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertNotSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess3 = (RAMIntDataAccess)rAMIntDataAccess2.copyTo(rAMIntDataAccess0);
      assertFalse(rAMIntDataAccess0.equals((Object)rAMIntDataAccess2));
      assertFalse(rAMIntDataAccess0.equals((Object)rAMIntDataAccess1));
      assertFalse(rAMIntDataAccess1.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess3.equals((Object)rAMIntDataAccess2));
      assertFalse(rAMIntDataAccess3.equals((Object)rAMIntDataAccess1));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess3.getName());
      assertEquals(1, rAMIntDataAccess3.getSegments());
      assertEquals(1048576, rAMIntDataAccess3.getSegmentSize());
      assertFalse(rAMIntDataAccess3.isClosed());
      assertEquals(1048576L, rAMIntDataAccess3.getCapacity());
      assertFalse(rAMIntDataAccess3.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertNotSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertNotSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertNotSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess1, rAMIntDataAccess3);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess3);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotSame(rAMIntDataAccess3, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess3, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-2241L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      rAMIntDataAccess2.setShort(2L, (short) (-1416));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      int int0 = rAMIntDataAccess2.getInt(1L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals((-92798976), int0);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      long long0 = rAMIntDataAccess0.getCapacity();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, long0);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", (String) null, false, byteOrder1);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("", rAMDataAccess0.getName());
      assertNotNull(rAMDataAccess0);
      
      // Undeclared exception!
      rAMIntDataAccess0.copyTo(rAMDataAccess0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(1048576L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.releaseSegment(1613);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1613
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("EQf?F&lvuIRp^", (String) null, true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create((-1L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      rAMIntDataAccess1.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertTrue(rAMIntDataAccess1.isClosed());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      
      long long0 = 5L;
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.setInt(5L, 410);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess1));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertNotNull(rAMIntDataAccess2);
      
      RAMIntDataAccess rAMIntDataAccess3 = (RAMIntDataAccess)rAMIntDataAccess2.copyTo(rAMIntDataAccess1);
      assertFalse(rAMIntDataAccess0.equals((Object)rAMIntDataAccess2));
      assertFalse(rAMIntDataAccess1.equals((Object)rAMIntDataAccess2));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess1));
      assertFalse(rAMIntDataAccess3.equals((Object)rAMIntDataAccess2));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertEquals("", rAMIntDataAccess3.getName());
      assertEquals(0L, rAMIntDataAccess3.getCapacity());
      assertFalse(rAMIntDataAccess3.isClosed());
      assertEquals(0, rAMIntDataAccess3.getSegments());
      assertTrue(rAMIntDataAccess3.isStoring());
      assertEquals(1048576, rAMIntDataAccess3.getSegmentSize());
      assertNotSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess3, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess3);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)20;
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", (String) null, true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(100L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      rAMIntDataAccess2.setShort((byte)20, (short)374);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("org.apache.commons.io.filefilter.DelegateFileFilter", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      rAMIntDataAccess0.rename("v70cTm");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("v70cTm", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      
      long long0 = (-9223372036854775808L);
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-9223372036854775808L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("v70cTm", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("v70cTm", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      rAMIntDataAccess1.flush();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("v70cTm", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("v70cTm", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      rAMIntDataAccess1.segmentSizeInBytes = 0;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(0, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("v70cTm", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(0, rAMIntDataAccess1.getSegmentSize());
      assertEquals("v70cTm", rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      
      rAMIntDataAccess0.setShort(0L, (short)1993);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(0, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("v70cTm", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already initialized
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "NNPM";
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("NNPM", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      long long0 = 7L;
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(7L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.getShort(7L);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // bytePos of wrong multiple for RAMInt 7
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("NNPM", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      long long0 = 10L;
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(10L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      rAMIntDataAccess0.setInt(10L, (-2282));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      short short0 = rAMIntDataAccess1.getShort(10L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals((short) (-1), short0);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already initialized
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("org.apache.commons.io.filefilter.DelegateFileFilter", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess1.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.rename("v70cTm");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // File does not exist!? org.apache.commons.io.filefilter.DelegateFileFilter Make sure that you flushed before renaming. Otherwise it could make problems for memory mapped DataAccess objects
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("EQf?F&lvuIRp^", (String) null, true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create((-1L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      long long0 = 5L;
      int int0 = 407;
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.getShort((-572L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte byte0 = (byte) (-117);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-2241L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      rAMIntDataAccess2.setShort(2L, (short) (-1416));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.copyTo(rAMIntDataAccess2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("org.apache.commons.io.filefilter.DelegateFileFilter", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess1.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      rAMIntDataAccess0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.rename("v70cTm");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // File does not exist!? org.apache.commons.io.filefilter.DelegateFileFilter Make sure that you flushed before renaming. Otherwise it could make problems for memory mapped DataAccess objects
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("r]m0/", "r]m0/", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("r]m0/", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(126L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("r]m0/", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals("r]m0/", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      rAMIntDataAccess1.setShort(126L, (short)1024);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("r]m0/", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals("r]m0/", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", new bytes:");
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '*';
      charArray0[2] = '=';
      charArray0[3] = '/';
      charArray0[4] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("u*=/I", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'u', '*', '=', '/', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("u*=/I", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      assertArrayEquals(new char[] {'u', '*', '=', '/', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, true, byteOrder0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("u*=/I", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      assertArrayEquals(new char[] {'u', '*', '=', '/', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("u*=/I", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      assertArrayEquals(new char[] {'u', '*', '=', '/', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.setInt(4294967295L, 363);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess(" does not support byte based acccess. Use RAMDataAccess instead", "", true, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(" does not support byte based acccess. Use RAMDataAccess instead", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      boolean boolean1 = rAMIntDataAccess0.loadExisting();
      assertFalse(boolean1 == boolean0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(" does not support byte based acccess. Use RAMDataAccess instead", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(boolean1);
      
      long long0 = 2889L;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess1 = null;
      try {
        rAMIntDataAccess1 = new RAMIntDataAccess((String) null, "The suffix must not be null", true, byteOrder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("offset out of bounds: ", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("offset out of bounds: ", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = (RAMIntDataAccess)rAMIntDataAccess0.setSegmentSize((-1932735282));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("offset out of bounds: ", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("offset out of bounds: ", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      RAMIntDataAccess rAMIntDataAccess2 = (RAMIntDataAccess)rAMIntDataAccess0.copyTo(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("offset out of bounds: ", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("offset out of bounds: ", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertEquals("offset out of bounds: ", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      RAMIntDataAccess rAMIntDataAccess3 = (RAMIntDataAccess)rAMIntDataAccess0.copyTo(rAMIntDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("offset out of bounds: ", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("offset out of bounds: ", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertEquals("offset out of bounds: ", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(rAMIntDataAccess3.isClosed());
      assertEquals(0, rAMIntDataAccess3.getSegments());
      assertEquals("offset out of bounds: ", rAMIntDataAccess3.getName());
      assertEquals(1048576, rAMIntDataAccess3.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess3.getCapacity());
      assertFalse(rAMIntDataAccess3.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("NNPM", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertNotNull(rAMIntDataAccess0);
      
      long long0 = (-17L);
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-17L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.getShort((-17L));
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // bytePos of wrong multiple for RAMInt -17
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("NNPM", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      long long0 = 10L;
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(10L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      short short0 = rAMIntDataAccess1.getShort(10L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals((short)0, short0);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already initialized
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertFalse(rAMIntDataAccess1.equals((Object)rAMIntDataAccess0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertNotNull(rAMIntDataAccess1);
      
      boolean boolean0 = rAMIntDataAccess1.ensureCapacity(1L);
      assertFalse(rAMIntDataAccess1.equals((Object)rAMIntDataAccess0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertTrue(boolean0);
      assertNotSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      long long0 = 0L;
      long long1 = 2L;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-82);
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.setBytes(2L, byteArray0, 1048576);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         //  does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("~^._^Jv -ae?", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("~^._^Jv -ae?", rAMIntDataAccess0.getName());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("~^._^Jv -ae?", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals("~^._^Jv -ae?", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      long long0 = (-427L);
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create((-427L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("~^._^Jv -ae?", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("~^._^Jv -ae?", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals("~^._^Jv -ae?", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.getInt((-427L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = false;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertNotNull(rAMIntDataAccess0);
      
      long long0 = (-1392L);
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.ensureCapacity((-1392L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new capacity has to be strictly positive
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      rAMIntDataAccess0.segmentSizeInBytes = (-128);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals((-128), rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals((-128), rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals((-128L), rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals((-128L), rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals((-128), rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals((-128), rAMIntDataAccess2.getSegmentSize());
      assertEquals((-128L), rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      rAMIntDataAccess2.flush();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals((-128), rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals((-128L), rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals((-128L), rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals((-128), rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals((-128), rAMIntDataAccess2.getSegmentSize());
      assertEquals((-128L), rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already initialized
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      assertNotNull(byteOrder2);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-347L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      int int0 = 922;
      rAMIntDataAccess0.segmentSizeInBytes = 922;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(922, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(922L, rAMIntDataAccess0.getCapacity());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 922;
      intArray0[1] = 922;
      intArray0[2] = 922;
      intArray0[3] = 922;
      rAMIntDataAccess0.header = intArray0;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(922, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(922L, rAMIntDataAccess0.getCapacity());
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(922, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(922L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(922L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(922, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(922L, rAMIntDataAccess2.getCapacity());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(922, rAMIntDataAccess2.getSegmentSize());
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      rAMIntDataAccess1.setInt(922, (-876));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(922, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(922L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(922L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(922, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      int int1 = rAMIntDataAccess2.getInt(0L);
      assertFalse(int1 == int0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(922, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(922L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(922L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(922, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(922L, rAMIntDataAccess2.getCapacity());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(922, rAMIntDataAccess2.getSegmentSize());
      assertEquals(0, int1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder2);
      assertNotNull(byteOrder3);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.setByte(0L, (byte)0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         //  does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("little", "", false, byteOrder0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("little", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("little", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("little", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      String string0 = rAMIntDataAccess1.toString();
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("little", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("little", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("little", string0);
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(string0);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(0L);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("little", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("little", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("little", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      rAMIntDataAccess2.close();
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("little", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertTrue(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("little", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("little", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isClosed());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      boolean boolean0 = rAMIntDataAccess2.isStoring();
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("little", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertTrue(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("little", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("little", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isClosed());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertFalse(boolean0);
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      long long0 = rAMIntDataAccess1.getCapacity();
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("little", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertTrue(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("little", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0L, long0);
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.setShort(1L, (short) (-3078));
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // bytePos of wrong multiple for RAMInt 1
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "5}sg";
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("5}sg", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("5}sg", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("5}sg", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("5}sg", rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = (RAMIntDataAccess)rAMIntDataAccess1.copyTo(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("5}sg", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("5}sg", rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertEquals("5}sg", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.setInt((-671L), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder2);
      assertSame(byteOrder3, byteOrder0);
      assertNotNull(byteOrder3);
      
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder4.toString());
      assertSame(byteOrder4, byteOrder3);
      assertSame(byteOrder4, byteOrder0);
      assertSame(byteOrder4, byteOrder1);
      assertSame(byteOrder4, byteOrder2);
      assertNotNull(byteOrder4);
      
      ByteOrder byteOrder5 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder5.toString());
      assertSame(byteOrder5, byteOrder1);
      assertSame(byteOrder5, byteOrder0);
      assertSame(byteOrder5, byteOrder3);
      assertSame(byteOrder5, byteOrder2);
      assertSame(byteOrder5, byteOrder4);
      assertNotNull(byteOrder5);
      
      ByteOrder byteOrder6 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder6.toString());
      assertSame(byteOrder6, byteOrder3);
      assertSame(byteOrder6, byteOrder5);
      assertSame(byteOrder6, byteOrder1);
      assertSame(byteOrder6, byteOrder0);
      assertSame(byteOrder6, byteOrder2);
      assertSame(byteOrder6, byteOrder4);
      assertNotNull(byteOrder6);
      
      ByteOrder byteOrder7 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder7.toString());
      assertSame(byteOrder7, byteOrder4);
      assertSame(byteOrder7, byteOrder2);
      assertSame(byteOrder7, byteOrder6);
      assertSame(byteOrder7, byteOrder0);
      assertSame(byteOrder7, byteOrder1);
      assertSame(byteOrder7, byteOrder3);
      assertSame(byteOrder7, byteOrder5);
      assertNotNull(byteOrder7);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      ByteOrder byteOrder8 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder8.toString());
      assertSame(byteOrder8, byteOrder7);
      assertSame(byteOrder8, byteOrder2);
      assertSame(byteOrder8, byteOrder4);
      assertSame(byteOrder8, byteOrder0);
      assertSame(byteOrder8, byteOrder5);
      assertSame(byteOrder8, byteOrder6);
      assertSame(byteOrder8, byteOrder1);
      assertSame(byteOrder8, byteOrder3);
      assertNotNull(byteOrder8);
      
      long long0 = (-2874L);
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.getShort((-2874L));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess(" - problem when allocating new memory. Old capacity: ", "", false, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-3264L));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertNotSame(byteOrder2, byteOrder0);
      assertNotNull(byteOrder2);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertFalse(byteOrder3.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder1);
      assertNotSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder2);
      assertNotNull(byteOrder3);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertFalse(byteOrder0.equals((Object)byteOrder2));
      assertFalse(byteOrder0.equals((Object)byteOrder3));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertNotSame(byteOrder0, byteOrder2);
      assertNotSame(byteOrder0, byteOrder3);
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      int int0 = (-1392);
      rAMIntDataAccess2.flush();
      assertFalse(byteOrder0.equals((Object)byteOrder2));
      assertFalse(byteOrder0.equals((Object)byteOrder3));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertNotSame(byteOrder0, byteOrder2);
      assertNotSame(byteOrder0, byteOrder3);
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      rAMIntDataAccess2.flush();
      assertFalse(byteOrder0.equals((Object)byteOrder2));
      assertFalse(byteOrder0.equals((Object)byteOrder3));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertNotSame(byteOrder0, byteOrder2);
      assertNotSame(byteOrder0, byteOrder3);
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      assertFalse(byteOrder4.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder4.toString());
      assertSame(byteOrder4, byteOrder3);
      assertSame(byteOrder4, byteOrder2);
      assertSame(byteOrder4, byteOrder1);
      assertNotSame(byteOrder4, byteOrder0);
      assertNotNull(byteOrder4);
      
      rAMIntDataAccess0.close();
      assertFalse(byteOrder0.equals((Object)byteOrder4));
      assertFalse(byteOrder0.equals((Object)byteOrder2));
      assertFalse(byteOrder0.equals((Object)byteOrder3));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(" - problem when allocating new memory. Old capacity: ", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertNotSame(byteOrder0, byteOrder4);
      assertNotSame(byteOrder0, byteOrder2);
      assertNotSame(byteOrder0, byteOrder3);
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      
      long long0 = 4294967295L;
      // Undeclared exception!
      rAMIntDataAccess2.ensureCapacity(4294967295L);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("+#m", "", true, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("+#m", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      // Undeclared exception!
      rAMIntDataAccess0.create(4294967295L);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("file newName already exists!", "", false, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("file newName already exists!", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(0L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("file newName already exists!", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("file newName already exists!", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("file newName already exists!", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("file newName already exists!", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("file newName already exists!", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      long long0 = (-1333L);
      short short0 = (short)0;
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.setShort((-1333L), (short)0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // bytePos of wrong multiple for RAMInt -1333
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertNull(rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      boolean boolean0 = rAMIntDataAccess2.ensureCapacity(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertNull(rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(boolean0);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      int int0 = rAMIntDataAccess1.getSegments();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1, int0);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess3 = (RAMIntDataAccess)rAMIntDataAccess0.setSegmentSize(0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess3.isStoring());
      assertEquals(1, rAMIntDataAccess3.getSegments());
      assertNull(rAMIntDataAccess3.getName());
      assertEquals(1048576, rAMIntDataAccess3.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess3.getCapacity());
      assertFalse(rAMIntDataAccess3.isClosed());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess2);
      assertNotNull(rAMIntDataAccess3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      boolean boolean0 = rAMIntDataAccess0.loadExisting();
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(boolean0);
      
      boolean boolean1 = rAMIntDataAccess0.ensureCapacity(0L);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "";
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      boolean boolean0 = rAMIntDataAccess0.isStoring();
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(boolean0);
      assertNotSame(byteOrder0, byteOrder1);
      
      long long0 = rAMIntDataAccess0.getCapacity();
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, long0);
      assertNotSame(byteOrder0, byteOrder1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.flush();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't store integers to 
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("The FilenameFilter must not be null", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("The FilenameFilter must not be null", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      rAMIntDataAccess0.flush();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("The FilenameFilter must not be null", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertSame(byteOrder0, byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      assertFalse(byteOrder2.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder2.toString());
      assertNotSame(byteOrder2, byteOrder0);
      assertNotSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertFalse(byteOrder3.equals((Object)byteOrder2));
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder1);
      assertNotSame(byteOrder3, byteOrder2);
      assertNotNull(byteOrder3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2429);
      rAMIntDataAccess0.header = intArray0;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("The FilenameFilter must not be null", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("The FilenameFilter must not be null", "", true, byteOrder2);
      assertFalse(byteOrder2.equals((Object)byteOrder3));
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      assertFalse(byteOrder2.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder2.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("The FilenameFilter must not be null", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertNotNull(rAMDataAccess0);
      
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      assertFalse(byteOrder4.equals((Object)byteOrder2));
      assertEquals("LITTLE_ENDIAN", byteOrder4.toString());
      assertSame(byteOrder4, byteOrder3);
      assertSame(byteOrder4, byteOrder1);
      assertNotSame(byteOrder4, byteOrder2);
      assertSame(byteOrder4, byteOrder0);
      assertNotNull(byteOrder4);
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(true);
      assertFalse(byteOrder2.equals((Object)byteOrder4));
      assertFalse(byteOrder2.equals((Object)byteOrder3));
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      assertFalse(byteOrder2.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder2.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("The FilenameFilter must not be null", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals("The FilenameFilter must not be null", rAMDataAccess1.getName());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertNotSame(byteOrder2, byteOrder4);
      assertNotSame(byteOrder2, byteOrder3);
      assertNotSame(byteOrder2, byteOrder0);
      assertNotSame(byteOrder2, byteOrder1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertNotNull(rAMDataAccess1);
      
      rAMDataAccess0.close();
      assertFalse(byteOrder2.equals((Object)byteOrder4));
      assertFalse(byteOrder2.equals((Object)byteOrder3));
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      assertFalse(byteOrder2.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder2.toString());
      assertEquals("The FilenameFilter must not be null", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertNotSame(byteOrder2, byteOrder4);
      assertNotSame(byteOrder2, byteOrder3);
      assertNotSame(byteOrder2, byteOrder0);
      assertNotSame(byteOrder2, byteOrder1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      
      rAMDataAccess1.segmentSizeInBytes = (-5676);
      assertEquals("BIG_ENDIAN", byteOrder2.toString());
      assertEquals("The FilenameFilter must not be null", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertTrue(rAMDataAccess0.isClosed());
      assertEquals((-5676), rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("The FilenameFilter must not be null", rAMDataAccess1.getName());
      assertEquals((-5676), rAMDataAccess1.getSegmentSize());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertTrue(rAMDataAccess1.isClosed());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertTrue(rAMDataAccess1.isStoring());
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.copyTo(rAMDataAccess1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("NNPM", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      long long0 = 4L;
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(4L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      short short0 = rAMIntDataAccess1.getShort(4L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("NNPM", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("NNPM", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals((short)0, short0);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already initialized
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.getShort(0L);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess(">D", "", false, byteOrder0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(">D", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(0L);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(">D", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(">D", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(">D", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(">D", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(">D", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess3 = (RAMIntDataAccess)rAMIntDataAccess2.setSegmentSize(1);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(">D", rAMIntDataAccess0.getName());
      assertEquals(128L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(128, rAMIntDataAccess0.getSegmentSize());
      assertEquals(">D", rAMIntDataAccess1.getName());
      assertEquals(128, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(128L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(128, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(">D", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(128L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess3.isClosed());
      assertEquals(">D", rAMIntDataAccess3.getName());
      assertEquals(1, rAMIntDataAccess3.getSegments());
      assertEquals(128, rAMIntDataAccess3.getSegmentSize());
      assertFalse(rAMIntDataAccess3.isStoring());
      assertEquals(128L, rAMIntDataAccess3.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess3);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertNotSame(byteOrder2, byteOrder0);
      assertNotNull(byteOrder2);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertFalse(byteOrder3.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder2);
      assertSame(byteOrder3, byteOrder1);
      assertNotSame(byteOrder3, byteOrder0);
      assertNotNull(byteOrder3);
      
      ByteOrder byteOrder4 = ByteOrder.nativeOrder();
      assertFalse(byteOrder4.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder4.toString());
      assertSame(byteOrder4, byteOrder3);
      assertNotSame(byteOrder4, byteOrder0);
      assertSame(byteOrder4, byteOrder2);
      assertSame(byteOrder4, byteOrder1);
      assertNotNull(byteOrder4);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("org.apache.commons.io.filefilter.FileFileFilter", (String) null, false, byteOrder0);
      assertFalse(byteOrder0.equals((Object)byteOrder2));
      assertFalse(byteOrder0.equals((Object)byteOrder3));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(byteOrder0.equals((Object)byteOrder4));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("org.apache.commons.io.filefilter.FileFileFilter", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertFalse(byteOrder0.equals((Object)byteOrder2));
      assertFalse(byteOrder0.equals((Object)byteOrder3));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(byteOrder0.equals((Object)byteOrder4));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("org.apache.commons.io.filefilter.FileFileFilter", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("org.apache.commons.io.filefilter.FileFileFilter", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertNotSame(byteOrder0, byteOrder2);
      assertNotSame(byteOrder0, byteOrder3);
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(byteOrder0, byteOrder4);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      long long0 = 562L;
      byte byte0 = (byte)2;
      short short0 = (short)128;
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.setShort(1148L, (short)128);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("?ck%% oV~/5", (String) null, false, byteOrder0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("?ck%% oV~/5", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(0L);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("?ck%% oV~/5", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("?ck%% oV~/5", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      long long0 = rAMIntDataAccess1.getCapacity();
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("?ck%% oV~/5", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("?ck%% oV~/5", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576L, long0);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("A0", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'A', '0'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("A0", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      assertArrayEquals(new char[] {'A', '0'}, charArray0);
      assertEquals(2, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("A0", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      assertArrayEquals(new char[] {'A', '0'}, charArray0);
      assertEquals(2, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-1482L));
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("A0", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      assertArrayEquals(new char[] {'A', '0'}, charArray0);
      assertEquals(2, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("A0", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      assertArrayEquals(new char[] {'A', '0'}, charArray0);
      assertEquals(2, charArray0.length);
      
      DAType dAType0 = rAMIntDataAccess2.getType();
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("A0", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isInMemory());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType0.isInteg());
      assertFalse(dAType0.isMMap());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(dAType0);
      assertArrayEquals(new char[] {'A', '0'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-229L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.create(5L);
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // already created
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 'W';
      charArray0[2] = 'K';
      charArray0[3] = 'l';
      charArray0[4] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("+WKlI", charBuffer0.toString());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'+', 'W', 'K', 'l', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("+WKlI", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      assertArrayEquals(new char[] {'+', 'W', 'K', 'l', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("+WKlI", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      assertArrayEquals(new char[] {'+', 'W', 'K', 'l', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(0L);
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("+WKlI", charBuffer0.toString());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      assertArrayEquals(new char[] {'+', 'W', 'K', 'l', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already initialized
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      long long0 = rAMIntDataAccess0.getCapacity();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, long0);
      
      boolean boolean0 = rAMIntDataAccess0.loadExisting();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      long long0 = 0L;
      short short0 = (short)3506;
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.getByte((short)3506);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         //  does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("]g}v\t$:srR@Gyr", (String) null, false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("]g}v\t$:srR@Gyr", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      rAMIntDataAccess0.flush();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("]g}v\t$:srR@Gyr", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      
      long long0 = (-678L);
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.getByte((-678L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // null]g}v\t$:srR@Gyr does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      assertNotNull(byteOrder2);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.getBytes(0L, byteArray0, (byte)14);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // nullnull does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("UNbH'A3U>::", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = (RAMIntDataAccess)rAMIntDataAccess0.setSegmentSize(1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(128, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(128, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess0.create(1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(128L, rAMIntDataAccess0.getCapacity());
      assertEquals(128, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(128L, rAMIntDataAccess2.getCapacity());
      assertEquals(128, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      rAMIntDataAccess2.rename("UNbH'A3U>::");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(128L, rAMIntDataAccess0.getCapacity());
      assertEquals(128, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(128L, rAMIntDataAccess2.getCapacity());
      assertEquals(128, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess3 = rAMIntDataAccess2.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(128L, rAMIntDataAccess0.getCapacity());
      assertEquals(128, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(128L, rAMIntDataAccess2.getCapacity());
      assertEquals(128, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess2.getName());
      assertEquals(128, rAMIntDataAccess3.getSegmentSize());
      assertEquals(1, rAMIntDataAccess3.getSegments());
      assertFalse(rAMIntDataAccess3.isStoring());
      assertFalse(rAMIntDataAccess3.isClosed());
      assertEquals(128L, rAMIntDataAccess3.getCapacity());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess3.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess3);
      
      rAMIntDataAccess2.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(128, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertTrue(rAMIntDataAccess2.isClosed());
      assertEquals(128, rAMIntDataAccess2.getSegmentSize());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      boolean boolean0 = rAMIntDataAccess0.isIntBased();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(128, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertTrue(boolean0);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess4 = (RAMIntDataAccess)rAMIntDataAccess0.setSegmentSize(1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(128, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess4.isStoring());
      assertEquals(0L, rAMIntDataAccess4.getCapacity());
      assertTrue(rAMIntDataAccess4.isClosed());
      assertEquals(128, rAMIntDataAccess4.getSegmentSize());
      assertEquals(0, rAMIntDataAccess4.getSegments());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess4.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess4);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess4, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess4, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess4, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess4, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess4);
      
      long long0 = rAMIntDataAccess0.getCapacity();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(128, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals("UNbH'A3U>::", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, long0);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess4);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)28;
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.setBytes(1L, byteArray0, (byte)28);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // UNbH'A3U>:: does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("EQf?F&lvuIRp^", (String) null, true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create((-1L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      rAMIntDataAccess2.setInt(5L, 410);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.getBytes(1877L, (byte[]) null, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // nullEQf?F&lvuIRp^ does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      byte byte0 = (byte)4;
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.setByte(854L, (byte)4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // nullnull does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(5L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      DAType dAType0 = rAMIntDataAccess2.getType();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertTrue(dAType0.isAllowWrites());
      assertTrue(dAType0.isStoring());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isInteg());
      assertTrue(dAType0.isInMemory());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(dAType0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertNotNull(rAMIntDataAccess0);
      
      long long0 = 0L;
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("", rAMIntDataAccess1.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.setBytes(0L, byteArray0, (-885));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         //  does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = false;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess(">?*He8d7+y?S{", (String) null, false, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(">?*He8d7+y?S{", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(">?*He8d7+y?S{", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals(">?*He8d7+y?S{", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.rename((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newName mustn't be empty!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      boolean boolean1 = false;
      rAMIntDataAccess0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertSame(byteOrder0, byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertTrue(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(769L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertTrue(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertTrue(rAMIntDataAccess2.isClosed());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      int int0 = 0;
      boolean boolean2 = rAMIntDataAccess2.releaseSegment(0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertTrue(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertTrue(rAMIntDataAccess2.isClosed());
      assertTrue(boolean2);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.setShort(100L, (short)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("org.apache.commons.io.filefilter.FileFileFilter", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("org.apache.commons.io.filefilter.FileFileFilter", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNotNull(rAMIntDataAccess0);
      
      int int0 = rAMIntDataAccess0.getSegments();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("org.apache.commons.io.filefilter.FileFileFilter", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, int0);
      assertSame(byteOrder0, byteOrder1);
      
      rAMIntDataAccess0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("org.apache.commons.io.filefilter.FileFileFilter", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertSame(byteOrder0, byteOrder1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.releaseSegment(65535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65535
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("/MD9_Rh\"AuY.)T/", "/MD9_Rh\"AuY.)T/", false, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("/MD9_Rh\"AuY.)T/", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(0L);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("/MD9_Rh\"AuY.)T/", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("/MD9_Rh\"AuY.)T/", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      rAMIntDataAccess1.setShort(0L, (short)0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("/MD9_Rh\"AuY.)T/", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("/MD9_Rh\"AuY.)T/", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)25;
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.setBytes((-9223372036854775808L), byteArray0, 1772);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // /MD9_Rh\"AuY.)T//MD9_Rh\"AuY.)T/ does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("swi^!9XSBUBC7", "", true, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("swi^!9XSBUBC7", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-2453L));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("swi^!9XSBUBC7", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("swi^!9XSBUBC7", rAMIntDataAccess1.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.setShort((-2453L), (short)1871);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // bytePos of wrong multiple for RAMInt -2453
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      boolean boolean0 = rAMIntDataAccess1.isIntBased();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(boolean0);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.getInt(0L);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(445L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      boolean boolean0 = rAMIntDataAccess2.isIntBased();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertTrue(boolean0);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.setByte((-1349L), (byte) (-117));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         //  does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("The list of suffixes must not be null", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("The list of suffixes must not be null", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.getInt(0L);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      RAMIntDataAccess rAMIntDataAccess0 = null;
      try {
        rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, (ByteOrder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.BitUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("DsVcbGD", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("DsVcbGD", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-1207L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("DsVcbGD", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("DsVcbGD", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("DsVcbGD", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("DsVcbGD", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals("DsVcbGD", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      
      boolean boolean0 = rAMIntDataAccess2.releaseSegment(0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("DsVcbGD", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("DsVcbGD", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals("DsVcbGD", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertTrue(boolean0);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("5mCv3", (String) null, true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("5mCv3", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("5mCv3", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("5mCv3", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.releaseSegment(2476);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2476
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("", rAMIntDataAccess0.getName());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("", rAMIntDataAccess1.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      boolean boolean0 = rAMIntDataAccess1.isStoring();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("", rAMIntDataAccess1.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(boolean0);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = (RAMIntDataAccess)rAMIntDataAccess0.copyTo(rAMIntDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = null;
      try {
        rAMIntDataAccess0 = new RAMIntDataAccess("D-a;'Ae(QRyV", ">%w;A", false, byteOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "";
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("org.apache.commons.io.filefilter.DelegateFileFilter", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.rename("v70cTm");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // File does not exist!? org.apache.commons.io.filefilter.DelegateFileFilter Make sure that you flushed before renaming. Otherwise it could make problems for memory mapped DataAccess objects
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      DAType dAType0 = rAMIntDataAccess0.getType();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isAllowWrites());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isInteg());
      assertFalse(dAType0.isStoring());
      assertNotNull(dAType0);
      
      rAMIntDataAccess0.rename("K;vr/U&PS");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("K;vr/U&PS", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      
      long long0 = 1970L;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      byte byte0 = (byte)60;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("K;vr/U&PS", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("K;vr/U&PS", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertNotNull(rAMDataAccess0);
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(5L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("K;vr/U&PS", rAMDataAccess0.getName());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals("K;vr/U&PS", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertNotNull(rAMDataAccess1);
      
      RAMDataAccess rAMDataAccess2 = rAMDataAccess1.store(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("K;vr/U&PS", rAMDataAccess0.getName());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals("K;vr/U&PS", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(1, rAMDataAccess2.getSegments());
      assertEquals(1048576L, rAMDataAccess2.getCapacity());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertEquals("K;vr/U&PS", rAMDataAccess2.getName());
      assertFalse(rAMDataAccess2.isStoring());
      assertFalse(rAMDataAccess2.isClosed());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      assertNotNull(rAMDataAccess2);
      
      RAMDataAccess rAMDataAccess3 = (RAMDataAccess)rAMIntDataAccess0.copyTo(rAMDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("K;vr/U&PS", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("K;vr/U&PS", rAMDataAccess0.getName());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals("K;vr/U&PS", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(1, rAMDataAccess2.getSegments());
      assertEquals(1048576L, rAMDataAccess2.getCapacity());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertEquals("K;vr/U&PS", rAMDataAccess2.getName());
      assertFalse(rAMDataAccess2.isStoring());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals("K;vr/U&PS", rAMDataAccess3.getName());
      assertFalse(rAMDataAccess3.isClosed());
      assertEquals(1048576L, rAMDataAccess3.getCapacity());
      assertEquals(1048576, rAMDataAccess3.getSegmentSize());
      assertFalse(rAMDataAccess3.isStoring());
      assertEquals(1, rAMDataAccess3.getSegments());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess3);
      assertSame(rAMDataAccess1, rAMDataAccess3);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      assertSame(rAMDataAccess2, rAMDataAccess3);
      assertSame(rAMDataAccess3, rAMDataAccess0);
      assertSame(rAMDataAccess3, rAMDataAccess1);
      assertSame(rAMDataAccess3, rAMDataAccess2);
      assertNotNull(rAMDataAccess3);
      
      boolean boolean0 = rAMIntDataAccess0.isIntBased();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("K;vr/U&PS", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(boolean0);
      assertSame(byteOrder0, byteOrder1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.setByte(1970L, (byte)60);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // nullK;vr/U&PS does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'K';
      charArray0[2] = 'y';
      charArray0[3] = '\\';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("YKy\\", charBuffer0.toString());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'Y', 'K', 'y', '\\'}, charArray0);
      assertEquals(4, charArray0.length);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("YKy\\", charBuffer0.toString());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      assertArrayEquals(new char[] {'Y', 'K', 'y', '\\'}, charArray0);
      assertEquals(4, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("5+<:^}X.{(}{^kWA", (String) null, true, byteOrder0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("YKy\\", charBuffer0.toString());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("5+<:^}X.{(}{^kWA", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      assertArrayEquals(new char[] {'Y', 'K', 'y', '\\'}, charArray0);
      assertEquals(4, charArray0.length);
      
      rAMIntDataAccess0.flush();
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("YKy\\", charBuffer0.toString());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("5+<:^}X.{(}{^kWA", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertArrayEquals(new char[] {'Y', 'K', 'y', '\\'}, charArray0);
      assertEquals(4, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(5L);
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("YKy\\", charBuffer0.toString());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("5+<:^}X.{(}{^kWA", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("5+<:^}X.{(}{^kWA", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      assertArrayEquals(new char[] {'Y', 'K', 'y', '\\'}, charArray0);
      assertEquals(4, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(true);
      assertTrue(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("YKy\\", charBuffer0.toString());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("5+<:^}X.{(}{^kWA", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("5+<:^}X.{(}{^kWA", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("5+<:^}X.{(}{^kWA", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess2);
      assertArrayEquals(new char[] {'Y', 'K', 'y', '\\'}, charArray0);
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.copyTo(rAMIntDataAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      assertNotNull(byteOrder2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("(7_+c~K3^;\"Yn89Bqd", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("(7_+c~K3^;\"Yn89Bqd", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      DAType dAType0 = rAMIntDataAccess0.getType();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("(7_+c~K3^;\"Yn89Bqd", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(dAType0.isInMemory());
      assertTrue(dAType0.isInteg());
      assertFalse(dAType0.isMMap());
      assertTrue(dAType0.isStoring());
      assertTrue(dAType0.isAllowWrites());
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertNotNull(dAType0);
      
      int int0 = rAMIntDataAccess0.getSegments();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("(7_+c~K3^;\"Yn89Bqd", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0, int0);
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      
      boolean boolean1 = rAMIntDataAccess0.loadExisting();
      assertTrue(boolean1 == boolean0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("(7_+c~K3^;\"Yn89Bqd", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(boolean1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      
      DAType dAType1 = rAMIntDataAccess0.getType();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("(7_+c~K3^;\"Yn89Bqd", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(dAType1.isMMap());
      assertTrue(dAType1.isStoring());
      assertTrue(dAType1.isInteg());
      assertTrue(dAType1.isInMemory());
      assertTrue(dAType1.isAllowWrites());
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertSame(dAType1, dAType0);
      assertNotNull(dAType1);
      
      boolean boolean2 = rAMIntDataAccess0.isIntBased();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("(7_+c~K3^;\"Yn89Bqd", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(boolean2);
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.setByte(0, (byte)68);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // (7_+c~K3^;\"Yn89Bqd does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("Problem while loading ", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Problem while loading ", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Problem while loading ", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("Problem while loading ", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      rAMIntDataAccess1.flush();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Problem while loading ", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("Problem while loading ", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.setShort(1224L, (short)31);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("K/TM )^5i;]IY", (String) null, false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess0.getName());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess0.getName());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      boolean boolean0 = rAMIntDataAccess0.ensureCapacity(303L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("K/TM )^5i;]IY", rAMIntDataAccess0.getName());
      assertTrue(boolean0);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.create(0L);
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // already created
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      short short0 = (short)220;
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess1));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertNotNull(rAMIntDataAccess2);
      
      RAMIntDataAccess rAMIntDataAccess3 = (RAMIntDataAccess)rAMIntDataAccess2.copyTo(rAMIntDataAccess1);
      assertFalse(rAMIntDataAccess0.equals((Object)rAMIntDataAccess2));
      assertFalse(rAMIntDataAccess1.equals((Object)rAMIntDataAccess2));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess1));
      assertFalse(rAMIntDataAccess3.equals((Object)rAMIntDataAccess2));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess3.getSegmentSize());
      assertTrue(rAMIntDataAccess3.isStoring());
      assertEquals("", rAMIntDataAccess3.getName());
      assertEquals(0, rAMIntDataAccess3.getSegments());
      assertFalse(rAMIntDataAccess3.isClosed());
      assertEquals(0L, rAMIntDataAccess3.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertNotSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess3);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess3, rAMIntDataAccess2);
      assertNotNull(rAMIntDataAccess3);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      boolean boolean0 = rAMIntDataAccess2.loadExisting();
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess3));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess1));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertFalse(boolean0);
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess3);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.getByte(220L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         //  does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      short short0 = (short)220;
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess1));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertNotNull(rAMIntDataAccess2);
      
      RAMIntDataAccess rAMIntDataAccess3 = (RAMIntDataAccess)rAMIntDataAccess2.copyTo(rAMIntDataAccess1);
      assertFalse(rAMIntDataAccess0.equals((Object)rAMIntDataAccess2));
      assertFalse(rAMIntDataAccess1.equals((Object)rAMIntDataAccess2));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess1));
      assertFalse(rAMIntDataAccess3.equals((Object)rAMIntDataAccess2));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertTrue(rAMIntDataAccess3.isStoring());
      assertEquals(1048576, rAMIntDataAccess3.getSegmentSize());
      assertEquals("", rAMIntDataAccess3.getName());
      assertEquals(0, rAMIntDataAccess3.getSegments());
      assertEquals(0L, rAMIntDataAccess3.getCapacity());
      assertFalse(rAMIntDataAccess3.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertNotSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess3);
      assertNotSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess1);
      assertNotSame(rAMIntDataAccess3, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess3);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      assertNotNull(byteOrder2);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder2);
      assertSame(byteOrder3, byteOrder0);
      assertNotNull(byteOrder3);
      
      boolean boolean0 = rAMIntDataAccess2.loadExisting();
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess1));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess3));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertFalse(boolean0);
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotSame(rAMIntDataAccess2, rAMIntDataAccess3);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.getByte(220L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         //  does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess1));
      assertFalse(rAMIntDataAccess2.equals((Object)rAMIntDataAccess0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess2.getSegments());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(0L, rAMIntDataAccess2.getCapacity());
      assertNotNull(rAMIntDataAccess2);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.setInt((-1263L), 16);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      boolean boolean1 = rAMIntDataAccess0.loadExisting();
      assertTrue(boolean1 == boolean0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(boolean1);
      assertSame(byteOrder0, byteOrder1);
      
      boolean boolean2 = rAMIntDataAccess0.isIntBased();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertTrue(boolean2);
      assertSame(byteOrder0, byteOrder1);
      
      long long0 = rAMIntDataAccess0.getCapacity();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, long0);
      assertSame(byteOrder0, byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess1 = (RAMIntDataAccess)rAMIntDataAccess0.setSegmentSize(931);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(512, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(512, rAMIntDataAccess1.getSegmentSize());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("Use instance EMPTY instead of capacity 0", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Use instance EMPTY instead of capacity 0");
      assertFalse(boolean0);
      
      long long0 = 406L;
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(406L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      boolean boolean1 = rAMIntDataAccess1.checkBeforeRename("xUBpe^hCmMDR");
      assertFalse(boolean1 == boolean0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(boolean1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte) (-1);
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.getBytes(406L, byteArray0, 2790);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use instance EMPTY instead of capacity 0 does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("Use instance EMPTY instead of capacity 0", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Use instance EMPTY instead of capacity 0");
      assertFalse(boolean0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(406L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      boolean boolean1 = rAMIntDataAccess1.checkBeforeRename("xUBpe^hCmMDR");
      assertFalse(boolean1 == boolean0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertTrue(boolean1);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      long long0 = rAMIntDataAccess2.getCapacity();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576L, long0);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      rAMIntDataAccess0.setShort(406L, (short)1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("Use instance EMPTY instead of capacity 0", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.releaseSegment(371);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 371
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("EQf?F&lvuIRp^", (String) null, true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      long long0 = (-1L);
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-1L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.flush();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't store integers to nullEQf?F&lvuIRp^
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("EQf?F&lvuIRp^", (String) null, true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create((-1L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess2);
      
      long long0 = 5L;
      rAMIntDataAccess2.setInt(5L, 410);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("EQf?F&lvuIRp^", rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      long long1 = 1877L;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.setBytes(5L, byteArray0, 410);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // nullEQf?F&lvuIRp^ does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("org.apache.commons.io.filefilter.DelegateFileFilter", "", true, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNotNull(rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertNotNull(rAMIntDataAccess1);
      
      rAMIntDataAccess0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("org.apache.commons.io.filefilter.DelegateFileFilter", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      rAMIntDataAccess1.rename("v70cTm");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("v70cTm", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isClosed());
      assertEquals("v70cTm", rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.getShort((-1554L));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "HEAP";
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("HEAP", "", true, byteOrder0);
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(2L);
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(true);
      long long0 = (-1333L);
      short short0 = (short)0;
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.setShort((-1333L), (short)0);
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // bytePos of wrong multiple for RAMInt -1333
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("NNPM", "", true, byteOrder0);
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(4L);
      ByteOrder.nativeOrder();
      rAMIntDataAccess1.getShort(4L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      rAMIntDataAccess0.releaseSegment((short)0);
      rAMIntDataAccess0.ensureCapacity(100L);
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.getShort(4L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("NNPM", "", true, byteOrder0);
      ByteOrder.nativeOrder();
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(10L);
      ByteOrder.nativeOrder();
      rAMIntDataAccess1.getShort(10L);
      rAMIntDataAccess1.rename("NNPM");
      rAMIntDataAccess0.getInt(1L);
      rAMIntDataAccess0.ensureCapacity(100L);
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(false);
      rAMIntDataAccess2.getShort(10L);
      long long0 = 65535L;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)26;
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.setByte((byte) (-48), (byte) (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NNPM does not support byte based acccess. Use RAMDataAccess instead
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.getInt(1L);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // call create or loadExisting before usage!
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, true, byteOrder0);
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-2026L));
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.ensureCapacity((-2026L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new capacity has to be strictly positive
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }
}
