/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:00:40 GMT 2021
 */

package com.graphhopper.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.util.TraversalMode;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.CHConfig;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CHConfig_ESTest extends CHConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = CHConfig.nodeBased("shortest", weighting0);
      assertNotNull(cHConfig0);
      assertEquals("shortest", cHConfig0.getName());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertEquals("shortest", cHConfig0.toString());
      assertEquals("shortest", cHConfig0.toFileName());
      
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig1 = CHConfig.nodeBased("shortest", weighting1);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertNotNull(cHConfig1);
      assertEquals("shortest", cHConfig1.toFileName());
      assertEquals("shortest", cHConfig1.getName());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertEquals("shortest", cHConfig1.toString());
      assertNotSame(cHConfig1, cHConfig0);
      
      cHConfig0.hashCode();
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertEquals("shortest", cHConfig0.getName());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertEquals("shortest", cHConfig0.toString());
      assertEquals("shortest", cHConfig0.toFileName());
      assertNotSame(cHConfig0, cHConfig1);
      
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Weighting weighting3 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig2 = CHConfig.nodeBased("shortest", weighting3);
      assertTrue(cHConfig2.equals((Object)cHConfig1));
      assertTrue(cHConfig2.equals((Object)cHConfig0));
      assertNotNull(cHConfig2);
      assertEquals("shortest", cHConfig2.getName());
      assertEquals("shortest", cHConfig2.toFileName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig2.getTraversalMode());
      assertEquals("shortest", cHConfig2.toString());
      assertFalse(cHConfig2.isEdgeBased());
      assertNotSame(cHConfig2, cHConfig1);
      assertNotSame(cHConfig2, cHConfig0);
      
      CHConfig cHConfig3 = CHConfig.nodeBased("shortest", weighting2);
      assertTrue(cHConfig3.equals((Object)cHConfig1));
      assertTrue(cHConfig3.equals((Object)cHConfig2));
      assertTrue(cHConfig3.equals((Object)cHConfig0));
      assertNotNull(cHConfig3);
      assertFalse(cHConfig3.isEdgeBased());
      assertEquals("shortest", cHConfig3.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig3.getTraversalMode());
      assertEquals("shortest", cHConfig3.toString());
      assertEquals("shortest", cHConfig3.toFileName());
      assertNotSame(cHConfig3, cHConfig1);
      assertNotSame(cHConfig3, cHConfig0);
      assertNotSame(cHConfig3, cHConfig2);
      
      CHConfig cHConfig4 = CHConfig.nodeBased("shortest", (Weighting) null);
      assertTrue(cHConfig4.equals((Object)cHConfig0));
      assertTrue(cHConfig4.equals((Object)cHConfig2));
      assertTrue(cHConfig4.equals((Object)cHConfig1));
      assertTrue(cHConfig4.equals((Object)cHConfig3));
      assertNotNull(cHConfig4);
      assertEquals(TraversalMode.NODE_BASED, cHConfig4.getTraversalMode());
      assertFalse(cHConfig4.isEdgeBased());
      assertEquals("shortest", cHConfig4.toFileName());
      assertEquals("shortest", cHConfig4.toString());
      assertEquals("shortest", cHConfig4.getName());
      assertNotSame(cHConfig4, cHConfig3);
      assertNotSame(cHConfig4, cHConfig0);
      assertNotSame(cHConfig4, cHConfig2);
      assertNotSame(cHConfig4, cHConfig1);
      
      String string0 = cHConfig1.toString();
      assertTrue(cHConfig1.equals((Object)cHConfig4));
      assertTrue(cHConfig1.equals((Object)cHConfig2));
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertTrue(cHConfig1.equals((Object)cHConfig3));
      assertEquals("shortest", string0);
      assertNotNull(string0);
      assertEquals("shortest", cHConfig1.toFileName());
      assertEquals("shortest", cHConfig1.getName());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertEquals("shortest", cHConfig1.toString());
      assertNotSame(cHConfig1, cHConfig0);
      assertNotSame(cHConfig1, cHConfig2);
      assertNotSame(cHConfig1, cHConfig3);
      assertNotSame(cHConfig1, cHConfig4);
      
      String string1 = cHConfig1.toFileName();
      assertTrue(cHConfig1.equals((Object)cHConfig4));
      assertTrue(cHConfig1.equals((Object)cHConfig2));
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertTrue(cHConfig1.equals((Object)cHConfig3));
      assertEquals("shortest", string1);
      assertNotNull(string1);
      assertEquals("shortest", cHConfig1.toFileName());
      assertEquals("shortest", cHConfig1.getName());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertEquals("shortest", cHConfig1.toString());
      assertNotSame(cHConfig1, cHConfig0);
      assertNotSame(cHConfig1, cHConfig2);
      assertNotSame(cHConfig1, cHConfig3);
      assertNotSame(cHConfig1, cHConfig4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = CHConfig.edgeBased("", weighting0);
      assertNotNull(cHConfig0);
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertTrue(cHConfig0.isEdgeBased());
      
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig1 = CHConfig.nodeBased("", weighting1);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertNotNull(cHConfig1);
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertEquals("", cHConfig1.toFileName());
      assertFalse(cHConfig1.isEdgeBased());
      assertNotSame(cHConfig1, cHConfig0);
      
      TraversalMode traversalMode0 = cHConfig0.getTraversalMode();
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertEquals(TraversalMode.EDGE_BASED, traversalMode0);
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertTrue(cHConfig0.isEdgeBased());
      assertTrue(traversalMode0.isEdgeBased());
      assertNotSame(cHConfig0, cHConfig1);
      
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig2 = CHConfig.edgeBased("", weighting2);
      assertTrue(cHConfig2.equals((Object)cHConfig0));
      assertTrue(cHConfig2.equals((Object)cHConfig1));
      assertNotNull(cHConfig2);
      assertEquals(TraversalMode.EDGE_BASED, cHConfig2.getTraversalMode());
      assertEquals("", cHConfig2.toFileName());
      assertTrue(cHConfig2.isEdgeBased());
      assertEquals("", cHConfig2.getName());
      assertEquals("", cHConfig2.toString());
      assertNotSame(cHConfig2, cHConfig1);
      assertNotSame(cHConfig2, cHConfig0);
      
      String string0 = cHConfig1.getName();
      assertTrue(cHConfig1.equals((Object)cHConfig2));
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertEquals("", cHConfig1.toFileName());
      assertFalse(cHConfig1.isEdgeBased());
      assertNotSame(cHConfig1, cHConfig0);
      assertNotSame(cHConfig1, cHConfig2);
      
      Weighting weighting3 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig3 = CHConfig.nodeBased("", weighting3);
      assertTrue(cHConfig3.equals((Object)cHConfig1));
      assertTrue(cHConfig3.equals((Object)cHConfig0));
      assertTrue(cHConfig3.equals((Object)cHConfig2));
      assertNotNull(cHConfig3);
      assertFalse(cHConfig3.isEdgeBased());
      assertEquals("", cHConfig3.toFileName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig3.getTraversalMode());
      assertEquals("", cHConfig3.toString());
      assertEquals("", cHConfig3.getName());
      assertNotSame(cHConfig3, cHConfig0);
      assertNotSame(cHConfig3, cHConfig2);
      assertNotSame(cHConfig3, cHConfig1);
      
      Weighting weighting4 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig4 = CHConfig.nodeBased("", weighting4);
      assertTrue(cHConfig4.equals((Object)cHConfig1));
      assertTrue(cHConfig4.equals((Object)cHConfig0));
      assertTrue(cHConfig4.equals((Object)cHConfig2));
      assertTrue(cHConfig4.equals((Object)cHConfig3));
      assertNotNull(cHConfig4);
      assertEquals("", cHConfig4.toFileName());
      assertEquals("", cHConfig4.toString());
      assertEquals("", cHConfig4.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig4.getTraversalMode());
      assertFalse(cHConfig4.isEdgeBased());
      assertNotSame(cHConfig4, cHConfig3);
      assertNotSame(cHConfig4, cHConfig0);
      assertNotSame(cHConfig4, cHConfig2);
      assertNotSame(cHConfig4, cHConfig1);
      
      CHConfig cHConfig5 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig5.equals((Object)cHConfig2));
      assertTrue(cHConfig5.equals((Object)cHConfig3));
      assertTrue(cHConfig5.equals((Object)cHConfig1));
      assertTrue(cHConfig5.equals((Object)cHConfig0));
      assertTrue(cHConfig5.equals((Object)cHConfig4));
      assertNotNull(cHConfig5);
      assertEquals("", cHConfig5.toString());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig5.getTraversalMode());
      assertTrue(cHConfig5.isEdgeBased());
      assertEquals("", cHConfig5.toFileName());
      assertEquals("", cHConfig5.getName());
      assertNotSame(cHConfig5, cHConfig1);
      assertNotSame(cHConfig5, cHConfig4);
      assertNotSame(cHConfig5, cHConfig2);
      assertNotSame(cHConfig5, cHConfig3);
      assertNotSame(cHConfig5, cHConfig0);
      
      CHConfig cHConfig6 = CHConfig.nodeBased("", (Weighting) null);
      assertTrue(cHConfig6.equals((Object)cHConfig3));
      assertTrue(cHConfig6.equals((Object)cHConfig5));
      assertTrue(cHConfig6.equals((Object)cHConfig2));
      assertTrue(cHConfig6.equals((Object)cHConfig4));
      assertTrue(cHConfig6.equals((Object)cHConfig0));
      assertTrue(cHConfig6.equals((Object)cHConfig1));
      assertNotNull(cHConfig6);
      assertEquals("", cHConfig6.getName());
      assertEquals("", cHConfig6.toFileName());
      assertEquals("", cHConfig6.toString());
      assertEquals(TraversalMode.NODE_BASED, cHConfig6.getTraversalMode());
      assertFalse(cHConfig6.isEdgeBased());
      assertNotSame(cHConfig6, cHConfig5);
      assertNotSame(cHConfig6, cHConfig0);
      assertNotSame(cHConfig6, cHConfig4);
      assertNotSame(cHConfig6, cHConfig1);
      assertNotSame(cHConfig6, cHConfig3);
      assertNotSame(cHConfig6, cHConfig2);
      
      CHConfig cHConfig7 = CHConfig.nodeBased("", (Weighting) null);
      assertTrue(cHConfig7.equals((Object)cHConfig6));
      assertTrue(cHConfig7.equals((Object)cHConfig2));
      assertTrue(cHConfig7.equals((Object)cHConfig3));
      assertTrue(cHConfig7.equals((Object)cHConfig0));
      assertTrue(cHConfig7.equals((Object)cHConfig1));
      assertTrue(cHConfig7.equals((Object)cHConfig4));
      assertTrue(cHConfig7.equals((Object)cHConfig5));
      assertNotNull(cHConfig7);
      assertFalse(cHConfig7.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig7.getTraversalMode());
      assertEquals("", cHConfig7.toFileName());
      assertEquals("", cHConfig7.getName());
      assertEquals("", cHConfig7.toString());
      assertNotSame(cHConfig7, cHConfig1);
      assertNotSame(cHConfig7, cHConfig4);
      assertNotSame(cHConfig7, cHConfig2);
      assertNotSame(cHConfig7, cHConfig3);
      assertNotSame(cHConfig7, cHConfig5);
      assertNotSame(cHConfig7, cHConfig6);
      assertNotSame(cHConfig7, cHConfig0);
      
      boolean boolean0 = cHConfig0.equals(cHConfig6);
      assertTrue(cHConfig0.equals((Object)cHConfig7));
      assertTrue(cHConfig0.equals((Object)cHConfig3));
      assertTrue(cHConfig0.equals((Object)cHConfig5));
      assertTrue(cHConfig0.equals((Object)cHConfig6));
      assertTrue(cHConfig0.equals((Object)cHConfig4));
      assertTrue(cHConfig0.equals((Object)cHConfig2));
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertTrue(cHConfig6.equals((Object)cHConfig3));
      assertTrue(cHConfig6.equals((Object)cHConfig5));
      assertTrue(cHConfig6.equals((Object)cHConfig2));
      assertTrue(cHConfig6.equals((Object)cHConfig4));
      assertTrue(cHConfig6.equals((Object)cHConfig7));
      assertTrue(cHConfig6.equals((Object)cHConfig0));
      assertTrue(cHConfig6.equals((Object)cHConfig1));
      assertTrue(boolean0);
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertTrue(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig6.getName());
      assertEquals("", cHConfig6.toFileName());
      assertEquals("", cHConfig6.toString());
      assertEquals(TraversalMode.NODE_BASED, cHConfig6.getTraversalMode());
      assertFalse(cHConfig6.isEdgeBased());
      assertNotSame(cHConfig0, cHConfig2);
      assertNotSame(cHConfig0, cHConfig4);
      assertNotSame(cHConfig0, cHConfig1);
      assertNotSame(cHConfig0, cHConfig7);
      assertNotSame(cHConfig0, cHConfig3);
      assertNotSame(cHConfig0, cHConfig6);
      assertNotSame(cHConfig0, cHConfig5);
      assertNotSame(cHConfig6, cHConfig5);
      assertNotSame(cHConfig6, cHConfig0);
      assertNotSame(cHConfig6, cHConfig4);
      assertNotSame(cHConfig6, cHConfig7);
      assertNotSame(cHConfig6, cHConfig1);
      assertNotSame(cHConfig6, cHConfig3);
      assertNotSame(cHConfig6, cHConfig2);
      
      // Undeclared exception!
      try { 
        CHConfig.edgeBased((String) null, (Weighting) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = null;
      try {
        cHConfig0 = new CHConfig((String) null, weighting0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CHConfig.nodeBased((String) null, weighting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = CHConfig.nodeBased("", weighting0);
      assertNotNull(cHConfig0);
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.toString());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      
      boolean boolean0 = cHConfig0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.toString());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CHConfig.nodeBased("_XO^G-S^40\"u#%$[9y", weighting1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: _XO^G-S^40\"u#%$[9y
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = CHConfig.nodeBased("", weighting0);
      assertNotNull(cHConfig0);
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.toString());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      
      boolean boolean0 = cHConfig0.equals("");
      assertFalse(boolean0);
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.toString());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = CHConfig.nodeBased("", weighting0);
      assertNotNull(cHConfig0);
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      
      String string0 = cHConfig0.toFileName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig1 = CHConfig.edgeBased("", weighting1);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertNotNull(cHConfig1);
      assertEquals("", cHConfig1.getName());
      assertEquals("", cHConfig1.toFileName());
      assertTrue(cHConfig1.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig1.getTraversalMode());
      assertEquals("", cHConfig1.toString());
      assertNotSame(cHConfig1, cHConfig0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CHConfig cHConfig0 = CHConfig.edgeBased("", (Weighting) null);
      assertNotNull(cHConfig0);
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertTrue(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      
      CHConfig cHConfig1 = CHConfig.nodeBased("", (Weighting) null);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertNotNull(cHConfig1);
      assertEquals("", cHConfig1.toFileName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertNotSame(cHConfig1, cHConfig0);
      
      CHConfig cHConfig2 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig2.equals((Object)cHConfig0));
      assertTrue(cHConfig2.equals((Object)cHConfig1));
      assertNotNull(cHConfig2);
      assertEquals("", cHConfig2.toFileName());
      assertEquals("", cHConfig2.toString());
      assertEquals("", cHConfig2.getName());
      assertTrue(cHConfig2.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig2.getTraversalMode());
      assertNotSame(cHConfig2, cHConfig1);
      assertNotSame(cHConfig2, cHConfig0);
      
      Weighting weighting0 = cHConfig0.getWeighting();
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertTrue(cHConfig0.equals((Object)cHConfig2));
      assertNull(weighting0);
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertTrue(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertNotSame(cHConfig0, cHConfig2);
      assertNotSame(cHConfig0, cHConfig1);
      
      Weighting weighting1 = cHConfig2.getWeighting();
      assertTrue(cHConfig2.equals((Object)cHConfig0));
      assertTrue(cHConfig2.equals((Object)cHConfig1));
      assertNull(weighting1);
      assertEquals("", cHConfig2.toFileName());
      assertEquals("", cHConfig2.toString());
      assertEquals("", cHConfig2.getName());
      assertTrue(cHConfig2.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig2.getTraversalMode());
      assertNotSame(cHConfig2, cHConfig1);
      assertNotSame(cHConfig2, cHConfig0);
      
      boolean boolean0 = cHConfig1.isEdgeBased();
      assertTrue(cHConfig1.equals((Object)cHConfig2));
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertFalse(boolean0);
      assertEquals("", cHConfig1.toFileName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertNotSame(cHConfig1, cHConfig2);
      assertNotSame(cHConfig1, cHConfig0);
      
      TraversalMode traversalMode0 = cHConfig0.getTraversalMode();
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertTrue(cHConfig0.equals((Object)cHConfig2));
      assertEquals(TraversalMode.EDGE_BASED, traversalMode0);
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertTrue(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertTrue(traversalMode0.isEdgeBased());
      assertNotSame(cHConfig0, cHConfig2);
      assertNotSame(cHConfig0, cHConfig1);
      
      CHConfig cHConfig3 = CHConfig.nodeBased("", (Weighting) null);
      assertTrue(cHConfig3.equals((Object)cHConfig2));
      assertTrue(cHConfig3.equals((Object)cHConfig0));
      assertTrue(cHConfig3.equals((Object)cHConfig1));
      assertNotNull(cHConfig3);
      assertFalse(cHConfig3.isEdgeBased());
      assertEquals("", cHConfig3.toString());
      assertEquals(TraversalMode.NODE_BASED, cHConfig3.getTraversalMode());
      assertEquals("", cHConfig3.toFileName());
      assertEquals("", cHConfig3.getName());
      assertNotSame(cHConfig3, cHConfig2);
      assertNotSame(cHConfig3, cHConfig0);
      assertNotSame(cHConfig3, cHConfig1);
      
      Weighting weighting2 = cHConfig2.getWeighting();
      assertTrue(cHConfig2.equals((Object)cHConfig0));
      assertTrue(cHConfig2.equals((Object)cHConfig3));
      assertTrue(cHConfig2.equals((Object)cHConfig1));
      assertNull(weighting2);
      assertEquals("", cHConfig2.toFileName());
      assertEquals("", cHConfig2.toString());
      assertEquals("", cHConfig2.getName());
      assertTrue(cHConfig2.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig2.getTraversalMode());
      assertNotSame(cHConfig2, cHConfig3);
      assertNotSame(cHConfig2, cHConfig1);
      assertNotSame(cHConfig2, cHConfig0);
      
      String string0 = cHConfig2.toString();
      assertTrue(cHConfig2.equals((Object)cHConfig0));
      assertTrue(cHConfig2.equals((Object)cHConfig3));
      assertTrue(cHConfig2.equals((Object)cHConfig1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", cHConfig2.toFileName());
      assertEquals("", cHConfig2.toString());
      assertEquals("", cHConfig2.getName());
      assertTrue(cHConfig2.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig2.getTraversalMode());
      assertNotSame(cHConfig2, cHConfig3);
      assertNotSame(cHConfig2, cHConfig1);
      assertNotSame(cHConfig2, cHConfig0);
      
      CHConfig cHConfig4 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig4.equals((Object)cHConfig0));
      assertTrue(cHConfig4.equals((Object)cHConfig2));
      assertTrue(cHConfig4.equals((Object)cHConfig3));
      assertTrue(cHConfig4.equals((Object)cHConfig1));
      assertNotNull(cHConfig4);
      assertEquals("", cHConfig4.toString());
      assertEquals("", cHConfig4.getName());
      assertTrue(cHConfig4.isEdgeBased());
      assertEquals("", cHConfig4.toFileName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig4.getTraversalMode());
      assertNotSame(cHConfig4, cHConfig3);
      assertNotSame(cHConfig4, cHConfig2);
      assertNotSame(cHConfig4, cHConfig1);
      assertNotSame(cHConfig4, cHConfig0);
      
      TraversalMode traversalMode1 = cHConfig0.getTraversalMode();
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertTrue(cHConfig0.equals((Object)cHConfig3));
      assertTrue(cHConfig0.equals((Object)cHConfig4));
      assertTrue(cHConfig0.equals((Object)cHConfig2));
      assertEquals(TraversalMode.EDGE_BASED, traversalMode1);
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertTrue(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertTrue(traversalMode1.isEdgeBased());
      assertNotSame(cHConfig0, cHConfig2);
      assertNotSame(cHConfig0, cHConfig1);
      assertNotSame(cHConfig0, cHConfig3);
      assertNotSame(cHConfig0, cHConfig4);
      assertSame(traversalMode1, traversalMode0);
      
      String string1 = cHConfig3.toString();
      assertTrue(cHConfig3.equals((Object)cHConfig2));
      assertTrue(cHConfig3.equals((Object)cHConfig0));
      assertTrue(cHConfig3.equals((Object)cHConfig1));
      assertTrue(cHConfig3.equals((Object)cHConfig4));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(cHConfig3.isEdgeBased());
      assertEquals("", cHConfig3.toString());
      assertEquals(TraversalMode.NODE_BASED, cHConfig3.getTraversalMode());
      assertEquals("", cHConfig3.toFileName());
      assertEquals("", cHConfig3.getName());
      assertNotSame(cHConfig3, cHConfig4);
      assertNotSame(cHConfig3, cHConfig2);
      assertNotSame(cHConfig3, cHConfig0);
      assertNotSame(cHConfig3, cHConfig1);
      
      CHConfig cHConfig5 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig5.equals((Object)cHConfig0));
      assertTrue(cHConfig5.equals((Object)cHConfig2));
      assertTrue(cHConfig5.equals((Object)cHConfig3));
      assertTrue(cHConfig5.equals((Object)cHConfig1));
      assertTrue(cHConfig5.equals((Object)cHConfig4));
      assertNotNull(cHConfig5);
      assertEquals("", cHConfig5.toString());
      assertTrue(cHConfig5.isEdgeBased());
      assertEquals("", cHConfig5.toFileName());
      assertEquals("", cHConfig5.getName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig5.getTraversalMode());
      assertNotSame(cHConfig5, cHConfig2);
      assertNotSame(cHConfig5, cHConfig1);
      assertNotSame(cHConfig5, cHConfig0);
      assertNotSame(cHConfig5, cHConfig4);
      assertNotSame(cHConfig5, cHConfig3);
      
      CHConfig cHConfig6 = CHConfig.nodeBased("", (Weighting) null);
      assertTrue(cHConfig6.equals((Object)cHConfig0));
      assertTrue(cHConfig6.equals((Object)cHConfig5));
      assertTrue(cHConfig6.equals((Object)cHConfig2));
      assertTrue(cHConfig6.equals((Object)cHConfig3));
      assertTrue(cHConfig6.equals((Object)cHConfig1));
      assertTrue(cHConfig6.equals((Object)cHConfig4));
      assertNotNull(cHConfig6);
      assertEquals(TraversalMode.NODE_BASED, cHConfig6.getTraversalMode());
      assertFalse(cHConfig6.isEdgeBased());
      assertEquals("", cHConfig6.toString());
      assertEquals("", cHConfig6.toFileName());
      assertEquals("", cHConfig6.getName());
      assertNotSame(cHConfig6, cHConfig4);
      assertNotSame(cHConfig6, cHConfig3);
      assertNotSame(cHConfig6, cHConfig1);
      assertNotSame(cHConfig6, cHConfig5);
      assertNotSame(cHConfig6, cHConfig2);
      assertNotSame(cHConfig6, cHConfig0);
      
      CHConfig cHConfig7 = CHConfig.nodeBased("", (Weighting) null);
      assertTrue(cHConfig7.equals((Object)cHConfig4));
      assertTrue(cHConfig7.equals((Object)cHConfig3));
      assertTrue(cHConfig7.equals((Object)cHConfig2));
      assertTrue(cHConfig7.equals((Object)cHConfig6));
      assertTrue(cHConfig7.equals((Object)cHConfig0));
      assertTrue(cHConfig7.equals((Object)cHConfig1));
      assertTrue(cHConfig7.equals((Object)cHConfig5));
      assertNotNull(cHConfig7);
      assertEquals("", cHConfig7.getName());
      assertEquals("", cHConfig7.toFileName());
      assertEquals("", cHConfig7.toString());
      assertFalse(cHConfig7.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig7.getTraversalMode());
      assertNotSame(cHConfig7, cHConfig0);
      assertNotSame(cHConfig7, cHConfig5);
      assertNotSame(cHConfig7, cHConfig1);
      assertNotSame(cHConfig7, cHConfig2);
      assertNotSame(cHConfig7, cHConfig4);
      assertNotSame(cHConfig7, cHConfig6);
      assertNotSame(cHConfig7, cHConfig3);
      
      CHConfig cHConfig8 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig8.equals((Object)cHConfig4));
      assertTrue(cHConfig8.equals((Object)cHConfig7));
      assertTrue(cHConfig8.equals((Object)cHConfig1));
      assertTrue(cHConfig8.equals((Object)cHConfig5));
      assertTrue(cHConfig8.equals((Object)cHConfig0));
      assertTrue(cHConfig8.equals((Object)cHConfig2));
      assertTrue(cHConfig8.equals((Object)cHConfig6));
      assertTrue(cHConfig8.equals((Object)cHConfig3));
      assertNotNull(cHConfig8);
      assertEquals("", cHConfig8.getName());
      assertTrue(cHConfig8.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig8.getTraversalMode());
      assertEquals("", cHConfig8.toFileName());
      assertEquals("", cHConfig8.toString());
      assertNotSame(cHConfig8, cHConfig0);
      assertNotSame(cHConfig8, cHConfig4);
      assertNotSame(cHConfig8, cHConfig6);
      assertNotSame(cHConfig8, cHConfig3);
      assertNotSame(cHConfig8, cHConfig1);
      assertNotSame(cHConfig8, cHConfig7);
      assertNotSame(cHConfig8, cHConfig2);
      assertNotSame(cHConfig8, cHConfig5);
      
      CHConfig cHConfig9 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig9.equals((Object)cHConfig8));
      assertTrue(cHConfig9.equals((Object)cHConfig4));
      assertTrue(cHConfig9.equals((Object)cHConfig3));
      assertTrue(cHConfig9.equals((Object)cHConfig1));
      assertTrue(cHConfig9.equals((Object)cHConfig0));
      assertTrue(cHConfig9.equals((Object)cHConfig7));
      assertTrue(cHConfig9.equals((Object)cHConfig2));
      assertTrue(cHConfig9.equals((Object)cHConfig6));
      assertTrue(cHConfig9.equals((Object)cHConfig5));
      assertNotNull(cHConfig9);
      assertEquals("", cHConfig9.getName());
      assertEquals("", cHConfig9.toString());
      assertEquals("", cHConfig9.toFileName());
      assertTrue(cHConfig9.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig9.getTraversalMode());
      assertNotSame(cHConfig9, cHConfig2);
      assertNotSame(cHConfig9, cHConfig0);
      assertNotSame(cHConfig9, cHConfig5);
      assertNotSame(cHConfig9, cHConfig4);
      assertNotSame(cHConfig9, cHConfig7);
      assertNotSame(cHConfig9, cHConfig8);
      assertNotSame(cHConfig9, cHConfig1);
      assertNotSame(cHConfig9, cHConfig3);
      assertNotSame(cHConfig9, cHConfig6);
      
      CHConfig cHConfig10 = CHConfig.nodeBased("road_access", (Weighting) null);
      assertFalse(cHConfig10.equals((Object)cHConfig8));
      assertFalse(cHConfig10.equals((Object)cHConfig7));
      assertFalse(cHConfig10.equals((Object)cHConfig5));
      assertFalse(cHConfig10.equals((Object)cHConfig0));
      assertFalse(cHConfig10.equals((Object)cHConfig1));
      assertFalse(cHConfig10.equals((Object)cHConfig2));
      assertFalse(cHConfig10.equals((Object)cHConfig6));
      assertFalse(cHConfig10.equals((Object)cHConfig9));
      assertFalse(cHConfig10.equals((Object)cHConfig3));
      assertFalse(cHConfig10.equals((Object)cHConfig4));
      assertNotNull(cHConfig10);
      assertEquals("road_access", cHConfig10.toString());
      assertEquals("road_access", cHConfig10.toFileName());
      assertEquals("road_access", cHConfig10.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig10.getTraversalMode());
      assertFalse(cHConfig10.isEdgeBased());
      assertNotSame(cHConfig10, cHConfig8);
      assertNotSame(cHConfig10, cHConfig7);
      assertNotSame(cHConfig10, cHConfig5);
      assertNotSame(cHConfig10, cHConfig0);
      assertNotSame(cHConfig10, cHConfig1);
      assertNotSame(cHConfig10, cHConfig2);
      assertNotSame(cHConfig10, cHConfig6);
      assertNotSame(cHConfig10, cHConfig9);
      assertNotSame(cHConfig10, cHConfig3);
      assertNotSame(cHConfig10, cHConfig4);
      
      CHConfig cHConfig11 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig11.equals((Object)cHConfig3));
      assertTrue(cHConfig11.equals((Object)cHConfig1));
      assertTrue(cHConfig11.equals((Object)cHConfig2));
      assertTrue(cHConfig11.equals((Object)cHConfig7));
      assertTrue(cHConfig11.equals((Object)cHConfig9));
      assertTrue(cHConfig11.equals((Object)cHConfig5));
      assertTrue(cHConfig11.equals((Object)cHConfig0));
      assertTrue(cHConfig11.equals((Object)cHConfig8));
      assertTrue(cHConfig11.equals((Object)cHConfig4));
      assertTrue(cHConfig11.equals((Object)cHConfig6));
      assertFalse(cHConfig11.equals((Object)cHConfig10));
      assertNotNull(cHConfig11);
      assertTrue(cHConfig11.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig11.getTraversalMode());
      assertEquals("", cHConfig11.toString());
      assertEquals("", cHConfig11.toFileName());
      assertEquals("", cHConfig11.getName());
      assertNotSame(cHConfig11, cHConfig8);
      assertNotSame(cHConfig11, cHConfig4);
      assertNotSame(cHConfig11, cHConfig2);
      assertNotSame(cHConfig11, cHConfig6);
      assertNotSame(cHConfig11, cHConfig9);
      assertNotSame(cHConfig11, cHConfig3);
      assertNotSame(cHConfig11, cHConfig5);
      assertNotSame(cHConfig11, cHConfig7);
      assertNotSame(cHConfig11, cHConfig0);
      assertNotSame(cHConfig11, cHConfig1);
      assertNotSame(cHConfig11, cHConfig10);
      
      String string2 = cHConfig1.toFileName();
      assertTrue(cHConfig1.equals((Object)cHConfig2));
      assertTrue(cHConfig1.equals((Object)cHConfig6));
      assertTrue(cHConfig1.equals((Object)cHConfig9));
      assertTrue(cHConfig1.equals((Object)cHConfig5));
      assertTrue(cHConfig1.equals((Object)cHConfig11));
      assertTrue(cHConfig1.equals((Object)cHConfig8));
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertTrue(cHConfig1.equals((Object)cHConfig4));
      assertFalse(cHConfig1.equals((Object)cHConfig10));
      assertTrue(cHConfig1.equals((Object)cHConfig7));
      assertTrue(cHConfig1.equals((Object)cHConfig3));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("", cHConfig1.toFileName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertNotSame(cHConfig1, cHConfig4);
      assertNotSame(cHConfig1, cHConfig8);
      assertNotSame(cHConfig1, cHConfig7);
      assertNotSame(cHConfig1, cHConfig3);
      assertNotSame(cHConfig1, cHConfig6);
      assertNotSame(cHConfig1, cHConfig11);
      assertNotSame(cHConfig1, cHConfig2);
      assertNotSame(cHConfig1, cHConfig10);
      assertNotSame(cHConfig1, cHConfig0);
      assertNotSame(cHConfig1, cHConfig5);
      assertNotSame(cHConfig1, cHConfig9);
      
      CHConfig cHConfig12 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig12.equals((Object)cHConfig8));
      assertTrue(cHConfig12.equals((Object)cHConfig0));
      assertTrue(cHConfig12.equals((Object)cHConfig4));
      assertTrue(cHConfig12.equals((Object)cHConfig5));
      assertTrue(cHConfig12.equals((Object)cHConfig11));
      assertTrue(cHConfig12.equals((Object)cHConfig2));
      assertTrue(cHConfig12.equals((Object)cHConfig6));
      assertTrue(cHConfig12.equals((Object)cHConfig9));
      assertFalse(cHConfig12.equals((Object)cHConfig10));
      assertTrue(cHConfig12.equals((Object)cHConfig1));
      assertTrue(cHConfig12.equals((Object)cHConfig7));
      assertTrue(cHConfig12.equals((Object)cHConfig3));
      assertNotNull(cHConfig12);
      assertEquals(TraversalMode.EDGE_BASED, cHConfig12.getTraversalMode());
      assertEquals("", cHConfig12.toFileName());
      assertTrue(cHConfig12.isEdgeBased());
      assertEquals("", cHConfig12.toString());
      assertEquals("", cHConfig12.getName());
      assertNotSame(cHConfig12, cHConfig11);
      assertNotSame(cHConfig12, cHConfig2);
      assertNotSame(cHConfig12, cHConfig3);
      assertNotSame(cHConfig12, cHConfig6);
      assertNotSame(cHConfig12, cHConfig4);
      assertNotSame(cHConfig12, cHConfig8);
      assertNotSame(cHConfig12, cHConfig1);
      assertNotSame(cHConfig12, cHConfig7);
      assertNotSame(cHConfig12, cHConfig10);
      assertNotSame(cHConfig12, cHConfig0);
      assertNotSame(cHConfig12, cHConfig5);
      assertNotSame(cHConfig12, cHConfig9);
      
      String string3 = cHConfig0.getName();
      assertFalse(cHConfig0.equals((Object)cHConfig10));
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertTrue(cHConfig0.equals((Object)cHConfig7));
      assertTrue(cHConfig0.equals((Object)cHConfig3));
      assertTrue(cHConfig0.equals((Object)cHConfig8));
      assertTrue(cHConfig0.equals((Object)cHConfig6));
      assertTrue(cHConfig0.equals((Object)cHConfig4));
      assertTrue(cHConfig0.equals((Object)cHConfig5));
      assertTrue(cHConfig0.equals((Object)cHConfig12));
      assertTrue(cHConfig0.equals((Object)cHConfig9));
      assertTrue(cHConfig0.equals((Object)cHConfig11));
      assertTrue(cHConfig0.equals((Object)cHConfig2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertTrue(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertNotSame(cHConfig0, cHConfig10);
      assertNotSame(cHConfig0, cHConfig5);
      assertNotSame(cHConfig0, cHConfig12);
      assertNotSame(cHConfig0, cHConfig2);
      assertNotSame(cHConfig0, cHConfig1);
      assertNotSame(cHConfig0, cHConfig7);
      assertNotSame(cHConfig0, cHConfig3);
      assertNotSame(cHConfig0, cHConfig6);
      assertNotSame(cHConfig0, cHConfig9);
      assertNotSame(cHConfig0, cHConfig11);
      assertNotSame(cHConfig0, cHConfig4);
      assertNotSame(cHConfig0, cHConfig8);
      
      boolean boolean1 = cHConfig11.isEdgeBased();
      assertTrue(cHConfig11.equals((Object)cHConfig3));
      assertTrue(cHConfig11.equals((Object)cHConfig1));
      assertTrue(cHConfig11.equals((Object)cHConfig2));
      assertTrue(cHConfig11.equals((Object)cHConfig7));
      assertTrue(cHConfig11.equals((Object)cHConfig9));
      assertTrue(cHConfig11.equals((Object)cHConfig5));
      assertTrue(cHConfig11.equals((Object)cHConfig0));
      assertTrue(cHConfig11.equals((Object)cHConfig8));
      assertTrue(cHConfig11.equals((Object)cHConfig12));
      assertTrue(cHConfig11.equals((Object)cHConfig4));
      assertTrue(cHConfig11.equals((Object)cHConfig6));
      assertFalse(cHConfig11.equals((Object)cHConfig10));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(cHConfig11.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig11.getTraversalMode());
      assertEquals("", cHConfig11.toString());
      assertEquals("", cHConfig11.toFileName());
      assertEquals("", cHConfig11.getName());
      assertNotSame(cHConfig11, cHConfig8);
      assertNotSame(cHConfig11, cHConfig4);
      assertNotSame(cHConfig11, cHConfig2);
      assertNotSame(cHConfig11, cHConfig6);
      assertNotSame(cHConfig11, cHConfig3);
      assertNotSame(cHConfig11, cHConfig9);
      assertNotSame(cHConfig11, cHConfig12);
      assertNotSame(cHConfig11, cHConfig5);
      assertNotSame(cHConfig11, cHConfig7);
      assertNotSame(cHConfig11, cHConfig0);
      assertNotSame(cHConfig11, cHConfig1);
      assertNotSame(cHConfig11, cHConfig10);
      
      Weighting weighting3 = cHConfig1.getWeighting();
      assertTrue(cHConfig1.equals((Object)cHConfig2));
      assertTrue(cHConfig1.equals((Object)cHConfig6));
      assertTrue(cHConfig1.equals((Object)cHConfig9));
      assertTrue(cHConfig1.equals((Object)cHConfig5));
      assertTrue(cHConfig1.equals((Object)cHConfig11));
      assertTrue(cHConfig1.equals((Object)cHConfig8));
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertTrue(cHConfig1.equals((Object)cHConfig4));
      assertFalse(cHConfig1.equals((Object)cHConfig10));
      assertTrue(cHConfig1.equals((Object)cHConfig7));
      assertTrue(cHConfig1.equals((Object)cHConfig12));
      assertTrue(cHConfig1.equals((Object)cHConfig3));
      assertNull(weighting3);
      assertEquals("", cHConfig1.toFileName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertNotSame(cHConfig1, cHConfig4);
      assertNotSame(cHConfig1, cHConfig8);
      assertNotSame(cHConfig1, cHConfig7);
      assertNotSame(cHConfig1, cHConfig3);
      assertNotSame(cHConfig1, cHConfig6);
      assertNotSame(cHConfig1, cHConfig12);
      assertNotSame(cHConfig1, cHConfig11);
      assertNotSame(cHConfig1, cHConfig2);
      assertNotSame(cHConfig1, cHConfig10);
      assertNotSame(cHConfig1, cHConfig0);
      assertNotSame(cHConfig1, cHConfig5);
      assertNotSame(cHConfig1, cHConfig9);
      
      cHConfig7.hashCode();
      assertTrue(cHConfig7.equals((Object)cHConfig3));
      assertTrue(cHConfig7.equals((Object)cHConfig4));
      assertFalse(cHConfig7.equals((Object)cHConfig10));
      assertTrue(cHConfig7.equals((Object)cHConfig2));
      assertTrue(cHConfig7.equals((Object)cHConfig6));
      assertTrue(cHConfig7.equals((Object)cHConfig0));
      assertTrue(cHConfig7.equals((Object)cHConfig1));
      assertTrue(cHConfig7.equals((Object)cHConfig11));
      assertTrue(cHConfig7.equals((Object)cHConfig12));
      assertTrue(cHConfig7.equals((Object)cHConfig9));
      assertTrue(cHConfig7.equals((Object)cHConfig5));
      assertTrue(cHConfig7.equals((Object)cHConfig8));
      assertEquals("", cHConfig7.getName());
      assertEquals("", cHConfig7.toFileName());
      assertEquals("", cHConfig7.toString());
      assertFalse(cHConfig7.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig7.getTraversalMode());
      assertNotSame(cHConfig7, cHConfig0);
      assertNotSame(cHConfig7, cHConfig5);
      assertNotSame(cHConfig7, cHConfig10);
      assertNotSame(cHConfig7, cHConfig9);
      assertNotSame(cHConfig7, cHConfig8);
      assertNotSame(cHConfig7, cHConfig11);
      assertNotSame(cHConfig7, cHConfig1);
      assertNotSame(cHConfig7, cHConfig2);
      assertNotSame(cHConfig7, cHConfig4);
      assertNotSame(cHConfig7, cHConfig12);
      assertNotSame(cHConfig7, cHConfig6);
      assertNotSame(cHConfig7, cHConfig3);
      
      Weighting weighting4 = cHConfig9.getWeighting();
      assertTrue(cHConfig9.equals((Object)cHConfig8));
      assertTrue(cHConfig9.equals((Object)cHConfig4));
      assertTrue(cHConfig9.equals((Object)cHConfig3));
      assertFalse(cHConfig9.equals((Object)cHConfig10));
      assertTrue(cHConfig9.equals((Object)cHConfig1));
      assertTrue(cHConfig9.equals((Object)cHConfig0));
      assertTrue(cHConfig9.equals((Object)cHConfig7));
      assertTrue(cHConfig9.equals((Object)cHConfig2));
      assertTrue(cHConfig9.equals((Object)cHConfig12));
      assertTrue(cHConfig9.equals((Object)cHConfig6));
      assertTrue(cHConfig9.equals((Object)cHConfig5));
      assertTrue(cHConfig9.equals((Object)cHConfig11));
      assertNull(weighting4);
      assertEquals("", cHConfig9.getName());
      assertEquals("", cHConfig9.toString());
      assertEquals("", cHConfig9.toFileName());
      assertTrue(cHConfig9.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig9.getTraversalMode());
      assertNotSame(cHConfig9, cHConfig11);
      assertNotSame(cHConfig9, cHConfig2);
      assertNotSame(cHConfig9, cHConfig0);
      assertNotSame(cHConfig9, cHConfig10);
      assertNotSame(cHConfig9, cHConfig5);
      assertNotSame(cHConfig9, cHConfig4);
      assertNotSame(cHConfig9, cHConfig7);
      assertNotSame(cHConfig9, cHConfig8);
      assertNotSame(cHConfig9, cHConfig1);
      assertNotSame(cHConfig9, cHConfig3);
      assertNotSame(cHConfig9, cHConfig12);
      assertNotSame(cHConfig9, cHConfig6);
      
      String string4 = cHConfig1.toFileName();
      assertTrue(cHConfig1.equals((Object)cHConfig2));
      assertTrue(cHConfig1.equals((Object)cHConfig6));
      assertTrue(cHConfig1.equals((Object)cHConfig9));
      assertTrue(cHConfig1.equals((Object)cHConfig5));
      assertTrue(cHConfig1.equals((Object)cHConfig11));
      assertTrue(cHConfig1.equals((Object)cHConfig8));
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertTrue(cHConfig1.equals((Object)cHConfig4));
      assertFalse(cHConfig1.equals((Object)cHConfig10));
      assertTrue(cHConfig1.equals((Object)cHConfig7));
      assertTrue(cHConfig1.equals((Object)cHConfig12));
      assertTrue(cHConfig1.equals((Object)cHConfig3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals("", cHConfig1.toFileName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertNotSame(cHConfig1, cHConfig4);
      assertNotSame(cHConfig1, cHConfig8);
      assertNotSame(cHConfig1, cHConfig7);
      assertNotSame(cHConfig1, cHConfig3);
      assertNotSame(cHConfig1, cHConfig6);
      assertNotSame(cHConfig1, cHConfig12);
      assertNotSame(cHConfig1, cHConfig11);
      assertNotSame(cHConfig1, cHConfig2);
      assertNotSame(cHConfig1, cHConfig10);
      assertNotSame(cHConfig1, cHConfig0);
      assertNotSame(cHConfig1, cHConfig5);
      assertNotSame(cHConfig1, cHConfig9);
      
      CHConfig cHConfig13 = CHConfig.edgeBased("road_access", (Weighting) null);
      assertFalse(cHConfig13.equals((Object)cHConfig12));
      assertFalse(cHConfig13.equals((Object)cHConfig6));
      assertFalse(cHConfig13.equals((Object)cHConfig9));
      assertFalse(cHConfig13.equals((Object)cHConfig7));
      assertFalse(cHConfig13.equals((Object)cHConfig1));
      assertFalse(cHConfig13.equals((Object)cHConfig5));
      assertFalse(cHConfig13.equals((Object)cHConfig11));
      assertFalse(cHConfig13.equals((Object)cHConfig4));
      assertFalse(cHConfig13.equals((Object)cHConfig8));
      assertTrue(cHConfig13.equals((Object)cHConfig10));
      assertFalse(cHConfig13.equals((Object)cHConfig3));
      assertFalse(cHConfig13.equals((Object)cHConfig2));
      assertFalse(cHConfig13.equals((Object)cHConfig0));
      assertNotNull(cHConfig13);
      assertEquals("road_access", cHConfig13.toFileName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig13.getTraversalMode());
      assertEquals("road_access", cHConfig13.toString());
      assertEquals("road_access", cHConfig13.getName());
      assertTrue(cHConfig13.isEdgeBased());
      assertNotSame(cHConfig13, cHConfig12);
      assertNotSame(cHConfig13, cHConfig6);
      assertNotSame(cHConfig13, cHConfig9);
      assertNotSame(cHConfig13, cHConfig7);
      assertNotSame(cHConfig13, cHConfig1);
      assertNotSame(cHConfig13, cHConfig10);
      assertNotSame(cHConfig13, cHConfig5);
      assertNotSame(cHConfig13, cHConfig11);
      assertNotSame(cHConfig13, cHConfig4);
      assertNotSame(cHConfig13, cHConfig8);
      assertNotSame(cHConfig13, cHConfig3);
      assertNotSame(cHConfig13, cHConfig2);
      assertNotSame(cHConfig13, cHConfig0);
      
      boolean boolean2 = cHConfig0.isEdgeBased();
      assertFalse(cHConfig0.equals((Object)cHConfig10));
      assertTrue(cHConfig0.equals((Object)cHConfig3));
      assertTrue(cHConfig0.equals((Object)cHConfig4));
      assertTrue(cHConfig0.equals((Object)cHConfig5));
      assertTrue(cHConfig0.equals((Object)cHConfig9));
      assertTrue(cHConfig0.equals((Object)cHConfig11));
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertTrue(cHConfig0.equals((Object)cHConfig7));
      assertTrue(cHConfig0.equals((Object)cHConfig8));
      assertTrue(cHConfig0.equals((Object)cHConfig6));
      assertFalse(cHConfig0.equals((Object)cHConfig13));
      assertTrue(cHConfig0.equals((Object)cHConfig12));
      assertTrue(cHConfig0.equals((Object)cHConfig2));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertTrue(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertNotSame(cHConfig0, cHConfig10);
      assertNotSame(cHConfig0, cHConfig5);
      assertNotSame(cHConfig0, cHConfig12);
      assertNotSame(cHConfig0, cHConfig3);
      assertNotSame(cHConfig0, cHConfig9);
      assertNotSame(cHConfig0, cHConfig11);
      assertNotSame(cHConfig0, cHConfig4);
      assertNotSame(cHConfig0, cHConfig8);
      assertNotSame(cHConfig0, cHConfig2);
      assertNotSame(cHConfig0, cHConfig1);
      assertNotSame(cHConfig0, cHConfig7);
      assertNotSame(cHConfig0, cHConfig13);
      assertNotSame(cHConfig0, cHConfig6);
      
      CHConfig cHConfig14 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig14.equals((Object)cHConfig8));
      assertFalse(cHConfig14.equals((Object)cHConfig13));
      assertTrue(cHConfig14.equals((Object)cHConfig2));
      assertTrue(cHConfig14.equals((Object)cHConfig3));
      assertTrue(cHConfig14.equals((Object)cHConfig12));
      assertTrue(cHConfig14.equals((Object)cHConfig4));
      assertFalse(cHConfig14.equals((Object)cHConfig10));
      assertTrue(cHConfig14.equals((Object)cHConfig6));
      assertTrue(cHConfig14.equals((Object)cHConfig9));
      assertTrue(cHConfig14.equals((Object)cHConfig11));
      assertTrue(cHConfig14.equals((Object)cHConfig5));
      assertTrue(cHConfig14.equals((Object)cHConfig7));
      assertTrue(cHConfig14.equals((Object)cHConfig0));
      assertTrue(cHConfig14.equals((Object)cHConfig1));
      assertNotNull(cHConfig14);
      assertEquals("", cHConfig14.toString());
      assertEquals("", cHConfig14.getName());
      assertTrue(cHConfig14.isEdgeBased());
      assertEquals("", cHConfig14.toFileName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig14.getTraversalMode());
      assertNotSame(cHConfig14, cHConfig11);
      assertNotSame(cHConfig14, cHConfig3);
      assertNotSame(cHConfig14, cHConfig13);
      assertNotSame(cHConfig14, cHConfig0);
      assertNotSame(cHConfig14, cHConfig2);
      assertNotSame(cHConfig14, cHConfig9);
      assertNotSame(cHConfig14, cHConfig12);
      assertNotSame(cHConfig14, cHConfig6);
      assertNotSame(cHConfig14, cHConfig5);
      assertNotSame(cHConfig14, cHConfig1);
      assertNotSame(cHConfig14, cHConfig10);
      assertNotSame(cHConfig14, cHConfig7);
      assertNotSame(cHConfig14, cHConfig4);
      assertNotSame(cHConfig14, cHConfig8);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = new CHConfig("road_access_private_factor", weighting0, true);
      assertNotNull(cHConfig0);
      assertTrue(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertEquals("road_access_private_factor", cHConfig0.toString());
      assertEquals("road_access_private_factor", cHConfig0.getName());
      assertEquals("road_access_private_factor", cHConfig0.toFileName());
      
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig1 = CHConfig.edgeBased("road_access_private_factor", weighting1);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertNotNull(cHConfig1);
      assertEquals("road_access_private_factor", cHConfig1.toString());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig1.getTraversalMode());
      assertEquals("road_access_private_factor", cHConfig1.toFileName());
      assertEquals("road_access_private_factor", cHConfig1.getName());
      assertTrue(cHConfig1.isEdgeBased());
      assertNotSame(cHConfig1, cHConfig0);
      
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig2 = CHConfig.edgeBased("road_access_private_factor", weighting2);
      assertTrue(cHConfig2.equals((Object)cHConfig0));
      assertTrue(cHConfig2.equals((Object)cHConfig1));
      assertNotNull(cHConfig2);
      assertEquals("road_access_private_factor", cHConfig2.toString());
      assertEquals("road_access_private_factor", cHConfig2.toFileName());
      assertEquals("road_access_private_factor", cHConfig2.getName());
      assertTrue(cHConfig2.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig2.getTraversalMode());
      assertNotSame(cHConfig2, cHConfig1);
      assertNotSame(cHConfig2, cHConfig0);
      
      String string0 = cHConfig0.getName();
      assertTrue(cHConfig0.equals((Object)cHConfig2));
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertEquals("road_access_private_factor", string0);
      assertNotNull(string0);
      assertTrue(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertEquals("road_access_private_factor", cHConfig0.toString());
      assertEquals("road_access_private_factor", cHConfig0.getName());
      assertEquals("road_access_private_factor", cHConfig0.toFileName());
      assertNotSame(cHConfig0, cHConfig2);
      assertNotSame(cHConfig0, cHConfig1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CHConfig.edgeBased((String) null, weighting0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Weighting weighting0 = null;
      CHConfig cHConfig0 = CHConfig.nodeBased("", (Weighting) null);
      assertNotNull(cHConfig0);
      assertEquals("", cHConfig0.toString());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      
      CHConfig cHConfig1 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertNotNull(cHConfig1);
      assertEquals("", cHConfig1.toString());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig1.getTraversalMode());
      assertTrue(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toFileName());
      assertEquals("", cHConfig1.getName());
      assertNotSame(cHConfig1, cHConfig0);
      
      TraversalMode traversalMode0 = cHConfig0.getTraversalMode();
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertEquals(TraversalMode.NODE_BASED, traversalMode0);
      assertEquals("", cHConfig0.toString());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertFalse(traversalMode0.isEdgeBased());
      assertNotSame(cHConfig0, cHConfig1);
      
      CHConfig cHConfig2 = CHConfig.nodeBased("", (Weighting) null);
      assertTrue(cHConfig2.equals((Object)cHConfig1));
      assertTrue(cHConfig2.equals((Object)cHConfig0));
      assertNotNull(cHConfig2);
      assertEquals(TraversalMode.NODE_BASED, cHConfig2.getTraversalMode());
      assertFalse(cHConfig2.isEdgeBased());
      assertEquals("", cHConfig2.toString());
      assertEquals("", cHConfig2.toFileName());
      assertEquals("", cHConfig2.getName());
      assertNotSame(cHConfig2, cHConfig0);
      assertNotSame(cHConfig2, cHConfig1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        CHConfig.nodeBased((String) null, (Weighting) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weighting weighting0 = null;
      CHConfig cHConfig0 = CHConfig.nodeBased("", (Weighting) null);
      assertNotNull(cHConfig0);
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toString());
      
      cHConfig0.hashCode();
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toString());
      
      CHConfig cHConfig1 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertNotNull(cHConfig1);
      assertEquals("", cHConfig1.toFileName());
      assertTrue(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig1.getTraversalMode());
      assertNotSame(cHConfig1, cHConfig0);
      
      String string0 = cHConfig1.getName();
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", cHConfig1.toFileName());
      assertTrue(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig1.getTraversalMode());
      assertNotSame(cHConfig1, cHConfig0);
      
      CHConfig cHConfig2 = CHConfig.nodeBased("", (Weighting) null);
      assertTrue(cHConfig2.equals((Object)cHConfig1));
      assertTrue(cHConfig2.equals((Object)cHConfig0));
      assertNotNull(cHConfig2);
      assertEquals("", cHConfig2.toString());
      assertEquals("", cHConfig2.toFileName());
      assertEquals("", cHConfig2.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig2.getTraversalMode());
      assertFalse(cHConfig2.isEdgeBased());
      assertNotSame(cHConfig2, cHConfig0);
      assertNotSame(cHConfig2, cHConfig1);
      
      CHConfig cHConfig3 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig3.equals((Object)cHConfig2));
      assertTrue(cHConfig3.equals((Object)cHConfig0));
      assertTrue(cHConfig3.equals((Object)cHConfig1));
      assertNotNull(cHConfig3);
      assertEquals(TraversalMode.EDGE_BASED, cHConfig3.getTraversalMode());
      assertTrue(cHConfig3.isEdgeBased());
      assertEquals("", cHConfig3.toFileName());
      assertEquals("", cHConfig3.getName());
      assertEquals("", cHConfig3.toString());
      assertNotSame(cHConfig3, cHConfig1);
      assertNotSame(cHConfig3, cHConfig0);
      assertNotSame(cHConfig3, cHConfig2);
      
      Weighting weighting1 = cHConfig0.getWeighting();
      assertTrue(cHConfig0.equals((Object)cHConfig3));
      assertTrue(cHConfig0.equals((Object)cHConfig2));
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertNull(weighting1);
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toString());
      assertNotSame(cHConfig0, cHConfig1);
      assertNotSame(cHConfig0, cHConfig2);
      assertNotSame(cHConfig0, cHConfig3);
      
      CHConfig cHConfig4 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig4.equals((Object)cHConfig3));
      assertTrue(cHConfig4.equals((Object)cHConfig0));
      assertTrue(cHConfig4.equals((Object)cHConfig2));
      assertTrue(cHConfig4.equals((Object)cHConfig1));
      assertNotNull(cHConfig4);
      assertEquals(TraversalMode.EDGE_BASED, cHConfig4.getTraversalMode());
      assertTrue(cHConfig4.isEdgeBased());
      assertEquals("", cHConfig4.toString());
      assertEquals("", cHConfig4.toFileName());
      assertEquals("", cHConfig4.getName());
      assertNotSame(cHConfig4, cHConfig0);
      assertNotSame(cHConfig4, cHConfig1);
      assertNotSame(cHConfig4, cHConfig2);
      assertNotSame(cHConfig4, cHConfig3);
      
      cHConfig1.hashCode();
      assertTrue(cHConfig1.equals((Object)cHConfig2));
      assertTrue(cHConfig1.equals((Object)cHConfig3));
      assertTrue(cHConfig1.equals((Object)cHConfig4));
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertEquals("", cHConfig1.toFileName());
      assertTrue(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig1.getTraversalMode());
      assertNotSame(cHConfig1, cHConfig4);
      assertNotSame(cHConfig1, cHConfig3);
      assertNotSame(cHConfig1, cHConfig2);
      assertNotSame(cHConfig1, cHConfig0);
      
      String string1 = cHConfig1.toString();
      assertTrue(cHConfig1.equals((Object)cHConfig2));
      assertTrue(cHConfig1.equals((Object)cHConfig3));
      assertTrue(cHConfig1.equals((Object)cHConfig4));
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("", cHConfig1.toFileName());
      assertTrue(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig1.getTraversalMode());
      assertNotSame(cHConfig1, cHConfig4);
      assertNotSame(cHConfig1, cHConfig3);
      assertNotSame(cHConfig1, cHConfig2);
      assertNotSame(cHConfig1, cHConfig0);
      
      CHConfig cHConfig5 = CHConfig.edgeBased("", (Weighting) null);
      assertTrue(cHConfig5.equals((Object)cHConfig1));
      assertTrue(cHConfig5.equals((Object)cHConfig2));
      assertTrue(cHConfig5.equals((Object)cHConfig4));
      assertTrue(cHConfig5.equals((Object)cHConfig3));
      assertTrue(cHConfig5.equals((Object)cHConfig0));
      assertNotNull(cHConfig5);
      assertTrue(cHConfig5.isEdgeBased());
      assertEquals("", cHConfig5.toFileName());
      assertEquals("", cHConfig5.getName());
      assertEquals("", cHConfig5.toString());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig5.getTraversalMode());
      assertNotSame(cHConfig5, cHConfig0);
      assertNotSame(cHConfig5, cHConfig4);
      assertNotSame(cHConfig5, cHConfig3);
      assertNotSame(cHConfig5, cHConfig2);
      assertNotSame(cHConfig5, cHConfig1);
      
      // Undeclared exception!
      try { 
        CHConfig.edgeBased((String) null, (Weighting) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = CHConfig.edgeBased("", weighting0);
      assertNotNull(cHConfig0);
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.getName());
      assertTrue(cHConfig0.isEdgeBased());
      
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig1 = CHConfig.nodeBased("", weighting1);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertNotNull(cHConfig1);
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.toFileName());
      assertEquals("", cHConfig1.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertNotSame(cHConfig1, cHConfig0);
      
      // Undeclared exception!
      try { 
        CHConfig.nodeBased(", bwd:", (Weighting) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: , bwd:
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = null;
      try {
        cHConfig0 = new CHConfig("Fx1", weighting0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: Fx1
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Weighting weighting0 = null;
      CHConfig cHConfig0 = CHConfig.nodeBased("", (Weighting) null);
      assertNotNull(cHConfig0);
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      
      String string0 = cHConfig0.toFileName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      
      CHConfig cHConfig1 = CHConfig.nodeBased("", (Weighting) null);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertNotNull(cHConfig1);
      assertEquals("", cHConfig1.toString());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toFileName());
      assertEquals("", cHConfig1.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertNotSame(cHConfig1, cHConfig0);
      
      String string1 = "-q}W8ayPR";
      // Undeclared exception!
      try { 
        CHConfig.edgeBased("-q}W8ayPR", (Weighting) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: -q}W8ayPR
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Weighting weighting0 = null;
      CHConfig cHConfig0 = CHConfig.edgeBased("", (Weighting) null);
      assertNotNull(cHConfig0);
      assertEquals("", cHConfig0.toString());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertTrue(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      
      CHConfig cHConfig1 = CHConfig.nodeBased("", (Weighting) null);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertNotNull(cHConfig1);
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertEquals("", cHConfig1.toFileName());
      assertNotSame(cHConfig1, cHConfig0);
      
      String string0 = ", dist: ";
      // Undeclared exception!
      try { 
        CHConfig.edgeBased(", dist: ", (Weighting) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: , dist: 
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "com.graphhopper.storage.CHConfig";
      Weighting weighting0 = null;
      // Undeclared exception!
      try { 
        CHConfig.nodeBased("com.graphhopper.storage.CHConfig", (Weighting) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: com.graphhopper.storage.CHConfig
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CHConfig.edgeBased("3E=", (Weighting) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: 3E=
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CHConfig.edgeBased("VfXGDTx$am^OSMq", weighting0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: VfXGDTx$am^OSMq
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = CHConfig.nodeBased("", weighting0);
      assertNotNull(cHConfig0);
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      
      String string0 = cHConfig0.getName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      
      boolean boolean0 = cHConfig0.isEdgeBased();
      assertFalse(boolean0);
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      
      cHConfig0.hashCode();
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig1 = CHConfig.nodeBased("", weighting1);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertNotNull(cHConfig1);
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertEquals("", cHConfig1.toFileName());
      assertNotSame(cHConfig1, cHConfig0);
      
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = cHConfig0.equals("");
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      assertNotSame(cHConfig0, cHConfig1);
      
      boolean boolean2 = cHConfig1.equals((Object) null);
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertEquals("", cHConfig1.toFileName());
      assertNotSame(cHConfig1, cHConfig0);
      
      cHConfig0.hashCode();
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      assertNotSame(cHConfig0, cHConfig1);
      
      TraversalMode traversalMode0 = cHConfig1.getTraversalMode();
      assertTrue(cHConfig1.equals((Object)cHConfig0));
      assertEquals(TraversalMode.NODE_BASED, traversalMode0);
      assertEquals(TraversalMode.NODE_BASED, cHConfig1.getTraversalMode());
      assertFalse(cHConfig1.isEdgeBased());
      assertEquals("", cHConfig1.toString());
      assertEquals("", cHConfig1.getName());
      assertEquals("", cHConfig1.toFileName());
      assertFalse(traversalMode0.isEdgeBased());
      assertNotSame(cHConfig1, cHConfig0);
      
      Weighting weighting3 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig2 = CHConfig.edgeBased("", weighting3);
      assertTrue(cHConfig2.equals((Object)cHConfig0));
      assertTrue(cHConfig2.equals((Object)cHConfig1));
      assertNotNull(cHConfig2);
      assertEquals("", cHConfig2.toString());
      assertEquals("", cHConfig2.toFileName());
      assertEquals("", cHConfig2.getName());
      assertTrue(cHConfig2.isEdgeBased());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig2.getTraversalMode());
      assertNotSame(cHConfig2, cHConfig0);
      assertNotSame(cHConfig2, cHConfig1);
      
      boolean boolean3 = cHConfig0.isEdgeBased();
      assertTrue(cHConfig0.equals((Object)cHConfig2));
      assertTrue(cHConfig0.equals((Object)cHConfig1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      assertNotSame(cHConfig0, cHConfig2);
      assertNotSame(cHConfig0, cHConfig1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = new CHConfig("", weighting1, false);
      CHConfig.edgeBased("", weighting2);
      cHConfig0.equals(weighting0);
      String string0 = "[\\|_a-z]+";
      Weighting weighting3 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CHConfig.edgeBased("[|_a-z]+", weighting3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: [|_a-z]+
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = new CHConfig("", weighting0, true);
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig1 = CHConfig.edgeBased("", weighting1);
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn("").when(weighting2).toString();
      Weighting weighting3 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig.nodeBased("", weighting3);
      CHConfig cHConfig2 = CHConfig.edgeBased("", weighting2);
      Weighting weighting4 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig.edgeBased("", weighting4);
      Weighting weighting5 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig.edgeBased("", weighting5);
      Weighting weighting6 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig.edgeBased("shortest", weighting6);
      Weighting weighting7 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig.edgeBased("", weighting7);
      cHConfig0.getTraversalMode();
      cHConfig2.toString();
      cHConfig2.isEdgeBased();
      cHConfig0.equals(cHConfig1);
      Weighting weighting8 = cHConfig2.getWeighting();
      CHConfig.nodeBased("", weighting8);
      // Undeclared exception!
      try { 
        CHConfig.edgeBased("gf+&#i~_DVvEog", weighting8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: gf+&#i~_DVvEog
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      String string0 = "com.graphhopper.storage.CHConfig";
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CHConfig.nodeBased("MSp|m'Nc<bgzLknncaa", weighting2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: MSp|m'Nc<bgzLknncaa
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig0 = CHConfig.nodeBased("shortest", weighting0);
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig1 = CHConfig.edgeBased("shortest", weighting1);
      assertTrue(cHConfig1.isEdgeBased());
      
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig cHConfig2 = CHConfig.nodeBased("shortest", weighting2);
      cHConfig0.hashCode();
      Weighting weighting3 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Weighting weighting4 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      CHConfig.nodeBased("shortest", weighting4);
      CHConfig.nodeBased("shortest", weighting3);
      CHConfig.nodeBased("shortest", (Weighting) null);
      cHConfig2.toString();
      cHConfig2.toFileName();
      assertFalse(cHConfig2.isEdgeBased());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        CHConfig.edgeBased("LD,Xup!TBtb:/", (Weighting) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: LD,Xup!TBtb:/
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }
}
