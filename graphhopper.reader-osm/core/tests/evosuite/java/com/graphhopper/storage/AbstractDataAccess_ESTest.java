/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:04:11 GMT 2021
 */

package com.graphhopper.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.storage.AbstractDataAccess;
import com.graphhopper.storage.MMapDataAccess;
import com.graphhopper.storage.RAMDataAccess;
import com.graphhopper.storage.RAMIntDataAccess;
import java.io.RandomAccessFile;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDataAccess_ESTest extends AbstractDataAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      String string1 = "y_)s20Kx\\//";
      boolean boolean0 = true;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, "y_)s20Kx//", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      
      String string2 = rAMIntDataAccess0.getName();
      assertNull(string2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      
      long long0 = (-256L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-256L));
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertNull(rAMIntDataAccess1.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.copyTo(rAMIntDataAccess1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(true);
      assertNotNull(rAMDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals("", rAMDataAccess1.getName());
      assertTrue(rAMDataAccess1.isStoring());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      RAMDataAccess rAMDataAccess2 = (RAMDataAccess)rAMDataAccess0.copyTo(rAMDataAccess1);
      assertNotNull(rAMDataAccess2);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals("", rAMDataAccess1.getName());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertEquals("", rAMDataAccess2.getName());
      assertTrue(rAMDataAccess2.isStoring());
      assertEquals(0, rAMDataAccess2.getSegments());
      assertEquals(0L, rAMDataAccess2.getCapacity());
      assertFalse(rAMDataAccess2.isClosed());
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        MockURI.normalize((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = null;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      int int0 = 1847;
      rAMIntDataAccess0.segmentSizeInBytes = 1847;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1847, rAMIntDataAccess0.getSegmentSize());
      
      int int1 = rAMIntDataAccess1.getSegments();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1847, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1847, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(1847);
      assertNotNull(rAMIntDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertEquals(2, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNull(rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(2048L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(2, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(2048L, rAMIntDataAccess1.getCapacity());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(2048L, rAMIntDataAccess2.getCapacity());
      assertNull(rAMIntDataAccess2.getName());
      assertEquals(1024, rAMIntDataAccess2.getSegmentSize());
      assertEquals(2, rAMIntDataAccess2.getSegments());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      rAMIntDataAccess2.setHeader(0, 0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertEquals(2, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNull(rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(2048L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(2, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(2048L, rAMIntDataAccess1.getCapacity());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(2048L, rAMIntDataAccess2.getCapacity());
      assertNull(rAMIntDataAccess2.getName());
      assertEquals(1024, rAMIntDataAccess2.getSegmentSize());
      assertEquals(2, rAMIntDataAccess2.getSegments());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      rAMIntDataAccess1.segmentSizeInBytes = (-484);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals((-484), rAMIntDataAccess0.getSegmentSize());
      assertEquals((-968L), rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(2, rAMIntDataAccess1.getSegments());
      assertEquals((-968L), rAMIntDataAccess1.getCapacity());
      assertEquals((-484), rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      
      boolean boolean0 = true;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", (String) null, true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1847);
      assertNotNull(rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals("", rAMDataAccess1.getName());
      assertTrue(rAMDataAccess1.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.copyTo(rAMDataAccess0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new capacity has to be strictly positive
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertNotSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "list should consist of lat,lon pairs!");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("C^k8WFQ^QMO/", "C^k8WFQ^QMO/", byteOrder2, true);
      assertNotNull(mMapDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("C^k8WFQ^QMO/", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      
      mMapDataAccess0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("C^k8WFQ^QMO/", mMapDataAccess0.getName());
      assertNotSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      
      MMapDataAccess mMapDataAccess1 = (MMapDataAccess)mMapDataAccess0.setSegmentSize(37);
      assertNotNull(mMapDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(128, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("C^k8WFQ^QMO/", mMapDataAccess0.getName());
      assertEquals("C^k8WFQ^QMO/", mMapDataAccess1.getName());
      assertTrue(mMapDataAccess1.isStoring());
      assertTrue(mMapDataAccess1.isClosed());
      assertEquals(0, mMapDataAccess1.getSegments());
      assertEquals(128, mMapDataAccess1.getSegmentSize());
      assertNotSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      assertFalse(byteOrder2.equals((Object)byteOrder0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      String string1 = rAMDataAccess0.getFullName();
      assertNotNull(string1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      long long0 = (-3032L);
      // Undeclared exception!
      try { 
        rAMDataAccess0.checkBeforeRename("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newName mustn't be empty!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("y)sy+R20Kx/", "y)sy+R20Kx/", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess0.getName());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create((-1L));
      assertNotNull(rAMIntDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      long long0 = rAMIntDataAccess2.getCapacity();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertEquals(1048576L, long0);
      
      String string0 = rAMIntDataAccess2.getName();
      assertNotNull(string0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertEquals("y)sy+R20Kx/", string0);
      
      RAMIntDataAccess rAMIntDataAccess3 = (RAMIntDataAccess)rAMIntDataAccess2.setSegmentSize(4592);
      assertNotNull(rAMIntDataAccess3);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(4096, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess0.getName());
      assertEquals(4096L, rAMIntDataAccess0.getCapacity());
      assertEquals(4096L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess1.getName());
      assertEquals(4096, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(4096L, rAMIntDataAccess2.getCapacity());
      assertEquals(4096, rAMIntDataAccess2.getSegmentSize());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(4096, rAMIntDataAccess3.getSegmentSize());
      assertEquals(1, rAMIntDataAccess3.getSegments());
      assertEquals("y)sy+R20Kx/", rAMIntDataAccess3.getName());
      assertEquals(4096L, rAMIntDataAccess3.getCapacity());
      assertFalse(rAMIntDataAccess3.isClosed());
      assertTrue(rAMIntDataAccess3.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("y)sy+R20Kx/", "y)sy+R20Kx/", byteOrder0, false);
      assertNotNull(mMapDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("y)sy+R20Kx/", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.ensureCapacity((-3214L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new capacity has to be strictly positive
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("y_)sy20Kx/", "y_)sy20Kx/", byteOrder0, true);
      assertNotNull(mMapDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      
      boolean boolean0 = mMapDataAccess0.loadExisting();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(boolean0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertNotNull(mMapDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess1.getName());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      mMapDataAccess1.rename("y_)sy20Kx/");
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess1.getName());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      int int0 = AbstractDataAccess.HEADER_OFFSET;
      assertEquals(100, int0);
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "y_)sy20Kx/", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(true);
      assertNotNull(rAMDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertTrue(rAMDataAccess1.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMDataAccess1.rename("y_)sy20Kx/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file newName already exists!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, "", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      rAMIntDataAccess0.segmentSizeInBytes = 1847;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1847, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      
      int int0 = rAMIntDataAccess1.getSegments();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1847, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1847, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertEquals(0, int0);
      
      long long0 = (-1L);
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create((-1L));
      assertNotNull(rAMIntDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1024L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(1024L, rAMIntDataAccess1.getCapacity());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1024, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1024L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertNull(rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      rAMIntDataAccess2.setHeader(0, 0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1024L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(1024L, rAMIntDataAccess1.getCapacity());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1024, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1024L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertNull(rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      boolean boolean0 = true;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create((-1L));
      assertNotNull(rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertTrue(rAMDataAccess1.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals("", rAMDataAccess1.getName());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      RAMDataAccess rAMDataAccess2 = (RAMDataAccess)rAMIntDataAccess1.copyTo(rAMDataAccess0);
      assertNotNull(rAMDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1024L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(1024L, rAMIntDataAccess1.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertEquals(1048576L, rAMDataAccess2.getCapacity());
      assertTrue(rAMDataAccess2.isStoring());
      assertEquals("", rAMDataAccess2.getName());
      assertEquals(1, rAMDataAccess2.getSegments());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      
      rAMIntDataAccess0.flush();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1024L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      
      // Undeclared exception!
      try { 
        rAMDataAccess1.ensureCapacity((-169L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new capacity has to be strictly positive
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "h6d]/)l";
      String string1 = "";
      boolean boolean0 = true;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("h6d]/)l", "", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("h6d]/)l", rAMIntDataAccess1.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      boolean boolean1 = rAMIntDataAccess0.checkBeforeRename("h6d]/)l");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      rAMIntDataAccess1.rename("h6d]/)l");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("h6d]/)l", rAMIntDataAccess1.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(65535L);
      assertNotNull(rAMIntDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("h6d]/)l", rAMIntDataAccess1.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("h6d]/)l", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      int int0 = (-2820);
      String string2 = null;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      
      int int1 = (-2357);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null, 511, (-2357));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("Problem while loa5ing /", "Problem while loa5ing /", false, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals("Problem while loa5ing /", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      
      long long0 = (-1L);
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-1L));
      assertNotNull(rAMIntDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("Problem while loa5ing /", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals("Problem while loa5ing /", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(true);
      assertNotNull(rAMIntDataAccess2);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("Problem while loa5ing /", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("Problem while loa5ing /", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("Problem while loa5ing /", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      boolean boolean0 = rAMIntDataAccess2.isStoring();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("Problem while loa5ing /", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals("Problem while loa5ing /", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("Problem while loa5ing /", rAMIntDataAccess2.getName());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.copyTo(rAMIntDataAccess2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, "", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      rAMIntDataAccess0.segmentSizeInBytes = 1847;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1847, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      
      int int0 = rAMIntDataAccess1.getSegments();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1847, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1847, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertEquals(0, int0);
      
      long long0 = (-1L);
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create((-1L));
      assertNotNull(rAMIntDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1024L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1024L, rAMIntDataAccess1.getCapacity());
      assertNull(rAMIntDataAccess1.getName());
      assertNull(rAMIntDataAccess2.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1024L, rAMIntDataAccess2.getCapacity());
      assertEquals(1024, rAMIntDataAccess2.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      rAMIntDataAccess2.setHeader(0, 0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1024L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1024L, rAMIntDataAccess1.getCapacity());
      assertNull(rAMIntDataAccess1.getName());
      assertNull(rAMIntDataAccess2.getName());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1024L, rAMIntDataAccess2.getCapacity());
      assertEquals(1024, rAMIntDataAccess2.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      boolean boolean0 = true;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(false);
      assertNotNull(rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      boolean boolean1 = rAMDataAccess1.checkBeforeRename("uE(NA.E`Fv:GiT-\"io0");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess3 = (RAMIntDataAccess)rAMDataAccess1.copyTo(rAMIntDataAccess1);
      assertNotNull(rAMIntDataAccess3);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1024L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1024L, rAMIntDataAccess1.getCapacity());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals("", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess3.isClosed());
      assertEquals(1024, rAMIntDataAccess3.getSegmentSize());
      assertTrue(rAMIntDataAccess3.isStoring());
      assertEquals(1, rAMIntDataAccess3.getSegments());
      assertNull(rAMIntDataAccess3.getName());
      assertEquals(1024L, rAMIntDataAccess3.getCapacity());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess3);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess3);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess3, rAMIntDataAccess2);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.copyTo(rAMDataAccess0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "h6d]/)l";
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("h6d]/)l", "", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("h6d]/)l", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      rAMIntDataAccess1.rename("h6d]/)l");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("h6d]/)l", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(65535L);
      assertNotNull(rAMIntDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("h6d]/)l", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals("h6d]/)l", rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      int int0 = rAMIntDataAccess2.getInt(65535L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("h6d]/)l", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals("h6d]/)l", rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertEquals(0, int0);
      
      int int1 = (-2820);
      rAMIntDataAccess1.copyHeader(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals("h6d]/)l", rAMIntDataAccess1.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.getHeader((-2820));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -705
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("y_)sy20Kx/", "y_)sy20Kx/", byteOrder0, true);
      assertNotNull(mMapDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertNotNull(mMapDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertTrue(mMapDataAccess1.isStoring());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      mMapDataAccess1.rename("y_)sy20Kx/");
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertTrue(mMapDataAccess1.isStoring());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      int int0 = mMapDataAccess1.getSegments();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertTrue(mMapDataAccess1.isStoring());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      assertEquals(1, int0);
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "y_)sy20Kx/", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertTrue(rAMDataAccess0.isStoring());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(true);
      assertNotNull(rAMDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertTrue(rAMDataAccess0.isStoring());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMDataAccess1.rename("Gv`wr");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Couldn't rename this RAM_STORE object!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("org.apache.commons.io.filefilter.PrefixFileFilter", "", byteOrder0, false);
      assertNotNull(mMapDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", mMapDataAccess0.getName());
      
      String string1 = mMapDataAccess0.toString();
      assertNotNull(string1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", mMapDataAccess0.getName());
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", string1);
      
      boolean boolean0 = mMapDataAccess0.checkBeforeRename("Lk\"3FR");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", mMapDataAccess0.getName());
      assertTrue(boolean0);
      
      boolean boolean1 = mMapDataAccess0.isIntBased();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", mMapDataAccess0.getName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("", rAMDataAccess0.getName());
      
      int int0 = 3868;
      RAMIntDataAccess rAMIntDataAccess0 = null;
      try {
        rAMIntDataAccess0 = new RAMIntDataAccess("org.apache.commons.io.filefilter.PrefixFileFilter", "org.apache.commons.io.filefilter.PrefixFileFilter", true, byteOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(true);
      assertNotNull(rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals("", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      RAMDataAccess rAMDataAccess2 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals("", rAMDataAccess2.getName());
      assertTrue(rAMDataAccess2.isStoring());
      assertEquals(0, rAMDataAccess2.getSegments());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertEquals(0L, rAMDataAccess2.getCapacity());
      assertFalse(rAMDataAccess2.equals((Object)rAMDataAccess0));
      assertFalse(rAMDataAccess2.equals((Object)rAMDataAccess1));
      
      boolean boolean0 = rAMDataAccess2.ensureCapacity(3368L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals("", rAMDataAccess2.getName());
      assertTrue(rAMDataAccess2.isStoring());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertEquals(1048576L, rAMDataAccess2.getCapacity());
      assertEquals(1, rAMDataAccess2.getSegments());
      assertNotSame(rAMDataAccess2, rAMDataAccess0);
      assertNotSame(rAMDataAccess2, rAMDataAccess1);
      assertFalse(rAMDataAccess2.equals((Object)rAMDataAccess0));
      assertFalse(rAMDataAccess2.equals((Object)rAMDataAccess1));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        rAMDataAccess1.rename("segment ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Couldn't rename this RAM_STORE object!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      boolean boolean0 = true;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("y_)sy20Kx/", "y_)sy20Kx/", byteOrder0, true);
      assertNotNull(mMapDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      
      boolean boolean1 = mMapDataAccess0.loadExisting();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MMapDataAccess mMapDataAccess1 = new MMapDataAccess("y_)sy20Kx/", "y_)sy20Kx/", byteOrder0, false);
      assertNotNull(mMapDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess1.getName());
      assertEquals(0, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.equals((Object)mMapDataAccess0));
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.rename("file newName already exists!");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // File does not exist!? y_)sy20Kx/y_)sy20Kx/ Make sure that you flushed before renaming. Otherwise it could make problems for memory mapped DataAccess objects
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", (String) null, true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      int int0 = 1829;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      int int1 = AbstractDataAccess.HEADER_OFFSET;
      assertFalse(int1 == int0);
      assertEquals(100, int1);
      
      int int2 = rAMDataAccess0.getHeader(0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertNotSame(byteOrder0, byteOrder1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string0 = "Sv3Vaoq27F\"Kz";
      MMapDataAccess mMapDataAccess0 = null;
      try {
        mMapDataAccess0 = new MMapDataAccess("Sv3Vaoq27F\"Kz", "iwOE'6P", byteOrder1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "";
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("org.apache.commons.io.filefilter.PrefixFileFilter", "", byteOrder0, false);
      assertNotNull(mMapDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", mMapDataAccess0.getName());
      
      String string1 = mMapDataAccess0.toString();
      assertNotNull(string1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", mMapDataAccess0.getName());
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", string1);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      boolean boolean0 = mMapDataAccess0.isIntBased();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", mMapDataAccess0.getName());
      assertSame(byteOrder0, byteOrder1);
      assertFalse(boolean0);
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      
      rAMDataAccess0.segmentSizePower = 3868;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      
      mMapDataAccess0.rename("org.apache.commons.io.filefilter.PrefixFileFilter");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("org.apache.commons.io.filefilter.PrefixFileFilter", mMapDataAccess0.getName());
      assertSame(byteOrder0, byteOrder1);
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.setInt(3868, 3868);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = null;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, "", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertNull(rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      rAMIntDataAccess0.segmentSizeInBytes = 1847;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1847, rAMIntDataAccess0.getSegmentSize());
      
      int int0 = rAMIntDataAccess1.getSegments();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1847, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(1847, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertEquals(0, int0);
      
      long long0 = (-1L);
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create((-1L));
      assertNotNull(rAMIntDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1024L, rAMIntDataAccess0.getCapacity());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(1024L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1024L, rAMIntDataAccess2.getCapacity());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertNull(rAMIntDataAccess2.getName());
      assertEquals(1024, rAMIntDataAccess2.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      rAMIntDataAccess2.setHeader(0, 0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1024L, rAMIntDataAccess0.getCapacity());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(1024L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1024L, rAMIntDataAccess2.getCapacity());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertNull(rAMIntDataAccess2.getName());
      assertEquals(1024, rAMIntDataAccess2.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      boolean boolean0 = true;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create((-1L));
      assertNotNull(rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertTrue(rAMDataAccess1.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals("", rAMDataAccess1.getName());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      RAMDataAccess rAMDataAccess2 = rAMDataAccess1.store(false);
      assertNotNull(rAMDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals("", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertFalse(rAMDataAccess2.isStoring());
      assertEquals(1, rAMDataAccess2.getSegments());
      assertEquals(1048576L, rAMDataAccess2.getCapacity());
      assertEquals("", rAMDataAccess2.getName());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      // Undeclared exception!
      rAMDataAccess2.copyTo(rAMIntDataAccess1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(true);
      assertNotNull(rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals("", rAMDataAccess1.getName());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      boolean boolean0 = rAMDataAccess1.checkBeforeRename("{eA }n\"jtcBY");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals("", rAMDataAccess1.getName());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertTrue(boolean0);
      
      RAMDataAccess rAMDataAccess2 = rAMDataAccess1.create(3368L);
      assertNotNull(rAMDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(1, rAMDataAccess2.getSegments());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals(1048576L, rAMDataAccess2.getCapacity());
      assertTrue(rAMDataAccess2.isStoring());
      assertEquals("", rAMDataAccess2.getName());
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      
      boolean boolean1 = rAMDataAccess2.ensureCapacity(3368L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(1, rAMDataAccess2.getSegments());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals(1048576L, rAMDataAccess2.getCapacity());
      assertTrue(rAMDataAccess2.isStoring());
      assertEquals("", rAMDataAccess2.getName());
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      RandomAccessFile randomAccessFile0 = null;
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1112);
      intArray0[1] = 3495;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      intArray0[2] = (-1239);
      intArray0[3] = 1052;
      intArray0[4] = 4;
      rAMIntDataAccess0.header = intArray0;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertNull(rAMIntDataAccess0.getName());
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.readHeader((RandomAccessFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("y_)sy20Kx/", "y_)sy20Kx/", byteOrder0, true);
      assertNotNull(mMapDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      
      boolean boolean0 = mMapDataAccess0.loadExisting();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(boolean0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-1072L));
      assertNotNull(mMapDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals("y_)sy20Kx/", mMapDataAccess1.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      mMapDataAccess1.rename("file newName already exists!");
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("file newName already exists!", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(0, mMapDataAccess1.getSegments());
      assertEquals("file newName already exists!", mMapDataAccess1.getName());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      int int0 = mMapDataAccess1.getSegments();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("file newName already exists!", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(0, mMapDataAccess1.getSegments());
      assertEquals("file newName already exists!", mMapDataAccess1.getName());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      assertEquals(0, int0);
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(false);
      assertNotNull(rAMDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals("", rAMDataAccess1.getName());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      rAMDataAccess1.rename("Gv`wr");
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals("Gv`wr", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals("Gv`wr", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.getShort((-2074L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess(" pWMO>I70k3};,Hcbs-", (String) null, true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(" pWMO>I70k3};,Hcbs-", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      RAMDataAccess rAMDataAccess1 = (RAMDataAccess)rAMDataAccess0.setSegmentSize((-1209));
      assertNotNull(rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(" pWMO>I70k3};,Hcbs-", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals(" pWMO>I70k3};,Hcbs-", rAMDataAccess1.getName());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.flush();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't store bytes to null pWMO>I70k3};,Hcbs-
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("y_)sy20Kx/", "y_)sy20Kx/", byteOrder0, true);
      assertNotNull(mMapDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      
      boolean boolean0 = mMapDataAccess0.loadExisting();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(boolean0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertNotNull(mMapDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals("y_)sy20Kx/", mMapDataAccess1.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      mMapDataAccess1.rename("file newName already exists!");
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("file newName already exists!", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals("file newName already exists!", mMapDataAccess1.getName());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      int int0 = mMapDataAccess1.getSegments();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("file newName already exists!", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals("file newName already exists!", mMapDataAccess1.getName());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      assertEquals(0, int0);
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(true);
      assertNotNull(rAMDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals("", rAMDataAccess1.getName());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isClosed());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMDataAccess1.rename("Gv`wr");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Couldn't rename this RAM_STORE object!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(0L);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.setStore(true);
      assertNotNull(rAMIntDataAccess2);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      boolean boolean0 = rAMIntDataAccess2.isIntBased();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charArray0.length);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.checkBeforeRename((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newName mustn't be empty!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1707;
      CharBuffer charBuffer0 = CharBuffer.allocate(1707);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1707, charBuffer0.remaining());
      assertEquals(1707, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(1707, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1707, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1707, charBuffer0.remaining());
      assertEquals(1707, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(1707, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1707, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1707, charBuffer0.remaining());
      assertEquals(1707, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(1707, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1707, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isClosed());
      
      char char0 = charBuffer0.get();
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1707, charBuffer0.capacity());
      assertEquals(1706, charBuffer0.remaining());
      assertEquals(1, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1706, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1707, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals('\u0000', char0);
      
      rAMDataAccess0.close();
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1707, charBuffer0.capacity());
      assertEquals(1706, charBuffer0.remaining());
      assertEquals(1, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1706, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1707, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isClosed());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertSame(byteOrder0, byteOrder1);
      
      boolean boolean0 = rAMDataAccess0.isClosed();
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1707, charBuffer0.capacity());
      assertEquals(1706, charBuffer0.remaining());
      assertEquals(1, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1706, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1707, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isClosed());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertSame(byteOrder0, byteOrder1);
      assertTrue(boolean0);
      
      String string0 = "Couldn't store integers to ";
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      
      RAMIntDataAccess rAMIntDataAccess0 = null;
      try {
        rAMIntDataAccess0 = new RAMIntDataAccess("Couldn't store integers to ", "w\"rEi/%?S", true, byteOrder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "%vxpe");
      assertNotNull(charBuffer0);
      assertEquals("%vxpe", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertEquals("%vxpe", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("%vxpe", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("%vxpe", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("%vxpe", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(false);
      assertNotNull(rAMDataAccess1);
      assertEquals("%vxpe", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("%vxpe", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertEquals("%vxpe", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      RAMDataAccess rAMDataAccess2 = rAMDataAccess1.create(0L);
      assertNotNull(rAMDataAccess2);
      assertEquals("%vxpe", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals("%vxpe", rAMDataAccess0.getName());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals("%vxpe", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals(1, rAMDataAccess2.getSegments());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertFalse(rAMDataAccess2.isStoring());
      assertEquals(1048576L, rAMDataAccess2.getCapacity());
      assertEquals("%vxpe", rAMDataAccess2.getName());
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMDataAccess2.writeHeader((RandomAccessFile) null, 0L, 555);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "GH";
      boolean boolean0 = true;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("GH", "", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("GH", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("GH", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("GH", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      rAMIntDataAccess1.segmentSizeInBytes = 0;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegmentSize());
      assertEquals("GH", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess1.getSegmentSize());
      assertEquals("GH", rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      
      long long0 = (-1142L);
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.create((-1142L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      long long0 = rAMDataAccess0.getCapacity();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertNotSame(byteOrder0, byteOrder1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals(0L, long0);
      
      int int0 = rAMDataAccess0.getSegmentSize();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertNotSame(byteOrder0, byteOrder1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals(1048576, int0);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertNotSame(byteOrder2, byteOrder0);
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      
      RAMIntDataAccess rAMIntDataAccess0 = null;
      try {
        rAMIntDataAccess0 = new RAMIntDataAccess("", "org.apache.commons.io.filefilter.EmptyFileFilter", false, byteOrder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = false;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", (String) null, false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      rAMDataAccess0.indexDivisor = 1928;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMDataAccess rAMDataAccess1 = (RAMDataAccess)rAMDataAccess0.setSegmentSize(3522);
      assertNotNull(rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2048, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(2048, rAMDataAccess1.getSegmentSize());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      RAMDataAccess rAMDataAccess2 = (RAMDataAccess)rAMDataAccess0.copyTo(rAMDataAccess1);
      assertNotNull(rAMDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2048, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals("", rAMDataAccess1.getName());
      assertEquals(2048, rAMDataAccess1.getSegmentSize());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals(0, rAMDataAccess2.getSegments());
      assertEquals(0L, rAMDataAccess2.getCapacity());
      assertEquals("", rAMDataAccess2.getName());
      assertEquals(2048, rAMDataAccess2.getSegmentSize());
      assertFalse(rAMDataAccess2.isStoring());
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      
      boolean boolean1 = rAMDataAccess0.isIntBased();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(2048, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RAMIntDataAccess rAMIntDataAccess0 = null;
      try {
        rAMIntDataAccess0 = new RAMIntDataAccess("", " object!", true, byteOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "?0";
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("?0", "", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("?0", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      
      boolean boolean0 = rAMIntDataAccess0.isClosed();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("?0", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertSame(byteOrder0, byteOrder1);
      assertFalse(boolean0);
      
      String string1 = rAMIntDataAccess0.getName();
      assertNotNull(string1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("?0", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertSame(byteOrder0, byteOrder1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("?0", string1);
      
      RAMDataAccess rAMDataAccess0 = null;
      try {
        rAMDataAccess0 = new RAMDataAccess("?0", "?0", false, byteOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = true;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("/", (String) null, true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("/", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      String string0 = rAMDataAccess0.getFullName();
      assertNotNull(string0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("/", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertNotSame(byteOrder0, byteOrder1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals("null/", string0);
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(0L);
      assertNotNull(rAMDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals("/", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isStoring());
      assertTrue(rAMDataAccess1.isStoring());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals("/", rAMDataAccess1.getName());
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.create(0L);
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // already created
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = 'X';
      charArray0[2] = 'N';
      charArray0[3] = 'X';
      charArray0[4] = ']';
      charArray0[5] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'a', 'X', 'N', 'X', ']', 's'}, charArray0);
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("aXNX]s", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charArray0.length);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertArrayEquals(new char[] {'a', 'X', 'N', 'X', ']', 's'}, charArray0);
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("aXNX]s", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(6, charArray0.length);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess((String) null, (String) null, byteOrder0, true);
      assertNotNull(mMapDataAccess0);
      assertArrayEquals(new char[] {'a', 'X', 'N', 'X', ']', 's'}, charArray0);
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("aXNX]s", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertNull(mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(6, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertArrayEquals(new char[] {'a', 'X', 'N', 'X', ']', 's'}, charArray0);
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("aXNX]s", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(6, charArray0.length);
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create((-9223372036854775808L));
      assertNotNull(rAMIntDataAccess1);
      assertArrayEquals(new char[] {'a', 'X', 'N', 'X', ']', 's'}, charArray0);
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("aXNX]s", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertNull(rAMIntDataAccess1.getName());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertEquals(6, charArray0.length);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.copyTo(mMapDataAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      long long0 = 160L;
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(160L);
      assertNotNull(rAMIntDataAccess2);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 2232;
      intArray0[2] = 8;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      rAMIntDataAccess1.header = intArray0;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      
      boolean boolean0 = rAMIntDataAccess2.ensureCapacity(160L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals("", rAMIntDataAccess2.getName());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertFalse(boolean0);
      
      rAMIntDataAccess1.close();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertTrue(rAMIntDataAccess0.isClosed());
      assertEquals("", rAMIntDataAccess0.getName());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      
      MMapDataAccess mMapDataAccess0 = null;
      try {
        mMapDataAccess0 = new MMapDataAccess((String) null, "$IJe@I\"|~6(,", byteOrder0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "h6d]/)l";
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("h6d]/)l", "", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("h6d]/)l", rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      rAMIntDataAccess1.rename("h6d]/)l");
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("h6d]/)l", rAMIntDataAccess1.getName());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create(65535L);
      assertNotNull(rAMIntDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertEquals("h6d]/)l", rAMIntDataAccess0.getName());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("h6d]/)l", rAMIntDataAccess1.getName());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertEquals("h6d]/)l", rAMIntDataAccess2.getName());
      assertEquals(1048576L, rAMIntDataAccess2.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1048576, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      
      int int0 = (-2820);
      // Undeclared exception!
      try { 
        rAMIntDataAccess2.getHeader((-2820));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -705
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "/");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("/", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("/", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("/", "/", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("/", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("/", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("/", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("/", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertEquals("/", rAMIntDataAccess1.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.rename("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newName mustn't be empty!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      boolean boolean0 = rAMDataAccess0.isStoring();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertFalse(boolean0);
      
      boolean boolean1 = rAMDataAccess0.isClosed();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = rAMDataAccess0.getName();
      assertNotNull(string0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertEquals("", string0);
      
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder2);
      assertEquals("BIG_ENDIAN", byteOrder2.toString());
      assertNotSame(byteOrder2, byteOrder1);
      assertNotSame(byteOrder2, byteOrder0);
      assertFalse(byteOrder2.equals((Object)byteOrder1));
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder2, false);
      assertNotNull(mMapDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder2.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(byteOrder2.equals((Object)byteOrder1));
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      
      boolean boolean2 = mMapDataAccess0.loadExisting();
      assertEquals("BIG_ENDIAN", byteOrder2.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("", mMapDataAccess0.getName());
      assertNotSame(byteOrder2, byteOrder1);
      assertNotSame(byteOrder2, byteOrder0);
      assertFalse(byteOrder2.equals((Object)byteOrder1));
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("86[&?q", "", false, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals("86[&?q", rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(byteOrder0.equals((Object)byteOrder2));
      
      long long0 = 908L;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        mMapDataAccess0.ensureCapacity(3720L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals("", rAMIntDataAccess1.getName());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertSame(byteOrder0, byteOrder1);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      int int0 = (-1598);
      // Undeclared exception!
      try { 
        rAMIntDataAccess1.setHeader((-1598), (-1598));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -400
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess((String) null, (String) null, byteOrder0, true);
      assertNotNull(mMapDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertNull(mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-1L));
      assertNotNull(mMapDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertNull(mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertNull(mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertTrue(mMapDataAccess1.isStoring());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      mMapDataAccess1.flush();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertNull(mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertNull(mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertTrue(mMapDataAccess1.isStoring());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.ensureCapacity((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new capacity has to be strictly positive
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertNotNull(mMapDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      
      String string1 = mMapDataAccess0.toString();
      assertNotNull(string1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertNotSame(byteOrder0, byteOrder1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      long long0 = mMapDataAccess0.getCapacity();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertNotSame(byteOrder0, byteOrder1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertEquals(0L, long0);
      
      boolean boolean0 = MMapDataAccess.jreIsMinimumJava9();
      assertFalse(boolean0);
      
      int int0 = 0;
      mMapDataAccess0.setHeader(0, 1048576);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertNotSame(byteOrder0, byteOrder1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder1);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create(1048576);
      assertNotNull(rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals("", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertNotSame(byteOrder1, byteOrder0);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      RAMDataAccess rAMDataAccess2 = rAMDataAccess1.store(false);
      assertNotNull(rAMDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals("", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(1, rAMDataAccess2.getSegments());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertEquals(1048576L, rAMDataAccess2.getCapacity());
      assertFalse(rAMDataAccess2.isStoring());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals("", rAMDataAccess2.getName());
      assertNotSame(byteOrder1, byteOrder0);
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      rAMDataAccess2.flush();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals("", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(1, rAMDataAccess2.getSegments());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertEquals(1048576L, rAMDataAccess2.getCapacity());
      assertFalse(rAMDataAccess2.isStoring());
      assertFalse(rAMDataAccess2.isClosed());
      assertEquals("", rAMDataAccess2.getName());
      assertNotSame(byteOrder1, byteOrder0);
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder1);
      assertNotSame(byteOrder2, byteOrder0);
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("T", "", false, byteOrder2);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("T", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      
      long long1 = rAMIntDataAccess0.getCapacity();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals("T", rAMIntDataAccess0.getName());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertSame(byteOrder2, byteOrder1);
      assertNotSame(byteOrder2, byteOrder0);
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      // Undeclared exception!
      try { 
        MockURI.resolve((URI) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("newName mustn't be empty!", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals("newName mustn't be empty!", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.getHeader((-991));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -248
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess(" object!/", " object!/", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(" object!/", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      String string0 = rAMDataAccess0.toString();
      assertNotNull(string0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(" object!/", rAMDataAccess0.getName());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(" object!/ object!/", string0);
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.getInt(0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertNotNull(byteOrder0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("/", "/", false, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("/", rAMIntDataAccess0.getName());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.create(4);
      assertNotNull(rAMIntDataAccess1);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals("/", rAMIntDataAccess0.getName());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertEquals("/", rAMIntDataAccess1.getName());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertFalse(rAMIntDataAccess1.isStoring());
      assertEquals(1048576L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.copyTo(rAMIntDataAccess1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("s=J{B", "", byteOrder0, false);
      assertNotNull(mMapDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("s=J{B", mMapDataAccess0.getName());
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.create(1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException: File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("4iO&^v[Dl", "", false, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals("4iO&^v[Dl", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(false);
      assertNotNull(rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals("4iO&^v[Dl", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals("4iO&^v[Dl", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      RAMDataAccess rAMDataAccess2 = rAMDataAccess1.create(3669L);
      assertNotNull(rAMDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals("4iO&^v[Dl", rAMDataAccess0.getName());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals("4iO&^v[Dl", rAMDataAccess1.getName());
      assertFalse(rAMDataAccess1.isClosed());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertEquals(1, rAMDataAccess2.getSegments());
      assertEquals("4iO&^v[Dl", rAMDataAccess2.getName());
      assertEquals(1048576L, rAMDataAccess2.getCapacity());
      assertFalse(rAMDataAccess2.isClosed());
      assertFalse(rAMDataAccess2.isStoring());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
      
      rAMDataAccess2.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertFalse(rAMDataAccess0.isStoring());
      assertEquals("4iO&^v[Dl", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertTrue(rAMDataAccess0.isClosed());
      assertEquals(0L, rAMDataAccess1.getCapacity());
      assertFalse(rAMDataAccess1.isStoring());
      assertEquals("4iO&^v[Dl", rAMDataAccess1.getName());
      assertEquals(0, rAMDataAccess1.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertTrue(rAMDataAccess1.isClosed());
      assertEquals(1048576, rAMDataAccess2.getSegmentSize());
      assertTrue(rAMDataAccess2.isClosed());
      assertEquals("4iO&^v[Dl", rAMDataAccess2.getName());
      assertEquals(0L, rAMDataAccess2.getCapacity());
      assertFalse(rAMDataAccess2.isStoring());
      assertEquals(0, rAMDataAccess2.getSegments());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess0, rAMDataAccess2);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      assertSame(rAMDataAccess1, rAMDataAccess2);
      assertSame(rAMDataAccess2, rAMDataAccess0);
      assertSame(rAMDataAccess2, rAMDataAccess1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      
      boolean boolean0 = rAMDataAccess0.ensureCapacity(183L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      MMapDataAccess mMapDataAccess0 = null;
      try {
        mMapDataAccess0 = new MMapDataAccess("0!3}5@4A", "0!3}5@4A", byteOrder0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      boolean boolean0 = true;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("y_)sy20Kx/", "y_)sy20Kx/", byteOrder0, true);
      assertNotNull(mMapDataAccess0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertNotNull(mMapDataAccess1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals("y_)sy20Kx/", mMapDataAccess1.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      mMapDataAccess1.flush();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("y_)sy20Kx/", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals("y_)sy20Kx/", mMapDataAccess1.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.rename("file newName already exists!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new capacity has to be strictly positive
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = null;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, "", true, byteOrder0);
      assertNotNull(rAMIntDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      assertNotNull(rAMIntDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertEquals(1048576, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      
      rAMIntDataAccess0.segmentSizeInBytes = 1847;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1847, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      
      int int0 = rAMIntDataAccess1.getSegments();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1847, rAMIntDataAccess0.getSegmentSize());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals(1847, rAMIntDataAccess1.getSegmentSize());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(0, rAMIntDataAccess1.getSegments());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(0L, rAMIntDataAccess1.getCapacity());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertEquals(0, int0);
      
      long long0 = (-1L);
      RAMIntDataAccess rAMIntDataAccess2 = rAMIntDataAccess1.create((-1L));
      assertNotNull(rAMIntDataAccess2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1024L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1024L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1024, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1024L, rAMIntDataAccess2.getCapacity());
      assertNull(rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      rAMIntDataAccess2.setHeader(11, 11);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertEquals(1, rAMIntDataAccess0.getSegments());
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals(1024, rAMIntDataAccess0.getSegmentSize());
      assertNull(rAMIntDataAccess0.getName());
      assertEquals(1024L, rAMIntDataAccess0.getCapacity());
      assertFalse(rAMIntDataAccess1.isClosed());
      assertEquals(1, rAMIntDataAccess1.getSegments());
      assertNull(rAMIntDataAccess1.getName());
      assertEquals(1024, rAMIntDataAccess1.getSegmentSize());
      assertTrue(rAMIntDataAccess1.isStoring());
      assertEquals(1024L, rAMIntDataAccess1.getCapacity());
      assertFalse(rAMIntDataAccess2.isClosed());
      assertTrue(rAMIntDataAccess2.isStoring());
      assertEquals(1024, rAMIntDataAccess2.getSegmentSize());
      assertEquals(1, rAMIntDataAccess2.getSegments());
      assertEquals(1024L, rAMIntDataAccess2.getCapacity());
      assertNull(rAMIntDataAccess2.getName());
      assertSame(rAMIntDataAccess0, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess0, rAMIntDataAccess1);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess2);
      assertSame(rAMIntDataAccess1, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess0);
      assertSame(rAMIntDataAccess2, rAMIntDataAccess1);
      
      boolean boolean0 = true;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(0, rAMDataAccess0.getSegments());
      
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.create((-1L));
      assertNotNull(rAMDataAccess1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(1048576L, rAMDataAccess0.getCapacity());
      assertTrue(rAMDataAccess0.isStoring());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1, rAMDataAccess0.getSegments());
      assertEquals(1048576, rAMDataAccess1.getSegmentSize());
      assertEquals(1048576L, rAMDataAccess1.getCapacity());
      assertEquals(1, rAMDataAccess1.getSegments());
      assertFalse(rAMDataAccess1.isClosed());
      assertTrue(rAMDataAccess1.isStoring());
      assertEquals("", rAMDataAccess1.getName());
      assertSame(rAMDataAccess0, rAMDataAccess1);
      assertSame(rAMDataAccess1, rAMDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      // Undeclared exception!
      rAMDataAccess0.copyTo(rAMIntDataAccess1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("QV5j7i0|;4~DRSy1f/", "QV5j7i0|;4~DRSy1f/", true, byteOrder0);
      assertNotNull(rAMDataAccess0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("QV5j7i0|;4~DRSy1f/", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      String string0 = rAMDataAccess0.toString();
      assertNotNull(string0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals("QV5j7i0|;4~DRSy1f/", rAMDataAccess0.getName());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals("QV5j7i0|;4~DRSy1f/QV5j7i0|;4~DRSy1f/", string0);
      
      rAMDataAccess0.name = "RlW5z{D[X?UT3[!PU";
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertTrue(rAMDataAccess0.isStoring());
      assertEquals("RlW5z{D[X?UT3[!PU", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      
      // Undeclared exception!
      try { 
        rAMDataAccess0.getByte((-1388L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1388
         //
         verifyException("com.graphhopper.storage.RAMDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("-Z6a:X~=/", "-Z6a:X~=/", true, byteOrder0);
      rAMDataAccess0.create((-827L));
      // Undeclared exception!
      try { 
        rAMDataAccess0.rename(" IVject!/");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // File does not exist!? -Z6a:X~=/-Z6a:X~=/ Make sure that you flushed before renaming. Otherwise it could make problems for memory mapped DataAccess objects
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "list should consist of lat,lon pairs!");
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("list should consist of lat,lon pairs!", "C^k8WFQ^QMO/", true, byteOrder0);
      rAMIntDataAccess0.getName();
      MockFile mockFile0 = new MockFile("free/", "list should consist of lat,lon pairs!");
      MockFile mockFile1 = new MockFile("list should consist of lat,lon pairs!", "C^k8WFQ^QMO/");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "free/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"free/\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "";
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", true, byteOrder0);
      // Undeclared exception!
      try { 
        rAMDataAccess0.checkBeforeRename("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newName mustn't be empty!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("h6d]/)l", "", true, byteOrder0);
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(true);
      rAMIntDataAccess1.setSegmentSize(0);
      rAMIntDataAccess1.rename("h6d]/)l");
      rAMIntDataAccess1.create(65535L);
      RAMDataAccess rAMDataAccess0 = null;
      try {
        rAMDataAccess0 = new RAMDataAccess("h6d]/)l", "h6d]/)l", false, byteOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = true;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", true, byteOrder0);
      ByteOrder.nativeOrder();
      long long0 = 65535L;
      // Undeclared exception!
      try { 
        rAMIntDataAccess0.rename("h6d]/)l");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Couldn't rename this RAM_INT_STORE object!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("y_)sy20Kx/", "y_)sy20Kx/", byteOrder0, true);
      mMapDataAccess0.loadExisting();
      mMapDataAccess0.create(0L);
      int int0 = AbstractDataAccess.HEADER_OFFSET;
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "y_)sy20Kx/", true, byteOrder0);
      RAMDataAccess rAMDataAccess1 = rAMDataAccess0.store(true);
      // Undeclared exception!
      try { 
        rAMDataAccess1.rename("y_)sy20Kx/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file newName already exists!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess((String) null, (String) null, false, byteOrder0);
      RAMIntDataAccess rAMIntDataAccess1 = rAMIntDataAccess0.setStore(false);
      rAMIntDataAccess0.segmentSizeInBytes = 1847;
      rAMIntDataAccess1.create(1847);
      ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess((String) null, (String) null, false, byteOrder0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("GH");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      rAMDataAccess0.create(1847);
      ByteOrder.nativeOrder();
      RAMDataAccess rAMDataAccess1 = (RAMDataAccess)rAMIntDataAccess1.copyTo(rAMDataAccess0);
      rAMDataAccess1.checkBeforeRename("GH");
      rAMDataAccess1.getCapacity();
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess((String) null, (String) null, byteOrder0, false);
      ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        mMapDataAccess0.create(1101L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException: File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }
}
