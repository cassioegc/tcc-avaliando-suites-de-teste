/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:10:56 GMT 2021
 */

package com.graphhopper.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.storage.DAType;
import com.graphhopper.storage.DataAccess;
import com.graphhopper.storage.MMapDataAccess;
import com.graphhopper.storage.RAMDataAccess;
import com.graphhopper.storage.RAMIntDataAccess;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MMapDataAccess_ESTest extends MMapDataAccess_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(1048576L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals("", mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.getByte((-104L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-679L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals("", mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.setByte((-1174L), (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("null");
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess((String) null, "", byteOrder0, false);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNull(mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-4711L));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNull(mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertNull(mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.getBytes((-4711L), byteArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-1L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.setBytes((-1174L), (byte[]) null, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-679L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("", mMapDataAccess1.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.getShort((-679L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.setShort((-1281L), (short) (-861));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(1048576L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      mMapDataAccess0.setShort(5477L, (short)526);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertSame(mMapDataAccess0, mMapDataAccess1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      int int0 = mMapDataAccess1.getInt((-9223372036854775808L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      assertEquals(235034368, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.setInt((-2530L), 3314);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-679L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      mMapDataAccess1.setByte(0L, (byte)0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("&<umr&4w", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("&<umr&4w", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertNotNull(mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.create((-1604L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.FileNotFoundException: File does not exist, and RandomAccessFile is not open in write mode
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess((String) null, (String) null, byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertNull(mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(40L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertNull(mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertNull(mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      mMapDataAccess1.flush();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertNull(mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertNull(mMapDataAccess1.getName());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-679L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      short short0 = mMapDataAccess1.getShort(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      assertEquals((short)22273, short0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertNotNull(mMapDataAccess0);
      
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertNotNull(byteOrder2);
      assertSame(byteOrder2, byteOrder1);
      assertSame(byteOrder2, byteOrder0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-679L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals("", mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertNotNull(byteOrder3);
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder2);
      assertSame(byteOrder3, byteOrder0);
      
      short short0 = mMapDataAccess1.getShort(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals("", mMapDataAccess1.getName());
      assertSame(byteOrder0, byteOrder3);
      assertSame(byteOrder0, byteOrder1);
      assertSame(byteOrder0, byteOrder2);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      assertEquals((short)22273, short0);
      
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess("", "", false, byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertFalse(rAMIntDataAccess0.isClosed());
      assertFalse(rAMIntDataAccess0.isStoring());
      assertEquals(0L, rAMIntDataAccess0.getCapacity());
      assertEquals("", rAMIntDataAccess0.getName());
      assertEquals(1048576, rAMIntDataAccess0.getSegmentSize());
      assertEquals(0, rAMIntDataAccess0.getSegments());
      assertNotNull(rAMIntDataAccess0);
      
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        mMapDataAccess1.setByte(0L, (byte)0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-679L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      int int0 = mMapDataAccess1.getSegments();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess(" of ", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals(" of ", mMapDataAccess1.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      int int0 = mMapDataAccess0.getInt(111L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("|3t!<?QLQ4~bEMl/", "|3t!<?QLQ4~bEMl/", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(24);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      int int0 = mMapDataAccess1.getInt(24);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess1.getName());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals("", mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      byte byte0 = mMapDataAccess0.getByte(1192);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals("", mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      byte byte0 = mMapDataAccess0.getByte(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("", mMapDataAccess0.getName());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals("", mMapDataAccess1.getName());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      int[] intArray0 = new int[2];
      byte byte0 = mMapDataAccess0.getByte(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertEquals((byte)1, byte0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/cassioegc/tcc/graphhopper.reader-osm/core");
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      intArray0[0] = (-697);
      intArray0[1] = 3314;
      mMapDataAccess1.header = intArray0;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals("", mMapDataAccess1.getName());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      
      MMapDataAccess mMapDataAccess2 = (MMapDataAccess)mMapDataAccess0.setSegmentSize(115);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(128, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess2.isStoring());
      assertEquals(128, mMapDataAccess2.getSegmentSize());
      assertFalse(mMapDataAccess2.isClosed());
      assertEquals(1, mMapDataAccess2.getSegments());
      assertEquals("", mMapDataAccess2.getName());
      assertNotNull(mMapDataAccess2);
      assertSame(mMapDataAccess0, mMapDataAccess2);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess2, mMapDataAccess0);
      assertSame(mMapDataAccess2, mMapDataAccess1);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.copyTo(mMapDataAccess0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess1.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      boolean boolean0 = mMapDataAccess0.ensureCapacity(1192);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("1", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("1", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      mMapDataAccess0.close();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("1", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isClosed());
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("1", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isClosed());
      assertEquals("1", mMapDataAccess1.getName());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1131);
      assertEquals(1131, charBuffer0.length());
      assertEquals(1131, charBuffer0.remaining());
      assertEquals(1131, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(1131, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals(1131, charBuffer0.length());
      assertEquals(1131, charBuffer0.remaining());
      assertEquals(1131, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(1131, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("aV{", "", byteOrder0, false);
      assertEquals(1131, charBuffer0.length());
      assertEquals(1131, charBuffer0.remaining());
      assertEquals(1131, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(1131, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("aV{", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      mMapDataAccess0.close();
      assertEquals(1131, charBuffer0.length());
      assertEquals(1131, charBuffer0.remaining());
      assertEquals(1131, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(1131, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("aV{", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isClosed());
      
      MMapDataAccess mMapDataAccess1 = (MMapDataAccess)mMapDataAccess0.copyTo(mMapDataAccess0);
      assertEquals(1131, charBuffer0.length());
      assertEquals(1131, charBuffer0.remaining());
      assertEquals(1131, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(1131, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("aV{", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isClosed());
      assertEquals("aV{", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(0, mMapDataAccess1.getSegments());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("", mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.setShort(0L, (short) (-669));
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-679L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals("", mMapDataAccess1.getName());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertFalse(mMapDataAccess1.isClosed());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.setInt(1667L, (-1047258));
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-1552L));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertFalse(mMapDataAccess1.isClosed());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals("", mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        mMapDataAccess1.setBytes(2065L, byteArray0, (-1505));
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-679L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.setBytes(2467L, (byte[]) null, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("1", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("1", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("1", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("1", mMapDataAccess1.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.rename("Q-kE3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't close resource
         //
         verifyException("com.graphhopper.util.Helper", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(1131);
      assertEquals(1131, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1131, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1131, charBuffer0.capacity());
      assertEquals(1131, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals(1131, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1131, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1131, charBuffer0.capacity());
      assertEquals(1131, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("aV{", "", byteOrder0, false);
      assertEquals(1131, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1131, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1131, charBuffer0.capacity());
      assertEquals(1131, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("aV{", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.rename("invokeCleaner");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // File does not exist!? aV{ Make sure that you flushed before renaming. Otherwise it could make problems for memory mapped DataAccess objects
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.rename("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newName mustn't be empty!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("com.graphhopper.storage.DAType", (String) null, byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("com.graphhopper.storage.DAType", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertNotNull(mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.getInt((-98L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("UNSAFE option is no longer supported, see #1620", "", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("UNSAFE option is no longer supported, see #1620", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("UNSAFE option is no longer supported, see #1620", mMapDataAccess0.getName());
      assertEquals("UNSAFE option is no longer supported, see #1620", mMapDataAccess1.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.getBytes(0L, (byte[]) null, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertNotNull(mMapDataAccess0);
      
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        mMapDataAccess0.getBytes(0, byteArray0, (byte)61);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        mMapDataAccess1.getBytes(0L, byteArray0, (byte) (-89));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("|3!<?QLQ4~bEMl/", "|3!<?QLQ4~bEMl/", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("|3!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("|3!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals("|3!<?QLQ4~bEMl/", mMapDataAccess1.getName());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      mMapDataAccess1.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("|3!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("|3!<?QLQ4~bEMl/", mMapDataAccess1.getName());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isClosed());
      assertEquals(0, mMapDataAccess1.getSegments());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.ensureCapacity(389L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't map buffer 0 of 1 with 1048576 for |3!<?QLQ4~bEMl/ at position 100 for 389 bytes with offset 100, new fileLength:1048676, totalMB:0, usedMB:0
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("AfM#^UC0,R),_p[#", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("AfM#^UC0,R),_p[#", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.ensureCapacity(924L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("1", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("1", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertNotNull(mMapDataAccess0);
      
      mMapDataAccess0.segmentSizeInBytes = (-783);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("1", mMapDataAccess0.getName());
      assertEquals((-783), mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.create(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charArray0.length);
      assertNotNull(charBuffer0);
      
      ByteOrder byteOrder0 = charBuffer0.order();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(8, charArray0.length);
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(8, charArray0.length);
      assertNotNull(mMapDataAccess0);
      
      mMapDataAccess0.segmentSizeInBytes = 0;
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(0, mMapDataAccess0.getSegmentSize());
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.create((-3214L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-679L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals("", mMapDataAccess1.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.copyTo(mMapDataAccess0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.DirectByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("aKzxY", (String) null, byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("aKzxY", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertNotNull(mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.copyTo((DataAccess) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-683L));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      RAMDataAccess rAMDataAccess0 = new RAMDataAccess("", "", false, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(rAMDataAccess0.isClosed());
      assertEquals(1048576, rAMDataAccess0.getSegmentSize());
      assertEquals("", rAMDataAccess0.getName());
      assertEquals(0L, rAMDataAccess0.getCapacity());
      assertEquals(0, rAMDataAccess0.getSegments());
      assertFalse(rAMDataAccess0.isStoring());
      assertNotNull(rAMDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.copyTo(rAMDataAccess0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("|3t!<?QLQ4~bEMl/", "|3t!<?QLQ4~bEMl/", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't close resource
         //
         verifyException("com.graphhopper.util.Helper", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        MMapDataAccess.cleanMappedByteBuffer((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.MMapDataAccess$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("iasEM[8rE*5 ?_DUk4k");
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(19, byteBuffer0.limit());
      assertEquals(20, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=19 cap=20]", byteBuffer0.toString());
      assertEquals(19, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertNotNull(byteBuffer0);
      
      // Undeclared exception!
      try { 
        MMapDataAccess.cleanMappedByteBuffer(byteBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MMapDataAccess mMapDataAccess0 = null;
      try {
        mMapDataAccess0 = new MMapDataAccess("9;:ho%%G1y6N>Uz;4)", "", (ByteOrder) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.BitUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = null;
      try {
        mMapDataAccess0 = new MMapDataAccess("Ui~mi1v)7$3", "Ui~mi1v)7$3", byteOrder0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Create DataAccess object via its corresponding Directory!
         //
         verifyException("com.graphhopper.storage.AbstractDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("|3t!<?QLQ4~bEMl/", "|3t!<?QLQ4~bEMl/", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(24);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertFalse(mMapDataAccess1.isClosed());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      long long0 = mMapDataAccess0.getCapacity();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertEquals(1048576L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("|3t!<?QLQ4~bEMl/", "|3t!<?QLQ4~bEMl/", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      long long0 = mMapDataAccess0.getCapacity();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(1667L);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      byte[] byteArray0 = new byte[4];
      mMapDataAccess1.getBytes(1667L, byteArray0, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(4, byteArray0.length);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      boolean boolean0 = mMapDataAccess0.loadExisting();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals("", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = MMapDataAccess.jreIsMinimumJava9();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("1", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("1", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertNotNull(mMapDataAccess0);
      
      mMapDataAccess0.rename("1");
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals("1", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("<m[/n2Q6?U", "", byteOrder0, false);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("<m[/n2Q6?U", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      byte[] byteArray0 = new byte[6];
      mMapDataAccess0.segmentSizeInBytes = 0;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(0, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals("<m[/n2Q6?U", mMapDataAccess0.getName());
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.getBytes(100L, byteArray0, (byte)31);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // the length has to be smaller or equal to the segment size: 31 vs. 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess((String) null, (String) null, byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertNull(mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertNull(mMapDataAccess0.getName());
      assertNull(mMapDataAccess1.getName());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertFalse(mMapDataAccess1.isClosed());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      byte[] byteArray0 = new byte[23];
      // Undeclared exception!
      try { 
        mMapDataAccess1.setBytes(735L, byteArray0, (-2147483625));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess(" of ", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(" of ", mMapDataAccess1.getName());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      byte[] byteArray0 = new byte[1];
      mMapDataAccess0.setBytes((short)343, byteArray0, 0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertEquals(1, byteArray0.length);
      assertSame(mMapDataAccess0, mMapDataAccess1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess((String) null, (String) null, byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertNull(mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      byte[] byteArray0 = new byte[23];
      // Undeclared exception!
      try { 
        mMapDataAccess0.setBytes(735L, byteArray0, Integer.MAX_VALUE);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // the length has to be smaller or equal to the segment size: 2147483647 vs. 1048576
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess(" of ", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        mMapDataAccess0.setBytes((short)343, byteArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 343, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess(" of ", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(" of ", mMapDataAccess1.getName());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      mMapDataAccess1.segmentSizeInBytes = (-1938278021);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals((-1938278021), mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(" of ", mMapDataAccess1.getName());
      assertEquals((-1938278021), mMapDataAccess1.getSegmentSize());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.getShort(1192L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess(" of ", "", byteOrder0, true);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(" of ", mMapDataAccess1.getName());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      short short0 = mMapDataAccess1.getShort(1192L);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(mMapDataAccess0.isStoring());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals(" of ", mMapDataAccess0.getName());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertTrue(mMapDataAccess1.isStoring());
      assertFalse(mMapDataAccess1.isClosed());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(" of ", mMapDataAccess1.getName());
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("?)lp0dN", "", byteOrder0, false);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("?)lp0dN", mMapDataAccess0.getName());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      assertNotNull(mMapDataAccess0);
      
      mMapDataAccess0.segmentSizeInBytes = (-1129);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("?)lp0dN", mMapDataAccess0.getName());
      assertEquals((-1129), mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertFalse(mMapDataAccess0.isClosed());
      assertTrue(mMapDataAccess0.isStoring());
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.getInt(4294967295L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Padding required. Currently an int cannot be distributed over two segments. 4294967295
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("", mMapDataAccess0.getName());
      assertNotNull(mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess0.getInt((-9223372036854775808L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("|3t!<?QLQ4~bEMl/", "|3t!<?QLQ4~bEMl/", byteOrder0, true);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(0, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertNotNull(mMapDataAccess0);
      
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(24);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess0.getName());
      assertEquals(1048576, mMapDataAccess0.getSegmentSize());
      assertEquals(1, mMapDataAccess0.getSegments());
      assertTrue(mMapDataAccess0.isStoring());
      assertFalse(mMapDataAccess0.isClosed());
      assertEquals("|3t!<?QLQ4~bEMl/", mMapDataAccess1.getName());
      assertTrue(mMapDataAccess1.isStoring());
      assertEquals(1, mMapDataAccess1.getSegments());
      assertEquals(1048576, mMapDataAccess1.getSegmentSize());
      assertFalse(mMapDataAccess1.isClosed());
      assertNotNull(mMapDataAccess1);
      assertSame(mMapDataAccess0, mMapDataAccess1);
      assertSame(mMapDataAccess1, mMapDataAccess0);
      
      // Undeclared exception!
      try { 
        mMapDataAccess1.setInt(1048575, 1048575);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Padding required. Currently an int cannot be distributed over two segments. 1048575
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      // Undeclared exception!
      try { 
        mMapDataAccess0.setInt((short)526, (short)526);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 526, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      mMapDataAccess0.create((-679L));
      // Undeclared exception!
      try { 
        mMapDataAccess0.flush();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess((String) null, (String) null, byteOrder0, true);
      mMapDataAccess0.close();
      // Undeclared exception!
      try { 
        mMapDataAccess0.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already closed
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("HeapByteBuffer", "|3t!<?QLQ4~bEMl/", byteOrder0, false);
      boolean boolean0 = mMapDataAccess0.loadExisting();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess(" of ", "", byteOrder0, true);
      mMapDataAccess0.close();
      // Undeclared exception!
      try { 
        mMapDataAccess0.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already closed
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess(" of ", "", byteOrder0, true);
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      // Undeclared exception!
      try { 
        mMapDataAccess1.loadExisting();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already initialized
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("1", "", byteOrder0, true);
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      mMapDataAccess0.rename("Q-kE3");
      // Undeclared exception!
      try { 
        mMapDataAccess1.setShort(0L, (short)343);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(1048576L);
      mMapDataAccess1.setInt((short)526, (short)526);
      assertEquals(1, mMapDataAccess0.getSegments());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      // Undeclared exception!
      try { 
        mMapDataAccess0.ensureCapacity((byte) (-19));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new capacity has to be strictly positive
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("\"%nz", "", byteOrder0, true);
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create((-558L));
      // Undeclared exception!
      try { 
        mMapDataAccess1.create((byte)96);
        fail("Expecting exception: IllegalThreadStateException");
      
      } catch(IllegalThreadStateException e) {
         //
         // already created
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("|3t!<?QLQ4~bEMl/", "|3t!<?QLQ4~bEMl/", byteOrder0, true);
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0);
      mMapDataAccess1.close();
      // Undeclared exception!
      try { 
        mMapDataAccess1.create(1082L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't map buffer 0 of 1 with 1048576 for |3t!<?QLQ4~bEMl/ at position 100 for 1082 bytes with offset 100, new fileLength:1048676, totalMB:0, usedMB:0
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      MMapDataAccess mMapDataAccess1 = mMapDataAccess0.create(0L);
      mMapDataAccess1.copyTo(mMapDataAccess0);
      assertEquals(1, mMapDataAccess0.getSegments());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      DAType dAType0 = mMapDataAccess0.getType();
      assertTrue(dAType0.isMMap());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("1", "", byteOrder0, true);
      int int0 = mMapDataAccess0.getSegments();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, false);
      // Undeclared exception!
      try { 
        mMapDataAccess0.setByte(0L, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      // Undeclared exception!
      try { 
        mMapDataAccess0.getByte(0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      MMapDataAccess.cleanMappedByteBuffer(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
  }
}
