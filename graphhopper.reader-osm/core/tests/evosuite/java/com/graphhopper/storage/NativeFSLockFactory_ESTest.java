/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 04:55:00 GMT 2021
 */

package com.graphhopper.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.storage.NativeFSLockFactory;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.channels.OverlappingFileLockException;
import java.nio.file.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NativeFSLockFactory_ESTest extends NativeFSLockFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn("T1t").when(file0).getAbsolutePath();
      doReturn(true).when(file0).isDirectory();
      boolean boolean0 = true;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lockDir has to be a directory: ";
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file0, "Cannot delete ", false);
      nativeFSLockFactory_NativeLock0.tryLock();
      stringArray0[1] = "lockDir has to be a directory: ";
      stringArray0[2] = "lockDir has to be a directory: ";
      stringArray0[3] = "lockDir has to be a directory: ";
      stringArray0[4] = "lockDir has to be a directory: ";
      // Undeclared exception!
      try { 
        NativeFSLockFactory.main(stringArray0);
        fail("Expecting exception: OverlappingFileLockException");
      
      } catch(OverlappingFileLockException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-9<j1Bga*QVa5}i");
      mockFile0.setExecutable(false, false);
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(mockFile0, "-9<j1Bga*QVa5}i", false);
      nativeFSLockFactory_NativeLock0.tryLock();
      nativeFSLockFactory_NativeLock0.tryLock();
      nativeFSLockFactory_NativeLock0.isLocked();
      nativeFSLockFactory_NativeLock0.release();
      nativeFSLockFactory_NativeLock0.isLocked();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true).when(file0).exists();
      doReturn("").when(file0).getAbsolutePath();
      doReturn(false, false, true).when(file0).isDirectory();
      doReturn("", "").when(file0).toString();
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file0, "", false);
      nativeFSLockFactory_NativeLock0.release();
      nativeFSLockFactory_NativeLock0.isLocked();
      nativeFSLockFactory_NativeLock0.toString();
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory();
      nativeFSLockFactory_NativeLock0.isLocked();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "/";
      stringArray0[3] = "";
      stringArray0[4] = " locks";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "/";
      stringArray0[8] = "";
      NativeFSLockFactory.main(stringArray0);
      nativeFSLockFactory_NativeLock0.isLocked();
      nativeFSLockFactory_NativeLock0.release();
      // Undeclared exception!
      try { 
        nativeFSLockFactory0.create(" locks", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating read locks
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("g> anrHC", "t}c~%Cqk:r1O+..");
      assertNotNull(mockFile0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Set lockDir before creating ");
      assertFalse(boolean0);
      
      File file0 = mockFile0.getAbsoluteFile();
      assertNotNull(file0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("t}c~%Cqk:r1O+..", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+..", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(file0.exists());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("t}c~%Cqk:r1O+..", file0.getName());
      assertFalse(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+..", file0.toString());
      assertFalse(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(file0.equals((Object)mockFile0));
      
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(mockFile0, "Set lockDir before creating ", true);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("t}c~%Cqk:r1O+..", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+..", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Set lockDir before creating ", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+../Set lockDir before creating ", nativeFSLockFactory_NativeLock0.toString());
      assertTrue(mockFile0.equals((Object)file0));
      
      nativeFSLockFactory_NativeLock0.release();
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("t}c~%Cqk:r1O+..", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+..", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Set lockDir before creating ", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+../Set lockDir before creating ", nativeFSLockFactory_NativeLock0.toString());
      assertNotSame(mockFile0, file0);
      assertTrue(mockFile0.equals((Object)file0));
      
      nativeFSLockFactory_NativeLock0.release();
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("t}c~%Cqk:r1O+..", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+..", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Set lockDir before creating ", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+../Set lockDir before creating ", nativeFSLockFactory_NativeLock0.toString());
      assertNotSame(mockFile0, file0);
      assertTrue(mockFile0.equals((Object)file0));
      
      boolean boolean1 = nativeFSLockFactory_NativeLock0.isLocked();
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("t}c~%Cqk:r1O+..", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+..", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Set lockDir before creating ", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+../Set lockDir before creating ", nativeFSLockFactory_NativeLock0.toString());
      assertNotSame(mockFile0, file0);
      assertFalse(boolean1);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(boolean1 == boolean0);
      
      Path path0 = mockFile0.toPath();
      assertNotNull(path0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertEquals("t}c~%Cqk:r1O+..", mockFile0.getName());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+..", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotSame(mockFile0, file0);
      assertTrue(mockFile0.equals((Object)file0));
      
      boolean boolean2 = nativeFSLockFactory_NativeLock0.tryLock();
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC", mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertEquals("t}c~%Cqk:r1O+..", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+..", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Set lockDir before creating ", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+../Set lockDir before creating ", nativeFSLockFactory_NativeLock0.toString());
      assertNotSame(mockFile0, file0);
      assertTrue(boolean2);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = mockFile0.setReadable(false);
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC", mockFile0.getParent());
      assertEquals("t}c~%Cqk:r1O+..", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+..", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNotSame(mockFile0, file0);
      assertTrue(boolean3);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      nativeFSLockFactory_NativeLock0.release();
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC", mockFile0.getParent());
      assertEquals("t}c~%Cqk:r1O+..", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+..", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Set lockDir before creating ", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+../Set lockDir before creating ", nativeFSLockFactory_NativeLock0.toString());
      assertNotSame(mockFile0, file0);
      assertTrue(mockFile0.equals((Object)file0));
      
      boolean boolean4 = nativeFSLockFactory_NativeLock0.isLocked();
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC", mockFile0.getParent());
      assertEquals("t}c~%Cqk:r1O+..", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+..", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("Set lockDir before creating ", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/g> anrHC/t}c~%Cqk:r1O+../Set lockDir before creating ", nativeFSLockFactory_NativeLock0.toString());
      assertNotSame(mockFile0, file0);
      assertFalse(boolean4);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory();
      assertNotNull(nativeFSLockFactory0);
      
      // Undeclared exception!
      try { 
        nativeFSLockFactory0.create("Set lockDir before creating ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating read locks
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn((String) null, (String) null).when(file0).getAbsolutePath();
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory(file0);
      assertNotNull(nativeFSLockFactory0);
      
      nativeFSLockFactory0.forceRemove("", false);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("").when(file1).getAbsolutePath();
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file1, "", false);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/", nativeFSLockFactory_NativeLock0.toString());
      
      Exception exception0 = nativeFSLockFactory_NativeLock0.getObtainFailedReason();
      assertNull(exception0);
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/", nativeFSLockFactory_NativeLock0.toString());
      
      Exception exception1 = nativeFSLockFactory_NativeLock0.getObtainFailedReason();
      assertNull(exception1);
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/", nativeFSLockFactory_NativeLock0.toString());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      NativeFSLockFactory.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn((String) null, (String) null).when(file0).getAbsolutePath();
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory(file0);
      assertNotNull(nativeFSLockFactory0);
      
      nativeFSLockFactory0.forceRemove("", false);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("").when(file1).getAbsolutePath();
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file1, "", false);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/", nativeFSLockFactory_NativeLock0.toString());
      
      Exception exception0 = nativeFSLockFactory_NativeLock0.getObtainFailedReason();
      assertNull(exception0);
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/", nativeFSLockFactory_NativeLock0.toString());
      
      Exception exception1 = nativeFSLockFactory_NativeLock0.getObtainFailedReason();
      assertNull(exception1);
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/", nativeFSLockFactory_NativeLock0.toString());
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      NativeFSLockFactory.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn((String) null, "q3c:kd", (String) null, (String) null).when(file0).getAbsolutePath();
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory(file0);
      assertNotNull(nativeFSLockFactory0);
      
      String[] stringArray0 = new String[0];
      NativeFSLockFactory.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = (NativeFSLockFactory.NativeLock)nativeFSLockFactory0.create("", false);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("", nativeFSLockFactory_NativeLock0.toString());
      
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock1 = (NativeFSLockFactory.NativeLock)nativeFSLockFactory0.create("<n[0AuKTEHrg'NH%p\"k", false);
      assertNotNull(nativeFSLockFactory_NativeLock1);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/q3c:kd/<n[0AuKTEHrg'NH%p\"k", nativeFSLockFactory_NativeLock1.toString());
      assertEquals("<n[0AuKTEHrg'NH%p\"k", nativeFSLockFactory_NativeLock1.getName());
      assertNotSame(nativeFSLockFactory_NativeLock1, nativeFSLockFactory_NativeLock0);
      assertFalse(nativeFSLockFactory_NativeLock1.equals((Object)nativeFSLockFactory_NativeLock0));
      
      // Undeclared exception!
      try { 
        nativeFSLockFactory0.forceRemove("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot delete 
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "+B-jDg42";
      File file0 = MockFile.createTempFile("+B-jDg42", "+B-jDg42", (File) null);
      assertNotNull(file0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/+B-jDg420+B-jDg42", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("+B-jDg420+B-jDg42", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      
      boolean boolean0 = false;
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file0, "+B-jDg42", false);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/+B-jDg420+B-jDg42", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("+B-jDg420+B-jDg42", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("+B-jDg42", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/tmp/+B-jDg420+B-jDg42/+B-jDg42", nativeFSLockFactory_NativeLock0.toString());
      
      boolean boolean1 = nativeFSLockFactory_NativeLock0.isLocked();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/+B-jDg420+B-jDg42", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("+B-jDg420+B-jDg42", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("+B-jDg42", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/tmp/+B-jDg420+B-jDg42/+B-jDg42", nativeFSLockFactory_NativeLock0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      nativeFSLockFactory_NativeLock0.release();
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.length());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/+B-jDg420+B-jDg42", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.canWrite());
      assertEquals("+B-jDg420+B-jDg42", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("+B-jDg42", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/tmp/+B-jDg420+B-jDg42/+B-jDg42", nativeFSLockFactory_NativeLock0.toString());
      
      // Undeclared exception!
      try { 
        nativeFSLockFactory_NativeLock0.tryLock();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lockDir has to be a directory: /tmp/+B-jDg420+B-jDg42
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory$NativeLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory(file0);
      assertNotNull(nativeFSLockFactory0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        nativeFSLockFactory0.create((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory();
      assertNotNull(nativeFSLockFactory0);
      
      // Undeclared exception!
      try { 
        nativeFSLockFactory0.forceRemove("fBY", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory();
      assertNotNull(nativeFSLockFactory0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "com.graphhopper.storage.NativeFSLockFactory$NativeLock";
      stringArray0[1] = "Directory ";
      stringArray0[2] = "";
      stringArray0[3] = "xLPwUYO/BL";
      stringArray0[4] = "Directory ";
      stringArray0[5] = "";
      stringArray0[6] = "BF/l x1tf";
      NativeFSLockFactory.main(stringArray0);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        nativeFSLockFactory0.create("pV]K,7**!oyU", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating read locks
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*q";
      String string0 = "x$<('";
      stringArray0[1] = "x$<('";
      stringArray0[2] = "";
      NativeFSLockFactory.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      try { 
        NativeFSLockFactory.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated exception in System.in
         //
         verifyException("org.evosuite.runtime.util.SystemInUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock((File) null, "NO2Uia`aJaA", true);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("NO2Uia`aJaA", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("NO2Uia`aJaA", nativeFSLockFactory_NativeLock0.toString());
      
      String string0 = nativeFSLockFactory_NativeLock0.toString();
      assertNotNull(string0);
      assertEquals("NO2Uia`aJaA", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("NO2Uia`aJaA", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("NO2Uia`aJaA", string0);
      
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory();
      assertNotNull(nativeFSLockFactory0);
      
      // Undeclared exception!
      try { 
        nativeFSLockFactory0.create("NO2Uia`aJaA", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating write locks
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock((File) null, "", true);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("", nativeFSLockFactory_NativeLock0.toString());
      
      nativeFSLockFactory_NativeLock0.release();
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("", nativeFSLockFactory_NativeLock0.toString());
      
      String string0 = nativeFSLockFactory_NativeLock0.getName();
      assertNotNull(string0);
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("", string0);
      
      nativeFSLockFactory_NativeLock0.release();
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("", nativeFSLockFactory_NativeLock0.toString());
      
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory();
      assertNotNull(nativeFSLockFactory0);
      
      // Undeclared exception!
      try { 
        nativeFSLockFactory0.forceRemove("lockDir has to be a directory: ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory((File) null);
      assertNotNull(nativeFSLockFactory0);
      
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock((File) null, "", true);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      
      Exception exception0 = nativeFSLockFactory_NativeLock0.getObtainFailedReason();
      assertNull(exception0);
      assertEquals("", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn((String) null).when(file0).getAbsolutePath();
      doReturn(false).when(file0).mkdirs();
      doReturn((String) null).when(file0).toString();
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file0, "a-J|vX~HL{", true);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("a-J|vX~HL{", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("a-J|vX~HL{", nativeFSLockFactory_NativeLock0.toString());
      
      // Undeclared exception!
      try { 
        nativeFSLockFactory_NativeLock0.tryLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Directory null does not exist and cannot be created to place lock file there: a-J|vX~HL{
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory$NativeLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory(file0);
      assertNotNull(nativeFSLockFactory0);
      
      nativeFSLockFactory0.forceRemove("LB7Yeu>EbH", true);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      File file0 = null;
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock((File) null, "", true);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      
      boolean boolean0 = nativeFSLockFactory_NativeLock0.isLocked();
      assertEquals("", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertFalse(boolean0);
      
      boolean boolean1 = nativeFSLockFactory_NativeLock0.isLocked();
      assertEquals("", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        nativeFSLockFactory_NativeLock0.tryLock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory$NativeLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "j\"<=<s OJDY";
      try { 
        MockURI.URI("j\"<=<s OJDY", "j\"<=<s OJDY", "j\"<=<s OJDY", "j\"<=<s OJDY");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: j\"<=<s OJDY://j\"<=<s OJDYj%22%3C=%3Cs%20OJDY#j%22%3C=%3Cs%20OJDY
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" locks", " locks");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getCanonicalFile();
      assertNotNull(file0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(" locks", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals(" locks", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(file0.equals((Object)mockFile0));
      
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file0, " locks", false);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(" locks", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals(" locks", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks/ locks", nativeFSLockFactory_NativeLock0.toString());
      assertEquals(" locks", nativeFSLockFactory_NativeLock0.getName());
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      
      boolean boolean0 = nativeFSLockFactory_NativeLock0.isLocked();
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(" locks", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals(" locks", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks/ locks", nativeFSLockFactory_NativeLock0.toString());
      assertEquals(" locks", nativeFSLockFactory_NativeLock0.getName());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(boolean0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      
      nativeFSLockFactory_NativeLock0.release();
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(" locks", mockFile0.getName());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", file0.getParent());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.exists());
      assertEquals(" locks", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.lastModified());
      assertFalse(file0.canWrite());
      assertFalse(file0.canRead());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.canExecute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks/ locks", nativeFSLockFactory_NativeLock0.toString());
      assertEquals(" locks", nativeFSLockFactory_NativeLock0.getName());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      
      boolean boolean1 = nativeFSLockFactory_NativeLock0.tryLock();
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(" locks", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(" locks", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks/ locks", nativeFSLockFactory_NativeLock0.toString());
      assertEquals(" locks", nativeFSLockFactory_NativeLock0.getName());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertTrue(boolean1);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = nativeFSLockFactory_NativeLock0.tryLock();
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(" locks", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(" locks", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks/ locks", nativeFSLockFactory_NativeLock0.toString());
      assertEquals(" locks", nativeFSLockFactory_NativeLock0.getName());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(boolean2);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = nativeFSLockFactory_NativeLock0.tryLock();
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(" locks", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(" locks", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks/ locks", nativeFSLockFactory_NativeLock0.toString());
      assertEquals(" locks", nativeFSLockFactory_NativeLock0.getName());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(boolean3);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = nativeFSLockFactory_NativeLock0.tryLock();
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(" locks", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(" locks", file0.getName());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertFalse(file0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", file0.toString());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks/ locks", nativeFSLockFactory_NativeLock0.toString());
      assertEquals(" locks", nativeFSLockFactory_NativeLock0.getName());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(boolean4);
      assertTrue(mockFile0.equals((Object)file0));
      assertTrue(file0.equals((Object)mockFile0));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory(mockFile0);
      assertNotNull(nativeFSLockFactory0);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(" locks", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.equals((Object)file0));
      
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock1 = (NativeFSLockFactory.NativeLock)nativeFSLockFactory0.create("", false);
      assertNotNull(nativeFSLockFactory_NativeLock1);
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.length());
      assertEquals(" locks", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks", nativeFSLockFactory_NativeLock1.toString());
      assertEquals("", nativeFSLockFactory_NativeLock1.getName());
      assertNotSame(mockFile0, file0);
      assertNotSame(nativeFSLockFactory_NativeLock1, nativeFSLockFactory_NativeLock0);
      assertTrue(mockFile0.equals((Object)file0));
      assertFalse(nativeFSLockFactory_NativeLock1.equals((Object)nativeFSLockFactory_NativeLock0));
      
      // Undeclared exception!
      try { 
        nativeFSLockFactory0.forceRemove("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot delete /home/cassioegc/tcc/graphhopper.reader-osm/core/ locks/ locks
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn("T1t").when(file0).getAbsolutePath();
      doReturn(true).when(file0).isDirectory();
      boolean boolean0 = true;
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file0, "lockDir has to be a directory: ", true);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("lockDir has to be a directory: ", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/T1t/lockDir has to be a directory: ", nativeFSLockFactory_NativeLock0.toString());
      
      boolean boolean1 = nativeFSLockFactory_NativeLock0.tryLock();
      assertEquals("lockDir has to be a directory: ", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/T1t/lockDir has to be a directory: ", nativeFSLockFactory_NativeLock0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      nativeFSLockFactory_NativeLock0.release();
      assertEquals("lockDir has to be a directory: ", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/T1t/lockDir has to be a directory: ", nativeFSLockFactory_NativeLock0.toString());
      
      boolean boolean2 = nativeFSLockFactory_NativeLock0.isLocked();
      assertEquals("lockDir has to be a directory: ", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/T1t/lockDir has to be a directory: ", nativeFSLockFactory_NativeLock0.toString());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lockDir has to be a directory: ";
      stringArray0[1] = "lockDir has to be a directory: ";
      stringArray0[2] = "lockDir has to be a directory: ";
      stringArray0[3] = "lockDir has to be a directory: ";
      stringArray0[4] = "lockDir has to be a directory: ";
      NativeFSLockFactory.main(stringArray0);
      assertEquals(5, stringArray0.length);
      
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory();
      assertNotNull(nativeFSLockFactory0);
      
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        nativeFSLockFactory0.create("lockDir has to be a directory: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating write locks
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn("IdLlW7ruYzV\"$").when(file0).getAbsolutePath();
      doReturn(false).when(file0).isDirectory();
      doReturn(true).when(file0).mkdirs();
      doReturn("").when(file0).toString();
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file0, "", false);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/IdLlW7ruYzV\"$", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      
      boolean boolean0 = nativeFSLockFactory_NativeLock0.isLocked();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/IdLlW7ruYzV\"$", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      assertFalse(boolean0);
      
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file1).exists();
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory(file1);
      assertNotNull(nativeFSLockFactory0);
      
      nativeFSLockFactory0.forceRemove("nce+0(!|/CV)sTL%Yn", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ">/OOmK1lLeMjc";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        nativeFSLockFactory_NativeLock0.tryLock();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lockDir has to be a directory: 
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory$NativeLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn((String) null, "q3c:kd", "&agGnoU^:Lq28C", "@C(6X+?#ifR").when(file0).getAbsolutePath();
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory(file0);
      assertNotNull(nativeFSLockFactory0);
      
      String[] stringArray0 = new String[0];
      NativeFSLockFactory.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = (NativeFSLockFactory.NativeLock)nativeFSLockFactory0.create("", false);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("", nativeFSLockFactory_NativeLock0.getName());
      
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock1 = (NativeFSLockFactory.NativeLock)nativeFSLockFactory0.create("<n[0AuKTEHrg'NH%p\"k", false);
      assertNotNull(nativeFSLockFactory_NativeLock1);
      assertEquals("<n[0AuKTEHrg'NH%p\"k", nativeFSLockFactory_NativeLock1.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/q3c:kd/<n[0AuKTEHrg'NH%p\"k", nativeFSLockFactory_NativeLock1.toString());
      assertNotSame(nativeFSLockFactory_NativeLock1, nativeFSLockFactory_NativeLock0);
      assertFalse(nativeFSLockFactory_NativeLock1.equals((Object)nativeFSLockFactory_NativeLock0));
      
      nativeFSLockFactory0.forceRemove("", false);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file1).exists();
      doReturn("rS'MX9Xy+6*]*mVqju").when(file1).getAbsolutePath();
      doReturn(false).when(file1).mkdirs();
      doReturn((String) null).when(file1).toString();
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock2 = new NativeFSLockFactory.NativeLock(file1, "", false);
      assertNotNull(nativeFSLockFactory_NativeLock2);
      assertEquals("", nativeFSLockFactory_NativeLock2.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/rS'MX9Xy+6*]*mVqju", nativeFSLockFactory_NativeLock2.toString());
      assertFalse(nativeFSLockFactory_NativeLock2.equals((Object)nativeFSLockFactory_NativeLock0));
      assertFalse(nativeFSLockFactory_NativeLock2.equals((Object)nativeFSLockFactory_NativeLock1));
      
      boolean boolean0 = nativeFSLockFactory_NativeLock2.isLocked();
      assertEquals("", nativeFSLockFactory_NativeLock2.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/rS'MX9Xy+6*]*mVqju", nativeFSLockFactory_NativeLock2.toString());
      assertNotSame(nativeFSLockFactory_NativeLock2, nativeFSLockFactory_NativeLock0);
      assertNotSame(nativeFSLockFactory_NativeLock2, nativeFSLockFactory_NativeLock1);
      assertFalse(boolean0);
      assertFalse(nativeFSLockFactory_NativeLock2.equals((Object)nativeFSLockFactory_NativeLock0));
      assertFalse(nativeFSLockFactory_NativeLock2.equals((Object)nativeFSLockFactory_NativeLock1));
      
      String string0 = nativeFSLockFactory_NativeLock2.getName();
      assertNotNull(string0);
      assertEquals("", nativeFSLockFactory_NativeLock2.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/rS'MX9Xy+6*]*mVqju", nativeFSLockFactory_NativeLock2.toString());
      assertNotSame(nativeFSLockFactory_NativeLock2, nativeFSLockFactory_NativeLock0);
      assertNotSame(nativeFSLockFactory_NativeLock2, nativeFSLockFactory_NativeLock1);
      assertEquals("", string0);
      assertFalse(nativeFSLockFactory_NativeLock2.equals((Object)nativeFSLockFactory_NativeLock0));
      assertFalse(nativeFSLockFactory_NativeLock2.equals((Object)nativeFSLockFactory_NativeLock1));
      
      nativeFSLockFactory_NativeLock2.release();
      assertEquals("", nativeFSLockFactory_NativeLock2.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/rS'MX9Xy+6*]*mVqju", nativeFSLockFactory_NativeLock2.toString());
      assertNotSame(nativeFSLockFactory_NativeLock2, nativeFSLockFactory_NativeLock0);
      assertNotSame(nativeFSLockFactory_NativeLock2, nativeFSLockFactory_NativeLock1);
      assertFalse(nativeFSLockFactory_NativeLock2.equals((Object)nativeFSLockFactory_NativeLock0));
      assertFalse(nativeFSLockFactory_NativeLock2.equals((Object)nativeFSLockFactory_NativeLock1));
      
      // Undeclared exception!
      try { 
        nativeFSLockFactory_NativeLock2.tryLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Directory null does not exist and cannot be created to place lock file there: /home/cassioegc/tcc/graphhopper.reader-osm/core/rS'MX9Xy+6*]*mVqju
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory$NativeLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("The filter must not be null").when(file0).getAbsolutePath();
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file0, "K@", true);
      assertNotNull(nativeFSLockFactory_NativeLock0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/The filter must not be null/K@", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("K@", nativeFSLockFactory_NativeLock0.getName());
      
      String string0 = nativeFSLockFactory_NativeLock0.getName();
      assertNotNull(string0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/The filter must not be null/K@", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("K@", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("K@", string0);
      
      boolean boolean0 = nativeFSLockFactory_NativeLock0.isLocked();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/The filter must not be null/K@", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("K@", nativeFSLockFactory_NativeLock0.getName());
      assertFalse(boolean0);
      
      boolean boolean1 = nativeFSLockFactory_NativeLock0.isLocked();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/The filter must not be null/K@", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("K@", nativeFSLockFactory_NativeLock0.getName());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file1).exists();
      doReturn("-|mrx\"qX=0I#$3?srpY", (String) null, (String) null).when(file1).getAbsolutePath();
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory(file1);
      assertNotNull(nativeFSLockFactory0);
      
      String string1 = nativeFSLockFactory_NativeLock0.getName();
      assertNotNull(string1);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/The filter must not be null/K@", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("K@", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("K@", string1);
      
      nativeFSLockFactory0.forceRemove("K@", false);
      String string2 = nativeFSLockFactory_NativeLock0.toString();
      assertNotNull(string2);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/The filter must not be null/K@", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("K@", nativeFSLockFactory_NativeLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/The filter must not be null/K@", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock1 = (NativeFSLockFactory.NativeLock)nativeFSLockFactory0.create("J", false);
      assertNotNull(nativeFSLockFactory_NativeLock1);
      assertEquals("J", nativeFSLockFactory_NativeLock1.toString());
      assertEquals("J", nativeFSLockFactory_NativeLock1.getName());
      assertNotSame(nativeFSLockFactory_NativeLock1, nativeFSLockFactory_NativeLock0);
      assertFalse(nativeFSLockFactory_NativeLock1.equals((Object)nativeFSLockFactory_NativeLock0));
      
      String string3 = nativeFSLockFactory_NativeLock0.toString();
      assertNotNull(string3);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/The filter must not be null/K@", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("K@", nativeFSLockFactory_NativeLock0.getName());
      assertNotSame(nativeFSLockFactory_NativeLock0, nativeFSLockFactory_NativeLock1);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/The filter must not be null/K@", string3);
      assertFalse(nativeFSLockFactory_NativeLock0.equals((Object)nativeFSLockFactory_NativeLock1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      nativeFSLockFactory_NativeLock0.release();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/The filter must not be null/K@", nativeFSLockFactory_NativeLock0.toString());
      assertEquals("K@", nativeFSLockFactory_NativeLock0.getName());
      assertNotSame(nativeFSLockFactory_NativeLock0, nativeFSLockFactory_NativeLock1);
      assertFalse(nativeFSLockFactory_NativeLock0.equals((Object)nativeFSLockFactory_NativeLock1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      nativeFSLockFactory0.setLockDir(file0);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file1).getAbsolutePath();
      nativeFSLockFactory0.create("nyUJAL", false);
      File file2 = mock(File.class, new ViolatedAssumptionAnswer());
      nativeFSLockFactory0.setLockDir(file2);
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file1, "nyUJAL", false);
      nativeFSLockFactory_NativeLock0.isLocked();
      nativeFSLockFactory_NativeLock0.isLocked();
      nativeFSLockFactory0.setLockDir((File) null);
      nativeFSLockFactory0.setLockDir((File) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nyUJAL";
      stringArray0[1] = "nyUJAL";
      stringArray0[2] = "nyUJAL";
      stringArray0[3] = "nyUJAL";
      stringArray0[4] = "nyUJAL";
      stringArray0[5] = "nyUJAL";
      stringArray0[6] = "nyUJAL";
      stringArray0[7] = "nyUJAL";
      NativeFSLockFactory.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "0q";
      URI uRI0 = MockURI.URI("0q");
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(file0).exists();
      doReturn("").when(file0).getAbsolutePath();
      doReturn(false, false, false).when(file0).isDirectory();
      doReturn("", "", (String) null).when(file0).toString();
      NativeFSLockFactory.NativeLock nativeFSLockFactory_NativeLock0 = new NativeFSLockFactory.NativeLock(file0, "", false);
      nativeFSLockFactory_NativeLock0.release();
      nativeFSLockFactory_NativeLock0.isLocked();
      nativeFSLockFactory_NativeLock0.toString();
      NativeFSLockFactory nativeFSLockFactory0 = new NativeFSLockFactory();
      nativeFSLockFactory_NativeLock0.isLocked();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "/";
      stringArray0[3] = "";
      stringArray0[4] = " locks";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "/";
      stringArray0[8] = "";
      NativeFSLockFactory.main(stringArray0);
      nativeFSLockFactory_NativeLock0.isLocked();
      nativeFSLockFactory_NativeLock0.release();
      // Undeclared exception!
      try { 
        nativeFSLockFactory0.create(" locks", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating read locks
         //
         verifyException("com.graphhopper.storage.NativeFSLockFactory", e);
      }
  }
}
