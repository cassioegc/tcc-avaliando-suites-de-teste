/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 04:24:33 GMT 2021
 */

package com.graphhopper.storage.index;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.storage.index.Snap;
import com.graphhopper.util.DistanceCalc;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.shapes.GHPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Snap_ESTest extends Snap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Snap snap0 = new Snap((-3264.55996), 0.0);
      assertEquals((-1), snap0.getWayIndex());
      
      snap0.setWayIndex(0);
      snap0.toString();
      assertEquals(0, snap0.getWayIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Snap snap0 = new Snap((-1990.6972640474), (-1990.6972640474));
      assertFalse(snap0.isValid());
      
      snap0.setClosestNode(0);
      snap0.toString();
      assertEquals(0, snap0.getClosestNode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Snap snap0 = new Snap(0.0, 793.0);
      assertFalse(snap0.isValid());
      
      snap0.setClosestNode(0);
      boolean boolean0 = snap0.isValid();
      assertEquals(0, snap0.getClosestNode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Snap snap0 = new Snap(1.0, 1.0);
      assertEquals((-1), snap0.getWayIndex());
      
      snap0.setWayIndex(0);
      int int0 = snap0.getWayIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Snap snap0 = new Snap(2.0, 0.0);
      snap0.setWayIndex(808);
      int int0 = snap0.getWayIndex();
      assertEquals(808, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Snap snap0 = new Snap((-3264.55996), 0.0);
      Snap.Position snap_Position0 = Snap.Position.EDGE;
      snap0.setSnappedPosition(snap_Position0);
      snap0.getSnappedPosition();
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
      assertEquals((-1), snap0.getWayIndex());
      assertEquals((-1), snap0.getClosestNode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Snap snap0 = new Snap((-1990.6972640474), (-1990.6972640474));
      GHPoint gHPoint0 = snap0.getQueryPoint();
      assertEquals((-1990.6972640474), gHPoint0.lon, 0.01);
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
      assertEquals((-1990.6972640474), gHPoint0.lat, 0.01);
      assertEquals((-1), snap0.getWayIndex());
      assertEquals((-1), snap0.getClosestNode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Snap snap0 = new Snap(0.0, 0.0);
      GHPoint gHPoint0 = snap0.getQueryPoint();
      assertEquals(0.0, gHPoint0.lat, 0.01);
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
      assertEquals((-1), snap0.getClosestNode());
      assertEquals((-1), snap0.getWayIndex());
      assertEquals(0.0, gHPoint0.lon, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Snap snap0 = new Snap((-1529.663), 1962.2893);
      GHPoint gHPoint0 = snap0.getQueryPoint();
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
      assertEquals((-1), snap0.getWayIndex());
      assertEquals((-1), snap0.getClosestNode());
      assertEquals((-1529.663), gHPoint0.lat, 0.01);
      assertEquals(1962.2893, gHPoint0.lon, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Snap snap0 = new Snap(1.0, 1.0);
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
      
      snap0.setQueryDistance(0.0);
      double double0 = snap0.getQueryDistance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Snap snap0 = new Snap(1600.0, 1.7976931348623157E308);
      snap0.setQueryDistance((-2451));
      double double0 = snap0.getQueryDistance();
      assertEquals((-2451.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Snap snap0 = new Snap((-3264.55996), 0.0);
      assertFalse(snap0.isValid());
      
      snap0.setClosestNode(0);
      int int0 = snap0.getClosestNode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Snap snap0 = new Snap(Double.NaN, Double.NaN);
      snap0.setClosestNode(1746);
      int int0 = snap0.getClosestNode();
      assertEquals(1746, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Snap snap0 = new Snap((-2516.98673933), 4764.005467598168);
      DistanceCalc distanceCalc0 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        snap0.calcSnappedPoint(distanceCalc0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No closest edge?
         //
         verifyException("com.graphhopper.storage.index.Snap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Snap snap0 = new Snap(3089.0, 3089.0);
      // Undeclared exception!
      try { 
        snap0.getSnappedPoint();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Calculate snapped point before!
         //
         verifyException("com.graphhopper.storage.index.Snap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Snap snap0 = new Snap(3089.0, 3089.0);
      boolean boolean0 = snap0.isValid();
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
      assertEquals((-1), snap0.getWayIndex());
      assertFalse(boolean0);
      assertEquals((-1), snap0.getClosestNode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Snap snap0 = new Snap(2644.5512, 2644.5512);
      GHPoint gHPoint0 = snap0.getQueryPoint();
      assertEquals(2644.5512, gHPoint0.lon, 0.01);
      assertEquals((-1), snap0.getClosestNode());
      assertEquals((-1), snap0.getWayIndex());
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
      assertEquals(2644.5512, gHPoint0.lat, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Snap snap0 = new Snap((-2516.98673933), 4764.005467598168);
      snap0.getClosestEdge();
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
      assertEquals((-1), snap0.getClosestNode());
      assertEquals((-1), snap0.getWayIndex());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Snap snap0 = new Snap((-2516.98673933), 4764.005467598168);
      snap0.setClosestNode(59);
      boolean boolean0 = snap0.isValid();
      assertEquals(59, snap0.getClosestNode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Snap snap0 = new Snap(2644.5512, 2644.5512);
      int int0 = snap0.getClosestNode();
      assertEquals((-1), snap0.getWayIndex());
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Snap snap0 = new Snap(2644.5512, 2644.5512);
      double double0 = snap0.getQueryDistance();
      assertEquals((-1), snap0.getWayIndex());
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals((-1), snap0.getClosestNode());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Snap snap0 = new Snap((-97.7324968), 2624.532264388361);
      snap0.setClosestEdge((EdgeIteratorState) null);
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
      assertEquals((-1), snap0.getClosestNode());
      assertEquals((-1), snap0.getWayIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Snap snap0 = new Snap(2644.5512, 2644.5512);
      snap0.getSnappedPosition();
      assertEquals((-1), snap0.getClosestNode());
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
      assertEquals((-1), snap0.getWayIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Snap snap0 = new Snap(2644.5512, 2644.5512);
      int int0 = snap0.getWayIndex();
      assertEquals((-1), snap0.getClosestNode());
      assertEquals((-1), int0);
      assertEquals(1.7976931348623157E308, snap0.getQueryDistance(), 0.01);
  }
}
