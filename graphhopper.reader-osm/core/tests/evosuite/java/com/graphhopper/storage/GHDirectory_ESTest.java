/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:59:48 GMT 2021
 */

package com.graphhopper.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.storage.DAType;
import com.graphhopper.storage.DataAccess;
import com.graphhopper.storage.Directory;
import com.graphhopper.storage.GHDirectory;
import com.graphhopper.storage.MMapDataAccess;
import com.graphhopper.storage.RAMIntDataAccess;
import java.nio.ByteOrder;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GHDirectory_ESTest extends GHDirectory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DAType dAType0 = DAType.RAM;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      ByteOrder byteOrder0 = gHDirectory0.getByteOrder();
      MMapDataAccess mMapDataAccess0 = new MMapDataAccess("", "", byteOrder0, true);
      gHDirectory0.find("", dAType0);
      gHDirectory0.remove(mMapDataAccess0);
      assertTrue(mMapDataAccess0.isClosed());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("The wildcard must not be null", dAType0);
      gHDirectory0.isStoring();
      assertEquals("The wildcard must not be null/", gHDirectory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DAType dAType0 = DAType.RAM;
      GHDirectory gHDirectory0 = new GHDirectory("The suffix must not be null", dAType0);
      gHDirectory0.isStoring();
      assertEquals("The suffix must not be null/", gHDirectory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GHDirectory gHDirectory0 = new GHDirectory("", (DAType) null);
      gHDirectory0.getDefaultType();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT;
      GHDirectory gHDirectory0 = new GHDirectory("?_q0|P", dAType0);
      gHDirectory0.getDefaultType();
      assertEquals("?_q0|P/", gHDirectory0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DAType dAType0 = DAType.MMAP_RO;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      gHDirectory0.getDefaultType();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DAType dAType0 = DAType.MMAP_RO;
      GHDirectory gHDirectory0 = new GHDirectory("Found existing DataAccess object '", dAType0);
      gHDirectory0.create();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MMapDataAccess mMapDataAccess0 = (MMapDataAccess)gHDirectory0.find("", dAType0);
      mMapDataAccess0.create(376L);
      // Undeclared exception!
      try { 
        gHDirectory0.remove(mMapDataAccess0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Couldn't close resource
         //
         verifyException("com.graphhopper.util.Helper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DAType dAType0 = DAType.MMAP_RO;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      // Undeclared exception!
      try { 
        gHDirectory0.remove((DataAccess) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      // Undeclared exception!
      try { 
        gHDirectory0.put((String) null, dAType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.Helper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DAType dAType0 = DAType.MMAP_RO;
      GHDirectory gHDirectory0 = new GHDirectory("MMAP_RO", dAType0);
      gHDirectory0.map = null;
      // Undeclared exception!
      try { 
        gHDirectory0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GHDirectory gHDirectory0 = new GHDirectory("", (DAType) null);
      // Undeclared exception!
      try { 
        gHDirectory0.find("", (DAType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GHDirectory gHDirectory0 = new GHDirectory("", (DAType) null);
      // Undeclared exception!
      try { 
        gHDirectory0.find("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DAType.MemRef dAType_MemRef0 = DAType.MemRef.MMAP;
      DAType dAType0 = new DAType(dAType_MemRef0, true, true, true);
      GHDirectory gHDirectory0 = new GHDirectory(", existing:", dAType0);
      gHDirectory0.find(", existing:", dAType0);
      // Undeclared exception!
      try { 
        gHDirectory0.find(", existing:");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Found existing DataAccess object ', existing:' but types did not match. Requested:MMAP_INT_STORE, was:MMAP_STORE
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GHDirectory gHDirectory0 = new GHDirectory(" ZtIoU&FrC \"j f", (DAType) null);
      // Undeclared exception!
      try { 
        gHDirectory0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DAType dAType0 = DAType.RAM;
      GHDirectory gHDirectory0 = new GHDirectory("F/)!Wqo@x<+[td{", dAType0);
      HashMap<String, DataAccess> hashMap0 = new HashMap<String, DataAccess>();
      gHDirectory0.map = (Map<String, DataAccess>) hashMap0;
      hashMap0.put("com.graphhopper.storage.GHDirectory", (DataAccess) null);
      // Undeclared exception!
      try { 
        gHDirectory0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DAType dAType0 = DAType.RAM;
      GHDirectory gHDirectory0 = new GHDirectory(", was:/", dAType0);
      gHDirectory0.map = null;
      // Undeclared exception!
      try { 
        gHDirectory0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT;
      GHDirectory gHDirectory0 = new GHDirectory("?_q0|P", dAType0);
      DataAccess dataAccess0 = gHDirectory0.find("", dAType0);
      assertEquals("", dataAccess0.getName());
      assertEquals("?_q0|P/", gHDirectory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("$@yw", dAType0);
      RAMIntDataAccess rAMIntDataAccess0 = (RAMIntDataAccess)gHDirectory0.find("$@yw/", dAType0);
      assertTrue(rAMIntDataAccess0.isStoring());
      assertEquals("$@yw/", gHDirectory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT;
      GHDirectory gHDirectory0 = new GHDirectory("g~r>M\"$", dAType0);
      // Undeclared exception!
      try { 
        gHDirectory0.find("g~r>M\"$", dAType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Since 0.7 DataAccess objects does no longer accept upper case names
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DAType dAType0 = DAType.RAM;
      GHDirectory gHDirectory0 = new GHDirectory("The suffix must not be null", dAType0);
      String string0 = gHDirectory0.getLocation();
      assertEquals("The suffix must not be null/", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GHDirectory gHDirectory0 = new GHDirectory("Couldn't map buffer ", (DAType) null);
      // Undeclared exception!
      try { 
        gHDirectory0.isStoring();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GHDirectory gHDirectory0 = new GHDirectory(", was:", (DAType) null);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess(", was:", "", false, byteOrder0);
      // Undeclared exception!
      try { 
        gHDirectory0.remove(rAMIntDataAccess0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Couldn't remove DataAccess: , was:
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DAType dAType0 = DAType.MMAP;
      GHDirectory gHDirectory0 = new GHDirectory((String) null, dAType0);
      DataAccess dataAccess0 = gHDirectory0.find("");
      gHDirectory0.remove(dataAccess0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DAType.MemRef dAType_MemRef0 = DAType.MemRef.HEAP;
      DAType dAType0 = new DAType(dAType_MemRef0, false, false, false);
      GHDirectory gHDirectory0 = new GHDirectory("@2.LA", dAType0);
      gHDirectory0.find("", dAType0);
      gHDirectory0.clear();
      assertEquals("@2.LA/", gHDirectory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DAType dAType0 = DAType.RAM;
      GHDirectory gHDirectory0 = new GHDirectory("F/)!Wqo@x<+[td{", dAType0);
      gHDirectory0.close();
      assertEquals("F/)!Wqo@x<+[td{/", gHDirectory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DAType dAType0 = new DAType((DAType.MemRef) null, false, false, false);
      GHDirectory gHDirectory0 = new GHDirectory(", existing:", dAType0);
      // Undeclared exception!
      try { 
        gHDirectory0.find(", existing:", dAType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DAType not supported RAM
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DAType dAType0 = DAType.RAM_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("x\"YArl%[lScSe)", dAType0);
      gHDirectory0.find("", dAType0);
      assertEquals("x\"YArl%[lScSe)/", gHDirectory0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DAType dAType0 = DAType.RAM;
      GHDirectory gHDirectory0 = new GHDirectory("F/)!Wqo@x<+[td{", dAType0);
      gHDirectory0.find("");
      gHDirectory0.close();
      assertEquals("F/)!Wqo@x<+[td{/", gHDirectory0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DAType.MemRef dAType_MemRef0 = DAType.MemRef.MMAP;
      DAType dAType0 = new DAType(dAType_MemRef0, false, false, false);
      GHDirectory gHDirectory0 = new GHDirectory(",7 existing:", dAType0);
      gHDirectory0.find(",7 existing:");
      // Undeclared exception!
      try { 
        gHDirectory0.find(",7 existing:", dAType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Found existing DataAccess object ',7 existing:' but types did not match. Requested:MMAP, was:MMAP_STORE
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("/", dAType0);
      // Undeclared exception!
      try { 
        gHDirectory0.find("k8n:b~?jH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Since 0.7 DataAccess objects does no longer accept upper case names
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      RAMIntDataAccess rAMIntDataAccess0 = new RAMIntDataAccess(" bytes with offset ", (String) null, false, byteOrder0);
      DAType dAType0 = rAMIntDataAccess0.getType();
      GHDirectory gHDirectory0 = new GHDirectory(" bytes with offset ", dAType0);
      RAMIntDataAccess rAMIntDataAccess1 = (RAMIntDataAccess)gHDirectory0.find(" bytes with offset /");
      assertFalse(rAMIntDataAccess1.isStoring());
      
      gHDirectory0.find(" bytes with offset /", dAType0);
      assertEquals(" bytes with offset /", gHDirectory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DAType dAType0 = DAType.RAM_INT_STORE;
      GHDirectory gHDirectory0 = new GHDirectory((String) null, dAType0);
      // Undeclared exception!
      try { 
        gHDirectory0.put("com.grah&ppjr.util.Helper", dAType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Since 0.7 DataAccess objects does no longer accept upper case names
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DAType dAType0 = DAType.MMAP;
      GHDirectory gHDirectory0 = new GHDirectory((String) null, dAType0);
      gHDirectory0.put("", dAType0);
      DataAccess dataAccess0 = gHDirectory0.find("");
      assertEquals("", dataAccess0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.getLocation());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Found existing DataAccess object '");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "MMAP_yO");
      DAType dAType0 = DAType.MMAP_RO;
      GHDirectory gHDirectory0 = null;
      try {
        gHDirectory0 = new GHDirectory("Found existing DataAccess object '", dAType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // file 'Found existing DataAccess object '' exists but is not a directory
         //
         verifyException("com.graphhopper.storage.GHDirectory", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DAType dAType0 = DAType.MMAP_RO;
      GHDirectory gHDirectory0 = new GHDirectory("", dAType0);
      gHDirectory0.getAll();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/", gHDirectory0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GHDirectory gHDirectory0 = new GHDirectory(" ZtIoU&FrC \"j f", (DAType) null);
      String string0 = gHDirectory0.toString();
      assertEquals(" ZtIoU&FrC \"j f/", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DAType dAType0 = DAType.RAM;
      GHDirectory gHDirectory0 = new GHDirectory("g~r>\"$", dAType0);
      Directory directory0 = gHDirectory0.create();
      assertEquals("g~r>\"$/", directory0.getLocation());
  }
}
