/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:02:11 GMT 2021
 */

package com.graphhopper.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.storage.GHLock;
import com.graphhopper.storage.SimpleFSLockFactory;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleFSLockFactory_ESTest extends SimpleFSLockFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(file0).exists();
      doReturn("").when(file0).getAbsolutePath();
      doReturn(true).when(file0).isDirectory();
      doReturn(false).when(file0).mkdirs();
      doReturn((String) null).when(file0).toString();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(file0, "");
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertTrue(simpleFSLockFactory_SimpleLock0.isLocked());
      assertEquals("/", simpleFSLockFactory_SimpleLock0.toString());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      boolean boolean1 = simpleFSLockFactory_SimpleLock0.tryLock();
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertTrue(simpleFSLockFactory_SimpleLock0.isLocked());
      assertEquals("/", simpleFSLockFactory_SimpleLock0.toString());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        simpleFSLockFactory_SimpleLock0.tryLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Directory Mock for File, hashCode: 1873941685 does not exist and cannot be created to place lock file there: /
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory$SimpleLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory();
      assertNotNull(simpleFSLockFactory0);
      
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn((String) null).when(file0).getAbsolutePath();
      simpleFSLockFactory0.setLockDir(file0);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(file1).exists();
      doReturn("a1D)$VgLh:5oU9", "").when(file1).getAbsolutePath();
      simpleFSLockFactory0.forceRemove("", false);
      simpleFSLockFactory0.setLockDir(file1);
      simpleFSLockFactory0.forceRemove("", true);
      // Undeclared exception!
      try { 
        simpleFSLockFactory0.forceRemove("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot delete /
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("").when(file0).getAbsolutePath();
      String string0 = "";
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(file0, "");
      assertEquals("/", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertTrue(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      // Undeclared exception!
      try { 
        simpleFSLockFactory_SimpleLock0.release();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot release lock file: /
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory$SimpleLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn(" does not exist and cannot be created to place lock file there: ", "p", "p", "Zax%").when(file0).getAbsolutePath();
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory(file0);
      assertNotNull(simpleFSLockFactory0);
      
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = (SimpleFSLockFactory.SimpleLock)simpleFSLockFactory0.create("", false);
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/ does not exist and cannot be created to place lock file there: ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock1 = (SimpleFSLockFactory.SimpleLock)simpleFSLockFactory0.create("", false);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/p", simpleFSLockFactory_SimpleLock1.toString());
      assertEquals("", simpleFSLockFactory_SimpleLock1.getName());
      assertFalse(simpleFSLockFactory_SimpleLock1.isLocked());
      assertNotNull(simpleFSLockFactory_SimpleLock1);
      assertNotSame(simpleFSLockFactory_SimpleLock1, simpleFSLockFactory_SimpleLock0);
      assertFalse(simpleFSLockFactory_SimpleLock1.equals((Object)simpleFSLockFactory_SimpleLock0));
      
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock2 = (SimpleFSLockFactory.SimpleLock)simpleFSLockFactory0.create("", false);
      assertEquals("", simpleFSLockFactory_SimpleLock2.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/p", simpleFSLockFactory_SimpleLock2.toString());
      assertFalse(simpleFSLockFactory_SimpleLock2.isLocked());
      assertNotNull(simpleFSLockFactory_SimpleLock2);
      assertNotSame(simpleFSLockFactory_SimpleLock2, simpleFSLockFactory_SimpleLock1);
      assertNotSame(simpleFSLockFactory_SimpleLock2, simpleFSLockFactory_SimpleLock0);
      assertFalse(simpleFSLockFactory_SimpleLock2.equals((Object)simpleFSLockFactory_SimpleLock1));
      assertFalse(simpleFSLockFactory_SimpleLock2.equals((Object)simpleFSLockFactory_SimpleLock0));
      
      simpleFSLockFactory0.forceRemove((String) null, false);
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock3 = (SimpleFSLockFactory.SimpleLock)simpleFSLockFactory0.create("", true);
      assertEquals("", simpleFSLockFactory_SimpleLock3.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/Zax%", simpleFSLockFactory_SimpleLock3.toString());
      assertFalse(simpleFSLockFactory_SimpleLock3.isLocked());
      assertNotNull(simpleFSLockFactory_SimpleLock3);
      assertNotSame(simpleFSLockFactory_SimpleLock3, simpleFSLockFactory_SimpleLock0);
      assertNotSame(simpleFSLockFactory_SimpleLock3, simpleFSLockFactory_SimpleLock2);
      assertNotSame(simpleFSLockFactory_SimpleLock3, simpleFSLockFactory_SimpleLock1);
      assertFalse(simpleFSLockFactory_SimpleLock3.equals((Object)simpleFSLockFactory_SimpleLock0));
      assertFalse(simpleFSLockFactory_SimpleLock3.equals((Object)simpleFSLockFactory_SimpleLock2));
      assertFalse(simpleFSLockFactory_SimpleLock3.equals((Object)simpleFSLockFactory_SimpleLock1));
      
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file1).exists();
      doReturn((String) null).when(file1).getAbsolutePath();
      simpleFSLockFactory0.setLockDir(file1);
      simpleFSLockFactory0.forceRemove("", true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory();
      assertNotNull(simpleFSLockFactory0);
      
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn((String) null).when(file0).getAbsolutePath();
      simpleFSLockFactory0.setLockDir(file0);
      simpleFSLockFactory0.forceRemove("|dN X;kLdK", true);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("|dN X;kLdK").when(file1).getAbsolutePath();
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(file1, "|dN X;kLdK");
      assertEquals("|dN X;kLdK", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/|dN X;kLdK/|dN X;kLdK", simpleFSLockFactory_SimpleLock0.toString());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("|dN X;kLdK", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/|dN X;kLdK/|dN X;kLdK", simpleFSLockFactory_SimpleLock0.toString());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn("Set lockDir before creating locks").when(file0).getAbsolutePath();
      doReturn(false).when(file0).isDirectory();
      doReturn("Set lockDir before creating locks").when(file0).toString();
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(file0, "");
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/Set lockDir before creating locks", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      String string0 = simpleFSLockFactory_SimpleLock0.toString();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/Set lockDir before creating locks", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(string0);
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/Set lockDir before creating locks", string0);
      
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/Set lockDir before creating locks", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/Set lockDir before creating locks", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      String string1 = " does not exist and cannot be created to place lock file there: ";
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("/home/cassioegc/tcc/graphhopper.reader-osm/core/Set lockDir before creating locks", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      // Undeclared exception!
      try { 
        simpleFSLockFactory_SimpleLock0.tryLock();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lockDir has to be a directory: Set lockDir before creating locks
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory$SimpleLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(file0).exists();
      doReturn((String) null, (String) null).when(file0).getAbsolutePath();
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory(file0);
      assertNotNull(simpleFSLockFactory0);
      
      simpleFSLockFactory0.forceRemove((String) null, true);
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = (SimpleFSLockFactory.SimpleLock)simpleFSLockFactory0.create("", false);
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertTrue(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock1 = (SimpleFSLockFactory.SimpleLock)simpleFSLockFactory0.create("", true);
      assertTrue(simpleFSLockFactory_SimpleLock1.isLocked());
      assertEquals("", simpleFSLockFactory_SimpleLock1.getName());
      assertEquals("", simpleFSLockFactory_SimpleLock1.toString());
      assertNotNull(simpleFSLockFactory_SimpleLock1);
      assertNotSame(simpleFSLockFactory_SimpleLock1, simpleFSLockFactory_SimpleLock0);
      assertFalse(simpleFSLockFactory_SimpleLock1.equals((Object)simpleFSLockFactory_SimpleLock0));
      
      simpleFSLockFactory0.forceRemove((String) null, true);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(file1).getAbsolutePath();
      simpleFSLockFactory0.setLockDir(file1);
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock2 = (SimpleFSLockFactory.SimpleLock)simpleFSLockFactory0.create("", false);
      assertEquals("", simpleFSLockFactory_SimpleLock2.getName());
      assertTrue(simpleFSLockFactory_SimpleLock2.isLocked());
      assertEquals("", simpleFSLockFactory_SimpleLock2.toString());
      assertNotNull(simpleFSLockFactory_SimpleLock2);
      assertNotSame(simpleFSLockFactory_SimpleLock2, simpleFSLockFactory_SimpleLock1);
      assertNotSame(simpleFSLockFactory_SimpleLock2, simpleFSLockFactory_SimpleLock0);
      assertFalse(simpleFSLockFactory_SimpleLock2.equals((Object)simpleFSLockFactory_SimpleLock1));
      assertFalse(simpleFSLockFactory_SimpleLock2.equals((Object)simpleFSLockFactory_SimpleLock0));
      
      // Undeclared exception!
      try { 
        simpleFSLockFactory0.create((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(file0, "K1~)<CTSN,P+lV");
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertEquals("K1~)<CTSN,P+lV", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("K1~)<CTSN,P+lV", simpleFSLockFactory_SimpleLock0.toString());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      String string0 = simpleFSLockFactory_SimpleLock0.toString();
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertEquals("K1~)<CTSN,P+lV", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("K1~)<CTSN,P+lV", simpleFSLockFactory_SimpleLock0.toString());
      assertNotNull(string0);
      assertEquals("K1~)<CTSN,P+lV", string0);
      
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file1).getAbsolutePath();
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory(file1);
      assertNotNull(simpleFSLockFactory0);
      
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock1 = (SimpleFSLockFactory.SimpleLock)simpleFSLockFactory0.create("K1~)<CTSN,P+lV", true);
      assertFalse(simpleFSLockFactory_SimpleLock1.isLocked());
      assertEquals("K1~)<CTSN,P+lV", simpleFSLockFactory_SimpleLock1.getName());
      assertEquals("K1~)<CTSN,P+lV", simpleFSLockFactory_SimpleLock1.toString());
      assertNotNull(simpleFSLockFactory_SimpleLock1);
      assertNotSame(simpleFSLockFactory_SimpleLock1, simpleFSLockFactory_SimpleLock0);
      assertFalse(simpleFSLockFactory_SimpleLock1.equals((Object)simpleFSLockFactory_SimpleLock0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory(file0);
      assertNotNull(simpleFSLockFactory0);
      
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = (SimpleFSLockFactory.SimpleLock)simpleFSLockFactory0.create("", false);
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertTrue(simpleFSLockFactory_SimpleLock0.isLocked());
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      simpleFSLockFactory0.setLockDir(file1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      String string0 = "";
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(file0, "");
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertTrue(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory();
      assertNotNull(simpleFSLockFactory0);
      
      String string1 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        simpleFSLockFactory0.forceRemove("", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = null;
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory((File) null);
      assertNotNull(simpleFSLockFactory0);
      
      String string0 = "\\xup";
      // Undeclared exception!
      try { 
        simpleFSLockFactory0.create("xup", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating locks
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      File file0 = null;
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock((File) null, "{>>fDH/rn)*;;HS ");
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      boolean boolean0 = simpleFSLockFactory_SimpleLock0.isLocked();
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertFalse(boolean0);
      
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory();
      assertNotNull(simpleFSLockFactory0);
      
      String string0 = simpleFSLockFactory_SimpleLock0.toString();
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(string0);
      assertEquals("{>>fDH/rn)*;;HS ", string0);
      
      String string1 = simpleFSLockFactory_SimpleLock0.getName();
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(string1);
      assertEquals("{>>fDH/rn)*;;HS ", string1);
      
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      String string2 = simpleFSLockFactory_SimpleLock0.toString();
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(string2);
      assertEquals("{>>fDH/rn)*;;HS ", string2);
      
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      boolean boolean1 = simpleFSLockFactory_SimpleLock0.isLocked();
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      String string3 = simpleFSLockFactory_SimpleLock0.getName();
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("{>>fDH/rn)*;;HS ", simpleFSLockFactory_SimpleLock0.getName());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(string3);
      assertEquals("{>>fDH/rn)*;;HS ", string3);
      
      // Undeclared exception!
      try { 
        simpleFSLockFactory0.create("{>>fDH/rn)*;;HS ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating locks
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory();
      assertNotNull(simpleFSLockFactory0);
      
      File file0 = null;
      simpleFSLockFactory0.setLockDir((File) null);
      simpleFSLockFactory0.setLockDir((File) null);
      simpleFSLockFactory0.setLockDir((File) null);
      simpleFSLockFactory0.setLockDir((File) null);
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock((File) null, "");
      assertTrue(simpleFSLockFactory_SimpleLock0.isLocked());
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      boolean boolean0 = simpleFSLockFactory_SimpleLock0.isLocked();
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertFalse(boolean0);
      
      simpleFSLockFactory0.setLockDir((File) null);
      simpleFSLockFactory_SimpleLock0.release();
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      
      Exception exception0 = simpleFSLockFactory_SimpleLock0.getObtainFailedReason();
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNull(exception0);
      
      String string0 = simpleFSLockFactory_SimpleLock0.toString();
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertFalse(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        simpleFSLockFactory_SimpleLock0.tryLock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory$SimpleLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory(file0);
      assertNotNull(simpleFSLockFactory0);
      
      simpleFSLockFactory0.forceRemove("com.graphhopper.storage.SimpleFSLockFactory$SimpleLock", true);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getAbsolutePath();
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory(file0);
      assertNotNull(simpleFSLockFactory0);
      
      // Undeclared exception!
      try { 
        simpleFSLockFactory0.create((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory();
      assertNotNull(simpleFSLockFactory0);
      
      // Undeclared exception!
      try { 
        simpleFSLockFactory0.forceRemove("", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file0).exists();
      doReturn((String) null).when(file0).getAbsolutePath();
      doReturn(false).when(file0).mkdirs();
      doReturn((String) null).when(file0).toString();
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(file0, "");
      assertEquals("", simpleFSLockFactory_SimpleLock0.toString());
      assertEquals("", simpleFSLockFactory_SimpleLock0.getName());
      assertTrue(simpleFSLockFactory_SimpleLock0.isLocked());
      assertNotNull(simpleFSLockFactory_SimpleLock0);
      
      // Undeclared exception!
      try { 
        simpleFSLockFactory_SimpleLock0.tryLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Directory null does not exist and cannot be created to place lock file there: 
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory$SimpleLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.apache.commons.io.filefilter.OrFileFilter");
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(mockFile0, "org.apache.commons.io.filefilter.OrFileFilter");
      simpleFSLockFactory_SimpleLock0.tryLock();
      simpleFSLockFactory_SimpleLock0.tryLock();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleFSLockFactory_SimpleLock0.release();
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        simpleFSLockFactory0.create("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating locks
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File file0 = null;
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock((File) null, "Rod>0/l");
      // Undeclared exception!
      try { 
        simpleFSLockFactory_SimpleLock0.tryLock();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory$SimpleLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      File file0 = null;
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory((File) null);
      simpleFSLockFactory0.setLockDir((File) null);
      String string0 = "}TT~^r";
      // Undeclared exception!
      try { 
        simpleFSLockFactory0.create("}TT~^r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating locks
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock((File) null, "");
      simpleFSLockFactory_SimpleLock0.release();
      simpleFSLockFactory_SimpleLock0.release();
      simpleFSLockFactory_SimpleLock0.release();
      simpleFSLockFactory_SimpleLock0.release();
      simpleFSLockFactory_SimpleLock0.release();
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory((File) null);
      // Undeclared exception!
      try { 
        simpleFSLockFactory0.create("Set lockDir before creating locks", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating locks
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(file0).getAbsolutePath();
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory(file0);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file1).exists();
      doReturn((String) null).when(file1).getAbsolutePath();
      String string1 = "";
      simpleFSLockFactory0.create("", true);
      simpleFSLockFactory0.create("", false);
      simpleFSLockFactory0.setLockDir(file1);
      String string2 = "";
      simpleFSLockFactory0.forceRemove("", true);
      File file2 = mock(File.class, new ViolatedAssumptionAnswer());
      simpleFSLockFactory0.setLockDir(file2);
      File file3 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(file3).getAbsolutePath();
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(file3, string2);
      // Undeclared exception!
      try { 
        simpleFSLockFactory_SimpleLock0.release();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot release lock file: /
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory$SimpleLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      File file0 = MockFile.createTempFile("The wildcard array must not be null", "The wildcard array must not be null");
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(file0, "");
      simpleFSLockFactory_SimpleLock0.toString();
      simpleFSLockFactory_SimpleLock0.release();
      simpleFSLockFactory_SimpleLock0.release();
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(file1).exists();
      doReturn((String) null).when(file1).getAbsolutePath();
      doReturn(false).when(file1).mkdirs();
      doReturn((String) null).when(file1).toString();
      simpleFSLockFactory_SimpleLock0.release();
      simpleFSLockFactory_SimpleLock0.tryLock();
      simpleFSLockFactory_SimpleLock0.tryLock();
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock1 = new SimpleFSLockFactory.SimpleLock(file1, " does not exist and cannot be created to place lock file there: ");
      // Undeclared exception!
      try { 
        simpleFSLockFactory_SimpleLock1.tryLock();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Directory null does not exist and cannot be created to place lock file there:  does not exist and cannot be created to place lock file there: 
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory$SimpleLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file0).exists();
      doReturn("(R+5Y72&$g!").when(file0).getAbsolutePath();
      doReturn(false).when(file0).isDirectory();
      doReturn((String) null).when(file0).toString();
      String string0 = "";
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(file0, "");
      simpleFSLockFactory_SimpleLock0.release();
      simpleFSLockFactory_SimpleLock0.getName();
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file1).exists();
      doReturn((String) null, (String) null).when(file1).getAbsolutePath();
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory(file1);
      simpleFSLockFactory_SimpleLock0.release();
      simpleFSLockFactory0.create(",L", false);
      simpleFSLockFactory0.forceRemove("", true);
      simpleFSLockFactory_SimpleLock0.getName();
      // Undeclared exception!
      try { 
        simpleFSLockFactory_SimpleLock0.tryLock();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lockDir has to be a directory: Mock for File, hashCode: 1696723663
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory$SimpleLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory();
      String string0 = null;
      // Undeclared exception!
      try { 
        simpleFSLockFactory0.create((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Set lockDir before creating locks
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory(file0);
      File file1 = mock(File.class, new ViolatedAssumptionAnswer());
      File file2 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file2).exists();
      doReturn((String) null).when(file2).getAbsolutePath();
      simpleFSLockFactory0.setLockDir(file2);
      String string0 = "5t\"12";
      simpleFSLockFactory0.forceRemove("5t\"12", false);
      simpleFSLockFactory0.setLockDir(file1);
      File file3 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(file3).exists();
      doReturn((String) null).when(file3).getAbsolutePath();
      simpleFSLockFactory0.setLockDir(file3);
      simpleFSLockFactory0.forceRemove("", false);
      simpleFSLockFactory0.forceRemove("5t\"12", false);
      File file4 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(file4).exists();
      doReturn((String) null).when(file4).getAbsolutePath();
      doReturn(false).when(file4).isDirectory();
      doReturn("5t\"12").when(file4).toString();
      SimpleFSLockFactory.SimpleLock simpleFSLockFactory_SimpleLock0 = new SimpleFSLockFactory.SimpleLock(file4, "");
      simpleFSLockFactory_SimpleLock0.getName();
      simpleFSLockFactory_SimpleLock0.release();
      simpleFSLockFactory_SimpleLock0.isLocked();
      simpleFSLockFactory_SimpleLock0.release();
      simpleFSLockFactory_SimpleLock0.release();
      simpleFSLockFactory_SimpleLock0.toString();
      simpleFSLockFactory_SimpleLock0.getObtainFailedReason();
      // Undeclared exception!
      try { 
        simpleFSLockFactory_SimpleLock0.tryLock();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lockDir has to be a directory: 5t\"12
         //
         verifyException("com.graphhopper.storage.SimpleFSLockFactory$SimpleLock", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleFSLockFactory simpleFSLockFactory0 = new SimpleFSLockFactory();
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      simpleFSLockFactory0.setLockDir(file0);
  }
}
