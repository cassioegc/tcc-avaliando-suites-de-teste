/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:40:35 GMT 2021
 */

package com.graphhopper.storage;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.storage.IntsRef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntsRef_ESTest extends IntsRef_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4456);
      intArray0[1] = (-1);
      intArray0[2] = 779;
      intArray0[3] = 93;
      intArray0[4] = 797;
      IntsRef intsRef0 = new IntsRef(intArray0, 1, 1);
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      intsRef0.intsEquals(intsRef1);
      intsRef1.toString();
      intsRef0.compareTo(intsRef1);
      intsRef0.hashCode();
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef1);
      intsRef2.hashCode();
      IntsRef.deepCopyOf(intsRef0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      intsRef0.toString();
      intsRef0.toString();
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      intsRef0.EMPTY.toString();
      intsRef1.toString();
      intsRef0.hashCode();
      intsRef0.isValid();
      intsRef0.compareTo(intsRef1);
      intsRef1.toString();
      intsRef0.EMPTY.isValid();
      intsRef0.isEmpty();
      intsRef1.compareTo(intsRef1);
      intsRef1.hashCode();
      intsRef1.compareTo(intsRef0);
      intsRef0.isEmpty();
      intsRef1.equals("[]");
      IntsRef.deepCopyOf(intsRef1);
      intsRef1.intsEquals(intsRef0);
      // Undeclared exception!
      try { 
        intsRef1.compareTo((IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      intsRef0.EMPTY.toString();
      IntsRef intsRef1 = IntsRef.EMPTY;
      intsRef1.EMPTY.toString();
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef0);
      intsRef0.EMPTY.toString();
      intsRef0.intsEquals(intsRef1);
      intsRef1.toString();
      intsRef1.compareTo(intsRef0);
      intsRef2.isEmpty();
      intsRef1.isValid();
      IntsRef intsRef3 = IntsRef.EMPTY;
      intsRef0.compareTo(intsRef3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1091;
      intArray0[1] = 32;
      IntsRef intsRef0 = new IntsRef(intArray0, 1, 1);
      intsRef0.EMPTY.isValid();
      Object object0 = new Object();
      intsRef0.equals(object0);
      IntsRef intsRef1 = IntsRef.EMPTY;
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef0);
      intsRef2.toString();
      intsRef0.intsEquals(intsRef1);
      IntsRef.deepCopyOf(intsRef2);
      IntsRef.deepCopyOf(intsRef2);
      intsRef2.isEmpty();
      intsRef2.toString();
      intsRef1.toString();
      intsRef2.isEmpty();
      IntsRef intsRef3 = IntsRef.deepCopyOf(intsRef2);
      intsRef3.toString();
      intsRef0.hashCode();
      intsRef3.EMPTY.toString();
      intsRef2.toString();
      intsRef0.compareTo(intsRef2);
      IntsRef.deepCopyOf(intsRef1);
      intsRef2.toString();
      intsRef3.hashCode();
      intsRef0.toString();
      intsRef3.compareTo(intsRef1);
      intsRef1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      IntsRef intsRef0 = new IntsRef(intArray0, 1, 0);
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      intsRef1.compareTo(intsRef0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(1643);
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(1643, intsRef0.length);
      assertNotNull(intsRef0);
      
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(1643, intsRef0.length);
      assertEquals(1643, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean0 = intsRef1.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean0);
      assertEquals(0, intsRef0.offset);
      assertEquals(1643, intsRef0.length);
      assertEquals(1643, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      String string0 = intsRef1.toString();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(1643, intsRef0.length);
      assertEquals(1643, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(string0);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean1 = intsRef0.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean1);
      assertEquals(0, intsRef0.offset);
      assertEquals(1643, intsRef0.length);
      assertTrue(boolean1 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(1643, intsRef0.length);
      assertEquals(1643, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef2.offset);
      assertEquals(1643, intsRef2.length);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(intsRef2.equals((Object)intsRef1));
      assertTrue(intsRef2.equals((Object)intsRef0));
      assertNotNull(intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = intsRef0.equals(object0);
      assertTrue(intsRef0.isEmpty());
      assertFalse(boolean2);
      assertEquals(0, intsRef0.offset);
      assertEquals(1643, intsRef0.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      
      boolean boolean3 = intsRef1.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean3);
      assertEquals(0, intsRef0.offset);
      assertEquals(1643, intsRef0.length);
      assertEquals(1643, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef0);
      
      IntsRef intsRef3 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(1643, intsRef0.length);
      assertEquals(1643, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertNotNull(intsRef3);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef3, intsRef0);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef2);
      
      intsRef3.hashCode();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(1643, intsRef0.length);
      assertEquals(1643, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertTrue(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertTrue(intsRef3.equals((Object)intsRef2));
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef3, intsRef0);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef2);
      
      IntsRef intsRef4 = null;
      try {
        intsRef4 = new IntsRef(intsRef0.ints, 1643, 1643);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // offset+length out of bounds: offset=1643,length=1643,ints.length=1643
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1907;
      intArray0[2] = (-231);
      intArray0[3] = 3646;
      intArray0[4] = 0;
      intArray0[5] = (-1698);
      intArray0[6] = 0;
      intArray0[7] = 1;
      intArray0[8] = (-1);
      IntsRef intsRef0 = new IntsRef(intArray0, 0, 0);
      assertFalse(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertArrayEquals(new int[] {0, 1907, (-231), 3646, 0, (-1698), 0, 1, (-1)}, intArray0);
      assertNotNull(intsRef0);
      assertEquals(9, intArray0.length);
      
      String string0 = intsRef0.toString();
      assertFalse(intsRef0.isEmpty());
      assertEquals("[]", string0);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertArrayEquals(new int[] {0, 1907, (-231), 3646, 0, (-1698), 0, 1, (-1)}, intArray0);
      assertNotNull(string0);
      assertEquals(9, intArray0.length);
      
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      assertFalse(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertArrayEquals(new int[] {0, 1907, (-231), 3646, 0, (-1698), 0, 1, (-1)}, intArray0);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertEquals(9, intArray0.length);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      int int0 = intsRef1.compareTo(intsRef0);
      assertFalse(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, int0);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertArrayEquals(new int[] {0, 1907, (-231), 3646, 0, (-1698), 0, 1, (-1)}, intArray0);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertEquals(9, intArray0.length);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean0 = intsRef0.isEmpty();
      assertFalse(intsRef0.isEmpty());
      assertFalse(boolean0);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertArrayEquals(new int[] {0, 1907, (-231), 3646, 0, (-1698), 0, 1, (-1)}, intArray0);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertEquals(9, intArray0.length);
      assertNotSame(intsRef0, intsRef1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(3454);
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(3454, intsRef0.length);
      assertNotNull(intsRef0);
      
      boolean boolean0 = intsRef0.EMPTY.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean0);
      assertEquals(0, intsRef0.offset);
      assertEquals(3454, intsRef0.length);
      
      intsRef0.hashCode();
      assertEquals(0, intsRef0.offset);
      assertEquals(3454, intsRef0.length);
      
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(3454, intsRef0.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(3454, intsRef1.length);
      assertNotNull(intsRef1);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef1);
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(3454, intsRef0.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(3454, intsRef1.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(3454, intsRef2.length);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(intsRef2.equals((Object)intsRef0));
      assertNotNull(intsRef2);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      
      // Undeclared exception!
      intsRef0.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(1);
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertNotNull(intsRef0);
      
      boolean boolean0 = intsRef0.EMPTY.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean0);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      
      boolean boolean1 = intsRef0.EMPTY.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean1);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertTrue(boolean1 == boolean0);
      
      String string0 = intsRef0.toString();
      assertTrue(intsRef0.isEmpty());
      assertEquals("[0]", string0);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertNotNull(string0);
      
      boolean boolean2 = intsRef0.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean2);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string1 = intsRef0.EMPTY.toString();
      assertTrue(intsRef0.isEmpty());
      assertEquals("[]", string1);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      intsRef0.hashCode();
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      
      String string2 = intsRef0.EMPTY.toString();
      assertTrue(intsRef0.isEmpty());
      assertEquals("[]", string2);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      IntsRef intsRef1 = IntsRef.EMPTY;
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean3 = intsRef1.EMPTY.isValid();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean3);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean4 = intsRef0.intsEquals(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertFalse(boolean4);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertEquals(1, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef2.equals((Object)intsRef0));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertNotNull(intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      
      boolean boolean5 = intsRef1.isValid();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean5);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      
      boolean boolean6 = intsRef1.EMPTY.isValid();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean6);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      
      boolean boolean7 = intsRef1.EMPTY.isValid();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean7);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean5);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      
      IntsRef intsRef3 = IntsRef.deepCopyOf(intsRef1);
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertFalse(intsRef3.equals((Object)intsRef2));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertNotNull(intsRef3);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef0);
      
      String string3 = intsRef3.toString();
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals("[]", string3);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef3.equals((Object)intsRef2));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertNotNull(string3);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef0);
      
      String string4 = intsRef1.toString();
      assertTrue(intsRef1.isEmpty());
      assertEquals("[]", string4);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertNotNull(string4);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      
      intsRef0.hashCode();
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      
      boolean boolean8 = intsRef1.equals(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertFalse(boolean8);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean0);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean4);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      
      boolean boolean9 = intsRef1.EMPTY.isValid();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean9);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertFalse(boolean9 == boolean8);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean2);
      assertFalse(boolean9 == boolean4);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      
      boolean boolean10 = intsRef0.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean10);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertTrue(boolean10 == boolean6);
      assertTrue(boolean10 == boolean9);
      assertTrue(boolean10 == boolean1);
      assertTrue(boolean10 == boolean2);
      assertFalse(boolean10 == boolean4);
      assertTrue(boolean10 == boolean3);
      assertFalse(boolean10 == boolean8);
      assertTrue(boolean10 == boolean7);
      assertTrue(boolean10 == boolean0);
      assertTrue(boolean10 == boolean5);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      
      boolean boolean11 = intsRef0.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean11);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertTrue(boolean11 == boolean9);
      assertTrue(boolean11 == boolean6);
      assertFalse(boolean11 == boolean4);
      assertTrue(boolean11 == boolean2);
      assertTrue(boolean11 == boolean0);
      assertTrue(boolean11 == boolean1);
      assertTrue(boolean11 == boolean3);
      assertFalse(boolean11 == boolean8);
      assertTrue(boolean11 == boolean7);
      assertTrue(boolean11 == boolean10);
      assertTrue(boolean11 == boolean5);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      
      boolean boolean12 = intsRef0.EMPTY.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean12);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertTrue(boolean12 == boolean11);
      assertTrue(boolean12 == boolean2);
      assertTrue(boolean12 == boolean6);
      assertTrue(boolean12 == boolean1);
      assertTrue(boolean12 == boolean7);
      assertTrue(boolean12 == boolean10);
      assertTrue(boolean12 == boolean0);
      assertTrue(boolean12 == boolean5);
      assertFalse(boolean12 == boolean4);
      assertTrue(boolean12 == boolean3);
      assertFalse(boolean12 == boolean8);
      assertTrue(boolean12 == boolean9);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      
      boolean boolean13 = intsRef0.intsEquals(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertFalse(boolean13);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(boolean13 == boolean10);
      assertFalse(boolean13 == boolean9);
      assertFalse(boolean13 == boolean12);
      assertTrue(boolean13 == boolean4);
      assertFalse(boolean13 == boolean0);
      assertFalse(boolean13 == boolean7);
      assertTrue(boolean13 == boolean8);
      assertFalse(boolean13 == boolean5);
      assertFalse(boolean13 == boolean3);
      assertFalse(boolean13 == boolean2);
      assertFalse(boolean13 == boolean6);
      assertFalse(boolean13 == boolean11);
      assertFalse(boolean13 == boolean1);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      
      boolean boolean14 = intsRef0.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean14);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(boolean14 == boolean4);
      assertTrue(boolean14 == boolean1);
      assertFalse(boolean14 == boolean13);
      assertTrue(boolean14 == boolean2);
      assertTrue(boolean14 == boolean10);
      assertTrue(boolean14 == boolean5);
      assertTrue(boolean14 == boolean7);
      assertTrue(boolean14 == boolean0);
      assertTrue(boolean14 == boolean3);
      assertFalse(boolean14 == boolean8);
      assertTrue(boolean14 == boolean11);
      assertTrue(boolean14 == boolean9);
      assertTrue(boolean14 == boolean6);
      assertTrue(boolean14 == boolean12);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      
      boolean boolean15 = intsRef3.isValid();
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertTrue(boolean15);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertTrue(boolean15 == boolean14);
      assertFalse(boolean15 == boolean4);
      assertTrue(boolean15 == boolean5);
      assertFalse(boolean15 == boolean13);
      assertTrue(boolean15 == boolean2);
      assertTrue(boolean15 == boolean6);
      assertTrue(boolean15 == boolean1);
      assertTrue(boolean15 == boolean12);
      assertTrue(boolean15 == boolean11);
      assertTrue(boolean15 == boolean9);
      assertTrue(boolean15 == boolean3);
      assertFalse(boolean15 == boolean8);
      assertTrue(boolean15 == boolean7);
      assertTrue(boolean15 == boolean0);
      assertTrue(boolean15 == boolean10);
      assertFalse(intsRef3.equals((Object)intsRef2));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef0);
      
      IntsRef intsRef4 = IntsRef.deepCopyOf(intsRef3);
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef4.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertTrue(intsRef4.equals((Object)intsRef1));
      assertFalse(intsRef4.equals((Object)intsRef0));
      assertTrue(intsRef4.equals((Object)intsRef3));
      assertFalse(intsRef4.equals((Object)intsRef2));
      assertFalse(intsRef3.equals((Object)intsRef2));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertNotNull(intsRef4);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef4);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef4, intsRef1);
      assertNotSame(intsRef4, intsRef0);
      assertNotSame(intsRef4, intsRef2);
      assertNotSame(intsRef4, intsRef3);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef4);
      assertNotSame(intsRef3, intsRef0);
      
      int int0 = intsRef2.compareTo(intsRef3);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals(1, int0);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(1, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertTrue(intsRef1.equals((Object)intsRef4));
      assertTrue(intsRef2.equals((Object)intsRef0));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef2.equals((Object)intsRef4));
      assertFalse(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef3.equals((Object)intsRef2));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef4));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef4);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef4);
      assertNotSame(intsRef2, intsRef3);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef4);
      assertNotSame(intsRef3, intsRef0);
      
      String string5 = intsRef3.toString();
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals("[]", string5);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertTrue(intsRef1.equals((Object)intsRef4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(intsRef3.equals((Object)intsRef2));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef4));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertNotNull(string5);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef4);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef4);
      assertNotSame(intsRef3, intsRef0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(31);
      assertTrue(intsRef0.isEmpty());
      assertEquals(31, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(intsRef0);
      
      IntsRef intsRef1 = IntsRef.EMPTY;
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean0 = intsRef1.EMPTY.isValid();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean0);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean1 = intsRef0.intsEquals(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertFalse(boolean1);
      assertEquals(31, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean2 = intsRef0.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean2);
      assertEquals(31, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      
      String string0 = intsRef0.toString();
      assertTrue(intsRef0.isEmpty());
      assertEquals("[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]", string0);
      assertEquals(31, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertNotNull(string0);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean3 = intsRef1.isEmpty();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean3);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNotSame(intsRef1, intsRef0);
      
      IntsRef intsRef2 = IntsRef.EMPTY;
      assertTrue(intsRef2.isEmpty());
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertNotNull(intsRef2);
      assertNotSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      
      IntsRef intsRef3 = IntsRef.deepCopyOf(intsRef2);
      assertTrue(intsRef2.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertTrue(intsRef3.equals((Object)intsRef2));
      assertNotNull(intsRef3);
      assertNotSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef3);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef0);
      
      String string1 = intsRef3.toString();
      assertTrue(intsRef2.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals("[]", string1);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertTrue(intsRef3.equals((Object)intsRef2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef3);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef0);
      
      boolean boolean4 = intsRef0.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean4);
      assertEquals(31, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean5 = intsRef1.intsEquals(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertFalse(boolean5);
      assertEquals(31, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef1);
      assertSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef0);
      
      String string2 = intsRef0.toString();
      assertTrue(intsRef0.isEmpty());
      assertEquals("[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]", string2);
      assertEquals(31, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean6 = intsRef1.EMPTY.isValid();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean6);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean7 = intsRef1.isEmpty();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean7);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean4);
      assertSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef0);
      
      int int0 = intsRef1.compareTo(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals((-31), int0);
      assertEquals(31, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef1);
      assertSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef0);
      
      IntsRef intsRef4 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef4.isEmpty());
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef4.offset);
      assertEquals(31, intsRef4.length);
      assertEquals(31, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertFalse(intsRef4.equals((Object)intsRef2));
      assertFalse(intsRef4.equals((Object)intsRef3));
      assertTrue(intsRef4.equals((Object)intsRef0));
      assertFalse(intsRef4.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertNotNull(intsRef4);
      assertNotSame(intsRef4, intsRef2);
      assertNotSame(intsRef4, intsRef0);
      assertNotSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef4);
      
      boolean boolean8 = intsRef2.isEmpty();
      assertTrue(intsRef2.isEmpty());
      assertTrue(boolean8);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean2);
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertFalse(intsRef2.equals((Object)intsRef4));
      assertNotSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef3);
      assertNotSame(intsRef2, intsRef4);
      
      String string3 = intsRef1.toString();
      assertTrue(intsRef1.isEmpty());
      assertEquals("[]", string3);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef1.equals((Object)intsRef4));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertNotSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean9 = intsRef1.isEmpty();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean9);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef1.equals((Object)intsRef4));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(boolean9 == boolean1);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean4);
      assertFalse(boolean9 == boolean5);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9 == boolean3);
      assertNotSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean10 = intsRef0.equals(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertFalse(boolean10);
      assertEquals(31, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef1.equals((Object)intsRef4));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(boolean10 == boolean7);
      assertFalse(boolean10 == boolean0);
      assertTrue(boolean10 == boolean5);
      assertFalse(boolean10 == boolean6);
      assertTrue(boolean10 == boolean1);
      assertFalse(boolean10 == boolean2);
      assertFalse(boolean10 == boolean3);
      assertFalse(boolean10 == boolean9);
      assertFalse(boolean10 == boolean8);
      assertFalse(boolean10 == boolean4);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean11 = intsRef2.isEmpty();
      assertTrue(intsRef2.isEmpty());
      assertTrue(boolean11);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertTrue(boolean11 == boolean9);
      assertTrue(boolean11 == boolean7);
      assertFalse(boolean11 == boolean10);
      assertTrue(boolean11 == boolean0);
      assertFalse(boolean11 == boolean5);
      assertTrue(boolean11 == boolean8);
      assertTrue(boolean11 == boolean3);
      assertTrue(boolean11 == boolean4);
      assertFalse(boolean11 == boolean1);
      assertTrue(boolean11 == boolean2);
      assertTrue(boolean11 == boolean6);
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertFalse(intsRef2.equals((Object)intsRef4));
      assertNotSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef3);
      assertNotSame(intsRef2, intsRef4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean12 = intsRef1.equals(object0);
      assertTrue(intsRef1.isEmpty());
      assertFalse(boolean12);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef1.equals((Object)intsRef4));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(boolean12 == boolean3);
      assertFalse(boolean12 == boolean8);
      assertFalse(boolean12 == boolean6);
      assertTrue(boolean12 == boolean5);
      assertTrue(boolean12 == boolean1);
      assertFalse(boolean12 == boolean9);
      assertFalse(boolean12 == boolean4);
      assertFalse(boolean12 == boolean7);
      assertFalse(boolean12 == boolean2);
      assertTrue(boolean12 == boolean10);
      assertFalse(boolean12 == boolean11);
      assertFalse(boolean12 == boolean0);
      assertNotSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean13 = intsRef4.equals((Object) null);
      assertTrue(intsRef4.isEmpty());
      assertTrue(intsRef0.isEmpty());
      assertFalse(boolean13);
      assertEquals(0, intsRef4.offset);
      assertEquals(31, intsRef4.length);
      assertEquals(31, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertFalse(intsRef4.equals((Object)intsRef2));
      assertFalse(intsRef4.equals((Object)intsRef3));
      assertTrue(intsRef4.equals((Object)intsRef0));
      assertFalse(intsRef4.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef4));
      assertFalse(boolean13 == boolean9);
      assertFalse(boolean13 == boolean0);
      assertFalse(boolean13 == boolean8);
      assertFalse(boolean13 == boolean3);
      assertTrue(boolean13 == boolean10);
      assertTrue(boolean13 == boolean12);
      assertFalse(boolean13 == boolean4);
      assertTrue(boolean13 == boolean5);
      assertFalse(boolean13 == boolean11);
      assertFalse(boolean13 == boolean6);
      assertFalse(boolean13 == boolean7);
      assertTrue(boolean13 == boolean1);
      assertFalse(boolean13 == boolean2);
      assertNotSame(intsRef4, intsRef2);
      assertNotSame(intsRef4, intsRef0);
      assertNotSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(2691);
      assertTrue(intsRef0.isEmpty());
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(intsRef0);
      
      boolean boolean0 = intsRef0.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean0);
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      
      IntsRef intsRef1 = IntsRef.EMPTY;
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean1 = intsRef0.intsEquals(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertFalse(boolean1);
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(2691, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertTrue(intsRef2.equals((Object)intsRef0));
      assertNotNull(intsRef2);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      
      IntsRef intsRef3 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(2691, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef3.equals((Object)intsRef0));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertNotNull(intsRef3);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef0);
      
      boolean boolean2 = intsRef2.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertTrue(boolean2);
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(2691, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef3);
      
      intsRef1.hashCode();
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef3));
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      
      IntsRef intsRef4 = IntsRef.deepCopyOf(intsRef1);
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef4.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef4.offset);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef4.equals((Object)intsRef3));
      assertFalse(intsRef4.equals((Object)intsRef2));
      assertFalse(intsRef4.equals((Object)intsRef0));
      assertTrue(intsRef4.equals((Object)intsRef1));
      assertNotNull(intsRef4);
      assertNotSame(intsRef1, intsRef4);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef2);
      assertNotSame(intsRef4, intsRef0);
      assertNotSame(intsRef4, intsRef1);
      
      boolean boolean3 = intsRef0.EMPTY.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean3);
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertFalse(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean4 = intsRef2.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertTrue(boolean4);
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(2691, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertFalse(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef4));
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef2, intsRef4);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef3);
      
      String string0 = intsRef3.EMPTY.toString();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals("[]", string0);
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(2691, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef3.equals((Object)intsRef4));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertTrue(intsRef3.equals((Object)intsRef2));
      assertNotNull(string0);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef3, intsRef4);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef0);
      
      int int0 = intsRef1.compareTo(intsRef2);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertEquals((-2691), int0);
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(2691, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertFalse(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertTrue(intsRef1.equals((Object)intsRef4));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef4));
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef4);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef2, intsRef4);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef3);
      
      boolean boolean5 = intsRef1.isValid();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean5);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertTrue(intsRef1.equals((Object)intsRef4));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef3));
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertNotSame(intsRef1, intsRef4);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      
      int int1 = intsRef2.compareTo(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertEquals(2691, int1);
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(2691, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertFalse(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertTrue(intsRef1.equals((Object)intsRef4));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef4));
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(int1 == int0);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef4);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef2, intsRef4);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef3);
      
      boolean boolean6 = intsRef3.EMPTY.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertTrue(boolean6);
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(2691, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef3.equals((Object)intsRef4));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertTrue(intsRef3.equals((Object)intsRef2));
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef3, intsRef4);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef0);
      
      boolean boolean7 = intsRef2.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertTrue(boolean7);
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(2691, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean5);
      assertFalse(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef4));
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef2, intsRef4);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef3);
      
      int int2 = intsRef3.hashCode();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals(2691, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(2691, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(intsRef3.equals((Object)intsRef4));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertTrue(intsRef3.equals((Object)intsRef2));
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef3, intsRef4);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef0);
      
      int int3 = 0;
      IntsRef intsRef5 = null;
      try {
        intsRef5 = new IntsRef(int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use instance EMPTY instead of capacity 0
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(intsRef0);
      
      IntsRef intsRef1 = null;
      boolean boolean0 = intsRef0.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean0);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      
      String string0 = intsRef0.EMPTY.toString();
      assertTrue(intsRef0.isEmpty());
      assertEquals("[]", string0);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        intsRef0.intsEquals((IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntsRef intsRef0 = null;
      try {
        intsRef0 = new IntsRef((int[]) null, 0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // ints is null
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-622);
      intArray0[3] = 0;
      IntsRef intsRef0 = new IntsRef(intArray0, 0, 0);
      assertFalse(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertArrayEquals(new int[] {0, (-1), (-622), 0}, intArray0);
      assertNotNull(intsRef0);
      assertEquals(4, intArray0.length);
      
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      assertFalse(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertArrayEquals(new int[] {0, (-1), (-622), 0}, intArray0);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertEquals(4, intArray0.length);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      int int0 = intsRef0.compareTo(intsRef1);
      assertFalse(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, int0);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertArrayEquals(new int[] {0, (-1), (-622), 0}, intArray0);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertEquals(4, intArray0.length);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean0 = intsRef1.isValid();
      assertFalse(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean0);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertArrayEquals(new int[] {0, (-1), (-622), 0}, intArray0);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertEquals(4, intArray0.length);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean1 = intsRef1.EMPTY.isValid();
      assertFalse(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean1);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertArrayEquals(new int[] {0, (-1), (-622), 0}, intArray0);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean1 == boolean0);
      assertEquals(4, intArray0.length);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean2 = intsRef0.EMPTY.isValid();
      assertFalse(intsRef0.isEmpty());
      assertTrue(boolean2);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertArrayEquals(new int[] {0, (-1), (-622), 0}, intArray0);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, intArray0.length);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean3 = intsRef0.isEmpty();
      assertFalse(intsRef0.isEmpty());
      assertFalse(boolean3);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertArrayEquals(new int[] {0, (-1), (-622), 0}, intArray0);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(4, intArray0.length);
      assertNotSame(intsRef0, intsRef1);
      
      int int1 = intsRef1.hashCode();
      assertFalse(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertArrayEquals(new int[] {0, (-1), (-622), 0}, intArray0);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(int1 == int0);
      assertEquals(4, intArray0.length);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      String string0 = intsRef1.toString();
      assertFalse(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals("[]", string0);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertArrayEquals(new int[] {0, (-1), (-622), 0}, intArray0);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertNotNull(intsRef0);
      
      boolean boolean0 = intsRef0.EMPTY.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean0);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      
      boolean boolean1 = intsRef0.equals((Object) null);
      assertTrue(intsRef0.isEmpty());
      assertFalse(boolean1);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertFalse(boolean1 == boolean0);
      
      IntsRef intsRef1 = IntsRef.EMPTY;
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertNotNull(intsRef1);
      assertSame(intsRef1, intsRef0);
      
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef1);
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertTrue(intsRef2.equals((Object)intsRef1));
      assertTrue(intsRef2.equals((Object)intsRef0));
      assertNotNull(intsRef2);
      assertSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      
      IntsRef intsRef3 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef3.equals((Object)intsRef2));
      assertTrue(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertNotNull(intsRef3);
      assertNotSame(intsRef0, intsRef2);
      assertSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef3, intsRef0);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef2);
      
      boolean boolean2 = intsRef3.EMPTY.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertTrue(boolean2);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef3.equals((Object)intsRef2));
      assertTrue(intsRef3.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(intsRef0, intsRef2);
      assertSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef3, intsRef0);
      assertNotSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef2);
      
      boolean boolean3 = intsRef0.intsEquals(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean3);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNotSame(intsRef0, intsRef2);
      assertSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      
      boolean boolean4 = intsRef1.isValid();
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean4);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertNotSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      
      boolean boolean5 = intsRef0.equals(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean5);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef3));
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef3));
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertNotSame(intsRef0, intsRef2);
      assertSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3059;
      intArray0[1] = 1656;
      intArray0[2] = 2600;
      IntsRef intsRef0 = null;
      try {
        intsRef0 = new IntsRef(intArray0, 3059, (-1700));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // length is negative: -1700
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-1390);
      IntsRef intsRef0 = null;
      try {
        intsRef0 = new IntsRef((-1390));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(3428);
      assertTrue(intsRef0.isEmpty());
      assertEquals(3428, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(intsRef0);
      
      intsRef0.isEmpty();
      intsRef0.isValid();
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      intsRef0.hashCode();
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef0);
      intsRef2.isValid();
      intsRef0.equals(intsRef2);
      intsRef1.equals(intsRef2);
      IntsRef intsRef3 = IntsRef.deepCopyOf(intsRef1);
      IntsRef.deepCopyOf(intsRef3);
      IntsRef.deepCopyOf(intsRef3);
      intsRef2.isValid();
      // Undeclared exception!
      intsRef2.toString();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[0];
      IntsRef intsRef0 = null;
      try {
        intsRef0 = new IntsRef(intArray0, (-692), (-692));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // length is negative: -692
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(intsRef0);
      
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      IntsRef intsRef2 = new IntsRef(384);
      assertTrue(intsRef2.isEmpty());
      assertEquals(384, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertNotNull(intsRef2);
      
      boolean boolean0 = intsRef0.EMPTY.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean0);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      
      IntsRef intsRef3 = IntsRef.deepCopyOf(intsRef2);
      assertTrue(intsRef2.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals(384, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(384, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef2));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertNotNull(intsRef3);
      assertNotSame(intsRef2, intsRef3);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef0);
      assertNotSame(intsRef3, intsRef1);
      
      boolean boolean1 = intsRef3.isValid();
      assertTrue(intsRef2.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertTrue(boolean1);
      assertEquals(384, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(384, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertTrue(intsRef3.equals((Object)intsRef2));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(intsRef2, intsRef3);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef0);
      assertNotSame(intsRef3, intsRef1);
      
      IntsRef intsRef4 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef4.isEmpty());
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef4.length);
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef4.equals((Object)intsRef3));
      assertFalse(intsRef4.equals((Object)intsRef2));
      assertTrue(intsRef4.equals((Object)intsRef0));
      assertTrue(intsRef4.equals((Object)intsRef1));
      assertNotNull(intsRef4);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef4, intsRef0);
      assertNotSame(intsRef4, intsRef1);
      assertNotSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef2);
      
      IntsRef intsRef5 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef5.isEmpty());
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef5.length);
      assertEquals(0, intsRef5.offset);
      assertTrue(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef5.equals((Object)intsRef2));
      assertTrue(intsRef5.equals((Object)intsRef1));
      assertTrue(intsRef5.equals((Object)intsRef4));
      assertFalse(intsRef5.equals((Object)intsRef3));
      assertTrue(intsRef5.equals((Object)intsRef0));
      assertNotNull(intsRef5);
      assertNotSame(intsRef0, intsRef5);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef5, intsRef2);
      assertNotSame(intsRef5, intsRef4);
      assertNotSame(intsRef5, intsRef0);
      assertNotSame(intsRef5, intsRef1);
      assertNotSame(intsRef5, intsRef3);
      
      int int0 = intsRef0.compareTo(intsRef3);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertEquals((-384), int0);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(384, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(384, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertTrue(intsRef0.equals((Object)intsRef5));
      assertTrue(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef4));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertFalse(intsRef2.equals((Object)intsRef5));
      assertFalse(intsRef3.equals((Object)intsRef5));
      assertTrue(intsRef3.equals((Object)intsRef2));
      assertFalse(intsRef3.equals((Object)intsRef4));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertNotSame(intsRef0, intsRef5);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef2, intsRef3);
      assertNotSame(intsRef2, intsRef4);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef5);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef5);
      assertNotSame(intsRef3, intsRef4);
      assertNotSame(intsRef3, intsRef0);
      assertNotSame(intsRef3, intsRef1);
      
      String string0 = intsRef1.toString();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals("[]", string0);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertTrue(intsRef0.equals((Object)intsRef5));
      assertTrue(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(intsRef1.equals((Object)intsRef4));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef5));
      assertFalse(intsRef1.equals((Object)intsRef3));
      assertNotNull(string0);
      assertNotSame(intsRef0, intsRef5);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef5);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef4);
      
      boolean boolean2 = intsRef3.isEmpty();
      assertTrue(intsRef2.isEmpty());
      assertTrue(intsRef3.isEmpty());
      assertTrue(boolean2);
      assertEquals(384, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(384, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef2.equals((Object)intsRef4));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertFalse(intsRef2.equals((Object)intsRef5));
      assertFalse(intsRef3.equals((Object)intsRef5));
      assertFalse(intsRef3.equals((Object)intsRef4));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(intsRef2, intsRef3);
      assertNotSame(intsRef2, intsRef4);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef5);
      assertNotSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef5);
      assertNotSame(intsRef3, intsRef4);
      assertNotSame(intsRef3, intsRef0);
      assertNotSame(intsRef3, intsRef1);
      
      boolean boolean3 = intsRef1.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean3);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertTrue(intsRef0.equals((Object)intsRef5));
      assertTrue(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(intsRef1.equals((Object)intsRef4));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef5));
      assertFalse(intsRef1.equals((Object)intsRef3));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertNotSame(intsRef0, intsRef5);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef5);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef4);
      
      boolean boolean4 = intsRef2.isEmpty();
      assertTrue(intsRef2.isEmpty());
      assertTrue(boolean4);
      assertEquals(384, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertFalse(intsRef2.equals((Object)intsRef4));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertFalse(intsRef2.equals((Object)intsRef5));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertNotSame(intsRef2, intsRef3);
      assertNotSame(intsRef2, intsRef4);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef5);
      
      String string1 = intsRef1.toString();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals("[]", string1);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertTrue(intsRef0.equals((Object)intsRef5));
      assertTrue(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(intsRef1.equals((Object)intsRef4));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef5));
      assertFalse(intsRef1.equals((Object)intsRef3));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(intsRef0, intsRef5);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef5);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef4);
      
      int int1 = intsRef0.compareTo(intsRef2);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertEquals((-384), int1);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(384, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertTrue(intsRef0.equals((Object)intsRef5));
      assertTrue(intsRef0.equals((Object)intsRef4));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef4));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertTrue(intsRef2.equals((Object)intsRef3));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertFalse(intsRef2.equals((Object)intsRef5));
      assertTrue(int1 == int0);
      assertNotSame(intsRef0, intsRef5);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef0, intsRef3);
      assertNotSame(intsRef0, intsRef4);
      assertNotSame(intsRef2, intsRef3);
      assertNotSame(intsRef2, intsRef4);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef5);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(intsRef0);
      
      boolean boolean0 = intsRef0.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean0);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      
      boolean boolean1 = intsRef0.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean1);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertNotNull(intsRef0);
      
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean0 = intsRef1.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean0);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      String string0 = intsRef0.toString();
      assertTrue(intsRef0.isEmpty());
      assertEquals("[]", string0);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertNotNull(string0);
      assertNotSame(intsRef0, intsRef1);
      
      String string1 = intsRef0.EMPTY.toString();
      assertTrue(intsRef0.isEmpty());
      assertEquals("[]", string1);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean1 = intsRef1.EMPTY.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean1);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean2 = intsRef1.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean2);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      int int0 = intsRef0.compareTo(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, int0);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntsRef intsRef0 = null;
      try {
        intsRef0 = new IntsRef(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use instance EMPTY instead of capacity 0
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntsRef intsRef0 = null;
      // Undeclared exception!
      try { 
        IntsRef.deepCopyOf((IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 3131;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-230);
      intArray0[5] = 2247;
      intArray0[6] = 0;
      intArray0[7] = 0;
      IntsRef intsRef0 = null;
      try {
        intsRef0 = new IntsRef(intArray0, (-1), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // offset is negative: -1
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(3122);
      assertTrue(intsRef0.isEmpty());
      assertEquals(3122, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(intsRef0);
      
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(3122, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(3122, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertEquals(3122, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(3122, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef2.equals((Object)intsRef0));
      assertNotNull(intsRef2);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      
      boolean boolean0 = intsRef0.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean0);
      assertEquals(3122, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      
      intsRef0.hashCode();
      assertTrue(intsRef0.isEmpty());
      assertEquals(3122, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean1 = intsRef0.intsEquals(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean1);
      assertEquals(3122, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(3122, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      
      boolean boolean2 = intsRef1.intsEquals(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean2);
      assertEquals(3122, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(3122, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(32);
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(32, intsRef0.length);
      assertNotNull(intsRef0);
      
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(32, intsRef0.length);
      assertEquals(32, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      int int0 = intsRef1.compareTo(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, int0);
      assertEquals(0, intsRef0.offset);
      assertEquals(32, intsRef0.length);
      assertEquals(32, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(565);
      assertTrue(intsRef0.isEmpty());
      assertEquals(565, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(intsRef0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertNotNull(intsRef0);
      
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean0 = intsRef0.intsEquals(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean0);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef0.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(971);
      assertTrue(intsRef0.isEmpty());
      assertEquals(971, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(intsRef0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 971;
      intArray0[1] = 971;
      intArray0[2] = 0;
      intArray0[3] = 971;
      intArray0[4] = 971;
      intArray0[5] = 1;
      intArray0[6] = 971;
      intArray0[7] = 971;
      IntsRef intsRef1 = new IntsRef(intArray0, 1, 1);
      assertFalse(intsRef1.isEmpty());
      assertEquals(1, intsRef1.offset);
      assertEquals(1, intsRef1.length);
      assertArrayEquals(new int[] {971, 971, 0, 971, 971, 1, 971, 971}, intArray0);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertEquals(8, intArray0.length);
      
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef1);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      assertEquals(1, intsRef1.offset);
      assertEquals(1, intsRef1.length);
      assertEquals(1, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertArrayEquals(new int[] {971, 971, 0, 971, 971, 1, 971, 971}, intArray0);
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertTrue(intsRef2.equals((Object)intsRef1));
      assertNotNull(intsRef2);
      assertEquals(8, intArray0.length);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      
      int int0 = intsRef0.compareTo(intsRef2);
      assertTrue(intsRef0.isEmpty());
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      assertEquals((-1), int0);
      assertEquals(971, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef1.offset);
      assertEquals(1, intsRef1.length);
      assertEquals(1, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertArrayEquals(new int[] {971, 971, 0, 971, 971, 1, 971, 971}, intArray0);
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertTrue(intsRef2.equals((Object)intsRef1));
      assertEquals(8, intArray0.length);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(812);
      assertTrue(intsRef0.isEmpty());
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(intsRef0);
      
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(812, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      String string0 = intsRef1.EMPTY.toString();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals("[]", string0);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(812, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(string0);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      IntsRef intsRef2 = new IntsRef(intsRef0.ints, 812, 0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(812, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertNotNull(intsRef2);
      
      int int0 = intsRef1.compareTo(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, int0);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(812, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      
      boolean boolean0 = intsRef1.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean0);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(812, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      
      boolean boolean1 = intsRef1.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean1);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(812, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      
      int int1 = intsRef0.hashCode();
      assertTrue(intsRef0.isEmpty());
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertTrue(int1 == int0);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean2 = intsRef2.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertTrue(boolean2);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(812, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      
      boolean boolean3 = intsRef2.intsEquals(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertFalse(boolean3);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(812, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(812, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      
      boolean boolean4 = intsRef0.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean4);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      
      int int2 = intsRef2.compareTo(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertEquals((-812), int2);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(812, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(812, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertFalse(int2 == int0);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
      
      boolean boolean5 = intsRef0.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean5);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean6 = intsRef0.intsEquals(intsRef1);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean6);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(812, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef1.equals((Object)intsRef2));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef2);
      
      boolean boolean7 = intsRef2.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef2.isEmpty());
      assertTrue(boolean7);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(812, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertFalse(intsRef0.equals((Object)intsRef2));
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertNotSame(intsRef0, intsRef2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef2, intsRef0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-477);
      intArray0[1] = 616;
      intArray0[2] = (-1884);
      intArray0[3] = 0;
      int int0 = 0;
      intArray0[4] = 0;
      int int1 = 91;
      IntsRef intsRef0 = null;
      try {
        intsRef0 = new IntsRef(intArray0, 91, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // offset out of bounds: 91,ints.length=5
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 255;
      intArray0[5] = (-1);
      intArray0[6] = (-1632);
      intArray0[7] = 31;
      intArray0[8] = 0;
      IntsRef intsRef0 = new IntsRef(intArray0, 0, 1);
      assertFalse(intsRef0.isEmpty());
      assertEquals(0, intsRef0.offset);
      assertEquals(1, intsRef0.length);
      assertArrayEquals(new int[] {0, 1, (-1), 0, 255, (-1), (-1632), 31, 0}, intArray0);
      assertNotNull(intsRef0);
      assertEquals(9, intArray0.length);
      
      IntsRef intsRef1 = null;
      try {
        intsRef1 = new IntsRef(intsRef0.ints, 0, 209);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // length is out of bounds: 209,ints.length=9
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(812);
      assertTrue(intsRef0.isEmpty());
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(intsRef0);
      
      String string0 = intsRef0.EMPTY.toString();
      assertTrue(intsRef0.isEmpty());
      assertEquals("[]", string0);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotNull(string0);
      
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(812, intsRef1.length);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertNotNull(intsRef1);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      int int0 = intsRef0.compareTo(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertEquals(0, int0);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean0 = intsRef0.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean0);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean1 = intsRef0.EMPTY.isValid();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean1);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      
      int int1 = intsRef0.hashCode();
      assertTrue(intsRef0.isEmpty());
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(int1 == int0);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean2 = intsRef1.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean2);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(812, intsRef1.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean3 = intsRef1.intsEquals(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean3);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(812, intsRef1.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean4 = intsRef0.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean4);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      
      int int2 = intsRef1.compareTo(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(0, int2);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(812, intsRef1.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(int2 == int0);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean5 = intsRef1.intsEquals(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean5);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(812, intsRef1.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      boolean boolean6 = intsRef0.intsEquals(intsRef0);
      assertTrue(intsRef0.isEmpty());
      assertTrue(boolean6);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      
      boolean boolean7 = intsRef1.isEmpty();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertTrue(boolean7);
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(812, intsRef1.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean0);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      String string1 = intsRef1.toString();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(812, intsRef1.length);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
      
      String string2 = intsRef1.toString();
      assertTrue(intsRef0.isEmpty());
      assertTrue(intsRef1.isEmpty());
      assertEquals(812, intsRef0.length);
      assertEquals(0, intsRef0.offset);
      assertEquals(0, intsRef1.offset);
      assertEquals(812, intsRef1.length);
      assertTrue(intsRef0.equals((Object)intsRef1));
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(intsRef0, intsRef1);
      assertNotSame(intsRef1, intsRef0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 247;
      intArray0[1] = 247;
      intArray0[3] = (-1);
      IntsRef intsRef0 = null;
      try {
        intsRef0 = new IntsRef(intArray0, 247, (-454));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // length is negative: -454
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      IntsRef intsRef2 = IntsRef.deepCopyOf(intsRef0);
      IntsRef intsRef3 = IntsRef.deepCopyOf(intsRef0);
      IntsRef intsRef4 = IntsRef.deepCopyOf(intsRef2);
      intsRef3.toString();
      intsRef4.intsEquals(intsRef0);
      IntsRef intsRef5 = IntsRef.deepCopyOf(intsRef3);
      intsRef5.EMPTY.toString();
      intsRef2.toString();
      intsRef4.isValid();
      intsRef3.EMPTY.toString();
      intsRef3.EMPTY.toString();
      intsRef2.EMPTY.toString();
      IntsRef intsRef6 = IntsRef.deepCopyOf(intsRef4);
      intsRef3.EMPTY.isValid();
      intsRef6.isValid();
      intsRef3.intsEquals(intsRef0);
      intsRef3.equals(intsRef2);
      intsRef0.compareTo(intsRef1);
      IntsRef intsRef7 = IntsRef.deepCopyOf(intsRef4);
      intsRef4.toString();
      intsRef4.isEmpty();
      intsRef2.compareTo(intsRef7);
      intsRef4.hashCode();
      intsRef2.toString();
      intsRef0.intsEquals(intsRef0);
      intsRef3.isEmpty();
      intsRef4.EMPTY.isValid();
      intsRef5.isValid();
      intsRef4.intsEquals(intsRef6);
      intsRef1.hashCode();
      intsRef7.isValid();
      IntsRef intsRef8 = null;
      try {
        intsRef8 = new IntsRef(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use instance EMPTY instead of capacity 0
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-836);
      int int0 = 0;
      IntsRef intsRef0 = null;
      try {
        intsRef0 = new IntsRef(intArray0, (-836), 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // offset is negative: -836
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IntsRef intsRef0 = null;
      try {
        intsRef0 = new IntsRef((int[]) null, 11, 11);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // ints is null
         //
         verifyException("com.graphhopper.storage.IntsRef", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      IntsRef intsRef1 = IntsRef.deepCopyOf(intsRef0);
      String string0 = intsRef0.toString();
      assertEquals("[]", string0);
      
      boolean boolean0 = intsRef0.isEmpty();
      Object object0 = new Object();
      boolean boolean1 = intsRef1.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertTrue(intsRef1.equals((Object)intsRef0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[2] = 0;
      IntsRef intsRef0 = new IntsRef(intArray0, 0, 0);
      IntsRef intsRef1 = IntsRef.EMPTY;
      int int0 = intsRef0.compareTo(intsRef1);
      intsRef1.EMPTY.isValid();
      intsRef0.EMPTY.isValid();
      boolean boolean0 = intsRef0.isEmpty();
      assertFalse(boolean0);
      
      int int1 = intsRef1.hashCode();
      assertTrue(int1 == int0);
  }
}
