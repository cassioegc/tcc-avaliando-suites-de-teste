/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Apr 04 01:25:26 GMT 2021
 */

package com.graphhopper.routing;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class Router_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.graphhopper.routing.Router"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/cassioegc/tcc/graphhopper.reader-osm/core"); 
    java.lang.System.setProperty("user.home", "/home/cassioegc"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "cassioegc"); 
    java.lang.System.setProperty("user.timezone", ""); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Router_ESTest_scaffolding.class.getClassLoader() ,
      "com.graphhopper.reader.OSMTurnRelation",
      "com.graphhopper.routing.util.RacingBikeFlagEncoder",
      "org.locationtech.jts.geom.CoordinateFilter",
      "com.graphhopper.reader.osm.OSMInput",
      "com.graphhopper.search.StringIndex",
      "com.graphhopper.routing.util.EncodingManager",
      "com.graphhopper.ResponsePath",
      "com.carrotsearch.hppc.IntArrayList",
      "com.graphhopper.routing.util.MotorcycleFlagEncoder",
      "com.carrotsearch.hppc.predicates.ObjectPredicate",
      "com.carrotsearch.hppc.IntObjectHashMap$KeysContainer",
      "com.graphhopper.coll.GHIntLongHashMap",
      "org.locationtech.jts.geom.MultiLineString",
      "com.carrotsearch.hppc.IntIndexedContainer",
      "com.graphhopper.reader.ReaderRelation$Member",
      "com.graphhopper.geohash.SpatialKeyAlgo",
      "com.graphhopper.routing.querygraph.QueryOverlay",
      "com.graphhopper.util.shapes.Shape",
      "com.graphhopper.coll.GHLongHashSet",
      "com.graphhopper.routing.util.AllCHEdgesIterator",
      "com.carrotsearch.hppc.Containers",
      "com.graphhopper.routing.ViaRouting$Result",
      "com.graphhopper.json.Statement",
      "com.carrotsearch.hppc.IntLookupContainer",
      "com.graphhopper.routing.FlexiblePathCalculator",
      "com.carrotsearch.hppc.LongArrayList",
      "com.graphhopper.storage.BaseGraph$EdgeIteratorImpl",
      "com.graphhopper.routing.DefaultBidirPathExtractor",
      "com.graphhopper.routing.util.tour.TourStrategy",
      "com.graphhopper.storage.BaseGraph$AllEdgeIterator",
      "com.carrotsearch.hppc.DoubleContainer",
      "org.locationtech.jts.geom.LinearRing",
      "com.graphhopper.routing.ev.EncodedValue$InitializerConfig",
      "com.carrotsearch.hppc.BitMixer",
      "com.graphhopper.util.exceptions.DetailedIllegalArgumentException",
      "com.carrotsearch.hppc.ObjectContainer",
      "com.graphhopper.config.Profile",
      "com.graphhopper.routing.util.TraversalMode",
      "com.graphhopper.storage.Graph",
      "com.graphhopper.util.exceptions.ConnectionNotFoundException",
      "com.graphhopper.reader.osm.OSMReader",
      "com.graphhopper.util.PointAccess",
      "com.graphhopper.routing.util.parsers.OSMRoadClassLinkParser",
      "com.graphhopper.storage.index.LocationIndexTree$1",
      "com.carrotsearch.hppc.LongLookupContainer",
      "com.graphhopper.storage.StorableProperties",
      "com.graphhopper.storage.CHConfig",
      "com.graphhopper.util.exceptions.PointOutOfBoundsException",
      "org.locationtech.jts.geom.impl.CoordinateArraySequence",
      "com.graphhopper.routing.weighting.AvoidEdgesWeighting",
      "com.graphhopper.coll.GHLongIntBTree$ReturnValue",
      "com.graphhopper.routing.util.parsers.OSMFootNetworkTagParser",
      "com.carrotsearch.hppc.IntObjectHashMap",
      "com.graphhopper.routing.AlgorithmOptions",
      "org.locationtech.jts.geom.MultiPoint",
      "com.graphhopper.routing.ch.PrepareEncoder",
      "com.carrotsearch.hppc.predicates.LongLongPredicate",
      "com.carrotsearch.hppc.cursors.IntCursor",
      "com.graphhopper.routing.ev.DefaultEncodedValueFactory",
      "com.graphhopper.storage.Directory",
      "com.graphhopper.routing.ev.Roundabout",
      "com.graphhopper.reader.dem.ElevationProvider",
      "com.graphhopper.reader.ReaderElement",
      "com.graphhopper.storage.GHNodeAccess",
      "com.graphhopper.util.ViaInstruction",
      "com.graphhopper.util.details.PathDetailsBuilderFactory",
      "com.graphhopper.util.Helper",
      "com.graphhopper.routing.util.WheelchairFlagEncoder",
      "org.locationtech.jts.geom.util.GeometryEditor$GeometryEditorOperation",
      "com.graphhopper.routing.weighting.TurnCostProvider",
      "org.locationtech.jts.geom.Polygon",
      "org.locationtech.jts.geom.Geometry",
      "com.graphhopper.storage.index.LocationIndexTree$EdgeCheck",
      "org.locationtech.jts.geom.MultiPolygon",
      "com.graphhopper.util.Instruction",
      "com.graphhopper.routing.util.parsers.OSMMaxSpeedParser",
      "com.carrotsearch.hppc.IntDoubleMap",
      "com.graphhopper.util.DistanceCalcEuclidean",
      "com.graphhopper.reader.ReaderWay",
      "com.graphhopper.routing.util.HikeFlagEncoder",
      "com.carrotsearch.hppc.ObjectIntMap",
      "com.graphhopper.util.GHUtility",
      "com.graphhopper.util.InstructionList",
      "com.carrotsearch.hppc.IntObjectAssociativeContainer",
      "org.locationtech.jts.util.AssertionFailedException",
      "com.graphhopper.routing.ev.RoadAccess",
      "com.graphhopper.routing.ev.FootNetwork",
      "com.carrotsearch.hppc.procedures.IntObjectProcedure",
      "com.graphhopper.storage.CHGraph",
      "com.graphhopper.storage.IntsRef",
      "com.graphhopper.routing.util.FerrySpeedCalculator",
      "com.graphhopper.routing.AbstractBidirAlgo",
      "com.graphhopper.routing.util.CarFlagEncoder",
      "com.carrotsearch.hppc.procedures.IntDoubleProcedure",
      "com.carrotsearch.hppc.LongSet",
      "com.graphhopper.storage.TurnCostStorage",
      "com.graphhopper.routing.weighting.Weighting",
      "com.graphhopper.routing.util.EncodingManager$AcceptWay",
      "com.carrotsearch.hppc.ObjectLookupContainer",
      "com.graphhopper.routing.PathCalculator",
      "com.graphhopper.routing.util.spatialrules.SpatialRuleLookup",
      "com.graphhopper.util.Translation",
      "com.graphhopper.json.Statement$Keyword",
      "com.graphhopper.routing.util.parsers.TurnCostParser$ExternalInternalMap",
      "com.graphhopper.routing.util.spatialrules.SpatialRuleLookup$1",
      "com.graphhopper.routing.lm.LMConfig",
      "com.graphhopper.reader.PillarInfo",
      "com.graphhopper.storage.DAType$MemRef",
      "com.graphhopper.util.shapes.BBox",
      "com.graphhopper.json.Statement$Op",
      "com.graphhopper.routing.querygraph.QueryGraph",
      "com.carrotsearch.hppc.ArraySizingStrategy",
      "com.carrotsearch.hppc.Containers$1",
      "com.graphhopper.reader.osm.conditional.ConditionalOSMTagInspector",
      "org.locationtech.jts.algorithm.NotRepresentableException",
      "com.graphhopper.storage.GraphEdgeIdFinder$1",
      "com.graphhopper.routing.weighting.AbstractAdjustedWeighting",
      "com.carrotsearch.hppc.procedures.ObjectIntProcedure",
      "com.graphhopper.routing.util.tour.MultiPointTour",
      "com.carrotsearch.hppc.LongIndexedContainer",
      "com.graphhopper.routing.ev.BikeNetwork",
      "org.locationtech.jts.geom.GeometryFilter",
      "com.graphhopper.routing.util.AllEdgesIterator",
      "com.graphhopper.util.CHEdgeExplorer",
      "com.graphhopper.storage.CHGraphImpl",
      "com.graphhopper.routing.util.EdgeFilter",
      "com.graphhopper.routing.ev.EncodedValueFactory",
      "com.graphhopper.storage.RAMDataAccess",
      "org.locationtech.jts.geom.IntersectionMatrix",
      "com.graphhopper.routing.Router",
      "com.graphhopper.routing.ev.RoadClass",
      "org.locationtech.jts.geom.impl.PackedCoordinateSequence",
      "com.carrotsearch.hppc.procedures.LongLongProcedure",
      "com.graphhopper.routing.ev.EnumEncodedValue",
      "org.locationtech.jts.geom.impl.CoordinateArraySequenceFactory",
      "com.graphhopper.routing.util.parsers.OSMRoadEnvironmentParser",
      "com.graphhopper.routing.util.FootFlagEncoder",
      "com.graphhopper.routing.RoutingAlgorithm",
      "com.graphhopper.routing.util.PriorityCode",
      "com.graphhopper.routing.DijkstraBidirectionRef",
      "com.graphhopper.routing.util.parsers.TagParserFactory",
      "com.graphhopper.routing.ev.UnsignedDecimalEncodedValue",
      "com.graphhopper.reader.osm.conditional.DateRange",
      "com.graphhopper.routing.weighting.custom.CustomWeighting",
      "com.graphhopper.debatty.java.stringsimilarity.JaroWinkler",
      "com.graphhopper.coll.LongIntMap",
      "org.locationtech.jts.geom.CoordinateSequence",
      "com.graphhopper.util.DistanceCalc",
      "com.graphhopper.routing.AbstractNonCHBidirAlgo",
      "com.graphhopper.routing.SPTEntry",
      "com.graphhopper.routing.util.parsers.TagParser",
      "com.graphhopper.util.GHUtility$DisabledEdgeIterator",
      "com.graphhopper.routing.weighting.DefaultTurnCostProvider",
      "com.graphhopper.routing.weighting.TurnCostProvider$1",
      "com.graphhopper.routing.ev.StringEncodedValue",
      "com.graphhopper.routing.AlgorithmOptions$Builder",
      "org.locationtech.jts.geom.Point",
      "com.graphhopper.reader.OSMTurnRelation$Type",
      "com.carrotsearch.hppc.DoubleCollection",
      "com.graphhopper.util.PointList",
      "com.carrotsearch.hppc.LongLongHashMap",
      "com.graphhopper.util.shapes.Circle",
      "com.graphhopper.routing.RoundTripRouting$Result",
      "com.graphhopper.routing.ViaRouting",
      "com.graphhopper.reader.osm.conditional.ConditionalValueParser",
      "org.locationtech.jts.geom.impl.PackedCoordinateSequence$Float",
      "com.graphhopper.routing.weighting.custom.CustomProfile",
      "com.graphhopper.util.BitUtil",
      "com.graphhopper.routing.ev.SimpleBooleanEncodedValue",
      "com.graphhopper.storage.Storable",
      "org.locationtech.jts.algorithm.RectangleLineIntersector",
      "com.carrotsearch.hppc.ObjectIntAssociativeContainer",
      "org.locationtech.jts.geom.GeometryFactory",
      "com.graphhopper.storage.InternalGraphEventListener",
      "com.carrotsearch.hppc.Preallocable",
      "com.graphhopper.storage.RAMDirectory",
      "com.carrotsearch.hppc.IntHashSet",
      "com.carrotsearch.hppc.predicates.IntPredicate",
      "org.locationtech.jts.geom.Polygonal",
      "com.carrotsearch.hppc.IntLongMap",
      "com.carrotsearch.hppc.IntObjectMap",
      "org.locationtech.jts.geom.CoordinateSequenceFactory",
      "com.graphhopper.routing.util.parsers.OSMRoadAccessParser$1",
      "org.locationtech.jts.geom.Envelope",
      "com.graphhopper.routing.BidirRoutingAlgorithm",
      "com.graphhopper.routing.RoundTripRouting$RoundTripCalculator",
      "com.graphhopper.storage.GHDirectory",
      "com.graphhopper.storage.BaseGraph$EdgeIteratorStateImpl",
      "org.locationtech.jts.algorithm.LineIntersector",
      "com.graphhopper.storage.GraphHopperStorage",
      "com.graphhopper.util.EdgeExplorer",
      "org.locationtech.jts.geom.DefaultCoordinateSequenceFactory",
      "com.graphhopper.storage.index.LocationIndex$Visitor",
      "com.graphhopper.routing.AlgorithmOptions$1",
      "com.graphhopper.util.ProgressListener",
      "com.graphhopper.util.exceptions.PointDistanceExceededException",
      "com.graphhopper.util.EdgeIteratorState$1",
      "com.graphhopper.util.TranslationMap",
      "com.graphhopper.routing.util.parsers.OSMRoadClassParser",
      "com.carrotsearch.hppc.IntDoubleHashMap",
      "com.graphhopper.util.TranslationMap$TranslationHashMap",
      "com.graphhopper.reader.dem.AbstractElevationProvider",
      "com.graphhopper.routing.util.parsers.OSMBikeNetworkTagParser",
      "com.graphhopper.routing.ev.RoadEnvironment",
      "org.locationtech.jts.geom.Geometry$1",
      "com.graphhopper.reader.dem.AbstractSRTMElevationProvider",
      "com.graphhopper.routing.weighting.FastestWeighting",
      "com.graphhopper.util.exceptions.GHException",
      "com.graphhopper.reader.dem.ElevationProvider$1",
      "com.graphhopper.routing.util.DefaultEdgeFilter",
      "com.graphhopper.storage.index.LocationIndexTree$InMemTreeEntry",
      "com.graphhopper.routing.weighting.ShortFastestWeighting",
      "com.graphhopper.storage.RoutingCHGraphImpl",
      "com.graphhopper.routing.ev.EncodedValue",
      "com.graphhopper.routing.BidirPathExtractor",
      "com.graphhopper.storage.GraphStorage",
      "com.graphhopper.util.DouglasPeucker",
      "org.locationtech.jts.geom.Lineal",
      "com.graphhopper.storage.NodeAccess",
      "com.graphhopper.routing.weighting.QueryGraphWeighting",
      "com.graphhopper.util.BitUtilLittle",
      "com.graphhopper.storage.RoutingCHEdgeIterator",
      "com.carrotsearch.hppc.procedures.IntLongProcedure",
      "com.graphhopper.util.shapes.GHPoint3D",
      "org.locationtech.jts.geom.GeometryComponentFilter",
      "com.graphhopper.routing.ev.IntEncodedValue",
      "com.graphhopper.coll.GHLongIntBTree",
      "com.graphhopper.routing.util.parsers.OSMGetOffBikeParser",
      "com.graphhopper.routing.ev.DecimalEncodedValue",
      "com.graphhopper.util.DistanceCalc3D",
      "com.graphhopper.routing.weighting.AbstractWeighting",
      "com.graphhopper.util.ShallowImmutablePointList",
      "com.graphhopper.storage.RoutingCHEdgeIteratorState",
      "org.locationtech.jts.geom.impl.PackedCoordinateSequence$Double",
      "com.graphhopper.routing.WeightingFactory",
      "com.carrotsearch.hppc.IntContainer",
      "com.graphhopper.util.exceptions.PointNotFoundException",
      "org.locationtech.jts.util.Assert",
      "com.graphhopper.util.PointList$1",
      "com.graphhopper.util.Downloader",
      "org.locationtech.jts.geom.PrecisionModel",
      "com.graphhopper.storage.index.Snap",
      "com.graphhopper.routing.ev.RouteNetwork",
      "com.carrotsearch.hppc.predicates.LongPredicate",
      "com.graphhopper.storage.RoutingCHEdgeExplorer",
      "com.graphhopper.storage.index.LocationIndexTree$InMemEntry",
      "com.graphhopper.storage.BaseGraph",
      "com.graphhopper.storage.MMapDirectory",
      "com.graphhopper.util.StopWatch",
      "com.carrotsearch.hppc.LongContainer",
      "com.carrotsearch.hppc.IntLongHashMap",
      "com.graphhopper.util.BitUtilBig",
      "com.graphhopper.util.PathMerger",
      "com.graphhopper.routing.Path$EdgeVisitor",
      "com.graphhopper.storage.RAMIntDataAccess",
      "com.graphhopper.reader.osm.conditional.DateRangeParser",
      "com.graphhopper.util.CHEdgeIterator",
      "com.graphhopper.routing.Path",
      "com.graphhopper.GHRequest",
      "com.graphhopper.routing.ev.EncodedValueLookup",
      "com.graphhopper.routing.ev.MaxSpeed",
      "com.graphhopper.routing.ev.UnsignedIntEncodedValue",
      "com.carrotsearch.hppc.HashOrderMixing$1",
      "com.graphhopper.routing.util.EncodingManager$Access",
      "com.carrotsearch.hppc.HashOrderMixing$2",
      "com.carrotsearch.hppc.AbstractIntCollection",
      "com.graphhopper.routing.util.NameSimilarityEdgeFilter$1",
      "com.graphhopper.storage.DAType",
      "com.graphhopper.routing.util.parsers.OSMRoundaboutParser",
      "com.graphhopper.storage.index.LocationIndexTree$InMemConstructionIndex",
      "com.graphhopper.storage.DataAccess",
      "com.graphhopper.reader.ReaderNode",
      "com.graphhopper.routing.weighting.ShortestWeighting",
      "com.carrotsearch.hppc.HashOrderMixing$4",
      "org.locationtech.jts.geom.util.GeometryMapper$MapOp",
      "com.carrotsearch.hppc.LongCollection",
      "com.graphhopper.search.StringIndex$1",
      "org.locationtech.jts.geom.Coordinate",
      "com.carrotsearch.hppc.predicates.IntObjectPredicate",
      "com.graphhopper.routing.util.AbstractFlagEncoder",
      "com.graphhopper.routing.lm.LandmarkStorage$2",
      "com.graphhopper.routing.lm.LandmarkStorage",
      "com.graphhopper.routing.RoutingAlgorithmFactory",
      "com.graphhopper.util.DistancePlaneProjection",
      "com.carrotsearch.hppc.ObjectCollection",
      "org.locationtech.jts.algorithm.RobustLineIntersector",
      "com.carrotsearch.hppc.IntDoubleHashMap$KeysContainer",
      "com.graphhopper.storage.AbstractDataAccess",
      "com.graphhopper.storage.index.Snap$Position",
      "com.carrotsearch.hppc.procedures.LongProcedure",
      "com.carrotsearch.hppc.RandomizedHashOrderMixer",
      "com.graphhopper.reader.ReaderRelation",
      "com.graphhopper.routing.weighting.PriorityWeighting",
      "com.carrotsearch.hppc.HashOrderMixing$Strategy$2",
      "org.locationtech.jts.geom.PrecisionModel$Type",
      "com.carrotsearch.hppc.HashOrderMixing$Strategy$3",
      "com.graphhopper.reader.osm.conditional.ConditionalValueParser$ConditionState",
      "com.carrotsearch.hppc.procedures.IntProcedure",
      "com.graphhopper.routing.util.DefaultFlagEncoderFactory",
      "com.carrotsearch.hppc.HashOrderMixing$Strategy$1",
      "com.graphhopper.storage.RoutingCHGraph",
      "com.carrotsearch.hppc.LongLongAssociativeContainer",
      "com.graphhopper.GHResponse",
      "com.graphhopper.routing.MultiplePointsNotFoundException",
      "com.graphhopper.routing.util.parsers.RelationTagParser",
      "com.carrotsearch.hppc.HashOrderMixing",
      "com.graphhopper.reader.dem.SRTMGL1Provider",
      "com.carrotsearch.hppc.IntLongAssociativeContainer",
      "com.carrotsearch.hppc.LongLongHashMap$KeysContainer",
      "com.carrotsearch.hppc.IntLongHashMap$KeysContainer",
      "com.carrotsearch.hppc.predicates.IntLongPredicate",
      "com.graphhopper.routing.util.FlagEncoder",
      "com.graphhopper.util.shapes.Polygon",
      "com.graphhopper.routing.RoundTripRouting",
      "com.carrotsearch.hppc.IntStack",
      "com.carrotsearch.hppc.HashContainers",
      "com.graphhopper.storage.index.LocationIndex",
      "com.carrotsearch.hppc.predicates.ObjectIntPredicate",
      "com.graphhopper.routing.ev.BooleanEncodedValue",
      "com.graphhopper.coll.GHIntHashSet",
      "com.graphhopper.reader.ConditionalTagInspector",
      "com.graphhopper.storage.MMapDataAccess",
      "com.graphhopper.routing.util.TransportationMode",
      "org.locationtech.jts.geom.GeometryCollection",
      "com.carrotsearch.hppc.BoundedProportionalArraySizingStrategy",
      "com.graphhopper.coll.GHIntObjectHashMap",
      "com.graphhopper.routing.util.FiniteWeightFilter",
      "com.graphhopper.routing.util.Car4WDFlagEncoder",
      "com.graphhopper.util.shapes.GHPoint",
      "com.carrotsearch.hppc.BitUtil",
      "com.graphhopper.storage.GraphHopperStorage$1",
      "com.graphhopper.routing.ev.GetOffBike",
      "com.carrotsearch.hppc.predicates.DoublePredicate",
      "com.graphhopper.routing.weighting.CurvatureWeighting",
      "com.carrotsearch.hppc.HashOrderMixingStrategy",
      "com.graphhopper.coll.GHLongIntBTree$BTreeEntry",
      "com.graphhopper.routing.util.parsers.TurnCostParser",
      "com.graphhopper.storage.GraphEdgeIdFinder$BlockArea",
      "com.graphhopper.routing.querygraph.VirtualEdgeIteratorState",
      "com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor",
      "org.locationtech.jts.geom.Puntal",
      "com.carrotsearch.hppc.HashOrderMixing$Strategy",
      "com.carrotsearch.hppc.BufferAllocationException",
      "org.locationtech.jts.geom.prep.PreparedGeometry",
      "com.graphhopper.routing.util.BikeFlagEncoder",
      "com.carrotsearch.hppc.DoubleLookupContainer",
      "com.carrotsearch.hppc.AbstractLongCollection",
      "com.graphhopper.util.EdgeIteratorState",
      "com.graphhopper.coll.GHLongLongHashMap",
      "com.graphhopper.util.CHEdgeIteratorState",
      "com.graphhopper.routing.RouterConfig",
      "com.graphhopper.util.PMap",
      "com.graphhopper.routing.util.FlagEncoderFactory",
      "com.graphhopper.util.EdgeIterator",
      "com.graphhopper.routing.util.Bike2WeightFlagEncoder",
      "com.graphhopper.routing.util.NameSimilarityEdgeFilter",
      "com.graphhopper.routing.lm.LandmarkStorage$LandmarkExplorer",
      "com.graphhopper.routing.util.spatialrules.SpatialRuleSet",
      "com.graphhopper.routing.util.EncodingManager$Builder",
      "org.locationtech.jts.geom.CoordinateSequenceFilter",
      "com.graphhopper.reader.osm.conditional.ConditionalParser",
      "com.graphhopper.reader.osm.conditional.ParsedCalendar",
      "com.carrotsearch.hppc.predicates.IntDoublePredicate",
      "com.graphhopper.storage.TurnCostStorage$TurnRelationIterator",
      "com.carrotsearch.hppc.IntDoubleAssociativeContainer",
      "com.graphhopper.routing.DefaultWeightingFactory",
      "com.graphhopper.util.GHUtility$DisabledNodeAccess",
      "com.carrotsearch.hppc.procedures.DoubleProcedure",
      "com.graphhopper.routing.util.MountainBikeFlagEncoder",
      "com.graphhopper.routing.util.parsers.OSMRoadAccessParser",
      "com.graphhopper.storage.index.LocationIndexTree",
      "com.carrotsearch.hppc.procedures.ObjectProcedure",
      "com.graphhopper.routing.EdgeRestrictions",
      "com.graphhopper.routing.weighting.BlockAreaWeighting",
      "com.graphhopper.routing.util.BikeCommonFlagEncoder",
      "com.graphhopper.routing.RoundTripRouting$Params",
      "com.carrotsearch.hppc.IntSet",
      "com.graphhopper.storage.index.PixelGridTraversal",
      "com.graphhopper.util.CustomModel",
      "com.carrotsearch.hppc.IntCollection",
      "com.graphhopper.routing.ch.NodeOrderingProvider",
      "org.locationtech.jts.geom.LineString",
      "com.graphhopper.storage.GraphEdgeIdFinder",
      "com.graphhopper.util.DistanceCalcEarth",
      "com.carrotsearch.hppc.LongLongMap",
      "org.locationtech.jts.geom.CoordinateSequenceComparator",
      "com.graphhopper.util.FetchMode",
      "com.carrotsearch.hppc.LongHashSet"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Router_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.graphhopper.routing.Router",
      "com.graphhopper.routing.util.TraversalMode",
      "com.graphhopper.util.DistanceCalcEarth",
      "com.graphhopper.storage.GHDirectory",
      "com.graphhopper.storage.RAMDirectory",
      "com.graphhopper.storage.DAType",
      "com.graphhopper.util.Helper",
      "com.graphhopper.routing.util.AbstractFlagEncoder",
      "com.graphhopper.routing.util.CarFlagEncoder",
      "com.graphhopper.util.PMap",
      "com.graphhopper.routing.util.TransportationMode",
      "com.graphhopper.routing.util.parsers.OSMRoadAccessParser",
      "com.graphhopper.routing.util.parsers.OSMRoadAccessParser$1",
      "com.graphhopper.routing.util.FootFlagEncoder",
      "com.graphhopper.routing.util.HikeFlagEncoder",
      "com.graphhopper.routing.ev.RouteNetwork",
      "com.graphhopper.routing.util.PriorityCode",
      "com.graphhopper.routing.util.BikeCommonFlagEncoder",
      "com.graphhopper.routing.util.RacingBikeFlagEncoder",
      "com.graphhopper.routing.util.BikeFlagEncoder",
      "com.graphhopper.routing.util.Bike2WeightFlagEncoder",
      "com.graphhopper.routing.weighting.AbstractWeighting",
      "com.graphhopper.routing.weighting.FastestWeighting",
      "com.graphhopper.routing.weighting.PriorityWeighting",
      "com.graphhopper.routing.weighting.CurvatureWeighting",
      "com.graphhopper.routing.weighting.TurnCostProvider$1",
      "com.graphhopper.routing.weighting.TurnCostProvider",
      "com.graphhopper.routing.util.DefaultFlagEncoderFactory",
      "com.graphhopper.routing.util.EncodingManager",
      "com.graphhopper.routing.util.EncodingManager$Builder",
      "com.graphhopper.routing.ev.EncodedValue$InitializerConfig",
      "com.graphhopper.routing.util.parsers.OSMRoundaboutParser",
      "com.graphhopper.routing.ev.Roundabout",
      "com.graphhopper.routing.ev.UnsignedIntEncodedValue",
      "com.graphhopper.routing.ev.SimpleBooleanEncodedValue",
      "com.graphhopper.routing.util.parsers.OSMRoadClassParser",
      "com.graphhopper.routing.ev.EnumEncodedValue",
      "com.graphhopper.routing.ev.RoadClass",
      "com.graphhopper.routing.util.parsers.OSMRoadClassLinkParser",
      "com.graphhopper.routing.util.parsers.OSMRoadEnvironmentParser",
      "com.graphhopper.routing.ev.RoadEnvironment",
      "com.graphhopper.routing.util.parsers.OSMMaxSpeedParser",
      "com.graphhopper.routing.ev.MaxSpeed",
      "com.graphhopper.routing.ev.UnsignedDecimalEncodedValue",
      "com.graphhopper.routing.ev.RoadAccess",
      "com.graphhopper.reader.osm.conditional.DateRangeParser",
      "com.graphhopper.storage.GraphHopperStorage",
      "com.graphhopper.storage.StorableProperties",
      "com.graphhopper.storage.AbstractDataAccess",
      "com.graphhopper.storage.RAMDataAccess",
      "com.graphhopper.util.BitUtilLittle",
      "com.graphhopper.util.BitUtilBig",
      "com.graphhopper.util.BitUtil",
      "com.graphhopper.storage.GraphHopperStorage$1",
      "com.graphhopper.storage.BaseGraph",
      "com.graphhopper.search.StringIndex",
      "com.graphhopper.search.StringIndex$1",
      "com.graphhopper.storage.RAMIntDataAccess",
      "com.graphhopper.util.shapes.BBox",
      "com.graphhopper.storage.GHNodeAccess",
      "com.graphhopper.storage.TurnCostStorage",
      "com.graphhopper.storage.index.LocationIndexTree",
      "com.graphhopper.util.DistancePlaneProjection",
      "com.graphhopper.util.details.PathDetailsBuilderFactory",
      "com.graphhopper.util.TranslationMap",
      "com.graphhopper.util.TranslationMap$TranslationHashMap",
      "com.graphhopper.storage.MMapDirectory",
      "com.graphhopper.routing.ev.DefaultEncodedValueFactory",
      "com.graphhopper.storage.MMapDataAccess",
      "com.graphhopper.routing.util.WheelchairFlagEncoder",
      "com.graphhopper.routing.util.Car4WDFlagEncoder",
      "com.graphhopper.routing.RouterConfig",
      "com.graphhopper.routing.util.parsers.OSMBikeNetworkTagParser",
      "com.graphhopper.routing.ev.BikeNetwork",
      "com.graphhopper.routing.util.parsers.OSMGetOffBikeParser",
      "com.graphhopper.routing.ev.GetOffBike",
      "com.graphhopper.routing.util.FerrySpeedCalculator",
      "com.graphhopper.reader.osm.conditional.ConditionalOSMTagInspector",
      "com.graphhopper.reader.osm.conditional.ConditionalParser",
      "com.graphhopper.routing.util.MotorcycleFlagEncoder",
      "com.graphhopper.routing.weighting.ShortestWeighting",
      "com.graphhopper.routing.util.EdgeFilter",
      "com.graphhopper.util.StopWatch",
      "com.carrotsearch.hppc.AbstractIntCollection",
      "com.carrotsearch.hppc.IntArrayList",
      "com.carrotsearch.hppc.BoundedProportionalArraySizingStrategy",
      "com.graphhopper.geohash.SpatialKeyAlgo",
      "com.graphhopper.storage.index.PixelGridTraversal",
      "com.graphhopper.storage.index.LocationIndexTree$InMemConstructionIndex",
      "com.graphhopper.storage.index.LocationIndexTree$InMemTreeEntry",
      "com.graphhopper.storage.BaseGraph$EdgeIteratorStateImpl",
      "com.graphhopper.storage.BaseGraph$AllEdgeIterator",
      "com.graphhopper.storage.IntsRef",
      "com.graphhopper.storage.CHGraphImpl",
      "com.graphhopper.routing.ch.PrepareEncoder",
      "com.graphhopper.config.Profile",
      "com.graphhopper.routing.DefaultWeightingFactory",
      "org.locationtech.jts.geom.GeometryFactory",
      "org.locationtech.jts.geom.PrecisionModel$Type",
      "org.locationtech.jts.geom.PrecisionModel",
      "org.locationtech.jts.geom.impl.CoordinateArraySequenceFactory",
      "com.graphhopper.util.PointList$1",
      "com.graphhopper.util.PointList",
      "com.graphhopper.routing.util.MountainBikeFlagEncoder",
      "com.graphhopper.routing.util.parsers.OSMFootNetworkTagParser",
      "com.graphhopper.routing.ev.FootNetwork",
      "com.graphhopper.GHRequest",
      "com.graphhopper.util.shapes.GHPoint",
      "com.graphhopper.routing.weighting.ShortFastestWeighting",
      "com.graphhopper.util.CustomModel",
      "org.locationtech.jts.geom.Coordinate",
      "org.locationtech.jts.geom.DefaultCoordinateSequenceFactory",
      "org.locationtech.jts.geom.impl.PackedCoordinateSequence",
      "org.locationtech.jts.geom.impl.PackedCoordinateSequence$Double",
      "org.locationtech.jts.geom.impl.CoordinateArraySequence",
      "org.locationtech.jts.geom.Geometry$1",
      "org.locationtech.jts.geom.Geometry",
      "org.locationtech.jts.geom.LineString",
      "com.graphhopper.routing.weighting.custom.CustomProfile",
      "com.graphhopper.storage.CHConfig",
      "com.graphhopper.util.EdgeIteratorState$1",
      "com.graphhopper.util.EdgeIteratorState",
      "com.graphhopper.routing.util.DefaultEdgeFilter",
      "com.graphhopper.util.GHUtility$DisabledEdgeIterator",
      "com.graphhopper.reader.ReaderElement",
      "com.graphhopper.reader.ReaderWay",
      "com.carrotsearch.hppc.AbstractLongCollection",
      "com.carrotsearch.hppc.LongArrayList",
      "com.graphhopper.routing.util.EncodingManager$Access",
      "com.graphhopper.util.Instruction",
      "org.locationtech.jts.geom.impl.PackedCoordinateSequence$Float",
      "com.graphhopper.routing.AlgorithmOptions",
      "com.graphhopper.GHResponse",
      "com.graphhopper.routing.ViaRouting",
      "com.graphhopper.storage.index.Snap",
      "com.graphhopper.reader.ReaderNode",
      "com.carrotsearch.hppc.IntHashSet",
      "com.carrotsearch.hppc.HashOrderMixing$1",
      "com.carrotsearch.hppc.HashOrderMixing",
      "com.carrotsearch.hppc.HashOrderMixing$4",
      "com.carrotsearch.hppc.HashOrderMixing$Strategy",
      "com.carrotsearch.hppc.Containers",
      "com.carrotsearch.hppc.Containers$1",
      "com.carrotsearch.hppc.BitMixer",
      "com.carrotsearch.hppc.RandomizedHashOrderMixer",
      "com.carrotsearch.hppc.HashContainers",
      "com.carrotsearch.hppc.BitUtil",
      "com.graphhopper.reader.OSMTurnRelation",
      "com.graphhopper.reader.osm.OSMReader",
      "com.graphhopper.util.DouglasPeucker",
      "com.carrotsearch.hppc.LongHashSet",
      "com.graphhopper.coll.GHLongHashSet",
      "com.carrotsearch.hppc.IntObjectHashMap",
      "com.carrotsearch.hppc.HashOrderMixing$2",
      "com.graphhopper.coll.GHIntObjectHashMap",
      "com.graphhopper.reader.dem.ElevationProvider$1",
      "com.graphhopper.reader.dem.ElevationProvider",
      "com.graphhopper.coll.GHLongIntBTree",
      "com.graphhopper.coll.GHLongIntBTree$BTreeEntry",
      "com.carrotsearch.hppc.LongLongHashMap",
      "com.graphhopper.coll.GHLongLongHashMap",
      "com.graphhopper.reader.PillarInfo",
      "com.graphhopper.reader.dem.AbstractElevationProvider",
      "com.graphhopper.reader.dem.AbstractSRTMElevationProvider",
      "com.graphhopper.reader.dem.SRTMGL1Provider",
      "com.graphhopper.util.Downloader",
      "com.graphhopper.routing.Path",
      "com.graphhopper.routing.weighting.DefaultTurnCostProvider",
      "com.graphhopper.storage.RoutingCHGraphImpl",
      "com.graphhopper.routing.lm.LMConfig",
      "com.graphhopper.routing.lm.LandmarkStorage$2",
      "com.graphhopper.routing.lm.LandmarkStorage",
      "com.graphhopper.util.DistanceCalcEuclidean",
      "com.graphhopper.routing.util.NameSimilarityEdgeFilter$1",
      "com.graphhopper.debatty.java.stringsimilarity.JaroWinkler",
      "com.graphhopper.routing.util.NameSimilarityEdgeFilter",
      "com.graphhopper.util.shapes.Circle",
      "com.graphhopper.routing.AlgorithmOptions$Builder",
      "com.carrotsearch.hppc.IntStack",
      "com.graphhopper.routing.weighting.QueryGraphWeighting",
      "com.graphhopper.routing.util.FiniteWeightFilter",
      "com.graphhopper.routing.RoundTripRouting$Params",
      "com.graphhopper.routing.RoundTripRouting",
      "com.graphhopper.routing.weighting.AbstractAdjustedWeighting",
      "com.graphhopper.routing.weighting.AvoidEdgesWeighting",
      "com.graphhopper.util.GHUtility",
      "com.graphhopper.json.Statement",
      "com.graphhopper.json.Statement$Keyword",
      "com.graphhopper.storage.BaseGraph$EdgeIteratorImpl",
      "com.graphhopper.storage.index.LocationIndex$Visitor",
      "com.graphhopper.storage.index.LocationIndexTree$1",
      "com.graphhopper.routing.util.EncodingManager$AcceptWay",
      "com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor",
      "com.graphhopper.util.DistanceCalc3D",
      "com.graphhopper.routing.ev.StringEncodedValue",
      "com.graphhopper.reader.ReaderRelation",
      "com.graphhopper.storage.GraphEdgeIdFinder$BlockArea",
      "com.graphhopper.routing.weighting.BlockAreaWeighting",
      "com.graphhopper.routing.util.tour.TourStrategy",
      "com.graphhopper.routing.util.tour.MultiPointTour",
      "org.locationtech.jts.geom.Envelope",
      "com.carrotsearch.hppc.IntLongHashMap",
      "com.graphhopper.coll.GHIntLongHashMap",
      "com.graphhopper.util.exceptions.PointNotFoundException",
      "com.graphhopper.util.exceptions.PointOutOfBoundsException",
      "org.locationtech.jts.geom.Point",
      "org.locationtech.jts.util.Assert",
      "org.locationtech.jts.util.AssertionFailedException",
      "com.graphhopper.util.shapes.GHPoint3D",
      "com.carrotsearch.hppc.cursors.IntCursor",
      "com.carrotsearch.hppc.IntDoubleHashMap",
      "com.carrotsearch.hppc.BufferAllocationException",
      "org.locationtech.jts.geom.LinearRing",
      "com.graphhopper.storage.DAType$MemRef"
    );
  }
}
