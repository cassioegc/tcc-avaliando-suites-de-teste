/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 06:34:45 GMT 2021
 */

package com.graphhopper.routing.ev;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.ev.DecimalEncodedValue;
import com.graphhopper.routing.ev.TurnCost;
import com.graphhopper.storage.IntsRef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TurnCost_ESTest extends TurnCost_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DecimalEncodedValue decimalEncodedValue0 = TurnCost.create((String) null, 1);
      assertEquals((-1729264127), decimalEncodedValue0.getVersion());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DecimalEncodedValue decimalEncodedValue0 = TurnCost.create("turn_cost", 435);
      assertEquals(984928561, decimalEncodedValue0.getVersion());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TurnCost turnCost0 = new TurnCost();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        TurnCost.create("`r_E", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodedValue name wasn't valid: `r_E$turn_cost. Use lower case letters, underscore and numbers only.
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      IntsRef intsRef0 = TurnCost.createFlags();
      assertTrue(intsRef0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = TurnCost.key("?pIlzwU/&e/n'T'Px:");
      assertEquals("?pIlzwU/&e/n'T'Px:$turn_cost", string0);
  }
}
