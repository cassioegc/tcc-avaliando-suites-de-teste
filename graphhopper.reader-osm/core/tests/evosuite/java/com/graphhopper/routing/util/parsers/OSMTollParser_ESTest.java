/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:06:16 GMT 2021
 */

package com.graphhopper.routing.util.parsers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.ev.EncodedValue;
import com.graphhopper.routing.ev.EncodedValueLookup;
import com.graphhopper.routing.ev.EnumEncodedValue;
import com.graphhopper.routing.ev.Toll;
import com.graphhopper.routing.util.parsers.OSMTollParser;
import com.graphhopper.storage.IntsRef;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OSMTollParser_ESTest extends OSMTollParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser(enumEncodedValue0);
      assertNotNull(oSMTollParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "=c!", "=c!", "").when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay0).hasTag(anyString() , (String) any());
      IntsRef intsRef1 = oSMTollParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
      assertSame(intsRef1, intsRef0);
      assertFalse(intsRef1.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertNotNull(intsRef1);
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay1).hasTag(anyString() , (String) any());
      IntsRef intsRef2 = oSMTollParser0.handleWayTags(intsRef1, readerWay1, true, intsRef1);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertNotNull(intsRef2);
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(readerWay2).hasTag(anyString() , (String) any());
      IntsRef intsRef3 = oSMTollParser0.handleWayTags(intsRef1, readerWay2, false, intsRef1);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef3, intsRef2);
      assertSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef0);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef3.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertNotNull(intsRef3);
      
      ReaderWay readerWay3 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay3).hasTag(anyString() , (String) any());
      IntsRef intsRef4 = oSMTollParser0.handleWayTags(intsRef1, readerWay3, true, intsRef1);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef4, intsRef1);
      assertSame(intsRef4, intsRef3);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef0);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef4.length);
      assertNotNull(intsRef4);
      
      ReaderWay readerWay4 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay4).hasTag(anyString() , (String) any());
      IntsRef intsRef5 = oSMTollParser0.handleWayTags(intsRef4, readerWay4, true, intsRef2);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef5);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef2, intsRef4);
      assertSame(intsRef2, intsRef5);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertSame(intsRef4, intsRef1);
      assertSame(intsRef4, intsRef3);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef5);
      assertSame(intsRef4, intsRef0);
      assertSame(intsRef5, intsRef4);
      assertSame(intsRef5, intsRef2);
      assertSame(intsRef5, intsRef3);
      assertSame(intsRef5, intsRef1);
      assertSame(intsRef5, intsRef0);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertFalse(intsRef5.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef5.length);
      assertEquals(0, intsRef5.offset);
      assertNotNull(intsRef5);
      
      ReaderWay readerWay5 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay5).hasTag(anyString() , (String) any());
      IntsRef intsRef6 = oSMTollParser0.handleWayTags(intsRef4, readerWay5, false, intsRef4);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef6);
      assertSame(intsRef1, intsRef5);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef4, intsRef1);
      assertSame(intsRef4, intsRef3);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef5);
      assertSame(intsRef4, intsRef0);
      assertSame(intsRef4, intsRef6);
      assertSame(intsRef6, intsRef1);
      assertSame(intsRef6, intsRef0);
      assertSame(intsRef6, intsRef5);
      assertSame(intsRef6, intsRef2);
      assertSame(intsRef6, intsRef3);
      assertSame(intsRef6, intsRef4);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertFalse(intsRef6.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef6.offset);
      assertEquals(0, intsRef6.length);
      assertNotNull(intsRef6);
      
      ReaderWay readerWay6 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay6).hasTag(anyString() , (String) any());
      IntsRef intsRef7 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay6, true, intsRef6);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef6);
      assertSame(intsRef1, intsRef5);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef4, intsRef1);
      assertSame(intsRef4, intsRef3);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef5);
      assertSame(intsRef4, intsRef0);
      assertSame(intsRef4, intsRef6);
      assertSame(intsRef6, intsRef1);
      assertSame(intsRef6, intsRef0);
      assertSame(intsRef6, intsRef5);
      assertSame(intsRef6, intsRef2);
      assertSame(intsRef6, intsRef3);
      assertSame(intsRef6, intsRef4);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertFalse(intsRef6.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef6.offset);
      assertEquals(0, intsRef6.length);
      assertNull(intsRef7);
      
      ReaderWay readerWay7 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(readerWay7).hasTag(anyString() , (String) any());
      IntsRef intsRef8 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay7, true, intsRef5);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef6);
      assertSame(intsRef1, intsRef5);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef2, intsRef4);
      assertSame(intsRef2, intsRef5);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef6);
      assertSame(intsRef2, intsRef1);
      assertSame(intsRef4, intsRef1);
      assertSame(intsRef4, intsRef3);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef5);
      assertSame(intsRef4, intsRef0);
      assertSame(intsRef4, intsRef6);
      assertSame(intsRef5, intsRef4);
      assertSame(intsRef5, intsRef2);
      assertSame(intsRef5, intsRef3);
      assertSame(intsRef5, intsRef1);
      assertSame(intsRef5, intsRef6);
      assertSame(intsRef5, intsRef0);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertFalse(intsRef5.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef5.length);
      assertEquals(0, intsRef5.offset);
      assertNull(intsRef8);
      
      ReaderWay readerWay8 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true).when(readerWay8).hasTag(anyString() , (String) any());
      IntsRef intsRef9 = oSMTollParser0.handleWayTags(intsRef3, readerWay8, true, (IntsRef) null);
      assertSame(intsRef9, intsRef1);
      assertSame(intsRef9, intsRef2);
      assertSame(intsRef9, intsRef5);
      assertSame(intsRef9, intsRef6);
      assertSame(intsRef9, intsRef3);
      assertSame(intsRef9, intsRef4);
      assertSame(intsRef9, intsRef0);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef6);
      assertSame(intsRef1, intsRef5);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef9);
      assertSame(intsRef3, intsRef5);
      assertSame(intsRef3, intsRef9);
      assertSame(intsRef3, intsRef4);
      assertSame(intsRef3, intsRef2);
      assertSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef0);
      assertSame(intsRef3, intsRef6);
      assertFalse(intsRef9.isEmpty());
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef3.isEmpty());
      assertEquals(0, intsRef9.offset);
      assertEquals(0, intsRef9.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertNotNull(intsRef9);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser(enumEncodedValue0);
      assertNotNull(oSMTollParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, "").when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay0).hasTag(anyString() , (String) any());
      IntsRef intsRef1 = oSMTollParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
      assertSame(intsRef1, intsRef0);
      assertFalse(intsRef1.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertNotNull(intsRef1);
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(readerWay1).hasTag(anyString() , (String) any());
      IntsRef intsRef2 = oSMTollParser0.handleWayTags(intsRef1, readerWay1, false, intsRef1);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertNotNull(intsRef2);
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(readerWay2).hasTag(anyString() , (String) any());
      IntsRef intsRef3 = null;
      IntsRef intsRef4 = oSMTollParser0.handleWayTags(intsRef1, readerWay2, true, (IntsRef) null);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertSame(intsRef4, intsRef0);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef1);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef4.length);
      assertNotNull(intsRef4);
      
      ReaderWay readerWay3 = null;
      // Undeclared exception!
      try { 
        oSMTollParser0.handleWayTags(intsRef4, (ReaderWay) null, false, (IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTollParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OSMTollParser oSMTollParser0 = new OSMTollParser();
      assertNotNull(oSMTollParser0);
      
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true).when(readerWay0).hasTag(anyString() , (String) any());
      // Undeclared exception!
      try { 
        oSMTollParser0.handleWayTags((IntsRef) null, readerWay0, false, (IntsRef) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue toll not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OSMTollParser oSMTollParser0 = new OSMTollParser();
      assertNotNull(oSMTollParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay0).hasTag(anyString() , (String) any());
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        oSMTollParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue toll not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser(enumEncodedValue0);
      assertNotNull(oSMTollParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn("P*4LZm)oYILbuJ*E", "P*4LZm)oYILbuJ*E", "P*4LZm)oYILbuJ*E", "P*4LZm)oYILbuJ*E", "").when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(readerWay0).hasTag(anyString() , (String) any());
      IntsRef intsRef1 = oSMTollParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
      assertSame(intsRef1, intsRef0);
      assertFalse(intsRef1.isEmpty());
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertNotNull(intsRef1);
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(readerWay1).hasTag(anyString() , (String) any());
      IntsRef intsRef2 = oSMTollParser0.handleWayTags(intsRef1, readerWay1, true, intsRef1);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertNotNull(intsRef2);
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(readerWay2).hasTag(anyString() , (String) any());
      IntsRef intsRef3 = oSMTollParser0.handleWayTags(intsRef1, readerWay2, false, intsRef1);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef0);
      assertSame(intsRef3, intsRef2);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef3.isEmpty());
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertNotNull(intsRef3);
      
      ReaderWay readerWay3 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay3).hasTag(anyString() , (String) any());
      IntsRef intsRef4 = oSMTollParser0.handleWayTags(intsRef3, readerWay3, true, intsRef2);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef4);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef2, intsRef1);
      assertSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef4);
      assertSame(intsRef3, intsRef0);
      assertSame(intsRef3, intsRef2);
      assertSame(intsRef4, intsRef1);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef0);
      assertSame(intsRef4, intsRef3);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef3.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef4.length);
      assertNotNull(intsRef4);
      
      ReaderWay readerWay4 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay4).hasTag(anyString() , (String) any());
      IntsRef intsRef5 = oSMTollParser0.handleWayTags(intsRef1, readerWay4, true, intsRef4);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef5);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef4);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef5);
      assertSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef4);
      assertSame(intsRef3, intsRef0);
      assertSame(intsRef3, intsRef2);
      assertSame(intsRef3, intsRef5);
      assertSame(intsRef4, intsRef1);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef5);
      assertSame(intsRef4, intsRef0);
      assertSame(intsRef4, intsRef3);
      assertSame(intsRef5, intsRef2);
      assertSame(intsRef5, intsRef3);
      assertSame(intsRef5, intsRef0);
      assertSame(intsRef5, intsRef1);
      assertSame(intsRef5, intsRef4);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef3.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertFalse(intsRef5.isEmpty());
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef5.length);
      assertEquals(0, intsRef5.offset);
      assertNotNull(intsRef5);
      
      EnumEncodedValue<Toll> enumEncodedValue1 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser1 = new OSMTollParser(enumEncodedValue1);
      assertFalse(oSMTollParser1.equals((Object)oSMTollParser0));
      assertNotNull(oSMTollParser1);
      
      ReaderWay readerWay5 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(readerWay5).hasTag(anyString() , (String) any());
      IntsRef intsRef6 = oSMTollParser1.handleWayTags((IntsRef) null, readerWay5, true, intsRef3);
      assertNotSame(oSMTollParser0, oSMTollParser1);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef5);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef4);
      assertSame(intsRef3, intsRef0);
      assertSame(intsRef3, intsRef2);
      assertSame(intsRef3, intsRef5);
      assertNotSame(oSMTollParser1, oSMTollParser0);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef3.isEmpty());
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertFalse(oSMTollParser0.equals((Object)oSMTollParser1));
      assertFalse(oSMTollParser1.equals((Object)oSMTollParser0));
      assertNull(intsRef6);
      
      ReaderWay readerWay6 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay6).hasTag(anyString() , (String) any());
      IntsRef intsRef7 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay6, true, intsRef1);
      assertNotSame(oSMTollParser0, oSMTollParser1);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef5);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertFalse(intsRef1.isEmpty());
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertFalse(oSMTollParser0.equals((Object)oSMTollParser1));
      assertNull(intsRef7);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser(enumEncodedValue0);
      assertNotNull(oSMTollParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "ZzU").when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay0).hasTag(anyString() , (String) any());
      IntsRef intsRef1 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      IntsRef intsRef2 = oSMTollParser0.handleWayTags(intsRef0, readerWay0, true, intsRef1);
      assertSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertFalse(intsRef2.isEmpty());
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertNotNull(intsRef2);
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay1).hasTag(anyString() , (String) any());
      IntsRef intsRef3 = oSMTollParser0.handleWayTags(intsRef2, readerWay1, false, intsRef2);
      assertSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef0);
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef3.isEmpty());
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertNotNull(intsRef3);
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay2).hasTag(anyString() , (String) any());
      IntsRef intsRef4 = oSMTollParser0.handleWayTags(intsRef3, readerWay2, false, intsRef2);
      assertSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef2, intsRef4);
      assertSame(intsRef3, intsRef2);
      assertNotSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef0);
      assertSame(intsRef3, intsRef4);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef1);
      assertSame(intsRef4, intsRef0);
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef3.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef4.offset);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertFalse(intsRef4.equals((Object)intsRef1));
      assertNotNull(intsRef4);
      
      ReaderWay readerWay3 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay3).hasTag(anyString() , (String) any());
      IntsRef intsRef5 = oSMTollParser0.handleWayTags(intsRef2, readerWay3, false, intsRef2);
      assertSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef2, intsRef5);
      assertSame(intsRef2, intsRef4);
      assertSame(intsRef5, intsRef2);
      assertSame(intsRef5, intsRef4);
      assertSame(intsRef5, intsRef0);
      assertSame(intsRef5, intsRef3);
      assertNotSame(intsRef5, intsRef1);
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef5.isEmpty());
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef5.offset);
      assertEquals(0, intsRef5.length);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef5.equals((Object)intsRef1));
      assertNotNull(intsRef5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser(enumEncodedValue0);
      assertNotNull(oSMTollParser0);
      
      IntsRef intsRef0 = null;
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay0).hasTag(anyString() , (String) any());
      IntsRef intsRef1 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay0, true, (IntsRef) null);
      assertNull(intsRef1);
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(readerWay1).hasTag(anyString() , (String) any());
      IntsRef intsRef2 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay1, true, (IntsRef) null);
      assertNull(intsRef2);
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(readerWay2).hasTag(anyString() , (String) any());
      IntsRef intsRef3 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay2, true, (IntsRef) null);
      assertNull(intsRef3);
      
      ReaderWay readerWay3 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay3).hasTag(anyString() , (String) any());
      IntsRef intsRef4 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay3, true, (IntsRef) null);
      assertNull(intsRef4);
      
      ReaderWay readerWay4 = null;
      // Undeclared exception!
      try { 
        oSMTollParser0.handleWayTags((IntsRef) null, (ReaderWay) null, true, (IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTollParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser(enumEncodedValue0);
      assertNotNull(oSMTollParser0);
      
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(readerWay0).hasTag(anyString() , (String) any());
      IntsRef intsRef0 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay0, false, (IntsRef) null);
      assertNull(intsRef0);
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay1).hasTag(anyString() , (String) any());
      IntsRef intsRef1 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay1, true, (IntsRef) null);
      assertNull(intsRef1);
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay2).hasTag(anyString() , (String) any());
      IntsRef intsRef2 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay2, false, (IntsRef) null);
      assertNull(intsRef2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OSMTollParser oSMTollParser0 = new OSMTollParser();
      assertNotNull(oSMTollParser0);
      
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay0).hasTag(anyString() ,(String) any());
      IntsRef intsRef0 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay0, false, (IntsRef) null);
      assertNull(intsRef0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser(enumEncodedValue0);
      assertNotNull(oSMTollParser0);
      
      EncodedValueLookup encodedValueLookup0 = mock(EncodedValueLookup.class, new ViolatedAssumptionAnswer());
      List<EncodedValue> list0 = null;
      // Undeclared exception!
      try { 
        oSMTollParser0.createEncodedValues(encodedValueLookup0, (List<EncodedValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTollParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OSMTollParser oSMTollParser0 = new OSMTollParser();
      assertNotNull(oSMTollParser0);
      
      EncodedValueLookup encodedValueLookup0 = mock(EncodedValueLookup.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oSMTollParser0.createEncodedValues(encodedValueLookup0, (List<EncodedValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTollParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser(enumEncodedValue0);
      assertNotNull(oSMTollParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay0).hasTag(anyString() , (String) any());
      boolean boolean0 = true;
      IntsRef intsRef1 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      IntsRef intsRef2 = oSMTollParser0.handleWayTags(intsRef0, readerWay0, true, intsRef1);
      assertSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertFalse(intsRef2.isEmpty());
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertNotNull(intsRef2);
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay1).hasTag(anyString() , (String) any());
      IntsRef intsRef3 = oSMTollParser0.handleWayTags(intsRef2, readerWay1, true, intsRef2);
      assertSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef3, intsRef0);
      assertNotSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef2);
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef3.isEmpty());
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertNotNull(intsRef3);
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay2).hasTag(anyString() , (String) any());
      IntsRef intsRef4 = oSMTollParser0.handleWayTags(intsRef3, readerWay2, false, intsRef2);
      assertSame(intsRef2, intsRef4);
      assertSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef3, intsRef0);
      assertSame(intsRef3, intsRef4);
      assertNotSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef2);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef0);
      assertSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef1);
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef3.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef4.offset);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertFalse(intsRef4.equals((Object)intsRef1));
      assertNotNull(intsRef4);
      
      ReaderWay readerWay3 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay3).hasTag(anyString() , (String) any());
      IntsRef intsRef5 = oSMTollParser0.handleWayTags(intsRef4, readerWay3, false, intsRef3);
      assertSame(intsRef2, intsRef4);
      assertSame(intsRef2, intsRef5);
      assertSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef3, intsRef0);
      assertSame(intsRef3, intsRef4);
      assertSame(intsRef3, intsRef5);
      assertNotSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef2);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef0);
      assertSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef1);
      assertSame(intsRef4, intsRef5);
      assertSame(intsRef5, intsRef2);
      assertSame(intsRef5, intsRef0);
      assertSame(intsRef5, intsRef3);
      assertNotSame(intsRef5, intsRef1);
      assertSame(intsRef5, intsRef4);
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef3.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertFalse(intsRef5.isEmpty());
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef5.offset);
      assertEquals(0, intsRef5.length);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertFalse(intsRef4.equals((Object)intsRef1));
      assertFalse(intsRef5.equals((Object)intsRef1));
      assertNotNull(intsRef5);
      
      ReaderWay readerWay4 = null;
      // Undeclared exception!
      try { 
        oSMTollParser0.handleWayTags(intsRef5, (ReaderWay) null, false, intsRef5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTollParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      EncodedValueLookup encodedValueLookup0 = mock(EncodedValueLookup.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      EncodedValueLookup encodedValueLookup1 = mock(EncodedValueLookup.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay3 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay4 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser(enumEncodedValue0);
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(readerWay0).hasTag(anyString() , (String) any());
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay1).hasTag(anyString() , (String) any());
      oSMTollParser0.handleWayTags((IntsRef) null, readerWay1, true, (IntsRef) null);
      oSMTollParser0.handleWayTags((IntsRef) null, readerWay0, false, (IntsRef) null);
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay2).hasTag(anyString() , (String) any());
      oSMTollParser0.handleWayTags((IntsRef) null, readerWay2, true, (IntsRef) null);
      ReaderWay readerWay3 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay3).hasTag(anyString() , (String) any());
      oSMTollParser0.handleWayTags((IntsRef) null, readerWay3, true, (IntsRef) null);
      ReaderWay readerWay4 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay4).hasTag(anyString() , (String) any());
      oSMTollParser0.handleWayTags((IntsRef) null, readerWay4, false, (IntsRef) null);
      ReaderWay readerWay5 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(readerWay5).hasTag(anyString() , (String) any());
      oSMTollParser0.handleWayTags((IntsRef) null, readerWay5, true, (IntsRef) null);
      ReaderWay readerWay6 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay6).hasTag(anyString() , (String) any());
      oSMTollParser0.handleWayTags((IntsRef) null, readerWay6, false, (IntsRef) null);
      ReaderWay readerWay7 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay7).hasTag(anyString() , (String) any());
      oSMTollParser0.handleWayTags((IntsRef) null, readerWay7, true, (IntsRef) null);
      ReaderWay readerWay8 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(readerWay8).hasTag(anyString() , (String) any());
      oSMTollParser0.handleWayTags((IntsRef) null, readerWay8, false, (IntsRef) null);
      ReaderWay readerWay9 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true).when(readerWay9).hasTag(anyString() , (String) any());
      oSMTollParser0.handleWayTags((IntsRef) null, readerWay9, true, (IntsRef) null);
      ReaderWay readerWay10 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay11 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(readerWay11).hasTag(anyString() , (String) any());
      IntsRef intsRef0 = oSMTollParser0.handleWayTags((IntsRef) null, readerWay11, true, (IntsRef) null);
      assertNull(intsRef0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser(enumEncodedValue0);
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay0).hasTag(anyString() , (String) any());
      IntsRef intsRef1 = oSMTollParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay1).hasTag(anyString() , (String) any());
      IntsRef intsRef2 = oSMTollParser0.handleWayTags(intsRef1, readerWay1, true, intsRef1);
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(readerWay2).hasTag(anyString() , (String) any());
      IntsRef intsRef3 = oSMTollParser0.handleWayTags(intsRef2, readerWay2, true, intsRef1);
      oSMTollParser0.handleWayTags(intsRef2, readerWay2, true, intsRef3);
      ReaderWay readerWay3 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(readerWay3).hasTag(anyString() , (String) any());
      IntsRef intsRef4 = oSMTollParser0.handleWayTags(intsRef1, readerWay3, false, intsRef1);
      assertSame(intsRef4, intsRef3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser(enumEncodedValue0);
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay0 = null;
      // Undeclared exception!
      try { 
        oSMTollParser0.handleWayTags(intsRef0, (ReaderWay) null, false, intsRef0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTollParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EnumEncodedValue<Toll> enumEncodedValue0 = (EnumEncodedValue<Toll>) mock(EnumEncodedValue.class, new ViolatedAssumptionAnswer());
      OSMTollParser oSMTollParser0 = new OSMTollParser();
      // Undeclared exception!
      try { 
        oSMTollParser0.createEncodedValues((EncodedValueLookup) null, (List<EncodedValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTollParser", e);
      }
  }
}
