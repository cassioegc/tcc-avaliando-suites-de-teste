/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:30:38 GMT 2021
 */

package com.graphhopper.routing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.Path;
import com.graphhopper.routing.PathExtractor;
import com.graphhopper.routing.SPTEntry;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.Graph;
import com.graphhopper.storage.NodeAccess;
import com.graphhopper.util.EdgeIteratorState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PathExtractor_ESTest extends PathExtractor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn((-1569)).when(edgeIteratorState0).getBaseNode();
      doReturn((double)(-1569)).when(edgeIteratorState0).getDistance();
      doReturn(20).when(edgeIteratorState0).getEdge();
      EdgeIteratorState edgeIteratorState1 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState1).getBaseNode();
      doReturn(0.0).when(edgeIteratorState1).getDistance();
      doReturn(0).when(edgeIteratorState1).getEdge();
      Graph graph1 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeIteratorState0, edgeIteratorState1).when(graph1).getEdgeIteratorState(anyInt() , anyInt());
      doReturn((NodeAccess) null).when(graph1).getNodeAccess();
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-1569), (long)20).when(weighting1).calcEdgeMillis(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      doReturn((-2396L), (long)(-1569)).when(weighting1).calcTurnMillis(anyInt() , anyInt() , anyInt());
      PathExtractor pathExtractor0 = new PathExtractor(graph1, weighting1);
      assertNotNull(pathExtractor0);
      
      pathExtractor0.onEdge(41, 41, 41);
      pathExtractor0.onEdge(0, 484, 0);
      Path path0 = pathExtractor0.extract((SPTEntry) null);
      assertNotNull(path0);
      assertEquals(1.7976931348623157E308, path0.getWeight(), 0.01);
      assertFalse(path0.isFound());
      assertEquals((-1569.0), path0.getDistance(), 0.01);
      assertEquals((-1), path0.getEndNode());
      assertEquals(2, path0.getEdgeCount());
      assertEquals("", path0.getDebugInfo());
      assertEquals((-5514L), path0.getTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState0).getBaseNode();
      doReturn((double)0).when(edgeIteratorState0).getDistance();
      doReturn(0).when(edgeIteratorState0).getEdge();
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      EdgeIteratorState edgeIteratorState1 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState1).getBaseNode();
      doReturn(0.0).when(edgeIteratorState1).getDistance();
      doReturn(0).when(edgeIteratorState1).getEdge();
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeIteratorState0, edgeIteratorState1, (EdgeIteratorState) null).when(graph0).getEdgeIteratorState(anyInt() , anyInt());
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn((long)0, 611L).when(weighting0).calcEdgeMillis(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      doReturn((long)0, 1057L).when(weighting0).calcTurnMillis(anyInt() , anyInt() , anyInt());
      PathExtractor pathExtractor0 = new PathExtractor(graph0, weighting0);
      assertNotNull(pathExtractor0);
      
      Path path0 = pathExtractor0.extract((SPTEntry) null);
      assertNotNull(path0);
      assertEquals(0.0, path0.getDistance(), 0.01);
      assertEquals((-1), path0.getEndNode());
      assertEquals(1.7976931348623157E308, path0.getWeight(), 0.01);
      assertFalse(path0.isFound());
      assertEquals(0L, path0.getTime());
      assertEquals("", path0.getDebugInfo());
      assertEquals(0, path0.getEdgeCount());
      
      Path path1 = pathExtractor0.extract((SPTEntry) null);
      assertSame(path1, path0);
      assertNotNull(path1);
      assertEquals(0, path1.getEdgeCount());
      assertEquals(0L, path1.getTime());
      assertEquals(1.7976931348623157E308, path1.getWeight(), 0.01);
      assertFalse(path1.isFound());
      assertEquals("", path1.getDebugInfo());
      assertEquals((-1), path1.getEndNode());
      assertEquals(0.0, path1.getDistance(), 0.01);
      
      Graph graph1 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph1).getNodeAccess();
      pathExtractor0.onEdge(0, 1, 1);
      pathExtractor0.onEdge(0, 0, 1387);
      Graph graph2 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph2).getNodeAccess();
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Path path2 = PathExtractor.extractPath(graph2, weighting1, (SPTEntry) null);
      assertFalse(path2.equals((Object)path0));
      assertFalse(path2.equals((Object)path1));
      assertNotSame(path2, path0);
      assertNotSame(path2, path1);
      assertNotNull(path2);
      assertEquals("", path2.getDebugInfo());
      assertEquals((-1), path2.getEndNode());
      assertFalse(path2.isFound());
      assertEquals(1.7976931348623157E308, path2.getWeight(), 0.01);
      assertEquals(0L, path2.getTime());
      assertEquals(0.0, path2.getDistance(), 0.01);
      assertEquals(0, path2.getEdgeCount());
      
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Path path3 = pathExtractor0.extract((SPTEntry) null);
      assertFalse(path3.equals((Object)path2));
      assertSame(path3, path1);
      assertSame(path3, path0);
      assertNotSame(path3, path2);
      assertNotNull(path3);
      assertEquals((-1), path3.getEndNode());
      assertFalse(path3.isFound());
      assertEquals(1668L, path3.getTime());
      assertEquals(1.7976931348623157E308, path3.getWeight(), 0.01);
      assertEquals(0.0, path3.getDistance(), 0.01);
      assertEquals(2, path3.getEdgeCount());
      assertEquals("", path3.getDebugInfo());
      
      Graph graph3 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph3).getNodeAccess();
      Weighting weighting3 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Path path4 = PathExtractor.extractPath(graph3, weighting3, (SPTEntry) null);
      assertFalse(path4.equals((Object)path3));
      assertFalse(path4.equals((Object)path2));
      assertFalse(path4.equals((Object)path1));
      assertFalse(path4.equals((Object)path0));
      assertNotSame(path4, path3);
      assertNotSame(path4, path2);
      assertNotSame(path4, path1);
      assertNotSame(path4, path0);
      assertNotNull(path4);
      assertEquals(0, path4.getEdgeCount());
      assertEquals(0L, path4.getTime());
      assertEquals(1.7976931348623157E308, path4.getWeight(), 0.01);
      assertEquals("", path4.getDebugInfo());
      assertFalse(path4.isFound());
      assertEquals((-1), path4.getEndNode());
      assertEquals(0.0, path4.getDistance(), 0.01);
      
      Path path5 = PathExtractor.extractPath(graph1, weighting2, (SPTEntry) null);
      assertFalse(path5.equals((Object)path3));
      assertFalse(path5.equals((Object)path2));
      assertFalse(path5.equals((Object)path1));
      assertFalse(path5.equals((Object)path4));
      assertFalse(path5.equals((Object)path0));
      assertNotSame(path5, path3);
      assertNotSame(path5, path2);
      assertNotSame(path5, path1);
      assertNotSame(path5, path4);
      assertNotSame(path5, path0);
      assertNotNull(path5);
      assertEquals(0L, path5.getTime());
      assertEquals(0, path5.getEdgeCount());
      assertEquals((-1), path5.getEndNode());
      assertEquals(0.0, path5.getDistance(), 0.01);
      assertEquals("", path5.getDebugInfo());
      assertFalse(path5.isFound());
      assertEquals(1.7976931348623157E308, path5.getWeight(), 0.01);
      
      // Undeclared exception!
      try { 
        pathExtractor0.onEdge(1713, 1713, 1713);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(43).when(edgeIteratorState0).getBaseNode();
      doReturn((double)43).when(edgeIteratorState0).getDistance();
      doReturn(21).when(edgeIteratorState0).getEdge();
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      EdgeIteratorState edgeIteratorState1 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState1).getBaseNode();
      doReturn(0.0).when(edgeIteratorState1).getDistance();
      doReturn(0).when(edgeIteratorState1).getEdge();
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeIteratorState0, edgeIteratorState1, (EdgeIteratorState) null).when(graph0).getEdgeIteratorState(anyInt() , anyInt());
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn((-1020L), (long)21).when(weighting0).calcEdgeMillis(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      doReturn((-1432L), (-1778L)).when(weighting0).calcTurnMillis(anyInt() , anyInt() , anyInt());
      PathExtractor pathExtractor0 = new PathExtractor(graph0, weighting0);
      assertNotNull(pathExtractor0);
      
      Path path0 = pathExtractor0.extract((SPTEntry) null);
      assertNotNull(path0);
      assertEquals(0L, path0.getTime());
      assertEquals(0.0, path0.getDistance(), 0.01);
      assertEquals((-1), path0.getEndNode());
      assertEquals("", path0.getDebugInfo());
      assertFalse(path0.isFound());
      assertEquals(1.7976931348623157E308, path0.getWeight(), 0.01);
      assertEquals(0, path0.getEdgeCount());
      
      Path path1 = pathExtractor0.extract((SPTEntry) null);
      assertSame(path1, path0);
      assertNotNull(path1);
      assertEquals("", path1.getDebugInfo());
      assertFalse(path1.isFound());
      assertEquals(0.0, path1.getDistance(), 0.01);
      assertEquals((-1), path1.getEndNode());
      assertEquals(0L, path1.getTime());
      assertEquals(0, path1.getEdgeCount());
      assertEquals(1.7976931348623157E308, path1.getWeight(), 0.01);
      
      Path path2 = pathExtractor0.extract((SPTEntry) null);
      assertSame(path2, path1);
      assertSame(path2, path0);
      assertNotNull(path2);
      assertEquals(0, path2.getEdgeCount());
      assertEquals(0L, path2.getTime());
      assertEquals((-1), path2.getEndNode());
      assertEquals(0.0, path2.getDistance(), 0.01);
      assertFalse(path2.isFound());
      assertEquals("", path2.getDebugInfo());
      assertEquals(1.7976931348623157E308, path2.getWeight(), 0.01);
      
      Graph graph1 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph1).getNodeAccess();
      Graph graph2 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph2).getNodeAccess();
      pathExtractor0.onEdge(43, 48, 0);
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Path path3 = PathExtractor.extractPath(graph2, weighting1, (SPTEntry) null);
      assertFalse(path3.equals((Object)path0));
      assertFalse(path3.equals((Object)path2));
      assertFalse(path3.equals((Object)path1));
      assertNotSame(path3, path0);
      assertNotSame(path3, path2);
      assertNotSame(path3, path1);
      assertNotNull(path3);
      assertFalse(path3.isFound());
      assertEquals("", path3.getDebugInfo());
      assertEquals(1.7976931348623157E308, path3.getWeight(), 0.01);
      assertEquals(0L, path3.getTime());
      assertEquals(0, path3.getEdgeCount());
      assertEquals((-1), path3.getEndNode());
      assertEquals(0.0, path3.getDistance(), 0.01);
      
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Path path4 = pathExtractor0.extract((SPTEntry) null);
      assertFalse(path4.equals((Object)path3));
      assertNotSame(path4, path3);
      assertSame(path4, path0);
      assertSame(path4, path2);
      assertSame(path4, path1);
      assertNotNull(path4);
      assertEquals("", path4.getDebugInfo());
      assertEquals(1, path4.getEdgeCount());
      assertEquals((-1), path4.getEndNode());
      assertEquals((-2452L), path4.getTime());
      assertFalse(path4.isFound());
      assertEquals(43.0, path4.getDistance(), 0.01);
      assertEquals(1.7976931348623157E308, path4.getWeight(), 0.01);
      
      Graph graph3 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph3).getNodeAccess();
      Weighting weighting3 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Path path5 = PathExtractor.extractPath(graph3, weighting3, (SPTEntry) null);
      assertFalse(path5.equals((Object)path4));
      assertFalse(path5.equals((Object)path0));
      assertFalse(path5.equals((Object)path2));
      assertFalse(path5.equals((Object)path3));
      assertFalse(path5.equals((Object)path1));
      assertNotSame(path5, path4);
      assertNotSame(path5, path0);
      assertNotSame(path5, path2);
      assertNotSame(path5, path3);
      assertNotSame(path5, path1);
      assertNotNull(path5);
      assertEquals("", path5.getDebugInfo());
      assertEquals((-1), path5.getEndNode());
      assertFalse(path5.isFound());
      assertEquals(0.0, path5.getDistance(), 0.01);
      assertEquals(0L, path5.getTime());
      assertEquals(1.7976931348623157E308, path5.getWeight(), 0.01);
      assertEquals(0, path5.getEdgeCount());
      
      Path path6 = PathExtractor.extractPath(graph1, weighting2, (SPTEntry) null);
      assertFalse(path6.equals((Object)path0));
      assertFalse(path6.equals((Object)path4));
      assertFalse(path6.equals((Object)path2));
      assertFalse(path6.equals((Object)path5));
      assertFalse(path6.equals((Object)path3));
      assertFalse(path6.equals((Object)path1));
      assertNotSame(path6, path0);
      assertNotSame(path6, path4);
      assertNotSame(path6, path2);
      assertNotSame(path6, path5);
      assertNotSame(path6, path3);
      assertNotSame(path6, path1);
      assertNotNull(path6);
      assertEquals(1.7976931348623157E308, path6.getWeight(), 0.01);
      assertEquals(0.0, path6.getDistance(), 0.01);
      assertFalse(path6.isFound());
      assertEquals(0L, path6.getTime());
      assertEquals(0, path6.getEdgeCount());
      assertEquals((-1), path6.getEndNode());
      assertEquals("", path6.getDebugInfo());
      
      pathExtractor0.onEdge(1713, 1713, 1713);
      // Undeclared exception!
      try { 
        pathExtractor0.onEdge(1713, 1713, 1713);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(edgeIteratorState0).getDistance();
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeIteratorState0, (EdgeIteratorState) null).when(graph0).getEdgeIteratorState(anyInt() , anyInt());
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(weighting0).calcEdgeMillis(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      PathExtractor pathExtractor0 = new PathExtractor(graph0, weighting0);
      assertNotNull(pathExtractor0);
      
      pathExtractor0.onEdge(376, 269, (-1250));
      // Undeclared exception!
      try { 
        pathExtractor0.onEdge(0, 0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(edgeIteratorState0).getDistance();
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeIteratorState0, (EdgeIteratorState) null).when(graph0).getEdgeIteratorState(anyInt() , anyInt());
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(weighting0).calcEdgeMillis(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      PathExtractor pathExtractor0 = new PathExtractor(graph0, weighting0);
      assertNotNull(pathExtractor0);
      
      pathExtractor0.onEdge((-829), (-829), (-829));
      // Undeclared exception!
      try { 
        pathExtractor0.onEdge((-829), (-829), 1654);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeIteratorState) null).when(graph0).getEdgeIteratorState(anyInt() , anyInt());
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      PathExtractor pathExtractor0 = new PathExtractor(graph0, weighting0);
      assertNotNull(pathExtractor0);
      
      SPTEntry sPTEntry0 = null;
      Path path0 = pathExtractor0.extract((SPTEntry) null);
      assertNotNull(path0);
      assertEquals(0.0, path0.getDistance(), 0.01);
      assertEquals("", path0.getDebugInfo());
      assertEquals(1.7976931348623157E308, path0.getWeight(), 0.01);
      assertEquals(0, path0.getEdgeCount());
      assertEquals(0L, path0.getTime());
      assertFalse(path0.isFound());
      assertEquals((-1), path0.getEndNode());
      
      Path path1 = pathExtractor0.extract((SPTEntry) null);
      assertSame(path1, path0);
      assertNotNull(path1);
      assertEquals(0, path1.getEdgeCount());
      assertFalse(path1.isFound());
      assertEquals(0L, path1.getTime());
      assertEquals(1.7976931348623157E308, path1.getWeight(), 0.01);
      assertEquals("", path1.getDebugInfo());
      assertEquals((-1), path1.getEndNode());
      assertEquals(0.0, path1.getDistance(), 0.01);
      
      Graph graph1 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph1).getNodeAccess();
      Graph graph2 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph2).getNodeAccess();
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Path path2 = PathExtractor.extractPath(graph2, weighting1, (SPTEntry) null);
      assertFalse(path2.equals((Object)path1));
      assertFalse(path2.equals((Object)path0));
      assertNotSame(path2, path1);
      assertNotSame(path2, path0);
      assertNotNull(path2);
      assertEquals(0L, path2.getTime());
      assertEquals(0, path2.getEdgeCount());
      assertEquals(1.7976931348623157E308, path2.getWeight(), 0.01);
      assertEquals("", path2.getDebugInfo());
      assertFalse(path2.isFound());
      assertEquals((-1), path2.getEndNode());
      assertEquals(0.0, path2.getDistance(), 0.01);
      
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Path path3 = PathExtractor.extractPath(graph1, weighting2, (SPTEntry) null);
      assertFalse(path3.equals((Object)path1));
      assertFalse(path3.equals((Object)path2));
      assertFalse(path3.equals((Object)path0));
      assertNotSame(path3, path1);
      assertNotSame(path3, path2);
      assertNotSame(path3, path0);
      assertNotNull(path3);
      assertEquals(1.7976931348623157E308, path3.getWeight(), 0.01);
      assertEquals(0.0, path3.getDistance(), 0.01);
      assertEquals("", path3.getDebugInfo());
      assertEquals(0, path3.getEdgeCount());
      assertEquals((-1), path3.getEndNode());
      assertFalse(path3.isFound());
      assertEquals(0L, path3.getTime());
      
      int int0 = 1713;
      // Undeclared exception!
      try { 
        pathExtractor0.onEdge(1713, 1713, 1713);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeIteratorState) null).when(graph0).getEdgeIteratorState(anyInt() , anyInt());
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      PathExtractor pathExtractor0 = new PathExtractor(graph0, weighting0);
      assertNotNull(pathExtractor0);
      
      Graph graph1 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph1).getNodeAccess();
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Path path0 = PathExtractor.extractPath(graph1, weighting1, (SPTEntry) null);
      assertNotNull(path0);
      assertEquals(0.0, path0.getDistance(), 0.01);
      assertEquals(0L, path0.getTime());
      assertFalse(path0.isFound());
      assertEquals((-1), path0.getEndNode());
      assertEquals(1.7976931348623157E308, path0.getWeight(), 0.01);
      assertEquals(0, path0.getEdgeCount());
      assertEquals("", path0.getDebugInfo());
      
      // Undeclared exception!
      try { 
        pathExtractor0.onEdge(1408, 1408, 1157);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeIteratorState) null).when(graph0).getEdgeIteratorState(anyInt() , anyInt());
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      PathExtractor pathExtractor0 = new PathExtractor(graph0, weighting0);
      assertNotNull(pathExtractor0);
      
      // Undeclared exception!
      try { 
        pathExtractor0.onEdge(908, 908, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Graph graph0 = null;
      Weighting weighting0 = null;
      PathExtractor pathExtractor0 = null;
      try {
        pathExtractor0 = new PathExtractor((Graph) null, (Weighting) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      PathExtractor pathExtractor0 = new PathExtractor(graph0, weighting0);
      assertNotNull(pathExtractor0);
      
      SPTEntry sPTEntry0 = mock(SPTEntry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pathExtractor0.extract(sPTEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeIteratorState) null).when(graph0).getEdgeIteratorState(anyInt() , anyInt());
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      PathExtractor pathExtractor0 = new PathExtractor(graph0, weighting0);
      assertNotNull(pathExtractor0);
      
      Path path0 = pathExtractor0.extract((SPTEntry) null);
      assertNotNull(path0);
      assertEquals(0L, path0.getTime());
      assertFalse(path0.isFound());
      assertEquals((-1), path0.getEndNode());
      assertEquals(1.7976931348623157E308, path0.getWeight(), 0.01);
      assertEquals(0.0, path0.getDistance(), 0.01);
      assertEquals("", path0.getDebugInfo());
      assertEquals(0, path0.getEdgeCount());
      
      // Undeclared exception!
      try { 
        pathExtractor0.onEdge((-2083), 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      SPTEntry sPTEntry0 = mock(SPTEntry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathExtractor.extractPath(graph0, weighting0, sPTEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeIteratorState) null).when(graph0).getEdgeIteratorState(anyInt() , anyInt());
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      PathExtractor pathExtractor0 = new PathExtractor(graph0, weighting0);
      assertNotNull(pathExtractor0);
      
      // Undeclared exception!
      try { 
        pathExtractor0.onEdge(5019, 5019, 5019);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Path path0 = PathExtractor.extractPath(graph0, weighting0, (SPTEntry) null);
      assertNotNull(path0);
      assertEquals(0.0, path0.getDistance(), 0.01);
      assertFalse(path0.isFound());
      assertEquals(1.7976931348623157E308, path0.getWeight(), 0.01);
      assertEquals(0L, path0.getTime());
      assertEquals((-1), path0.getEndNode());
      assertEquals("", path0.getDebugInfo());
      assertEquals(0, path0.getEdgeCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      NodeAccess nodeAccess1 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(nodeAccess1).when(graph0).getNodeAccess();
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      SPTEntry sPTEntry0 = mock(SPTEntry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathExtractor.extractPath(graph0, weighting1, sPTEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SPTEntry sPTEntry0 = mock(SPTEntry.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      SPTEntry sPTEntry1 = mock(SPTEntry.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        PathExtractor.extractPath(graph0, weighting0, sPTEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState0).getBaseNode();
      doReturn(0.0).when(edgeIteratorState0).getDistance();
      doReturn(0).when(edgeIteratorState0).getEdge();
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeIteratorState0, (EdgeIteratorState) null).when(graph0).getEdgeIteratorState(anyInt() , anyInt());
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(weighting0).calcEdgeMillis(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      doReturn(0L).when(weighting0).calcTurnMillis(anyInt() , anyInt() , anyInt());
      PathExtractor pathExtractor0 = new PathExtractor(graph0, weighting0);
      pathExtractor0.extract((SPTEntry) null);
      pathExtractor0.extract((SPTEntry) null);
      NodeAccess nodeAccess1 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      Graph graph1 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(nodeAccess1).when(graph1).getNodeAccess();
      Graph graph2 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((NodeAccess) null).when(graph2).getNodeAccess();
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      PathExtractor.extractPath(graph2, weighting1, (SPTEntry) null);
      Weighting weighting2 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      PathExtractor.extractPath(graph1, weighting2, (SPTEntry) null);
      pathExtractor0.onEdge(1713, 1713, 1713);
      // Undeclared exception!
      try { 
        pathExtractor0.onEdge(1713, 1713, 1713);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.PathExtractor", e);
      }
  }
}
