/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 01:57:20 GMT 2021
 */

package com.graphhopper.routing.util.parsers.helpers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.ev.DecimalEncodedValue;
import com.graphhopper.routing.ev.UnsignedDecimalEncodedValue;
import com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor;
import com.graphhopper.storage.IntsRef;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OSMValueExtractor_ESTest extends OSMValueExtractor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh("knots");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh("km");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh("kph");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh("mp");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToTons("const");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToTons("0");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToTons("9kg");
      assertEquals(0.009000000000000001, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToMeter("9");
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        OSMValueExtractor.stringToTons((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.Helper", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        OSMValueExtractor.stringToMeter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.Helper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        OSMValueExtractor.isInvalidValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.Helper", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[9];
      IntsRef intsRef0 = new IntsRef(intArray0, 932, 1961);
      ReaderWay readerWay0 = new ReaderWay(0L);
      // Undeclared exception!
      try { 
        OSMValueExtractor.extractTons(intsRef0, readerWay0, (DecimalEncodedValue) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.reader.ReaderElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      IntsRef intsRef0 = new IntsRef(intArray0, 4175, 0);
      ReaderWay readerWay0 = new ReaderWay((-137L));
      // Undeclared exception!
      try { 
        OSMValueExtractor.extractMeter(intsRef0, readerWay0, (DecimalEncodedValue) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.reader.ReaderElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      ReaderWay readerWay0 = new ReaderWay(2147483615L);
      Object object0 = new Object();
      readerWay0.setTag("e.#[17ad5", object0);
      UnsignedDecimalEncodedValue unsignedDecimalEncodedValue0 = new UnsignedDecimalEncodedValue("st", 2, 0, true);
      List<String> list0 = readerWay0.getKeysWithPrefix("");
      // Undeclared exception!
      try { 
        OSMValueExtractor.extractMeter(intsRef0, readerWay0, unsignedDecimalEncodedValue0, list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("com.graphhopper.reader.ReaderElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue(",length=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("7q3-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("M>$ACf&%H7kta");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("|vo$U7y3;$L[f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("fHG(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("unsigned");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("small");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("unrestricted");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("\u301C");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("Default value and maximum value cannot be both infinity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("none");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh("0");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh("9");
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh("import");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh(":living_street");
      assertEquals(6.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh("walk");
      assertEquals(6.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh(":urban");
      assertEquals(50.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh("import:trunk");
      assertEquals(80.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh(":rural");
      assertEquals(80.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh("none");
      assertEquals(150.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToKmh("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToMeter(",899Kau@*8K`sE7~Z[");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("'b<5T[8f|HH.RNVZ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToTons("zHZp0B H(%Sj-lf");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("name:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("fixme");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("narrow");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = OSMValueExtractor.isInvalidValue("unknown");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToMeter("dX?wm");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToMeter("cm");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToMeter("i\nftft");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToMeter("in");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToMeter(".U'_n_`3O8Py1)\"");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToMeter("approx");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToMeter("~");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[4];
      IntsRef intsRef0 = new IntsRef(intArray0, 4175, 0);
      ReaderWay readerWay0 = new ReaderWay((-137L));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      OSMValueExtractor.extractMeter(intsRef0, readerWay0, (DecimalEncodedValue) null, linkedList0);
      assertEquals(4175, intsRef0.offset);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToTons("lbs");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToTons("import");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = OSMValueExtractor.stringToTons("_e gkg");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[4];
      IntsRef intsRef0 = new IntsRef(intArray0, 4175, 0);
      ReaderWay readerWay0 = new ReaderWay((-137L));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      OSMValueExtractor.extractTons(intsRef0, readerWay0, (DecimalEncodedValue) null, linkedList0);
      assertEquals(0, intsRef0.length);
  }
}
