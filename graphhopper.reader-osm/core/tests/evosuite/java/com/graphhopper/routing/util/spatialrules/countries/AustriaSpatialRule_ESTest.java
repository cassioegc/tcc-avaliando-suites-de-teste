/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:54:28 GMT 2021
 */

package com.graphhopper.routing.util.spatialrules.countries;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.ev.RoadAccess;
import com.graphhopper.routing.ev.RoadClass;
import com.graphhopper.routing.util.TransportationMode;
import com.graphhopper.routing.util.spatialrules.countries.AustriaSpatialRule;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.locationtech.jts.geom.Polygon;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AustriaSpatialRule_ESTest extends AustriaSpatialRule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      RoadClass roadClass0 = RoadClass.STEPS;
      TransportationMode transportationMode0 = TransportationMode.OTHER;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      RoadClass roadClass0 = RoadClass.OTHER;
      TransportationMode transportationMode0 = TransportationMode.HGV;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, (-829.7029535));
      assertEquals((-829.7029535), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      RoadClass roadClass0 = RoadClass.TRACK;
      austriaSpatialRule0.getAccess(roadClass0, (TransportationMode) null, (RoadAccess) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      // Undeclared exception!
      try { 
        austriaSpatialRule0.getMaxSpeed((RoadClass) null, (TransportationMode) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.spatialrules.countries.AustriaSpatialRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      TransportationMode transportationMode0 = TransportationMode.CAR;
      RoadAccess roadAccess0 = RoadAccess.find("");
      // Undeclared exception!
      try { 
        austriaSpatialRule0.getAccess((RoadClass) null, transportationMode0, roadAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.spatialrules.countries.AustriaSpatialRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      TransportationMode transportationMode0 = TransportationMode.MOTORCYCLE;
      RoadAccess roadAccess0 = RoadAccess.YES;
      RoadClass roadClass0 = RoadClass.PEDESTRIAN;
      RoadAccess roadAccess1 = austriaSpatialRule0.getAccess(roadClass0, transportationMode0, roadAccess0);
      assertEquals(RoadAccess.NO, roadAccess1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadAccess roadAccess0 = RoadAccess.YES;
      RoadClass roadClass0 = RoadClass.FOOTWAY;
      RoadAccess roadAccess1 = austriaSpatialRule0.getAccess(roadClass0, transportationMode0, roadAccess0);
      assertEquals(RoadAccess.NO, roadAccess1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      RoadClass roadClass0 = RoadClass.OTHER;
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadAccess roadAccess0 = RoadAccess.YES;
      RoadAccess roadAccess1 = austriaSpatialRule0.getAccess(roadClass0, transportationMode0, roadAccess0);
      RoadClass roadClass1 = RoadClass.CYCLEWAY;
      RoadAccess roadAccess2 = austriaSpatialRule0.getAccess(roadClass1, transportationMode0, roadAccess1);
      assertEquals(RoadAccess.NO, roadAccess2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      RoadClass roadClass0 = RoadClass.OTHER;
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadAccess roadAccess0 = RoadAccess.YES;
      RoadAccess roadAccess1 = austriaSpatialRule0.getAccess(roadClass0, transportationMode0, roadAccess0);
      RoadClass roadClass1 = RoadClass.BRIDLEWAY;
      RoadAccess roadAccess2 = austriaSpatialRule0.getAccess(roadClass1, transportationMode0, roadAccess1);
      assertEquals(RoadAccess.NO, roadAccess2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      RoadClass roadClass0 = RoadClass.OTHER;
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadAccess roadAccess0 = RoadAccess.YES;
      RoadAccess roadAccess1 = austriaSpatialRule0.getAccess(roadClass0, transportationMode0, roadAccess0);
      RoadClass roadClass1 = RoadClass.PATH;
      RoadAccess roadAccess2 = austriaSpatialRule0.getAccess(roadClass1, transportationMode0, roadAccess1);
      assertEquals(RoadAccess.NO, roadAccess2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      RoadClass roadClass0 = RoadClass.TRACK;
      RoadAccess roadAccess0 = RoadAccess.YES;
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadAccess roadAccess1 = austriaSpatialRule0.getAccess(roadClass0, transportationMode0, roadAccess0);
      assertEquals(RoadAccess.FORESTRY, roadAccess1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      RoadClass roadClass0 = RoadClass.OTHER;
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadAccess roadAccess0 = RoadAccess.YES;
      RoadAccess roadAccess1 = austriaSpatialRule0.getAccess(roadClass0, transportationMode0, roadAccess0);
      RoadClass roadClass1 = RoadClass.LIVING_STREET;
      RoadAccess roadAccess2 = austriaSpatialRule0.getAccess(roadClass1, transportationMode0, roadAccess1);
      assertEquals(RoadAccess.DESTINATION, roadAccess2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule((List<Polygon>) null);
      RoadClass roadClass0 = RoadClass.OTHER;
      TransportationMode transportationMode0 = TransportationMode.BIKE;
      RoadAccess roadAccess0 = RoadAccess.YES;
      RoadAccess roadAccess1 = austriaSpatialRule0.getAccess(roadClass0, transportationMode0, roadAccess0);
      assertEquals("yes", roadAccess1.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadClass roadClass0 = RoadClass.LIVING_STREET;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, Double.NaN);
      assertEquals(20.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadClass roadClass0 = RoadClass.RESIDENTIAL;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, Double.NaN);
      assertEquals(50.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadClass roadClass0 = RoadClass.UNCLASSIFIED;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, Double.NaN);
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      TransportationMode transportationMode0 = TransportationMode.MOTORCYCLE;
      RoadClass roadClass0 = RoadClass.TERTIARY;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, Double.NaN);
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadClass roadClass0 = RoadClass.SECONDARY;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, Double.NaN);
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadClass roadClass0 = RoadClass.PRIMARY;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, Double.NaN);
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadClass roadClass0 = RoadClass.TRUNK;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, Double.NaN);
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadClass roadClass0 = RoadClass.MOTORWAY;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, Double.NaN);
      assertEquals(130.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      RoadClass roadClass0 = RoadClass.CORRIDOR;
      TransportationMode transportationMode0 = TransportationMode.VEHICLE;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Polygon> linkedList0 = new LinkedList<Polygon>();
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule(linkedList0);
      RoadClass roadClass0 = RoadClass.PATH;
      TransportationMode transportationMode0 = TransportationMode.HGV;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule((List<Polygon>) null);
      String string0 = austriaSpatialRule0.getId();
      assertEquals("aut", string0);
  }
}
