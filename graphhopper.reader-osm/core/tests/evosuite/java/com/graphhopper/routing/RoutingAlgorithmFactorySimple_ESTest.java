/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:51:17 GMT 2021
 */

package com.graphhopper.routing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.AlgorithmOptions;
import com.graphhopper.routing.RoutingAlgorithmFactorySimple;
import com.graphhopper.routing.util.TraversalMode;
import com.graphhopper.routing.weighting.WeightApproximator;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.Graph;
import com.graphhopper.storage.NodeAccess;
import com.graphhopper.util.EdgeExplorer;
import com.graphhopper.util.PMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RoutingAlgorithmFactorySimple_ESTest extends RoutingAlgorithmFactorySimple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        RoutingAlgorithmFactorySimple.getApproximation("(", (PMap) null, (Weighting) null, (NodeAccess) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.RoutingAlgorithmFactorySimple", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PMap pMap0 = mock(PMap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(pMap0).getDouble(anyString() , anyDouble());
      doReturn((String) null).when(pMap0).getString(anyString() , anyString());
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        RoutingAlgorithmFactorySimple.getApproximation("|c/K@?]-!V$MSJZ*", pMap0, weighting0, nodeAccess0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Approximation null not found in com.graphhopper.routing.RoutingAlgorithmFactorySimple
         //
         verifyException("com.graphhopper.routing.RoutingAlgorithmFactorySimple", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PMap pMap0 = mock(PMap.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(pMap0).getDouble(anyString() , anyDouble());
      doReturn("BeelineAccurate").when(pMap0).getString(anyString() , anyString());
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      WeightApproximator weightApproximator0 = RoutingAlgorithmFactorySimple.getApproximation("=>", pMap0, weighting0, nodeAccess0);
      assertEquals(0.0, weightApproximator0.getSlack(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RoutingAlgorithmFactorySimple routingAlgorithmFactorySimple0 = new RoutingAlgorithmFactorySimple();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(weighting0).when(graph0).wrapWeighting(any(com.graphhopper.routing.weighting.Weighting.class));
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AlgorithmOptions algorithmOptions0 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      doReturn("alternative_route").when(algorithmOptions0).getAlgorithm();
      doReturn((PMap) null).when(algorithmOptions0).getHints();
      doReturn(traversalMode0).when(algorithmOptions0).getTraversalMode();
      doReturn(weighting1).when(algorithmOptions0).getWeighting();
      // Undeclared exception!
      try { 
        routingAlgorithmFactorySimple0.createAlgo(graph0, algorithmOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.RoutingAlgorithmFactorySimple", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RoutingAlgorithmFactorySimple routingAlgorithmFactorySimple0 = new RoutingAlgorithmFactorySimple();
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((Weighting) null).when(graph0).wrapWeighting(any(com.graphhopper.routing.weighting.Weighting.class));
      AlgorithmOptions algorithmOptions0 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(algorithmOptions0).getAlgorithm();
      doReturn((TraversalMode) null).when(algorithmOptions0).getTraversalMode();
      doReturn((Weighting) null).when(algorithmOptions0).getWeighting();
      // Undeclared exception!
      try { 
        routingAlgorithmFactorySimple0.createAlgo(graph0, algorithmOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AbstractNonCHBidirAlgo", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RoutingAlgorithmFactorySimple routingAlgorithmFactorySimple0 = new RoutingAlgorithmFactorySimple();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(weighting0).when(graph0).wrapWeighting(any(com.graphhopper.routing.weighting.Weighting.class));
      AlgorithmOptions algorithmOptions0 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      doReturn("=>").when(algorithmOptions0).getAlgorithm();
      doReturn((Weighting) null).when(algorithmOptions0).getWeighting();
      // Undeclared exception!
      try { 
        routingAlgorithmFactorySimple0.createAlgo(graph0, algorithmOptions0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Algorithm => not found in com.graphhopper.routing.RoutingAlgorithmFactorySimple
         //
         verifyException("com.graphhopper.routing.RoutingAlgorithmFactorySimple", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RoutingAlgorithmFactorySimple routingAlgorithmFactorySimple0 = new RoutingAlgorithmFactorySimple();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null, (NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      doReturn(weighting0).when(graph0).wrapWeighting(any(com.graphhopper.routing.weighting.Weighting.class));
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AlgorithmOptions algorithmOptions0 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      doReturn("astarbi").when(algorithmOptions0).getAlgorithm();
      doReturn((PMap) null).when(algorithmOptions0).getHints();
      doReturn(traversalMode0).when(algorithmOptions0).getTraversalMode();
      doReturn(weighting1).when(algorithmOptions0).getWeighting();
      // Undeclared exception!
      try { 
        routingAlgorithmFactorySimple0.createAlgo(graph0, algorithmOptions0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.RoutingAlgorithmFactorySimple", e);
      }
  }
}
