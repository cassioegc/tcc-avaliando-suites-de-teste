/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:32:47 GMT 2021
 */

package com.graphhopper.routing.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.util.FerrySpeedCalculator;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FerrySpeedCalculator_ESTest extends FerrySpeedCalculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FerrySpeedCalculator ferrySpeedCalculator0 = new FerrySpeedCalculator(1246.816, 1246.816, 1246.816, (-1450.4053952691), 0.0);
      ReaderWay readerWay0 = new ReaderWay(0L);
      double double0 = ferrySpeedCalculator0.getSpeed(readerWay0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FerrySpeedCalculator ferrySpeedCalculator0 = new FerrySpeedCalculator(666.430918713, 2015.896612913224, 666.430918713, 1835.0755704, 666.430918713);
      ReaderWay readerWay0 = new ReaderWay(2692L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("estimated_distance", "?iGJVX[BCH$");
      readerWay0.setTags(hashMap0);
      // Undeclared exception!
      try { 
        ferrySpeedCalculator0.getSpeed(readerWay0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
         verifyException("com.graphhopper.routing.util.FerrySpeedCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReaderWay readerWay0 = new ReaderWay(0L);
      Short short0 = new Short((short)260);
      readerWay0.setTag("estimated_distance", short0);
      FerrySpeedCalculator ferrySpeedCalculator0 = new FerrySpeedCalculator(3, 1433.9016803241348, 3, 1, 0L);
      double double0 = ferrySpeedCalculator0.getSpeed(readerWay0);
      assertEquals(1.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ReaderWay readerWay0 = new ReaderWay((-20L));
      Short short0 = new Short((short)1400);
      readerWay0.setTag("estimated_distance", short0);
      FerrySpeedCalculator ferrySpeedCalculator0 = new FerrySpeedCalculator((-20L), 1, (-20L), 3, 1);
      double double0 = ferrySpeedCalculator0.getSpeed(readerWay0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FerrySpeedCalculator ferrySpeedCalculator0 = new FerrySpeedCalculator(1000.0, (-3127.9689180537), 1000.0, 1000.0, (-3127.9689180537));
      ReaderWay readerWay0 = new ReaderWay(0L);
      double double0 = ferrySpeedCalculator0.getSpeed(readerWay0);
      assertEquals((-3127.9689180537), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FerrySpeedCalculator ferrySpeedCalculator0 = new FerrySpeedCalculator((-927.30982704621), 0.0, (-927.30982704621), 0.0, 0.0);
      // Undeclared exception!
      try { 
        ferrySpeedCalculator0.getSpeed((ReaderWay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.FerrySpeedCalculator", e);
      }
  }
}
