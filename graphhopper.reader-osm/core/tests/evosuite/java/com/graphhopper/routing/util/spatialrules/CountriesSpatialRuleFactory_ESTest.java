/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:14:06 GMT 2021
 */

package com.graphhopper.routing.util.spatialrules;

import org.junit.Test;
import static org.junit.Assert.*;
import com.graphhopper.routing.util.spatialrules.AbstractSpatialRule;
import com.graphhopper.routing.util.spatialrules.CountriesSpatialRuleFactory;
import com.graphhopper.routing.util.spatialrules.SpatialRule;
import com.graphhopper.routing.util.spatialrules.countries.GermanySpatialRule;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.locationtech.jts.geom.Polygon;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CountriesSpatialRuleFactory_ESTest extends CountriesSpatialRuleFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CountriesSpatialRuleFactory countriesSpatialRuleFactory0 = new CountriesSpatialRuleFactory();
      GermanySpatialRule germanySpatialRule0 = (GermanySpatialRule)countriesSpatialRuleFactory0.createSpatialRule("DEU", (List<Polygon>) null);
      assertEquals(100, AbstractSpatialRule.DEFAULT_PRIORITY);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CountriesSpatialRuleFactory countriesSpatialRuleFactory0 = new CountriesSpatialRuleFactory();
      SpatialRule spatialRule0 = countriesSpatialRuleFactory0.createSpatialRule("STEPS", (List<Polygon>) null);
      assertNull(spatialRule0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CountriesSpatialRuleFactory countriesSpatialRuleFactory0 = new CountriesSpatialRuleFactory();
      SpatialRule spatialRule0 = countriesSpatialRuleFactory0.createSpatialRule("aut", (List<Polygon>) null);
      assertEquals(100, spatialRule0.getPriority());
  }
}
