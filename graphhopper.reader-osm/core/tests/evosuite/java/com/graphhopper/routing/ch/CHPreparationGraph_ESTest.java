/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:08:07 GMT 2021
 */

package com.graphhopper.routing.ch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.ch.CHPreparationGraph;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.Graph;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CHPreparationGraph_ESTest extends CHPreparationGraph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(95, 372, 372, 0.0F, (-1533.858F));
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setNextIn(95, (CHPreparationGraph.PrepareEdge) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set next in edge as the given base 95 is not adjacent to the current edge
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(0, 0, (-2687), (-2687), 0);
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.getNextIn((-1386));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot get next in edge as the given base -1386 is not adjacent to the current edge
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(40, 0, 0, (-1440.1571F), 0);
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.getNextOut(40);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot get next out edge as the given base 40 is not adjacent to the current edge
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1618), (-2183), (-1370), 1366.2266F, (-1.0F));
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setSkipped2(43);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1830), (-1830), 0, 0.0F, 0.0F);
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setOrigEdgeCount(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-2183), 653, 653, (-988.8342F), (-988.8342F));
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setNextOut((-2183), (CHPreparationGraph.PrepareEdge) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set next out edge as the given base -2183 is not adjacent to the current edge
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(549, 549, 1374, 1374, 878.723F);
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.getSkipped1();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(65535, 81, 2110, 81, 0.0F);
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastAB();
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals(81.0, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(131070, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-2602), 1523, 1, 0.0F, 0.0F);
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstBA();
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals((-5204), int0);
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-771), (-771), (-771), (-771), (-771));
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeCount();
      assertEquals(1, int0);
      assertEquals((-771.0), cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals((-771), cHPreparationGraph_PrepareBaseEdge0.getPrepareEdge());
      assertEquals((-771.0), cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(0, 1, 0, (-1039.259F), 0);
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setWeight((-845.2984695894694));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(536870911, 536870911, 536870911, 536870911, 536870911);
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setSkipped1((-1472));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-15), (-15), 1253, (-2978.0452F), 1253);
      boolean boolean0 = cHPreparationGraph_PrepareBaseEdge0.isShortcut();
      assertEquals(1253.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertFalse(boolean0);
      assertEquals((-29), cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastBA());
      assertEquals((-2978.045166015625), cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(1828, (-5198), 1828, 1828, 1828);
      double double0 = cHPreparationGraph_PrepareBaseEdge0.getWeightBA();
      assertEquals(3656, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstAB());
      assertEquals(1828.0, double0, 0.01);
      assertEquals(1828.0, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-2489), 536870911, (-56), (-2489), 1.0F);
      double double0 = cHPreparationGraph_PrepareBaseEdge0.getWeightAB();
      assertEquals((-2489.0), double0, 0.01);
      assertEquals(1.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals((-4977), cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstAB());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1087), 2, (-1087), (-1087), 2);
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastBA();
      assertEquals((-2174), int0);
      assertEquals(2.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals((-1087.0), cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(0, 0, 0, 0.0F, 0.0F);
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstAB();
      assertEquals(0, int0);
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(9600, 9600, 9600, 9600, (-2694.3018F));
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getNodeB();
      assertEquals((-2694.3017578125), cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals(9600.0, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(9600, int0);
      assertEquals(19200, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastBA());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(971, 536870911, 971, (-76.4801F), 536870911);
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getNodeA();
      assertEquals(5.36870912E8, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals(1942, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstBA());
      assertEquals((-76.4801025390625), cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(536870911, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(1, (-4352));
      int int0 = cHPreparationGraph0.getOriginalEdges();
      assertEquals((-4352), int0);
      assertEquals(1, cHPreparationGraph0.getNodes());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(0, 0);
      int int0 = cHPreparationGraph0.getNodes();
      assertEquals(0, cHPreparationGraph0.getOriginalEdges());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(4, 4, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.getDegree(2);
      assertEquals(4, cHPreparationGraph0.getNodes());
      assertEquals(4, cHPreparationGraph0.getOriginalEdges());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1109, (-1584), (CHPreparationGraph.TurnCostFunction) null);
      assertEquals(1109, cHPreparationGraph0.getNodes());
      assertEquals((-1584), cHPreparationGraph0.getOriginalEdges());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(0, 0, (CHPreparationGraph.TurnCostFunction) null);
      assertEquals(0, cHPreparationGraph0.getNodes());
      assertEquals(0, cHPreparationGraph0.getOriginalEdges());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(1789, 1);
      cHPreparationGraph0.prepareForContraction();
      cHPreparationGraph0.createOutEdgeExplorer();
      assertEquals(1789, cHPreparationGraph0.getNodes());
      assertEquals(1, cHPreparationGraph0.getOriginalEdges());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        CHPreparationGraph.nodeBased((-985), (-985));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      cHPreparationGraph0.close();
      // Undeclared exception!
      try { 
        cHPreparationGraph0.getDegree(1002);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        CHPreparationGraph.edgeBased((-91), (-91), (CHPreparationGraph.TurnCostFunction) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(1465, 1465);
      // Undeclared exception!
      try { 
        cHPreparationGraph0.disconnect(133);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You need to call prepareForContraction() before calling this method
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      // Undeclared exception!
      try { 
        cHPreparationGraph0.disconnect(1002);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1002
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      cHPreparationGraph0.close();
      // Undeclared exception!
      try { 
        cHPreparationGraph0.createOutOrigEdgeExplorer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      cHPreparationGraph0.close();
      // Undeclared exception!
      try { 
        cHPreparationGraph0.createInOrigEdgeExplorer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(0, 0);
      // Undeclared exception!
      try { 
        cHPreparationGraph0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You need to call prepareForContraction() before calling this method
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        CHPreparationGraph.buildTurnCostFunctionFromTurnCostStorage((Graph) null, (Weighting) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(1, 1);
      // Undeclared exception!
      try { 
        cHPreparationGraph0.addShortcut(2, 1, 2, 1, 1, (-3658), 2, 30);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You need to call prepareForContraction() before calling this method
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      // Undeclared exception!
      try { 
        cHPreparationGraph0.addShortcut(87, 1002, 0, 97, 1002, 87, (-226.676), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1002
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      // Undeclared exception!
      try { 
        cHPreparationGraph0.addEdge(1, (-298), 2576, 1002, 1002);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You cannot call this method after calling prepareForContraction()
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(6000, 6000, 0, 6000, 0.0F);
      cHPreparationGraph_PrepareBaseEdge0.setNextIn(0, (CHPreparationGraph.PrepareEdge) null);
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals(12001, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastAB());
      assertEquals(6000.0, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(1035, 0, 0, 1035, 1.0F);
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge1 = new CHPreparationGraph.PrepareBaseEdge(0, 1035, 1035, 1.0F, 1035);
      cHPreparationGraph_PrepareBaseEdge1.setNextIn(1035, cHPreparationGraph_PrepareBaseEdge0);
      assertEquals(1.0, cHPreparationGraph_PrepareBaseEdge1.getWeightAB(), 0.01);
      assertEquals(2070, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstBA());
      assertEquals(1035.0, cHPreparationGraph_PrepareBaseEdge1.getWeightBA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1618), (-2183), (-1370), 1366.2266F, (-1.0F));
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setNextIn((-66), (CHPreparationGraph.PrepareEdge) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set next in edge as the given base -66 is not adjacent to the current edge
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(2518, (-1470), 1769, (-4662.19F), 0.0F);
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.getNextIn(2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot get next in edge as the given base 2 is not adjacent to the current edge
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(1, 1, (-2772), 0.0F, 1);
      cHPreparationGraph_PrepareBaseEdge0.getNextIn(1);
      assertEquals(1.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(1, cHPreparationGraph_PrepareBaseEdge0.getPrepareEdge());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1618), (-2183), (-1370), 1366.2266F, (-1.0F));
      cHPreparationGraph_PrepareBaseEdge0.getNextIn((-1370));
      assertEquals((-1.0), cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals(1366.2265625, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals((-3236), cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastAB());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(1457, 1457, 2914, 100.0F, 2914);
      cHPreparationGraph_PrepareBaseEdge0.setNextOut(2914, cHPreparationGraph_PrepareBaseEdge0);
      assertEquals(100.0, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(2914.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals(2914, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastAB());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(0, 0, 10000, 10000, 10000);
      cHPreparationGraph_PrepareBaseEdge0.setNextOut(0, (CHPreparationGraph.PrepareEdge) null);
      assertEquals(1, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastBA());
      assertEquals(10000.0, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(10000.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-525), (-525), (-525), (-525), (-525));
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setNextOut(2677, cHPreparationGraph_PrepareBaseEdge0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot set next out edge as the given base 2677 is not adjacent to the current edge
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(1, 1, (-2772), 0.0F, 1);
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.getNextOut((-4328));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot get next out edge as the given base -4328 is not adjacent to the current edge
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(510, 1478, 3581, 2556.057F, 0.0F);
      assertEquals(1478, cHPreparationGraph_PrepareBaseEdge0.getNodeA());
      
      cHPreparationGraph_PrepareBaseEdge0.getNextOut(1478);
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals(2556.056884765625, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(1021, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstBA());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1618), (-2183), (-1370), 1366.2266F, (-1.0F));
      assertEquals((-1370), cHPreparationGraph_PrepareBaseEdge0.getNodeB());
      
      cHPreparationGraph_PrepareBaseEdge0.getNextOut((-1370));
      assertEquals((-2183), cHPreparationGraph_PrepareBaseEdge0.getNodeA());
      assertEquals(1366.2265625, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals((-3235), cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstBA());
      assertEquals((-1.0), cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(2, 2, 2, (-2363.09F), (-2363.09F));
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstBA();
      assertEquals((-2363.090087890625), cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals(4, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastAB());
      assertEquals((-2363.090087890625), cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-2927), 2, (-5198), 0.0F, 0.0F);
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstAB();
      assertEquals(2, cHPreparationGraph_PrepareBaseEdge0.getNodeA());
      assertEquals((-5198), cHPreparationGraph_PrepareBaseEdge0.getNodeB());
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals((-5853), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      // Undeclared exception!
      try { 
        cHPreparationGraph0.prepareForContraction();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You cannot call this method after calling prepareForContraction()
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      cHPreparationGraph0.close();
      // Undeclared exception!
      try { 
        cHPreparationGraph0.addShortcut(97, 0, 97, (-2169), 1002, 1466, 3096, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      cHPreparationGraph0.disconnect(97);
      assertEquals(1002, cHPreparationGraph0.getNodes());
      assertEquals(1002, cHPreparationGraph0.getOriginalEdges());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(1002, 1002);
      cHPreparationGraph0.prepareForContraction();
      // Undeclared exception!
      try { 
        cHPreparationGraph0.createInOrigEdgeExplorer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // orig in explorer is not available for node-based graph
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(43, 43);
      cHPreparationGraph0.prepareForContraction();
      // Undeclared exception!
      try { 
        cHPreparationGraph0.createOutOrigEdgeExplorer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // orig out explorer is not available for node-based graph
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(1002, 1002);
      cHPreparationGraph0.prepareForContraction();
      int int0 = cHPreparationGraph0.addShortcut(97, 0, 97, (-2169), 1002, 1466, 3096, 11);
      assertEquals(1002, cHPreparationGraph0.getOriginalEdges());
      assertEquals(1002, cHPreparationGraph0.getNodes());
      assertEquals(1002, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(11, 4046);
      // Undeclared exception!
      try { 
        cHPreparationGraph0.addEdge(4046, 11, 11, 11, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4046
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      cHPreparationGraph0.createOutOrigEdgeExplorer();
      assertEquals(1002, cHPreparationGraph0.getNodes());
      assertEquals(1002, cHPreparationGraph0.getOriginalEdges());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      cHPreparationGraph0.createInEdgeExplorer();
      assertEquals(1002, cHPreparationGraph0.getOriginalEdges());
      assertEquals(1002, cHPreparationGraph0.getNodes());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-2602), 1523, 1, 0.0F, 0.0F);
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.getSkipped1();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1), (-1), (-764), 0.75F, (-1));
      boolean boolean0 = cHPreparationGraph_PrepareBaseEdge0.isShortcut();
      assertEquals((-1.0), cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertFalse(boolean0);
      assertEquals((-764), cHPreparationGraph_PrepareBaseEdge0.getNodeB());
      assertEquals((-1), cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstAB());
      assertEquals((-1), cHPreparationGraph_PrepareBaseEdge0.getNodeA());
      assertEquals(0.75, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(2, 2, 2, (-2363.09F), (-2363.09F));
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.getSkipped2();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(0, 0, 0, 0.0F, 0.0F);
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getPrepareEdge();
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(0, int0);
      assertEquals(0, cHPreparationGraph_PrepareBaseEdge0.getNodeB());
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals(0, cHPreparationGraph_PrepareBaseEdge0.getNodeA());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-855), 2, (-855), 768.80444F, 1877.0F);
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setWeight((-1.7976931348623157E308));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1618), (-2183), (-1370), 1366.2266F, (-1.0F));
      String string0 = cHPreparationGraph_PrepareBaseEdge0.toString();
      assertEquals("-2183--1370 (-1618) 1366.2266 -1.0", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1618), (-2183), (-1370), 1366.2266F, (-1.0F));
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastBA();
      assertEquals((-1370), cHPreparationGraph_PrepareBaseEdge0.getNodeB());
      assertEquals((-1.0), cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals((-3235), int0);
      assertEquals(1366.2265625, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals((-2183), cHPreparationGraph_PrepareBaseEdge0.getNodeA());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(510, 1478, 3581, 2556.057F, 0.0F);
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setSkipped2(1370);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1326), (-1326), (-859), (-859), (-859));
      double double0 = cHPreparationGraph_PrepareBaseEdge0.getWeightAB();
      assertEquals((-859.0), cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals((-859.0), double0, 0.01);
      assertEquals((-2651), cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstBA());
      assertEquals((-859), cHPreparationGraph_PrepareBaseEdge0.getNodeB());
      assertEquals((-1326), cHPreparationGraph_PrepareBaseEdge0.getNodeA());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-2183), 653, 653, (-988.8342F), (-988.8342F));
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getNodeA();
      assertEquals(653, cHPreparationGraph_PrepareBaseEdge0.getNodeB());
      assertEquals(653, int0);
      assertEquals((-988.834228515625), cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals((-4366), cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstBA());
      assertEquals((-988.834228515625), cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1326), (-1326), (-859), (-859), (-859));
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setSkipped1((-2652));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(2, 2, 2, (-2363.09F), (-2363.09F));
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastAB();
      assertEquals((-2363.090087890625), cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals((-2363.090087890625), cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(4, int0);
      assertEquals(4, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstBA());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge(0, 0, 0, (-1.0F), 0);
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeCount();
      assertEquals(0.0, cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals(1, int0);
      assertEquals(0, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastAB());
      assertEquals((-1.0), cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals(0, cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyLastBA());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1618), (-2183), (-1370), (-1370), (-1.0F));
      double double0 = cHPreparationGraph_PrepareBaseEdge0.getWeightBA();
      assertEquals((-1370), cHPreparationGraph_PrepareBaseEdge0.getNodeB());
      assertEquals((-2183), cHPreparationGraph_PrepareBaseEdge0.getNodeA());
      assertEquals((-3235), cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstBA());
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1370.0), cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-1618), (-2183), (-1370), 1366.2266F, (-1.0F));
      int int0 = cHPreparationGraph_PrepareBaseEdge0.getNodeB();
      assertEquals(1366.2265625, cHPreparationGraph_PrepareBaseEdge0.getWeightAB(), 0.01);
      assertEquals((-2183), cHPreparationGraph_PrepareBaseEdge0.getNodeA());
      assertEquals((-3235), cHPreparationGraph_PrepareBaseEdge0.getOrigEdgeKeyFirstBA());
      assertEquals((-1.0), cHPreparationGraph_PrepareBaseEdge0.getWeightBA(), 0.01);
      assertEquals((-1370), int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CHPreparationGraph.PrepareBaseEdge cHPreparationGraph_PrepareBaseEdge0 = new CHPreparationGraph.PrepareBaseEdge((-2183), 653, 653, (-988.8342F), (-988.8342F));
      // Undeclared exception!
      try { 
        cHPreparationGraph_PrepareBaseEdge0.setOrigEdgeCount((-2183));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph$PrepareBaseEdge", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      int int0 = cHPreparationGraph0.getNodes();
      assertEquals(1002, cHPreparationGraph0.getOriginalEdges());
      assertEquals(1002, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      // Undeclared exception!
      try { 
        cHPreparationGraph0.createInEdgeExplorer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You need to call prepareForContraction() before calling this method
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      // Undeclared exception!
      try { 
        cHPreparationGraph0.getDegree(1002);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1002
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(2518, 2518);
      cHPreparationGraph0.getTurnWeight(2518, 1769, 2518);
      assertEquals(2518, cHPreparationGraph0.getOriginalEdges());
      assertEquals(2518, cHPreparationGraph0.getNodes());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.nodeBased(453, 453);
      // Undeclared exception!
      try { 
        cHPreparationGraph0.createOutEdgeExplorer();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You need to call prepareForContraction() before calling this method
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(4, 4, (CHPreparationGraph.TurnCostFunction) null);
      int int0 = cHPreparationGraph0.getOriginalEdges();
      assertEquals(4, cHPreparationGraph0.getNodes());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CHPreparationGraph cHPreparationGraph0 = CHPreparationGraph.edgeBased(1002, 1002, (CHPreparationGraph.TurnCostFunction) null);
      cHPreparationGraph0.prepareForContraction();
      cHPreparationGraph0.createInOrigEdgeExplorer();
      assertEquals(1002, cHPreparationGraph0.getNodes());
      assertEquals(1002, cHPreparationGraph0.getOriginalEdges());
  }
}
