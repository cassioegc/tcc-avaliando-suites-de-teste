/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:46:36 GMT 2021
 */

package com.graphhopper.routing.util.spatialrules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.ev.RoadAccess;
import com.graphhopper.routing.ev.RoadClass;
import com.graphhopper.routing.util.TransportationMode;
import com.graphhopper.routing.util.spatialrules.SpatialRule;
import com.graphhopper.routing.util.spatialrules.SpatialRuleSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SpatialRuleSet_ESTest extends SpatialRuleSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SpatialRuleSet spatialRuleSet0 = SpatialRuleSet.EMPTY;
      RoadClass roadClass0 = RoadClass.TERTIARY;
      TransportationMode transportationMode0 = TransportationMode.OTHER;
      double double0 = spatialRuleSet0.getMaxSpeed(roadClass0, transportationMode0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SpatialRuleSet spatialRuleSet0 = SpatialRuleSet.EMPTY;
      List<SpatialRule> list0 = spatialRuleSet0.getRules();
      SpatialRuleSet spatialRuleSet1 = new SpatialRuleSet(list0, (-641));
      int int0 = spatialRuleSet1.getSpatialId();
      assertEquals((-641), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SpatialRuleSet spatialRuleSet0 = SpatialRuleSet.EMPTY;
      RoadClass roadClass0 = RoadClass.TRUNK;
      TransportationMode transportationMode0 = TransportationMode.BIKE;
      double double0 = spatialRuleSet0.getMaxSpeed(roadClass0, transportationMode0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SpatialRuleSet spatialRuleSet0 = SpatialRuleSet.EMPTY;
      RoadClass roadClass0 = RoadClass.ROAD;
      TransportationMode transportationMode0 = TransportationMode.OTHER;
      double double0 = spatialRuleSet0.getMaxSpeed(roadClass0, transportationMode0, (-6817.0));
      assertEquals((-6817.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SpatialRuleSet spatialRuleSet0 = SpatialRuleSet.EMPTY;
      TransportationMode transportationMode0 = TransportationMode.MOTORCYCLE;
      spatialRuleSet0.getAccess((RoadClass) null, transportationMode0, (RoadAccess) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SpatialRuleSet spatialRuleSet0 = null;
      try {
        spatialRuleSet0 = new SpatialRuleSet((List<SpatialRule>) null, (-2179));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SpatialRuleSet spatialRuleSet0 = SpatialRuleSet.EMPTY;
      RoadClass roadClass0 = RoadClass.UNCLASSIFIED;
      TransportationMode transportationMode0 = TransportationMode.HGV;
      RoadAccess roadAccess0 = RoadAccess.DELIVERY;
      RoadAccess roadAccess1 = spatialRuleSet0.getAccess(roadClass0, transportationMode0, roadAccess0);
      assertEquals("delivery", roadAccess1.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SpatialRuleSet spatialRuleSet0 = SpatialRuleSet.EMPTY;
      RoadClass roadClass0 = RoadClass.PRIMARY;
      TransportationMode transportationMode0 = TransportationMode.OTHER;
      double double0 = spatialRuleSet0.getMaxSpeed(roadClass0, transportationMode0, 12);
      assertEquals(12.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SpatialRuleSet spatialRuleSet0 = SpatialRuleSet.EMPTY;
      int int0 = spatialRuleSet0.getSpatialId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpatialRuleSet spatialRuleSet0 = SpatialRuleSet.EMPTY;
      String string0 = spatialRuleSet0.toString();
      assertEquals("SpatialRuleSet [rules=[]]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SpatialRuleSet spatialRuleSet0 = SpatialRuleSet.EMPTY;
      List<SpatialRule> list0 = spatialRuleSet0.getRules();
      SpatialRuleSet spatialRuleSet1 = new SpatialRuleSet(list0, 12);
      int int0 = spatialRuleSet1.getSpatialId();
      assertEquals(12, int0);
  }
}
