/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:23:04 GMT 2021
 */

package com.graphhopper.routing.lm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.lm.PerfectApproximator;
import com.graphhopper.routing.util.TraversalMode;
import com.graphhopper.routing.weighting.WeightApproximator;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.Graph;
import com.graphhopper.storage.NodeAccess;
import com.graphhopper.util.EdgeExplorer;
import com.graphhopper.util.EdgeIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PerfectApproximator_ESTest extends PerfectApproximator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EdgeIterator edgeIterator0 = mock(EdgeIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(edgeIterator0).next();
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      doReturn(edgeIterator0).when(edgeExplorer0).setBaseNode(anyInt());
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0, (EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn(nodeAccess0, (NodeAccess) null, (NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(Integer.MIN_VALUE, 0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(weighting0).hasTurnCosts();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      PerfectApproximator perfectApproximator0 = new PerfectApproximator(graph0, weighting0, traversalMode0, true);
      perfectApproximator0.approximate((-632));
      // Undeclared exception!
      try { 
        perfectApproximator0.approximate((-632));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.Dijkstra", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(weighting0).hasTurnCosts();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      PerfectApproximator perfectApproximator0 = new PerfectApproximator(graph0, weighting0, traversalMode0, false);
      // Undeclared exception!
      try { 
        perfectApproximator0.approximate((-3313));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Weightings supporting turn costs cannot be used with node-based traversal mode
         //
         verifyException("com.graphhopper.routing.AbstractRoutingAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      PerfectApproximator perfectApproximator0 = new PerfectApproximator(graph0, weighting0, traversalMode0, false);
      WeightApproximator weightApproximator0 = perfectApproximator0.reverse();
      assertNotSame(perfectApproximator0, weightApproximator0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null, (NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      PerfectApproximator perfectApproximator0 = new PerfectApproximator(graph0, weighting0, traversalMode0, true);
      WeightApproximator weightApproximator0 = perfectApproximator0.reverse();
      double double0 = weightApproximator0.approximate(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      PerfectApproximator perfectApproximator0 = new PerfectApproximator(graph0, weighting0, traversalMode0, false);
      perfectApproximator0.setTo(2);
      assertEquals(0.0, perfectApproximator0.getSlack(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      PerfectApproximator perfectApproximator0 = new PerfectApproximator(graph0, weighting0, traversalMode0, false);
      double double0 = perfectApproximator0.getSlack();
      assertEquals(0.0, double0, 0.01);
  }
}
