/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:43:07 GMT 2021
 */

package com.graphhopper.routing.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.ev.DecimalEncodedValue;
import com.graphhopper.routing.ev.UnsignedDecimalEncodedValue;
import com.graphhopper.routing.util.AllEdgesIterator;
import com.graphhopper.routing.util.Bike2WeightFlagEncoder;
import com.graphhopper.routing.util.BikeFlagEncoder;
import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.TransportationMode;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.IntsRef;
import com.graphhopper.storage.MMapDirectory;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.GHUtility;
import com.graphhopper.util.PMap;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Bike2WeightFlagEncoder_ESTest extends Bike2WeightFlagEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder();
      UnsignedDecimalEncodedValue unsignedDecimalEncodedValue0 = new UnsignedDecimalEncodedValue("bike2", 3, (-1924.4708186256873), (-0.1), true);
      bike2WeightFlagEncoder0.avgSpeedEnc = (DecimalEncodedValue) unsignedDecimalEncodedValue0;
      IntsRef intsRef0 = new IntsRef(3);
      ReaderWay readerWay0 = new ReaderWay(3);
      // Undeclared exception!
      try { 
        bike2WeightFlagEncoder0.handleSpeed(intsRef0, readerWay0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Call init before usage for EncodedValue bike2|version=-1902163028|bits=3|index=0|shift=-1|store_both_directions=true
         //
         verifyException("com.graphhopper.routing.ev.UnsignedDecimalEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(2187L);
      GHUtility.DisabledEdgeIterator gHUtility_DisabledEdgeIterator0 = new GHUtility.DisabledEdgeIterator();
      // Undeclared exception!
      try { 
        bike2WeightFlagEncoder0.applyWayTags(readerWay0, gHUtility_DisabledEdgeIterator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Edge is empty.
         //
         verifyException("com.graphhopper.util.GHUtility$DisabledEdgeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay((-1006L));
      // Undeclared exception!
      try { 
        bike2WeightFlagEncoder0.applyWayTags(readerWay0, (EdgeIteratorState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.Bike2WeightFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(0L);
      MMapDirectory mMapDirectory0 = new MMapDirectory("speed_factor=");
      Vector<BikeFlagEncoder> vector0 = new Vector<BikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 0);
      AllEdgesIterator allEdgesIterator0 = graphHopperStorage0.getAllEdges();
      // Undeclared exception!
      try { 
        bike2WeightFlagEncoder0.applyWayTags(readerWay0, allEdgesIterator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Padding required. Currently an int cannot be distributed over two segments. -1
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(17L);
      RAMDirectory rAMDirectory0 = new RAMDirectory(":N{X");
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      List<FlagEncoder> list0 = EncodingManager.parseEncoderString(defaultFlagEncoderFactory0, "");
      EncodingManager encodingManager0 = EncodingManager.create(list0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true);
      AllEdgesIterator allEdgesIterator0 = graphHopperStorage0.getAllEdges();
      // Undeclared exception!
      try { 
        bike2WeightFlagEncoder0.applyWayTags(readerWay0, allEdgesIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = null;
      try {
        bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder((PMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.BikeFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PMap pMap0 = new PMap(2435);
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder(pMap0);
      assertEquals(TransportationMode.BIKE, bike2WeightFlagEncoder0.getTransportationMode());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder();
      IntsRef intsRef0 = IntsRef.EMPTY;
      ReaderWay readerWay0 = new ReaderWay(3);
      // Undeclared exception!
      try { 
        bike2WeightFlagEncoder0.handleSpeed(intsRef0, readerWay0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.Bike2WeightFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder();
      String string0 = bike2WeightFlagEncoder0.toString();
      assertEquals("bike2", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder();
      int int0 = bike2WeightFlagEncoder0.getVersion();
      assertEquals(3, int0);
  }
}
