/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:25:40 GMT 2021
 */

package com.graphhopper.routing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.HeadingResolver;
import com.graphhopper.storage.Graph;
import com.graphhopper.util.EdgeExplorer;
import com.graphhopper.util.EdgeIterator;
import com.graphhopper.util.PointList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HeadingResolver_ESTest extends HeadingResolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      HeadingResolver headingResolver0 = new HeadingResolver(graph0);
      // Undeclared exception!
      try { 
        headingResolver0.getEdgesWithDifferentHeading((-896), 590.5395940302);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Azimuth 590.5395940302 must be in (0, 360)
         //
         verifyException("com.graphhopper.util.AngleCalc", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HeadingResolver headingResolver0 = null;
      try {
        headingResolver0 = new HeadingResolver((Graph) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.HeadingResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EdgeIterator edgeIterator0 = mock(EdgeIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(edgeIterator0).next();
      EdgeIterator edgeIterator1 = mock(EdgeIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(edgeIterator1).next();
      doReturn((PointList) null).when(edgeIterator1).fetchWayGeometry(any(com.graphhopper.util.FetchMode.class));
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      doReturn(edgeIterator0, edgeIterator1).when(edgeExplorer0).setBaseNode(anyInt());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      HeadingResolver headingResolver0 = new HeadingResolver(graph0);
      headingResolver0.getEdgesWithDifferentHeading(0, 0);
      // Undeclared exception!
      try { 
        headingResolver0.getEdgesWithDifferentHeading(1537, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.HeadingResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      HeadingResolver headingResolver0 = new HeadingResolver(graph0);
      HeadingResolver headingResolver1 = headingResolver0.setTolerance((-2828));
      assertSame(headingResolver0, headingResolver1);
  }
}
