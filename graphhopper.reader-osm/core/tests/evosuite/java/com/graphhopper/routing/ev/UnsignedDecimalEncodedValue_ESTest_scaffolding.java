/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Apr 04 03:21:02 GMT 2021
 */

package com.graphhopper.routing.ev;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class UnsignedDecimalEncodedValue_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.graphhopper.routing.ev.UnsignedDecimalEncodedValue"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/cassioegc/tcc/graphhopper.reader-osm/core"); 
    java.lang.System.setProperty("user.home", "/home/cassioegc"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "cassioegc"); 
    java.lang.System.setProperty("user.timezone", ""); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(UnsignedDecimalEncodedValue_ESTest_scaffolding.class.getClassLoader() ,
      "com.graphhopper.reader.OSMTurnRelation",
      "org.locationtech.jts.geom.util.GeometryMapper$MapOp",
      "org.locationtech.jts.geom.CoordinateFilter",
      "com.carrotsearch.hppc.LongCollection",
      "org.locationtech.jts.geom.Coordinate",
      "com.graphhopper.storage.BaseGraph$EdgeIteratorStateImpl",
      "com.graphhopper.routing.util.AbstractFlagEncoder",
      "org.locationtech.jts.algorithm.LineIntersector",
      "com.graphhopper.routing.util.EncodingManager",
      "com.graphhopper.util.EdgeExplorer",
      "com.carrotsearch.hppc.ObjectCollection",
      "com.graphhopper.routing.util.parsers.TurnCostParser$ExternalInternalMap",
      "org.locationtech.jts.algorithm.RobustLineIntersector",
      "com.carrotsearch.hppc.predicates.ObjectPredicate",
      "com.graphhopper.storage.DAType$MemRef",
      "org.locationtech.jts.geom.MultiLineString",
      "com.graphhopper.util.shapes.BBox",
      "com.graphhopper.reader.ReaderRelation$Member",
      "com.carrotsearch.hppc.procedures.LongProcedure",
      "com.graphhopper.reader.ReaderRelation",
      "com.graphhopper.util.EdgeIteratorState$1",
      "com.carrotsearch.hppc.ArraySizingStrategy",
      "org.locationtech.jts.algorithm.NotRepresentableException",
      "com.graphhopper.util.shapes.Shape",
      "org.locationtech.jts.geom.PrecisionModel$Type",
      "com.graphhopper.reader.osm.conditional.ConditionalValueParser$ConditionState",
      "com.carrotsearch.hppc.procedures.ObjectIntProcedure",
      "com.carrotsearch.hppc.LongIndexedContainer",
      "com.carrotsearch.hppc.procedures.IntProcedure",
      "org.locationtech.jts.geom.GeometryFilter",
      "com.graphhopper.routing.util.AllEdgesIterator",
      "com.carrotsearch.hppc.LongArrayList",
      "org.locationtech.jts.geom.Geometry$1",
      "com.graphhopper.routing.ev.EncodedValueFactory",
      "com.graphhopper.routing.util.EdgeFilter",
      "com.graphhopper.routing.util.parsers.RelationTagParser",
      "org.locationtech.jts.geom.LinearRing",
      "org.locationtech.jts.geom.IntersectionMatrix",
      "com.graphhopper.routing.ev.EncodedValue$InitializerConfig",
      "com.carrotsearch.hppc.ObjectContainer",
      "com.graphhopper.storage.Graph",
      "com.graphhopper.util.PointAccess",
      "com.graphhopper.routing.util.FlagEncoder",
      "com.graphhopper.routing.ev.EnumEncodedValue",
      "org.locationtech.jts.geom.impl.CoordinateArraySequenceFactory",
      "com.graphhopper.routing.ev.EncodedValue",
      "com.carrotsearch.hppc.LongLookupContainer",
      "com.carrotsearch.hppc.predicates.ObjectIntPredicate",
      "com.graphhopper.routing.ev.BooleanEncodedValue",
      "com.graphhopper.reader.ConditionalTagInspector",
      "org.locationtech.jts.geom.Lineal",
      "com.graphhopper.routing.util.TransportationMode",
      "org.locationtech.jts.geom.GeometryCollection",
      "com.graphhopper.routing.util.parsers.TagParserFactory",
      "com.graphhopper.routing.ev.UnsignedDecimalEncodedValue",
      "com.graphhopper.storage.NodeAccess",
      "com.graphhopper.reader.osm.conditional.DateRange",
      "org.locationtech.jts.geom.MultiPoint",
      "com.graphhopper.util.shapes.GHPoint",
      "org.locationtech.jts.geom.CoordinateSequence",
      "com.graphhopper.util.shapes.GHPoint3D",
      "com.graphhopper.routing.util.parsers.TurnCostParser",
      "org.locationtech.jts.geom.GeometryComponentFilter",
      "com.graphhopper.routing.ev.IntEncodedValue",
      "com.graphhopper.storage.Directory",
      "com.graphhopper.routing.util.parsers.TagParser",
      "org.locationtech.jts.geom.Puntal",
      "com.carrotsearch.hppc.BufferAllocationException",
      "com.graphhopper.routing.ev.DecimalEncodedValue",
      "com.graphhopper.util.ShallowImmutablePointList",
      "com.graphhopper.routing.ev.StringEncodedValue",
      "com.graphhopper.reader.ReaderElement",
      "com.carrotsearch.hppc.AbstractLongCollection",
      "com.graphhopper.util.EdgeIteratorState",
      "com.graphhopper.util.Helper",
      "com.graphhopper.util.PMap",
      "com.carrotsearch.hppc.IntContainer",
      "org.locationtech.jts.geom.Point",
      "com.graphhopper.routing.util.FlagEncoderFactory",
      "com.graphhopper.reader.OSMTurnRelation$Type",
      "com.graphhopper.util.EdgeIterator",
      "com.graphhopper.util.PointList",
      "org.locationtech.jts.geom.util.GeometryEditor$GeometryEditorOperation",
      "com.graphhopper.util.PointList$1",
      "com.graphhopper.routing.util.EncodingManager$Builder",
      "org.locationtech.jts.geom.CoordinateSequenceFilter",
      "org.locationtech.jts.geom.Polygon",
      "org.locationtech.jts.geom.Geometry",
      "org.locationtech.jts.geom.PrecisionModel",
      "com.graphhopper.reader.osm.conditional.ParsedCalendar",
      "com.graphhopper.storage.TurnCostStorage$TurnRelationIterator",
      "org.locationtech.jts.geom.MultiPolygon",
      "com.carrotsearch.hppc.predicates.LongPredicate",
      "com.graphhopper.reader.osm.conditional.ConditionalValueParser",
      "com.graphhopper.storage.BaseGraph",
      "com.graphhopper.reader.ReaderWay",
      "com.carrotsearch.hppc.ObjectIntMap",
      "com.graphhopper.routing.ev.SimpleBooleanEncodedValue",
      "com.graphhopper.storage.Storable",
      "com.carrotsearch.hppc.procedures.ObjectProcedure",
      "com.carrotsearch.hppc.LongContainer",
      "org.locationtech.jts.algorithm.RectangleLineIntersector",
      "com.graphhopper.storage.IntsRef",
      "com.carrotsearch.hppc.ObjectIntAssociativeContainer",
      "org.locationtech.jts.geom.GeometryFactory",
      "com.graphhopper.reader.osm.conditional.DateRangeParser",
      "com.carrotsearch.hppc.Preallocable",
      "com.carrotsearch.hppc.predicates.IntPredicate",
      "org.locationtech.jts.geom.Polygonal",
      "com.graphhopper.routing.ev.EncodedValueLookup",
      "com.graphhopper.routing.ev.UnsignedIntEncodedValue",
      "com.graphhopper.routing.util.EncodingManager$Access",
      "org.locationtech.jts.geom.CoordinateSequenceFactory",
      "org.locationtech.jts.geom.LineString",
      "com.graphhopper.storage.DAType",
      "com.graphhopper.storage.TurnCostStorage",
      "com.graphhopper.routing.weighting.Weighting",
      "com.graphhopper.storage.DataAccess",
      "com.graphhopper.routing.util.EncodingManager$AcceptWay",
      "com.graphhopper.reader.ReaderNode",
      "org.locationtech.jts.geom.Envelope",
      "org.locationtech.jts.geom.CoordinateSequenceComparator",
      "com.graphhopper.util.FetchMode",
      "com.carrotsearch.hppc.ObjectLookupContainer"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(UnsignedDecimalEncodedValue_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.graphhopper.routing.ev.UnsignedIntEncodedValue",
      "com.graphhopper.routing.ev.UnsignedDecimalEncodedValue",
      "com.graphhopper.routing.util.EncodingManager",
      "com.graphhopper.storage.IntsRef",
      "com.graphhopper.routing.ev.EncodedValue$InitializerConfig",
      "com.graphhopper.util.Helper"
    );
  }
}
