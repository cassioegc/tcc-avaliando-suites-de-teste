/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:38:06 GMT 2021
 */

package com.graphhopper.routing.weighting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.ev.BooleanEncodedValue;
import com.graphhopper.routing.ev.DecimalEncodedValue;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.TransportationMode;
import com.graphhopper.routing.weighting.ShortFastestWeighting;
import com.graphhopper.routing.weighting.TurnCostProvider;
import com.graphhopper.util.PMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShortFastestWeighting_ESTest extends ShortFastestWeighting_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PMap pMap0 = mock(PMap.class, new ViolatedAssumptionAnswer());
      TurnCostProvider turnCostProvider0 = mock(TurnCostProvider.class, new ViolatedAssumptionAnswer());
      ShortFastestWeighting shortFastestWeighting0 = null;
      try {
        shortFastestWeighting0 = new ShortFastestWeighting((FlagEncoder) null, pMap0, turnCostProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.AbstractWeighting", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(flagEncoder0).isRegistered();
      doReturn((String) null).when(flagEncoder0).toString();
      PMap pMap0 = mock(PMap.class, new ViolatedAssumptionAnswer());
      TurnCostProvider turnCostProvider0 = mock(TurnCostProvider.class, new ViolatedAssumptionAnswer());
      ShortFastestWeighting shortFastestWeighting0 = null;
      try {
        shortFastestWeighting0 = new ShortFastestWeighting(flagEncoder0, pMap0, turnCostProvider0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Make sure you add the FlagEncoder null to an EncodingManager before using it elsewhere
         //
         verifyException("com.graphhopper.routing.weighting.AbstractWeighting", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TurnCostProvider turnCostProvider0 = mock(TurnCostProvider.class, new ViolatedAssumptionAnswer());
      ShortFastestWeighting shortFastestWeighting0 = null;
      try {
        shortFastestWeighting0 = new ShortFastestWeighting((FlagEncoder) null, (-244.56210470229), turnCostProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.AbstractWeighting", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(flagEncoder0).isRegistered();
      doReturn((String) null).when(flagEncoder0).toString();
      TurnCostProvider turnCostProvider0 = mock(TurnCostProvider.class, new ViolatedAssumptionAnswer());
      ShortFastestWeighting shortFastestWeighting0 = null;
      try {
        shortFastestWeighting0 = new ShortFastestWeighting(flagEncoder0, 1.0E-4, turnCostProvider0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Make sure you add the FlagEncoder null to an EncodingManager before using it elsewhere
         //
         verifyException("com.graphhopper.routing.weighting.AbstractWeighting", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ShortFastestWeighting shortFastestWeighting0 = null;
      try {
        shortFastestWeighting0 = new ShortFastestWeighting((FlagEncoder) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.AbstractWeighting", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(flagEncoder0).isRegistered();
      doReturn((String) null).when(flagEncoder0).toString();
      ShortFastestWeighting shortFastestWeighting0 = null;
      try {
        shortFastestWeighting0 = new ShortFastestWeighting(flagEncoder0, (-129.8275467992529));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Make sure you add the FlagEncoder null to an EncodingManager before using it elsewhere
         //
         verifyException("com.graphhopper.routing.weighting.AbstractWeighting", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BooleanEncodedValue booleanEncodedValue0 = mock(BooleanEncodedValue.class, new ViolatedAssumptionAnswer());
      DecimalEncodedValue decimalEncodedValue0 = mock(DecimalEncodedValue.class, new ViolatedAssumptionAnswer());
      TransportationMode transportationMode0 = TransportationMode.CAR;
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(flagEncoder0).hasEncodedValue(anyString());
      doReturn((BooleanEncodedValue) null).when(flagEncoder0).getAccessEnc();
      doReturn((DecimalEncodedValue) null).when(flagEncoder0).getAverageSpeedEnc();
      doReturn(0.0).when(flagEncoder0).getMaxSpeed();
      doReturn(true).when(flagEncoder0).isRegistered();
      TurnCostProvider turnCostProvider0 = mock(TurnCostProvider.class, new ViolatedAssumptionAnswer());
      ShortFastestWeighting shortFastestWeighting0 = null;
      try {
        shortFastestWeighting0 = new ShortFastestWeighting(flagEncoder0, (-1542.4), turnCostProvider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // road_access is not available but expected for FastestWeighting
         //
         verifyException("com.graphhopper.routing.weighting.FastestWeighting", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(flagEncoder0).hasEncodedValue(anyString());
      doReturn((BooleanEncodedValue) null).when(flagEncoder0).getAccessEnc();
      doReturn((DecimalEncodedValue) null).when(flagEncoder0).getAverageSpeedEnc();
      doReturn(0.0).when(flagEncoder0).getMaxSpeed();
      doReturn(true).when(flagEncoder0).isRegistered();
      ShortFastestWeighting shortFastestWeighting0 = null;
      try {
        shortFastestWeighting0 = new ShortFastestWeighting(flagEncoder0, 106.178211592);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // road_access is not available but expected for FastestWeighting
         //
         verifyException("com.graphhopper.routing.weighting.FastestWeighting", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(flagEncoder0).hasEncodedValue(anyString());
      doReturn((BooleanEncodedValue) null).when(flagEncoder0).getAccessEnc();
      doReturn((DecimalEncodedValue) null).when(flagEncoder0).getAverageSpeedEnc();
      doReturn(0.0).when(flagEncoder0).getMaxSpeed();
      doReturn(true).when(flagEncoder0).isRegistered();
      PMap pMap0 = mock(PMap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(pMap0).getDouble(anyString() , anyDouble());
      TurnCostProvider turnCostProvider0 = mock(TurnCostProvider.class, new ViolatedAssumptionAnswer());
      ShortFastestWeighting shortFastestWeighting0 = null;
      try {
        shortFastestWeighting0 = new ShortFastestWeighting(flagEncoder0, pMap0, turnCostProvider0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // road_access is not available but expected for FastestWeighting
         //
         verifyException("com.graphhopper.routing.weighting.FastestWeighting", e);
      }
  }
}
