/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:29:17 GMT 2021
 */

package com.graphhopper.routing.util.spatialrules;

import org.junit.Test;
import static org.junit.Assert.*;
import com.graphhopper.routing.ev.RoadAccess;
import com.graphhopper.routing.ev.RoadClass;
import com.graphhopper.routing.util.TransportationMode;
import com.graphhopper.routing.util.spatialrules.countries.AustriaSpatialRule;
import com.graphhopper.routing.util.spatialrules.countries.GermanySpatialRule;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.locationtech.jts.geom.Polygon;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractSpatialRule_ESTest extends AbstractSpatialRule_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule((List<Polygon>) null);
      RoadClass roadClass0 = RoadClass.TRACK;
      TransportationMode transportationMode0 = TransportationMode.OTHER;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GermanySpatialRule germanySpatialRule0 = new GermanySpatialRule((List<Polygon>) null);
      RoadClass roadClass0 = RoadClass.OTHER;
      TransportationMode transportationMode0 = TransportationMode.HGV;
      double double0 = germanySpatialRule0.getMaxSpeed(roadClass0, transportationMode0, 4348.4638346);
      assertEquals(4348.4638346, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule((List<Polygon>) null);
      RoadClass roadClass0 = RoadClass.UNCLASSIFIED;
      TransportationMode transportationMode0 = TransportationMode.HGV;
      double double0 = austriaSpatialRule0.getMaxSpeed(roadClass0, transportationMode0, (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GermanySpatialRule germanySpatialRule0 = new GermanySpatialRule((List<Polygon>) null);
      RoadClass roadClass0 = RoadClass.RESIDENTIAL;
      TransportationMode transportationMode0 = TransportationMode.CAR;
      RoadAccess roadAccess0 = RoadAccess.DESTINATION;
      RoadAccess roadAccess1 = germanySpatialRule0.getAccess(roadClass0, transportationMode0, roadAccess0);
      assertSame(roadAccess0, roadAccess1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GermanySpatialRule germanySpatialRule0 = new GermanySpatialRule((List<Polygon>) null);
      int int0 = germanySpatialRule0.getPriority();
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule((List<Polygon>) null);
      AustriaSpatialRule austriaSpatialRule1 = new AustriaSpatialRule((List<Polygon>) null);
      boolean boolean0 = austriaSpatialRule1.equals(austriaSpatialRule0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule((List<Polygon>) null);
      boolean boolean0 = austriaSpatialRule0.equals(austriaSpatialRule0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule((List<Polygon>) null);
      boolean boolean0 = austriaSpatialRule0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule((List<Polygon>) null);
      austriaSpatialRule0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule((List<Polygon>) null);
      String string0 = austriaSpatialRule0.toString();
      assertEquals("SpatialRule [getId()=aut, getPriority()=100]", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AustriaSpatialRule austriaSpatialRule0 = new AustriaSpatialRule((List<Polygon>) null);
      List<Polygon> list0 = austriaSpatialRule0.getBorders();
      assertNull(list0);
  }
}
