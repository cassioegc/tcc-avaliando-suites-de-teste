/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:28:44 GMT 2021
 */

package com.graphhopper.routing.querygraph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.ev.BooleanEncodedValue;
import com.graphhopper.routing.ev.DecimalEncodedValue;
import com.graphhopper.routing.ev.EncodedValue;
import com.graphhopper.routing.ev.EnumEncodedValue;
import com.graphhopper.routing.ev.IntEncodedValue;
import com.graphhopper.routing.ev.SimpleBooleanEncodedValue;
import com.graphhopper.routing.ev.StringEncodedValue;
import com.graphhopper.routing.ev.UnsignedDecimalEncodedValue;
import com.graphhopper.routing.querygraph.VirtualEdgeIteratorState;
import com.graphhopper.storage.IntsRef;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.FetchMode;
import com.graphhopper.util.PointList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.DefaultCoordinateSequenceFactory;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.LinearRing;
import org.locationtech.jts.geom.PrecisionModel;
import org.locationtech.jts.geom.impl.CoordinateArraySequence;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VirtualEdgeIteratorState_ESTest extends VirtualEdgeIteratorState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 0, 0, 0, (IntsRef) null, "", pointList0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((BooleanEncodedValue) simpleBooleanEncodedValue0, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodedValue unfavored supports only one direction
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PointList pointList0 = new PointList(0, true);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, true);
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set(booleanEncodedValue0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // reverse state cannot be modified
         //
         verifyException("com.graphhopper.util.EdgeIteratorState$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(73);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1442), (-1442), 1, 1, (-1167.1070820580303), intsRef0, "hH))eEa", pointList0, true);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((BooleanEncodedValue) simpleBooleanEncodedValue0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue unfavored not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      int int0 = virtualEdgeIteratorState0.getOriginalEdgeKey();
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(0, int0);
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(1, virtualEdgeIteratorState0.getAdjNode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PointList pointList0 = new PointList(45, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(60, 60, 45, 267, (-1517.59192226127), intsRef0, "", pointList0, false);
      int int0 = virtualEdgeIteratorState0.getOriginalEdgeKey();
      assertEquals(267, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(60, int0);
      assertEquals(45, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(60, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals((-1517.59192226127), virtualEdgeIteratorState0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      IntsRef intsRef0 = new IntsRef(intArray0, 0, 0);
      PointList pointList0 = PointList.EMPTY;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 70, 70, 0, intsRef0, "", pointList0, false);
      int int0 = virtualEdgeIteratorState0.getOrigEdgeLast();
      assertEquals(70, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(70, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-540), 155, (-2094), (-540), (-2094), intsRef0, ";96", (PointList) null, false);
      int int0 = virtualEdgeIteratorState0.getOrigEdgeLast();
      assertEquals(155, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(77, int0);
      assertEquals((-2094), virtualEdgeIteratorState0.getBaseNode());
      assertEquals((-540), virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals((-2094.0), virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals((-540), virtualEdgeIteratorState0.getAdjNode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[8];
      IntsRef intsRef0 = new IntsRef(intArray0, 0, 25);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 10, 0, 10, 0, intsRef0, "Q7oI[5~0F^cXKj[h", pointList0, true);
      int int0 = virtualEdgeIteratorState0.getOrigEdgeFirst();
      assertEquals(0, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(10, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(10, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, (-5), 1, (-5), 0, (IntsRef) null, "", pointList0, false);
      int int0 = virtualEdgeIteratorState0.getOrigEdgeFirst();
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals((-5), virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals((-5), virtualEdgeIteratorState0.getAdjNode());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, (-31), 0, (IntsRef) null, "", pointList0, false);
      virtualEdgeIteratorState0.getName();
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals((-31), virtualEdgeIteratorState0.getAdjNode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PointList pointList0 = PointList.EMPTY;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(658, (-2943), 1349, 0, (-2943), (IntsRef) null, (String) null, pointList0, true);
      virtualEdgeIteratorState0.getFlags();
      assertEquals(1349, virtualEdgeIteratorState0.getBaseNode());
      assertEquals((-2943), virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(0, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(658, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals((-2943.0), virtualEdgeIteratorState0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-20);
      IntsRef intsRef0 = new IntsRef(intArray0, 0, 799);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-20), (-20), (-20), (-20), 0.0, intsRef0, "]Rp_i}aRsVx", pointList0, true);
      virtualEdgeIteratorState0.getFlags();
      assertEquals((-20), virtualEdgeIteratorState0.getBaseNode());
      assertEquals((-20), virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals((-20), virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals((-20), virtualEdgeIteratorState0.getEdgeKey());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FIXED;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0);
      LinearRing linearRing0 = geometryFactory0.createLinearRing();
      PointList pointList0 = PointList.fromLineString(linearRing0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 55, 1, 45, 0.0, (IntsRef) null, "G<!(VTN0'U^K;.", pointList0, false);
      int int0 = virtualEdgeIteratorState0.getEdgeKey();
      assertEquals(55, int0);
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(45, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[7];
      IntsRef intsRef0 = new IntsRef(intArray0, (-20), (-20));
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1), (-20), 3623, 3623, (-20), intsRef0, "CI;axtWlKN?v`9Wi", pointList0, true);
      int int0 = virtualEdgeIteratorState0.getEdgeKey();
      assertEquals((-20.0), virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals((-20), int0);
      assertEquals((-1), virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(3623, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(3623, virtualEdgeIteratorState0.getBaseNode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FLOATING_SINGLE;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      DefaultCoordinateSequenceFactory defaultCoordinateSequenceFactory0 = new DefaultCoordinateSequenceFactory();
      GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0, 0, defaultCoordinateSequenceFactory0);
      LinearRing linearRing0 = geometryFactory0.createLinearRing();
      PointList pointList0 = PointList.fromLineString(linearRing0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(2594, 3, 2594, 3, 1.7976931348623157E308, intsRef0, "", pointList0, true);
      int int0 = virtualEdgeIteratorState0.getEdge();
      assertEquals(3, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(2594, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(1.7976931348623157E308, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(1, int0);
      assertEquals(3, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(2594, virtualEdgeIteratorState0.getOriginalEdgeKey());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(73);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1442), (-1442), 1, 1, (-1167.1070820580303), intsRef0, "hH))eEa", pointList0, true);
      int int0 = virtualEdgeIteratorState0.getEdge();
      assertEquals((-1167.1070820580303), virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(1, virtualEdgeIteratorState0.getAdjNode());
      assertEquals((-721), int0);
      assertEquals((-1442), virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals((-1442), virtualEdgeIteratorState0.getEdgeKey());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(2);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(1087, 1087, 2, 1087, 2, intsRef0, "", (PointList) null, true);
      double double0 = virtualEdgeIteratorState0.getDistance();
      assertEquals(1087, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(1087, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(1087, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(2, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      IntsRef intsRef0 = new IntsRef(intArray0, 0, 0);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 43, 43, 43, (-1.0), intsRef0, "9", pointList0, true);
      double double0 = virtualEdgeIteratorState0.getDistance();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(43, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(43, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(43, virtualEdgeIteratorState0.getEdgeKey());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 0, 0, 0, (IntsRef) null, "", pointList0, false);
      int int0 = virtualEdgeIteratorState0.getBaseNode();
      assertEquals(0, int0);
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(0, virtualEdgeIteratorState0.getAdjNode());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PointList pointList0 = PointList.EMPTY;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(658, (-2943), 1349, 0, (-2943), (IntsRef) null, (String) null, pointList0, true);
      int int0 = virtualEdgeIteratorState0.getBaseNode();
      assertEquals(658, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(0, virtualEdgeIteratorState0.getAdjNode());
      assertEquals((-2943.0), virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals((-2943), virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(1349, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(1825);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(39, 0, 4247, 0, 4247, intsRef0, "", (PointList) null, false);
      int int0 = virtualEdgeIteratorState0.getAdjNode();
      assertEquals(4247, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0, int0);
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(4247.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(39, virtualEdgeIteratorState0.getOriginalEdgeKey());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, (-5), 1, (-5), 0, (IntsRef) null, "", pointList0, false);
      int int0 = virtualEdgeIteratorState0.getAdjNode();
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals((-5), virtualEdgeIteratorState0.getEdgeKey());
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(1, 674, 1, 674, 674, intsRef0, "org.locationtech.jts.geomgraphPlanarGraph", pointList0, true);
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      boolean boolean0 = virtualEdgeIteratorState0.get(booleanEncodedValue0);
      assertEquals(674, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(1, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertTrue(boolean0);
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(674.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(674, virtualEdgeIteratorState0.getEdgeKey());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1169), (-966), (-966), 1144, (-966), (IntsRef) null, "nsx", (PointList) null, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = new SimpleBooleanEncodedValue("nsx");
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((IntEncodedValue) simpleBooleanEncodedValue0, (-966));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue nsx not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-326), (-326), (-326), (-76), (-76), intsRef0, "", pointList0, false);
      FetchMode fetchMode0 = FetchMode.PILLAR_AND_ADJ;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((EnumEncodedValue<FetchMode>) null, fetchMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PointList pointList0 = new PointList(1144, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1169), (-966), (-966), 1144, 0.0, (IntsRef) null, "nsx", pointList0, false);
      Class<FetchMode> class0 = FetchMode.class;
      EnumEncodedValue<FetchMode> enumEncodedValue0 = new EnumEncodedValue<FetchMode>("nsx", class0);
      EncodedValue.InitializerConfig encodedValue_InitializerConfig0 = new EncodedValue.InitializerConfig();
      enumEncodedValue0.init(encodedValue_InitializerConfig0);
      FetchMode fetchMode0 = FetchMode.BASE_AND_PILLAR;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse(enumEncodedValue0, fetchMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nsx: value for reverse direction would overwrite forward direction. Enable storeTwoDirections for this EncodedValue or don't use setReverse
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PointList pointList0 = new PointList(0, true);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, (-22), 0, (IntsRef) null, "", pointList0, true);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((BooleanEncodedValue) simpleBooleanEncodedValue0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue unfavored not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PointList pointList0 = PointList.EMPTY;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1169), (-937), (-937), 1144, 0.0, (IntsRef) null, "nsx", pointList0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = new SimpleBooleanEncodedValue("nsx");
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((BooleanEncodedValue) simpleBooleanEncodedValue0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue nsx not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 19, (-31), 0, (IntsRef) null, "", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((StringEncodedValue) null, "com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", "com.graphhopper.routing.querygraph.VirtualEdgeIteratorState");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PrecisionModel precisionModel0 = new PrecisionModel();
      GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0, 1036);
      LinearRing linearRing0 = geometryFactory0.createLinearRing();
      PointList pointList0 = PointList.fromLineString(linearRing0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 0, 0, 0, intsRef0, "", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((IntEncodedValue) null, 0, (-3695));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FIXED;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0);
      LinearRing linearRing0 = geometryFactory0.createLinearRing();
      PointList pointList0 = PointList.fromLineString(linearRing0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(859, 45, 55, 55, 0.0, (IntsRef) null, "q$", pointList0, false);
      Class<FetchMode> class0 = FetchMode.class;
      EnumEncodedValue<FetchMode> enumEncodedValue0 = new EnumEncodedValue<FetchMode>("q$", class0, true);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((IntEncodedValue) enumEncodedValue0, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue q$ not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PointList pointList0 = new PointList(0, true);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, true);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((IntEncodedValue) simpleBooleanEncodedValue0, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue unfavored not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      FetchMode fetchMode0 = FetchMode.ALL;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((EnumEncodedValue<FetchMode>) null, fetchMode0, fetchMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, (-22), 0, (IntsRef) null, "", pointList0, false);
      FetchMode fetchMode0 = FetchMode.PILLAR_ONLY;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((EnumEncodedValue<FetchMode>) null, fetchMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PointList pointList0 = PointList.EMPTY;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(1237, (-858), 1237, 1237, (-1.0), intsRef0, "com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((DecimalEncodedValue) null, (-1.0), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((BooleanEncodedValue) null, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, (-31), 0, (IntsRef) null, "", pointList0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((BooleanEncodedValue) simpleBooleanEncodedValue0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue unfavored not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[9];
      IntsRef intsRef0 = new IntsRef(intArray0, 522, 0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(1103, 0, 1103, 1, 2156.432401228229, intsRef0, "", (PointList) null, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((BooleanEncodedValue) simpleBooleanEncodedValue0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue unfavored not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PointList pointList0 = PointList.EMPTY;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(1129, 650, 1483450339, 1472, 2420.638824116, intsRef0, "nsx", pointList0, false);
      UnsignedDecimalEncodedValue unsignedDecimalEncodedValue0 = new UnsignedDecimalEncodedValue("nsx", 1, 0, (-321.77051623057207), false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.getReverse((DecimalEncodedValue) unsignedDecimalEncodedValue0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PointList pointList0 = new PointList(1, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1169), (-958), (-958), 1144, 0.0, (IntsRef) null, "nsx", pointList0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = new SimpleBooleanEncodedValue("nsx");
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.getReverse((BooleanEncodedValue) simpleBooleanEncodedValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PointList pointList0 = new PointList(1, false);
      Class<FetchMode> class0 = FetchMode.class;
      EnumEncodedValue<FetchMode> enumEncodedValue0 = new EnumEncodedValue<FetchMode>("nsx", class0);
      IntsRef intsRef0 = new IntsRef((int[]) null, 1681, 1);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-958), 53, 1144, 1681, 217.96897426505, intsRef0, "nsx", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.get(enumEncodedValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[4];
      IntsRef intsRef0 = new IntsRef(intArray0, (-1), 70);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(1, (-1), 1, 70, 1, intsRef0, "->", (PointList) null, false);
      FetchMode fetchMode0 = FetchMode.PILLAR_ONLY;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.fetchWayGeometry(fetchMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-2880), (-2880), (-2880), (-2880), 180.0, intsRef0, "`2d*~ILBy:*.>0~KW", pointList0, true);
      VirtualEdgeIteratorState virtualEdgeIteratorState1 = (VirtualEdgeIteratorState)virtualEdgeIteratorState0.setFlags(intsRef0);
      assertEquals((-2880), virtualEdgeIteratorState1.getEdgeKey());
      assertEquals(180.0, virtualEdgeIteratorState1.getDistance(), 0.01);
      assertEquals((-2880), virtualEdgeIteratorState1.getAdjNode());
      assertEquals((-2880), virtualEdgeIteratorState1.getBaseNode());
      assertEquals((-2880), virtualEdgeIteratorState1.getOriginalEdgeKey());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FIXED;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0);
      LinearRing linearRing0 = geometryFactory0.createLinearRing();
      PointList pointList0 = PointList.fromLineString(linearRing0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 55, 1, 45, 0.0, (IntsRef) null, "G<!(VTN0'U^K;.", pointList0, false);
      virtualEdgeIteratorState0.getName();
      assertEquals(45, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(55, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PointList pointList0 = PointList.EMPTY;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1), (-1), (-1), 4, 0.0, intsRef0, (String) null, pointList0, true);
      double double0 = virtualEdgeIteratorState0.getDistance();
      assertEquals((-1), virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1), virtualEdgeIteratorState0.getBaseNode());
      assertEquals((-1), virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(4, virtualEdgeIteratorState0.getAdjNode());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      DefaultCoordinateSequenceFactory defaultCoordinateSequenceFactory0 = DefaultCoordinateSequenceFactory.instance();
      GeometryFactory geometryFactory0 = new GeometryFactory(defaultCoordinateSequenceFactory0);
      LinearRing linearRing0 = geometryFactory0.createLinearRing((Coordinate[]) null);
      PointList pointList0 = PointList.fromLineString(linearRing0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 2207, 1418, 1418, 0, intsRef0, "offset+length out of bounds: offset=", pointList0, true);
      virtualEdgeIteratorState0.getFlags();
      assertEquals(1418, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(2207, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(1418, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(1546, 1, 0, 1, 0.0, (IntsRef) null, "org.locationtech.jts.util.UniqueCoordinateArrayFilter", pointList0, false);
      int int0 = virtualEdgeIteratorState0.getEdge();
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(1, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(1546, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(0, int0);
      assertEquals(1, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0, virtualEdgeIteratorState0.getBaseNode());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      virtualEdgeIteratorState0.setDistance(1);
      assertEquals(1.0, virtualEdgeIteratorState0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState1 = (VirtualEdgeIteratorState)virtualEdgeIteratorState0.detach(false);
      assertEquals(0, virtualEdgeIteratorState1.getOriginalEdgeKey());
      assertEquals(0, virtualEdgeIteratorState1.getEdgeKey());
      assertEquals(0.0, virtualEdgeIteratorState1.getDistance(), 0.01);
      assertEquals(1, virtualEdgeIteratorState1.getBaseNode());
      assertEquals(1, virtualEdgeIteratorState1.getAdjNode());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PointList pointList0 = new PointList(1, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1169), (-958), (-958), 1144, 0.0, (IntsRef) null, "nsx", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((StringEncodedValue) null, "nsx");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[17];
      IntsRef intsRef0 = new IntsRef(intArray0, 0, 2758);
      Coordinate[] coordinateArray0 = new Coordinate[0];
      CoordinateArraySequence coordinateArraySequence0 = new CoordinateArraySequence(coordinateArray0);
      GeometryFactory geometryFactory0 = new GeometryFactory();
      LinearRing linearRing0 = new LinearRing(coordinateArraySequence0, geometryFactory0);
      PointList pointList0 = PointList.from(linearRing0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(4319, 0, (-2748), (-2748), 4319, intsRef0, "$Q9AwO/ejh*. 6/V", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.getReverse((StringEncodedValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PointList pointList0 = new PointList(1, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1169), (-958), (-958), 1144, 0.0, (IntsRef) null, "nsx", pointList0, false);
      Class<FetchMode> class0 = FetchMode.class;
      EnumEncodedValue<FetchMode> enumEncodedValue0 = new EnumEncodedValue<FetchMode>("nsx", class0);
      FetchMode fetchMode0 = FetchMode.BASE_AND_PILLAR;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse(enumEncodedValue0, fetchMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue nsx not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PointList pointList0 = new PointList(1144, true);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1169), (-966), (-966), 1144, 0.0, (IntsRef) null, "nsx", pointList0, true);
      Class<FetchMode> class0 = FetchMode.class;
      EnumEncodedValue<FetchMode> enumEncodedValue0 = new EnumEncodedValue<FetchMode>("nsx", class0);
      FetchMode fetchMode0 = FetchMode.BASE_AND_PILLAR;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse(enumEncodedValue0, fetchMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue nsx not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<FetchMode> class0 = FetchMode.class;
      EnumEncodedValue<FetchMode> enumEncodedValue0 = new EnumEncodedValue<FetchMode>("nsx", class0);
      PointList pointList0 = PointList.EMPTY;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(1, 1684784644, 1144, 1, 1684784644, (IntsRef) null, "nsx", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.getReverse(enumEncodedValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PointList pointList0 = new PointList(0, true);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, (-22), (-1955), (-1955), (IntsRef) null, "i&TG7Xc", pointList0, true);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.getReverse((EnumEncodedValue<FetchMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((DecimalEncodedValue) null, (double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PointList pointList0 = PointList.EMPTY;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(1, 1110, 2215, 2215, 0.0, intsRef0, "foot", pointList0, true);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((DecimalEncodedValue) null, (-4540.55594201));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PointList pointList0 = new PointList(1144, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1169), (-958), (-958), 1144, 0.0, (IntsRef) null, "nsx", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.getReverse((DecimalEncodedValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((IntEncodedValue) simpleBooleanEncodedValue0, 937, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodedValue unfavored supports only one direction
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((IntEncodedValue) simpleBooleanEncodedValue0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue unfavored not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PointList pointList0 = new PointList(0, true);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 0, (-22), 0, (IntsRef) null, "", pointList0, true);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((IntEncodedValue) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(53, (-243), 53, 1, 180.0, (IntsRef) null, "->", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.getReverse((IntEncodedValue) simpleBooleanEncodedValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, (-243), 0, 1, 180.0, (IntsRef) null, "->", pointList0, true);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.getReverse((IntEncodedValue) simpleBooleanEncodedValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FIXED;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0);
      LinearRing linearRing0 = geometryFactory0.createLinearRing();
      PointList pointList0 = PointList.fromLineString(linearRing0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 55, 1, 45, 0.0, (IntsRef) null, "G<!(VTN0'U^K;.", pointList0, false);
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set(booleanEncodedValue0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodedValue reverse supports only one direction
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 0, 0, (IntsRef) null, "", pointList0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((BooleanEncodedValue) simpleBooleanEncodedValue0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue unfavored not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[7];
      IntsRef intsRef0 = new IntsRef(intArray0, (-20), 799);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-20), (-20), (-20), (-20), 0.0, intsRef0, "]Rp_i}aRsVx", pointList0, true);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setReverse((BooleanEncodedValue) simpleBooleanEncodedValue0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue unfavored not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FIXED;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0);
      LinearRing linearRing0 = geometryFactory0.createLinearRing();
      PointList pointList0 = PointList.fromLineString(linearRing0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 55, 1, 45, 0.0, (IntsRef) null, "G<!(VTN0'U^K;.", pointList0, false);
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      boolean boolean0 = virtualEdgeIteratorState0.getReverse(booleanEncodedValue0);
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(55, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(45, virtualEdgeIteratorState0.getAdjNode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      virtualEdgeIteratorState0.getReverse((BooleanEncodedValue) simpleBooleanEncodedValue0);
      assertEquals(1, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FIXED;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0);
      LinearRing linearRing0 = geometryFactory0.createLinearRing();
      PointList pointList0 = PointList.fromLineString(linearRing0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 45, 0.0, (IntsRef) null, "G<!(VTN0'U^K;.", pointList0, true);
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      boolean boolean0 = virtualEdgeIteratorState0.getReverse(booleanEncodedValue0);
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(45, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      virtualEdgeIteratorState0.get((BooleanEncodedValue) simpleBooleanEncodedValue0);
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(1, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "7*qm@*/", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.get((BooleanEncodedValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[7];
      IntsRef intsRef0 = new IntsRef(intArray0, (-20), 799);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-20), (-20), (-20), (-20), (-20), intsRef0, "]Rp_i}aRsVx", pointList0, true);
      pointList0.trimToSize((-20));
      FetchMode fetchMode0 = FetchMode.PILLAR_AND_ADJ;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.fetchWayGeometry(fetchMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // from must be smaller or equal to end
         //
         verifyException("com.graphhopper.util.PointList", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int[] intArray0 = new int[7];
      IntsRef intsRef0 = new IntsRef(intArray0, (-20), 799);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-20), (-20), (-20), (-20), (-20), intsRef0, "]Rp_i}aRsVx", pointList0, true);
      pointList0.trimToSize((-20));
      FetchMode fetchMode0 = FetchMode.TOWER_ONLY;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.fetchWayGeometry(fetchMode0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.PointList", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      FetchMode fetchMode0 = FetchMode.TOWER_ONLY;
      virtualEdgeIteratorState0.fetchWayGeometry(fetchMode0);
      assertEquals(1, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int[] intArray0 = new int[7];
      IntsRef intsRef0 = new IntsRef(intArray0, (-11), 799);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-11), (-11), (-11), (-11), (-11), intsRef0, "PY", pointList0, true);
      pointList0.trimToSize((-11));
      FetchMode fetchMode0 = FetchMode.PILLAR_ONLY;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.fetchWayGeometry(fetchMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // from must be smaller or equal to end
         //
         verifyException("com.graphhopper.util.PointList", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      int int0 = virtualEdgeIteratorState0.getAdjNode();
      assertEquals(1, int0);
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PointList pointList0 = new PointList(1144, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1169), (-966), (-966), 1144, 0.0, (IntsRef) null, "nsx", pointList0, false);
      Class<FetchMode> class0 = FetchMode.class;
      EnumEncodedValue<FetchMode> enumEncodedValue0 = new EnumEncodedValue<FetchMode>("nsx", class0);
      FetchMode fetchMode0 = FetchMode.TOWER_ONLY;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set(enumEncodedValue0, fetchMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue nsx not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int[] intArray0 = new int[7];
      IntsRef intsRef0 = new IntsRef(intArray0, (-11), 799);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-11), (-11), (-11), (-11), (-11), intsRef0, "PY", pointList0, true);
      int int0 = virtualEdgeIteratorState0.getOriginalEdgeKey();
      assertEquals((-11), int0);
      assertEquals((-11), virtualEdgeIteratorState0.getBaseNode());
      assertEquals((-11), virtualEdgeIteratorState0.getEdgeKey());
      assertEquals((-11.0), virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals((-11), virtualEdgeIteratorState0.getAdjNode());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 1, 1, 1, (-1927), (IntsRef) null, "", (PointList) null, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.get((StringEncodedValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PointList pointList0 = new PointList(0, true);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 2, (-31), 0, (IntsRef) null, "", pointList0, true);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((BooleanEncodedValue) simpleBooleanEncodedValue0, true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue unfavored not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((DecimalEncodedValue) null, (double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, (-31), 0, (IntsRef) null, "", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.get((DecimalEncodedValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 0, 1, 0, (IntsRef) null, "", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.copyPropertiesFrom(virtualEdgeIteratorState0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not supported.
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 0, 0, (IntsRef) null, "", pointList0, false);
      virtualEdgeIteratorState0.getOrigEdgeFirst();
      assertEquals(0, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(73);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-1442), (-1442), 1, 1, (-1167.1070820580303), intsRef0, "hH))eEa", pointList0, true);
      int int0 = virtualEdgeIteratorState0.getOrigEdgeLast();
      assertEquals((-721), int0);
      assertEquals((-1167.1070820580303), virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals((-1442), virtualEdgeIteratorState0.getEdgeKey());
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals((-1442), virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(1, virtualEdgeIteratorState0.getAdjNode());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PointList pointList0 = new PointList(1, true);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-24), (-24), (-24), 3, 1413.4874286740844, intsRef0, "d$s['_yL3LIry", pointList0, true);
      Class<FetchMode> class0 = FetchMode.class;
      EnumEncodedValue<FetchMode> enumEncodedValue0 = new EnumEncodedValue<FetchMode>("c5", class0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.get(enumEncodedValue0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FIXED;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      GeometryFactory geometryFactory0 = new GeometryFactory(precisionModel0);
      LinearRing linearRing0 = geometryFactory0.createLinearRing();
      PointList pointList0 = PointList.fromLineString(linearRing0);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 45, 0.0, (IntsRef) null, "G<!(VTN0'U^K;.", pointList0, true);
      int int0 = virtualEdgeIteratorState0.getEdgeKey();
      assertEquals(0, int0);
      assertEquals(45, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int[] intArray0 = new int[7];
      IntsRef intsRef0 = new IntsRef(intArray0, (-11), 799);
      PointList pointList0 = new PointList();
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState((-11), (-11), (-11), (-11), (-11), intsRef0, "PY", pointList0, true);
      int int0 = virtualEdgeIteratorState0.getBaseNode();
      assertEquals((-11), int0);
      assertEquals((-11), virtualEdgeIteratorState0.getAdjNode());
      assertEquals((-11), virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals((-11), virtualEdgeIteratorState0.getEdgeKey());
      assertEquals((-11.0), virtualEdgeIteratorState0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState1 = (VirtualEdgeIteratorState)virtualEdgeIteratorState0.setName("1->1");
      assertEquals(1, virtualEdgeIteratorState1.getAdjNode());
      assertEquals(1, virtualEdgeIteratorState1.getBaseNode());
      assertEquals(0, virtualEdgeIteratorState1.getOriginalEdgeKey());
      assertEquals(0, virtualEdgeIteratorState1.getEdgeKey());
      assertEquals(0.0, virtualEdgeIteratorState1.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      PointList pointList0 = new PointList(0, true);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, (-22), 0, (IntsRef) null, "", pointList0, true);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((IntEncodedValue) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      String string0 = virtualEdgeIteratorState0.toString();
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
      assertEquals("1->1", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 0, 0, 0, intsRef0, "com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.setWayGeometry(pointList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported for virtual edge. Set when creating it.
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(2032, 2032, 0, 2032, 1, (IntsRef) null, "jN\"+ ;@bJ%/KZ", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.get((IntEncodedValue) simpleBooleanEncodedValue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      virtualEdgeIteratorState0.setReverseEdge(virtualEdgeIteratorState0);
      VirtualEdgeIteratorState virtualEdgeIteratorState1 = (VirtualEdgeIteratorState)virtualEdgeIteratorState0.detach(true);
      assertEquals(1, virtualEdgeIteratorState1.getAdjNode());
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(0, virtualEdgeIteratorState1.getEdgeKey());
      assertEquals(1, virtualEdgeIteratorState1.getBaseNode());
      assertEquals(0, virtualEdgeIteratorState1.getOriginalEdgeKey());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      virtualEdgeIteratorState0.setUnfavored(true);
      assertEquals(0.0, virtualEdgeIteratorState0.getDistance(), 0.01);
      assertEquals(1, virtualEdgeIteratorState0.getBaseNode());
      assertEquals(0, virtualEdgeIteratorState0.getOriginalEdgeKey());
      assertEquals(1, virtualEdgeIteratorState0.getAdjNode());
      assertEquals(0, virtualEdgeIteratorState0.getEdgeKey());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      PointList pointList0 = new PointList(0, false);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 1, 1, 0, (IntsRef) null, "", pointList0, false);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.detach(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      PointList pointList0 = new PointList(0, true);
      VirtualEdgeIteratorState virtualEdgeIteratorState0 = new VirtualEdgeIteratorState(0, 0, 24, 1, 0, (IntsRef) null, "", pointList0, true);
      // Undeclared exception!
      try { 
        virtualEdgeIteratorState0.set((StringEncodedValue) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.VirtualEdgeIteratorState", e);
      }
  }
}
