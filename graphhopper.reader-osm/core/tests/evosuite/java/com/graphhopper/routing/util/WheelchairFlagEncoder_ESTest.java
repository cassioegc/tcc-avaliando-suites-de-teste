/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:19:26 GMT 2021
 */

package com.graphhopper.routing.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.ev.BooleanEncodedValue;
import com.graphhopper.routing.util.AllEdgesIterator;
import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.FlagEncoderFactory;
import com.graphhopper.routing.util.WheelchairFlagEncoder;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.IntsRef;
import com.graphhopper.storage.MMapDirectory;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.GHUtility;
import com.graphhopper.util.PMap;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WheelchairFlagEncoder_ESTest extends WheelchairFlagEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder();
      MMapDirectory mMapDirectory0 = new MMapDirectory("grade4");
      ArrayList<FlagEncoder> arrayList0 = new ArrayList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 4);
      graphHopperStorage0.create((-3410L));
      EdgeIteratorState edgeIteratorState0 = graphHopperStorage0.getEdgeIteratorStateForKey(4);
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.applyWayTags((ReaderWay) null, edgeIteratorState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51090233, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(15, 0.0);
      ReaderWay readerWay0 = new ReaderWay(15);
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.CAN_SKIP;
      IntsRef intsRef0 = wheelchairFlagEncoder0.handleWayTags((IntsRef) null, readerWay0, encodingManager_Access0);
      assertNull(intsRef0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder();
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      IntsRef intsRef0 = new IntsRef(intArray0, 18, 3);
      ReaderWay readerWay0 = new ReaderWay(3);
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.CAN_SKIP;
      IntsRef intsRef1 = wheelchairFlagEncoder0.handleWayTags(intsRef0, readerWay0, encodingManager_Access0);
      assertEquals(3, intsRef1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PMap pMap0 = new PMap();
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay(119);
      int int0 = wheelchairFlagEncoder0.handlePriority(readerWay0, (Integer) 0);
      assertFalse(wheelchairFlagEncoder0.isBlockFords());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(1L);
      Integer integer0 = new Integer((-976));
      int int0 = wheelchairFlagEncoder0.handlePriority(readerWay0, integer0);
      assertEquals((-976), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      IntsRef intsRef0 = IntsRef.EMPTY;
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(4949, (-1176));
      wheelchairFlagEncoder0.accessEnc = booleanEncodedValue0;
      ReaderWay readerWay0 = new ReaderWay(0L);
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.OTHER;
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.handleWayTags(intsRef0, readerWay0, encodingManager_Access0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // reverse state cannot be modified
         //
         verifyException("com.graphhopper.util.EdgeIteratorState$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(1202, 0.0);
      Integer integer0 = new Integer((-2401));
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.handlePriority((ReaderWay) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.FootFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PMap pMap0 = new PMap(200);
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(pMap0);
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.getAccess((ReaderWay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.WheelchairFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(1097, 473.31068);
      ReaderWay readerWay0 = new ReaderWay(1097);
      GHUtility.DisabledEdgeIterator gHUtility_DisabledEdgeIterator0 = new GHUtility.DisabledEdgeIterator();
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.applyWayTags(readerWay0, gHUtility_DisabledEdgeIterator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Edge is empty.
         //
         verifyException("com.graphhopper.util.GHUtility$DisabledEdgeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(0, 3940.0);
      ReaderWay readerWay0 = new ReaderWay(0);
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.applyWayTags(readerWay0, (EdgeIteratorState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.WheelchairFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay((-1172));
      MMapDirectory mMapDirectory0 = new MMapDirectory("com.carrotsearch.hppc.IntDoubleHashMap$ValuesIterator");
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, true, true, 0);
      AllEdgesIterator allEdgesIterator0 = graphHopperStorage0.getAllEdges();
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.applyWayTags(readerWay0, allEdgesIterator0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Padding required. Currently an int cannot be distributed over two segments. -1
         //
         verifyException("com.graphhopper.storage.MMapDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PMap pMap0 = new PMap();
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay((-1L));
      RAMDirectory rAMDirectory0 = new RAMDirectory("", false);
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      AllEdgesIterator allEdgesIterator0 = graphHopperStorage0.getAllEdges();
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.applyWayTags(readerWay0, allEdgesIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = null;
      try {
        wheelchairFlagEncoder0 = new WheelchairFlagEncoder((PMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.WheelchairFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PMap pMap0 = new PMap();
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay((-1L));
      int int0 = wheelchairFlagEncoder0.handlePriority(readerWay0, (Integer) readerWay0.FILEHEADER);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PMap pMap0 = new PMap();
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(pMap0);
      IntsRef intsRef0 = IntsRef.EMPTY;
      ReaderWay readerWay0 = new ReaderWay(119);
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.CAN_SKIP;
      wheelchairFlagEncoder0.handleWayTags(intsRef0, readerWay0, encodingManager_Access0);
      assertFalse(wheelchairFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(1);
      IntsRef intsRef0 = IntsRef.EMPTY;
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.WAY;
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.handleWayTags(intsRef0, readerWay0, encodingManager_Access0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.WheelchairFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PMap pMap0 = new PMap();
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay(119);
      wheelchairFlagEncoder0.getAccess(readerWay0);
      assertFalse(wheelchairFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PMap pMap0 = new PMap();
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(pMap0);
      String string0 = wheelchairFlagEncoder0.toString();
      assertFalse(wheelchairFlagEncoder0.isBlockFords());
      assertEquals("wheelchair", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder();
      int int0 = wheelchairFlagEncoder0.getVersion();
      assertEquals(1, int0);
  }
}
