/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:12:22 GMT 2021
 */

package com.graphhopper.routing.querygraph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.querygraph.QueryOverlay;
import com.graphhopper.routing.querygraph.QueryOverlayBuilder;
import com.graphhopper.routing.util.AllEdgesIterator;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.storage.Graph;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.storage.index.Snap;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QueryOverlayBuilder_ESTest extends QueryOverlayBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector<Snap> vector0 = new Vector<Snap>();
      // Undeclared exception!
      try { 
        QueryOverlayBuilder.build((Graph) null, (List<Snap>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.QueryOverlayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        QueryOverlayBuilder.build(91, 91, true, (List<Snap>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.querygraph.QueryOverlayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayList<Snap> arrayList0 = new ArrayList<Snap>();
      Snap snap0 = new Snap(0, 0.0);
      arrayList0.add(snap0);
      // Undeclared exception!
      try { 
        QueryOverlayBuilder.build(0, (-1084), false, (List<Snap>) arrayList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Do not call QueryGraph.create with invalid Snap -1, 0.0,0.0, -1
         //
         verifyException("com.graphhopper.routing.querygraph.QueryOverlayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayList<Snap> arrayList0 = new ArrayList<Snap>();
      Snap snap0 = new Snap(0, 0);
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true);
      AllEdgesIterator allEdgesIterator0 = graphHopperStorage0.getAllEdges();
      snap0.setClosestEdge(allEdgesIterator0);
      arrayList0.add(snap0);
      // Undeclared exception!
      try { 
        QueryOverlayBuilder.build(0, (-1), true, (List<Snap>) arrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayList<Snap> arrayList0 = new ArrayList<Snap>();
      Snap snap0 = new Snap(42, 42);
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      AllEdgesIterator allEdgesIterator0 = graphHopperStorage0.getAllEdges();
      snap0.setClosestEdge(allEdgesIterator0);
      arrayList0.add(snap0);
      // Undeclared exception!
      try { 
        QueryOverlayBuilder.build((Graph) graphHopperStorage0, (List<Snap>) arrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayList<Snap> arrayList0 = new ArrayList<Snap>();
      Snap snap0 = new Snap(0, 0);
      Snap.Position snap_Position0 = Snap.Position.TOWER;
      snap0.setSnappedPosition(snap_Position0);
      arrayList0.add(snap0);
      QueryOverlay queryOverlay0 = QueryOverlayBuilder.build(0, (-1), true, (List<Snap>) arrayList0);
      assertNotNull(queryOverlay0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ArrayList<Snap> arrayList0 = new ArrayList<Snap>();
      Snap snap0 = new Snap(42, 42);
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      arrayList0.add(snap0);
      // Undeclared exception!
      try { 
        QueryOverlayBuilder.build((Graph) graphHopperStorage0, (List<Snap>) arrayList0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Do not call QueryGraph.create with invalid Snap -1, 42.0,42.0, -1
         //
         verifyException("com.graphhopper.routing.querygraph.QueryOverlayBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ArrayList<Snap> arrayList0 = new ArrayList<Snap>();
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      QueryOverlay queryOverlay0 = QueryOverlayBuilder.build((Graph) graphHopperStorage0, (List<Snap>) arrayList0);
      assertNotNull(queryOverlay0);
  }
}
