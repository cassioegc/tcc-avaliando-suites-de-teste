/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:38:01 GMT 2021
 */

package com.graphhopper.routing.util.parsers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.OSMTurnRelation;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.ev.EncodedValue;
import com.graphhopper.routing.ev.EnumEncodedValue;
import com.graphhopper.routing.ev.RoadAccess;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.TransportationMode;
import com.graphhopper.routing.util.WheelchairFlagEncoder;
import com.graphhopper.routing.util.parsers.OSMRoadAccessParser;
import com.graphhopper.storage.IntsRef;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OSMRoadAccessParser_ESTest extends OSMRoadAccessParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        OSMRoadAccessParser.toOSMRestrictions((TransportationMode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMRoadAccessParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OSMTurnRelation.Type oSMTurnRelation_Type0 = OSMTurnRelation.Type.ONLY;
      OSMTurnRelation oSMTurnRelation0 = new OSMTurnRelation(0L, 0L, 0L, oSMTurnRelation_Type0);
      List<String> list0 = oSMTurnRelation0.getVehicleTypesExcept();
      LinkedList<String> linkedList0 = new LinkedList<String>(list0);
      OSMRoadAccessParser oSMRoadAccessParser0 = new OSMRoadAccessParser((EnumEncodedValue<RoadAccess>) null, linkedList0);
      ReaderWay readerWay0 = new ReaderWay(131L);
      // Undeclared exception!
      try { 
        oSMRoadAccessParser0.handleWayTags((IntsRef) null, readerWay0, false, (IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMRoadAccessParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OSMRoadAccessParser oSMRoadAccessParser0 = new OSMRoadAccessParser();
      Vector<FlagEncoder> vector0 = new Vector<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      List<EncodedValue> list0 = encodingManager0.getEncodedValues();
      // Undeclared exception!
      try { 
        oSMRoadAccessParser0.createEncodedValues(encodingManager0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OSMRoadAccessParser oSMRoadAccessParser0 = new OSMRoadAccessParser();
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder();
      // Undeclared exception!
      try { 
        oSMRoadAccessParser0.createEncodedValues(wheelchairFlagEncoder0, (List<EncodedValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMRoadAccessParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransportationMode transportationMode0 = TransportationMode.CAR;
      List<String> list0 = OSMRoadAccessParser.toOSMRestrictions(transportationMode0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransportationMode transportationMode0 = TransportationMode.MOTORCYCLE;
      List<String> list0 = OSMRoadAccessParser.toOSMRestrictions(transportationMode0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) treeSet0, locale_FilteringMode0);
      OSMRoadAccessParser oSMRoadAccessParser0 = new OSMRoadAccessParser((EnumEncodedValue<RoadAccess>) null, list0);
      Vector<FlagEncoder> vector0 = new Vector<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      Vector<EncodedValue> vector1 = new Vector<EncodedValue>();
      oSMRoadAccessParser0.createEncodedValues(encodingManager0, vector1);
      assertEquals(1, vector1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OSMRoadAccessParser oSMRoadAccessParser0 = new OSMRoadAccessParser();
      IntsRef intsRef0 = IntsRef.EMPTY;
      ReaderWay readerWay0 = new ReaderWay(0);
      // Undeclared exception!
      try { 
        oSMRoadAccessParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue road_access not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransportationMode transportationMode0 = TransportationMode.OTHER;
      // Undeclared exception!
      try { 
        OSMRoadAccessParser.toOSMRestrictions(transportationMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert TransportationMode OTHER to list of restrictions
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMRoadAccessParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransportationMode transportationMode0 = TransportationMode.HGV;
      List<String> list0 = OSMRoadAccessParser.toOSMRestrictions(transportationMode0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransportationMode transportationMode0 = TransportationMode.BIKE;
      List<String> list0 = OSMRoadAccessParser.toOSMRestrictions(transportationMode0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransportationMode transportationMode0 = TransportationMode.VEHICLE;
      List<String> list0 = OSMRoadAccessParser.toOSMRestrictions(transportationMode0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TransportationMode transportationMode0 = TransportationMode.FOOT;
      List<String> list0 = OSMRoadAccessParser.toOSMRestrictions(transportationMode0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<FlagEncoder> vector0 = new Vector<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      ReaderWay readerWay0 = new ReaderWay(4527L);
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      IntsRef intsRef0 = new IntsRef((int[]) null, 1, 2);
      IntsRef intsRef1 = encodingManager0.handleWayTags(readerWay0, encodingManager_AcceptWay0, intsRef0);
      assertFalse(intsRef1.equals((Object)intsRef0));
  }
}
