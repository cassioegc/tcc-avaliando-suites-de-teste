/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 04:27:43 GMT 2021
 */

package com.graphhopper.routing.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.util.RacingBikeFlagEncoder;
import com.graphhopper.routing.util.TransportationMode;
import com.graphhopper.util.PMap;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RacingBikeFlagEncoder_ESTest extends RacingBikeFlagEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RacingBikeFlagEncoder racingBikeFlagEncoder0 = new RacingBikeFlagEncoder();
      assertFalse(racingBikeFlagEncoder0.isRegistered());
      assertEquals(0, racingBikeFlagEncoder0.getMaxTurnCosts());
      assertEquals(2, racingBikeFlagEncoder0.getVersion());
      assertEquals("racingbike", racingBikeFlagEncoder0.toString());
      assertTrue(racingBikeFlagEncoder0.isBlockFords());
      assertEquals(30.0, racingBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertFalse(racingBikeFlagEncoder0.supportsTurnCosts());
      assertEquals(TransportationMode.BIKE, racingBikeFlagEncoder0.getTransportationMode());
      assertNotNull(racingBikeFlagEncoder0);
      
      // Undeclared exception!
      try { 
        racingBikeFlagEncoder0.collect((ReaderWay) null, 0.0, (TreeMap<Double, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.BikeCommonFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RacingBikeFlagEncoder racingBikeFlagEncoder0 = null;
      try {
        racingBikeFlagEncoder0 = new RacingBikeFlagEncoder((PMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.RacingBikeFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RacingBikeFlagEncoder racingBikeFlagEncoder0 = new RacingBikeFlagEncoder(31, (-1.0), 31);
      assertEquals(2, racingBikeFlagEncoder0.getVersion());
      assertFalse(racingBikeFlagEncoder0.isRegistered());
      assertEquals(30.0, racingBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertEquals(TransportationMode.BIKE, racingBikeFlagEncoder0.getTransportationMode());
      assertEquals("racingbike", racingBikeFlagEncoder0.toString());
      assertEquals(31, racingBikeFlagEncoder0.getMaxTurnCosts());
      assertTrue(racingBikeFlagEncoder0.isBlockFords());
      assertTrue(racingBikeFlagEncoder0.supportsTurnCosts());
      assertNotNull(racingBikeFlagEncoder0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PMap pMap0 = mock(PMap.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true).when(pMap0).getBool(anyString() , anyBoolean());
      doReturn(0.0).when(pMap0).getDouble(anyString() , anyDouble());
      doReturn(2350).when(pMap0).getInt(anyString() , anyInt());
      RacingBikeFlagEncoder racingBikeFlagEncoder0 = new RacingBikeFlagEncoder(pMap0);
      assertTrue(racingBikeFlagEncoder0.isBlockFords());
      assertTrue(racingBikeFlagEncoder0.supportsTurnCosts());
      assertEquals(2, racingBikeFlagEncoder0.getVersion());
      assertFalse(racingBikeFlagEncoder0.isRegistered());
      assertEquals(30.0, racingBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertEquals(TransportationMode.BIKE, racingBikeFlagEncoder0.getTransportationMode());
      assertEquals("racingbike", racingBikeFlagEncoder0.toString());
      assertEquals(1, racingBikeFlagEncoder0.getMaxTurnCosts());
      assertNotNull(racingBikeFlagEncoder0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RacingBikeFlagEncoder racingBikeFlagEncoder0 = new RacingBikeFlagEncoder();
      assertEquals("racingbike", racingBikeFlagEncoder0.toString());
      assertFalse(racingBikeFlagEncoder0.supportsTurnCosts());
      assertEquals(TransportationMode.BIKE, racingBikeFlagEncoder0.getTransportationMode());
      assertEquals(30.0, racingBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertEquals(0, racingBikeFlagEncoder0.getMaxTurnCosts());
      assertTrue(racingBikeFlagEncoder0.isBlockFords());
      assertFalse(racingBikeFlagEncoder0.isRegistered());
      assertEquals(2, racingBikeFlagEncoder0.getVersion());
      assertNotNull(racingBikeFlagEncoder0);
      
      String string0 = racingBikeFlagEncoder0.toString();
      assertEquals("racingbike", string0);
      assertEquals("racingbike", racingBikeFlagEncoder0.toString());
      assertFalse(racingBikeFlagEncoder0.supportsTurnCosts());
      assertEquals(TransportationMode.BIKE, racingBikeFlagEncoder0.getTransportationMode());
      assertEquals(30.0, racingBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertEquals(0, racingBikeFlagEncoder0.getMaxTurnCosts());
      assertTrue(racingBikeFlagEncoder0.isBlockFords());
      assertFalse(racingBikeFlagEncoder0.isRegistered());
      assertEquals(2, racingBikeFlagEncoder0.getVersion());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RacingBikeFlagEncoder racingBikeFlagEncoder0 = new RacingBikeFlagEncoder();
      assertEquals(0, racingBikeFlagEncoder0.getMaxTurnCosts());
      assertFalse(racingBikeFlagEncoder0.supportsTurnCosts());
      assertEquals(30.0, racingBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertEquals(TransportationMode.BIKE, racingBikeFlagEncoder0.getTransportationMode());
      assertEquals(2, racingBikeFlagEncoder0.getVersion());
      assertFalse(racingBikeFlagEncoder0.isRegistered());
      assertEquals("racingbike", racingBikeFlagEncoder0.toString());
      assertTrue(racingBikeFlagEncoder0.isBlockFords());
      assertNotNull(racingBikeFlagEncoder0);
      
      int int0 = racingBikeFlagEncoder0.getVersion();
      assertEquals(2, int0);
      assertEquals(0, racingBikeFlagEncoder0.getMaxTurnCosts());
      assertFalse(racingBikeFlagEncoder0.supportsTurnCosts());
      assertEquals(30.0, racingBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertEquals(TransportationMode.BIKE, racingBikeFlagEncoder0.getTransportationMode());
      assertEquals(2, racingBikeFlagEncoder0.getVersion());
      assertFalse(racingBikeFlagEncoder0.isRegistered());
      assertEquals("racingbike", racingBikeFlagEncoder0.toString());
      assertTrue(racingBikeFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RacingBikeFlagEncoder racingBikeFlagEncoder0 = new RacingBikeFlagEncoder();
      boolean boolean0 = racingBikeFlagEncoder0.isSacScaleAllowed("turn_costs");
      assertFalse(boolean0);
  }
}
