/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 04:21:26 GMT 2021
 */

package com.graphhopper.routing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.AlgorithmOptions;
import com.graphhopper.routing.util.TraversalMode;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.util.PMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AlgorithmOptions_ESTest extends AlgorithmOptions_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      algorithmOptions_Builder0.maxVisitedNodes(0);
      AlgorithmOptions.Builder algorithmOptions_Builder1 = algorithmOptions_Builder0.traversalMode(traversalMode0);
      algorithmOptions_Builder1.maxVisitedNodes((-550));
      AlgorithmOptions algorithmOptions0 = algorithmOptions_Builder0.build();
      AlgorithmOptions.start(algorithmOptions0);
      algorithmOptions_Builder1.algorithm("L");
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(weighting0).toString();
      algorithmOptions_Builder0.weighting(weighting0);
      algorithmOptions_Builder1.maxVisitedNodes((-270));
      algorithmOptions0.toString();
      algorithmOptions0.getMaxVisitedNodes();
      PMap pMap0 = algorithmOptions0.getHints();
      algorithmOptions_Builder0.hints(pMap0);
      // Undeclared exception!
      try { 
        algorithmOptions_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot call AlgorithmOptions.Builder.build() twice
         //
         verifyException("com.graphhopper.routing.AlgorithmOptions$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start();
      AlgorithmOptions.Builder algorithmOptions_Builder1 = algorithmOptions_Builder0.maxVisitedNodes(0);
      AlgorithmOptions algorithmOptions0 = algorithmOptions_Builder1.build();
      AlgorithmOptions.Builder algorithmOptions_Builder2 = AlgorithmOptions.start(algorithmOptions0);
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AlgorithmOptions.Builder algorithmOptions_Builder3 = algorithmOptions_Builder2.traversalMode(traversalMode0);
      algorithmOptions_Builder3.build();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AlgorithmOptions.Builder algorithmOptions_Builder0 = new AlgorithmOptions.Builder();
      AlgorithmOptions algorithmOptions0 = algorithmOptions_Builder0.build();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      PMap pMap0 = algorithmOptions0.getHints();
      algorithmOptions_Builder0.hints(pMap0);
      AlgorithmOptions.Builder algorithmOptions_Builder1 = algorithmOptions_Builder0.traversalMode(traversalMode0);
      algorithmOptions_Builder0.maxVisitedNodes(0);
      algorithmOptions_Builder1.algorithm("");
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      algorithmOptions_Builder0.weighting(weighting0);
      algorithmOptions0.getMaxVisitedNodes();
      algorithmOptions0.hasWeighting();
      AlgorithmOptions.start();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions((String) null, weighting0);
      // Undeclared exception!
      try { 
        algorithmOptions0.getAlgorithm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Option 'algorithm' must NOT be null
         //
         verifyException("com.graphhopper.routing.AlgorithmOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start();
      String string0 = "1oF~ni(g1+XsAjHy";
      algorithmOptions_Builder0.algorithm("1oF~ni(g1+XsAjHy");
      AlgorithmOptions algorithmOptions0 = algorithmOptions_Builder0.build();
      // Undeclared exception!
      try { 
        algorithmOptions0.getWeighting();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Option 'weighting' must NOT be null
         //
         verifyException("com.graphhopper.routing.AlgorithmOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("", (Weighting) null);
      algorithmOptions0.getAlgorithm();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start();
      AlgorithmOptions.Builder algorithmOptions_Builder1 = algorithmOptions_Builder0.algorithm((String) null);
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AlgorithmOptions.Builder algorithmOptions_Builder2 = algorithmOptions_Builder1.traversalMode(traversalMode0);
      algorithmOptions_Builder2.traversalMode(traversalMode0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("com.graphhopper.routing.AlgorithmOptions$1", (Weighting) null);
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start(algorithmOptions0);
      AlgorithmOptions algorithmOptions1 = algorithmOptions_Builder0.build();
      algorithmOptions1.toString();
      algorithmOptions1.toString();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AlgorithmOptions.Builder algorithmOptions_Builder0 = new AlgorithmOptions.Builder();
      AlgorithmOptions algorithmOptions0 = algorithmOptions_Builder0.build();
      AlgorithmOptions.start(algorithmOptions0);
      algorithmOptions0.getAlgorithm();
      // Undeclared exception!
      try { 
        algorithmOptions0.getWeighting();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Option 'weighting' must NOT be null
         //
         verifyException("com.graphhopper.routing.AlgorithmOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start();
      AlgorithmOptions algorithmOptions0 = algorithmOptions_Builder0.build();
      algorithmOptions0.getAlgorithm();
      algorithmOptions0.getTraversalMode();
      algorithmOptions0.hasWeighting();
      algorithmOptions0.hasWeighting();
      // Undeclared exception!
      try { 
        algorithmOptions_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot call AlgorithmOptions.Builder.build() twice
         //
         verifyException("com.graphhopper.routing.AlgorithmOptions$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(weighting0).toString();
      AlgorithmOptions.Builder algorithmOptions_Builder1 = algorithmOptions_Builder0.weighting(weighting0);
      AlgorithmOptions algorithmOptions0 = algorithmOptions_Builder0.build();
      algorithmOptions0.getWeighting();
      algorithmOptions_Builder1.maxVisitedNodes(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        AlgorithmOptions.start((AlgorithmOptions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AlgorithmOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("Make sure you add the FlagEncoder ", (Weighting) null, traversalMode0);
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions0);
      
      String string0 = algorithmOptions0.getAlgorithm();
      assertEquals("Make sure you add the FlagEncoder ", string0);
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(string0);
      
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start(algorithmOptions0);
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder0);
      
      AlgorithmOptions.Builder algorithmOptions_Builder1 = AlgorithmOptions.start(algorithmOptions0);
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      
      String string1 = algorithmOptions0.getAlgorithm();
      assertEquals("Make sure you add the FlagEncoder ", string1);
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(string1);
      
      TraversalMode traversalMode1 = algorithmOptions0.getTraversalMode();
      assertEquals(TraversalMode.EDGE_BASED, traversalMode1);
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertTrue(traversalMode1.isEdgeBased());
      assertSame(traversalMode0, traversalMode1);
      assertSame(traversalMode1, traversalMode0);
      
      int int0 = algorithmOptions0.getMaxVisitedNodes();
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertSame(traversalMode0, traversalMode1);
      
      AlgorithmOptions algorithmOptions1 = algorithmOptions_Builder1.build();
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions1.equals((Object)algorithmOptions0));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertFalse(algorithmOptions1.hasWeighting());
      assertEquals(Integer.MAX_VALUE, algorithmOptions1.getMaxVisitedNodes());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions1.getTraversalMode());
      assertNotNull(algorithmOptions1);
      assertSame(traversalMode0, traversalMode1);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions1, algorithmOptions0);
      
      AlgorithmOptions.Builder algorithmOptions_Builder2 = algorithmOptions_Builder1.traversalMode(traversalMode0);
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder2.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder2);
      assertSame(traversalMode0, traversalMode1);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder2, algorithmOptions_Builder0);
      
      AlgorithmOptions.Builder algorithmOptions_Builder3 = algorithmOptions_Builder0.algorithm("");
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder3);
      assertSame(traversalMode0, traversalMode1);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder3, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder2);
      
      boolean boolean0 = algorithmOptions0.hasWeighting();
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(boolean0);
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertSame(traversalMode0, traversalMode1);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      
      AlgorithmOptions.Builder algorithmOptions_Builder4 = algorithmOptions_Builder1.weighting((Weighting) null);
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder4.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder4.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder4);
      assertSame(traversalMode0, traversalMode1);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder4, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder4, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder4, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder4, algorithmOptions_Builder2);
      
      PMap pMap0 = algorithmOptions0.getHints();
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertTrue(pMap0.isEmpty());
      assertNotNull(pMap0);
      assertSame(traversalMode0, traversalMode1);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      
      AlgorithmOptions.Builder algorithmOptions_Builder5 = algorithmOptions_Builder4.hints(pMap0);
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder4.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder4.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder5.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder5.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertTrue(pMap0.isEmpty());
      assertNotNull(algorithmOptions_Builder5);
      assertSame(traversalMode0, traversalMode1);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder4, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder4, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder4, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder4, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder4, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder5, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder5, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder5, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder5, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder5, algorithmOptions_Builder4);
      
      AlgorithmOptions.Builder algorithmOptions_Builder6 = algorithmOptions_Builder2.algorithm("Make sure you add the FlagEncoder ");
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder2.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder2.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder6.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder6.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder6);
      assertSame(traversalMode0, traversalMode1);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder6);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder2, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder2, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder5);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder6);
      assertSame(algorithmOptions_Builder6, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder6, algorithmOptions_Builder5);
      assertSame(algorithmOptions_Builder6, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder6, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder6, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder6, algorithmOptions_Builder2);
      
      AlgorithmOptions.Builder algorithmOptions_Builder7 = algorithmOptions_Builder4.traversalMode(traversalMode1);
      assertFalse(algorithmOptions_Builder7.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder7.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder4.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder4.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertTrue(traversalMode1.isEdgeBased());
      assertNotNull(algorithmOptions_Builder7);
      assertSame(algorithmOptions_Builder7, algorithmOptions_Builder6);
      assertSame(algorithmOptions_Builder7, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder7, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder7, algorithmOptions_Builder5);
      assertSame(algorithmOptions_Builder7, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder7, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder7, algorithmOptions_Builder1);
      assertSame(traversalMode0, traversalMode1);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder6);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder7);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder4);
      assertSame(traversalMode1, traversalMode0);
      assertSame(algorithmOptions_Builder4, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder4, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder4, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder4, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder4, algorithmOptions_Builder7);
      assertSame(algorithmOptions_Builder4, algorithmOptions_Builder6);
      assertSame(algorithmOptions_Builder4, algorithmOptions_Builder2);
      
      AlgorithmOptions.Builder algorithmOptions_Builder8 = algorithmOptions_Builder2.hints(pMap0);
      assertFalse(algorithmOptions_Builder8.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder8.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder2.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder2.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertTrue(pMap0.isEmpty());
      assertNotNull(algorithmOptions_Builder8);
      assertSame(traversalMode0, traversalMode1);
      assertSame(algorithmOptions_Builder8, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder8, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder8, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder8, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder8, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder8, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder8, algorithmOptions_Builder6);
      assertSame(algorithmOptions_Builder8, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder6);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder8);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder7);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder2, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder2, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder5);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder7);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder8);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder6);
      
      TraversalMode traversalMode2 = algorithmOptions0.getTraversalMode();
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertEquals(TraversalMode.EDGE_BASED, traversalMode2);
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertTrue(traversalMode2.isEdgeBased());
      assertSame(traversalMode0, traversalMode1);
      assertSame(traversalMode0, traversalMode2);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(traversalMode2, traversalMode0);
      assertSame(traversalMode2, traversalMode1);
      
      AlgorithmOptions.Builder algorithmOptions_Builder9 = algorithmOptions_Builder3.algorithm("P");
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder9.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder9.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder9.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions_Builder9.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder9.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder9.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder9.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder9);
      assertSame(traversalMode0, traversalMode1);
      assertSame(traversalMode0, traversalMode2);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertNotSame(algorithmOptions_Builder9, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder9, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder9, algorithmOptions_Builder8);
      assertNotSame(algorithmOptions_Builder9, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder9, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder9, algorithmOptions_Builder7);
      assertSame(algorithmOptions_Builder9, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder9, algorithmOptions_Builder5);
      assertSame(algorithmOptions_Builder9, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder8);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder9);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder3, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder3, algorithmOptions_Builder9);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder8);
      
      PMap pMap1 = algorithmOptions0.getHints();
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertTrue(pMap1.isEmpty());
      assertNotNull(pMap1);
      assertSame(traversalMode0, traversalMode1);
      assertSame(traversalMode0, traversalMode2);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(pMap1, pMap0);
      
      AlgorithmOptions.Builder algorithmOptions_Builder10 = algorithmOptions_Builder3.hints(pMap1);
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertTrue(pMap1.isEmpty());
      assertNotNull(algorithmOptions_Builder10);
      assertSame(traversalMode0, traversalMode1);
      assertSame(traversalMode0, traversalMode2);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder8);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder10);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder9);
      assertSame(pMap1, pMap0);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder8);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder7);
      assertSame(algorithmOptions_Builder10, algorithmOptions_Builder9);
      assertSame(algorithmOptions_Builder10, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder10, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder3, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder3, algorithmOptions_Builder10);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder3, algorithmOptions_Builder9);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder8);
      
      AlgorithmOptions.Builder algorithmOptions_Builder11 = algorithmOptions_Builder0.maxVisitedNodes(0);
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions_Builder11.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder11.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder11.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder11.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions_Builder11.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder11.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder11.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder11);
      assertSame(traversalMode0, traversalMode1);
      assertSame(traversalMode0, traversalMode2);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder5);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder11);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder8);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder10);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder9);
      assertSame(algorithmOptions_Builder11, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder11, algorithmOptions_Builder10);
      assertSame(algorithmOptions_Builder11, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder11, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder11, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder11, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder11, algorithmOptions_Builder9);
      assertNotSame(algorithmOptions_Builder11, algorithmOptions_Builder8);
      assertNotSame(algorithmOptions_Builder11, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder11, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder11, algorithmOptions_Builder4);
      
      AlgorithmOptions.Builder algorithmOptions_Builder12 = AlgorithmOptions.start();
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder9));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder10));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder11));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder5));
      assertNotNull(algorithmOptions_Builder12);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder9);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder8);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder10);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder11);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder5);
      
      AlgorithmOptions algorithmOptions2 = algorithmOptions_Builder10.build();
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder12));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder0.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder12));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder10.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions2.equals((Object)algorithmOptions0));
      assertFalse(algorithmOptions2.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder12));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder3.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertTrue(pMap1.isEmpty());
      assertEquals(0, algorithmOptions2.getMaxVisitedNodes());
      assertFalse(algorithmOptions2.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions2.getTraversalMode());
      assertNotNull(algorithmOptions2);
      assertSame(traversalMode0, traversalMode1);
      assertSame(traversalMode0, traversalMode2);
      assertNotSame(algorithmOptions0, algorithmOptions2);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder12);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder5);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder11);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder7);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder0, algorithmOptions_Builder8);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder10);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder9);
      assertSame(pMap1, pMap0);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder8);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder7);
      assertSame(algorithmOptions_Builder10, algorithmOptions_Builder9);
      assertSame(algorithmOptions_Builder10, algorithmOptions_Builder11);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder10, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder10, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder12);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder10, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions2, algorithmOptions0);
      assertNotSame(algorithmOptions2, algorithmOptions1);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder12);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder3, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder3, algorithmOptions_Builder10);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder3, algorithmOptions_Builder11);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder3, algorithmOptions_Builder9);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder3, algorithmOptions_Builder8);
      
      AlgorithmOptions.Builder algorithmOptions_Builder13 = algorithmOptions_Builder2.algorithm("P");
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions2));
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder12));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder10));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder9));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder11));
      assertFalse(algorithmOptions_Builder13.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder13.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder13.equals((Object)algorithmOptions_Builder10));
      assertFalse(algorithmOptions_Builder13.equals((Object)algorithmOptions_Builder11));
      assertFalse(algorithmOptions_Builder13.equals((Object)algorithmOptions_Builder9));
      assertFalse(algorithmOptions_Builder13.equals((Object)algorithmOptions_Builder12));
      assertFalse(algorithmOptions_Builder2.equals((Object)algorithmOptions_Builder12));
      assertFalse(algorithmOptions_Builder2.equals((Object)algorithmOptions_Builder11));
      assertFalse(algorithmOptions_Builder2.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder2.equals((Object)algorithmOptions_Builder10));
      assertFalse(algorithmOptions_Builder2.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder2.equals((Object)algorithmOptions_Builder9));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder13);
      assertSame(traversalMode0, traversalMode1);
      assertSame(traversalMode0, traversalMode2);
      assertNotSame(algorithmOptions0, algorithmOptions2);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder9);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder6);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder13);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder8);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder12);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder10);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder11);
      assertSame(algorithmOptions_Builder13, algorithmOptions_Builder5);
      assertSame(algorithmOptions_Builder13, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder13, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder13, algorithmOptions_Builder10);
      assertNotSame(algorithmOptions_Builder13, algorithmOptions_Builder11);
      assertNotSame(algorithmOptions_Builder13, algorithmOptions_Builder9);
      assertSame(algorithmOptions_Builder13, algorithmOptions_Builder6);
      assertSame(algorithmOptions_Builder13, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder13, algorithmOptions_Builder8);
      assertNotSame(algorithmOptions_Builder13, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder13, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder13, algorithmOptions_Builder12);
      assertSame(algorithmOptions_Builder13, algorithmOptions_Builder7);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder2, algorithmOptions_Builder12);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder13);
      assertNotSame(algorithmOptions_Builder2, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder5);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder2, algorithmOptions_Builder9);
      assertNotSame(algorithmOptions_Builder2, algorithmOptions_Builder11);
      assertNotSame(algorithmOptions_Builder2, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder2, algorithmOptions_Builder10);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder8);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder6);
      
      TraversalMode traversalMode3 = algorithmOptions1.getTraversalMode();
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions2));
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder12));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder10));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder9));
      assertFalse(algorithmOptions_Builder1.equals((Object)algorithmOptions_Builder11));
      assertFalse(algorithmOptions1.equals((Object)algorithmOptions0));
      assertFalse(algorithmOptions1.equals((Object)algorithmOptions2));
      assertEquals(TraversalMode.EDGE_BASED, traversalMode3);
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertFalse(algorithmOptions1.hasWeighting());
      assertEquals(Integer.MAX_VALUE, algorithmOptions1.getMaxVisitedNodes());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions1.getTraversalMode());
      assertTrue(traversalMode3.isEdgeBased());
      assertSame(traversalMode0, traversalMode1);
      assertSame(traversalMode0, traversalMode3);
      assertSame(traversalMode0, traversalMode2);
      assertNotSame(algorithmOptions0, algorithmOptions2);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder9);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder4);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder6);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder13);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder8);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder12);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder10);
      assertNotSame(algorithmOptions_Builder1, algorithmOptions_Builder11);
      assertNotSame(algorithmOptions1, algorithmOptions0);
      assertNotSame(algorithmOptions1, algorithmOptions2);
      assertSame(traversalMode3, traversalMode1);
      assertSame(traversalMode3, traversalMode2);
      assertSame(traversalMode3, traversalMode0);
      
      AlgorithmOptions.Builder algorithmOptions_Builder14 = algorithmOptions_Builder12.hints(pMap1);
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions2));
      assertFalse(algorithmOptions0.equals((Object)algorithmOptions1));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder9));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder10));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder11));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder13));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder12.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder4));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder11));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder8));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder0));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder10));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder7));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder6));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder2));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder1));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder13));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder3));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder9));
      assertFalse(algorithmOptions_Builder14.equals((Object)algorithmOptions_Builder5));
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertTrue(pMap1.isEmpty());
      assertNotNull(algorithmOptions_Builder14);
      assertSame(traversalMode0, traversalMode1);
      assertSame(traversalMode0, traversalMode3);
      assertSame(traversalMode0, traversalMode2);
      assertNotSame(algorithmOptions0, algorithmOptions2);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(pMap1, pMap0);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder9);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder12, algorithmOptions_Builder14);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder8);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder10);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder11);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder13);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder3);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder12, algorithmOptions_Builder5);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder4);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder11);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder8);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder10);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder7);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder6);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder2);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder1);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder13);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder3);
      assertSame(algorithmOptions_Builder14, algorithmOptions_Builder12);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder9);
      assertNotSame(algorithmOptions_Builder14, algorithmOptions_Builder5);
      
      // Undeclared exception!
      try { 
        algorithmOptions_Builder2.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot call AlgorithmOptions.Builder.build() twice
         //
         verifyException("com.graphhopper.routing.AlgorithmOptions$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AlgorithmOptions.Builder algorithmOptions_Builder0 = new AlgorithmOptions.Builder();
      assertNotNull(algorithmOptions_Builder0);
      
      AlgorithmOptions algorithmOptions0 = algorithmOptions_Builder0.build();
      assertEquals(TraversalMode.NODE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertFalse(algorithmOptions0.hasWeighting());
      assertNotNull(algorithmOptions0);
      
      String string0 = algorithmOptions0.toString();
      assertEquals("dijkstrabi, null, NODE_BASED", string0);
      assertEquals(TraversalMode.NODE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertFalse(algorithmOptions0.hasWeighting());
      assertNotNull(string0);
      
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AlgorithmOptions.Builder algorithmOptions_Builder1 = algorithmOptions_Builder0.weighting(weighting0);
      assertNotNull(algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("{)O|wL%]N.;eo1FW", weighting0, traversalMode0);
      assertTrue(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions0);
      
      boolean boolean0 = algorithmOptions0.hasWeighting();
      assertTrue(boolean0);
      assertTrue(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start(algorithmOptions0);
      assertTrue(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder0);
      
      AlgorithmOptions.Builder algorithmOptions_Builder1 = algorithmOptions_Builder0.maxVisitedNodes(0);
      assertTrue(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      
      TraversalMode traversalMode1 = TraversalMode.EDGE_BASED;
      AlgorithmOptions.Builder algorithmOptions_Builder2 = algorithmOptions_Builder1.traversalMode(traversalMode1);
      assertTrue(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions_Builder2);
      assertSame(traversalMode0, traversalMode1);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder2);
      assertSame(traversalMode1, traversalMode0);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder0);
      
      AlgorithmOptions algorithmOptions1 = algorithmOptions_Builder2.build();
      assertFalse(algorithmOptions1.equals((Object)algorithmOptions0));
      assertTrue(algorithmOptions0.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions0.getTraversalMode());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertTrue(algorithmOptions1.hasWeighting());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions1.getTraversalMode());
      assertEquals(0, algorithmOptions1.getMaxVisitedNodes());
      assertNotNull(algorithmOptions1);
      assertSame(traversalMode0, traversalMode1);
      assertNotSame(algorithmOptions0, algorithmOptions1);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder2);
      assertSame(algorithmOptions_Builder0, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder0);
      assertSame(algorithmOptions_Builder1, algorithmOptions_Builder2);
      assertSame(traversalMode1, traversalMode0);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder1);
      assertSame(algorithmOptions_Builder2, algorithmOptions_Builder0);
      assertNotSame(algorithmOptions1, algorithmOptions0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start();
      assertNotNull(algorithmOptions_Builder0);
      
      AlgorithmOptions algorithmOptions0 = algorithmOptions_Builder0.build();
      assertEquals(TraversalMode.NODE_BASED, algorithmOptions0.getTraversalMode());
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(algorithmOptions0);
      
      String string0 = algorithmOptions0.getAlgorithm();
      assertEquals("dijkstrabi", string0);
      assertEquals(TraversalMode.NODE_BASED, algorithmOptions0.getTraversalMode());
      assertFalse(algorithmOptions0.hasWeighting());
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        algorithmOptions0.getWeighting();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Option 'weighting' must NOT be null
         //
         verifyException("com.graphhopper.routing.AlgorithmOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(weighting0).toString();
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions((String) null, weighting0);
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start(algorithmOptions0);
      AlgorithmOptions.Builder algorithmOptions_Builder1 = algorithmOptions_Builder0.algorithm((String) null);
      AlgorithmOptions.Builder algorithmOptions_Builder2 = algorithmOptions_Builder1.maxVisitedNodes(0);
      PMap pMap0 = algorithmOptions0.getHints();
      AlgorithmOptions.Builder algorithmOptions_Builder3 = algorithmOptions_Builder2.hints(pMap0);
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AlgorithmOptions.Builder algorithmOptions_Builder4 = algorithmOptions_Builder3.traversalMode(traversalMode0);
      AlgorithmOptions algorithmOptions1 = algorithmOptions_Builder4.build();
      boolean boolean0 = algorithmOptions1.hasWeighting();
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertEquals(0, algorithmOptions1.getMaxVisitedNodes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("&(", weighting0, traversalMode0);
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start(algorithmOptions0);
      AlgorithmOptions.Builder algorithmOptions_Builder1 = algorithmOptions_Builder0.maxVisitedNodes(445);
      AlgorithmOptions algorithmOptions1 = algorithmOptions_Builder1.build();
      int int0 = algorithmOptions1.getMaxVisitedNodes();
      assertEquals(445, int0);
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions1.getTraversalMode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AlgorithmOptions.Builder algorithmOptions_Builder0 = new AlgorithmOptions.Builder();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AlgorithmOptions.Builder algorithmOptions_Builder1 = algorithmOptions_Builder0.traversalMode(traversalMode0);
      AlgorithmOptions.Builder algorithmOptions_Builder2 = algorithmOptions_Builder1.maxVisitedNodes((-1));
      AlgorithmOptions algorithmOptions0 = algorithmOptions_Builder2.build();
      AlgorithmOptions.Builder algorithmOptions_Builder3 = AlgorithmOptions.start(algorithmOptions0);
      AlgorithmOptions algorithmOptions1 = algorithmOptions_Builder3.build();
      assertEquals(TraversalMode.EDGE_BASED, algorithmOptions1.getTraversalMode());
      assertEquals((-1), algorithmOptions0.getMaxVisitedNodes());
      assertEquals(Integer.MAX_VALUE, algorithmOptions1.getMaxVisitedNodes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn("_y1d_be@dT5kz4").when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions((String) null, weighting0, traversalMode0);
      AlgorithmOptions.Builder algorithmOptions_Builder0 = AlgorithmOptions.start(algorithmOptions0);
      AlgorithmOptions.Builder algorithmOptions_Builder1 = algorithmOptions_Builder0.maxVisitedNodes(5);
      TraversalMode traversalMode1 = TraversalMode.NODE_BASED;
      AlgorithmOptions.Builder algorithmOptions_Builder2 = algorithmOptions_Builder1.traversalMode(traversalMode1);
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AlgorithmOptions.Builder algorithmOptions_Builder3 = algorithmOptions_Builder2.weighting(weighting1);
      algorithmOptions_Builder3.traversalMode(traversalMode1);
      assertEquals(Integer.MAX_VALUE, algorithmOptions0.getMaxVisitedNodes());
  }
}
