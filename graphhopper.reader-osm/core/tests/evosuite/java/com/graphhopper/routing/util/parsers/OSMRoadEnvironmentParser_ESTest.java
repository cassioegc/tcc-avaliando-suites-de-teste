/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:47:04 GMT 2021
 */

package com.graphhopper.routing.util.parsers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.ev.EncodedValue;
import com.graphhopper.routing.ev.RoadEnvironment;
import com.graphhopper.routing.util.CarFlagEncoder;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.MotorcycleFlagEncoder;
import com.graphhopper.routing.util.MountainBikeFlagEncoder;
import com.graphhopper.routing.util.parsers.OSMRoadEnvironmentParser;
import com.graphhopper.storage.IntsRef;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OSMRoadEnvironmentParser_ESTest extends OSMRoadEnvironmentParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      ReaderWay readerWay0 = new ReaderWay(2456L);
      IntsRef intsRef0 = new IntsRef(3);
      IntsRef intsRef1 = oSMRoadEnvironmentParser0.handleWayTags(intsRef0, readerWay0, false, (IntsRef) null);
      assertSame(intsRef1, intsRef0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      int[] intArray0 = new int[6];
      IntsRef intsRef0 = new IntsRef(intArray0, 3252, 2755);
      ReaderWay readerWay0 = new ReaderWay(93);
      // Undeclared exception!
      try { 
        oSMRoadEnvironmentParser0.handleWayTags(intsRef0, readerWay0, true, (IntsRef) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue road_environment not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      ReaderWay readerWay0 = new ReaderWay(0L);
      IntsRef intsRef0 = oSMRoadEnvironmentParser0.handleWayTags((IntsRef) null, readerWay0, false, (IntsRef) null);
      assertNull(intsRef0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1766);
      IntsRef intsRef0 = new IntsRef(intArray0, 0, 0);
      ReaderWay readerWay0 = new ReaderWay((-961L));
      IntsRef intsRef1 = oSMRoadEnvironmentParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
      assertEquals(0, intsRef1.offset);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      // Undeclared exception!
      try { 
        oSMRoadEnvironmentParser0.handleWayTags((IntsRef) null, (ReaderWay) null, false, (IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMRoadEnvironmentParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      Stack<FlagEncoder> stack0 = new Stack<FlagEncoder>();
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>(stack0);
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      MountainBikeFlagEncoder mountainBikeFlagEncoder0 = new MountainBikeFlagEncoder();
      List<EncodedValue> list0 = encodingManager0.getEncodedValues();
      // Undeclared exception!
      try { 
        oSMRoadEnvironmentParser0.createEncodedValues(mountainBikeFlagEncoder0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(552, 552, (-2146));
      // Undeclared exception!
      try { 
        oSMRoadEnvironmentParser0.createEncodedValues(carFlagEncoder0, (List<EncodedValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMRoadEnvironmentParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      ReaderWay readerWay0 = new ReaderWay(1);
      Object object0 = new Object();
      readerWay0.setTag("highway", object0);
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      // Undeclared exception!
      try { 
        oSMRoadEnvironmentParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue road_environment not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntsRef intsRef0 = IntsRef.EMPTY;
      ReaderWay readerWay0 = new ReaderWay(1);
      RoadEnvironment roadEnvironment0 = RoadEnvironment.FORD;
      readerWay0.setTag("ford", roadEnvironment0);
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      // Undeclared exception!
      try { 
        oSMRoadEnvironmentParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue road_environment not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntsRef intsRef0 = new IntsRef(1);
      ReaderWay readerWay0 = new ReaderWay(1);
      Object object0 = new Object();
      readerWay0.setTag("tunnel", object0);
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      // Undeclared exception!
      try { 
        oSMRoadEnvironmentParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue road_environment not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      IntsRef intsRef0 = IntsRef.EMPTY;
      ReaderWay readerWay0 = new ReaderWay((-24));
      Object object0 = new Object();
      readerWay0.setTag("bridge", object0);
      // Undeclared exception!
      try { 
        oSMRoadEnvironmentParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue road_environment not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OSMRoadEnvironmentParser oSMRoadEnvironmentParser0 = new OSMRoadEnvironmentParser();
      MotorcycleFlagEncoder motorcycleFlagEncoder0 = new MotorcycleFlagEncoder();
      Vector<EncodedValue> vector0 = new Vector<EncodedValue>();
      oSMRoadEnvironmentParser0.createEncodedValues(motorcycleFlagEncoder0, vector0);
      assertFalse(motorcycleFlagEncoder0.isBlockFords());
  }
}
