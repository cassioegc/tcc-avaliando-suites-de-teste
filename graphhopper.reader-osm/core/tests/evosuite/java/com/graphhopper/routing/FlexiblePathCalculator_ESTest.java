/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 04:19:45 GMT 2021
 */

package com.graphhopper.routing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.AlgorithmOptions;
import com.graphhopper.routing.EdgeRestrictions;
import com.graphhopper.routing.FlexiblePathCalculator;
import com.graphhopper.routing.RoutingAlgorithm;
import com.graphhopper.routing.RoutingAlgorithmFactory;
import com.graphhopper.routing.querygraph.QueryGraph;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FlexiblePathCalculator_ESTest extends FlexiblePathCalculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QueryGraph queryGraph0 = mock(QueryGraph.class, new ViolatedAssumptionAnswer());
      RoutingAlgorithmFactory routingAlgorithmFactory0 = mock(RoutingAlgorithmFactory.class, new ViolatedAssumptionAnswer());
      doReturn((RoutingAlgorithm) null).when(routingAlgorithmFactory0).createAlgo(any(com.graphhopper.storage.Graph.class) , any(com.graphhopper.routing.AlgorithmOptions.class));
      AlgorithmOptions algorithmOptions0 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      FlexiblePathCalculator flexiblePathCalculator0 = new FlexiblePathCalculator(queryGraph0, routingAlgorithmFactory0, algorithmOptions0);
      // Undeclared exception!
      try { 
        flexiblePathCalculator0.calcPaths(595, 0, (EdgeRestrictions) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.FlexiblePathCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QueryGraph queryGraph0 = mock(QueryGraph.class, new ViolatedAssumptionAnswer());
      RoutingAlgorithmFactory routingAlgorithmFactory0 = mock(RoutingAlgorithmFactory.class, new ViolatedAssumptionAnswer());
      FlexiblePathCalculator flexiblePathCalculator0 = new FlexiblePathCalculator(queryGraph0, routingAlgorithmFactory0, (AlgorithmOptions) null);
      AlgorithmOptions algorithmOptions0 = flexiblePathCalculator0.getAlgoOpts();
      assertNull(algorithmOptions0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QueryGraph queryGraph0 = mock(QueryGraph.class, new ViolatedAssumptionAnswer());
      RoutingAlgorithmFactory routingAlgorithmFactory0 = mock(RoutingAlgorithmFactory.class, new ViolatedAssumptionAnswer());
      FlexiblePathCalculator flexiblePathCalculator0 = new FlexiblePathCalculator(queryGraph0, routingAlgorithmFactory0, (AlgorithmOptions) null);
      String string0 = flexiblePathCalculator0.getDebugString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QueryGraph queryGraph0 = mock(QueryGraph.class, new ViolatedAssumptionAnswer());
      RoutingAlgorithmFactory routingAlgorithmFactory0 = mock(RoutingAlgorithmFactory.class, new ViolatedAssumptionAnswer());
      FlexiblePathCalculator flexiblePathCalculator0 = new FlexiblePathCalculator(queryGraph0, routingAlgorithmFactory0, (AlgorithmOptions) null);
      int int0 = flexiblePathCalculator0.getVisitedNodes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QueryGraph queryGraph0 = mock(QueryGraph.class, new ViolatedAssumptionAnswer());
      RoutingAlgorithmFactory routingAlgorithmFactory0 = mock(RoutingAlgorithmFactory.class, new ViolatedAssumptionAnswer());
      FlexiblePathCalculator flexiblePathCalculator0 = new FlexiblePathCalculator(queryGraph0, routingAlgorithmFactory0, (AlgorithmOptions) null);
      flexiblePathCalculator0.setAlgoOpts((AlgorithmOptions) null);
      assertEquals(0, flexiblePathCalculator0.getVisitedNodes());
  }
}
