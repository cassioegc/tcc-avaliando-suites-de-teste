/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Apr 04 04:22:51 GMT 2021
 */

package com.graphhopper.routing.lm;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class LandmarkSuggestion_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.graphhopper.routing.lm.LandmarkSuggestion"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/cassioegc/tcc/graphhopper.reader-osm/core"); 
    java.lang.System.setProperty("user.home", "/home/cassioegc"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "cassioegc"); 
    java.lang.System.setProperty("user.timezone", ""); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(LandmarkSuggestion_ESTest_scaffolding.class.getClassLoader() ,
      "com.graphhopper.storage.index.LocationIndex",
      "com.graphhopper.util.shapes.BBox",
      "com.graphhopper.util.EdgeIteratorState",
      "com.graphhopper.routing.util.EdgeFilter",
      "com.graphhopper.util.Helper",
      "com.graphhopper.util.PointList",
      "com.graphhopper.routing.lm.LandmarkSuggestion",
      "com.graphhopper.util.shapes.Shape",
      "com.graphhopper.storage.Storable",
      "com.graphhopper.storage.index.LocationIndex$Visitor",
      "com.graphhopper.storage.index.Snap",
      "com.graphhopper.util.PointAccess",
      "org.locationtech.jts.algorithm.RectangleLineIntersector",
      "com.graphhopper.util.shapes.GHPoint",
      "org.locationtech.jts.geom.Envelope"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.graphhopper.storage.index.LocationIndex", false, LandmarkSuggestion_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("com.graphhopper.util.shapes.BBox", false, LandmarkSuggestion_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(LandmarkSuggestion_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.graphhopper.routing.lm.LandmarkSuggestion",
      "com.graphhopper.routing.util.EdgeFilter",
      "com.graphhopper.util.Helper",
      "com.graphhopper.util.shapes.BBox",
      "com.graphhopper.storage.GHDirectory",
      "com.graphhopper.storage.MMapDirectory",
      "com.graphhopper.storage.DAType$MemRef",
      "com.graphhopper.storage.DAType",
      "com.graphhopper.util.PMap",
      "com.graphhopper.routing.util.AbstractFlagEncoder",
      "com.graphhopper.routing.util.CarFlagEncoder",
      "com.graphhopper.routing.util.Car4WDFlagEncoder",
      "com.graphhopper.routing.util.TransportationMode",
      "com.graphhopper.routing.util.parsers.OSMRoadAccessParser",
      "com.graphhopper.routing.util.parsers.OSMRoadAccessParser$1",
      "com.graphhopper.routing.util.BikeCommonFlagEncoder",
      "com.graphhopper.routing.util.RacingBikeFlagEncoder",
      "com.graphhopper.routing.ev.RouteNetwork",
      "com.graphhopper.routing.util.PriorityCode",
      "com.graphhopper.routing.util.MountainBikeFlagEncoder",
      "com.graphhopper.routing.util.FootFlagEncoder",
      "com.graphhopper.routing.util.DefaultFlagEncoderFactory",
      "com.graphhopper.storage.RAMDirectory",
      "com.graphhopper.routing.util.EncodingManager",
      "com.graphhopper.routing.util.EncodingManager$Builder",
      "com.graphhopper.routing.ev.EncodedValue$InitializerConfig",
      "com.graphhopper.routing.util.parsers.OSMRoundaboutParser",
      "com.graphhopper.routing.ev.Roundabout",
      "com.graphhopper.routing.ev.UnsignedIntEncodedValue",
      "com.graphhopper.routing.ev.SimpleBooleanEncodedValue",
      "com.graphhopper.routing.util.parsers.OSMRoadClassParser",
      "com.graphhopper.routing.ev.EnumEncodedValue",
      "com.graphhopper.routing.ev.RoadClass",
      "com.graphhopper.routing.util.parsers.OSMRoadClassLinkParser",
      "com.graphhopper.routing.util.parsers.OSMRoadEnvironmentParser",
      "com.graphhopper.routing.ev.RoadEnvironment",
      "com.graphhopper.routing.util.parsers.OSMMaxSpeedParser",
      "com.graphhopper.routing.ev.MaxSpeed",
      "com.graphhopper.routing.ev.UnsignedDecimalEncodedValue",
      "com.graphhopper.routing.ev.RoadAccess",
      "com.graphhopper.reader.osm.conditional.DateRangeParser",
      "com.graphhopper.routing.util.MotorcycleFlagEncoder",
      "com.graphhopper.routing.util.parsers.OSMBikeNetworkTagParser",
      "com.graphhopper.routing.ev.BikeNetwork",
      "com.graphhopper.routing.util.parsers.OSMGetOffBikeParser",
      "com.graphhopper.routing.ev.GetOffBike",
      "com.graphhopper.routing.util.FerrySpeedCalculator",
      "com.graphhopper.reader.osm.conditional.ConditionalOSMTagInspector",
      "com.graphhopper.reader.osm.conditional.ConditionalParser",
      "com.graphhopper.routing.ev.DefaultEncodedValueFactory",
      "com.graphhopper.storage.StorableProperties",
      "com.graphhopper.storage.AbstractDataAccess",
      "com.graphhopper.storage.RAMDataAccess",
      "com.graphhopper.util.BitUtilLittle",
      "com.graphhopper.util.BitUtilBig",
      "com.graphhopper.util.BitUtil",
      "com.graphhopper.storage.index.LocationIndexTree",
      "com.graphhopper.util.DistanceCalcEarth",
      "com.graphhopper.util.DistancePlaneProjection",
      "com.graphhopper.util.shapes.GHPoint",
      "com.graphhopper.storage.GraphHopperStorage",
      "com.graphhopper.storage.GraphHopperStorage$1",
      "com.graphhopper.storage.BaseGraph",
      "com.graphhopper.search.StringIndex",
      "com.graphhopper.search.StringIndex$1",
      "com.graphhopper.storage.RAMIntDataAccess",
      "com.graphhopper.storage.GHNodeAccess",
      "com.graphhopper.routing.util.WheelchairFlagEncoder",
      "com.graphhopper.routing.util.BikeFlagEncoder",
      "com.graphhopper.routing.util.parsers.OSMFootNetworkTagParser",
      "com.graphhopper.routing.ev.FootNetwork",
      "com.graphhopper.storage.TurnCostStorage",
      "com.graphhopper.routing.util.HikeFlagEncoder",
      "com.graphhopper.routing.weighting.AbstractWeighting",
      "com.graphhopper.routing.weighting.FastestWeighting",
      "com.graphhopper.routing.weighting.PriorityWeighting",
      "com.graphhopper.routing.weighting.CurvatureWeighting",
      "com.graphhopper.routing.weighting.TurnCostProvider$1",
      "com.graphhopper.routing.weighting.TurnCostProvider",
      "com.graphhopper.util.GHUtility",
      "com.graphhopper.routing.weighting.AbstractAdjustedWeighting",
      "com.graphhopper.routing.weighting.AvoidEdgesWeighting",
      "com.graphhopper.util.StopWatch",
      "com.carrotsearch.hppc.AbstractIntCollection",
      "com.carrotsearch.hppc.IntArrayList",
      "com.carrotsearch.hppc.BoundedProportionalArraySizingStrategy",
      "com.graphhopper.geohash.SpatialKeyAlgo",
      "com.graphhopper.storage.index.PixelGridTraversal",
      "com.graphhopper.storage.index.LocationIndexTree$InMemConstructionIndex",
      "com.graphhopper.storage.index.LocationIndexTree$InMemTreeEntry",
      "com.graphhopper.storage.BaseGraph$EdgeIteratorStateImpl",
      "com.graphhopper.storage.BaseGraph$AllEdgeIterator",
      "com.graphhopper.storage.IntsRef",
      "com.graphhopper.storage.MMapDataAccess"
    );
  }
}
