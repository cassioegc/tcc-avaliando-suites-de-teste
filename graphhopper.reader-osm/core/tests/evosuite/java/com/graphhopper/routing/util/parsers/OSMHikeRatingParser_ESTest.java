/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 04:16:36 GMT 2021
 */

package com.graphhopper.routing.util.parsers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.ev.EncodedValue;
import com.graphhopper.routing.ev.EncodedValueLookup;
import com.graphhopper.routing.util.parsers.OSMHikeRatingParser;
import com.graphhopper.storage.IntsRef;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OSMHikeRatingParser_ESTest extends OSMHikeRatingParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("demanding_mountain_hiking").when(readerWay0).getTag(anyString());
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      String string0 = null;
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay0).getTag(anyString());
      boolean boolean0 = false;
      IntsRef intsRef1 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, false, intsRef1);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertNotNull(intsRef2);
      assertNotSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef0);
      assertFalse(intsRef2.isEmpty());
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn(")&N").when(readerWay1).getTag(anyString());
      IntsRef intsRef3 = oSMHikeRatingParser0.handleWayTags(intsRef2, readerWay1, false, intsRef2);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertNotNull(intsRef3);
      assertNotSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef3, intsRef0);
      assertNotSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef2);
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef3.isEmpty());
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("alpine_hiking").when(readerWay2).getTag(anyString());
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags(intsRef3, readerWay2, false, intsRef2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      String string0 = "X";
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn("X", "demanding_mountain_hiking", "X").when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("X").when(readerWay0).getTag(anyString());
      boolean boolean0 = false;
      IntsRef intsRef1 = oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertNotNull(intsRef1);
      assertSame(intsRef1, intsRef0);
      assertFalse(intsRef1.isEmpty());
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("BD<'3l2NU9L]").when(readerWay1).getTag(anyString());
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay1, false, intsRef1);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertNotNull(intsRef2);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef0);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      
      String string1 = "mountain_hiking";
      String string2 = "Xt.Q0iz{6I\\s%y;!^z'";
      String string3 = "";
      IntsRef intsRef3 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn("mountain_hiking", "Xt.Q0iz{6Is%y;!^z'", "BD<'3l2NU9L]", "").when(intsRef3).toString();
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("").when(readerWay2).getTag(anyString());
      IntsRef intsRef4 = oSMHikeRatingParser0.handleWayTags(intsRef3, readerWay2, true, intsRef3);
      assertFalse(intsRef4.equals((Object)intsRef0));
      assertFalse(intsRef4.equals((Object)intsRef2));
      assertFalse(intsRef4.equals((Object)intsRef1));
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef4.offset);
      assertNotNull(intsRef4);
      assertSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef0);
      assertNotSame(intsRef4, intsRef2);
      assertNotSame(intsRef4, intsRef1);
      assertFalse(intsRef4.isEmpty());
      
      ReaderWay readerWay3 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("Xt.Q0iz{6Is%y;!^z'").when(readerWay3).getTag(anyString());
      IntsRef intsRef5 = oSMHikeRatingParser0.handleWayTags(intsRef4, readerWay3, true, intsRef4);
      assertFalse(intsRef4.equals((Object)intsRef0));
      assertFalse(intsRef4.equals((Object)intsRef2));
      assertFalse(intsRef4.equals((Object)intsRef1));
      assertFalse(intsRef5.equals((Object)intsRef0));
      assertFalse(intsRef5.equals((Object)intsRef2));
      assertFalse(intsRef5.equals((Object)intsRef1));
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef5.offset);
      assertEquals(0, intsRef5.length);
      assertNotNull(intsRef5);
      assertSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef0);
      assertNotSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef5);
      assertNotSame(intsRef4, intsRef1);
      assertSame(intsRef5, intsRef3);
      assertNotSame(intsRef5, intsRef0);
      assertNotSame(intsRef5, intsRef2);
      assertSame(intsRef5, intsRef4);
      assertNotSame(intsRef5, intsRef1);
      assertFalse(intsRef4.isEmpty());
      assertFalse(intsRef5.isEmpty());
      
      ReaderWay readerWay4 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("X").when(readerWay4).getTag(anyString());
      IntsRef intsRef6 = oSMHikeRatingParser0.handleWayTags(intsRef4, readerWay4, true, intsRef5);
      assertFalse(intsRef6.equals((Object)intsRef1));
      assertFalse(intsRef6.equals((Object)intsRef0));
      assertFalse(intsRef6.equals((Object)intsRef2));
      assertFalse(intsRef4.equals((Object)intsRef0));
      assertFalse(intsRef4.equals((Object)intsRef2));
      assertFalse(intsRef4.equals((Object)intsRef1));
      assertFalse(intsRef5.equals((Object)intsRef0));
      assertFalse(intsRef5.equals((Object)intsRef2));
      assertFalse(intsRef5.equals((Object)intsRef1));
      assertEquals(0, intsRef6.length);
      assertEquals(0, intsRef6.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef5.offset);
      assertEquals(0, intsRef5.length);
      assertNotNull(intsRef6);
      assertSame(intsRef6, intsRef5);
      assertNotSame(intsRef6, intsRef1);
      assertNotSame(intsRef6, intsRef0);
      assertSame(intsRef6, intsRef3);
      assertNotSame(intsRef6, intsRef2);
      assertSame(intsRef6, intsRef4);
      assertSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef0);
      assertSame(intsRef4, intsRef6);
      assertNotSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef5);
      assertNotSame(intsRef4, intsRef1);
      assertSame(intsRef5, intsRef3);
      assertNotSame(intsRef5, intsRef0);
      assertSame(intsRef5, intsRef6);
      assertNotSame(intsRef5, intsRef2);
      assertSame(intsRef5, intsRef4);
      assertNotSame(intsRef5, intsRef1);
      assertFalse(intsRef6.isEmpty());
      assertFalse(intsRef4.isEmpty());
      assertFalse(intsRef5.isEmpty());
      
      ReaderWay readerWay5 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("Xt.Q0iz{6Is%y;!^z'").when(readerWay5).getTag(anyString());
      IntsRef intsRef7 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay5, false, intsRef4);
      assertFalse(intsRef7.equals((Object)intsRef5));
      assertFalse(intsRef7.equals((Object)intsRef3));
      assertFalse(intsRef7.equals((Object)intsRef4));
      assertFalse(intsRef7.equals((Object)intsRef6));
      assertFalse(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef4));
      assertFalse(intsRef1.equals((Object)intsRef5));
      assertFalse(intsRef1.equals((Object)intsRef6));
      assertFalse(intsRef4.equals((Object)intsRef0));
      assertFalse(intsRef4.equals((Object)intsRef2));
      assertFalse(intsRef4.equals((Object)intsRef1));
      assertEquals(0, intsRef7.length);
      assertEquals(0, intsRef7.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef4.offset);
      assertNotNull(intsRef7);
      assertNotSame(intsRef7, intsRef5);
      assertSame(intsRef7, intsRef1);
      assertNotSame(intsRef7, intsRef3);
      assertSame(intsRef7, intsRef0);
      assertNotSame(intsRef7, intsRef4);
      assertSame(intsRef7, intsRef2);
      assertNotSame(intsRef7, intsRef6);
      assertSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef5);
      assertSame(intsRef1, intsRef7);
      assertNotSame(intsRef1, intsRef6);
      assertSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef0);
      assertNotSame(intsRef4, intsRef7);
      assertSame(intsRef4, intsRef6);
      assertNotSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef5);
      assertNotSame(intsRef4, intsRef1);
      assertFalse(intsRef7.isEmpty());
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef4.isEmpty());
      
      ReaderWay readerWay6 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("com.graphhopper.routing.util.parsers.OSMHikeRatingParser").when(readerWay6).getTag(anyString());
      IntsRef intsRef8 = oSMHikeRatingParser0.handleWayTags(intsRef4, readerWay6, false, intsRef7);
      assertFalse(intsRef7.equals((Object)intsRef5));
      assertFalse(intsRef7.equals((Object)intsRef3));
      assertFalse(intsRef7.equals((Object)intsRef4));
      assertFalse(intsRef7.equals((Object)intsRef6));
      assertFalse(intsRef8.equals((Object)intsRef2));
      assertFalse(intsRef8.equals((Object)intsRef1));
      assertFalse(intsRef8.equals((Object)intsRef0));
      assertFalse(intsRef8.equals((Object)intsRef7));
      assertFalse(intsRef1.equals((Object)intsRef3));
      assertFalse(intsRef1.equals((Object)intsRef4));
      assertFalse(intsRef1.equals((Object)intsRef5));
      assertFalse(intsRef1.equals((Object)intsRef6));
      assertFalse(intsRef4.equals((Object)intsRef0));
      assertFalse(intsRef4.equals((Object)intsRef7));
      assertFalse(intsRef4.equals((Object)intsRef2));
      assertFalse(intsRef4.equals((Object)intsRef1));
      assertEquals(0, intsRef7.length);
      assertEquals(0, intsRef7.offset);
      assertEquals(0, intsRef8.offset);
      assertEquals(0, intsRef8.length);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef4.length);
      assertEquals(0, intsRef4.offset);
      assertNotNull(intsRef8);
      assertNotSame(intsRef7, intsRef5);
      assertSame(intsRef7, intsRef1);
      assertNotSame(intsRef7, intsRef3);
      assertSame(intsRef7, intsRef0);
      assertNotSame(intsRef7, intsRef4);
      assertSame(intsRef7, intsRef2);
      assertNotSame(intsRef7, intsRef8);
      assertNotSame(intsRef7, intsRef6);
      assertSame(intsRef8, intsRef4);
      assertNotSame(intsRef8, intsRef2);
      assertSame(intsRef8, intsRef6);
      assertSame(intsRef8, intsRef3);
      assertNotSame(intsRef8, intsRef1);
      assertNotSame(intsRef8, intsRef0);
      assertSame(intsRef8, intsRef5);
      assertNotSame(intsRef8, intsRef7);
      assertSame(intsRef1, intsRef2);
      assertNotSame(intsRef1, intsRef3);
      assertNotSame(intsRef1, intsRef4);
      assertSame(intsRef1, intsRef0);
      assertNotSame(intsRef1, intsRef5);
      assertNotSame(intsRef1, intsRef8);
      assertSame(intsRef1, intsRef7);
      assertNotSame(intsRef1, intsRef6);
      assertSame(intsRef4, intsRef3);
      assertNotSame(intsRef4, intsRef0);
      assertNotSame(intsRef4, intsRef7);
      assertSame(intsRef4, intsRef6);
      assertNotSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef8);
      assertSame(intsRef4, intsRef5);
      assertNotSame(intsRef4, intsRef1);
      assertFalse(intsRef7.isEmpty());
      assertFalse(intsRef8.isEmpty());
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef4.isEmpty());
      
      ReaderWay readerWay7 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("difficult_alpine_hiking").when(readerWay7).getTag(anyString());
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags(intsRef4, readerWay7, false, intsRef2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      String string0 = "^YG?FHCZX8\\OPT0";
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn("demanding_alpine_hiking").when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay0).getTag(anyString());
      IntsRef intsRef1 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, true, intsRef1);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertNotNull(intsRef2);
      assertSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertFalse(intsRef2.isEmpty());
      
      String string1 = "difficult_alpine_hiking";
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("difficult_alpine_hiking").when(readerWay1).getTag(anyString());
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags(intsRef2, readerWay1, true, intsRef2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("hiking").when(readerWay0).getTag(anyString());
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("hiking").when(readerWay0).getTag(anyString());
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("Kvzyj(?;:O;Dc@30R").when(readerWay1).getTag(anyString());
      IntsRef intsRef0 = oSMHikeRatingParser0.handleWayTags((IntsRef) null, readerWay1, false, (IntsRef) null);
      assertNull(intsRef0);
      
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags((IntsRef) null, readerWay0, true, (IntsRef) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      String string0 = null;
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("mountain_hiking").when(readerWay0).getTag(anyString());
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      IntsRef intsRef0 = null;
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay0).getTag(anyString());
      boolean boolean0 = false;
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay1).getTag(anyString());
      boolean boolean1 = true;
      IntsRef intsRef1 = oSMHikeRatingParser0.handleWayTags((IntsRef) null, readerWay1, true, (IntsRef) null);
      assertNull(intsRef1);
      
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags((IntsRef) null, readerWay0, false, (IntsRef) null);
      assertNull(intsRef2);
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("demanding_alpine_hiking").when(readerWay2).getTag(anyString());
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags((IntsRef) null, readerWay2, false, (IntsRef) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("{V2mh-t`6nx2q%%P").when(readerWay0).getTag(anyString());
      IntsRef intsRef0 = oSMHikeRatingParser0.handleWayTags((IntsRef) null, readerWay0, false, (IntsRef) null);
      assertNull(intsRef0);
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("r[Y").when(readerWay1).getTag(anyString());
      IntsRef intsRef1 = oSMHikeRatingParser0.handleWayTags((IntsRef) null, readerWay1, false, (IntsRef) null);
      assertNull(intsRef1);
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay2).getTag(anyString());
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags((IntsRef) null, readerWay2, false, (IntsRef) null);
      assertNull(intsRef2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay0).getTag(anyString());
      IntsRef intsRef1 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, false, intsRef1);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertNotNull(intsRef2);
      assertSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertFalse(intsRef2.isEmpty());
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay1).getTag(anyString());
      IntsRef intsRef3 = oSMHikeRatingParser0.handleWayTags(intsRef2, readerWay1, false, intsRef2);
      assertFalse(intsRef2.equals((Object)intsRef1));
      assertFalse(intsRef3.equals((Object)intsRef1));
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef3.offset);
      assertEquals(0, intsRef3.length);
      assertNotNull(intsRef3);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef2, intsRef0);
      assertNotSame(intsRef2, intsRef1);
      assertNotSame(intsRef3, intsRef1);
      assertSame(intsRef3, intsRef0);
      assertSame(intsRef3, intsRef2);
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      IntsRef intsRef0 = null;
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay0).getTag(anyString());
      boolean boolean0 = true;
      IntsRef intsRef1 = oSMHikeRatingParser0.handleWayTags((IntsRef) null, readerWay0, true, (IntsRef) null);
      assertNull(intsRef1);
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags((IntsRef) null, (ReaderWay) null, false, (IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMHikeRatingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay0).getTag(anyString());
      IntsRef intsRef1 = oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertNotNull(intsRef1);
      assertSame(intsRef1, intsRef0);
      assertFalse(intsRef1.isEmpty());
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay1).getTag(anyString());
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay1, false, intsRef1);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertNotNull(intsRef2);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay2).getTag(anyString());
      IntsRef intsRef3 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay2, false, intsRef2);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertNotNull(intsRef3);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef3, intsRef0);
      assertSame(intsRef3, intsRef2);
      assertSame(intsRef3, intsRef1);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef3.isEmpty());
      
      ReaderWay readerWay3 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay3).getTag(anyString());
      IntsRef intsRef4 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay3, true, intsRef1);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef4.offset);
      assertEquals(0, intsRef4.length);
      assertNotNull(intsRef4);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef3);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef4);
      assertSame(intsRef4, intsRef3);
      assertSame(intsRef4, intsRef2);
      assertSame(intsRef4, intsRef0);
      assertSame(intsRef4, intsRef1);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef4.isEmpty());
      
      EncodedValueLookup encodedValueLookup0 = mock(EncodedValueLookup.class, new ViolatedAssumptionAnswer());
      List<EncodedValue> list0 = null;
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.createEncodedValues(encodedValueLookup0, (List<EncodedValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMHikeRatingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      EncodedValueLookup encodedValueLookup0 = mock(EncodedValueLookup.class, new ViolatedAssumptionAnswer());
      List<EncodedValue> list0 = null;
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.createEncodedValues(encodedValueLookup0, (List<EncodedValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMHikeRatingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay0).getTag(anyString());
      IntsRef intsRef0 = oSMHikeRatingParser0.handleWayTags((IntsRef) null, readerWay0, false, (IntsRef) null);
      assertNull(intsRef0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      IntsRef intsRef0 = null;
      ReaderWay readerWay0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags((IntsRef) null, (ReaderWay) null, true, (IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMHikeRatingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn("vci)[2aHA1v", "difficult_alpine_hiking").when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("0ryBg2uumw7G-DJ7aq").when(readerWay0).getTag(anyString());
      IntsRef intsRef1 = oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertNotNull(intsRef1);
      assertSame(intsRef1, intsRef0);
      assertFalse(intsRef1.isEmpty());
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("C+19,").when(readerWay1).getTag(anyString());
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay1, false, intsRef1);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertNotNull(intsRef2);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("mountain_hiking").when(readerWay2).getTag(anyString());
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay2, false, intsRef2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags((IntsRef) null, (ReaderWay) null, true, (IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMHikeRatingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      String string0 = null;
      String string1 = null;
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "Y'<`PjxVYlJ&V>WPSqY").when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay0).getTag(anyString());
      boolean boolean0 = true;
      IntsRef intsRef1 = oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertNotNull(intsRef1);
      assertSame(intsRef1, intsRef0);
      assertFalse(intsRef1.isEmpty());
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("nIz5^uja._hb\"!#<5.").when(readerWay1).getTag(anyString());
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay1, true, intsRef1);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertNotNull(intsRef2);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("demanding_mountain_hiking").when(readerWay2).getTag(anyString());
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay2, true, intsRef1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      String string0 = "difficult_alpine_hiking";
      String string1 = "roundabout";
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("difficult_alpine_hiking").when(readerWay0).getTag(anyString());
      boolean boolean0 = false;
      IntsRef intsRef1 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn("n5`m5&[DNKot", (String) null).when(intsRef1).toString();
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("roundabout").when(readerWay1).getTag(anyString());
      boolean boolean1 = false;
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay1, false, intsRef1);
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertNotNull(intsRef2);
      assertNotSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertFalse(intsRef2.isEmpty());
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("n5`m5&[DNKot").when(readerWay2).getTag(anyString());
      IntsRef intsRef3 = oSMHikeRatingParser0.handleWayTags(intsRef2, readerWay2, false, intsRef2);
      assertFalse(intsRef2.equals((Object)intsRef0));
      assertFalse(intsRef3.equals((Object)intsRef0));
      assertEquals(0, intsRef2.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef3.length);
      assertEquals(0, intsRef3.offset);
      assertNotNull(intsRef3);
      assertNotSame(intsRef2, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef3);
      assertSame(intsRef3, intsRef1);
      assertNotSame(intsRef3, intsRef0);
      assertSame(intsRef3, intsRef2);
      assertFalse(intsRef2.isEmpty());
      assertFalse(intsRef3.isEmpty());
      
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      assertNotNull(oSMHikeRatingParser0);
      
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn("hA{:<9T<;7C@;]^=6r", "hA{:<9T<;7C@;]^=6r").when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("ZLQA4").when(readerWay0).getTag(anyString());
      boolean boolean0 = true;
      IntsRef intsRef1 = oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertNotNull(intsRef1);
      assertSame(intsRef1, intsRef0);
      assertFalse(intsRef1.isEmpty());
      
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("V").when(readerWay1).getTag(anyString());
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay1, true, intsRef1);
      assertEquals(0, intsRef1.length);
      assertEquals(0, intsRef1.offset);
      assertEquals(0, intsRef2.length);
      assertEquals(0, intsRef2.offset);
      assertNotNull(intsRef2);
      assertSame(intsRef1, intsRef2);
      assertSame(intsRef1, intsRef0);
      assertSame(intsRef2, intsRef1);
      assertSame(intsRef2, intsRef0);
      assertFalse(intsRef1.isEmpty());
      assertFalse(intsRef2.isEmpty());
      
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("demanding_alpine_hiking").when(readerWay2).getTag(anyString());
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay2, true, intsRef2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      String string0 = "alpine_hiking";
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("alpine_hiking").when(readerWay0).getTag(anyString());
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue hike_rating not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn("wdkW?hjW|U=_", "wdkW?hjW|U=_", "wdkW?hjW|U=_").when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("sD_n(c").when(readerWay0).getTag(anyString());
      IntsRef intsRef1 = oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, true, intsRef0);
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("catch").when(readerWay1).getTag(anyString());
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay1, true, intsRef1);
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn("wdkW?hjW|U=_").when(readerWay2).getTag(anyString());
      oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay2, true, intsRef2);
      EncodedValueLookup encodedValueLookup0 = mock(EncodedValueLookup.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oSMHikeRatingParser0.createEncodedValues(encodedValueLookup0, (List<EncodedValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMHikeRatingParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OSMHikeRatingParser oSMHikeRatingParser0 = new OSMHikeRatingParser();
      EncodedValueLookup encodedValueLookup0 = mock(EncodedValueLookup.class, new ViolatedAssumptionAnswer());
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(intsRef0).toString();
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay0).getTag(anyString());
      IntsRef intsRef1 = oSMHikeRatingParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
      ReaderWay readerWay1 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay1).getTag(anyString());
      IntsRef intsRef2 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay1, false, intsRef1);
      ReaderWay readerWay2 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay2).getTag(anyString());
      IntsRef intsRef3 = oSMHikeRatingParser0.handleWayTags(intsRef2, readerWay2, false, intsRef1);
      ReaderWay readerWay3 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay3).getTag(anyString());
      IntsRef intsRef4 = oSMHikeRatingParser0.handleWayTags(intsRef2, readerWay3, false, intsRef3);
      EncodedValueLookup encodedValueLookup1 = mock(EncodedValueLookup.class, new ViolatedAssumptionAnswer());
      ReaderWay readerWay4 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay4).getTag(anyString());
      oSMHikeRatingParser0.handleWayTags(intsRef4, readerWay4, true, intsRef3);
      ReaderWay readerWay5 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay5).getTag(anyString());
      IntsRef intsRef5 = oSMHikeRatingParser0.handleWayTags(intsRef1, readerWay5, false, intsRef1);
      ReaderWay readerWay6 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay6).getTag(anyString());
      IntsRef intsRef6 = oSMHikeRatingParser0.handleWayTags(intsRef4, readerWay6, false, intsRef5);
      assertEquals(0, intsRef6.length);
  }
}
