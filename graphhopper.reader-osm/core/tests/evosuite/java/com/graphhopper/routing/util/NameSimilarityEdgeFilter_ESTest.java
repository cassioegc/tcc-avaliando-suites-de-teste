/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:10:50 GMT 2021
 */

package com.graphhopper.routing.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.ev.BooleanEncodedValue;
import com.graphhopper.routing.ev.SimpleBooleanEncodedValue;
import com.graphhopper.routing.util.AllEdgesIterator;
import com.graphhopper.routing.util.DefaultEdgeFilter;
import com.graphhopper.routing.util.EdgeFilter;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.NameSimilarityEdgeFilter;
import com.graphhopper.storage.DAType;
import com.graphhopper.storage.GHDirectory;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.util.DistanceCalc3D;
import com.graphhopper.util.DistanceCalcEuclidean;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.GHUtility;
import com.graphhopper.util.shapes.GHPoint;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NameSimilarityEdgeFilter_ESTest extends NameSimilarityEdgeFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.allEdges(booleanEncodedValue0);
      DistanceCalcEuclidean distanceCalcEuclidean0 = new DistanceCalcEuclidean();
      GHPoint gHPoint0 = distanceCalcEuclidean0.intermediatePoint(14.573911, 14.573911, 14.573911, 0.0, 3880.30878715);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(defaultEdgeFilter0, ", difference: ", gHPoint0, 11.575127, map0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.inEdges((BooleanEncodedValue) null);
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.intermediatePoint(0.0, 0.0, (-2581.36514628), 0.0, (-3237.737));
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(defaultEdgeFilter0, (String) null, gHPoint0, 1.609344);
      String string0 = nameSimilarityEdgeFilter0.getNormalizedPointHint();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.outEdges((BooleanEncodedValue) null);
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.projectCoordinate(0.0, 0.0, (-2505.7119864661663), 0.0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(defaultEdgeFilter0, "", gHPoint0, 2704.778070935, treeMap0);
      // Undeclared exception!
      try { 
        nameSimilarityEdgeFilter0.accept((EdgeIteratorState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.DefaultEdgeFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.allEdges(booleanEncodedValue0);
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.projectCoordinate(30.0, 39.99999999, 30.0, (-4162.624921511588));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(defaultEdgeFilter0, "bvd", gHPoint0, 6378137.0, hashMap0);
      DAType dAType0 = DAType.RAM_INT_STORE;
      GHDirectory gHDirectory0 = new GHDirectory("\"x}0uBVd-#w4OM", dAType0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true, true);
      AllEdgesIterator allEdgesIterator0 = graphHopperStorage0.getAllEdges();
      // Undeclared exception!
      try { 
        nameSimilarityEdgeFilter0.accept(allEdgesIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EdgeFilter edgeFilter0 = EdgeFilter.ALL_EDGES;
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = null;
      try {
        nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(edgeFilter0, "", (GHPoint) null, 0.0, (Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.NameSimilarityEdgeFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.calcCrossingPointToEdge((-356.1535562341579), 0.0, 0.9, 0.0, 0.0, 0.9);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = null;
      try {
        nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter((EdgeFilter) null, "W:", gHPoint0, (-177.63228438829609), hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Distance must not be zero or negative! -177.63228438829609 lat,lon:-177.63228438829609,178.53228438829606
         //
         verifyException("com.graphhopper.util.DistanceCalcEarth", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EdgeFilter edgeFilter0 = EdgeFilter.ALL_EDGES;
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = null;
      try {
        nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(edgeFilter0, "", (GHPoint) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.NameSimilarityEdgeFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EdgeFilter edgeFilter0 = EdgeFilter.ALL_EDGES;
      GHPoint gHPoint0 = new GHPoint();
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(edgeFilter0, "GD", gHPoint0, Double.NaN);
      boolean boolean0 = nameSimilarityEdgeFilter0.accept((EdgeIteratorState) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EdgeFilter edgeFilter0 = EdgeFilter.ALL_EDGES;
      GHPoint gHPoint0 = new GHPoint();
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(edgeFilter0, "Y?>0}~Ycx91*+:;q", gHPoint0, Double.NaN);
      GHUtility.DisabledEdgeIterator gHUtility_DisabledEdgeIterator0 = new GHUtility.DisabledEdgeIterator();
      // Undeclared exception!
      try { 
        nameSimilarityEdgeFilter0.accept(gHUtility_DisabledEdgeIterator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Edge is empty.
         //
         verifyException("com.graphhopper.util.GHUtility$DisabledEdgeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.inEdges((BooleanEncodedValue) null);
      DistanceCalcEuclidean distanceCalcEuclidean0 = new DistanceCalcEuclidean();
      GHPoint gHPoint0 = distanceCalcEuclidean0.intermediatePoint(6371000.0, 4.003017359204114E7, 4.003017359204114E7, (-1066L), 1.609344);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(defaultEdgeFilter0, "MB), bounds:", gHPoint0, 111194.92664455873, treeMap0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.inEdges(booleanEncodedValue0);
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.projectCoordinate(6378137.0, 4.003017359204114E7, 6378137.0, 1.609344);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(defaultEdgeFilter0, "P-9o=>yg\")B_l~sM", gHPoint0, 6378137.0, hashMap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = new SimpleBooleanEncodedValue("track");
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.outEdges(simpleBooleanEncodedValue0);
      GHPoint gHPoint0 = new GHPoint();
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(defaultEdgeFilter0, "track", gHPoint0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.outEdges(simpleBooleanEncodedValue0);
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.intermediatePoint(1.609344, 1.609344, 6378137.0, 1.609344, 111194.92664455873);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(defaultEdgeFilter0, "alley", gHPoint0, 6378137.0, treeMap0);
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter1 = new NameSimilarityEdgeFilter(nameSimilarityEdgeFilter0, (String) null, gHPoint0, 111194.92664455873, treeMap0);
      assertFalse(nameSimilarityEdgeFilter1.equals((Object)nameSimilarityEdgeFilter0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.intermediatePoint((-3881.8533639516), (-3881.8533639516), (-20.0), (-20.0), (-1222.002429));
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter((EdgeFilter) null, "83={/6_-V`I\"c(kU:?", gHPoint0, 301.992178261895);
      String string0 = nameSimilarityEdgeFilter0.getNormalizedPointHint();
      assertEquals("836", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BooleanEncodedValue booleanEncodedValue0 = EdgeIteratorState.REVERSE_STATE;
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.inEdges(booleanEncodedValue0);
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.intermediatePoint((-1.0), (-1.0), Double.POSITIVE_INFINITY, (-4449.29182), (-4449.29182));
      NameSimilarityEdgeFilter nameSimilarityEdgeFilter0 = null;
      try {
        nameSimilarityEdgeFilter0 = new NameSimilarityEdgeFilter(defaultEdgeFilter0, "", gHPoint0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Distance must not be zero or negative! 0.0 lat,lon:NaN,NaN
         //
         verifyException("com.graphhopper.util.DistanceCalcEarth", e);
      }
  }
}
