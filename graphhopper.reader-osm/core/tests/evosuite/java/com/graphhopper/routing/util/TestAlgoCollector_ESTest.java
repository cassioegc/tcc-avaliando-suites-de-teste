/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 04:06:23 GMT 2021
 */

package com.graphhopper.routing.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.AlgorithmOptions;
import com.graphhopper.routing.util.EdgeFilter;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.TestAlgoCollector;
import com.graphhopper.storage.Graph;
import com.graphhopper.storage.index.LocationIndex;
import com.graphhopper.storage.index.Snap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TestAlgoCollector_ESTest extends TestAlgoCollector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 4356.6245181677;
      TestAlgoCollector.AssumptionPerPath testAlgoCollector_AssumptionPerPath0 = new TestAlgoCollector.AssumptionPerPath(2977.72091, (-2286.6515429909), 4356.6245181677, (-1331));
      assertNotNull(testAlgoCollector_AssumptionPerPath0);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun();
      assertNotNull(testAlgoCollector_OneRun0);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun1 = testAlgoCollector_OneRun0.add(1550.13599745, (-3923.0), 0.0, (-1331));
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
      assertNotNull(testAlgoCollector_OneRun1);
      
      testAlgoCollector_OneRun1.setLocs(0, 1);
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
      
      TestAlgoCollector testAlgoCollector0 = null;
      try {
        testAlgoCollector0 = new TestAlgoCollector("O&hI#P'p:a>Q[@J=Bu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("com.graphhopper.util.TranslationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestAlgoCollector.AssumptionPerPath testAlgoCollector_AssumptionPerPath0 = new TestAlgoCollector.AssumptionPerPath(2168.0, 0.0, 2554.822697366202, 335);
      assertNotNull(testAlgoCollector_AssumptionPerPath0);
      
      String string0 = testAlgoCollector_AssumptionPerPath0.toString();
      assertNotNull(string0);
      assertEquals("2168.0, 0.0, locs:335, dist:2554.822697366202", string0);
      
      String string1 = testAlgoCollector_AssumptionPerPath0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2168.0, 0.0, locs:335, dist:2554.822697366202", string1);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun();
      assertNotNull(testAlgoCollector_OneRun0);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun1 = testAlgoCollector_OneRun0.add(2168.0, 335, 1588.87808026, 0);
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
      assertNotNull(testAlgoCollector_OneRun1);
      
      testAlgoCollector_OneRun1.setDistance(0, 2168.0);
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun(1814.769, 1814.769, 0.0, 0.0, (-429.28704399), 0);
      assertNotNull(testAlgoCollector_OneRun0);
      
      String string0 = testAlgoCollector_OneRun0.toString();
      assertNotNull(string0);
      
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      AlgorithmOptions algorithmOptions0 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      LocationIndex locationIndex0 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      TestAlgoCollector.AlgoHelperEntry testAlgoCollector_AlgoHelperEntry0 = new TestAlgoCollector.AlgoHelperEntry(graph0, false, algorithmOptions0, locationIndex0, "");
      assertEquals("", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(testAlgoCollector_AlgoHelperEntry0);
      
      String string1 = testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo();
      assertFalse(string1.equals((Object)string0));
      assertEquals("", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      LocationIndex locationIndex0 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(locationIndex0).toString();
      TestAlgoCollector.AlgoHelperEntry testAlgoCollector_AlgoHelperEntry0 = new TestAlgoCollector.AlgoHelperEntry(graph0, false, (AlgorithmOptions) null, locationIndex0, " ERRORS.\n");
      assertEquals(" ERRORS.\n", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(testAlgoCollector_AlgoHelperEntry0);
      
      LocationIndex locationIndex1 = testAlgoCollector_AlgoHelperEntry0.getIdx();
      assertEquals(" ERRORS.\n", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertSame(locationIndex1, locationIndex0);
      assertNotNull(locationIndex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestAlgoCollector.AssumptionPerPath testAlgoCollector_AssumptionPerPath0 = new TestAlgoCollector.AssumptionPerPath(0.0, 0.0, (-259.25006000360514), 0);
      assertNotNull(testAlgoCollector_AssumptionPerPath0);
      
      String string0 = testAlgoCollector_AssumptionPerPath0.toString();
      assertNotNull(string0);
      assertEquals("0.0, 0.0, locs:0, dist:-259.25006000360514", string0);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun();
      assertNotNull(testAlgoCollector_OneRun0);
      
      String string1 = testAlgoCollector_OneRun0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TestAlgoCollector testAlgoCollector0 = null;
      try {
        testAlgoCollector0 = new TestAlgoCollector("=arp1*t=YnR27]{3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("com.graphhopper.util.TranslationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun((-3453.888340243715), (-3453.888340243715), (-3453.888340243715), (-3453.888340243715), 2850.24726145, 21);
      assertNotNull(testAlgoCollector_OneRun0);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun1 = testAlgoCollector_OneRun0.add(21, (-1.0), 0.0, 21);
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
      assertNotNull(testAlgoCollector_OneRun1);
      
      int int0 = testAlgoCollector_OneRun1.getLocs();
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun(2048.7972212754, (-3450.0), (-3450.0), (-3450.0), 2048.7972212754, 0);
      assertNotNull(testAlgoCollector_OneRun0);
      
      double double0 = testAlgoCollector_OneRun0.getDistance();
      assertEquals(2048.7972212754, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun();
      assertNotNull(testAlgoCollector_OneRun0);
      
      double double0 = testAlgoCollector_OneRun0.getDistance();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = testAlgoCollector_OneRun0.getLocs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun();
      assertNotNull(testAlgoCollector_OneRun0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        testAlgoCollector_OneRun0.setLocs(1839, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1839, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun((-930.829568784), (-930.829568784), (-930.829568784), (-930.829568784), 0.0, 0);
      assertNotNull(testAlgoCollector_OneRun0);
      
      testAlgoCollector_OneRun0.setLocs(0, 0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlgorithmOptions algorithmOptions0 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(algorithmOptions0).toString();
      TestAlgoCollector.AlgoHelperEntry testAlgoCollector_AlgoHelperEntry0 = new TestAlgoCollector.AlgoHelperEntry((Graph) null, false, algorithmOptions0, (LocationIndex) null, "Mw3&Y`f1J9<?");
      assertEquals("Mw3&Y`f1J9<?", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(testAlgoCollector_AlgoHelperEntry0);
      
      AlgorithmOptions algorithmOptions1 = testAlgoCollector_AlgoHelperEntry0.getAlgorithmOptions();
      assertEquals("Mw3&Y`f1J9<?", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNull(algorithmOptions1.getTraversalMode());
      assertFalse(algorithmOptions1.hasWeighting());
      assertEquals(0, algorithmOptions1.getMaxVisitedNodes());
      assertSame(algorithmOptions1, algorithmOptions0);
      assertNotNull(algorithmOptions1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestAlgoCollector testAlgoCollector0 = null;
      try {
        testAlgoCollector0 = new TestAlgoCollector("{#6^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("com.graphhopper.util.TranslationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AlgorithmOptions algorithmOptions0 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(algorithmOptions0).getAlgorithm();
      LocationIndex locationIndex0 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      TestAlgoCollector.AlgoHelperEntry testAlgoCollector_AlgoHelperEntry0 = new TestAlgoCollector.AlgoHelperEntry((Graph) null, true, algorithmOptions0, locationIndex0, "");
      assertEquals("", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(testAlgoCollector_AlgoHelperEntry0);
      
      String string0 = testAlgoCollector_AlgoHelperEntry0.toString();
      assertEquals("", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(string0);
      assertEquals("algoEntry(null|ch)", string0);
      
      TestAlgoCollector.AssumptionPerPath testAlgoCollector_AssumptionPerPath0 = new TestAlgoCollector.AssumptionPerPath(2.0, 2.0, 0.0, (-2235));
      assertNotNull(testAlgoCollector_AssumptionPerPath0);
      
      String string1 = testAlgoCollector_AssumptionPerPath0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2.0, 2.0, locs:-2235, dist:0.0", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      AlgorithmOptions algorithmOptions0 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(algorithmOptions0).getAlgorithm();
      LocationIndex locationIndex0 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      TestAlgoCollector.AlgoHelperEntry testAlgoCollector_AlgoHelperEntry0 = new TestAlgoCollector.AlgoHelperEntry(graph0, true, algorithmOptions0, locationIndex0, "");
      assertEquals("", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(testAlgoCollector_AlgoHelperEntry0);
      
      String string0 = testAlgoCollector_AlgoHelperEntry0.toString();
      assertEquals("", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(string0);
      assertEquals("algoEntry(null|ch)", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun(133.116148645, 496.884209411, (-514.15590898), (-2328.99877781081), 2.0, 0);
      assertNotNull(testAlgoCollector_OneRun0);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun1 = testAlgoCollector_OneRun0.add(496.884209411, 0.0, 2.0, 1579);
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
      assertNotNull(testAlgoCollector_OneRun1);
      
      LocationIndex locationIndex0 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      doReturn((Snap) null, (Snap) null, (Snap) null).when(locationIndex0).findClosest(anyDouble() , anyDouble() , any(com.graphhopper.routing.util.EdgeFilter.class));
      EdgeFilter edgeFilter0 = mock(EdgeFilter.class, new ViolatedAssumptionAnswer());
      List<Snap> list0 = testAlgoCollector_OneRun1.getList(locationIndex0, edgeFilter0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
      assertNotNull(list0);
      
      TestAlgoCollector testAlgoCollector0 = null;
      try {
        testAlgoCollector0 = new TestAlgoCollector("A\"IE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("com.graphhopper.util.TranslationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EncodingManager encodingManager0 = mock(EncodingManager.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      LocationIndex locationIndex0 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      TestAlgoCollector.AlgoHelperEntry testAlgoCollector_AlgoHelperEntry0 = new TestAlgoCollector.AlgoHelperEntry(graph0, false, (AlgorithmOptions) null, locationIndex0, "AqmVgMrL");
      assertEquals("AqmVgMrL", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(testAlgoCollector_AlgoHelperEntry0);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun(0.0, 0.0, 0.0, 0.0, 0.0, 561);
      assertNotNull(testAlgoCollector_OneRun0);
      
      double double0 = testAlgoCollector_OneRun0.getDistance();
      assertEquals(0.0, double0, 0.01);
      
      LocationIndex locationIndex1 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      doReturn((Snap) null, (Snap) null).when(locationIndex1).findClosest(anyDouble() , anyDouble() , any(com.graphhopper.routing.util.EdgeFilter.class));
      EdgeFilter edgeFilter0 = mock(EdgeFilter.class, new ViolatedAssumptionAnswer());
      List<Snap> list0 = testAlgoCollector_OneRun0.getList(locationIndex1, edgeFilter0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun1 = new TestAlgoCollector.OneRun(4554.348181794856, 4554.348181794856, 1.0, 1.2742E7, 4554.348181794856, (-271));
      assertFalse(testAlgoCollector_OneRun1.equals((Object)testAlgoCollector_OneRun0));
      assertNotNull(testAlgoCollector_OneRun1);
      
      LocationIndex locationIndex2 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      doReturn((Snap) null, (Snap) null).when(locationIndex2).findClosest(anyDouble() , anyDouble() , any(com.graphhopper.routing.util.EdgeFilter.class));
      List<Snap> list1 = testAlgoCollector_OneRun1.getList(locationIndex2, (EdgeFilter) null);
      assertFalse(testAlgoCollector_OneRun1.equals((Object)testAlgoCollector_OneRun0));
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertNotSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      AlgorithmOptions algorithmOptions0 = testAlgoCollector_AlgoHelperEntry0.getAlgorithmOptions();
      assertEquals("AqmVgMrL", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNull(algorithmOptions0);
      
      String string0 = testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo();
      assertEquals("AqmVgMrL", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(string0);
      assertEquals("AqmVgMrL", string0);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun2 = testAlgoCollector_OneRun0.add(0.0, 0.0, 300.0, (-271));
      assertFalse(testAlgoCollector_OneRun0.equals((Object)testAlgoCollector_OneRun1));
      assertFalse(testAlgoCollector_OneRun2.equals((Object)testAlgoCollector_OneRun1));
      assertNotSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun2);
      assertNotSame(testAlgoCollector_OneRun2, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun2, testAlgoCollector_OneRun0);
      assertNotNull(testAlgoCollector_OneRun2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AlgorithmOptions algorithmOptions0 = null;
      LocationIndex locationIndex0 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      TestAlgoCollector.AlgoHelperEntry testAlgoCollector_AlgoHelperEntry0 = new TestAlgoCollector.AlgoHelperEntry((Graph) null, false, (AlgorithmOptions) null, locationIndex0, "Ep");
      assertEquals("Ep", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(testAlgoCollector_AlgoHelperEntry0);
      
      // Undeclared exception!
      try { 
        testAlgoCollector_AlgoHelperEntry0.createAlgo((Graph) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.RoutingAlgorithmFactorySimple", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun(0.0, 0.0, Double.NaN, Double.NaN, 427.7037, 0);
      assertNotNull(testAlgoCollector_OneRun0);
      
      double double0 = testAlgoCollector_OneRun0.getDistance();
      assertEquals(427.7037, double0, 0.01);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun1 = testAlgoCollector_OneRun0.add((-159.990760973501), 0.0, 0, 0);
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
      assertNotNull(testAlgoCollector_OneRun1);
      
      testAlgoCollector_OneRun0.setLocs(0, 0);
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      
      int int0 = testAlgoCollector_OneRun0.getLocs();
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertEquals(0, int0);
      
      double double1 = testAlgoCollector_OneRun0.getDistance();
      assertEquals(double1, double0, 0.01);
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertEquals(427.7037, double1, 0.01);
      
      TestAlgoCollector.AssumptionPerPath testAlgoCollector_AssumptionPerPath0 = new TestAlgoCollector.AssumptionPerPath(0.0, (-1999.008481914275), 3214.015186509, 0);
      assertNotNull(testAlgoCollector_AssumptionPerPath0);
      
      testAlgoCollector_AssumptionPerPath0.lat = (double) 0;
      String string0 = testAlgoCollector_AssumptionPerPath0.toString();
      assertNotNull(string0);
      assertEquals("0.0, -1999.008481914275, locs:0, dist:3214.015186509", string0);
      
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      AlgorithmOptions algorithmOptions0 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(algorithmOptions0).getAlgorithm();
      LocationIndex locationIndex0 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      doReturn("0.0, -1999.008481914275, locs:0, dist:3214.015186509", "0.0, -1999.008481914275, locs:0, dist:3214.015186509").when(locationIndex0).toString();
      TestAlgoCollector.AlgoHelperEntry testAlgoCollector_AlgoHelperEntry0 = new TestAlgoCollector.AlgoHelperEntry(graph0, true, algorithmOptions0, locationIndex0, "Wq|[iF3s}Y+l");
      assertEquals("Wq|[iF3s}Y+l", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(testAlgoCollector_AlgoHelperEntry0);
      
      String string1 = testAlgoCollector_AlgoHelperEntry0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Wq|[iF3s}Y+l", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertNotNull(string1);
      assertEquals("algoEntry(null|ch)", string1);
      
      LocationIndex locationIndex1 = testAlgoCollector_AlgoHelperEntry0.getIdx();
      assertEquals("Wq|[iF3s}Y+l", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertSame(locationIndex1, locationIndex0);
      assertNotNull(locationIndex1);
      
      LocationIndex locationIndex2 = testAlgoCollector_AlgoHelperEntry0.getIdx();
      assertEquals("Wq|[iF3s}Y+l", testAlgoCollector_AlgoHelperEntry0.getExpectedAlgo());
      assertSame(locationIndex2, locationIndex0);
      assertSame(locationIndex2, locationIndex1);
      assertNotNull(locationIndex2);
      
      double double2 = testAlgoCollector_OneRun0.getDistance();
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertEquals(427.7037, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun();
      assertNotNull(testAlgoCollector_OneRun0);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun1 = testAlgoCollector_OneRun0.add(0.0, 2920.0989, 0.0, (-1665));
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
      assertNotNull(testAlgoCollector_OneRun1);
      
      TestAlgoCollector.OneRun testAlgoCollector_OneRun2 = testAlgoCollector_OneRun1.add((-1665), (-1665), 2920.0989, (-1665));
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun2);
      assertSame(testAlgoCollector_OneRun0, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun2);
      assertSame(testAlgoCollector_OneRun1, testAlgoCollector_OneRun0);
      assertSame(testAlgoCollector_OneRun2, testAlgoCollector_OneRun1);
      assertSame(testAlgoCollector_OneRun2, testAlgoCollector_OneRun0);
      assertNotNull(testAlgoCollector_OneRun2);
      
      String string0 = "\t (expected points ";
      TestAlgoCollector testAlgoCollector0 = null;
      try {
        testAlgoCollector0 = new TestAlgoCollector("\t (expected points ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("com.graphhopper.util.TranslationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun();
      assertNotNull(testAlgoCollector_OneRun0);
      
      LocationIndex locationIndex0 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      EdgeFilter edgeFilter0 = mock(EdgeFilter.class, new ViolatedAssumptionAnswer());
      List<Snap> list0 = testAlgoCollector_OneRun0.getList(locationIndex0, edgeFilter0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        testAlgoCollector_OneRun0.setDistance(0, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      AlgorithmOptions algorithmOptions0 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(algorithmOptions0).getAlgorithm();
      LocationIndex locationIndex0 = mock(LocationIndex.class, new ViolatedAssumptionAnswer());
      TestAlgoCollector.AlgoHelperEntry testAlgoCollector_AlgoHelperEntry0 = new TestAlgoCollector.AlgoHelperEntry(graph0, false, algorithmOptions0, locationIndex0, "");
      testAlgoCollector_AlgoHelperEntry0.toString();
      AlgorithmOptions algorithmOptions1 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      testAlgoCollector_AlgoHelperEntry0.setAlgorithmOptions(algorithmOptions1);
      AlgorithmOptions algorithmOptions2 = mock(AlgorithmOptions.class, new ViolatedAssumptionAnswer());
      testAlgoCollector_AlgoHelperEntry0.setAlgorithmOptions(algorithmOptions2);
      TestAlgoCollector.AssumptionPerPath testAlgoCollector_AssumptionPerPath0 = new TestAlgoCollector.AssumptionPerPath(17.486515847907, 17.486515847907, 17.486515847907, (-970));
      TestAlgoCollector testAlgoCollector0 = null;
      try {
        testAlgoCollector0 = new TestAlgoCollector("algoEntry(null)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("com.graphhopper.util.TranslationMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestAlgoCollector.OneRun testAlgoCollector_OneRun0 = new TestAlgoCollector.OneRun(0.9, 1.2742E7, 0.9, 0.9, 0.9, 9);
      TestAlgoCollector.AssumptionPerPath testAlgoCollector_AssumptionPerPath0 = new TestAlgoCollector.AssumptionPerPath(9, 1.2742E7, 0.9, 9);
      testAlgoCollector_AssumptionPerPath0.lat = 0.9;
      testAlgoCollector_AssumptionPerPath0.lon = 1.0;
      testAlgoCollector_AssumptionPerPath0.toString();
      // Undeclared exception!
      try { 
        testAlgoCollector_OneRun0.setDistance(912, 0.9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 912, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
