/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:32:55 GMT 2021
 */

package com.graphhopper.routing.ch;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.GraphHopperConfig;
import com.graphhopper.config.CHProfile;
import com.graphhopper.routing.ch.CHPreparationHandler;
import com.graphhopper.routing.ch.PrepareContractionHierarchies;
import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.FlagEncoderFactory;
import com.graphhopper.routing.util.TraversalMode;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.CHConfig;
import com.graphhopper.storage.DAType;
import com.graphhopper.storage.GHDirectory;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.storage.StorableProperties;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CHPreparationHandler_ESTest extends CHPreparationHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertFalse(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      
      cHPreparationHandler0.setPreparationThreads(4221);
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(4221, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.isEnabled());
      
      CHConfig cHConfig0 = CHConfig.nodeBased("", (Weighting) null);
      assertNotNull(cHConfig0);
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.addCHConfig(cHConfig0);
      assertNotNull(cHPreparationHandler1);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertTrue(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertTrue(cHPreparationHandler1.isEnabled());
      assertTrue(cHPreparationHandler1.hasCHConfigs());
      
      CHProfile[] cHProfileArray0 = new CHProfile[0];
      CHPreparationHandler cHPreparationHandler2 = cHPreparationHandler1.setCHProfiles(cHProfileArray0);
      assertNotNull(cHPreparationHandler2);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler0, cHPreparationHandler2);
      assertSame(cHPreparationHandler1, cHPreparationHandler2);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertSame(cHPreparationHandler2, cHPreparationHandler1);
      assertSame(cHPreparationHandler2, cHPreparationHandler0);
      assertTrue(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.toFileName());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertTrue(cHPreparationHandler1.isEnabled());
      assertTrue(cHPreparationHandler1.hasCHConfigs());
      assertEquals(1, cHPreparationHandler2.getPreparationThreads());
      assertTrue(cHPreparationHandler2.hasCHConfigs());
      assertTrue(cHPreparationHandler2.isEnabled());
      assertEquals(0, cHProfileArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.addCHConfig((CHConfig) null);
      assertNotNull(cHPreparationHandler1);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertTrue(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertTrue(cHPreparationHandler1.hasCHConfigs());
      assertTrue(cHPreparationHandler1.isEnabled());
      
      Vector<CHProfile> vector0 = new Vector<CHProfile>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      CHPreparationHandler cHPreparationHandler2 = cHPreparationHandler1.setCHProfiles((Collection<CHProfile>) vector0);
      assertNotNull(cHPreparationHandler2);
      assertSame(cHPreparationHandler0, cHPreparationHandler2);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler2);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertSame(cHPreparationHandler2, cHPreparationHandler1);
      assertSame(cHPreparationHandler2, cHPreparationHandler0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertTrue(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertTrue(cHPreparationHandler1.hasCHConfigs());
      assertTrue(cHPreparationHandler1.isEnabled());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(cHPreparationHandler2.isEnabled());
      assertEquals(1, cHPreparationHandler2.getPreparationThreads());
      assertTrue(cHPreparationHandler2.hasCHConfigs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      
      CHProfile[] cHProfileArray0 = new CHProfile[8];
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.setCHProfiles(cHProfileArray0);
      assertNotNull(cHPreparationHandler1);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertTrue(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertTrue(cHPreparationHandler1.isEnabled());
      assertFalse(cHPreparationHandler1.hasCHConfigs());
      assertEquals(8, cHProfileArray0.length);
      
      List<CHProfile> list0 = cHPreparationHandler1.getCHProfiles();
      assertNotNull(list0);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertTrue(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertTrue(cHPreparationHandler1.isEnabled());
      assertFalse(cHPreparationHandler1.hasCHConfigs());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertEquals(8, cHProfileArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      
      CHConfig cHConfig0 = new CHConfig("", (Weighting) null, true);
      assertNotNull(cHConfig0);
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertTrue(cHConfig0.isEdgeBased());
      
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.addCHConfig(cHConfig0);
      assertNotNull(cHPreparationHandler1);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertTrue(cHPreparationHandler0.isEnabled());
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.getName());
      assertEquals("", cHConfig0.toFileName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertTrue(cHConfig0.isEdgeBased());
      assertTrue(cHPreparationHandler1.hasCHConfigs());
      assertTrue(cHPreparationHandler1.isEnabled());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      
      List<CHConfig> list0 = cHPreparationHandler0.getCHConfigs();
      assertNotNull(list0);
      assertTrue(list0.contains(cHConfig0));
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertTrue(cHPreparationHandler0.isEnabled());
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      
      // Undeclared exception!
      try { 
        cHPreparationHandler0.setCHProfiles((CHProfile[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      
      // Undeclared exception!
      try { 
        cHPreparationHandler0.setCHProfiles((Collection<CHProfile>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertFalse(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      
      // Undeclared exception!
      try { 
        cHPreparationHandler0.init((GraphHopperConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      
      // Undeclared exception!
      try { 
        cHPreparationHandler0.getPreparation((CHConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.isEnabled());
      
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.addCHConfig((CHConfig) null);
      assertNotNull(cHPreparationHandler1);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertTrue(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertTrue(cHPreparationHandler1.hasCHConfigs());
      assertTrue(cHPreparationHandler1.isEnabled());
      
      // Undeclared exception!
      try { 
        cHPreparationHandler0.getNodeBasedCHConfigs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.addCHConfig((CHConfig) null);
      assertNotNull(cHPreparationHandler1);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertTrue(cHPreparationHandler0.isEnabled());
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertTrue(cHPreparationHandler1.hasCHConfigs());
      assertTrue(cHPreparationHandler1.isEnabled());
      
      // Undeclared exception!
      try { 
        cHPreparationHandler1.getEdgeBasedCHConfigs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.addCHConfig((CHConfig) null);
      assertNotNull(cHPreparationHandler1);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertTrue(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertTrue(cHPreparationHandler1.hasCHConfigs());
      assertTrue(cHPreparationHandler1.isEnabled());
      
      DAType.MemRef dAType_MemRef0 = DAType.MemRef.MMAP;
      DAType dAType0 = new DAType(dAType_MemRef0, false, false, false);
      assertNotNull(dAType0);
      assertFalse(dAType0.isInteg());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType0.isMMap());
      assertFalse(dAType0.isAllowWrites());
      assertFalse(dAType0.isInMemory());
      
      GHDirectory gHDirectory0 = new GHDirectory("J~CilZ/^E+$42.l$", dAType0);
      assertNotNull(gHDirectory0);
      assertFalse(dAType0.isInteg());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType0.isMMap());
      assertFalse(dAType0.isAllowWrites());
      assertFalse(dAType0.isInMemory());
      assertEquals("J~CilZ/^E+$42.l$/", gHDirectory0.toString());
      assertFalse(gHDirectory0.isStoring());
      assertEquals("J~CilZ/^E+$42.l$/", gHDirectory0.getLocation());
      
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      assertNotNull(encodingManager0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, false);
      assertNotNull(graphHopperStorage0);
      assertFalse(dAType0.isInteg());
      assertFalse(dAType0.isStoring());
      assertTrue(dAType0.isMMap());
      assertFalse(dAType0.isAllowWrites());
      assertFalse(dAType0.isInMemory());
      assertEquals("J~CilZ/^E+$42.l$/", gHDirectory0.toString());
      assertFalse(gHDirectory0.isStoring());
      assertEquals("J~CilZ/^E+$42.l$/", gHDirectory0.getLocation());
      assertEquals(0, linkedList0.size());
      assertEquals(1, encodingManager0.getIntsForFlags());
      assertTrue(encodingManager0.isEnableInstructions());
      assertEquals(0, graphHopperStorage0.getEdges());
      assertEquals(0, graphHopperStorage0.getNodes());
      
      // Undeclared exception!
      try { 
        cHPreparationHandler0.createPreparations(graphHopperStorage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.PrepareContractionHierarchies", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertFalse(cHPreparationHandler0.isEnabled());
      
      // Undeclared exception!
      try { 
        cHPreparationHandler0.getPreparation((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No CH preparations added yet
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      
      boolean boolean0 = cHPreparationHandler0.hasCHConfigs();
      assertFalse(boolean0);
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertFalse(cHPreparationHandler0.isEnabled());
      
      CHConfig cHConfig0 = CHConfig.nodeBased("", (Weighting) null);
      assertNotNull(cHConfig0);
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.addCHConfig(cHConfig0);
      assertNotNull(cHPreparationHandler1);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertTrue(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertFalse(cHConfig0.isEdgeBased());
      assertEquals("", cHConfig0.toString());
      assertEquals(TraversalMode.NODE_BASED, cHConfig0.getTraversalMode());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.getName());
      assertTrue(cHPreparationHandler1.hasCHConfigs());
      assertTrue(cHPreparationHandler1.isEnabled());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      
      boolean boolean0 = cHPreparationHandler0.hasCHConfigs();
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertTrue(boolean0);
      assertTrue(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertTrue(cHPreparationHandler0.hasCHConfigs());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      
      CHConfig cHConfig0 = new CHConfig("", (Weighting) null, true);
      assertNotNull(cHConfig0);
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertTrue(cHConfig0.isEdgeBased());
      
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.addCHConfig(cHConfig0);
      assertNotNull(cHPreparationHandler1);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertTrue(cHPreparationHandler0.isEnabled());
      assertEquals("", cHConfig0.toFileName());
      assertEquals("", cHConfig0.toString());
      assertEquals("", cHConfig0.getName());
      assertEquals(TraversalMode.EDGE_BASED, cHConfig0.getTraversalMode());
      assertTrue(cHConfig0.isEdgeBased());
      assertTrue(cHPreparationHandler1.isEnabled());
      assertTrue(cHPreparationHandler1.hasCHConfigs());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      
      boolean boolean0 = cHPreparationHandler0.isEnabled();
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertTrue(boolean0);
      assertTrue(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertTrue(cHPreparationHandler0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      
      int int0 = cHPreparationHandler0.getPreparationThreads();
      assertEquals(1, int0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      
      ArrayDeque<CHProfile> arrayDeque0 = new ArrayDeque<CHProfile>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.setCHProfiles((Collection<CHProfile>) arrayDeque0);
      assertNotNull(cHPreparationHandler1);
      assertSame(cHPreparationHandler0, cHPreparationHandler1);
      assertSame(cHPreparationHandler1, cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.isEnabled());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(cHPreparationHandler1.hasCHConfigs());
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertFalse(cHPreparationHandler1.isEnabled());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(cHPreparationHandler0.isEnabled());
      
      // Undeclared exception!
      try { 
        cHPreparationHandler0.setPreparationThreads(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertNotNull(cHPreparationHandler0);
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      
      cHPreparationHandler0.createPreparations((GraphHopperStorage) null);
      assertFalse(cHPreparationHandler0.isEnabled());
      assertFalse(cHPreparationHandler0.hasCHConfigs());
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      RAMDirectory rAMDirectory0 = new RAMDirectory("C", false);
      StorableProperties storableProperties0 = new StorableProperties(rAMDirectory0);
      cHPreparationHandler0.prepare(storableProperties0, false);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      CHConfig cHConfig0 = CHConfig.nodeBased("", (Weighting) null);
      cHPreparationHandler0.addCHConfig(cHConfig0);
      List<CHConfig> list0 = cHPreparationHandler0.getEdgeBasedCHConfigs();
      assertFalse(list0.contains(cHConfig0));
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      CHConfig cHConfig0 = new CHConfig("", (Weighting) null, true);
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.addCHConfig(cHConfig0);
      List<CHConfig> list0 = cHPreparationHandler1.getEdgeBasedCHConfigs();
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertTrue(list0.contains(cHConfig0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      CHConfig cHConfig0 = CHConfig.nodeBased("", (Weighting) null);
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.addCHConfig(cHConfig0);
      List<CHConfig> list0 = cHPreparationHandler1.getNodeBasedCHConfigs();
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
      assertTrue(list0.contains(cHConfig0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      CHConfig cHConfig0 = new CHConfig("", (Weighting) null, true);
      cHPreparationHandler0.addCHConfig(cHConfig0);
      List<CHConfig> list0 = cHPreparationHandler0.getNodeBasedCHConfigs();
      assertFalse(list0.contains(cHConfig0));
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      CHProfile[] cHProfileArray0 = new CHProfile[2];
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.setCHProfiles(cHProfileArray0);
      RAMDirectory rAMDirectory0 = new RAMDirectory("", false);
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      // Undeclared exception!
      try { 
        cHPreparationHandler1.createPreparations(graphHopperStorage0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No CH profiles found
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      // Undeclared exception!
      try { 
        cHPreparationHandler0.addPreparation((PrepareContractionHierarchies) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // You need to add the corresponding CH configs before adding preparations.
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.addCHConfig((CHConfig) null);
      // Undeclared exception!
      try { 
        cHPreparationHandler1.addPreparation((PrepareContractionHierarchies) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      boolean boolean0 = cHPreparationHandler0.isEnabled();
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      assertFalse(cHPreparationHandler0.isEnabled());
      
      CHProfile[] cHProfileArray0 = new CHProfile[1];
      cHPreparationHandler0.setCHProfiles(cHProfileArray0);
      boolean boolean0 = cHPreparationHandler0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      CHProfile[] cHProfileArray0 = new CHProfile[0];
      CHPreparationHandler cHPreparationHandler1 = cHPreparationHandler0.setCHProfiles(cHProfileArray0);
      assertEquals(1, cHPreparationHandler1.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      cHPreparationHandler0.getCHConfigs();
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      GraphHopperConfig graphHopperConfig0 = new GraphHopperConfig();
      cHPreparationHandler0.init(graphHopperConfig0);
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      cHPreparationHandler0.getCHProfiles();
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      CHConfig cHConfig0 = new CHConfig("", (Weighting) null, true);
      // Undeclared exception!
      try { 
        cHPreparationHandler0.getPreparation(cHConfig0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No CH preparations added yet
         //
         verifyException("com.graphhopper.routing.ch.CHPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      cHPreparationHandler0.getPreparations();
      assertEquals(1, cHPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CHPreparationHandler cHPreparationHandler0 = new CHPreparationHandler();
      CHConfig cHConfig0 = CHConfig.nodeBased("", (Weighting) null);
      cHPreparationHandler0.addCHConfig(cHConfig0);
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true);
      // Undeclared exception!
      try { 
        cHPreparationHandler0.createPreparations(graphHopperStorage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // There is no CH graph '', existing: []
         //
         verifyException("com.graphhopper.routing.ch.PrepareContractionHierarchies", e);
      }
  }
}
