/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:49:04 GMT 2021
 */

package com.graphhopper.routing.weighting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.coll.GHIntHashSet;
import com.graphhopper.routing.weighting.AvoidEdgesWeighting;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.util.EdgeIteratorState;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AvoidEdgesWeighting_ESTest extends AvoidEdgesWeighting_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AvoidEdgesWeighting avoidEdgesWeighting0 = new AvoidEdgesWeighting(weighting0);
      AvoidEdgesWeighting avoidEdgesWeighting1 = new AvoidEdgesWeighting(avoidEdgesWeighting0);
      GHIntHashSet gHIntHashSet0 = (GHIntHashSet)avoidEdgesWeighting1.avoidedEdges;
      avoidEdgesWeighting0.setAvoidedEdges(gHIntHashSet0);
      assertFalse(avoidEdgesWeighting1.equals((Object)avoidEdgesWeighting0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AvoidEdgesWeighting avoidEdgesWeighting0 = new AvoidEdgesWeighting(weighting0);
      AvoidEdgesWeighting avoidEdgesWeighting1 = avoidEdgesWeighting0.setEdgePenaltyFactor(2789.8862543);
      assertSame(avoidEdgesWeighting1, avoidEdgesWeighting0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(134.412).when(weighting0).calcEdgeWeight(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      AvoidEdgesWeighting avoidEdgesWeighting0 = new AvoidEdgesWeighting(weighting0);
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState0).getEdge();
      double double0 = avoidEdgesWeighting0.calcEdgeWeight(edgeIteratorState0, false);
      assertEquals(134.412, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(weighting0).calcEdgeWeight(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      AvoidEdgesWeighting avoidEdgesWeighting0 = new AvoidEdgesWeighting(weighting0);
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(122).when(edgeIteratorState0).getEdge();
      double double0 = avoidEdgesWeighting0.calcEdgeWeight(edgeIteratorState0, true);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weighting0).calcEdgeWeight(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      AvoidEdgesWeighting avoidEdgesWeighting0 = new AvoidEdgesWeighting(weighting0);
      // Undeclared exception!
      try { 
        avoidEdgesWeighting0.calcEdgeWeight((EdgeIteratorState) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.AvoidEdgesWeighting", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AvoidEdgesWeighting avoidEdgesWeighting0 = null;
      try {
        avoidEdgesWeighting0 = new AvoidEdgesWeighting((Weighting) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No super weighting set
         //
         verifyException("com.graphhopper.routing.weighting.AbstractAdjustedWeighting", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weighting0).calcEdgeWeight(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      AvoidEdgesWeighting avoidEdgesWeighting0 = new AvoidEdgesWeighting(weighting0);
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState0).getEdge();
      double double0 = avoidEdgesWeighting0.calcEdgeWeight(edgeIteratorState0, true);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AvoidEdgesWeighting avoidEdgesWeighting0 = new AvoidEdgesWeighting(weighting0);
      String string0 = avoidEdgesWeighting0.getName();
      assertEquals("avoid_edges", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AvoidEdgesWeighting avoidEdgesWeighting0 = new AvoidEdgesWeighting(weighting0);
      AvoidEdgesWeighting avoidEdgesWeighting1 = avoidEdgesWeighting0.setEdgePenaltyFactor(0.0);
      assertFalse(avoidEdgesWeighting1.hasTurnCosts());
  }
}
