/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:19:23 GMT 2021
 */

package com.graphhopper.routing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.carrotsearch.hppc.IntObjectMap;
import com.graphhopper.routing.AStarBidirection;
import com.graphhopper.routing.SPTEntry;
import com.graphhopper.routing.ev.BooleanEncodedValue;
import com.graphhopper.routing.util.EdgeFilter;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.TraversalMode;
import com.graphhopper.routing.weighting.BeelineWeightApproximator;
import com.graphhopper.routing.weighting.WeightApproximator;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.Graph;
import com.graphhopper.storage.NodeAccess;
import com.graphhopper.util.EdgeExplorer;
import com.graphhopper.util.EdgeIterator;
import com.graphhopper.util.EdgeIteratorState;
import java.util.PriorityQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AStarBidirection_ESTest extends AStarBidirection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EdgeIterator edgeIterator0 = mock(EdgeIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(edgeIterator0).next();
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      doReturn(edgeIterator0, (EdgeIterator) null).when(edgeExplorer0).setBaseNode(anyInt());
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 1.0, 0.0, 0.0).when(nodeAccess0).getLat(anyInt());
      doReturn((-374.197735997754), 5.0, 0.1, 1.0, 0.0).when(nodeAccess0).getLon(anyInt());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      doReturn(3584).when(graph0).getNodes();
      boolean boolean0 = false;
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 1.0, (-1.0), 0.0).when(weighting0).getMinWeight(anyDouble());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      double double0 = (-1854.4815124102);
      // Undeclared exception!
      try { 
        aStarBidirection0.init(3584, (-1854.4815124102), 16, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AbstractNonCHBidirAlgo", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 1134.3017336, 1339.0, 0.0, 1134.3017336).when(nodeAccess0).getLat(anyInt());
      doReturn((-1059.650913379211), 0.0, 0.0, 984.0, 1134.3017336).when(nodeAccess0).getLon(anyInt());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      doReturn((-1)).when(graph0).getNodes();
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn((BooleanEncodedValue) null).when(flagEncoder0).getAccessEnc();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(flagEncoder0).when(weighting0).getFlagEncoder();
      doReturn(489.815359794, 1339.0, 0.0, (-120.40908423656), 984.0).when(weighting0).getMinWeight(anyDouble());
      doReturn(true).when(weighting0).hasTurnCosts();
      doReturn("").when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 0).when(edgeIteratorState0).getAdjNode();
      doReturn(0).when(edgeIteratorState0).getBaseNode();
      doReturn((-1)).when(edgeIteratorState0).getEdge();
      doReturn(false).when(edgeIteratorState0).getReverse(any(com.graphhopper.routing.ev.BooleanEncodedValue.class));
      EdgeIteratorState edgeIteratorState1 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1)).when(edgeIteratorState1).getAdjNode();
      doReturn(69, (-1)).when(edgeIteratorState1).getEdge();
      SPTEntry sPTEntry0 = aStarBidirection0.bestBwdEntry;
      SPTEntry sPTEntry1 = aStarBidirection0.createEntry(edgeIteratorState1, (-1), (SPTEntry) null, true);
      aStarBidirection0.createEntry(edgeIteratorState1, (-1), sPTEntry1, true);
      IntObjectMap<SPTEntry> intObjectMap0 = aStarBidirection0.bestWeightMapFrom;
      aStarBidirection0.setBestOtherMap(intObjectMap0);
      SPTEntry sPTEntry2 = aStarBidirection0.createStartEntry((-1629), 0.0, false);
      SPTEntry sPTEntry3 = aStarBidirection0.createEntry(edgeIteratorState0, 0.0, sPTEntry2, true);
      aStarBidirection0.calcWeight(edgeIteratorState0, sPTEntry3, true);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(2524).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(weighting0).hasTurnCosts();
      doReturn("mtb", "mtb").when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator1);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      EdgeExplorer edgeExplorer1 = aStarBidirection1.edgeExplorer;
      assertSame(edgeExplorer1, edgeExplorer0);
      assertNotNull(edgeExplorer1);
      
      NodeAccess nodeAccess0 = aStarBidirection1.nodeAccess;
      assertNull(nodeAccess0);
      
      Graph graph1 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer1).when(graph1).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph1).getNodeAccess();
      doReturn((-654)).when(graph1).getNodes();
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting1).hasTurnCosts();
      doReturn("Cannot find snap_prevention: ", "MB), bounds:").when(weighting1).toString();
      TraversalMode traversalMode1 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection2 = new AStarBidirection(graph1, weighting1, traversalMode1);
      assertFalse(traversalMode0.equals((Object)traversalMode1));
      assertFalse(traversalMode1.equals((Object)traversalMode0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection1));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection0));
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertEquals(0, aStarBidirection2.getVisitedNodes());
      assertNotNull(aStarBidirection2);
      
      WeightApproximator weightApproximator2 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((-2901.0388765893617), (double)(-654)).when(weightApproximator2).approximate(anyInt());
      WeightApproximator weightApproximator3 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 0.0).when(weightApproximator3).approximate(anyInt());
      doReturn(weightApproximator2).when(weightApproximator3).reverse();
      AStarBidirection aStarBidirection3 = aStarBidirection2.setApproximation(weightApproximator3);
      assertFalse(aStarBidirection3.equals((Object)aStarBidirection0));
      assertFalse(aStarBidirection3.equals((Object)aStarBidirection1));
      assertFalse(traversalMode0.equals((Object)traversalMode1));
      assertFalse(aStarBidirection0.equals((Object)aStarBidirection2));
      assertFalse(aStarBidirection1.equals((Object)aStarBidirection2));
      assertFalse(traversalMode1.equals((Object)traversalMode0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection1));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection0));
      assertNotSame(aStarBidirection3, aStarBidirection0);
      assertNotSame(aStarBidirection3, aStarBidirection1);
      assertSame(aStarBidirection3, aStarBidirection2);
      assertNotSame(traversalMode0, traversalMode1);
      assertNotSame(aStarBidirection0, aStarBidirection2);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertNotSame(aStarBidirection0, aStarBidirection3);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertNotSame(aStarBidirection1, aStarBidirection3);
      assertNotSame(aStarBidirection1, aStarBidirection2);
      assertSame(edgeExplorer1, edgeExplorer0);
      assertNotSame(traversalMode1, traversalMode0);
      assertNotSame(aStarBidirection2, aStarBidirection1);
      assertSame(aStarBidirection2, aStarBidirection3);
      assertNotSame(aStarBidirection2, aStarBidirection0);
      assertEquals(0, aStarBidirection3.getVisitedNodes());
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertEquals(0, aStarBidirection2.getVisitedNodes());
      assertNotNull(aStarBidirection3);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn((-1277)).when(edgeIteratorState0).getAdjNode();
      doReturn((-1277)).when(edgeIteratorState0).getEdge();
      SPTEntry sPTEntry0 = aStarBidirection2.createStartEntry(2812, 4.9E-324, false);
      assertFalse(traversalMode0.equals((Object)traversalMode1));
      assertFalse(aStarBidirection0.equals((Object)aStarBidirection2));
      assertFalse(aStarBidirection0.equals((Object)aStarBidirection3));
      assertFalse(aStarBidirection1.equals((Object)aStarBidirection3));
      assertFalse(aStarBidirection1.equals((Object)aStarBidirection2));
      assertFalse(traversalMode1.equals((Object)traversalMode0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection1));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection0));
      assertNotSame(traversalMode0, traversalMode1);
      assertNotSame(aStarBidirection0, aStarBidirection2);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertNotSame(aStarBidirection0, aStarBidirection3);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertNotSame(aStarBidirection1, aStarBidirection3);
      assertNotSame(aStarBidirection1, aStarBidirection2);
      assertSame(edgeExplorer1, edgeExplorer0);
      assertNotSame(traversalMode1, traversalMode0);
      assertNotSame(aStarBidirection2, aStarBidirection1);
      assertSame(aStarBidirection2, aStarBidirection3);
      assertNotSame(aStarBidirection2, aStarBidirection0);
      assertEquals(4.9E-324, sPTEntry0.getWeightOfVisitedPath(), 0.01);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertEquals(0, aStarBidirection2.getVisitedNodes());
      assertEquals(1450.0194382946809, sPTEntry0.weight, 0.01);
      assertEquals(2812, sPTEntry0.adjNode);
      assertEquals((-1), sPTEntry0.edge);
      assertNotNull(sPTEntry0);
      
      SPTEntry sPTEntry1 = aStarBidirection3.createEntry(edgeIteratorState0, (-1542.51424), sPTEntry0, false);
      assertFalse(aStarBidirection3.equals((Object)aStarBidirection0));
      assertFalse(aStarBidirection3.equals((Object)aStarBidirection1));
      assertFalse(sPTEntry1.equals((Object)sPTEntry0));
      assertFalse(traversalMode0.equals((Object)traversalMode1));
      assertFalse(aStarBidirection0.equals((Object)aStarBidirection2));
      assertFalse(aStarBidirection0.equals((Object)aStarBidirection3));
      assertFalse(aStarBidirection1.equals((Object)aStarBidirection3));
      assertFalse(aStarBidirection1.equals((Object)aStarBidirection2));
      assertFalse(traversalMode1.equals((Object)traversalMode0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection1));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection0));
      assertNotSame(aStarBidirection3, aStarBidirection0);
      assertNotSame(aStarBidirection3, aStarBidirection1);
      assertSame(aStarBidirection3, aStarBidirection2);
      assertNotSame(sPTEntry0, sPTEntry1);
      assertNotSame(sPTEntry1, sPTEntry0);
      assertNotSame(traversalMode0, traversalMode1);
      assertNotSame(aStarBidirection0, aStarBidirection2);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertNotSame(aStarBidirection0, aStarBidirection3);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertNotSame(aStarBidirection1, aStarBidirection3);
      assertNotSame(aStarBidirection1, aStarBidirection2);
      assertSame(edgeExplorer1, edgeExplorer0);
      assertNotSame(traversalMode1, traversalMode0);
      assertNotSame(aStarBidirection2, aStarBidirection1);
      assertSame(aStarBidirection2, aStarBidirection3);
      assertNotSame(aStarBidirection2, aStarBidirection0);
      assertEquals(0, aStarBidirection3.getVisitedNodes());
      assertEquals(4.9E-324, sPTEntry0.getWeightOfVisitedPath(), 0.01);
      assertEquals((-1542.51424), sPTEntry1.getWeightOfVisitedPath(), 0.01);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertEquals(0, aStarBidirection2.getVisitedNodes());
      assertEquals(1450.0194382946809, sPTEntry0.weight, 0.01);
      assertEquals(2812, sPTEntry0.adjNode);
      assertEquals((-1), sPTEntry0.edge);
      assertEquals((-1215.51424), sPTEntry1.weight, 0.01);
      assertEquals((-1277), sPTEntry1.adjNode);
      assertEquals((-1277), sPTEntry1.edge);
      assertNotNull(sPTEntry1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeIterator) null).when(edgeExplorer0).setBaseNode(anyInt());
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(nodeAccess0).getLat(anyInt());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(nodeAccess0).getLon(anyInt());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      doReturn(3584).when(graph0).getNodes();
      boolean boolean0 = false;
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weighting0).getMinWeight(anyDouble());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      double double0 = (-1854.4815124102);
      // Undeclared exception!
      try { 
        aStarBidirection0.init(3584, (-1854.4815124102), 16, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AbstractNonCHBidirAlgo", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(nodeAccess0).getLat(anyInt());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(nodeAccess0).getLon(anyInt());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      doReturn((-1)).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn((FlagEncoder) null).when(weighting0).getFlagEncoder();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weighting0).getMinWeight(anyDouble());
      doReturn(true).when(weighting0).hasTurnCosts();
      doReturn("").when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState0).getAdjNode();
      doReturn(0).when(edgeIteratorState0).getEdge();
      EdgeIteratorState edgeIteratorState1 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(edgeIteratorState1).getAdjNode();
      doReturn(0, 0).when(edgeIteratorState1).getEdge();
      SPTEntry sPTEntry0 = aStarBidirection0.bestBwdEntry;
      assertNull(sPTEntry0);
      
      SPTEntry sPTEntry1 = aStarBidirection0.createEntry(edgeIteratorState1, (-1), (SPTEntry) null, true);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals((-1.0), sPTEntry1.getWeightOfVisitedPath(), 0.01);
      assertEquals(0, sPTEntry1.edge);
      assertEquals((-1.0), sPTEntry1.weight, 0.01);
      assertEquals(0, sPTEntry1.adjNode);
      assertNotNull(sPTEntry1);
      
      SPTEntry sPTEntry2 = aStarBidirection0.createEntry(edgeIteratorState1, (-1), sPTEntry1, true);
      assertFalse(sPTEntry2.equals((Object)sPTEntry1));
      assertNotSame(sPTEntry1, sPTEntry2);
      assertNotSame(sPTEntry2, sPTEntry1);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals((-1.0), sPTEntry1.getWeightOfVisitedPath(), 0.01);
      assertEquals((-1.0), sPTEntry2.getWeightOfVisitedPath(), 0.01);
      assertEquals(0, sPTEntry1.edge);
      assertEquals((-1.0), sPTEntry1.weight, 0.01);
      assertEquals(0, sPTEntry1.adjNode);
      assertEquals((-1.0), sPTEntry2.weight, 0.01);
      assertEquals(0, sPTEntry2.edge);
      assertEquals(0, sPTEntry2.adjNode);
      assertNotNull(sPTEntry2);
      
      IntObjectMap<SPTEntry> intObjectMap0 = aStarBidirection0.bestWeightMapFrom;
      assertTrue(intObjectMap0.isEmpty());
      assertEquals(0, intObjectMap0.size());
      assertNotNull(intObjectMap0);
      
      aStarBidirection0.setBestOtherMap(intObjectMap0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertTrue(intObjectMap0.isEmpty());
      assertEquals(0, intObjectMap0.size());
      
      SPTEntry sPTEntry3 = aStarBidirection0.createStartEntry((-1629), 0.0, false);
      assertFalse(sPTEntry3.equals((Object)sPTEntry1));
      assertFalse(sPTEntry3.equals((Object)sPTEntry2));
      assertNotSame(sPTEntry3, sPTEntry1);
      assertNotSame(sPTEntry3, sPTEntry2);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0.0, sPTEntry3.getWeightOfVisitedPath(), 0.01);
      assertEquals(0.0, sPTEntry3.weight, 0.01);
      assertEquals((-1), sPTEntry3.edge);
      assertEquals((-1629), sPTEntry3.adjNode);
      assertNotNull(sPTEntry3);
      
      SPTEntry sPTEntry4 = aStarBidirection0.createEntry(edgeIteratorState0, 0.0, sPTEntry3, true);
      assertFalse(sPTEntry3.equals((Object)sPTEntry1));
      assertFalse(sPTEntry3.equals((Object)sPTEntry2));
      assertFalse(sPTEntry4.equals((Object)sPTEntry1));
      assertFalse(sPTEntry4.equals((Object)sPTEntry3));
      assertFalse(sPTEntry4.equals((Object)sPTEntry2));
      assertNotSame(sPTEntry3, sPTEntry1);
      assertNotSame(sPTEntry3, sPTEntry4);
      assertNotSame(sPTEntry3, sPTEntry2);
      assertNotSame(sPTEntry4, sPTEntry1);
      assertNotSame(sPTEntry4, sPTEntry3);
      assertNotSame(sPTEntry4, sPTEntry2);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0.0, sPTEntry3.getWeightOfVisitedPath(), 0.01);
      assertEquals(0.0, sPTEntry4.getWeightOfVisitedPath(), 0.01);
      assertEquals(0.0, sPTEntry3.weight, 0.01);
      assertEquals((-1), sPTEntry3.edge);
      assertEquals((-1629), sPTEntry3.adjNode);
      assertEquals(0, sPTEntry4.edge);
      assertEquals(0.0, sPTEntry4.weight, 0.01);
      assertEquals(0, sPTEntry4.adjNode);
      assertNotNull(sPTEntry4);
      
      // Undeclared exception!
      try { 
        aStarBidirection0.calcWeight(edgeIteratorState0, sPTEntry4, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.GHUtility", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      doReturn(1857).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn("LBuAXnF#j", "LBuAXnF#j", "LBuAXnF#j").when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator1);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      WeightApproximator weightApproximator2 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightApproximator2).approximate(anyInt());
      WeightApproximator weightApproximator3 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weightApproximator3).approximate(anyInt());
      doReturn(0.0).when(weightApproximator3).getSlack();
      doReturn(weightApproximator2).when(weightApproximator3).reverse();
      AStarBidirection aStarBidirection2 = aStarBidirection1.setApproximation(weightApproximator3);
      assertSame(aStarBidirection0, aStarBidirection2);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertSame(aStarBidirection1, aStarBidirection2);
      assertSame(aStarBidirection2, aStarBidirection1);
      assertSame(aStarBidirection2, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertEquals(0, aStarBidirection2.getVisitedNodes());
      assertNotNull(aStarBidirection2);
      
      aStarBidirection0.initFrom(1857, 1857);
      assertSame(aStarBidirection0, aStarBidirection2);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      
      // Undeclared exception!
      try { 
        aStarBidirection1.init(1724, 1724, 1724, 1724);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // If from=to, the starting weight must be zero for from and to
         //
         verifyException("com.graphhopper.routing.AbstractBidirAlgo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(nodeAccess0).getLat(anyInt());
      doReturn(0.0, 0.0).when(nodeAccess0).getLon(anyInt());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(weighting0).getMinWeight(anyDouble());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      EdgeFilter edgeFilter0 = aStarBidirection0.additionalEdgeFilter;
      assertNull(edgeFilter0);
      
      aStarBidirection0.fillEdgesFromUsingFilter((EdgeFilter) null);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      
      SPTEntry sPTEntry0 = aStarBidirection0.createStartEntry(Integer.MIN_VALUE, (-918.67124790643), true);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals((-918.67124790643), sPTEntry0.getWeightOfVisitedPath(), 0.01);
      assertEquals((-1), sPTEntry0.edge);
      assertEquals(Integer.MIN_VALUE, sPTEntry0.adjNode);
      assertEquals((-918.67124790643), sPTEntry0.weight, 0.01);
      assertNotNull(sPTEntry0);
      
      boolean boolean0 = aStarBidirection0.finished();
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertTrue(boolean0);
      
      BeelineWeightApproximator beelineWeightApproximator0 = (BeelineWeightApproximator)aStarBidirection0.getApproximation();
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals("beeline", beelineWeightApproximator0.toString());
      assertEquals(0.0, beelineWeightApproximator0.getSlack(), 0.01);
      assertNotNull(beelineWeightApproximator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EdgeExplorer edgeExplorer0 = null;
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      int int0 = 1237;
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      String string0 = "astarbi|";
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(weighting0).hasTurnCosts();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = null;
      try {
        aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Weightings supporting turn costs cannot be used with node-based traversal mode
         //
         verifyException("com.graphhopper.routing.AbstractNonCHBidirAlgo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null, (String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator0);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      aStarBidirection0.to = 1;
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightApproximator1).approximate(anyInt());
      doReturn((WeightApproximator) null).when(weightApproximator1).reverse();
      AStarBidirection aStarBidirection2 = aStarBidirection1.setApproximation(weightApproximator1);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection0, aStarBidirection2);
      assertSame(aStarBidirection1, aStarBidirection2);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertSame(aStarBidirection2, aStarBidirection0);
      assertSame(aStarBidirection2, aStarBidirection1);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertEquals(0, aStarBidirection2.getVisitedNodes());
      assertNotNull(aStarBidirection2);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState0).getAdjNode();
      SPTEntry sPTEntry0 = aStarBidirection2.bestBwdEntry;
      assertNull(sPTEntry0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        aStarBidirection2.createEntry(edgeIteratorState0, 1, (SPTEntry) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.BalancedWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null, (String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator0);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      aStarBidirection0.visitedCountTo = (-1171);
      assertEquals((-1171), aStarBidirection0.getVisitedNodes());
      
      String string0 = aStarBidirection1.getName();
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals((-1171), aStarBidirection0.getVisitedNodes());
      assertEquals((-1171), aStarBidirection1.getVisitedNodes());
      assertNotNull(string0);
      
      aStarBidirection1.postInit((-1091), (-243));
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals((-1171), aStarBidirection0.getVisitedNodes());
      assertEquals((-1171), aStarBidirection1.getVisitedNodes());
      
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((WeightApproximator) null).when(weightApproximator1).reverse();
      AStarBidirection aStarBidirection2 = aStarBidirection1.setApproximation(weightApproximator1);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection0, aStarBidirection2);
      assertSame(aStarBidirection1, aStarBidirection2);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertSame(aStarBidirection2, aStarBidirection1);
      assertSame(aStarBidirection2, aStarBidirection0);
      assertEquals((-1171), aStarBidirection0.getVisitedNodes());
      assertEquals((-1171), aStarBidirection1.getVisitedNodes());
      assertEquals((-1171), aStarBidirection2.getVisitedNodes());
      assertNotNull(aStarBidirection2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      BeelineWeightApproximator beelineWeightApproximator0 = (BeelineWeightApproximator)aStarBidirection0.getApproximation();
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals("beeline", beelineWeightApproximator0.toString());
      assertEquals(0.0, beelineWeightApproximator0.getSlack(), 0.01);
      assertNotNull(beelineWeightApproximator0);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      EdgeIteratorState edgeIteratorState1 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState1).getAdjNode();
      aStarBidirection0.visitedCountFrom = (-788);
      assertEquals((-788), aStarBidirection0.getVisitedNodes());
      
      SPTEntry sPTEntry0 = aStarBidirection0.bestBwdEntry;
      assertNull(sPTEntry0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        aStarBidirection0.createEntry(edgeIteratorState1, 1945.78, (SPTEntry) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.BeelineWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      // Undeclared exception!
      try { 
        aStarBidirection0.createStartEntry((-1107), 725.421952721, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.BeelineWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator0);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      SPTEntry sPTEntry0 = aStarBidirection1.currFrom;
      assertNull(sPTEntry0);
      
      // Undeclared exception!
      try { 
        aStarBidirection1.calcWeight(edgeIteratorState0, (SPTEntry) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AbstractNonCHBidirAlgo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator0);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      // Undeclared exception!
      try { 
        aStarBidirection1.finished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AStarBidirection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator0);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      SPTEntry sPTEntry0 = aStarBidirection0.bestFwdEntry;
      assertNull(sPTEntry0);
      
      // Undeclared exception!
      try { 
        aStarBidirection1.calcWeight((EdgeIteratorState) null, (SPTEntry) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AbstractNonCHBidirAlgo", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      String string0 = aStarBidirection0.getName();
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      Graph graph1 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph1).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph1).getNodeAccess();
      doReturn(0).when(graph1).getNodes();
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting1).hasTurnCosts();
      doReturn((String) null).when(weighting1).toString();
      AStarBidirection aStarBidirection1 = new AStarBidirection(graph1, weighting1, traversalMode0);
      assertFalse(aStarBidirection1.equals((Object)aStarBidirection0));
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      // Undeclared exception!
      try { 
        aStarBidirection0.setToDataStructures(aStarBidirection1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AStarBidirection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = null;
      // Undeclared exception!
      try { 
        aStarBidirection0.setApproximation((WeightApproximator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WeightApproximator cannot be null
         //
         verifyException("com.graphhopper.routing.weighting.BalancedWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState0).getAdjNode();
      SPTEntry sPTEntry0 = aStarBidirection0.currFrom;
      assertNull(sPTEntry0);
      
      // Undeclared exception!
      try { 
        aStarBidirection0.createEntry(edgeIteratorState0, 0.0, (SPTEntry) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.BeelineWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator0);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      int int0 = 44;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        aStarBidirection0.init(44, 44, 44, 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.BalancedWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightApproximator0).approximate(anyInt());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator0);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      // Undeclared exception!
      try { 
        aStarBidirection1.createStartEntry(7, (-877.8302253119), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.BalancedWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator0);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      // Undeclared exception!
      try { 
        aStarBidirection1.init((-722), (-722), (-722), (-459.670375896));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.BalancedWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator0);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      SPTEntry sPTEntry0 = aStarBidirection1.currTo;
      assertNull(sPTEntry0);
      
      aStarBidirection0.bestBwdEntry = null;
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      
      SPTEntry sPTEntry1 = aStarBidirection1.currTo;
      assertNull(sPTEntry1);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState0).getEdge();
      // Undeclared exception!
      try { 
        aStarBidirection1.updateEntry((SPTEntry) null, edgeIteratorState0, 0.0, (SPTEntry) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AStarBidirection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = null;
      try {
        aStarBidirection0 = new AStarBidirection(graph0, (Weighting) null, traversalMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AbstractNonCHBidirAlgo", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      doReturn(882).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(weightApproximator0).approximate(anyInt());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(1929.102611087, 0.0).when(weightApproximator1).approximate(anyInt());
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator1);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      SPTEntry sPTEntry0 = aStarBidirection0.createStartEntry(0, 1.0, false);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(1.0, sPTEntry0.getWeightOfVisitedPath(), 0.01);
      assertEquals((-1), sPTEntry0.edge);
      assertEquals(0, sPTEntry0.adjNode);
      assertEquals(965.5513055435, sPTEntry0.weight, 0.01);
      assertNotNull(sPTEntry0);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState0).getAdjNode();
      doReturn(0).when(edgeIteratorState0).getEdge();
      aStarBidirection1.updateEntry(sPTEntry0, edgeIteratorState0, 0.0, sPTEntry0, false);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertEquals(0.0, sPTEntry0.getWeightOfVisitedPath(), 0.01);
      assertEquals(0, sPTEntry0.edge);
      assertEquals(0.0, sPTEntry0.weight, 0.01);
      assertEquals(0, sPTEntry0.adjNode);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      Graph graph1 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph1).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph1).getNodeAccess();
      doReturn(0).when(graph1).getNodes();
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting1).hasTurnCosts();
      doReturn((String) null).when(weighting1).toString();
      AStarBidirection aStarBidirection1 = new AStarBidirection(graph1, weighting1, traversalMode0);
      assertFalse(aStarBidirection1.equals((Object)aStarBidirection0));
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      // Undeclared exception!
      try { 
        aStarBidirection0.setToDataStructures(aStarBidirection1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AStarBidirection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeIterator) null).when(edgeExplorer0).setBaseNode(anyInt());
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(nodeAccess0).getLat(anyInt());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(nodeAccess0).getLon(anyInt());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      doReturn(3608).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(weighting0).getMinWeight(anyDouble());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      EdgeFilter edgeFilter0 = aStarBidirection0.additionalEdgeFilter;
      assertNull(edgeFilter0);
      
      aStarBidirection0.additionalEdgeFilter = null;
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      
      String string0 = aStarBidirection0.getName();
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        aStarBidirection0.init((-470), (-470), (-612), (-470));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AbstractNonCHBidirAlgo", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = null;
      EdgeFilter edgeFilter0 = aStarBidirection0.additionalEdgeFilter;
      assertNull(edgeFilter0);
      
      aStarBidirection0.fillEdgesFromUsingFilter((EdgeFilter) null);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      
      // Undeclared exception!
      try { 
        aStarBidirection0.setApproximation((WeightApproximator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WeightApproximator cannot be null
         //
         verifyException("com.graphhopper.routing.weighting.BalancedWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null, (String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertNotNull(aStarBidirection0);
      
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator0);
      assertSame(aStarBidirection0, aStarBidirection1);
      assertSame(aStarBidirection1, aStarBidirection0);
      assertEquals(0, aStarBidirection0.getVisitedNodes());
      assertEquals(0, aStarBidirection1.getVisitedNodes());
      assertNotNull(aStarBidirection1);
      
      EdgeExplorer edgeExplorer0 = aStarBidirection1.edgeExplorer;
      assertNull(edgeExplorer0);
      
      NodeAccess nodeAccess0 = aStarBidirection1.nodeAccess;
      assertNull(nodeAccess0);
      
      Graph graph1 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph1).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph1).getNodeAccess();
      doReturn((-654)).when(graph1).getNodes();
      Weighting weighting1 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting1).hasTurnCosts();
      doReturn("Cannot find snap_prevention: ", "MB), bounds:").when(weighting1).toString();
      TraversalMode traversalMode1 = TraversalMode.NODE_BASED;
      AStarBidirection aStarBidirection2 = new AStarBidirection(graph1, weighting1, traversalMode1);
      assertFalse(traversalMode1.equals((Object)traversalMode0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection1));
      assertEquals(0, aStarBidirection2.getVisitedNodes());
      assertNotNull(aStarBidirection2);
      
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(weightApproximator1).approximate(anyInt());
      WeightApproximator weightApproximator2 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 0.0).when(weightApproximator2).approximate(anyInt());
      doReturn(weightApproximator1).when(weightApproximator2).reverse();
      AStarBidirection aStarBidirection3 = aStarBidirection2.setApproximation(weightApproximator2);
      assertFalse(traversalMode1.equals((Object)traversalMode0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection1));
      assertFalse(aStarBidirection3.equals((Object)aStarBidirection1));
      assertFalse(aStarBidirection3.equals((Object)aStarBidirection0));
      assertNotSame(traversalMode1, traversalMode0);
      assertSame(aStarBidirection2, aStarBidirection3);
      assertNotSame(aStarBidirection2, aStarBidirection0);
      assertNotSame(aStarBidirection2, aStarBidirection1);
      assertSame(aStarBidirection3, aStarBidirection2);
      assertNotSame(aStarBidirection3, aStarBidirection1);
      assertNotSame(aStarBidirection3, aStarBidirection0);
      assertEquals(0, aStarBidirection2.getVisitedNodes());
      assertEquals(0, aStarBidirection3.getVisitedNodes());
      assertNotNull(aStarBidirection3);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState0).getAdjNode();
      doReturn(0).when(edgeIteratorState0).getEdge();
      SPTEntry sPTEntry0 = aStarBidirection2.createStartEntry(2812, 4.9E-324, false);
      assertFalse(traversalMode1.equals((Object)traversalMode0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection1));
      assertNotSame(traversalMode1, traversalMode0);
      assertSame(aStarBidirection2, aStarBidirection3);
      assertNotSame(aStarBidirection2, aStarBidirection0);
      assertNotSame(aStarBidirection2, aStarBidirection1);
      assertEquals(4.9E-324, sPTEntry0.getWeightOfVisitedPath(), 0.01);
      assertEquals(0, aStarBidirection2.getVisitedNodes());
      assertEquals(2812, sPTEntry0.adjNode);
      assertEquals((-0.5), sPTEntry0.weight, 0.01);
      assertEquals((-1), sPTEntry0.edge);
      assertNotNull(sPTEntry0);
      
      SPTEntry sPTEntry1 = aStarBidirection3.createEntry(edgeIteratorState0, (-1542.51424), sPTEntry0, false);
      assertFalse(sPTEntry1.equals((Object)sPTEntry0));
      assertFalse(traversalMode1.equals((Object)traversalMode0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection0));
      assertFalse(aStarBidirection2.equals((Object)aStarBidirection1));
      assertFalse(aStarBidirection3.equals((Object)aStarBidirection1));
      assertFalse(aStarBidirection3.equals((Object)aStarBidirection0));
      assertNotSame(sPTEntry0, sPTEntry1);
      assertNotSame(sPTEntry1, sPTEntry0);
      assertNotSame(traversalMode1, traversalMode0);
      assertSame(aStarBidirection2, aStarBidirection3);
      assertNotSame(aStarBidirection2, aStarBidirection0);
      assertNotSame(aStarBidirection2, aStarBidirection1);
      assertSame(aStarBidirection3, aStarBidirection2);
      assertNotSame(aStarBidirection3, aStarBidirection1);
      assertNotSame(aStarBidirection3, aStarBidirection0);
      assertEquals(4.9E-324, sPTEntry0.getWeightOfVisitedPath(), 0.01);
      assertEquals((-1542.51424), sPTEntry1.getWeightOfVisitedPath(), 0.01);
      assertEquals(0, aStarBidirection2.getVisitedNodes());
      assertEquals(0, aStarBidirection3.getVisitedNodes());
      assertEquals(2812, sPTEntry0.adjNode);
      assertEquals((-0.5), sPTEntry0.weight, 0.01);
      assertEquals((-1), sPTEntry0.edge);
      assertEquals(0, sPTEntry1.edge);
      assertEquals(0, sPTEntry1.adjNode);
      assertEquals((-1542.51424), sPTEntry1.weight, 0.01);
      assertNotNull(sPTEntry1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EdgeExplorer edgeExplorer0 = mock(EdgeExplorer.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeIterator) null).when(edgeExplorer0).setBaseNode(anyInt());
      NodeAccess nodeAccess0 = mock(NodeAccess.class, new ViolatedAssumptionAnswer());
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn(edgeExplorer0).when(graph0).createEdgeExplorer();
      doReturn(nodeAccess0).when(graph0).getNodeAccess();
      doReturn((-1508)).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(weighting0).hasTurnCosts();
      doReturn("", "").when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(weightApproximator0).approximate(anyInt());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(weightApproximator1).approximate(anyInt());
      doReturn(0.0).when(weightApproximator1).getSlack();
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      AStarBidirection aStarBidirection1 = aStarBidirection0.setApproximation(weightApproximator1);
      // Undeclared exception!
      try { 
        aStarBidirection1.calcPath((-2381), (-2381), (-2381), (-2381));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AbstractNonCHBidirAlgo", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Graph graph0 = null;
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = null;
      try {
        aStarBidirection0 = new AStarBidirection((Graph) null, weighting0, traversalMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AbstractNonCHBidirAlgo", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Graph graph0 = mock(Graph.class, new ViolatedAssumptionAnswer());
      doReturn((EdgeExplorer) null).when(graph0).createEdgeExplorer();
      doReturn((NodeAccess) null).when(graph0).getNodeAccess();
      doReturn(0).when(graph0).getNodes();
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(weighting0).hasTurnCosts();
      doReturn((String) null).when(weighting0).toString();
      TraversalMode traversalMode0 = TraversalMode.EDGE_BASED;
      AStarBidirection aStarBidirection0 = new AStarBidirection(graph0, weighting0, traversalMode0);
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      SPTEntry sPTEntry0 = aStarBidirection0.bestBwdEntry;
      // Undeclared exception!
      try { 
        aStarBidirection0.calcWeight(edgeIteratorState0, (SPTEntry) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.AbstractNonCHBidirAlgo", e);
      }
  }
}
