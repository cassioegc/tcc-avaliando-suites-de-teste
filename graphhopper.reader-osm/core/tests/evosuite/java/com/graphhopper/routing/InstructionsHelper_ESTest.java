/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:49:36 GMT 2021
 */

package com.graphhopper.routing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.InstructionsHelper;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.GHUtility;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstructionsHelper_ESTest extends InstructionsHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = InstructionsHelper.calculateSign(0.5, 0.5, 0.5, 1.8, (-0.20000183654211873));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = InstructionsHelper.calculateOrientationDelta((-482.05), (-482.05), 353.6946343591201, 0.0, (-1441));
      assertEquals(1436.0476110716877, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = InstructionsHelper.calculateOrientationDelta(459.6, 0.0, (-1926.3372561952606), (-6.50538334647), 459.6);
      assertEquals((-454.88970406618796), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        InstructionsHelper.isNameSimilar((String) null, "7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GHUtility.DisabledEdgeIterator gHUtility_DisabledEdgeIterator0 = new GHUtility.DisabledEdgeIterator();
      assertNotNull(gHUtility_DisabledEdgeIterator0);
      
      GHUtility.DisabledNodeAccess gHUtility_DisabledNodeAccess0 = new GHUtility.DisabledNodeAccess();
      assertNotNull(gHUtility_DisabledNodeAccess0);
      
      // Undeclared exception!
      try { 
        InstructionsHelper.getPointForOrientationCalculation(gHUtility_DisabledEdgeIterator0, gHUtility_DisabledNodeAccess0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Edge is empty.
         //
         verifyException("com.graphhopper.util.GHUtility$DisabledEdgeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GHUtility.DisabledNodeAccess gHUtility_DisabledNodeAccess0 = new GHUtility.DisabledNodeAccess();
      assertNotNull(gHUtility_DisabledNodeAccess0);
      
      // Undeclared exception!
      try { 
        InstructionsHelper.getPointForOrientationCalculation((EdgeIteratorState) null, gHUtility_DisabledNodeAccess0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.InstructionsHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = InstructionsHelper.isNameSimilar("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = InstructionsHelper.isNameSimilar("", "V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = InstructionsHelper.isNameSimilar("G", "G");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = InstructionsHelper.calculateSign(180.0, 9.0, 1980.13259, 1980.13259, 1980.13259);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = InstructionsHelper.calculateSign(1980.13259, 0.0, 1.0E-4, 9.0, 0.0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = InstructionsHelper.calculateSign((-175.857), 180.0, 1.5707963267948966, 3, 1.0E-4);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = InstructionsHelper.calculateSign(0.5, 0.5, 0.5, 1.8, 0.2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = InstructionsHelper.calculateSign((-2), (-751.079371760726), 904.8, 13.0, 1.5707963267948966);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InstructionsHelper instructionsHelper0 = new InstructionsHelper();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = InstructionsHelper.calculateSign((-1150.694359), (-1150.694359), (-1150.694359), (-1150.694359), (-1150.694359));
      assertEquals((-3), int0);
  }
}
