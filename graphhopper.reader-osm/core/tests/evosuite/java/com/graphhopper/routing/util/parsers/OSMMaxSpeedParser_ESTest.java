/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:19:41 GMT 2021
 */

package com.graphhopper.routing.util.parsers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.ev.DecimalEncodedValue;
import com.graphhopper.routing.ev.EncodedValue;
import com.graphhopper.routing.ev.UnsignedDecimalEncodedValue;
import com.graphhopper.routing.util.BikeFlagEncoder;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.WheelchairFlagEncoder;
import com.graphhopper.routing.util.parsers.OSMMaxSpeedParser;
import com.graphhopper.storage.IntsRef;
import com.graphhopper.util.PMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OSMMaxSpeedParser_ESTest extends OSMMaxSpeedParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OSMMaxSpeedParser oSMMaxSpeedParser0 = new OSMMaxSpeedParser();
      // Undeclared exception!
      try { 
        oSMMaxSpeedParser0.handleWayTags((IntsRef) null, (ReaderWay) null, false, (IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMMaxSpeedParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UnsignedDecimalEncodedValue unsignedDecimalEncodedValue0 = new UnsignedDecimalEncodedValue("spatial_rule_set", 1, 1, 1, true);
      OSMMaxSpeedParser oSMMaxSpeedParser0 = new OSMMaxSpeedParser(unsignedDecimalEncodedValue0);
      IntsRef intsRef0 = IntsRef.EMPTY;
      ReaderWay readerWay0 = new ReaderWay((-1230L));
      EncodedValue.InitializerConfig encodedValue_InitializerConfig0 = new EncodedValue.InitializerConfig();
      unsignedDecimalEncodedValue0.init(encodedValue_InitializerConfig0);
      // Undeclared exception!
      try { 
        oSMMaxSpeedParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // spatial_rule_set value Infinity too large for encoding. maxValue:1.0
         //
         verifyException("com.graphhopper.routing.ev.UnsignedDecimalEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OSMMaxSpeedParser oSMMaxSpeedParser0 = new OSMMaxSpeedParser();
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      List<EncodedValue> list0 = encodingManager0.getEncodedValues();
      // Undeclared exception!
      try { 
        oSMMaxSpeedParser0.createEncodedValues(encodingManager0, list0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OSMMaxSpeedParser oSMMaxSpeedParser0 = new OSMMaxSpeedParser();
      PMap pMap0 = new PMap("iAV]ow?P-s CFI'nz");
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(pMap0);
      // Undeclared exception!
      try { 
        oSMMaxSpeedParser0.createEncodedValues(wheelchairFlagEncoder0, (List<EncodedValue>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMMaxSpeedParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OSMMaxSpeedParser oSMMaxSpeedParser0 = null;
      try {
        oSMMaxSpeedParser0 = new OSMMaxSpeedParser((DecimalEncodedValue) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMMaxSpeedParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UnsignedDecimalEncodedValue unsignedDecimalEncodedValue0 = new UnsignedDecimalEncodedValue("spatial_rule_set", 1, 1, 1, true);
      OSMMaxSpeedParser oSMMaxSpeedParser0 = new OSMMaxSpeedParser(unsignedDecimalEncodedValue0);
      IntsRef intsRef0 = IntsRef.EMPTY;
      ReaderWay readerWay0 = new ReaderWay((-1230L));
      // Undeclared exception!
      try { 
        oSMMaxSpeedParser0.handleWayTags(intsRef0, readerWay0, false, intsRef0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Call init before usage for EncodedValue spatial_rule_set|version=-1113423245|bits=1|index=0|shift=-1|store_both_directions=true
         //
         verifyException("com.graphhopper.routing.ev.UnsignedDecimalEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Stack<BikeFlagEncoder> stack0 = new Stack<BikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      ReaderWay readerWay0 = new ReaderWay((-896L));
      EncodingManager.AcceptWay encodingManager_AcceptWay0 = new EncodingManager.AcceptWay();
      IntsRef intsRef0 = encodingManager0.createEdgeFlags();
      IntsRef intsRef1 = encodingManager0.handleWayTags(readerWay0, encodingManager_AcceptWay0, intsRef0);
      assertNotSame(intsRef0, intsRef1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UnsignedDecimalEncodedValue unsignedDecimalEncodedValue0 = new UnsignedDecimalEncodedValue("sat_l_rulelset", 15, 15, 15, false);
      OSMMaxSpeedParser oSMMaxSpeedParser0 = null;
      try {
        oSMMaxSpeedParser0 = new OSMMaxSpeedParser(unsignedDecimalEncodedValue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodedValue for maxSpeed must be able to store two directions
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMMaxSpeedParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OSMMaxSpeedParser oSMMaxSpeedParser0 = new OSMMaxSpeedParser();
      BikeFlagEncoder bikeFlagEncoder0 = new BikeFlagEncoder(1, 0.0, (-1970));
      Stack<EncodedValue> stack0 = new Stack<EncodedValue>();
      oSMMaxSpeedParser0.createEncodedValues(bikeFlagEncoder0, stack0);
      assertEquals("[max_speed|version=-999902595|bits=5|index=0|shift=-1|store_both_directions=true]", stack0.toString());
  }
}
