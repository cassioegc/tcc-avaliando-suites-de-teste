/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Apr 04 03:59:27 GMT 2021
 */

package com.graphhopper.routing.util.spatialrules;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class SpatialRuleLookupHelper_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.graphhopper.routing.util.spatialrules.SpatialRuleLookupHelper"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/cassioegc/tcc/graphhopper.reader-osm/core"); 
    java.lang.System.setProperty("user.home", "/home/cassioegc"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "cassioegc"); 
    java.lang.System.setProperty("user.timezone", ""); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SpatialRuleLookupHelper_ESTest_scaffolding.class.getClassLoader() ,
      "com.graphhopper.GHResponse",
      "com.graphhopper.routing.ev.EncodedValueFactory",
      "com.graphhopper.GraphHopperConfig",
      "com.graphhopper.routing.ev.Country",
      "org.locationtech.jts.geom.Coordinate",
      "com.graphhopper.routing.subnetwork.PrepareRoutingSubnetworks$PrepareJob",
      "com.graphhopper.storage.Directory",
      "com.graphhopper.routing.Router",
      "com.graphhopper.routing.util.EncodingManager",
      "com.graphhopper.storage.GraphHopperStorage",
      "com.graphhopper.storage.Storable",
      "com.graphhopper.routing.ch.CHPreparationHandler",
      "com.graphhopper.config.Profile",
      "com.graphhopper.reader.dem.ElevationProvider",
      "com.graphhopper.storage.Graph",
      "com.graphhopper.GraphHopper",
      "com.graphhopper.GraphHopperAPI",
      "com.graphhopper.routing.util.spatialrules.SpatialRuleLookupHelper",
      "com.graphhopper.storage.index.LocationIndex",
      "com.graphhopper.storage.LockFactory",
      "com.graphhopper.util.details.PathDetailsBuilderFactory",
      "com.graphhopper.routing.util.spatialrules.SpatialRule",
      "com.graphhopper.routing.RouterConfig",
      "com.graphhopper.util.PMap",
      "com.graphhopper.routing.WeightingFactory",
      "com.graphhopper.util.JsonFeatureCollection",
      "com.graphhopper.routing.util.FlagEncoderFactory",
      "com.graphhopper.storage.GraphStorage",
      "com.graphhopper.GHRequest",
      "com.graphhopper.routing.ev.EncodedValueLookup",
      "com.graphhopper.util.TranslationMap",
      "com.graphhopper.routing.util.EncodingManager$Access",
      "com.graphhopper.routing.util.parsers.TagParserFactory",
      "com.graphhopper.routing.weighting.TurnCostProvider",
      "com.graphhopper.routing.lm.LMPreparationHandler",
      "com.graphhopper.routing.weighting.Weighting",
      "com.graphhopper.routing.util.EncodingManager$Builder",
      "com.graphhopper.routing.util.EncodingManager$AcceptWay",
      "com.graphhopper.routing.util.spatialrules.SpatialRuleFactory",
      "org.locationtech.jts.geom.Envelope"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.graphhopper.GraphHopper", false, SpatialRuleLookupHelper_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.locationtech.jts.geom.Envelope", false, SpatialRuleLookupHelper_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SpatialRuleLookupHelper_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.graphhopper.routing.util.spatialrules.SpatialRuleLookupHelper",
      "com.graphhopper.routing.util.spatialrules.SpatialRuleLookupHelper$1",
      "com.graphhopper.routing.ev.Country",
      "org.locationtech.jts.geom.GeometryFactory",
      "org.locationtech.jts.geom.PrecisionModel$Type",
      "org.locationtech.jts.geom.PrecisionModel",
      "org.locationtech.jts.geom.impl.CoordinateArraySequenceFactory",
      "com.graphhopper.routing.util.spatialrules.SpatialRuleLookupBuilder",
      "com.graphhopper.routing.util.spatialrules.SpatialRuleLookup$1",
      "com.graphhopper.routing.util.spatialrules.SpatialRuleLookup",
      "com.graphhopper.GraphHopper",
      "org.locationtech.jts.geom.Envelope"
    );
  }
}
