/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Apr 04 02:38:14 GMT 2021
 */

package com.graphhopper.routing;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class AbstractBidirectionEdgeCHNoSOD_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.graphhopper.routing.AbstractBidirectionEdgeCHNoSOD"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    /*No java.lang.System property to set*/
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractBidirectionEdgeCHNoSOD_ESTest_scaffolding.class.getClassLoader() ,
      "com.carrotsearch.hppc.IntObjectMap",
      "com.graphhopper.routing.AbstractBidirAlgo",
      "com.graphhopper.routing.AbstractBidirCHAlgo",
      "com.graphhopper.routing.AbstractBidirectionEdgeCHNoSOD",
      "com.graphhopper.storage.CHEdgeFilter",
      "com.graphhopper.routing.RoutingAlgorithm",
      "com.graphhopper.storage.RoutingCHEdgeIteratorState",
      "com.graphhopper.routing.ch.CHEntry",
      "com.carrotsearch.hppc.IntObjectAssociativeContainer",
      "com.graphhopper.routing.BidirPathExtractor",
      "com.graphhopper.routing.SPTEntry",
      "com.graphhopper.routing.BidirRoutingAlgorithm"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractBidirectionEdgeCHNoSOD_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.graphhopper.routing.AbstractBidirAlgo",
      "com.graphhopper.routing.AbstractBidirCHAlgo",
      "com.graphhopper.routing.AbstractBidirectionEdgeCHNoSOD",
      "com.graphhopper.routing.util.TraversalMode",
      "com.graphhopper.storage.CHEdgeFilter",
      "com.graphhopper.storage.GHDirectory",
      "com.graphhopper.storage.MMapDirectory",
      "com.graphhopper.storage.DAType",
      "com.graphhopper.util.Helper",
      "com.graphhopper.routing.util.DefaultFlagEncoderFactory",
      "com.graphhopper.routing.util.EncodingManager",
      "com.graphhopper.routing.util.EncodingManager$Builder",
      "com.graphhopper.routing.ev.EncodedValue$InitializerConfig",
      "com.graphhopper.routing.util.parsers.OSMRoundaboutParser",
      "com.graphhopper.routing.ev.Roundabout",
      "com.graphhopper.routing.ev.UnsignedIntEncodedValue",
      "com.graphhopper.routing.ev.SimpleBooleanEncodedValue",
      "com.graphhopper.routing.util.parsers.OSMRoadClassParser",
      "com.graphhopper.routing.ev.EnumEncodedValue",
      "com.graphhopper.routing.ev.RoadClass",
      "com.graphhopper.routing.util.parsers.OSMRoadClassLinkParser",
      "com.graphhopper.routing.util.parsers.OSMRoadEnvironmentParser",
      "com.graphhopper.routing.ev.RoadEnvironment",
      "com.graphhopper.routing.util.parsers.OSMMaxSpeedParser",
      "com.graphhopper.routing.ev.MaxSpeed",
      "com.graphhopper.routing.ev.UnsignedDecimalEncodedValue",
      "com.graphhopper.routing.util.parsers.OSMRoadAccessParser",
      "com.graphhopper.routing.ev.RoadAccess",
      "com.graphhopper.routing.util.TransportationMode",
      "com.graphhopper.routing.util.parsers.OSMRoadAccessParser$1",
      "com.graphhopper.reader.osm.conditional.DateRangeParser",
      "com.graphhopper.storage.GraphHopperStorage",
      "com.graphhopper.storage.StorableProperties",
      "com.graphhopper.routing.AStarBidirectionEdgeCHNoSOD",
      "com.graphhopper.util.PMap",
      "com.graphhopper.routing.DijkstraBidirectionEdgeCHNoSOD",
      "com.graphhopper.routing.AlternativeRouteEdgeCH",
      "com.graphhopper.storage.RAMDirectory",
      "com.graphhopper.storage.AbstractDataAccess",
      "com.graphhopper.storage.RAMDataAccess",
      "com.graphhopper.util.BitUtilLittle",
      "com.graphhopper.util.BitUtilBig",
      "com.graphhopper.util.BitUtil",
      "com.graphhopper.storage.GraphHopperStorage$1",
      "com.graphhopper.storage.BaseGraph",
      "com.graphhopper.search.StringIndex",
      "com.graphhopper.search.StringIndex$1",
      "com.graphhopper.storage.RAMIntDataAccess",
      "com.graphhopper.util.shapes.BBox",
      "com.graphhopper.storage.GHNodeAccess",
      "com.graphhopper.routing.util.AbstractFlagEncoder",
      "com.graphhopper.routing.util.BikeCommonFlagEncoder",
      "com.graphhopper.routing.util.RacingBikeFlagEncoder",
      "com.graphhopper.routing.ev.RouteNetwork",
      "com.graphhopper.routing.util.PriorityCode",
      "com.graphhopper.routing.util.CarFlagEncoder",
      "com.graphhopper.routing.util.MotorcycleFlagEncoder",
      "com.graphhopper.routing.util.FootFlagEncoder",
      "com.graphhopper.routing.util.WheelchairFlagEncoder",
      "com.graphhopper.routing.weighting.AbstractWeighting",
      "com.graphhopper.routing.weighting.FastestWeighting",
      "com.graphhopper.routing.weighting.TurnCostProvider$1",
      "com.graphhopper.routing.weighting.TurnCostProvider",
      "com.graphhopper.routing.ev.DefaultEncodedValueFactory",
      "com.graphhopper.storage.MMapDataAccess",
      "com.graphhopper.storage.TurnCostStorage",
      "com.graphhopper.routing.util.Car4WDFlagEncoder",
      "com.graphhopper.routing.util.BikeFlagEncoder",
      "com.graphhopper.routing.util.Bike2WeightFlagEncoder",
      "com.graphhopper.routing.weighting.AbstractAdjustedWeighting",
      "com.graphhopper.routing.weighting.AvoidEdgesWeighting",
      "com.graphhopper.routing.util.parsers.OSMFootNetworkTagParser",
      "com.graphhopper.routing.ev.FootNetwork",
      "com.graphhopper.routing.util.parsers.OSMBikeNetworkTagParser",
      "com.graphhopper.routing.ev.BikeNetwork",
      "com.graphhopper.routing.util.parsers.OSMGetOffBikeParser",
      "com.graphhopper.routing.ev.GetOffBike",
      "com.graphhopper.routing.util.FerrySpeedCalculator",
      "com.graphhopper.reader.osm.conditional.ConditionalOSMTagInspector",
      "com.graphhopper.reader.osm.conditional.ConditionalParser",
      "com.graphhopper.storage.RoutingCHGraphImpl",
      "com.graphhopper.routing.util.MountainBikeFlagEncoder",
      "com.graphhopper.routing.util.HikeFlagEncoder",
      "com.graphhopper.storage.CHConfig",
      "com.graphhopper.config.Profile",
      "com.graphhopper.routing.util.EdgeFilter",
      "com.graphhopper.storage.BaseGraph$EdgeIteratorStateImpl",
      "com.graphhopper.storage.BaseGraph$EdgeIteratorImpl",
      "com.graphhopper.storage.IntsRef",
      "org.locationtech.jts.geom.GeometryFactory",
      "org.locationtech.jts.geom.PrecisionModel$Type",
      "org.locationtech.jts.geom.PrecisionModel",
      "org.locationtech.jts.geom.impl.CoordinateArraySequenceFactory",
      "com.graphhopper.util.PointList$1",
      "com.graphhopper.util.PointList",
      "com.graphhopper.util.Instruction",
      "com.graphhopper.routing.weighting.PriorityWeighting",
      "com.graphhopper.util.ShallowImmutablePointList",
      "com.graphhopper.routing.weighting.ShortFastestWeighting",
      "com.graphhopper.routing.weighting.ShortestWeighting",
      "com.graphhopper.util.GHUtility",
      "com.graphhopper.reader.ReaderElement",
      "com.graphhopper.reader.ReaderNode",
      "com.graphhopper.routing.weighting.CurvatureWeighting",
      "com.graphhopper.routing.weighting.QueryGraphWeighting",
      "com.graphhopper.reader.ReaderWay",
      "com.carrotsearch.hppc.AbstractLongCollection",
      "com.carrotsearch.hppc.LongArrayList",
      "com.carrotsearch.hppc.BoundedProportionalArraySizingStrategy",
      "com.graphhopper.util.GHUtility$DisabledEdgeIterator",
      "com.graphhopper.util.GHUtility$DisabledNodeAccess",
      "com.graphhopper.storage.ExtendedNodeAccess",
      "com.graphhopper.routing.SPTEntry",
      "com.graphhopper.routing.ch.CHEntry",
      "com.graphhopper.routing.util.EncodingManager$AcceptWay",
      "com.graphhopper.util.DistanceCalcEarth",
      "com.graphhopper.util.DistancePlaneProjection",
      "com.graphhopper.storage.CHGraphImpl",
      "com.graphhopper.routing.ch.PrepareEncoder",
      "com.graphhopper.storage.BaseGraph$AllEdgeIterator",
      "org.locationtech.jts.geom.impl.PackedCoordinateSequence",
      "org.locationtech.jts.geom.impl.PackedCoordinateSequence$Double",
      "org.locationtech.jts.geom.Geometry$1",
      "org.locationtech.jts.geom.Geometry",
      "org.locationtech.jts.geom.LineString",
      "org.locationtech.jts.geom.LinearRing",
      "org.locationtech.jts.geom.impl.CoordinateArraySequence",
      "org.locationtech.jts.geom.Coordinate",
      "com.graphhopper.routing.weighting.DefaultTurnCostProvider",
      "com.graphhopper.storage.GraphEdgeIdFinder$BlockArea",
      "com.carrotsearch.hppc.AbstractIntCollection",
      "com.carrotsearch.hppc.IntArrayList",
      "com.carrotsearch.hppc.IntStack",
      "com.carrotsearch.hppc.IntFloatHashMap",
      "com.carrotsearch.hppc.IntFloatScatterMap",
      "com.carrotsearch.hppc.HashOrderMixing$1",
      "com.carrotsearch.hppc.HashOrderMixing",
      "com.carrotsearch.hppc.HashOrderMixing$3",
      "com.carrotsearch.hppc.HashContainers",
      "com.carrotsearch.hppc.BitUtil",
      "com.carrotsearch.hppc.IntFloatHashMap$KeysContainer",
      "com.carrotsearch.hppc.IntArrayDeque",
      "com.carrotsearch.hppc.AbstractIterator",
      "com.carrotsearch.hppc.IntFloatHashMap$KeysIterator",
      "com.carrotsearch.hppc.cursors.IntCursor",
      "com.carrotsearch.hppc.IntArrayDeque$ValueIterator",
      "com.graphhopper.routing.ev.StringEncodedValue",
      "com.graphhopper.util.shapes.GHPoint",
      "com.graphhopper.routing.weighting.BlockAreaWeighting",
      "org.locationtech.jts.geom.impl.PackedCoordinateSequence$Float",
      "com.graphhopper.reader.OSMTurnRelation",
      "com.graphhopper.reader.osm.OSMReader",
      "com.graphhopper.util.DouglasPeucker",
      "com.carrotsearch.hppc.LongHashSet",
      "com.graphhopper.coll.GHLongHashSet",
      "com.carrotsearch.hppc.IntObjectHashMap",
      "com.carrotsearch.hppc.HashOrderMixing$2",
      "com.graphhopper.coll.GHIntObjectHashMap",
      "com.carrotsearch.hppc.BitMixer",
      "com.graphhopper.reader.dem.ElevationProvider$1",
      "com.graphhopper.reader.dem.ElevationProvider",
      "com.graphhopper.coll.GHLongIntBTree",
      "com.graphhopper.coll.GHLongIntBTree$BTreeEntry",
      "com.carrotsearch.hppc.LongLongHashMap",
      "com.graphhopper.coll.GHLongLongHashMap",
      "com.graphhopper.reader.PillarInfo",
      "com.graphhopper.reader.dem.AbstractElevationProvider",
      "com.graphhopper.reader.dem.AbstractTiffElevationProvider",
      "com.graphhopper.reader.dem.GMTEDProvider",
      "com.graphhopper.util.Downloader",
      "com.graphhopper.util.InstructionList",
      "com.graphhopper.util.TranslationMap$TranslationHashMap",
      "com.carrotsearch.hppc.IntArrayList$ValueIterator",
      "com.carrotsearch.hppc.IntHashSet",
      "com.graphhopper.coll.GHIntHashSet",
      "org.locationtech.jts.geom.DefaultCoordinateSequenceFactory",
      "org.locationtech.jts.geom.DefaultCoordinateSequence",
      "org.locationtech.jts.geom.Polygon",
      "com.graphhopper.reader.ReaderRelation",
      "com.carrotsearch.hppc.IntScatterSet",
      "com.carrotsearch.hppc.IntHashSet$EntryIterator",
      "com.graphhopper.routing.util.DefaultEdgeFilter",
      "com.carrotsearch.hppc.IntByteHashMap",
      "com.carrotsearch.hppc.IntByteScatterMap",
      "com.carrotsearch.hppc.BufferAllocationException",
      "com.graphhopper.reader.dem.AbstractSRTMElevationProvider",
      "com.graphhopper.reader.dem.SRTMGL1Provider",
      "com.graphhopper.reader.dem.MultiSourceElevationProvider",
      "com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor"
    );
  }
}
