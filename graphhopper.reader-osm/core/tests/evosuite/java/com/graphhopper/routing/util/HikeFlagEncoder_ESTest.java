/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:49:12 GMT 2021
 */

package com.graphhopper.routing.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.util.AllEdgesIterator;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.HikeFlagEncoder;
import com.graphhopper.routing.weighting.PriorityWeighting;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.MMapDirectory;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.GHUtility;
import com.graphhopper.util.PMap;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HikeFlagEncoder_ESTest extends HikeFlagEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(0L);
      readerWay0.setTag("highway", hikeFlagEncoder0);
      // Undeclared exception!
      try { 
        hikeFlagEncoder0.collect(readerWay0, (TreeMap<Double, Integer>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.graphhopper.routing.util.HikeFlagEncoder cannot be cast to java.lang.String
         //
         verifyException("com.graphhopper.reader.ReaderElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(0L);
      GHUtility.DisabledEdgeIterator gHUtility_DisabledEdgeIterator0 = new GHUtility.DisabledEdgeIterator();
      // Undeclared exception!
      try { 
        hikeFlagEncoder0.applyWayTags(readerWay0, gHUtility_DisabledEdgeIterator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Edge is empty.
         //
         verifyException("com.graphhopper.util.GHUtility$DisabledEdgeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(3);
      // Undeclared exception!
      try { 
        hikeFlagEncoder0.applyWayTags(readerWay0, (EdgeIteratorState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.HikeFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder(4000, (-1070.2846));
      ReaderWay readerWay0 = new ReaderWay(955L);
      MMapDirectory mMapDirectory0 = new MMapDirectory("o&V:G$wcg");
      ArrayList<FlagEncoder> arrayList0 = new ArrayList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false);
      AllEdgesIterator allEdgesIterator0 = graphHopperStorage0.getAllEdges();
      // Undeclared exception!
      try { 
        hikeFlagEncoder0.applyWayTags(readerWay0, allEdgesIterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PMap pMap0 = new PMap("bridge");
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder(pMap0);
      // Undeclared exception!
      try { 
        hikeFlagEncoder0.supports((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder(109, 0.0);
      TreeMap<Double, Integer> treeMap0 = new TreeMap<Double, Integer>();
      // Undeclared exception!
      try { 
        hikeFlagEncoder0.collect((ReaderWay) null, treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.HikeFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      Class<PriorityWeighting> class0 = PriorityWeighting.class;
      boolean boolean0 = hikeFlagEncoder0.supports(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      Class<Object> class0 = Object.class;
      boolean boolean0 = hikeFlagEncoder0.supports(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(0L);
      TreeMap<Double, Integer> treeMap0 = new TreeMap<Double, Integer>();
      hikeFlagEncoder0.collect(readerWay0, treeMap0);
      assertEquals(0, treeMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      String string0 = hikeFlagEncoder0.toString();
      assertEquals("hike", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = null;
      try {
        hikeFlagEncoder0 = new HikeFlagEncoder((PMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.HikeFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      int int0 = hikeFlagEncoder0.getVersion();
      assertEquals(3, int0);
  }
}
