/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:26:53 GMT 2021
 */

package com.graphhopper.routing.weighting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.weighting.BalancedWeightApproximator;
import com.graphhopper.routing.weighting.WeightApproximator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BalancedWeightApproximator_ESTest extends BalancedWeightApproximator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightApproximator0).approximate(anyInt());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(1528.41731099303).when(weightApproximator1).approximate(anyInt());
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator1);
      balancedWeightApproximator0.fromOffset = 0.0;
      balancedWeightApproximator0.fromOffset = 2665.814808779;
      double double0 = balancedWeightApproximator0.approximate(0, false);
      assertEquals(764.208655496515, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightApproximator0).approximate(anyInt());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((-349.658331)).when(weightApproximator1).approximate(anyInt());
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator1);
      balancedWeightApproximator0.toOffset = (double) 0;
      balancedWeightApproximator0.toOffset = (double) 3648;
      double double0 = balancedWeightApproximator0.approximate(3648, true);
      assertEquals(174.8291655, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(1362.44).when(weightApproximator0).approximate(anyInt());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(1362.44).when(weightApproximator1).approximate(anyInt());
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator1);
      double double0 = balancedWeightApproximator0.approximate(172, true);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(1362.44).when(weightApproximator0).approximate(anyInt());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(1362.44).when(weightApproximator1).approximate(anyInt());
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator1);
      balancedWeightApproximator0.setFromTo(0, 0);
      assertEquals(0.0, balancedWeightApproximator0.getSlack(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((-834.92), 1362.44).when(weightApproximator1).getSlack();
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator1);
      double double0 = balancedWeightApproximator0.getSlack();
      double double1 = balancedWeightApproximator0.getSlack();
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(weightApproximator0).approximate(anyInt());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((-349.658331), 0.0).when(weightApproximator1).approximate(anyInt());
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator1);
      double double0 = balancedWeightApproximator0.approximate(0, false);
      assertEquals((-174.8291655), double0, 0.01);
      
      double double1 = balancedWeightApproximator0.approximate(3648, true);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator0);
      // Undeclared exception!
      try { 
        balancedWeightApproximator0.setFromTo(1770, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.BalancedWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightApproximator0).approximate(anyInt());
      doReturn((WeightApproximator) null).when(weightApproximator0).reverse();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator0);
      // Undeclared exception!
      try { 
        balancedWeightApproximator0.approximate(6738, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.weighting.BalancedWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BalancedWeightApproximator balancedWeightApproximator0 = null;
      try {
        balancedWeightApproximator0 = new BalancedWeightApproximator((WeightApproximator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // WeightApproximator cannot be null
         //
         verifyException("com.graphhopper.routing.weighting.BalancedWeightApproximator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightApproximator0).approximate(anyInt());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn((-349.658331)).when(weightApproximator1).approximate(anyInt());
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator1);
      balancedWeightApproximator0.setFromTo((-1225), (-1404));
      assertEquals(0.0, balancedWeightApproximator0.getSlack(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator1);
      String string0 = balancedWeightApproximator0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(weightApproximator0).when(weightApproximator1).reverse();
      doReturn("MKU|D!FbcdqQ").when(weightApproximator1).toString();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator1);
      WeightApproximator weightApproximator2 = balancedWeightApproximator0.getApproximation();
      assertSame(weightApproximator2, weightApproximator1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WeightApproximator weightApproximator0 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      WeightApproximator weightApproximator1 = mock(WeightApproximator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(weightApproximator1).getSlack();
      doReturn((WeightApproximator) null).when(weightApproximator1).reverse();
      BalancedWeightApproximator balancedWeightApproximator0 = new BalancedWeightApproximator(weightApproximator1);
      double double0 = balancedWeightApproximator0.getSlack();
      assertEquals(0.0, double0, 0.01);
  }
}
