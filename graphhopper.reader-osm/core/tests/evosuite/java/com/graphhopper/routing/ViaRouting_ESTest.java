/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 01:45:08 GMT 2021
 */

package com.graphhopper.routing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.AlgorithmOptions;
import com.graphhopper.routing.FlexiblePathCalculator;
import com.graphhopper.routing.PathCalculator;
import com.graphhopper.routing.RoutingAlgorithmFactorySimple;
import com.graphhopper.routing.ViaRouting;
import com.graphhopper.routing.querygraph.QueryGraph;
import com.graphhopper.routing.util.Bike2WeightFlagEncoder;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.HikeFlagEncoder;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.index.LocationIndex;
import com.graphhopper.storage.index.Snap;
import com.graphhopper.util.shapes.BBox;
import com.graphhopper.util.shapes.GHPoint;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ViaRouting_ESTest extends ViaRouting_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<GHPoint> arrayList0 = new ArrayList<GHPoint>();
      Stack<Snap> stack0 = new Stack<Snap>();
      RoutingAlgorithmFactorySimple routingAlgorithmFactorySimple0 = new RoutingAlgorithmFactorySimple();
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("~<&<-Tms}/[82,!y", (Weighting) null);
      FlexiblePathCalculator flexiblePathCalculator0 = new FlexiblePathCalculator((QueryGraph) null, routingAlgorithmFactorySimple0, algorithmOptions0);
      Vector<String> vector0 = new Vector<String>();
      GHPoint gHPoint0 = new GHPoint(1153.847, 1.0);
      arrayList0.add(gHPoint0);
      vector0.add("baseUrl cannot be empty");
      ArrayList<Double> arrayList1 = new ArrayList<Double>();
      arrayList0.add(gHPoint0);
      // Undeclared exception!
      try { 
        ViaRouting.calcPaths(arrayList0, (QueryGraph) null, stack0, (Weighting) null, flexiblePathCalculator0, vector0, true, arrayList1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // If you pass curbside, you need to pass exactly one curbside for every point, empty curbsides will be ignored
         //
         verifyException("com.graphhopper.routing.ViaRouting", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      ArrayList<GHPoint> arrayList0 = new ArrayList<GHPoint>();
      GHPoint gHPoint0 = new GHPoint(1231.1186504401894, 1231.1186504401894);
      arrayList0.add(gHPoint0);
      arrayList0.add(gHPoint0);
      ArrayList<Bike2WeightFlagEncoder> arrayList1 = new ArrayList<Bike2WeightFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList1);
      hikeFlagEncoder0.setEncodedValueLookup(encodingManager0);
      Stack<String> stack0 = new Stack<String>();
      Stack<String> stack1 = new Stack<String>();
      // Undeclared exception!
      try { 
        ViaRouting.lookup(hikeFlagEncoder0, arrayList0, (Weighting) null, (LocationIndex) null, stack0, stack1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ViaRouting", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      ArrayList<GHPoint> arrayList0 = new ArrayList<GHPoint>();
      arrayList0.add((GHPoint) null);
      GHPoint gHPoint0 = new GHPoint(1231.1186504401894, 1231.1186504401894);
      arrayList0.add(gHPoint0);
      arrayList0.add(gHPoint0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        ViaRouting.lookup(hikeFlagEncoder0, arrayList0, (Weighting) null, (LocationIndex) null, list0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.AbstractFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ViaRouting.Result viaRouting_Result0 = new ViaRouting.Result(181);
      assertEquals(0L, viaRouting_Result0.visitedNodes);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<GHPoint> arrayList0 = new ArrayList<GHPoint>();
      Vector<Snap> vector0 = new Vector<Snap>();
      RoutingAlgorithmFactorySimple routingAlgorithmFactorySimple0 = new RoutingAlgorithmFactorySimple();
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("~<&<-Tms}/[82,!y", (Weighting) null);
      FlexiblePathCalculator flexiblePathCalculator0 = new FlexiblePathCalculator((QueryGraph) null, routingAlgorithmFactorySimple0, algorithmOptions0);
      Snap snap0 = new Snap((-0.7682870315523278), (-0.7682870315523278));
      vector0.add(snap0);
      vector0.add(snap0);
      Vector<String> vector1 = new Vector<String>();
      ArrayList<Double> arrayList1 = new ArrayList<Double>();
      // Undeclared exception!
      try { 
        ViaRouting.calcPaths(arrayList0, (QueryGraph) null, vector0, (Weighting) null, flexiblePathCalculator0, vector1, true, arrayList1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Option 'weighting' must NOT be null
         //
         verifyException("com.graphhopper.routing.AlgorithmOptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<Snap> vector0 = new Vector<Snap>();
      Snap snap0 = new Snap(0.0, 0.0);
      vector0.add(snap0);
      vector0.add(snap0);
      vector0.add(snap0);
      Vector<String> vector1 = new Vector<String>();
      BBox bBox0 = new BBox((-1), (-1), 0.0, 0.0);
      List<Double> list0 = bBox0.toGeoJson();
      vector0.add(snap0);
      Stack<GHPoint> stack0 = new Stack<GHPoint>();
      // Undeclared exception!
      try { 
        ViaRouting.calcPaths(stack0, (QueryGraph) null, vector0, (Weighting) null, (PathCalculator) null, vector1, true, list0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.HeadingResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<GHPoint> arrayList0 = new ArrayList<GHPoint>();
      Vector<Snap> vector0 = new Vector<Snap>();
      RoutingAlgorithmFactorySimple routingAlgorithmFactorySimple0 = new RoutingAlgorithmFactorySimple();
      Snap snap0 = new Snap(14.573911, 14.573911);
      vector0.add(snap0);
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("~<&<-Tms}/[82,!y", (Weighting) null);
      FlexiblePathCalculator flexiblePathCalculator0 = new FlexiblePathCalculator((QueryGraph) null, routingAlgorithmFactorySimple0, algorithmOptions0);
      Stack<String> stack0 = new Stack<String>();
      ArrayList<Double> arrayList1 = new ArrayList<Double>();
      ViaRouting.Result viaRouting_Result0 = ViaRouting.calcPaths(arrayList0, (QueryGraph) null, vector0, (Weighting) null, flexiblePathCalculator0, stack0, true, arrayList1, true);
      assertEquals(0L, viaRouting_Result0.visitedNodes);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<GHPoint> arrayList0 = new ArrayList<GHPoint>();
      Vector<Snap> vector0 = new Vector<Snap>();
      RoutingAlgorithmFactorySimple routingAlgorithmFactorySimple0 = new RoutingAlgorithmFactorySimple();
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("~<&<-Tms}/[82,!y", (Weighting) null);
      FlexiblePathCalculator flexiblePathCalculator0 = new FlexiblePathCalculator((QueryGraph) null, routingAlgorithmFactorySimple0, algorithmOptions0);
      Vector<String> vector1 = new Vector<String>();
      vector1.add("baseUrl cannot be empt");
      ArrayList<Double> arrayList1 = new ArrayList<Double>();
      GHPoint gHPoint0 = new GHPoint((-54.43156), 2461.0);
      arrayList0.add(gHPoint0);
      arrayList1.add((Double) gHPoint0.lon);
      // Undeclared exception!
      try { 
        ViaRouting.calcPaths(arrayList0, (QueryGraph) null, vector0, (Weighting) null, flexiblePathCalculator0, vector1, false, arrayList1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // You cannot use curbsides and headings or pass_through at the same time
         //
         verifyException("com.graphhopper.routing.ViaRouting", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<GHPoint> arrayList0 = new ArrayList<GHPoint>();
      Vector<Snap> vector0 = new Vector<Snap>();
      RoutingAlgorithmFactorySimple routingAlgorithmFactorySimple0 = new RoutingAlgorithmFactorySimple();
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("~<&<-Tms}/[82,!y", (Weighting) null);
      FlexiblePathCalculator flexiblePathCalculator0 = new FlexiblePathCalculator((QueryGraph) null, routingAlgorithmFactorySimple0, algorithmOptions0);
      Vector<String> vector1 = new Vector<String>();
      vector1.add("baseUrl cannot be empty");
      ArrayList<Double> arrayList1 = new ArrayList<Double>();
      GHPoint gHPoint0 = new GHPoint((-3311.26887155), 2461.0);
      arrayList0.add(gHPoint0);
      // Undeclared exception!
      try { 
        ViaRouting.calcPaths(arrayList0, (QueryGraph) null, vector0, (Weighting) null, flexiblePathCalculator0, vector1, true, arrayList1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<GHPoint> arrayList0 = new ArrayList<GHPoint>();
      Vector<Snap> vector0 = new Vector<Snap>();
      RoutingAlgorithmFactorySimple routingAlgorithmFactorySimple0 = new RoutingAlgorithmFactorySimple();
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("~<&<-Tms}/[82,!y", (Weighting) null);
      FlexiblePathCalculator flexiblePathCalculator0 = new FlexiblePathCalculator((QueryGraph) null, routingAlgorithmFactorySimple0, algorithmOptions0);
      Vector<String> vector1 = new Vector<String>();
      vector1.add("baseUrl cannot be empty");
      ArrayList<Double> arrayList1 = new ArrayList<Double>();
      // Undeclared exception!
      try { 
        ViaRouting.calcPaths(arrayList0, (QueryGraph) null, vector0, (Weighting) null, flexiblePathCalculator0, vector1, true, arrayList1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // If you pass curbside, you need to pass exactly one curbside for every point, empty curbsides will be ignored
         //
         verifyException("com.graphhopper.routing.ViaRouting", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      ArrayList<GHPoint> arrayList0 = new ArrayList<GHPoint>();
      GHPoint gHPoint0 = new GHPoint(1231.1186504401894, 1231.1186504401894);
      arrayList0.add(gHPoint0);
      arrayList0.add(gHPoint0);
      ArrayList<Bike2WeightFlagEncoder> arrayList1 = new ArrayList<Bike2WeightFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList1);
      hikeFlagEncoder0.setEncodedValueLookup(encodingManager0);
      Stack<String> stack0 = new Stack<String>();
      stack0.add("");
      // Undeclared exception!
      try { 
        ViaRouting.lookup(hikeFlagEncoder0, arrayList0, (Weighting) null, (LocationIndex) null, stack0, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot find snap_prevention: 
         //
         verifyException("com.graphhopper.routing.util.SnapPreventionEdgeFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<GHPoint> arrayList0 = new ArrayList<GHPoint>();
      Stack<String> stack0 = new Stack<String>();
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder();
      // Undeclared exception!
      try { 
        ViaRouting.lookup(bike2WeightFlagEncoder0, arrayList0, (Weighting) null, (LocationIndex) null, stack0, stack0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least 2 points have to be specified, but was:0
         //
         verifyException("com.graphhopper.routing.ViaRouting", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ViaRouting viaRouting0 = new ViaRouting();
  }
}
