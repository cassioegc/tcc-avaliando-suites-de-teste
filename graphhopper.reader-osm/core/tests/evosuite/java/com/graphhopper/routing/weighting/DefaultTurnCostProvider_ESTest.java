/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:54:44 GMT 2021
 */

package com.graphhopper.routing.weighting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.ev.DecimalEncodedValue;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.weighting.DefaultTurnCostProvider;
import com.graphhopper.storage.TurnCostStorage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultTurnCostProvider_ESTest extends DefaultTurnCostProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecimalEncodedValue decimalEncodedValue0 = mock(DecimalEncodedValue.class, new ViolatedAssumptionAnswer());
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(decimalEncodedValue0).when(flagEncoder0).getDecimalEncodedValue(anyString());
      doReturn(true).when(flagEncoder0).hasEncodedValue(anyString());
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      doReturn((-159.64198083699), (-159.64198083699), (-159.64198083699), (-159.64198083699), 971.5801229462).when(turnCostStorage0).get(any(com.graphhopper.routing.ev.DecimalEncodedValue.class) , anyInt() , anyInt() , anyInt());
      DefaultTurnCostProvider defaultTurnCostProvider0 = new DefaultTurnCostProvider(flagEncoder0, turnCostStorage0);
      assertNotNull(defaultTurnCostProvider0);
      
      double double0 = defaultTurnCostProvider0.calcTurnWeight(0, 0, 81);
      assertEquals((-159.64198083699), double0, 0.01);
      
      double double1 = defaultTurnCostProvider0.calcTurnWeight(81, 1231, 0);
      assertEquals((-159.64198083699), double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = defaultTurnCostProvider0.calcTurnWeight(81, (-863), 0);
      assertEquals((-159.64198083699), double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      long long0 = defaultTurnCostProvider0.calcTurnMillis(0, 0, 140);
      assertEquals((-159641L), long0);
      
      long long1 = defaultTurnCostProvider0.calcTurnMillis(1, 0, 0);
      assertEquals(971580L, long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = null;
      try {
        defaultTurnCostProvider0 = new DefaultTurnCostProvider((FlagEncoder) null, turnCostStorage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DecimalEncodedValue decimalEncodedValue0 = mock(DecimalEncodedValue.class, new ViolatedAssumptionAnswer());
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(decimalEncodedValue0).when(flagEncoder0).getDecimalEncodedValue(anyString());
      doReturn(true).when(flagEncoder0).hasEncodedValue(anyString());
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = new DefaultTurnCostProvider(flagEncoder0, turnCostStorage0);
      assertNotNull(defaultTurnCostProvider0);
      
      double double0 = defaultTurnCostProvider0.calcTurnWeight(1618, (-1152), (-1152));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(flagEncoder0).hasEncodedValue(anyString());
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = new DefaultTurnCostProvider(flagEncoder0, turnCostStorage0, 0);
      assertNotNull(defaultTurnCostProvider0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultTurnCostProvider defaultTurnCostProvider0 = null;
      try {
        defaultTurnCostProvider0 = new DefaultTurnCostProvider((FlagEncoder) null, (TurnCostStorage) null, 952);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No storage set to calculate turn weight
         //
         verifyException("com.graphhopper.routing.weighting.DefaultTurnCostProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = null;
      try {
        defaultTurnCostProvider0 = new DefaultTurnCostProvider((FlagEncoder) null, turnCostStorage0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn((DecimalEncodedValue) null).when(flagEncoder0).getDecimalEncodedValue(anyString());
      doReturn(true).when(flagEncoder0).hasEncodedValue(anyString());
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = new DefaultTurnCostProvider(flagEncoder0, turnCostStorage0);
      assertNotNull(defaultTurnCostProvider0);
      
      double double0 = defaultTurnCostProvider0.calcTurnWeight(0, 255, 1296);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DecimalEncodedValue decimalEncodedValue0 = mock(DecimalEncodedValue.class, new ViolatedAssumptionAnswer());
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(decimalEncodedValue0).when(flagEncoder0).getDecimalEncodedValue(anyString());
      doReturn(true).when(flagEncoder0).hasEncodedValue(anyString());
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = new DefaultTurnCostProvider(flagEncoder0, turnCostStorage0);
      assertNotNull(defaultTurnCostProvider0);
      
      double double0 = defaultTurnCostProvider0.calcTurnWeight(1618, 961, 1618);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DecimalEncodedValue decimalEncodedValue0 = mock(DecimalEncodedValue.class, new ViolatedAssumptionAnswer());
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(decimalEncodedValue0).when(flagEncoder0).getDecimalEncodedValue(anyString());
      doReturn(true).when(flagEncoder0).hasEncodedValue(anyString());
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = new DefaultTurnCostProvider(flagEncoder0, turnCostStorage0);
      long long0 = defaultTurnCostProvider0.calcTurnMillis(1618, 2972, (-1152));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DecimalEncodedValue decimalEncodedValue0 = mock(DecimalEncodedValue.class, new ViolatedAssumptionAnswer());
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(decimalEncodedValue0).when(flagEncoder0).getDecimalEncodedValue(anyString());
      doReturn(true).when(flagEncoder0).hasEncodedValue(anyString());
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = new DefaultTurnCostProvider(flagEncoder0, turnCostStorage0);
      long long0 = defaultTurnCostProvider0.calcTurnMillis((-1152), 1618, 1618);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = null;
      try {
        defaultTurnCostProvider0 = new DefaultTurnCostProvider(flagEncoder0, (TurnCostStorage) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No storage set to calculate turn weight
         //
         verifyException("com.graphhopper.routing.weighting.DefaultTurnCostProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = null;
      try {
        defaultTurnCostProvider0 = new DefaultTurnCostProvider(flagEncoder0, turnCostStorage0, (-1232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // u-turn costs must be positive, or equal to -1 (=infinite costs)
         //
         verifyException("com.graphhopper.routing.weighting.DefaultTurnCostProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn((DecimalEncodedValue) null).when(flagEncoder0).getDecimalEncodedValue(anyString());
      doReturn(true).when(flagEncoder0).hasEncodedValue(anyString());
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = new DefaultTurnCostProvider(flagEncoder0, turnCostStorage0, 1);
      double double0 = defaultTurnCostProvider0.calcTurnWeight((-853), 1, (-1080));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DecimalEncodedValue decimalEncodedValue0 = mock(DecimalEncodedValue.class, new ViolatedAssumptionAnswer());
      FlagEncoder flagEncoder0 = mock(FlagEncoder.class, new ViolatedAssumptionAnswer());
      doReturn(decimalEncodedValue0).when(flagEncoder0).getDecimalEncodedValue(anyString());
      doReturn(true).when(flagEncoder0).hasEncodedValue(anyString());
      TurnCostStorage turnCostStorage0 = mock(TurnCostStorage.class, new ViolatedAssumptionAnswer());
      DefaultTurnCostProvider defaultTurnCostProvider0 = new DefaultTurnCostProvider(flagEncoder0, turnCostStorage0);
      String string0 = defaultTurnCostProvider0.toString();
      assertEquals("default_tcp_-1", string0);
  }
}
