/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 04:07:57 GMT 2021
 */

package com.graphhopper.routing.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.util.MountainBikeFlagEncoder;
import com.graphhopper.routing.util.TransportationMode;
import com.graphhopper.util.PMap;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MountainBikeFlagEncoder_ESTest extends MountainBikeFlagEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PMap pMap0 = mock(PMap.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(pMap0).getBool(anyString() , anyBoolean());
      doReturn(0.0).when(pMap0).getDouble(anyString() , anyDouble());
      doReturn(0).when(pMap0).getInt(anyString() , anyInt());
      MountainBikeFlagEncoder mountainBikeFlagEncoder0 = new MountainBikeFlagEncoder(pMap0);
      assertEquals(2, mountainBikeFlagEncoder0.getVersion());
      assertFalse(mountainBikeFlagEncoder0.isBlockFords());
      assertFalse(mountainBikeFlagEncoder0.supportsTurnCosts());
      assertEquals(30.0, mountainBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertEquals("mtb", mountainBikeFlagEncoder0.toString());
      assertEquals(0, mountainBikeFlagEncoder0.getMaxTurnCosts());
      assertEquals(TransportationMode.BIKE, mountainBikeFlagEncoder0.getTransportationMode());
      assertFalse(mountainBikeFlagEncoder0.isRegistered());
      assertNotNull(mountainBikeFlagEncoder0);
      
      // Undeclared exception!
      try { 
        mountainBikeFlagEncoder0.collect((ReaderWay) null, (-2215.938), (TreeMap<Double, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.BikeCommonFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MountainBikeFlagEncoder mountainBikeFlagEncoder0 = null;
      try {
        mountainBikeFlagEncoder0 = new MountainBikeFlagEncoder((PMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.MountainBikeFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PMap pMap0 = mock(PMap.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(pMap0).getBool(anyString() , anyBoolean());
      doReturn(0.0).when(pMap0).getDouble(anyString() , anyDouble());
      doReturn(0).when(pMap0).getInt(anyString() , anyInt());
      MountainBikeFlagEncoder mountainBikeFlagEncoder0 = new MountainBikeFlagEncoder(pMap0);
      assertEquals(30.0, mountainBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertEquals(2, mountainBikeFlagEncoder0.getVersion());
      assertFalse(mountainBikeFlagEncoder0.isBlockFords());
      assertFalse(mountainBikeFlagEncoder0.supportsTurnCosts());
      assertEquals("mtb", mountainBikeFlagEncoder0.toString());
      assertEquals(0, mountainBikeFlagEncoder0.getMaxTurnCosts());
      assertEquals(TransportationMode.BIKE, mountainBikeFlagEncoder0.getTransportationMode());
      assertFalse(mountainBikeFlagEncoder0.isRegistered());
      assertNotNull(mountainBikeFlagEncoder0);
      
      boolean boolean0 = mountainBikeFlagEncoder0.isSacScaleAllowed("w5onkN<6e");
      assertEquals(30.0, mountainBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertEquals(2, mountainBikeFlagEncoder0.getVersion());
      assertFalse(mountainBikeFlagEncoder0.isBlockFords());
      assertFalse(mountainBikeFlagEncoder0.supportsTurnCosts());
      assertEquals("mtb", mountainBikeFlagEncoder0.toString());
      assertEquals(0, mountainBikeFlagEncoder0.getMaxTurnCosts());
      assertEquals(TransportationMode.BIKE, mountainBikeFlagEncoder0.getTransportationMode());
      assertFalse(mountainBikeFlagEncoder0.isRegistered());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MountainBikeFlagEncoder mountainBikeFlagEncoder0 = new MountainBikeFlagEncoder((-454), 0.0, (-2025));
      assertFalse(mountainBikeFlagEncoder0.isRegistered());
      assertEquals(TransportationMode.BIKE, mountainBikeFlagEncoder0.getTransportationMode());
      assertTrue(mountainBikeFlagEncoder0.isBlockFords());
      assertEquals("mtb", mountainBikeFlagEncoder0.toString());
      assertEquals(2, mountainBikeFlagEncoder0.getVersion());
      assertEquals(0, mountainBikeFlagEncoder0.getMaxTurnCosts());
      assertFalse(mountainBikeFlagEncoder0.supportsTurnCosts());
      assertEquals(30.0, mountainBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertNotNull(mountainBikeFlagEncoder0);
      
      boolean boolean0 = mountainBikeFlagEncoder0.isSacScaleAllowed("hiking");
      assertFalse(mountainBikeFlagEncoder0.isRegistered());
      assertEquals(TransportationMode.BIKE, mountainBikeFlagEncoder0.getTransportationMode());
      assertTrue(mountainBikeFlagEncoder0.isBlockFords());
      assertEquals("mtb", mountainBikeFlagEncoder0.toString());
      assertEquals(2, mountainBikeFlagEncoder0.getVersion());
      assertEquals(0, mountainBikeFlagEncoder0.getMaxTurnCosts());
      assertFalse(mountainBikeFlagEncoder0.supportsTurnCosts());
      assertEquals(30.0, mountainBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PMap pMap0 = mock(PMap.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true).when(pMap0).getBool(anyString() , anyBoolean());
      doReturn(0.0).when(pMap0).getDouble(anyString() , anyDouble());
      doReturn(16).when(pMap0).getInt(anyString() , anyInt());
      MountainBikeFlagEncoder mountainBikeFlagEncoder0 = new MountainBikeFlagEncoder(pMap0);
      assertTrue(mountainBikeFlagEncoder0.isBlockFords());
      assertTrue(mountainBikeFlagEncoder0.supportsTurnCosts());
      assertEquals(30.0, mountainBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertFalse(mountainBikeFlagEncoder0.isRegistered());
      assertEquals(1, mountainBikeFlagEncoder0.getMaxTurnCosts());
      assertEquals("mtb", mountainBikeFlagEncoder0.toString());
      assertEquals(TransportationMode.BIKE, mountainBikeFlagEncoder0.getTransportationMode());
      assertEquals(2, mountainBikeFlagEncoder0.getVersion());
      assertNotNull(mountainBikeFlagEncoder0);
      
      boolean boolean0 = mountainBikeFlagEncoder0.isSacScaleAllowed("alpine_hiking");
      assertTrue(mountainBikeFlagEncoder0.isBlockFords());
      assertTrue(mountainBikeFlagEncoder0.supportsTurnCosts());
      assertEquals(30.0, mountainBikeFlagEncoder0.getMaxSpeed(), 0.01);
      assertFalse(mountainBikeFlagEncoder0.isRegistered());
      assertEquals(1, mountainBikeFlagEncoder0.getMaxTurnCosts());
      assertEquals("mtb", mountainBikeFlagEncoder0.toString());
      assertEquals(TransportationMode.BIKE, mountainBikeFlagEncoder0.getTransportationMode());
      assertEquals(2, mountainBikeFlagEncoder0.getVersion());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PMap pMap0 = mock(PMap.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(pMap0).getBool(anyString() , anyBoolean());
      doReturn(0.0).when(pMap0).getDouble(anyString() , anyDouble());
      doReturn(0).when(pMap0).getInt(anyString() , anyInt());
      MountainBikeFlagEncoder mountainBikeFlagEncoder0 = new MountainBikeFlagEncoder(pMap0);
      ReaderWay readerWay0 = mock(ReaderWay.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(readerWay0).getFirstPriorityTag(anyList());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(readerWay0).getTag(anyString());
      doReturn(false, false, false, false).when(readerWay0).hasTag(anyString() , (String) any());
      mountainBikeFlagEncoder0.collect(readerWay0, 180.0, (TreeMap<Double, Integer>) null);
      assertFalse(mountainBikeFlagEncoder0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MountainBikeFlagEncoder mountainBikeFlagEncoder0 = new MountainBikeFlagEncoder();
      String string0 = mountainBikeFlagEncoder0.toString();
      assertEquals("mtb", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MountainBikeFlagEncoder mountainBikeFlagEncoder0 = new MountainBikeFlagEncoder();
      int int0 = mountainBikeFlagEncoder0.getVersion();
      assertEquals(2, int0);
  }
}
