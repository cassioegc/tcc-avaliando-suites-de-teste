/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:24:16 GMT 2021
 */

package com.graphhopper.routing.lm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.GraphHopperConfig;
import com.graphhopper.config.LMProfile;
import com.graphhopper.routing.lm.LMConfig;
import com.graphhopper.routing.lm.LMPreparationHandler;
import com.graphhopper.routing.lm.PrepareLandmarks;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.storage.StorableProperties;
import com.graphhopper.storage.index.LocationIndex;
import com.graphhopper.storage.index.LocationIndexTree;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LMPreparationHandler_ESTest extends LMPreparationHandler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      lMPreparationHandler0.setPreparationThreads(3884);
      assertEquals(3884, lMPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      LMProfile[] lMProfileArray0 = new LMProfile[0];
      LMPreparationHandler lMPreparationHandler1 = lMPreparationHandler0.setLMProfiles(lMProfileArray0);
      assertEquals(1, lMPreparationHandler1.getPreparationThreads());
      assertEquals(16, lMPreparationHandler1.getLandmarks());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      LMPreparationHandler lMPreparationHandler1 = lMPreparationHandler0.addLMConfig((LMConfig) null);
      LMProfile[] lMProfileArray0 = new LMProfile[0];
      LMPreparationHandler lMPreparationHandler2 = lMPreparationHandler1.setLMProfiles(lMProfileArray0);
      assertEquals(1, lMPreparationHandler2.getPreparationThreads());
      assertEquals(16, lMPreparationHandler2.getLandmarks());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      HashSet<LMProfile> hashSet0 = new HashSet<LMProfile>();
      LMPreparationHandler lMPreparationHandler1 = lMPreparationHandler0.setLMProfiles((Collection<LMProfile>) hashSet0);
      assertEquals(16, lMPreparationHandler1.getLandmarks());
      assertEquals(1, lMPreparationHandler1.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      LMPreparationHandler lMPreparationHandler1 = lMPreparationHandler0.addLMConfig((LMConfig) null);
      Vector<LMProfile> vector0 = new Vector<LMProfile>();
      LMPreparationHandler lMPreparationHandler2 = lMPreparationHandler1.setLMProfiles((Collection<LMProfile>) vector0);
      assertEquals(1, lMPreparationHandler2.getPreparationThreads());
      assertEquals(16, lMPreparationHandler2.getLandmarks());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      LMProfile[] lMProfileArray0 = new LMProfile[6];
      LMProfile lMProfile0 = new LMProfile("first_match");
      lMProfileArray0[0] = lMProfile0;
      lMProfileArray0[1] = lMProfileArray0[0];
      lMProfileArray0[2] = lMProfileArray0[0];
      lMProfileArray0[3] = lMProfileArray0[0];
      lMProfileArray0[4] = lMProfileArray0[0];
      lMProfileArray0[5] = lMProfileArray0[0];
      LMPreparationHandler lMPreparationHandler1 = lMPreparationHandler0.setLMProfiles(lMProfileArray0);
      lMPreparationHandler1.getLMProfiles();
      assertEquals(1, lMPreparationHandler1.getPreparationThreads());
      assertEquals(16, lMPreparationHandler1.getLandmarks());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      LMPreparationHandler lMPreparationHandler1 = lMPreparationHandler0.addLMConfig((LMConfig) null);
      lMPreparationHandler1.getLMConfigs();
      assertEquals(1, lMPreparationHandler1.getPreparationThreads());
      assertEquals(16, lMPreparationHandler1.getLandmarks());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      // Undeclared exception!
      try { 
        lMPreparationHandler0.setLMProfiles((Collection<LMProfile>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.lm.LMPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      // Undeclared exception!
      try { 
        lMPreparationHandler0.init((GraphHopperConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.lm.LMPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      Stack<LMProfile> stack0 = new Stack<LMProfile>();
      LMProfile lMProfile0 = new LMProfile("");
      LMProfile lMProfile1 = lMProfile0.setPreparationProfile("");
      stack0.add(lMProfile1);
      LMPreparationHandler lMPreparationHandler1 = lMPreparationHandler0.setLMProfiles((Collection<LMProfile>) stack0);
      assertEquals(16, lMPreparationHandler1.getLandmarks());
      assertEquals(1, lMPreparationHandler1.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      lMPreparationHandler0.addLMConfig((LMConfig) null);
      boolean boolean0 = lMPreparationHandler0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      lMPreparationHandler0.isEnabled();
      assertEquals(1, lMPreparationHandler0.getPreparationThreads());
      assertEquals(16, lMPreparationHandler0.getLandmarks());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      int int0 = lMPreparationHandler0.getPreparationThreads();
      assertEquals(16, lMPreparationHandler0.getLandmarks());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      // Undeclared exception!
      try { 
        lMPreparationHandler0.setPreparationThreads(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      Stack<LMProfile> stack0 = new Stack<LMProfile>();
      LMProfile lMProfile0 = new LMProfile("");
      stack0.add(lMProfile0);
      lMPreparationHandler0.setLMProfiles((Collection<LMProfile>) stack0);
      // Undeclared exception!
      try { 
        lMPreparationHandler0.createPreparations((GraphHopperStorage) null, (LocationIndex) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No landmark weightings found
         //
         verifyException("com.graphhopper.routing.lm.LMPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      boolean boolean0 = lMPreparationHandler0.loadOrDoWork((StorableProperties) null, false);
      assertFalse(boolean0);
      assertEquals(16, lMPreparationHandler0.getLandmarks());
      assertEquals(1, lMPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      // Undeclared exception!
      try { 
        lMPreparationHandler0.getPreparation("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No LM preparations added yet
         //
         verifyException("com.graphhopper.routing.lm.LMPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      boolean boolean0 = lMPreparationHandler0.hasLMProfiles();
      assertEquals(16, lMPreparationHandler0.getLandmarks());
      assertEquals(1, lMPreparationHandler0.getPreparationThreads());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      assertFalse(lMPreparationHandler0.hasLMProfiles());
      
      LMPreparationHandler lMPreparationHandler1 = lMPreparationHandler0.addLMConfig((LMConfig) null);
      boolean boolean0 = lMPreparationHandler1.hasLMProfiles();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      // Undeclared exception!
      try { 
        lMPreparationHandler0.addPreparation((PrepareLandmarks) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.lm.LMPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      LMPreparationHandler lMPreparationHandler1 = lMPreparationHandler0.addLMConfig((LMConfig) null);
      // Undeclared exception!
      try { 
        lMPreparationHandler1.addPreparation((PrepareLandmarks) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.lm.LMPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      LMProfile[] lMProfileArray0 = new LMProfile[6];
      LMProfile lMProfile0 = new LMProfile("first_match");
      lMProfileArray0[0] = lMProfile0;
      lMProfileArray0[0].setPreparationProfile("first_match");
      // Undeclared exception!
      try { 
        lMPreparationHandler0.setLMProfiles(lMProfileArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.lm.LMPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      assertFalse(lMPreparationHandler0.isEnabled());
      
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      lMPreparationHandler0.createPreparations(graphHopperStorage0, locationIndexTree0);
      assertEquals(16, lMPreparationHandler0.getLandmarks());
      assertEquals(1, lMPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      assertFalse(lMPreparationHandler0.isEnabled());
      
      Stack<LMProfile> stack0 = new Stack<LMProfile>();
      LMProfile lMProfile0 = new LMProfile("");
      stack0.add(lMProfile0);
      lMPreparationHandler0.setLMProfiles((Collection<LMProfile>) stack0);
      boolean boolean0 = lMPreparationHandler0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      GraphHopperConfig graphHopperConfig0 = new GraphHopperConfig();
      GraphHopperConfig graphHopperConfig1 = graphHopperConfig0.putObject("prepare.lm.weightings", "prepare.lm.weightings");
      // Undeclared exception!
      try { 
        lMPreparationHandler0.init(graphHopperConfig1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Use profiles_lm instead of prepare.lm.weightings, see #1922 and docs/core/profiles.md
         //
         verifyException("com.graphhopper.routing.lm.LMPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      lMPreparationHandler0.getLMConfigs();
      assertEquals(16, lMPreparationHandler0.getLandmarks());
      assertEquals(1, lMPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      lMPreparationHandler0.size();
      assertEquals(16, lMPreparationHandler0.getLandmarks());
      assertEquals(1, lMPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      lMPreparationHandler0.addLMConfig((LMConfig) null);
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      // Undeclared exception!
      try { 
        lMPreparationHandler0.createPreparations(graphHopperStorage0, locationIndexTree0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.lm.LMPreparationHandler", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      GraphHopperConfig graphHopperConfig0 = new GraphHopperConfig();
      lMPreparationHandler0.init(graphHopperConfig0);
      assertEquals(16, lMPreparationHandler0.getLandmarks());
      assertEquals(1, lMPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      int int0 = lMPreparationHandler0.getLandmarks();
      assertEquals(16, int0);
      assertEquals(1, lMPreparationHandler0.getPreparationThreads());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      lMPreparationHandler0.getPreparations();
      assertEquals(1, lMPreparationHandler0.getPreparationThreads());
      assertEquals(16, lMPreparationHandler0.getLandmarks());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LMPreparationHandler lMPreparationHandler0 = new LMPreparationHandler();
      lMPreparationHandler0.getLMProfiles();
      assertEquals(16, lMPreparationHandler0.getLandmarks());
      assertEquals(1, lMPreparationHandler0.getPreparationThreads());
  }
}
