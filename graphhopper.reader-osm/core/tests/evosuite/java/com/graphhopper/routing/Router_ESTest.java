/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 01:25:26 GMT 2021
 */

package com.graphhopper.routing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.carrotsearch.hppc.IntStack;
import com.graphhopper.GHRequest;
import com.graphhopper.GHResponse;
import com.graphhopper.config.Profile;
import com.graphhopper.routing.AlgorithmOptions;
import com.graphhopper.routing.DefaultWeightingFactory;
import com.graphhopper.routing.Router;
import com.graphhopper.routing.RouterConfig;
import com.graphhopper.routing.lm.LandmarkStorage;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.RacingBikeFlagEncoder;
import com.graphhopper.routing.weighting.QueryGraphWeighting;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.routing.weighting.custom.CustomProfile;
import com.graphhopper.storage.CHGraph;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.MMapDirectory;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.storage.index.LocationIndexTree;
import com.graphhopper.util.TranslationMap;
import com.graphhopper.util.details.PathDetailsBuilderFactory;
import com.graphhopper.util.shapes.GHPoint;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Router_ESTest extends Router_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      Stack<RacingBikeFlagEncoder> stack0 = new Stack<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 323);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, mMapDirectory0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      TranslationMap translationMap0 = new TranslationMap();
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      HashMap<String, Profile> hashMap2 = new HashMap<String, Profile>();
      RouterConfig routerConfig0 = new RouterConfig();
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, hashMap2, pathDetailsBuilderFactory0, translationMap0, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
      // Undeclared exception!
      try { 
        router0.validateRequest((GHRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.Router", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      Stack<RacingBikeFlagEncoder> stack0 = new Stack<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 323);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, mMapDirectory0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      TranslationMap translationMap0 = new TranslationMap();
      RouterConfig routerConfig0 = new RouterConfig();
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions((String) null, (Weighting) null);
      CustomProfile customProfile0 = new CustomProfile("custom_model");
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, (Map<String, Profile>) null, pathDetailsBuilderFactory0, translationMap0, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
      GHRequest gHRequest0 = new GHRequest(1, 0.0, (-2148.87276), (-31.0), (-2172.13787), (-2189.9525552));
      int[] intArray0 = new int[9];
      IntStack intStack0 = IntStack.from(intArray0);
      QueryGraphWeighting queryGraphWeighting0 = new QueryGraphWeighting((Weighting) null, 21841, 21841, intStack0);
      // Undeclared exception!
      try { 
        router0.routeVia(gHRequest0, algorithmOptions0, queryGraphWeighting0, customProfile0, true, true, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      Stack<RacingBikeFlagEncoder> stack0 = new Stack<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 323);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, mMapDirectory0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      TranslationMap translationMap0 = new TranslationMap();
      RouterConfig routerConfig0 = new RouterConfig();
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, (Map<String, Profile>) null, pathDetailsBuilderFactory0, translationMap0, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
      GHRequest gHRequest0 = new GHRequest(1);
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions((String) null, (Weighting) null);
      CustomProfile customProfile0 = new CustomProfile("custom_model");
      // Undeclared exception!
      try { 
        router0.routeVia(gHRequest0, algorithmOptions0, (Weighting) null, customProfile0, true, true, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least 2 points have to be specified, but was:0
         //
         verifyException("com.graphhopper.routing.ViaRouting", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      Stack<RacingBikeFlagEncoder> stack0 = new Stack<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 323);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, mMapDirectory0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      TranslationMap translationMap0 = new TranslationMap();
      RouterConfig routerConfig0 = new RouterConfig();
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, (Map<String, Profile>) null, pathDetailsBuilderFactory0, translationMap0, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
      GHRequest gHRequest0 = new GHRequest(1);
      GHPoint gHPoint0 = new GHPoint();
      gHRequest0.addPoint(gHPoint0);
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions((String) null, (Weighting) null);
      CustomProfile customProfile0 = new CustomProfile("custom_model");
      // Undeclared exception!
      try { 
        router0.routeRoundTrip(gHRequest0, algorithmOptions0, (Weighting) null, customProfile0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 323);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, mMapDirectory0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      TranslationMap translationMap0 = new TranslationMap();
      RouterConfig routerConfig0 = new RouterConfig();
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, (Map<String, Profile>) null, pathDetailsBuilderFactory0, translationMap0, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
      GHRequest gHRequest0 = new GHRequest(259, 259, (-892.65038), (-1.0), 65536.0, (-1.0));
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions((String) null, (Weighting) null);
      // Undeclared exception!
      try { 
        router0.routeAlt(gHRequest0, algorithmOptions0, (Weighting) null, (Profile) null, false, false, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.index.LocationIndexTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      Stack<RacingBikeFlagEncoder> stack0 = new Stack<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 323);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, mMapDirectory0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      TranslationMap translationMap0 = new TranslationMap();
      RouterConfig routerConfig0 = new RouterConfig();
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, (Map<String, Profile>) null, pathDetailsBuilderFactory0, translationMap0, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
      // Undeclared exception!
      try { 
        router0.route((GHRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.Router", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      RouterConfig routerConfig0 = new RouterConfig();
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      HashMap<String, Profile> hashMap2 = new HashMap<String, Profile>();
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, hashMap2, pathDetailsBuilderFactory0, (TranslationMap) null, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
      GHRequest gHRequest0 = new GHRequest(180, 0L, 635.47542586, 2, (-476), 0L);
      GHRequest gHRequest1 = gHRequest0.setProfile("x7Fzu2EXYa,&,G34.zk");
      Stack<GHPoint> stack0 = new Stack<GHPoint>();
      GHRequest gHRequest2 = gHRequest1.setPoints(stack0);
      // Undeclared exception!
      try { 
        router0.validateRequest(gHRequest2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // You have to pass at least one point
         //
         verifyException("com.graphhopper.routing.Router", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      RouterConfig routerConfig0 = new RouterConfig();
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      GHRequest gHRequest0 = new GHRequest(2);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      HashMap<String, Profile> hashMap2 = new HashMap<String, Profile>();
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, hashMap2, pathDetailsBuilderFactory0, (TranslationMap) null, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
      GHResponse gHResponse0 = router0.route(gHRequest0);
      assertFalse(gHResponse0.hasAlternatives());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      RouterConfig routerConfig0 = new RouterConfig();
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      HashMap<String, Profile> hashMap2 = new HashMap<String, Profile>();
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, hashMap2, pathDetailsBuilderFactory0, (TranslationMap) null, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
      GHRequest gHRequest0 = new GHRequest(180, 0L, 635.47542586, 2, (-476), 0L);
      gHRequest0.setProfile("x7Fzu2EXYa,&,G34.zk");
      // Undeclared exception!
      try { 
        router0.validateRequest(gHRequest0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Point 0 is out of bounds: 180.0,0.0, the bounds are: 1.7976931348623157E308,-1.7976931348623157E308,1.7976931348623157E308,-1.7976931348623157E308,1.7976931348623157E308,-1.7976931348623157E308
         //
         verifyException("com.graphhopper.routing.Router", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      Stack<RacingBikeFlagEncoder> stack0 = new Stack<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 298);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, mMapDirectory0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      TranslationMap translationMap0 = new TranslationMap();
      RouterConfig routerConfig0 = new RouterConfig();
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, (Map<String, Profile>) null, pathDetailsBuilderFactory0, translationMap0, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
      GHRequest gHRequest0 = new GHRequest(1);
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions((String) null, (Weighting) null);
      CustomProfile customProfile0 = new CustomProfile("custom_model");
      // Undeclared exception!
      try { 
        router0.routeAlt(gHRequest0, algorithmOptions0, (Weighting) null, customProfile0, true, false, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At least 2 points have to be specified, but was:0
         //
         verifyException("com.graphhopper.routing.ViaRouting", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("DoP0");
      Stack<RacingBikeFlagEncoder> stack0 = new Stack<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, false, 323);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, mMapDirectory0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      TranslationMap translationMap0 = new TranslationMap();
      RouterConfig routerConfig0 = new RouterConfig();
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, (Map<String, Profile>) null, pathDetailsBuilderFactory0, translationMap0, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
      AlgorithmOptions algorithmOptions0 = new AlgorithmOptions("DoP0", (Weighting) null);
      Profile profile0 = new Profile("custom_model");
      GHPoint gHPoint0 = new GHPoint();
      GHRequest gHRequest0 = new GHRequest(gHPoint0, gHPoint0, Double.NaN, (-1764.2939));
      // Undeclared exception!
      try { 
        router0.routeRoundTrip(gHRequest0, algorithmOptions0, (Weighting) null, profile0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // For round trip calculation exactly one point is required
         //
         verifyException("com.graphhopper.routing.RoundTripRouting", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      RouterConfig routerConfig0 = new RouterConfig();
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      HashMap<String, Profile> hashMap2 = new HashMap<String, Profile>();
      hashMap1.put("x7Fzu2EXYa,&,G34.zk", (LandmarkStorage) null);
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      Router router0 = new Router(graphHopperStorage0, locationIndexTree0, hashMap2, pathDetailsBuilderFactory0, (TranslationMap) null, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      RouterConfig routerConfig0 = new RouterConfig();
      HashMap<String, CHGraph> hashMap0 = new HashMap<String, CHGraph>();
      HashMap<String, LandmarkStorage> hashMap1 = new HashMap<String, LandmarkStorage>();
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, false);
      LocationIndexTree locationIndexTree0 = new LocationIndexTree(graphHopperStorage0, rAMDirectory0);
      HashMap<String, Profile> hashMap2 = new HashMap<String, Profile>();
      DefaultWeightingFactory defaultWeightingFactory0 = new DefaultWeightingFactory(graphHopperStorage0, encodingManager0);
      hashMap0.put("", (CHGraph) null);
      Router router0 = null;
      try {
        router0 = new Router(graphHopperStorage0, locationIndexTree0, hashMap2, pathDetailsBuilderFactory0, (TranslationMap) null, routerConfig0, defaultWeightingFactory0, hashMap0, hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.storage.RoutingCHGraphImpl", e);
      }
  }
}
