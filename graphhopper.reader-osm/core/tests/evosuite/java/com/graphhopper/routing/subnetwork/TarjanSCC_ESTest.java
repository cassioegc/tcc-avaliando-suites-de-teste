/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 01:42:14 GMT 2021
 */

package com.graphhopper.routing.subnetwork;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.carrotsearch.hppc.BitSet;
import com.carrotsearch.hppc.IntArrayList;
import com.graphhopper.routing.ev.SimpleBooleanEncodedValue;
import com.graphhopper.routing.subnetwork.TarjanSCC;
import com.graphhopper.routing.util.DefaultEdgeFilter;
import com.graphhopper.routing.util.EdgeFilter;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.RacingBikeFlagEncoder;
import com.graphhopper.storage.Graph;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.util.EdgeIteratorState;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TarjanSCC_ESTest extends TarjanSCC_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EdgeFilter edgeFilter0 = EdgeFilter.ALL_EDGES;
      // Undeclared exception!
      try { 
        TarjanSCC.findComponentsRecursive((Graph) null, edgeFilter0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.subnetwork.TarjanSCC", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("e1R;", true);
      Stack<RacingBikeFlagEncoder> stack0 = new Stack<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) stack0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true);
      // Undeclared exception!
      try { 
        TarjanSCC.findComponentsRecursive(graphHopperStorage0, (EdgeFilter) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instead null filter use EdgeFilter.ALL_EDGES
         //
         verifyException("com.graphhopper.storage.BaseGraph$EdgeIteratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.allEdges(simpleBooleanEncodedValue0);
      // Undeclared exception!
      try { 
        TarjanSCC.findComponents((Graph) null, defaultEdgeFilter0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.subnetwork.TarjanSCC", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("");
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true);
      // Undeclared exception!
      try { 
        TarjanSCC.findComponents(graphHopperStorage0, (EdgeFilter) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instead null filter use EdgeFilter.ALL_EDGES
         //
         verifyException("com.graphhopper.storage.BaseGraph$EdgeIteratorImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Vector<RacingBikeFlagEncoder> vector0 = new Vector<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.outEdges(simpleBooleanEncodedValue0);
      TarjanSCC.ConnectedComponents tarjanSCC_ConnectedComponents0 = TarjanSCC.findComponentsRecursive(graphHopperStorage0, defaultEdgeFilter0, false);
      int int0 = tarjanSCC_ConnectedComponents0.getTotalComponents();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Vector<RacingBikeFlagEncoder> vector0 = new Vector<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.outEdges(simpleBooleanEncodedValue0);
      TarjanSCC.ConnectedComponents tarjanSCC_ConnectedComponents0 = TarjanSCC.findComponentsRecursive(graphHopperStorage0, defaultEdgeFilter0, false);
      int int0 = tarjanSCC_ConnectedComponents0.getNodes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Vector<RacingBikeFlagEncoder> vector0 = new Vector<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.outEdges(simpleBooleanEncodedValue0);
      TarjanSCC.ConnectedComponents tarjanSCC_ConnectedComponents0 = TarjanSCC.findComponentsRecursive(graphHopperStorage0, defaultEdgeFilter0, false);
      List<IntArrayList> list0 = tarjanSCC_ConnectedComponents0.getComponents();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      TarjanSCC.ConnectedComponents tarjanSCC_ConnectedComponents0 = new TarjanSCC.ConnectedComponents((-1682));
      IntArrayList intArrayList0 = tarjanSCC_ConnectedComponents0.getBiggestComponent();
      assertEquals(0, intArrayList0.elementsCount);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Vector<RacingBikeFlagEncoder> vector0 = new Vector<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.outEdges(simpleBooleanEncodedValue0);
      TarjanSCC.ConnectedComponents tarjanSCC_ConnectedComponents0 = TarjanSCC.findComponents(graphHopperStorage0, defaultEdgeFilter0, true);
      assertEquals(0, tarjanSCC_ConnectedComponents0.getNodes());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      Vector<RacingBikeFlagEncoder> vector0 = new Vector<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) vector0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      SimpleBooleanEncodedValue simpleBooleanEncodedValue0 = (SimpleBooleanEncodedValue)EdgeIteratorState.UNFAVORED_EDGE;
      DefaultEdgeFilter defaultEdgeFilter0 = DefaultEdgeFilter.outEdges(simpleBooleanEncodedValue0);
      TarjanSCC.ConnectedComponents tarjanSCC_ConnectedComponents0 = TarjanSCC.findComponentsRecursive(graphHopperStorage0, defaultEdgeFilter0, false);
      BitSet bitSet0 = tarjanSCC_ConnectedComponents0.getSingleNodeComponents();
      assertEquals(0, bitSet0.wlen);
  }
}
