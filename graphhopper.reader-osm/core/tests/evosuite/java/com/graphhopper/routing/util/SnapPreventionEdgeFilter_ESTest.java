/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:58:10 GMT 2021
 */

package com.graphhopper.routing.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.ev.EnumEncodedValue;
import com.graphhopper.routing.ev.RoadClass;
import com.graphhopper.routing.ev.RoadEnvironment;
import com.graphhopper.routing.util.Bike2WeightFlagEncoder;
import com.graphhopper.routing.util.EdgeFilter;
import com.graphhopper.routing.util.SnapPreventionEdgeFilter;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.GHUtility;
import com.graphhopper.util.PMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SnapPreventionEdgeFilter_ESTest extends SnapPreventionEdgeFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EdgeFilter edgeFilter0 = EdgeFilter.ALL_EDGES;
      Class<RoadClass> class0 = RoadClass.class;
      EnumEncodedValue<RoadClass> enumEncodedValue0 = new EnumEncodedValue<RoadClass>("trunk", class0, false);
      SnapPreventionEdgeFilter snapPreventionEdgeFilter0 = null;
      try {
        snapPreventionEdgeFilter0 = new SnapPreventionEdgeFilter(edgeFilter0, enumEncodedValue0, (EnumEncodedValue<RoadEnvironment>) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.SnapPreventionEdgeFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GHUtility.DisabledEdgeIterator gHUtility_DisabledEdgeIterator0 = new GHUtility.DisabledEdgeIterator();
      EdgeFilter edgeFilter0 = EdgeFilter.ALL_EDGES;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("trunk");
      SnapPreventionEdgeFilter snapPreventionEdgeFilter0 = new SnapPreventionEdgeFilter(edgeFilter0, (EnumEncodedValue<RoadClass>) null, (EnumEncodedValue<RoadEnvironment>) null, arrayList0);
      // Undeclared exception!
      try { 
        snapPreventionEdgeFilter0.accept(gHUtility_DisabledEdgeIterator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Edge is empty.
         //
         verifyException("com.graphhopper.util.GHUtility$DisabledEdgeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GHUtility.DisabledEdgeIterator gHUtility_DisabledEdgeIterator0 = new GHUtility.DisabledEdgeIterator();
      EdgeFilter edgeFilter0 = EdgeFilter.ALL_EDGES;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("motorway");
      SnapPreventionEdgeFilter snapPreventionEdgeFilter0 = new SnapPreventionEdgeFilter(edgeFilter0, (EnumEncodedValue<RoadClass>) null, (EnumEncodedValue<RoadEnvironment>) null, arrayList0);
      // Undeclared exception!
      try { 
        snapPreventionEdgeFilter0.accept(gHUtility_DisabledEdgeIterator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Edge is empty.
         //
         verifyException("com.graphhopper.util.GHUtility$DisabledEdgeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GHUtility.DisabledEdgeIterator gHUtility_DisabledEdgeIterator0 = new GHUtility.DisabledEdgeIterator();
      EdgeFilter edgeFilter0 = EdgeFilter.ALL_EDGES;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SnapPreventionEdgeFilter snapPreventionEdgeFilter0 = new SnapPreventionEdgeFilter(edgeFilter0, (EnumEncodedValue<RoadClass>) null, (EnumEncodedValue<RoadEnvironment>) null, arrayList0);
      boolean boolean0 = snapPreventionEdgeFilter0.accept(gHUtility_DisabledEdgeIterator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder();
      List<String> list0 = bike2WeightFlagEncoder0.restrictions;
      SnapPreventionEdgeFilter snapPreventionEdgeFilter0 = null;
      try {
        snapPreventionEdgeFilter0 = new SnapPreventionEdgeFilter((EdgeFilter) null, (EnumEncodedValue<RoadClass>) null, (EnumEncodedValue<RoadEnvironment>) null, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot find snap_prevention: bicycle
         //
         verifyException("com.graphhopper.routing.util.SnapPreventionEdgeFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      String[] stringArray0 = new String[0];
      PMap pMap0 = PMap.read(stringArray0);
      Bike2WeightFlagEncoder bike2WeightFlagEncoder0 = new Bike2WeightFlagEncoder(pMap0);
      Set<String> set0 = bike2WeightFlagEncoder0.absoluteBarriers;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      SnapPreventionEdgeFilter snapPreventionEdgeFilter0 = new SnapPreventionEdgeFilter((EdgeFilter) null, (EnumEncodedValue<RoadClass>) null, (EnumEncodedValue<RoadEnvironment>) null, list0);
      // Undeclared exception!
      try { 
        snapPreventionEdgeFilter0.accept((EdgeIteratorState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.SnapPreventionEdgeFilter", e);
      }
  }
}
