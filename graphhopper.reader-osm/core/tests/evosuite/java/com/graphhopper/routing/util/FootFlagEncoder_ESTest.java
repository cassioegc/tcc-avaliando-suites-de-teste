/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 01:54:28 GMT 2021
 */

package com.graphhopper.routing.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.ev.EncodedValue;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.FootFlagEncoder;
import com.graphhopper.routing.util.HikeFlagEncoder;
import com.graphhopper.routing.util.TransportationMode;
import com.graphhopper.routing.util.WheelchairFlagEncoder;
import com.graphhopper.routing.weighting.PriorityWeighting;
import com.graphhopper.storage.IntsRef;
import com.graphhopper.util.PMap;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FootFlagEncoder_ESTest extends FootFlagEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder((-2145213268), 0L);
      IntsRef intsRef0 = IntsRef.EMPTY;
      hikeFlagEncoder0.maxPossibleSpeed = 0;
      hikeFlagEncoder0.setSpeed(intsRef0, false, false, 0);
      assertEquals(0, intsRef0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder((-2145213268), 0L);
      ReaderWay readerWay0 = new ReaderWay(1058L);
      TreeMap<Double, Integer> treeMap0 = new TreeMap<Double, Integer>();
      hikeFlagEncoder0.collect(readerWay0, treeMap0);
      assertEquals(0, hikeFlagEncoder0.getMaxTurnCosts());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder();
      Class<Object> class0 = Object.class;
      boolean boolean0 = footFlagEncoder0.supports(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder(0, 0);
      ReaderWay readerWay0 = new ReaderWay(0);
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.CAN_SKIP;
      IntsRef intsRef0 = footFlagEncoder0.handleWayTags((IntsRef) null, readerWay0, encodingManager_Access0);
      assertNull(intsRef0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder((-1944), (-1350.88));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1944);
      IntsRef intsRef0 = new IntsRef(intArray0, (-1944), (-1944));
      ReaderWay readerWay0 = new ReaderWay(1699L);
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.CAN_SKIP;
      IntsRef intsRef1 = hikeFlagEncoder0.handleWayTags(intsRef0, readerWay0, encodingManager_Access0);
      assertSame(intsRef0, intsRef1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(4294967305L);
      int int0 = wheelchairFlagEncoder0.handlePriority(readerWay0, (Integer) 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder(0, 0);
      ReaderWay readerWay0 = new ReaderWay(0);
      Integer integer0 = new Integer((-1261));
      int int0 = footFlagEncoder0.handlePriority(readerWay0, integer0);
      assertEquals((-1261), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder();
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.supports((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NOT";
      stringArray0[1] = "road";
      stringArray0[2] = "";
      PMap pMap0 = PMap.read(stringArray0);
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder(pMap0);
      Integer integer0 = new Integer(544);
      // Undeclared exception!
      try { 
        footFlagEncoder0.handlePriority((ReaderWay) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.FootFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "pedestrian";
      stringArray0[1] = "k3Lje}{t6";
      stringArray0[2] = "!SzKA?M6`T";
      stringArray0[3] = ")24Le}Q*9C?&";
      stringArray0[4] = "gJLx-miy0wF9";
      stringArray0[5] = "G $Q@qqZ0-";
      stringArray0[6] = "roadcycling";
      PMap pMap0 = PMap.read(stringArray0);
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder(pMap0);
      // Undeclared exception!
      try { 
        footFlagEncoder0.getAccess((ReaderWay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.FootFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(4294967295L);
      Class<Object> class0 = Object.class;
      readerWay0.setTag("highway", class0);
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.getAccess(readerWay0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.String
         //
         verifyException("com.graphhopper.reader.ReaderElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder();
      LinkedList<FlagEncoder> linkedList0 = new LinkedList<FlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) linkedList0);
      List<EncodedValue> list0 = encodingManager0.getEncodedValues();
      // Undeclared exception!
      try { 
        footFlagEncoder0.createEncodedValues(list0, "cattle_grid", 484);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder();
      // Undeclared exception!
      try { 
        footFlagEncoder0.createEncodedValues((List<EncodedValue>) null, "KD.0<XF", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodedValue name wasn't valid: KD.0<XF$access. Use lower case letters, underscore and numbers only.
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder(0, 668.7);
      TreeMap<Double, Integer> treeMap0 = new TreeMap<Double, Integer>();
      // Undeclared exception!
      try { 
        hikeFlagEncoder0.collect((ReaderWay) null, treeMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.HikeFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = null;
      try {
        footFlagEncoder0 = new FootFlagEncoder((PMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.FootFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder((-101), (-278.9978431));
      TransportationMode transportationMode0 = footFlagEncoder0.getTransportationMode();
      assertEquals(TransportationMode.FOOT, transportationMode0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder((-101), (-278.9978431));
      Class<PriorityWeighting> class0 = PriorityWeighting.class;
      boolean boolean0 = footFlagEncoder0.supports(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder((-101), (-278.9978431));
      ReaderWay readerWay0 = new ReaderWay(0L);
      int int0 = footFlagEncoder0.handlePriority(readerWay0, (Integer) 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder();
      IntsRef intsRef0 = IntsRef.EMPTY;
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.setSpeed(intsRef0, false, true, 28);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.FootFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PMap pMap0 = new PMap(0);
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder(pMap0);
      footFlagEncoder0.setSpeed((IntsRef) null, false, true, 0);
      assertFalse(footFlagEncoder0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PMap pMap0 = new PMap("com.graphhopper.routing.util.FootFlagEncoder");
      WheelchairFlagEncoder wheelchairFlagEncoder0 = new WheelchairFlagEncoder(pMap0);
      // Undeclared exception!
      try { 
        wheelchairFlagEncoder0.setSpeed((IntsRef) null, true, false, 217.31435);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.FootFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HikeFlagEncoder hikeFlagEncoder0 = new HikeFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(3);
      IntsRef intsRef0 = new IntsRef(1);
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.CAN_SKIP;
      IntsRef intsRef1 = hikeFlagEncoder0.handleWayTags(intsRef0, readerWay0, encodingManager_Access0);
      assertTrue(intsRef1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PMap pMap0 = new PMap(0);
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay(0);
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.WAY;
      // Undeclared exception!
      try { 
        footFlagEncoder0.handleWayTags((IntsRef) null, readerWay0, encodingManager_Access0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.FootFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder((-101), (-278.9978431));
      ReaderWay readerWay0 = new ReaderWay(0L);
      EncodingManager.Access encodingManager_Access0 = footFlagEncoder0.getAccess(readerWay0);
      assertEquals(EncodingManager.Access.CAN_SKIP, encodingManager_Access0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(422L);
      int int0 = footFlagEncoder0.handlePriority(readerWay0, (Integer) null);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder((-101), (-278.9978431));
      int int0 = footFlagEncoder0.getVersion();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder((-101), (-278.9978431));
      String string0 = footFlagEncoder0.toString();
      assertEquals("foot", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FootFlagEncoder footFlagEncoder0 = new FootFlagEncoder((-101), (-278.9978431));
      ArrayList<EncodedValue> arrayList0 = new ArrayList<EncodedValue>();
      // Undeclared exception!
      try { 
        footFlagEncoder0.createEncodedValues(arrayList0, "foot", 1809);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.AbstractFlagEncoder", e);
      }
  }
}
