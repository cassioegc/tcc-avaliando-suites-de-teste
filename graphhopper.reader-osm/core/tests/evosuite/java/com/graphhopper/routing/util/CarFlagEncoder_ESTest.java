/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 01:32:25 GMT 2021
 */

package com.graphhopper.routing.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.ConditionalTagInspector;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.routing.ev.EncodedValue;
import com.graphhopper.routing.util.Car4WDFlagEncoder;
import com.graphhopper.routing.util.CarFlagEncoder;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FerrySpeedCalculator;
import com.graphhopper.routing.util.MotorcycleFlagEncoder;
import com.graphhopper.storage.IntsRef;
import com.graphhopper.util.PMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CarFlagEncoder_ESTest extends CarFlagEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PMap pMap0 = new PMap("");
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay(61L);
      double double0 = carFlagEncoder0.applyBadSurfaceSpeed(readerWay0, 30.0);
      assertEquals(30.0, double0, 0.01);
      assertFalse(carFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder((-1155), 0.005, (-1155));
      carFlagEncoder0.badSurfaceSpeed = (-1155);
      double double0 = carFlagEncoder0.applyBadSurfaceSpeed((ReaderWay) null, 1901.777237);
      assertFalse(carFlagEncoder0.isBlockFords());
      assertEquals(1901.777237, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "qi+*4tX*<?HMfpn#k";
      stringArray0[1] = "motorway_link";
      stringArray0[2] = "speed_bits";
      PMap pMap0 = PMap.read(stringArray0);
      Car4WDFlagEncoder car4WDFlagEncoder0 = new Car4WDFlagEncoder(pMap0);
      FerrySpeedCalculator ferrySpeedCalculator0 = new FerrySpeedCalculator((-2112.869105312895), 0.5, (-1.0), (-1.0), 0.5);
      car4WDFlagEncoder0.ferrySpeedCalc = ferrySpeedCalculator0;
      ReaderWay readerWay0 = new ReaderWay(462L);
      int[] intArray0 = new int[7];
      IntsRef intsRef0 = new IntsRef(intArray0, 97, 35);
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.FERRY;
      // Undeclared exception!
      try { 
        car4WDFlagEncoder0.handleWayTags(intsRef0, readerWay0, encodingManager_Access0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.CarFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PMap pMap0 = new PMap();
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(pMap0);
      carFlagEncoder0.setConditionalTagInspector((ConditionalTagInspector) null);
      CarFlagEncoder carFlagEncoder1 = carFlagEncoder0.setSpeedTwoDirections(false);
      assertFalse(carFlagEncoder1.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PMap pMap0 = new PMap(128);
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(pMap0);
      carFlagEncoder0.blockFords(true);
      CarFlagEncoder carFlagEncoder1 = carFlagEncoder0.setSpeedTwoDirections(true);
      assertTrue(carFlagEncoder1.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder((-2671), (-2671), 1316);
      CarFlagEncoder carFlagEncoder1 = carFlagEncoder0.setSpeedTwoDirections(true);
      assertFalse(carFlagEncoder1.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder();
      carFlagEncoder0.maxPossibleSpeed = (-3464);
      CarFlagEncoder carFlagEncoder1 = carFlagEncoder0.setSpeedTwoDirections(false);
      assertFalse(carFlagEncoder1.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(0, 0, 0);
      ReaderWay readerWay0 = new ReaderWay(0);
      EncodingManager.Access encodingManager_Access0 = carFlagEncoder0.getAccess(readerWay0);
      carFlagEncoder0.handleWayTags((IntsRef) null, readerWay0, encodingManager_Access0);
      assertFalse(carFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MotorcycleFlagEncoder motorcycleFlagEncoder0 = new MotorcycleFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(2053L);
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      IntsRef intsRef0 = new IntsRef(intArray0, (-1304), 0);
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.CAN_SKIP;
      motorcycleFlagEncoder0.handleWayTags(intsRef0, readerWay0, encodingManager_Access0);
      assertFalse(motorcycleFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay(4L);
      double double0 = carFlagEncoder0.applyBadSurfaceSpeed(readerWay0, (-2495.34829395));
      assertFalse(carFlagEncoder0.isBlockFords());
      assertEquals((-2495.34829395), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PMap pMap0 = new PMap("");
      Car4WDFlagEncoder car4WDFlagEncoder0 = new Car4WDFlagEncoder(pMap0);
      // Undeclared exception!
      try { 
        car4WDFlagEncoder0.isForwardOneway((ReaderWay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.CarFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@yeC{m";
      stringArray0[1] = "";
      stringArray0[2] = "";
      PMap pMap0 = PMap.read(stringArray0);
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(pMap0);
      // Undeclared exception!
      try { 
        carFlagEncoder0.isBackwardOneway((ReaderWay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.CarFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder((-1472), (-310.20562), (-1472));
      // Undeclared exception!
      try { 
        carFlagEncoder0.getSpeed((ReaderWay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.CarFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder();
      // Undeclared exception!
      try { 
        carFlagEncoder0.getAccess((ReaderWay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.CarFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PMap pMap0 = new PMap(1431);
      Car4WDFlagEncoder car4WDFlagEncoder0 = new Car4WDFlagEncoder(pMap0);
      EncodingManager encodingManager0 = EncodingManager.create("");
      List<EncodedValue> list0 = encodingManager0.getEncodedValues();
      // Undeclared exception!
      try { 
        car4WDFlagEncoder0.createEncodedValues(list0, "private", 1431);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PMap pMap0 = new PMap();
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(pMap0);
      carFlagEncoder0.setEncodedValueLookup(carFlagEncoder0);
      Vector<EncodedValue> vector0 = new Vector<EncodedValue>();
      // Undeclared exception!
      try { 
        carFlagEncoder0.createEncodedValues(vector0, "no", 70);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PMap pMap0 = new PMap(":,{6M#+V=3''\"4Zv3");
      Car4WDFlagEncoder car4WDFlagEncoder0 = new Car4WDFlagEncoder(pMap0);
      // Undeclared exception!
      try { 
        car4WDFlagEncoder0.createEncodedValues((List<EncodedValue>) null, "sand", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.AbstractFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PMap pMap0 = new PMap();
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(pMap0);
      // Undeclared exception!
      try { 
        carFlagEncoder0.applyBadSurfaceSpeed((ReaderWay) null, 806.8932844419);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.CarFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = null;
      try {
        carFlagEncoder0 = new CarFlagEncoder((PMap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.CarFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PMap pMap0 = new PMap();
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(pMap0);
      carFlagEncoder0.getTransportationMode();
      assertFalse(carFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(4466, 4466, 4466);
      ReaderWay readerWay0 = new ReaderWay(4466);
      double double0 = carFlagEncoder0.applyBadSurfaceSpeed(readerWay0, 331.01410953);
      assertFalse(carFlagEncoder0.isBlockFords());
      assertEquals(331.01410953, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PMap pMap0 = new PMap(60);
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay(60);
      double double0 = carFlagEncoder0.applyBadSurfaceSpeed(readerWay0, 0.0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(carFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder();
      ReaderWay readerWay0 = new ReaderWay((-795L));
      double double0 = carFlagEncoder0.applyBadSurfaceSpeed(readerWay0, Double.NaN);
      assertFalse(carFlagEncoder0.isBlockFords());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ReaderWay readerWay0 = new ReaderWay((-168));
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder();
      carFlagEncoder0.badSurfaceSpeed = 0;
      double double0 = carFlagEncoder0.applyBadSurfaceSpeed(readerWay0, 3);
      assertEquals(3.0, double0, 0.01);
      assertFalse(carFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "qi+*4tX*<?HMfpn#k";
      stringArray0[1] = "motorway_link";
      stringArray0[2] = "motorway_link";
      PMap pMap0 = PMap.read(stringArray0);
      Car4WDFlagEncoder car4WDFlagEncoder0 = new Car4WDFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay(18L);
      boolean boolean0 = car4WDFlagEncoder0.isOneway(readerWay0);
      assertFalse(boolean0);
      assertFalse(car4WDFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PMap pMap0 = new PMap();
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay((-2686L));
      boolean boolean0 = carFlagEncoder0.isForwardOneway(readerWay0);
      assertTrue(boolean0);
      assertFalse(carFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "qi+*4tX*<?HMfpn#k";
      stringArray0[1] = "motorway_link";
      stringArray0[2] = "motorway_link";
      PMap pMap0 = PMap.read(stringArray0);
      Car4WDFlagEncoder car4WDFlagEncoder0 = new Car4WDFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay(18L);
      boolean boolean0 = car4WDFlagEncoder0.isBackwardOneway(readerWay0);
      assertFalse(boolean0);
      assertFalse(car4WDFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "qi+*4tX*<?HMfpn#k";
      stringArray0[1] = "motorway_link";
      stringArray0[2] = "motorway_link";
      PMap pMap0 = PMap.read(stringArray0);
      Car4WDFlagEncoder car4WDFlagEncoder0 = new Car4WDFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay(18L);
      int[] intArray0 = new int[8];
      IntsRef intsRef0 = new IntsRef(intArray0, 1, 0);
      EncodingManager.Access encodingManager_Access0 = EncodingManager.Access.WAY;
      // Undeclared exception!
      try { 
        car4WDFlagEncoder0.handleWayTags(intsRef0, readerWay0, encodingManager_Access0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // car4wd, no speed found for: null, tags: Way id:18, nodes:0, tags:java.util.HashMap@0000000007
         //
         verifyException("com.graphhopper.routing.util.CarFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "qi+*4tX*<?HMfpn#k";
      stringArray0[1] = "motorway_link";
      stringArray0[2] = "motorway_link";
      PMap pMap0 = PMap.read(stringArray0);
      Car4WDFlagEncoder car4WDFlagEncoder0 = new Car4WDFlagEncoder(pMap0);
      ReaderWay readerWay0 = new ReaderWay(18L);
      EncodingManager.Access encodingManager_Access0 = car4WDFlagEncoder0.getAccess(readerWay0);
      assertEquals(EncodingManager.Access.CAN_SKIP, encodingManager_Access0);
      
      int[] intArray0 = new int[8];
      IntsRef intsRef0 = new IntsRef(intArray0, 1, 0);
      car4WDFlagEncoder0.handleWayTags(intsRef0, readerWay0, encodingManager_Access0);
      assertFalse(car4WDFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ReaderWay readerWay0 = new ReaderWay((-168));
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder();
      // Undeclared exception!
      try { 
        carFlagEncoder0.getSpeed(readerWay0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // car, no speed found for: null, tags: Way id:-168, nodes:0, tags:java.util.HashMap@0000000006
         //
         verifyException("com.graphhopper.routing.util.CarFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(4466, 4466, 4466);
      int int0 = carFlagEncoder0.getVersion();
      assertFalse(carFlagEncoder0.isBlockFords());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder();
      String string0 = carFlagEncoder0.toString();
      assertEquals("car", string0);
      assertFalse(carFlagEncoder0.isBlockFords());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder(1456, 7027.317, 1456);
      LinkedList<EncodedValue> linkedList0 = new LinkedList<EncodedValue>();
      // Undeclared exception!
      try { 
        carFlagEncoder0.createEncodedValues(linkedList0, "?ZrVtZY", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodedValue name wasn't valid: ?ZrVtZY$access. Use lower case letters, underscore and numbers only.
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CarFlagEncoder carFlagEncoder0 = new CarFlagEncoder((-1155), 0.005, (-1155));
      // Undeclared exception!
      try { 
        carFlagEncoder0.isOneway((ReaderWay) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.CarFlagEncoder", e);
      }
  }
}
