/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:15:15 GMT 2021
 */

package com.graphhopper.routing.util.parsers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.OSMTurnRelation;
import com.graphhopper.reader.ReaderWay;
import com.graphhopper.reader.osm.OSMReader;
import com.graphhopper.routing.ev.DecimalEncodedValue;
import com.graphhopper.routing.ev.EncodedValue;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.MotorcycleFlagEncoder;
import com.graphhopper.routing.util.parsers.OSMTurnRelationParser;
import com.graphhopper.routing.util.parsers.TurnCostParser;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.RAMDirectory;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OSMTurnRelationParser_ESTest extends OSMTurnRelationParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add((String) null);
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser((String) null, 1346, vector0);
      String string0 = oSMTurnRelationParser0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("");
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser((String) null, 1, vector0);
      String string0 = oSMTurnRelationParser0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("(+p>&^?*s?AM:R#");
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser("access", 1, vector0);
      RAMDirectory rAMDirectory0 = new RAMDirectory("access", true);
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true);
      OSMReader oSMReader0 = new OSMReader(graphHopperStorage0);
      // Undeclared exception!
      try { 
        oSMTurnRelationParser0.handleTurnRelationTags((OSMTurnRelation) null, oSMReader0, graphHopperStorage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTurnRelationParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("(+p>&^?*s?AM:R#");
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser("access", 1, vector0);
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      Vector<EncodedValue> vector1 = new Vector<EncodedValue>();
      // Undeclared exception!
      try { 
        oSMTurnRelationParser0.createTurnCostEncodedValues(encodingManager0, vector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot find EncodedValue access$access in collection: null
         //
         verifyException("com.graphhopper.routing.util.EncodingManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("(+p>&^?*s?AM:R#");
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser("access", 1, vector0);
      OSMTurnRelation.Type oSMTurnRelation_Type0 = OSMTurnRelation.Type.NOT;
      OSMTurnRelation oSMTurnRelation0 = new OSMTurnRelation((-30L), 1L, 32L, oSMTurnRelation_Type0);
      RAMDirectory rAMDirectory0 = new RAMDirectory("access", false);
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      // Undeclared exception!
      try { 
        oSMTurnRelationParser0.addRelationToTCStorage(oSMTurnRelation0, (TurnCostParser.ExternalInternalMap) null, graphHopperStorage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTurnRelationParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("access");
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser("access", 1, stack0);
      OSMTurnRelation.Type oSMTurnRelation_Type0 = OSMTurnRelation.Type.NOT;
      OSMTurnRelation oSMTurnRelation0 = new OSMTurnRelation(1, 1, 1, oSMTurnRelation_Type0);
      RAMDirectory rAMDirectory0 = new RAMDirectory("access", true);
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true);
      OSMReader oSMReader0 = new OSMReader(graphHopperStorage0);
      // Undeclared exception!
      try { 
        oSMTurnRelationParser0.addRelationToTCStorage(oSMTurnRelation0, oSMReader0, graphHopperStorage0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not built turn table entry for relation of node with osmId:1
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTurnRelationParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OSMTurnRelationParser oSMTurnRelationParser0 = null;
      try {
        oSMTurnRelationParser0 = new OSMTurnRelationParser((String) null, 544, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("(+p>&^?*s?AM:R#");
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser("access", 1, vector0);
      String string0 = oSMTurnRelationParser0.getName();
      assertEquals("access", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("access");
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser("access", 1, stack0);
      OSMTurnRelation.Type oSMTurnRelation_Type0 = OSMTurnRelation.Type.NOT;
      OSMTurnRelation oSMTurnRelation0 = new OSMTurnRelation(1, 1, 1, oSMTurnRelation_Type0);
      oSMTurnRelation0.setVehicleTypeRestricted("q");
      RAMDirectory rAMDirectory0 = new RAMDirectory("access", true);
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true);
      OSMReader oSMReader0 = new OSMReader(graphHopperStorage0);
      oSMTurnRelationParser0.handleTurnRelationTags(oSMTurnRelation0, oSMReader0, graphHopperStorage0);
      assertEquals(1L, oSMTurnRelation0.getOsmIdFrom());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("access");
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser("access", 1, vector0);
      OSMTurnRelation.Type oSMTurnRelation_Type0 = OSMTurnRelation.Type.NOT;
      OSMTurnRelation oSMTurnRelation0 = new OSMTurnRelation(1, 1, 1, oSMTurnRelation_Type0);
      RAMDirectory rAMDirectory0 = new RAMDirectory("access", true);
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true, true);
      OSMReader oSMReader0 = new OSMReader(graphHopperStorage0);
      // Undeclared exception!
      try { 
        oSMTurnRelationParser0.handleTurnRelationTags(oSMTurnRelation0, oSMReader0, graphHopperStorage0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not built turn table entry for relation of node with osmId:1
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTurnRelationParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReaderWay readerWay0 = new ReaderWay(1);
      List<String> list0 = readerWay0.getKeysWithPrefix("d");
      OSMTurnRelationParser oSMTurnRelationParser0 = null;
      try {
        oSMTurnRelationParser0 = new OSMTurnRelationParser("d", 1, list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // restrictions cannot be empty
         //
         verifyException("com.graphhopper.routing.util.parsers.OSMTurnRelationParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      stack0.add("access");
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser("access", 1, stack0);
      MotorcycleFlagEncoder motorcycleFlagEncoder0 = new MotorcycleFlagEncoder();
      Stack<EncodedValue> stack1 = new Stack<EncodedValue>();
      // Undeclared exception!
      try { 
        oSMTurnRelationParser0.createTurnCostEncodedValues(motorcycleFlagEncoder0, stack1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.AbstractFlagEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("(+p>&^?*s?AM:R#");
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser("access", 1, vector0);
      DecimalEncodedValue decimalEncodedValue0 = oSMTurnRelationParser0.getTurnCostEnc();
      assertEquals(0.0, decimalEncodedValue0.getMaxDecimal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("(+p>&^?*s?AM:R#");
      OSMTurnRelationParser oSMTurnRelationParser0 = new OSMTurnRelationParser("access", 1, vector0);
      String string0 = oSMTurnRelationParser0.toString();
      assertEquals("access", string0);
  }
}
