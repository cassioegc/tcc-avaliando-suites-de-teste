/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:56:44 GMT 2021
 */

package com.graphhopper.routing.ev;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.ev.Country;
import com.graphhopper.routing.ev.EnumEncodedValue;
import com.graphhopper.routing.ev.HazmatTunnel;
import com.graphhopper.routing.ev.HazmatWater;
import com.graphhopper.routing.ev.RoadAccess;
import com.graphhopper.routing.ev.RoadEnvironment;
import com.graphhopper.routing.ev.RouteNetwork;
import com.graphhopper.routing.ev.Surface;
import com.graphhopper.storage.IntsRef;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnumEncodedValue_ESTest extends EnumEncodedValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Country> class0 = Country.class;
      EnumEncodedValue<Country> enumEncodedValue0 = new EnumEncodedValue<Country>("yes", class0);
      int int0 = enumEncodedValue0.getVersion();
      assertEquals(222513877, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<RoadEnvironment> class0 = RoadEnvironment.class;
      EnumEncodedValue<RoadEnvironment> enumEncodedValue0 = new EnumEncodedValue<RoadEnvironment>("grade5", class0, true);
      enumEncodedValue0.fwdMask = (-1);
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      RoadEnvironment roadEnvironment0 = RoadEnvironment.BRIDGE;
      // Undeclared exception!
      try { 
        enumEncodedValue0.setEnum(true, intsRef0, roadEnvironment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // grade5 value too large for encoding: 4, maxValue:0
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HazmatTunnel> class0 = HazmatTunnel.class;
      EnumEncodedValue<HazmatTunnel> enumEncodedValue0 = null;
      try {
        enumEncodedValue0 = new EnumEncodedValue<HazmatTunnel>((String) null, class0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.EncodingManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<RoadAccess> class0 = RoadAccess.class;
      EnumEncodedValue<RoadAccess> enumEncodedValue0 = null;
      try {
        enumEncodedValue0 = new EnumEncodedValue<RoadAccess>("STEPS", class0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodedValue name wasn't valid: STEPS. Use lower case letters, underscore and numbers only.
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<RoadEnvironment> class0 = RoadEnvironment.class;
      EnumEncodedValue<RoadEnvironment> enumEncodedValue0 = null;
      try {
        enumEncodedValue0 = new EnumEncodedValue<RoadEnvironment>((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.util.EncodingManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HazmatWater> class0 = HazmatWater.class;
      EnumEncodedValue<HazmatWater> enumEncodedValue0 = new EnumEncodedValue<HazmatWater>("tunnel", class0, false);
      boolean boolean0 = enumEncodedValue0.equals("tunnel");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<RouteNetwork> class0 = RouteNetwork.class;
      EnumEncodedValue<RouteNetwork> enumEncodedValue0 = new EnumEncodedValue<RouteNetwork>("yes", class0);
      Class<HazmatTunnel> class1 = HazmatTunnel.class;
      EnumEncodedValue<HazmatTunnel> enumEncodedValue1 = new EnumEncodedValue<HazmatTunnel>("yes", class1);
      boolean boolean0 = enumEncodedValue1.equals(enumEncodedValue0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HazmatWater> class0 = HazmatWater.class;
      EnumEncodedValue<HazmatWater> enumEncodedValue0 = new EnumEncodedValue<HazmatWater>("tunnel", class0, false);
      // Undeclared exception!
      try { 
        enumEncodedValue0.getEnum(false, (IntsRef) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Surface> class0 = Surface.class;
      EnumEncodedValue<Surface> enumEncodedValue0 = new EnumEncodedValue<Surface>("tunnel", class0);
      Surface[] surfaceArray0 = enumEncodedValue0.getValues();
      assertEquals(15, surfaceArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<RoadEnvironment> class0 = RoadEnvironment.class;
      EnumEncodedValue<RoadEnvironment> enumEncodedValue0 = new EnumEncodedValue<RoadEnvironment>("grade5", class0, true);
      IntsRef intsRef0 = mock(IntsRef.class, new ViolatedAssumptionAnswer());
      RoadEnvironment roadEnvironment0 = RoadEnvironment.BRIDGE;
      // Undeclared exception!
      try { 
        enumEncodedValue0.setEnum(true, intsRef0, roadEnvironment0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // EncodedValue grade5 not initialized
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HazmatWater> class0 = HazmatWater.class;
      EnumEncodedValue<HazmatWater> enumEncodedValue0 = null;
      try {
        enumEncodedValue0 = new EnumEncodedValue<HazmatWater>("` 6+S<ZW_<+)z", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // EncodedValue name wasn't valid: ` 6+S<ZW_<+)z. Use lower case letters, underscore and numbers only.
         //
         verifyException("com.graphhopper.routing.ev.UnsignedIntEncodedValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<RoadEnvironment> class0 = RoadEnvironment.class;
      EnumEncodedValue<RoadEnvironment> enumEncodedValue0 = new EnumEncodedValue<RoadEnvironment>("grade5", class0, true);
      int int0 = enumEncodedValue0.getVersion();
      assertEquals((-1401932875), int0);
  }
}
