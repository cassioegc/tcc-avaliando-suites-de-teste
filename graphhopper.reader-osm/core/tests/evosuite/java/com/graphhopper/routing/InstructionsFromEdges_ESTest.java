/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 01:28:54 GMT 2021
 */

package com.graphhopper.routing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.InstructionsFromEdges;
import com.graphhopper.routing.Path;
import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.util.FlagEncoderFactory;
import com.graphhopper.routing.util.RacingBikeFlagEncoder;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.DAType;
import com.graphhopper.storage.GHDirectory;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.MMapDirectory;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.util.InstructionList;
import com.graphhopper.util.TranslationMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstructionsFromEdges_ESTest extends InstructionsFromEdges_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory("m[");
      ArrayList<RacingBikeFlagEncoder> arrayList0 = new ArrayList<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, true);
      Path path0 = new Path(graphHopperStorage0);
      Locale locale0 = Locale.PRC;
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      path0.setFound(true);
      // Undeclared exception!
      try { 
        InstructionsFromEdges.calcInstructions(path0, graphHopperStorage0, (Weighting) null, encodingManager0, translationMap_TranslationHashMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory();
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      Path path0 = new Path(graphHopperStorage0);
      path0.setFound(true);
      Locale locale0 = Locale.TAIWAN;
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      // Undeclared exception!
      try { 
        InstructionsFromEdges.calcInstructions(path0, graphHopperStorage0, (Weighting) null, encodingManager0, translationMap_TranslationHashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MMapDirectory mMapDirectory0 = new MMapDirectory((String) null);
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, true, true, 0);
      Path path0 = new Path(graphHopperStorage0);
      Locale locale0 = Locale.UK;
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      InstructionList instructionList0 = InstructionsFromEdges.calcInstructions(path0, graphHopperStorage0, (Weighting) null, encodingManager0, translationMap_TranslationHashMap0);
      InstructionsFromEdges instructionsFromEdges0 = null;
      try {
        instructionsFromEdges0 = new InstructionsFromEdges(graphHopperStorage0, (Weighting) null, encodingManager0, instructionList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.InstructionsFromEdges", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DAType.MemRef dAType_MemRef0 = DAType.MemRef.MMAP;
      DAType dAType0 = new DAType(dAType_MemRef0, true, true, true);
      GHDirectory gHDirectory0 = new GHDirectory("m[", dAType0);
      ArrayList<RacingBikeFlagEncoder> arrayList0 = new ArrayList<RacingBikeFlagEncoder>();
      EncodingManager encodingManager0 = EncodingManager.create((List<? extends FlagEncoder>) arrayList0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(gHDirectory0, encodingManager0, true, true);
      Path path0 = new Path(graphHopperStorage0);
      Locale locale0 = Locale.PRC;
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      path0.addEdge((-886));
      path0.setFound(true);
      // Undeclared exception!
      try { 
        InstructionsFromEdges.calcInstructions(path0, graphHopperStorage0, (Weighting) null, encodingManager0, translationMap_TranslationHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.InstructionsFromEdges", e);
      }
  }
}
