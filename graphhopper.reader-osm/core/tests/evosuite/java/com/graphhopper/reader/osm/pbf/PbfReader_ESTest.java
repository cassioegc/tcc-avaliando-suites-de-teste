/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:52:09 GMT 2021
 */

package com.graphhopper.reader.osm.pbf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.osm.pbf.PbfReader;
import com.graphhopper.reader.osm.pbf.Sink;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PbfReader_ESTest extends PbfReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Sink sink0 = mock(Sink.class, new ViolatedAssumptionAnswer());
      PbfReader pbfReader0 = new PbfReader((InputStream) null, sink0, 1857);
      // Undeclared exception!
      try { 
        pbfReader0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(inputStream0).read();
      Sink sink0 = mock(Sink.class, new ViolatedAssumptionAnswer());
      PbfReader pbfReader0 = new PbfReader(inputStream0, sink0, 2497);
      pbfReader0.run();
      // Undeclared exception!
      try { 
        pbfReader0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to read PBF file.
         //
         verifyException("com.graphhopper.reader.osm.pbf.PbfReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      Sink sink0 = mock(Sink.class, new ViolatedAssumptionAnswer());
      PbfReader pbfReader0 = new PbfReader(inputStream0, sink0, 2497);
      pbfReader0.close();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      Sink sink0 = mock(Sink.class, new ViolatedAssumptionAnswer());
      PbfReader pbfReader0 = new PbfReader(inputStream0, sink0, 0);
      // Undeclared exception!
      try { 
        pbfReader0.run();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }
}
