/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:56:34 GMT 2021
 */

package com.graphhopper.reader.dem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.dem.SRTMGL1Provider;
import com.graphhopper.reader.dem.SRTMProvider;
import com.graphhopper.reader.dem.SkadiProvider;
import com.graphhopper.storage.DAType;
import com.graphhopper.storage.Directory;
import com.graphhopper.storage.RAMDirectory;
import java.io.File;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractSRTMElevationProvider_ESTest extends AbstractSRTMElevationProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SkadiProvider skadiProvider0 = new SkadiProvider();
      skadiProvider0.setSleep(1L);
      skadiProvider0.release();
      skadiProvider0.setInterpolate(true);
      skadiProvider0.down(0.009999999776482582);
      int int0 = (-613);
      skadiProvider0.getPaddedLonString((-613));
      double double0 = 1.0;
      skadiProvider0.setAutoRemoveTemporaryFiles(true);
      // Undeclared exception!
      try { 
        skadiProvider0.getEle(0.009999999776482582, 0.009999999776482582);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There was an issue looking up the coordinates for 0.0099999,0.0099999
         //
         verifyException("com.graphhopper.reader.dem.AbstractSRTMElevationProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SkadiProvider skadiProvider0 = new SkadiProvider("<WNEV A&Ye#");
      skadiProvider0.getDirectory();
      skadiProvider0.getPaddedLatString(1048576);
      skadiProvider0.baseUrl = "cannot load dem";
      skadiProvider0.down(1048576);
      skadiProvider0.release();
      skadiProvider0.baseUrl = "i,-d3i(>TSH]q~_!H";
      skadiProvider0.getFileName(1048576, 0.0);
      SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SkadiProvider skadiProvider0 = new SkadiProvider("");
      skadiProvider0.getPaddedLonString((-32768));
      skadiProvider0.getPaddedLatString(3292);
      SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider("32768");
      sRTMGL1Provider0.getMinLatForTile(0.5);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider();
      sRTMGL1Provider0.getDownloadURL(3270.542392358, 3270.542392358);
      sRTMGL1Provider0.calcIntKey(3270.542392358, 3270.542392358);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider();
      sRTMGL1Provider0.down((-2148.011));
      sRTMGL1Provider0.release();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "r$H12q@<Rl";
      stringArray0[3] = "e}";
      stringArray0[4] = "o!Vx}AFHP(k;{C";
      // Undeclared exception!
      try { 
        SRTMProvider.main(stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot load area names from classpath
         //
         verifyException("com.graphhopper.reader.dem.SRTMProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SkadiProvider skadiProvider0 = new SkadiProvider();
      skadiProvider0.setInterpolate(true);
      skadiProvider0.release();
      skadiProvider0.getDownloadURL(1397.7959450718, 1.0E7);
      skadiProvider0.getEle(1.0E7, 1397.7959450718);
      SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider("");
      RAMDirectory rAMDirectory0 = new RAMDirectory("", false);
      DAType dAType0 = DAType.RAM_INT_STORE;
      Directory directory0 = rAMDirectory0.put("", dAType0);
      sRTMGL1Provider0.dir = directory0;
      sRTMGL1Provider0.getFileName(0.0, 1.0E7);
      skadiProvider0.getFileName((-1558.4), 1.0E7);
      skadiProvider0.release();
      skadiProvider0.release();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider("SA*bQ.x7/Q,");
      sRTMGL1Provider0.getEle((-1007.024236093158), 1732.3329530248);
      sRTMGL1Provider0.getMinLatForTile(1125.4251752013333);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SRTMProvider sRTMProvider0 = null;
      try {
        sRTMProvider0 = new SRTMProvider();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot load area names from classpath
         //
         verifyException("com.graphhopper.reader.dem.SRTMProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider();
      sRTMGL1Provider0.sleep = 123321123321123312L;
      sRTMGL1Provider0.interpolate = false;
      sRTMGL1Provider0.setAutoRemoveTemporaryFiles(false);
      sRTMGL1Provider0.calcIntKey((-1198.244945674), (-1198.244945674));
      double double0 = 0.0;
      sRTMGL1Provider0.down(0.0);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SRTMProvider.main((String[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot load area names from classpath
         //
         verifyException("com.graphhopper.reader.dem.SRTMProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider("t>-DT?Iv<4.G^tSA1");
      sRTMGL1Provider0.toString();
      sRTMGL1Provider0.release();
      double double0 = 59.999;
      // Undeclared exception!
      try { 
        sRTMGL1Provider0.getEle(59.999, 59.999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There was an issue looking up the coordinates for 59.999,59.999
         //
         verifyException("com.graphhopper.reader.dem.AbstractSRTMElevationProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SRTMGL1Provider sRTMGL1Provider0 = new SRTMGL1Provider("com.graphhopper.reader.dem.AbstractSRTMElevationProvider");
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      File file0 = MockFile.createTempFile("com.graphhopper.reader.dem.AbstractSRTMElevationProvider", "ZP<[aFZ]i[=D", (File) mockFile0);
      sRTMGL1Provider0.readFile(file0);
      sRTMGL1Provider0.getFileName(0.0, 0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "com.graphhopper.reader.dem.AbstractSRTMElevationProvider";
      // Undeclared exception!
      try { 
        SkadiProvider.main(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There was an issue looking up the coordinates for 49.949784,11.57517
         //
         verifyException("com.graphhopper.reader.dem.AbstractSRTMElevationProvider", e);
      }
  }
}
