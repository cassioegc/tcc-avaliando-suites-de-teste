/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:05:23 GMT 2021
 */

package com.graphhopper.reader.osm.conditional;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.osm.conditional.DateRange;
import com.graphhopper.reader.osm.conditional.ParsedCalendar;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateRange_ESTest extends DateRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1103), (-1103), (-2746), 0, (-2746), (-1103));
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      dateRange0.reverse = true;
      dateRange0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-13), (-13), 0);
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      parsedCalendar0.getMin();
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar((-13), (-13), (-13), 0, (-13), 0);
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      dateRange0.isInRange(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(0, 0, 0);
      parsedCalendar0.getMax();
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      dateRange0.isInRange(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH_DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)parsedCalendar0.getMin();
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      dateRange0.isInRange(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      mockGregorianCalendar0.setTimeInMillis(0);
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(timeZone0);
      dateRange0.isInRange(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH_DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-16), (-16), 10, (-16), 583, (-304));
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      TimeZone timeZone0 = TimeZone.getTimeZone("y7>}z+");
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0, locale0);
      dateRange0.isInRange(mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-13), 0, 0);
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      parsedCalendar0.getMin();
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      dateRange0.isInRange(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      mockGregorianCalendar1.clear();
      dateRange0.isInRange(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)parsedCalendar0.getMax();
      mockGregorianCalendar2.set((-182), (-182), 2919, 0, (-1692));
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      dateRange0.isInRange(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      Calendar calendar0 = MockCalendar.getInstance();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, calendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      dateRange0.reverse = true;
      System.setCurrentTimeMillis((-517L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar1 = MockCalendar.getInstance(timeZone0);
      dateRange0.isInRange(calendar1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1103), (-1103), (-2746), 0, (-2746), (-1103));
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      dateRange0.reverse = true;
      Locale locale0 = new Locale("r=[Ah*B`iQU}!$*OS4T");
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(locale0);
      dateRange0.isInRange(mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1103), (-1103), (-2746), 0, (-2746), (-1103));
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      // Undeclared exception!
      try { 
        dateRange0.isInRange((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.reader.osm.conditional.DateRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.YEAR_MONTH_DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 7, 7, 7, 7);
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      dateRange0.dayOnly = true;
      mockGregorianCalendar0.set(0, 86);
      // Undeclared exception!
      try { 
        dateRange0.isInRange(parsedCalendar0.parsedCalendar);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange((ParsedCalendar) null, (ParsedCalendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.reader.osm.conditional.DateRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.YEAR_MONTH_DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 7, 7, 7, 7);
      mockGregorianCalendar0.set(0, 86);
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 596);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(596, 596, 596);
      parsedCalendar0.getMax();
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      mockGregorianCalendar1.set(1, (-2433), 596, (-2433), (-2433));
      parsedCalendar1.getMin();
      dateRange0.isInRange(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), (-13));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-13), (-13), (-13), (-13), (-13));
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar();
      parsedCalendar0.getMax();
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      mockGregorianCalendar1.clear();
      dateRange0.isInRange(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, calendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      dateRange0.reverse = false;
      dateRange0.reverse = true;
      Locale locale0 = Locale.TAIWAN;
      Calendar calendar1 = MockCalendar.getInstance(timeZone0, locale0);
      dateRange0.isInRange(calendar1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      dateRange0.reverse = true;
      parsedCalendar0.getMin();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      dateRange0.isInRange(calendar0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 596);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      parsedCalendar0.getMax();
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      dateRange0.isInRange(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, calendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      dateRange0.reverse = false;
      dateRange0.reverse = true;
      dateRange0.isInRange(calendar0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      parsedCalendar0.getMax();
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      dateRange0.isInRange(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH_DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1103), (-1103), (-2721), 0, (-2721), (-1103));
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, (-2721), (-2721), (-1103), 0, (-2721));
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      dateRange0.reverse = true;
      dateRange0.isInRange(mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 596);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(596, 596, 596);
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      mockGregorianCalendar1.set((-10), (-2433), 596, (-2433), (-2433));
      parsedCalendar1.getMin();
      dateRange0.isInRange(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)parsedCalendar0.getMax();
      mockGregorianCalendar2.set((-182), (-182), 2919, 2919, (-1692));
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      dateRange0.isInRange(mockGregorianCalendar1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar();
      mockGregorianCalendar0.set((-182), (-182), 2919, 2919, (-1692));
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      parsedCalendar0.getMax();
      dateRange0.isInRange(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      parsedCalendar0.getMin();
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      dateRange0.isInRange(calendar0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar();
      mockGregorianCalendar0.set((-182), (-182), 2919, 2919, (-1692));
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      dateRange0.isInRange(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar();
      mockGregorianCalendar0.set((-182), (-182), 2919, 2919, (-1692));
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      mockGregorianCalendar2.set((-1692), 2147483625, 2919, (-182), (-1692));
      dateRange0.isInRange(mockGregorianCalendar2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar((ParsedCalendar.ParseType) null, calendar0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isYearless());
      assertNotNull(parsedCalendar0);
      
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isYearless());
      assertNotNull(dateRange0);
      
      dateRange0.yearless = true;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isYearless());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      
      mockGregorianCalendar0.set(0, 4, 4, 4, 4, 0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=4,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=4,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=4,MINUTE=4,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)calendar0));
      
      boolean boolean0 = dateRange0.isInRange(mockGregorianCalendar0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392422399999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isYearless());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62156663759680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=125,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=4,SECOND=0,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertFalse(boolean0);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 596);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(parsedCalendar0.isDayOnly());
      assertTrue(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isYearless());
      assertNotNull(parsedCalendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)parsedCalendar0.getMax();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=30,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(parsedCalendar0.isDayOnly());
      assertTrue(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isYearless());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=30,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar2.toString());
      assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar2.isLenient());
      assertNotNull(mockGregorianCalendar2);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertSame(mockGregorianCalendar2, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=30,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertFalse(parsedCalendar0.isDayOnly());
      assertTrue(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar1.isDayOnly());
      assertTrue(parsedCalendar1.isDayless());
      assertTrue(parsedCalendar1.isYearless());
      assertNotNull(parsedCalendar1);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=1,DAY_OF_YEAR=364,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=30,DAY_OF_YEAR=320,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertFalse(parsedCalendar0.isDayOnly());
      assertTrue(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar1.isDayOnly());
      assertTrue(parsedCalendar1.isDayless());
      assertTrue(parsedCalendar1.isYearless());
      assertNotNull(dateRange0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      boolean boolean0 = dateRange0.isInRange(mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62611833600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=11,WEEK_OF_YEAR=48,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=335,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62611833600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=334,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertFalse(parsedCalendar0.isDayOnly());
      assertTrue(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar1.isDayOnly());
      assertTrue(parsedCalendar1.isDayless());
      assertTrue(parsedCalendar1.isYearless());
      assertSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar2);
      assertNotSame(parsedCalendar0, parsedCalendar1);
      assertNotSame(parsedCalendar1, parsedCalendar0);
      assertTrue(boolean0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(847, 847, 847, 847, 847);
      assertNotNull(mockGregorianCalendar0);
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=847,MONTH=847,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=847,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=847,HOUR_OF_DAY=847,MINUTE=847,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isYearless());
      assertNotNull(parsedCalendar0);
      
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=919,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isYearless());
      assertNotNull(dateRange0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      
      boolean boolean0 = dateRange0.isInRange(calendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-33134486400001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=919,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isYearless());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotSame(mockGregorianCalendar0, calendar0);
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertFalse(boolean0);
      assertFalse(mockGregorianCalendar0.equals((Object)calendar0));
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertNotNull(parsedCalendar0);
      
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertNotNull(dateRange0);
      
      System.setCurrentTimeMillis((-517L));
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Calendar calendar1 = MockCalendar.getInstance(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-517,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=483,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertEquals(1, calendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar1.getFirstDayOfWeek());
      assertTrue(calendar1.isLenient());
      assertNotNull(calendar1);
      assertNotSame(calendar1, calendar0);
      assertFalse(calendar1.equals((Object)calendar0));
      
      boolean boolean0 = dateRange0.isInRange(calendar1);
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392422399999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-517,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=483,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertEquals(1, calendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar1.getFirstDayOfWeek());
      assertTrue(calendar1.isLenient());
      assertNotSame(calendar0, calendar1);
      assertNotSame(calendar1, calendar0);
      assertFalse(boolean0);
      assertFalse(calendar0.equals((Object)calendar1));
      assertFalse(calendar1.equals((Object)calendar0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 596);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isYearless());
      assertNotNull(parsedCalendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(596, 596, 596);
      assertNotNull(mockGregorianCalendar2);
      assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
      
      MockGregorianCalendar mockGregorianCalendar3 = (MockGregorianCalendar)parsedCalendar0.getMax();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isYearless());
      assertTrue(mockGregorianCalendar3.isLenient());
      assertEquals(1, mockGregorianCalendar3.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar3.toString());
      assertEquals(1, mockGregorianCalendar3.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar3);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar3);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar3, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar3, mockGregorianCalendar2);
      assertSame(mockGregorianCalendar3, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
      assertTrue(mockGregorianCalendar3.equals((Object)mockGregorianCalendar2));
      assertTrue(mockGregorianCalendar3.equals((Object)mockGregorianCalendar1));
      
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertTrue(parsedCalendar1.isDayOnly());
      assertNotNull(parsedCalendar1);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar3));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=321,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=320,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertTrue(parsedCalendar1.isDayOnly());
      assertNotNull(dateRange0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar3));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      mockGregorianCalendar1.set(1, (-2433), 596, (-2433), (-2433));
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=321,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=-2433,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=596,DAY_OF_YEAR=320,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=-2433,MINUTE=-2433,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar3);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar3);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar3));
      
      boolean boolean0 = dateRange0.isInRange(mockGregorianCalendar2);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62613043200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=321,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-68523240720001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=203,MONTH=7,WEEK_OF_YEAR=32,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=217,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=27,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isYearless());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-41740272000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=647,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=19,DAY_OF_YEAR=109,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar2.toString());
      assertTrue(mockGregorianCalendar2.isLenient());
      assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
      assertFalse(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertTrue(parsedCalendar1.isDayOnly());
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar3);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar3);
      assertNotSame(parsedCalendar0, parsedCalendar1);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar3);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
      assertNotSame(parsedCalendar1, parsedCalendar0);
      assertFalse(boolean0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar3));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar3));
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 596);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertNotNull(parsedCalendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)parsedCalendar0.getMax();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar2.toString());
      assertTrue(mockGregorianCalendar2.isLenient());
      assertNotNull(mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertSame(mockGregorianCalendar2, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertFalse(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isDayless());
      assertFalse(parsedCalendar1.isYearless());
      assertNotNull(parsedCalendar1);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=321,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=320,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertFalse(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isDayless());
      assertFalse(parsedCalendar1.isYearless());
      assertNotNull(dateRange0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      boolean boolean0 = dateRange0.isInRange(mockGregorianCalendar1);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62613043200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=321,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62613043200001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=320,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertFalse(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isDayless());
      assertFalse(parsedCalendar1.isYearless());
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar2);
      assertNotSame(parsedCalendar0, parsedCalendar1);
      assertNotSame(parsedCalendar1, parsedCalendar0);
      assertTrue(boolean0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertNotNull(parsedCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 0, 0);
      assertNotNull(mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      ParsedCalendar.ParseType parsedCalendar_ParseType1 = ParsedCalendar.ParseType.MONTH_DAY;
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar_ParseType1, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isDayless());
      assertTrue(parsedCalendar1.isYearless());
      assertNotNull(parsedCalendar1);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(parsedCalendar_ParseType1.equals((Object)parsedCalendar_ParseType0));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isDayless());
      assertTrue(parsedCalendar1.isYearless());
      assertNotNull(dateRange0);
      assertFalse(parsedCalendar_ParseType0.equals((Object)parsedCalendar_ParseType1));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(parsedCalendar_ParseType1.equals((Object)parsedCalendar_ParseType0));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      boolean boolean0 = dateRange0.isInRange(mockGregorianCalendar1);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertFalse(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isDayless());
      assertTrue(parsedCalendar1.isYearless());
      assertNotSame(parsedCalendar_ParseType0, parsedCalendar_ParseType1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(parsedCalendar0, parsedCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(parsedCalendar_ParseType1, parsedCalendar_ParseType0);
      assertNotSame(parsedCalendar1, parsedCalendar0);
      assertFalse(boolean0);
      assertFalse(parsedCalendar_ParseType0.equals((Object)parsedCalendar_ParseType1));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(parsedCalendar_ParseType1.equals((Object)parsedCalendar_ParseType0));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 5, 5, 5);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=5,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=5,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=5,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=5,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=5,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=5,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertNotNull(parsedCalendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      
      mockGregorianCalendar1.set(4995, (-3129), 454, 454, (-1226), 3411);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=5,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=5,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4995,MONTH=-3129,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=454,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=454,MINUTE=-1226,SECOND=3411,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      MockGregorianCalendar mockGregorianCalendar2 = new MockGregorianCalendar(5, 5, 5);
      assertNotNull(mockGregorianCalendar2);
      assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
      
      ParsedCalendar.ParseType parsedCalendar_ParseType1 = ParsedCalendar.ParseType.MONTH_DAY;
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar_ParseType1, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=5,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=5,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4995,MONTH=-3129,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=454,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=454,MINUTE=-1226,SECOND=3411,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertTrue(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertFalse(parsedCalendar1.isDayOnly());
      assertNotNull(parsedCalendar1);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(parsedCalendar_ParseType1.equals((Object)parsedCalendar_ParseType0));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=156,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4735,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=197,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=2,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertTrue(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertFalse(parsedCalendar1.isDayOnly());
      assertNotNull(dateRange0);
      assertFalse(parsedCalendar_ParseType0.equals((Object)parsedCalendar_ParseType1));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(parsedCalendar_ParseType1.equals((Object)parsedCalendar_ParseType0));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      boolean boolean0 = dateRange0.isInRange(mockGregorianCalendar2);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=156,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4735,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=197,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=2,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=5,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar2.toString());
      assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar2.isLenient());
      assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
      assertTrue(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertFalse(parsedCalendar1.isDayOnly());
      assertNotSame(parsedCalendar_ParseType0, parsedCalendar_ParseType1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(parsedCalendar0, parsedCalendar1);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
      assertNotSame(parsedCalendar_ParseType1, parsedCalendar_ParseType0);
      assertNotSame(parsedCalendar1, parsedCalendar0);
      assertTrue(boolean0);
      assertFalse(parsedCalendar_ParseType0.equals((Object)parsedCalendar_ParseType1));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      assertFalse(parsedCalendar_ParseType1.equals((Object)parsedCalendar_ParseType0));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isDayOnly());
      assertNotNull(parsedCalendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)parsedCalendar0.getMax();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isDayOnly());
      assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar2.toString());
      assertTrue(mockGregorianCalendar2.isLenient());
      assertNotNull(mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertSame(mockGregorianCalendar2, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      
      ParsedCalendar.ParseType parsedCalendar_ParseType1 = ParsedCalendar.ParseType.DAY;
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar_ParseType1, mockGregorianCalendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertNotNull(parsedCalendar1);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(parsedCalendar_ParseType1.equals((Object)parsedCalendar_ParseType0));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      DateRange dateRange0 = new DateRange(parsedCalendar1, parsedCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isDayOnly());
      assertTrue(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertNotNull(dateRange0);
      assertFalse(parsedCalendar_ParseType0.equals((Object)parsedCalendar_ParseType1));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(parsedCalendar_ParseType1.equals((Object)parsedCalendar_ParseType0));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      boolean boolean0 = dateRange0.isInRange(parsedCalendar0.parsedCalendar);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertTrue(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isDayOnly());
      assertTrue(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertNotSame(parsedCalendar_ParseType0, parsedCalendar_ParseType1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar2);
      assertNotSame(parsedCalendar0, parsedCalendar1);
      assertNotSame(parsedCalendar_ParseType1, parsedCalendar_ParseType0);
      assertNotSame(parsedCalendar1, parsedCalendar0);
      assertTrue(boolean0);
      assertFalse(parsedCalendar_ParseType0.equals((Object)parsedCalendar_ParseType1));
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(parsedCalendar_ParseType1.equals((Object)parsedCalendar_ParseType0));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 596);
      assertNotNull(mockGregorianCalendar0);
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isYearless());
      assertNotNull(parsedCalendar0);
      
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=320,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isYearless());
      assertNotNull(dateRange0);
      
      boolean boolean0 = dateRange0.isInRange(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62613043200001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=320,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertFalse(parsedCalendar0.isYearless());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), (-13));
      assertNotNull(mockGregorianCalendar0);
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=-13,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isDayOnly());
      assertNotNull(parsedCalendar0);
      
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=30,DAY_OF_YEAR=320,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=10,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isDayOnly());
      assertNotNull(dateRange0);
      
      boolean boolean0 = dateRange0.isInRange(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62611833600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=334,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertTrue(parsedCalendar0.isYearless());
      assertTrue(parsedCalendar0.isDayless());
      assertFalse(parsedCalendar0.isDayOnly());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 596);
      assertNotNull(mockGregorianCalendar0);
      
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertNotNull(mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertNotNull(parsedCalendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      
      MockGregorianCalendar mockGregorianCalendar2 = (MockGregorianCalendar)parsedCalendar0.getMax();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertTrue(mockGregorianCalendar2.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar2.toString());
      assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
      assertSame(mockGregorianCalendar2, mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-13,MONTH=-13,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-13,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-13,HOUR_OF_DAY=-13,MINUTE=596,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertTrue(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertNotNull(parsedCalendar1);
      assertTrue(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=321,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=320,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertTrue(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertNotNull(dateRange0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
      
      boolean boolean0 = dateRange0.isInRange(mockGregorianCalendar2);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62613043200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=321,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=320,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=8,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
      assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar1.isLenient());
      assertFalse(parsedCalendar0.isYearless());
      assertFalse(parsedCalendar0.isDayless());
      assertTrue(parsedCalendar0.isDayOnly());
      assertTrue(mockGregorianCalendar2.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62613043200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=16,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=321,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar2.toString());
      assertEquals(1, mockGregorianCalendar2.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar2.getFirstDayOfWeek());
      assertTrue(parsedCalendar1.isDayOnly());
      assertFalse(parsedCalendar1.isYearless());
      assertFalse(parsedCalendar1.isDayless());
      assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
      assertSame(mockGregorianCalendar0, mockGregorianCalendar2);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
      assertNotSame(mockGregorianCalendar1, mockGregorianCalendar2);
      assertNotSame(parsedCalendar0, parsedCalendar1);
      assertNotSame(mockGregorianCalendar2, mockGregorianCalendar1);
      assertSame(mockGregorianCalendar2, mockGregorianCalendar0);
      assertNotSame(parsedCalendar1, parsedCalendar0);
      assertTrue(boolean0);
      assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
      assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar2));
      assertFalse(parsedCalendar0.equals((Object)parsedCalendar1));
      assertFalse(mockGregorianCalendar2.equals((Object)mockGregorianCalendar1));
      assertFalse(parsedCalendar1.equals((Object)parsedCalendar0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      parsedCalendar0.getMax();
      ParsedCalendar.ParseType parsedCalendar_ParseType1 = ParsedCalendar.ParseType.DAY;
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar_ParseType1, mockGregorianCalendar1);
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 'from' after 'to' not allowed, except for isYearless and isDayOnly DateRanges. From:MONTH; 0001-01-31T23:59:59Z To:DAY; 0002-12-31T00:00:00Z
         //
         verifyException("com.graphhopper.reader.osm.conditional.DateRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      ParsedCalendar.ParseType parsedCalendar_ParseType1 = ParsedCalendar.ParseType.DAY;
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar_ParseType1, mockGregorianCalendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar1, parsedCalendar0);
      boolean boolean0 = dateRange0.isInRange(parsedCalendar0.parsedCalendar);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      boolean boolean0 = dateRange0.isInRange(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1393631999999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.MONTH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-13), (-13), (-13), (-13), 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)mockGregorianCalendar0.clone();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, mockGregorianCalendar0);
      mockGregorianCalendar0.setTimeInMillis(0);
      ParsedCalendar parsedCalendar1 = new ParsedCalendar(parsedCalendar0.parseType, mockGregorianCalendar1);
      DateRange dateRange0 = null;
      try {
        dateRange0 = new DateRange(parsedCalendar0, parsedCalendar1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Different calendar eras are not allowed. From:MONTH; 1970-01-01T00:00:00Z To:MONTH; 0016-11-16T11:00:00Z
         //
         verifyException("com.graphhopper.reader.osm.conditional.DateRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ParsedCalendar.ParseType parsedCalendar_ParseType0 = ParsedCalendar.ParseType.DAY;
      Calendar calendar0 = MockCalendar.getInstance();
      ParsedCalendar parsedCalendar0 = new ParsedCalendar(parsedCalendar_ParseType0, calendar0);
      DateRange dateRange0 = new DateRange(parsedCalendar0, parsedCalendar0);
      String string0 = dateRange0.toString();
      assertEquals("yearless:false, dayOnly:true, reverse:false, from:2014-02-14T20:21:21Z, to:2014-02-14T20:21:21Z", string0);
  }
}
