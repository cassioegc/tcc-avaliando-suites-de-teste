/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Apr 04 03:45:50 GMT 2021
 */

package com.graphhopper.reader.dem;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class GMTEDProvider_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.graphhopper.reader.dem.GMTEDProvider"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/cassioegc/tcc/graphhopper.reader-osm/core"); 
    java.lang.System.setProperty("user.home", "/home/cassioegc"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "cassioegc"); 
    java.lang.System.setProperty("user.timezone", ""); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(GMTEDProvider_ESTest_scaffolding.class.getClassLoader() ,
      "com.graphhopper.reader.dem.AbstractTiffElevationProvider",
      "org.locationtech.jts.geom.util.GeometryMapper$MapOp",
      "org.locationtech.jts.geom.CoordinateSequence",
      "com.graphhopper.util.BitUtilLittle",
      "org.apache.xmlgraphics.image.codec.util.PropertyUtil",
      "org.locationtech.jts.geom.CoordinateFilter",
      "com.graphhopper.util.shapes.GHPoint3D",
      "org.locationtech.jts.geom.GeometryComponentFilter",
      "com.graphhopper.storage.GHDirectory",
      "org.apache.xmlgraphics.util.i18n.Localizable",
      "org.locationtech.jts.geom.Coordinate",
      "com.graphhopper.storage.Directory",
      "org.locationtech.jts.geom.Puntal",
      "com.graphhopper.util.Downloader$1",
      "com.graphhopper.util.ShallowImmutablePointList",
      "com.graphhopper.reader.dem.ElevationProvider",
      "com.graphhopper.storage.AbstractDataAccess",
      "com.graphhopper.storage.DAType$MemRef",
      "org.apache.xmlgraphics.image.codec.tiff.TIFFDirectory",
      "com.graphhopper.util.ProgressListener",
      "org.locationtech.jts.geom.MultiLineString",
      "com.graphhopper.util.Helper",
      "org.apache.xmlgraphics.image.codec.util.ImageDecodeParam",
      "org.locationtech.jts.geom.Point",
      "com.graphhopper.util.PointList",
      "org.locationtech.jts.geom.util.GeometryEditor$GeometryEditorOperation",
      "com.graphhopper.util.PointList$1",
      "org.apache.xmlgraphics.image.codec.util.ForwardSeekableStream",
      "org.apache.xmlgraphics.image.codec.util.ImageDecoderImpl",
      "org.locationtech.jts.geom.CoordinateSequenceFilter",
      "org.locationtech.jts.geom.Polygon",
      "org.locationtech.jts.geom.PrecisionModel$Type",
      "com.graphhopper.util.Downloader",
      "org.locationtech.jts.geom.Geometry",
      "org.apache.xmlgraphics.image.codec.tiff.TIFFDecodeParam",
      "org.locationtech.jts.geom.PrecisionModel",
      "com.graphhopper.reader.dem.AbstractElevationProvider",
      "org.locationtech.jts.geom.GeometryFilter",
      "org.locationtech.jts.geom.MultiPolygon",
      "org.locationtech.jts.geom.Geometry$1",
      "com.graphhopper.reader.dem.HeightTile",
      "com.graphhopper.storage.RAMDataAccess",
      "org.locationtech.jts.geom.LinearRing",
      "org.locationtech.jts.geom.IntersectionMatrix",
      "com.graphhopper.storage.MMapDirectory",
      "com.graphhopper.util.BitUtil",
      "org.apache.xmlgraphics.image.codec.tiff.TIFFField",
      "com.graphhopper.storage.Storable",
      "org.apache.xmlgraphics.image.codec.util.MemoryCacheSeekableStream",
      "com.graphhopper.reader.dem.ElevationProvider$1",
      "org.apache.xmlgraphics.image.codec.tiff.TIFFImageDecoder",
      "com.graphhopper.util.PointAccess",
      "com.graphhopper.storage.IntsRef",
      "com.graphhopper.util.BitUtilBig",
      "org.apache.xmlgraphics.util.i18n.LocaleGroup",
      "org.locationtech.jts.geom.impl.CoordinateArraySequenceFactory",
      "com.graphhopper.reader.dem.GMTEDProvider",
      "com.graphhopper.storage.RAMIntDataAccess",
      "org.locationtech.jts.geom.GeometryFactory",
      "org.apache.xmlgraphics.util.i18n.LocalizableSupport",
      "com.graphhopper.storage.RAMDirectory",
      "org.locationtech.jts.geom.Polygonal",
      "com.graphhopper.storage.MMapDataAccess",
      "org.locationtech.jts.geom.Lineal",
      "org.apache.xmlgraphics.image.codec.util.SeekableStream",
      "org.locationtech.jts.geom.GeometryCollection",
      "org.locationtech.jts.geom.CoordinateSequenceFactory",
      "org.locationtech.jts.geom.LineString",
      "com.graphhopper.storage.DAType",
      "com.graphhopper.storage.MMapDataAccess$1",
      "com.graphhopper.storage.DataAccess",
      "org.apache.xmlgraphics.image.codec.util.ImageDecoder",
      "org.locationtech.jts.geom.MultiPoint",
      "com.graphhopper.util.shapes.GHPoint",
      "org.apache.xmlgraphics.image.codec.util.FileCacheSeekableStream",
      "org.locationtech.jts.geom.Envelope",
      "org.locationtech.jts.geom.CoordinateSequenceComparator"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(GMTEDProvider_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.graphhopper.reader.dem.AbstractElevationProvider",
      "com.graphhopper.reader.dem.AbstractTiffElevationProvider",
      "com.graphhopper.reader.dem.GMTEDProvider",
      "com.graphhopper.reader.dem.ElevationProvider$1",
      "com.graphhopper.reader.dem.ElevationProvider",
      "com.graphhopper.storage.DAType",
      "com.graphhopper.util.Downloader",
      "com.graphhopper.util.Helper",
      "com.graphhopper.reader.dem.HeightTile",
      "com.graphhopper.storage.GHDirectory",
      "com.graphhopper.storage.AbstractDataAccess",
      "com.graphhopper.storage.MMapDataAccess",
      "com.graphhopper.util.BitUtilLittle",
      "com.graphhopper.util.BitUtilBig",
      "com.graphhopper.util.BitUtil",
      "org.apache.xmlgraphics.image.codec.util.SeekableStream",
      "org.apache.xmlgraphics.image.codec.util.FileCacheSeekableStream",
      "org.apache.xmlgraphics.image.codec.util.ImageDecoderImpl",
      "org.apache.xmlgraphics.image.codec.tiff.TIFFImageDecoder",
      "org.apache.xmlgraphics.image.codec.tiff.TIFFDecodeParam",
      "org.apache.xmlgraphics.image.codec.tiff.TIFFDirectory",
      "com.graphhopper.storage.MMapDirectory",
      "com.graphhopper.storage.MMapDataAccess$1",
      "com.graphhopper.storage.RAMDirectory",
      "com.graphhopper.util.Downloader$1",
      "com.graphhopper.storage.RAMDataAccess",
      "org.apache.xmlgraphics.util.i18n.LocalizableSupport",
      "org.apache.xmlgraphics.util.i18n.LocaleGroup",
      "org.apache.xmlgraphics.image.codec.util.PropertyUtil",
      "com.graphhopper.storage.DAType$MemRef",
      "org.apache.xmlgraphics.image.codec.util.ForwardSeekableStream"
    );
  }
}
