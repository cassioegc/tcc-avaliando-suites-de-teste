/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:45:50 GMT 2021
 */

package com.graphhopper.reader.dem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.dem.GMTEDProvider;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GMTEDProvider_ESTest extends GMTEDProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider();
      gMTEDProvider0.isOutsideSupportedArea((-70), 0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider();
      gMTEDProvider0.isOutsideSupportedArea(84.0, 9.576393);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider("");
      gMTEDProvider0.isOutsideSupportedArea(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider();
      gMTEDProvider0.getMinLonForTile(0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider("");
      gMTEDProvider0.getMinLonForTile(696.9791323140487);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider("");
      gMTEDProvider0.getMinLonForTile((-232.2082804789));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider("");
      gMTEDProvider0.getMinLatForTile(39.999999);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider();
      gMTEDProvider0.getMinLatForTile(0.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider("");
      gMTEDProvider0.getFileNameOfLocalFile((-1986.647080023), (-1986.647080023));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider("");
      gMTEDProvider0.getFileName(696.9791323140487, 696.9791323140487);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider("");
      gMTEDProvider0.getDownloadURL(872.5, 3944.4462011);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/gmted/30s090w_20101117_gmted_mea075.tif");
      String[] stringArray0 = new String[6];
      GMTEDProvider.main(stringArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      // Undeclared exception!
      GMTEDProvider.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider("");
      MockFile mockFile0 = new MockFile("690n690e_20101117_gmted_mea075");
      // Undeclared exception!
      try { 
        gMTEDProvider0.generateRasterFromFile(mockFile0, "690n690e_20101117_gmted_mea075");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't decode 690n690e_20101117_gmted_mea075
         //
         verifyException("com.graphhopper.reader.dem.GMTEDProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      GMTEDProvider gMTEDProvider0 = null;
      try {
        gMTEDProvider0 = new GMTEDProvider("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.graphhopper.reader.dem.AbstractElevationProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = null;
      try {
        gMTEDProvider0 = new GMTEDProvider((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("8n2d,k2W329!");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<gM}d3nOg*H");
      GMTEDProvider gMTEDProvider0 = null;
      try {
        gMTEDProvider0 = new GMTEDProvider("8n2d,k2W329!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cache path has to be a directory
         //
         verifyException("com.graphhopper.reader.dem.AbstractElevationProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      GMTEDProvider gMTEDProvider0 = null;
      try {
        gMTEDProvider0 = new GMTEDProvider();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Simulated IOException
         //
         verifyException("com.graphhopper.reader.dem.AbstractElevationProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/gmted");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "A]:.#QR|");
      GMTEDProvider gMTEDProvider0 = null;
      try {
        gMTEDProvider0 = new GMTEDProvider();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cache path has to be a directory
         //
         verifyException("com.graphhopper.reader.dem.AbstractElevationProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider();
      boolean boolean0 = gMTEDProvider0.isOutsideSupportedArea((-1440), (-1437.81959375));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider();
      boolean boolean0 = gMTEDProvider0.isOutsideSupportedArea(2794.25329587282, 2794.25329587282);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[3];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/gmted/30n030w_20101117_gmted_mea075.tif");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.apache.xmlgraphics.image.codec.util.ImageDecoderImpl");
      // Undeclared exception!
      try { 
        GMTEDProvider.main(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Can't decode 30n030w_20101117_gmted_mea075.tif
         //
         verifyException("com.graphhopper.reader.dem.GMTEDProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider("pxBje[RiG$`");
      // Undeclared exception!
      try { 
        gMTEDProvider0.generateRasterFromFile((File) null, "pxBje[RiG$`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.reader.dem.GMTEDProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GMTEDProvider gMTEDProvider0 = new GMTEDProvider("");
      String string0 = gMTEDProvider0.toString();
      assertEquals("gmted", string0);
  }
}
