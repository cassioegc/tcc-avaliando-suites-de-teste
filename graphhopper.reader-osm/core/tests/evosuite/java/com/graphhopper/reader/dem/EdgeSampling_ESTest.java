/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 04:13:15 GMT 2021
 */

package com.graphhopper.reader.dem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.dem.EdgeSampling;
import com.graphhopper.reader.dem.ElevationProvider;
import com.graphhopper.util.DistanceCalc;
import com.graphhopper.util.PointList;
import com.graphhopper.util.shapes.GHPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EdgeSampling_ESTest extends EdgeSampling_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn((-2789)).when(pointList0).getSize();
      doReturn(false).when(pointList0).is3D();
      DistanceCalc distanceCalc0 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      ElevationProvider elevationProvider0 = mock(ElevationProvider.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EdgeSampling.sample(pointList0, 2157.7, distanceCalc0, elevationProvider0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.PointList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn(1253.3641).when(pointList0).getEle(anyInt());
      doReturn(1253.3641).when(pointList0).getLat(anyInt());
      doReturn(1253.3641).when(pointList0).getLon(anyInt());
      doReturn(2477, (-1)).when(pointList0).getSize();
      doReturn(true).when(pointList0).is3D();
      doReturn(false).when(pointList0).isEmpty();
      DistanceCalc distanceCalc0 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList1 = EdgeSampling.sample(pointList0, (-1143.73), distanceCalc0, (ElevationProvider) null);
      DistanceCalc distanceCalc1 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList2 = EdgeSampling.sample(pointList1, (-1143.73), distanceCalc1, (ElevationProvider) null);
      DistanceCalc distanceCalc2 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      EdgeSampling.sample(pointList1, (-1143.73), distanceCalc2, (ElevationProvider) null);
      DistanceCalc distanceCalc3 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList3 = EdgeSampling.sample(pointList2, (-1143.73), distanceCalc3, (ElevationProvider) null);
      DistanceCalc distanceCalc4 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      EdgeSampling.sample(pointList3, (-1143.73), distanceCalc4, (ElevationProvider) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn((-1139.45), 0.0).when(pointList0).getEle(anyInt());
      doReturn((-1139.45), 0.0).when(pointList0).getLat(anyInt());
      doReturn((-1139.45), 0.0).when(pointList0).getLon(anyInt());
      doReturn(3903, 3903).when(pointList0).getSize();
      doReturn(false).when(pointList0).is3D();
      doReturn(false).when(pointList0).isEmpty();
      double double0 = (-17.63);
      DistanceCalc distanceCalc0 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      ElevationProvider elevationProvider0 = mock(ElevationProvider.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EdgeSampling.sample(pointList0, (-17.63), distanceCalc0, elevationProvider0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This is a 2D list we cannot store elevation: 0.0
         //
         verifyException("com.graphhopper.util.PointList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn((-2484.139984806), 0.0).when(pointList0).getEle(anyInt());
      doReturn((-6345.994461771), 0.0).when(pointList0).getLat(anyInt());
      doReturn((-948.4772), 0.0).when(pointList0).getLon(anyInt());
      doReturn(0, 2).when(pointList0).getSize();
      doReturn(false).when(pointList0).is3D();
      doReturn(false).when(pointList0).isEmpty();
      double double0 = 1307.772978;
      DistanceCalc distanceCalc0 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      ElevationProvider elevationProvider0 = null;
      // Undeclared exception!
      try { 
        EdgeSampling.sample(pointList0, 1307.772978, distanceCalc0, (ElevationProvider) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This is a 2D list we cannot store elevation: -2484.139984806
         //
         verifyException("com.graphhopper.util.PointList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(pointList0).getEle(anyInt());
      doReturn(0.0).when(pointList0).getLat(anyInt());
      doReturn(0.0).when(pointList0).getLon(anyInt());
      doReturn(0, 0).when(pointList0).getSize();
      doReturn(false).when(pointList0).is3D();
      doReturn(false).when(pointList0).isEmpty();
      PointList pointList1 = EdgeSampling.sample(pointList0, 1631.372465973, (DistanceCalc) null, (ElevationProvider) null);
      EdgeSampling.sample(pointList1, 0.0, (DistanceCalc) null, (ElevationProvider) null);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PointList pointList0 = null;
      double double0 = 0.0;
      DistanceCalc distanceCalc0 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      ElevationProvider elevationProvider0 = mock(ElevationProvider.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EdgeSampling.sample((PointList) null, 0.0, distanceCalc0, elevationProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.reader.dem.EdgeSampling", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn(27798.73166113968, (-2078.7263206), (double)1429, (double)2226, (-2078.7263206)).when(pointList0).getEle(anyInt());
      doReturn(27798.73166113968, 27798.73166113968, (double)2226, (double)1429, 27798.73166113968).when(pointList0).getLat(anyInt());
      doReturn(27798.73166113968, (double)1429, 27798.73166113968, 59.16814492, 27798.73166113968).when(pointList0).getLon(anyInt());
      doReturn(2226, 1429).when(pointList0).getSize();
      doReturn(true).when(pointList0).is3D();
      doReturn(false).when(pointList0).isEmpty();
      DistanceCalc distanceCalc0 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      doReturn(381.289843341, 313.368536965, 27798.73166113968, 27798.73166113968, 0.0).when(distanceCalc0).calcDist3D(anyDouble() , anyDouble() , anyDouble() , anyDouble() , anyDouble() , anyDouble());
      doReturn(false, false, false, false, false).when(distanceCalc0).isCrossBoundary(anyDouble() , anyDouble());
      ElevationProvider elevationProvider0 = mock(ElevationProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(elevationProvider0).getEle(anyDouble() , anyDouble());
      PointList pointList1 = EdgeSampling.sample(pointList0, 313.368536965, distanceCalc0, elevationProvider0);
      DistanceCalc distanceCalc1 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-2157.4), 27798.73166113968).when(distanceCalc1).calcDist3D(anyDouble() , anyDouble() , anyDouble() , anyDouble() , anyDouble() , anyDouble());
      doReturn((GHPoint) null).when(distanceCalc1).intermediatePoint(anyDouble() , anyDouble() , anyDouble() , anyDouble() , anyDouble());
      doReturn(true, false, true).when(distanceCalc1).isCrossBoundary(anyDouble() , anyDouble());
      ElevationProvider elevationProvider1 = mock(ElevationProvider.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        EdgeSampling.sample(pointList1, 313.368536965, distanceCalc1, elevationProvider1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.reader.dem.EdgeSampling", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DistanceCalc distanceCalc0 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      ElevationProvider elevationProvider0 = mock(ElevationProvider.class, new ViolatedAssumptionAnswer());
      DistanceCalc distanceCalc1 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      DistanceCalc distanceCalc2 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      DistanceCalc distanceCalc3 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      DistanceCalc distanceCalc4 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      DistanceCalc distanceCalc5 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      DistanceCalc distanceCalc6 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(pointList0).getEle(anyInt());
      doReturn(0.0).when(pointList0).getLat(anyInt());
      doReturn(0.0).when(pointList0).getLon(anyInt());
      doReturn(0, 0).when(pointList0).getSize();
      doReturn(false).when(pointList0).is3D();
      doReturn(false).when(pointList0).isEmpty();
      DistanceCalc distanceCalc0 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList1 = EdgeSampling.sample(pointList0, 0.0, distanceCalc0, (ElevationProvider) null);
      assertTrue(pointList1.equals((Object)pointList0));
      assertEquals(0, pointList1.size());
      assertEquals(0, pointList1.getSize());
      assertTrue(pointList1.isEmpty());
      assertEquals(2, pointList1.getDimension());
      assertFalse(pointList1.isImmutable());
      assertNotNull(pointList1);
      
      DistanceCalc distanceCalc1 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList2 = EdgeSampling.sample(pointList1, 1416.0, distanceCalc1, (ElevationProvider) null);
      assertTrue(pointList1.equals((Object)pointList0));
      assertTrue(pointList2.equals((Object)pointList1));
      assertTrue(pointList2.equals((Object)pointList0));
      assertEquals(0, pointList1.size());
      assertEquals(0, pointList1.getSize());
      assertTrue(pointList1.isEmpty());
      assertEquals(2, pointList1.getDimension());
      assertFalse(pointList1.isImmutable());
      assertEquals(0, pointList2.getSize());
      assertEquals(2, pointList2.getDimension());
      assertEquals(0, pointList2.size());
      assertFalse(pointList2.isImmutable());
      assertTrue(pointList2.isEmpty());
      assertNotNull(pointList2);
      assertNotSame(pointList1, pointList2);
      assertNotSame(pointList2, pointList1);
      
      DistanceCalc distanceCalc2 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList3 = EdgeSampling.sample(pointList1, 180.0, distanceCalc2, (ElevationProvider) null);
      assertTrue(pointList1.equals((Object)pointList2));
      assertTrue(pointList1.equals((Object)pointList0));
      assertTrue(pointList3.equals((Object)pointList0));
      assertTrue(pointList3.equals((Object)pointList1));
      assertTrue(pointList3.equals((Object)pointList2));
      assertEquals(0, pointList1.size());
      assertEquals(0, pointList1.getSize());
      assertTrue(pointList1.isEmpty());
      assertEquals(2, pointList1.getDimension());
      assertFalse(pointList1.isImmutable());
      assertEquals(2, pointList3.getDimension());
      assertTrue(pointList3.isEmpty());
      assertEquals(0, pointList3.getSize());
      assertFalse(pointList3.isImmutable());
      assertEquals(0, pointList3.size());
      assertNotNull(pointList3);
      assertNotSame(pointList1, pointList3);
      assertNotSame(pointList1, pointList2);
      assertNotSame(pointList3, pointList2);
      assertNotSame(pointList3, pointList1);
      
      DistanceCalc distanceCalc3 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList4 = EdgeSampling.sample(pointList2, 1377.6855, distanceCalc3, (ElevationProvider) null);
      assertTrue(pointList1.equals((Object)pointList2));
      assertTrue(pointList1.equals((Object)pointList0));
      assertTrue(pointList1.equals((Object)pointList3));
      assertTrue(pointList2.equals((Object)pointList3));
      assertTrue(pointList2.equals((Object)pointList1));
      assertTrue(pointList2.equals((Object)pointList0));
      assertTrue(pointList4.equals((Object)pointList2));
      assertTrue(pointList4.equals((Object)pointList1));
      assertTrue(pointList4.equals((Object)pointList3));
      assertTrue(pointList4.equals((Object)pointList0));
      assertEquals(0, pointList1.size());
      assertEquals(0, pointList1.getSize());
      assertTrue(pointList1.isEmpty());
      assertEquals(2, pointList1.getDimension());
      assertFalse(pointList1.isImmutable());
      assertEquals(0, pointList2.getSize());
      assertEquals(2, pointList2.getDimension());
      assertEquals(0, pointList2.size());
      assertFalse(pointList2.isImmutable());
      assertTrue(pointList2.isEmpty());
      assertFalse(pointList4.isImmutable());
      assertTrue(pointList4.isEmpty());
      assertEquals(0, pointList4.getSize());
      assertEquals(2, pointList4.getDimension());
      assertEquals(0, pointList4.size());
      assertNotNull(pointList4);
      assertNotSame(pointList1, pointList3);
      assertNotSame(pointList1, pointList4);
      assertNotSame(pointList1, pointList2);
      assertNotSame(pointList2, pointList4);
      assertNotSame(pointList2, pointList3);
      assertNotSame(pointList2, pointList1);
      assertNotSame(pointList4, pointList1);
      assertNotSame(pointList4, pointList3);
      assertNotSame(pointList4, pointList2);
      
      DistanceCalc distanceCalc4 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList5 = EdgeSampling.sample(pointList1, 1377.6855, distanceCalc4, (ElevationProvider) null);
      assertTrue(pointList1.equals((Object)pointList4));
      assertTrue(pointList1.equals((Object)pointList2));
      assertTrue(pointList1.equals((Object)pointList0));
      assertTrue(pointList1.equals((Object)pointList3));
      assertTrue(pointList5.equals((Object)pointList1));
      assertTrue(pointList5.equals((Object)pointList3));
      assertTrue(pointList5.equals((Object)pointList4));
      assertTrue(pointList5.equals((Object)pointList2));
      assertTrue(pointList5.equals((Object)pointList0));
      assertEquals(0, pointList1.size());
      assertEquals(0, pointList1.getSize());
      assertTrue(pointList1.isEmpty());
      assertEquals(2, pointList1.getDimension());
      assertFalse(pointList1.isImmutable());
      assertFalse(pointList5.isImmutable());
      assertEquals(2, pointList5.getDimension());
      assertTrue(pointList5.isEmpty());
      assertEquals(0, pointList5.getSize());
      assertEquals(0, pointList5.size());
      assertNotNull(pointList5);
      assertNotSame(pointList1, pointList5);
      assertNotSame(pointList1, pointList3);
      assertNotSame(pointList1, pointList4);
      assertNotSame(pointList1, pointList2);
      assertNotSame(pointList5, pointList1);
      assertNotSame(pointList5, pointList3);
      assertNotSame(pointList5, pointList4);
      assertNotSame(pointList5, pointList2);
      
      DistanceCalc distanceCalc5 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList6 = EdgeSampling.sample(pointList3, 180.0, distanceCalc5, (ElevationProvider) null);
      assertTrue(pointList1.equals((Object)pointList5));
      assertTrue(pointList1.equals((Object)pointList4));
      assertTrue(pointList1.equals((Object)pointList2));
      assertTrue(pointList1.equals((Object)pointList0));
      assertTrue(pointList1.equals((Object)pointList3));
      assertTrue(pointList3.equals((Object)pointList0));
      assertTrue(pointList3.equals((Object)pointList1));
      assertTrue(pointList3.equals((Object)pointList5));
      assertTrue(pointList3.equals((Object)pointList4));
      assertTrue(pointList3.equals((Object)pointList2));
      assertTrue(pointList6.equals((Object)pointList3));
      assertTrue(pointList6.equals((Object)pointList5));
      assertTrue(pointList6.equals((Object)pointList1));
      assertTrue(pointList6.equals((Object)pointList0));
      assertTrue(pointList6.equals((Object)pointList4));
      assertTrue(pointList6.equals((Object)pointList2));
      assertEquals(0, pointList1.size());
      assertEquals(0, pointList1.getSize());
      assertTrue(pointList1.isEmpty());
      assertEquals(2, pointList1.getDimension());
      assertFalse(pointList1.isImmutable());
      assertEquals(2, pointList3.getDimension());
      assertTrue(pointList3.isEmpty());
      assertEquals(0, pointList3.getSize());
      assertFalse(pointList3.isImmutable());
      assertEquals(0, pointList3.size());
      assertEquals(0, pointList6.size());
      assertEquals(2, pointList6.getDimension());
      assertEquals(0, pointList6.getSize());
      assertFalse(pointList6.isImmutable());
      assertTrue(pointList6.isEmpty());
      assertNotNull(pointList6);
      assertNotSame(pointList1, pointList6);
      assertNotSame(pointList1, pointList5);
      assertNotSame(pointList1, pointList3);
      assertNotSame(pointList1, pointList4);
      assertNotSame(pointList1, pointList2);
      assertNotSame(pointList3, pointList6);
      assertNotSame(pointList3, pointList4);
      assertNotSame(pointList3, pointList2);
      assertNotSame(pointList3, pointList1);
      assertNotSame(pointList3, pointList5);
      assertNotSame(pointList6, pointList4);
      assertNotSame(pointList6, pointList2);
      assertNotSame(pointList6, pointList5);
      assertNotSame(pointList6, pointList1);
      assertNotSame(pointList6, pointList3);
      
      DistanceCalc distanceCalc6 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList7 = EdgeSampling.sample(pointList2, 0.0, distanceCalc6, (ElevationProvider) null);
      assertTrue(pointList1.equals((Object)pointList5));
      assertTrue(pointList1.equals((Object)pointList4));
      assertTrue(pointList1.equals((Object)pointList2));
      assertTrue(pointList1.equals((Object)pointList0));
      assertTrue(pointList1.equals((Object)pointList6));
      assertTrue(pointList1.equals((Object)pointList3));
      assertTrue(pointList2.equals((Object)pointList3));
      assertTrue(pointList2.equals((Object)pointList1));
      assertTrue(pointList2.equals((Object)pointList0));
      assertTrue(pointList2.equals((Object)pointList4));
      assertTrue(pointList2.equals((Object)pointList5));
      assertTrue(pointList2.equals((Object)pointList6));
      assertTrue(pointList7.equals((Object)pointList5));
      assertTrue(pointList7.equals((Object)pointList1));
      assertTrue(pointList7.equals((Object)pointList3));
      assertTrue(pointList7.equals((Object)pointList2));
      assertTrue(pointList7.equals((Object)pointList6));
      assertTrue(pointList7.equals((Object)pointList0));
      assertTrue(pointList7.equals((Object)pointList4));
      assertEquals(0, pointList1.size());
      assertEquals(0, pointList1.getSize());
      assertTrue(pointList1.isEmpty());
      assertEquals(2, pointList1.getDimension());
      assertFalse(pointList1.isImmutable());
      assertEquals(0, pointList2.getSize());
      assertEquals(2, pointList2.getDimension());
      assertEquals(0, pointList2.size());
      assertFalse(pointList2.isImmutable());
      assertTrue(pointList2.isEmpty());
      assertEquals(0, pointList7.size());
      assertEquals(0, pointList7.getSize());
      assertTrue(pointList7.isEmpty());
      assertEquals(2, pointList7.getDimension());
      assertFalse(pointList7.isImmutable());
      assertNotNull(pointList7);
      assertNotSame(pointList1, pointList7);
      assertNotSame(pointList1, pointList6);
      assertNotSame(pointList1, pointList5);
      assertNotSame(pointList1, pointList3);
      assertNotSame(pointList1, pointList4);
      assertNotSame(pointList1, pointList2);
      assertNotSame(pointList2, pointList6);
      assertNotSame(pointList2, pointList4);
      assertNotSame(pointList2, pointList7);
      assertNotSame(pointList2, pointList5);
      assertNotSame(pointList2, pointList3);
      assertNotSame(pointList2, pointList1);
      assertNotSame(pointList7, pointList1);
      assertNotSame(pointList7, pointList3);
      assertNotSame(pointList7, pointList5);
      assertNotSame(pointList7, pointList6);
      assertNotSame(pointList7, pointList4);
      assertNotSame(pointList7, pointList2);
      
      DistanceCalc distanceCalc7 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList8 = EdgeSampling.sample(pointList3, 0.0, distanceCalc7, (ElevationProvider) null);
      assertTrue(pointList8.equals((Object)pointList6));
      assertTrue(pointList8.equals((Object)pointList4));
      assertTrue(pointList8.equals((Object)pointList0));
      assertTrue(pointList8.equals((Object)pointList7));
      assertTrue(pointList8.equals((Object)pointList2));
      assertTrue(pointList8.equals((Object)pointList3));
      assertTrue(pointList8.equals((Object)pointList1));
      assertTrue(pointList8.equals((Object)pointList5));
      assertTrue(pointList1.equals((Object)pointList5));
      assertTrue(pointList1.equals((Object)pointList7));
      assertTrue(pointList1.equals((Object)pointList4));
      assertTrue(pointList1.equals((Object)pointList2));
      assertTrue(pointList1.equals((Object)pointList0));
      assertTrue(pointList1.equals((Object)pointList6));
      assertTrue(pointList1.equals((Object)pointList3));
      assertTrue(pointList3.equals((Object)pointList1));
      assertTrue(pointList3.equals((Object)pointList0));
      assertTrue(pointList3.equals((Object)pointList5));
      assertTrue(pointList3.equals((Object)pointList6));
      assertTrue(pointList3.equals((Object)pointList4));
      assertTrue(pointList3.equals((Object)pointList2));
      assertTrue(pointList3.equals((Object)pointList7));
      assertTrue(pointList8.isEmpty());
      assertEquals(0, pointList8.size());
      assertEquals(0, pointList8.getSize());
      assertEquals(2, pointList8.getDimension());
      assertFalse(pointList8.isImmutable());
      assertEquals(0, pointList1.size());
      assertEquals(0, pointList1.getSize());
      assertTrue(pointList1.isEmpty());
      assertEquals(2, pointList1.getDimension());
      assertFalse(pointList1.isImmutable());
      assertEquals(2, pointList3.getDimension());
      assertTrue(pointList3.isEmpty());
      assertEquals(0, pointList3.getSize());
      assertFalse(pointList3.isImmutable());
      assertEquals(0, pointList3.size());
      assertNotNull(pointList8);
      assertNotSame(pointList8, pointList5);
      assertNotSame(pointList8, pointList1);
      assertNotSame(pointList8, pointList3);
      assertNotSame(pointList8, pointList6);
      assertNotSame(pointList8, pointList7);
      assertNotSame(pointList8, pointList2);
      assertNotSame(pointList8, pointList4);
      assertNotSame(pointList1, pointList7);
      assertNotSame(pointList1, pointList6);
      assertNotSame(pointList1, pointList8);
      assertNotSame(pointList1, pointList5);
      assertNotSame(pointList1, pointList3);
      assertNotSame(pointList1, pointList4);
      assertNotSame(pointList1, pointList2);
      assertNotSame(pointList3, pointList8);
      assertNotSame(pointList3, pointList6);
      assertNotSame(pointList3, pointList4);
      assertNotSame(pointList3, pointList2);
      assertNotSame(pointList3, pointList1);
      assertNotSame(pointList3, pointList7);
      assertNotSame(pointList3, pointList5);
      
      DistanceCalc distanceCalc8 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList9 = EdgeSampling.sample(pointList7, 27798.73166113968, distanceCalc8, (ElevationProvider) null);
      assertTrue(pointList9.equals((Object)pointList8));
      assertTrue(pointList9.equals((Object)pointList0));
      assertTrue(pointList9.equals((Object)pointList4));
      assertTrue(pointList9.equals((Object)pointList2));
      assertTrue(pointList9.equals((Object)pointList3));
      assertTrue(pointList9.equals((Object)pointList1));
      assertTrue(pointList9.equals((Object)pointList7));
      assertTrue(pointList9.equals((Object)pointList5));
      assertTrue(pointList9.equals((Object)pointList6));
      assertTrue(pointList1.equals((Object)pointList5));
      assertTrue(pointList1.equals((Object)pointList7));
      assertTrue(pointList1.equals((Object)pointList4));
      assertTrue(pointList1.equals((Object)pointList2));
      assertTrue(pointList1.equals((Object)pointList0));
      assertTrue(pointList1.equals((Object)pointList6));
      assertTrue(pointList1.equals((Object)pointList8));
      assertTrue(pointList1.equals((Object)pointList3));
      assertTrue(pointList2.equals((Object)pointList3));
      assertTrue(pointList2.equals((Object)pointList1));
      assertTrue(pointList2.equals((Object)pointList0));
      assertTrue(pointList2.equals((Object)pointList8));
      assertTrue(pointList2.equals((Object)pointList4));
      assertTrue(pointList2.equals((Object)pointList7));
      assertTrue(pointList2.equals((Object)pointList5));
      assertTrue(pointList2.equals((Object)pointList6));
      assertTrue(pointList7.equals((Object)pointList5));
      assertTrue(pointList7.equals((Object)pointList1));
      assertTrue(pointList7.equals((Object)pointList3));
      assertTrue(pointList7.equals((Object)pointList8));
      assertTrue(pointList7.equals((Object)pointList2));
      assertTrue(pointList7.equals((Object)pointList6));
      assertTrue(pointList7.equals((Object)pointList0));
      assertTrue(pointList7.equals((Object)pointList4));
      assertFalse(pointList9.isImmutable());
      assertEquals(0, pointList9.size());
      assertEquals(0, pointList9.getSize());
      assertEquals(2, pointList9.getDimension());
      assertTrue(pointList9.isEmpty());
      assertEquals(0, pointList1.size());
      assertEquals(0, pointList1.getSize());
      assertTrue(pointList1.isEmpty());
      assertEquals(2, pointList1.getDimension());
      assertFalse(pointList1.isImmutable());
      assertEquals(0, pointList2.getSize());
      assertEquals(2, pointList2.getDimension());
      assertEquals(0, pointList2.size());
      assertFalse(pointList2.isImmutable());
      assertTrue(pointList2.isEmpty());
      assertEquals(0, pointList7.size());
      assertEquals(0, pointList7.getSize());
      assertTrue(pointList7.isEmpty());
      assertEquals(2, pointList7.getDimension());
      assertFalse(pointList7.isImmutable());
      assertNotNull(pointList9);
      assertNotSame(pointList9, pointList5);
      assertNotSame(pointList9, pointList3);
      assertNotSame(pointList9, pointList1);
      assertNotSame(pointList9, pointList2);
      assertNotSame(pointList9, pointList7);
      assertNotSame(pointList9, pointList6);
      assertNotSame(pointList9, pointList4);
      assertNotSame(pointList9, pointList8);
      assertNotSame(pointList1, pointList7);
      assertNotSame(pointList1, pointList6);
      assertNotSame(pointList1, pointList8);
      assertNotSame(pointList1, pointList5);
      assertNotSame(pointList1, pointList3);
      assertNotSame(pointList1, pointList9);
      assertNotSame(pointList1, pointList4);
      assertNotSame(pointList1, pointList2);
      assertNotSame(pointList2, pointList6);
      assertNotSame(pointList2, pointList8);
      assertNotSame(pointList2, pointList4);
      assertNotSame(pointList2, pointList7);
      assertNotSame(pointList2, pointList5);
      assertNotSame(pointList2, pointList9);
      assertNotSame(pointList2, pointList3);
      assertNotSame(pointList2, pointList1);
      assertNotSame(pointList7, pointList1);
      assertNotSame(pointList7, pointList3);
      assertNotSame(pointList7, pointList9);
      assertNotSame(pointList7, pointList5);
      assertNotSame(pointList7, pointList8);
      assertNotSame(pointList7, pointList6);
      assertNotSame(pointList7, pointList4);
      assertNotSame(pointList7, pointList2);
      
      DistanceCalc distanceCalc9 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList10 = EdgeSampling.sample(pointList9, 27798.73166113968, distanceCalc9, (ElevationProvider) null);
      assertTrue(pointList9.equals((Object)pointList8));
      assertTrue(pointList9.equals((Object)pointList0));
      assertTrue(pointList9.equals((Object)pointList4));
      assertTrue(pointList9.equals((Object)pointList2));
      assertTrue(pointList9.equals((Object)pointList3));
      assertTrue(pointList9.equals((Object)pointList1));
      assertTrue(pointList9.equals((Object)pointList7));
      assertTrue(pointList9.equals((Object)pointList5));
      assertTrue(pointList9.equals((Object)pointList6));
      assertTrue(pointList1.equals((Object)pointList5));
      assertTrue(pointList1.equals((Object)pointList9));
      assertTrue(pointList1.equals((Object)pointList7));
      assertTrue(pointList1.equals((Object)pointList4));
      assertTrue(pointList1.equals((Object)pointList2));
      assertTrue(pointList1.equals((Object)pointList0));
      assertTrue(pointList1.equals((Object)pointList6));
      assertTrue(pointList1.equals((Object)pointList8));
      assertTrue(pointList1.equals((Object)pointList3));
      assertTrue(pointList10.equals((Object)pointList1));
      assertTrue(pointList10.equals((Object)pointList7));
      assertTrue(pointList10.equals((Object)pointList4));
      assertTrue(pointList10.equals((Object)pointList2));
      assertTrue(pointList10.equals((Object)pointList0));
      assertTrue(pointList10.equals((Object)pointList8));
      assertTrue(pointList10.equals((Object)pointList6));
      assertTrue(pointList10.equals((Object)pointList9));
      assertTrue(pointList10.equals((Object)pointList5));
      assertTrue(pointList10.equals((Object)pointList3));
      assertTrue(pointList2.equals((Object)pointList3));
      assertTrue(pointList2.equals((Object)pointList1));
      assertTrue(pointList2.equals((Object)pointList0));
      assertTrue(pointList2.equals((Object)pointList8));
      assertTrue(pointList2.equals((Object)pointList4));
      assertTrue(pointList2.equals((Object)pointList7));
      assertTrue(pointList2.equals((Object)pointList5));
      assertTrue(pointList2.equals((Object)pointList9));
      assertTrue(pointList2.equals((Object)pointList6));
      assertTrue(pointList7.equals((Object)pointList9));
      assertTrue(pointList7.equals((Object)pointList5));
      assertTrue(pointList7.equals((Object)pointList1));
      assertTrue(pointList7.equals((Object)pointList3));
      assertTrue(pointList7.equals((Object)pointList8));
      assertTrue(pointList7.equals((Object)pointList2));
      assertTrue(pointList7.equals((Object)pointList6));
      assertTrue(pointList7.equals((Object)pointList0));
      assertTrue(pointList7.equals((Object)pointList4));
      assertFalse(pointList9.isImmutable());
      assertEquals(0, pointList9.size());
      assertEquals(0, pointList9.getSize());
      assertEquals(2, pointList9.getDimension());
      assertTrue(pointList9.isEmpty());
      assertEquals(0, pointList1.size());
      assertEquals(0, pointList1.getSize());
      assertTrue(pointList1.isEmpty());
      assertEquals(2, pointList1.getDimension());
      assertFalse(pointList1.isImmutable());
      assertEquals(0, pointList10.getSize());
      assertEquals(0, pointList10.size());
      assertFalse(pointList10.isImmutable());
      assertTrue(pointList10.isEmpty());
      assertEquals(2, pointList10.getDimension());
      assertEquals(0, pointList2.getSize());
      assertEquals(2, pointList2.getDimension());
      assertEquals(0, pointList2.size());
      assertFalse(pointList2.isImmutable());
      assertTrue(pointList2.isEmpty());
      assertEquals(0, pointList7.size());
      assertEquals(0, pointList7.getSize());
      assertTrue(pointList7.isEmpty());
      assertEquals(2, pointList7.getDimension());
      assertFalse(pointList7.isImmutable());
      assertNotNull(pointList10);
      assertNotSame(pointList9, pointList5);
      assertNotSame(pointList9, pointList3);
      assertNotSame(pointList9, pointList1);
      assertNotSame(pointList9, pointList2);
      assertNotSame(pointList9, pointList7);
      assertNotSame(pointList9, pointList6);
      assertNotSame(pointList9, pointList4);
      assertNotSame(pointList9, pointList8);
      assertNotSame(pointList9, pointList10);
      assertNotSame(pointList1, pointList7);
      assertNotSame(pointList1, pointList6);
      assertNotSame(pointList1, pointList8);
      assertNotSame(pointList1, pointList5);
      assertNotSame(pointList1, pointList3);
      assertNotSame(pointList1, pointList9);
      assertNotSame(pointList1, pointList4);
      assertNotSame(pointList1, pointList10);
      assertNotSame(pointList1, pointList2);
      assertNotSame(pointList10, pointList6);
      assertNotSame(pointList10, pointList4);
      assertNotSame(pointList10, pointList2);
      assertNotSame(pointList10, pointList7);
      assertNotSame(pointList10, pointList9);
      assertNotSame(pointList10, pointList1);
      assertNotSame(pointList10, pointList5);
      assertNotSame(pointList10, pointList8);
      assertNotSame(pointList10, pointList3);
      assertNotSame(pointList2, pointList6);
      assertNotSame(pointList2, pointList8);
      assertNotSame(pointList2, pointList4);
      assertNotSame(pointList2, pointList7);
      assertNotSame(pointList2, pointList5);
      assertNotSame(pointList2, pointList9);
      assertNotSame(pointList2, pointList3);
      assertNotSame(pointList2, pointList1);
      assertNotSame(pointList2, pointList10);
      assertNotSame(pointList7, pointList1);
      assertNotSame(pointList7, pointList3);
      assertNotSame(pointList7, pointList9);
      assertNotSame(pointList7, pointList5);
      assertNotSame(pointList7, pointList8);
      assertNotSame(pointList7, pointList10);
      assertNotSame(pointList7, pointList6);
      assertNotSame(pointList7, pointList4);
      assertNotSame(pointList7, pointList2);
      
      DistanceCalc distanceCalc10 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList11 = EdgeSampling.sample(pointList7, 0.0, distanceCalc10, (ElevationProvider) null);
      assertTrue(pointList1.equals((Object)pointList5));
      assertTrue(pointList1.equals((Object)pointList9));
      assertTrue(pointList1.equals((Object)pointList7));
      assertTrue(pointList1.equals((Object)pointList4));
      assertTrue(pointList1.equals((Object)pointList2));
      assertTrue(pointList1.equals((Object)pointList0));
      assertTrue(pointList1.equals((Object)pointList6));
      assertTrue(pointList1.equals((Object)pointList8));
      assertTrue(pointList1.equals((Object)pointList10));
      assertTrue(pointList1.equals((Object)pointList3));
      assertTrue(pointList2.equals((Object)pointList3));
      assertTrue(pointList2.equals((Object)pointList1));
      assertTrue(pointList2.equals((Object)pointList10));
      assertTrue(pointList2.equals((Object)pointList0));
      assertTrue(pointList2.equals((Object)pointList8));
      assertTrue(pointList2.equals((Object)pointList4));
      assertTrue(pointList2.equals((Object)pointList7));
      assertTrue(pointList2.equals((Object)pointList5));
      assertTrue(pointList2.equals((Object)pointList9));
      assertTrue(pointList2.equals((Object)pointList6));
      assertTrue(pointList11.equals((Object)pointList9));
      assertTrue(pointList11.equals((Object)pointList5));
      assertTrue(pointList11.equals((Object)pointList8));
      assertTrue(pointList11.equals((Object)pointList2));
      assertTrue(pointList11.equals((Object)pointList6));
      assertTrue(pointList11.equals((Object)pointList4));
      assertTrue(pointList11.equals((Object)pointList7));
      assertTrue(pointList11.equals((Object)pointList1));
      assertTrue(pointList11.equals((Object)pointList0));
      assertTrue(pointList11.equals((Object)pointList3));
      assertTrue(pointList11.equals((Object)pointList10));
      assertTrue(pointList7.equals((Object)pointList9));
      assertTrue(pointList7.equals((Object)pointList5));
      assertTrue(pointList7.equals((Object)pointList1));
      assertTrue(pointList7.equals((Object)pointList3));
      assertTrue(pointList7.equals((Object)pointList8));
      assertTrue(pointList7.equals((Object)pointList2));
      assertTrue(pointList7.equals((Object)pointList6));
      assertTrue(pointList7.equals((Object)pointList0));
      assertTrue(pointList7.equals((Object)pointList4));
      assertTrue(pointList7.equals((Object)pointList10));
      assertEquals(0, pointList1.size());
      assertEquals(0, pointList1.getSize());
      assertTrue(pointList1.isEmpty());
      assertEquals(2, pointList1.getDimension());
      assertFalse(pointList1.isImmutable());
      assertEquals(0, pointList2.getSize());
      assertEquals(2, pointList2.getDimension());
      assertEquals(0, pointList2.size());
      assertFalse(pointList2.isImmutable());
      assertTrue(pointList2.isEmpty());
      assertEquals(0, pointList11.size());
      assertEquals(2, pointList11.getDimension());
      assertTrue(pointList11.isEmpty());
      assertEquals(0, pointList11.getSize());
      assertFalse(pointList11.isImmutable());
      assertEquals(0, pointList7.size());
      assertEquals(0, pointList7.getSize());
      assertTrue(pointList7.isEmpty());
      assertEquals(2, pointList7.getDimension());
      assertFalse(pointList7.isImmutable());
      assertNotNull(pointList11);
      assertNotSame(pointList1, pointList11);
      assertNotSame(pointList1, pointList7);
      assertNotSame(pointList1, pointList6);
      assertNotSame(pointList1, pointList8);
      assertNotSame(pointList1, pointList5);
      assertNotSame(pointList1, pointList3);
      assertNotSame(pointList1, pointList9);
      assertNotSame(pointList1, pointList4);
      assertNotSame(pointList1, pointList10);
      assertNotSame(pointList1, pointList2);
      assertNotSame(pointList2, pointList6);
      assertNotSame(pointList2, pointList8);
      assertNotSame(pointList2, pointList4);
      assertNotSame(pointList2, pointList11);
      assertNotSame(pointList2, pointList7);
      assertNotSame(pointList2, pointList5);
      assertNotSame(pointList2, pointList9);
      assertNotSame(pointList2, pointList3);
      assertNotSame(pointList2, pointList1);
      assertNotSame(pointList2, pointList10);
      assertNotSame(pointList11, pointList7);
      assertNotSame(pointList11, pointList1);
      assertNotSame(pointList11, pointList5);
      assertNotSame(pointList11, pointList3);
      assertNotSame(pointList11, pointList8);
      assertNotSame(pointList11, pointList9);
      assertNotSame(pointList11, pointList6);
      assertNotSame(pointList11, pointList10);
      assertNotSame(pointList11, pointList2);
      assertNotSame(pointList11, pointList4);
      assertNotSame(pointList7, pointList11);
      assertNotSame(pointList7, pointList1);
      assertNotSame(pointList7, pointList3);
      assertNotSame(pointList7, pointList9);
      assertNotSame(pointList7, pointList5);
      assertNotSame(pointList7, pointList8);
      assertNotSame(pointList7, pointList10);
      assertNotSame(pointList7, pointList6);
      assertNotSame(pointList7, pointList4);
      assertNotSame(pointList7, pointList2);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn(1253.36).when(pointList0).getEle(anyInt());
      doReturn(1253.36).when(pointList0).getLat(anyInt());
      doReturn(1253.36).when(pointList0).getLon(anyInt());
      doReturn(2477, (-1)).when(pointList0).getSize();
      doReturn(true).when(pointList0).is3D();
      doReturn(false).when(pointList0).isEmpty();
      DistanceCalc distanceCalc0 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList1 = EdgeSampling.sample(pointList0, (-1143.73), distanceCalc0, (ElevationProvider) null);
      DistanceCalc distanceCalc1 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList2 = EdgeSampling.sample(pointList1, (-1143.73), distanceCalc1, (ElevationProvider) null);
      DistanceCalc distanceCalc2 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      EdgeSampling.sample(pointList1, (-1143.73), distanceCalc2, (ElevationProvider) null);
      DistanceCalc distanceCalc3 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList3 = EdgeSampling.sample(pointList2, (-1143.73), distanceCalc3, (ElevationProvider) null);
      DistanceCalc distanceCalc4 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      EdgeSampling.sample(pointList3, (-1143.73), distanceCalc4, (ElevationProvider) null);
      DistanceCalc distanceCalc5 = mock(DistanceCalc.class, new ViolatedAssumptionAnswer());
      PointList pointList4 = EdgeSampling.sample(pointList2, (-2172.5), distanceCalc5, (ElevationProvider) null);
      assertEquals(0, pointList1.size());
      assertNotSame(pointList4, pointList2);
  }
}
