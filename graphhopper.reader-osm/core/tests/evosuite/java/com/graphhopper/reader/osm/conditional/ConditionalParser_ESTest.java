/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:36:42 GMT 2021
 */

package com.graphhopper.reader.osm.conditional;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.reader.osm.conditional.ConditionalParser;
import com.graphhopper.reader.osm.conditional.ConditionalValueParser;
import com.graphhopper.reader.osm.conditional.DateRangeParser;
import java.nio.charset.Charset;
import java.util.Calendar;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConditionalParser_ESTest extends ConditionalParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConditionalParser conditionalParser0 = new ConditionalParser((Set<String>) null);
      // Undeclared exception!
      try { 
        conditionalParser0.checkCondition("jwX~j?n@_=4'}_Um@&");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // could not split this condition: jwX~j?n@_=4'}_Um@&
         //
         verifyException("com.graphhopper.reader.osm.conditional.ConditionalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = ConditionalParser.parseNumber("0ot");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = ConditionalParser.parseNumber("1 e?J");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionalParser.parseNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.reader.osm.conditional.ConditionalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConditionalParser conditionalParser0 = new ConditionalParser((Set<String>) null);
      // Undeclared exception!
      try { 
        conditionalParser0.checkCondition("sfBO63R!&@yTFYdCm6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionalParser.parseNumber("gxoQ&Q|wT8~6N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConditionalParser.parseNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      ConditionalParser conditionalParser0 = new ConditionalParser(set0, true);
      // Undeclared exception!
      try { 
        conditionalParser0.checkCondition("@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // could not split this condition: @
         //
         verifyException("com.graphhopper.reader.osm.conditional.ConditionalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConditionalParser conditionalParser0 = new ConditionalParser((Set<String>) null);
      boolean boolean0 = conditionalParser0.checkCondition("jw~jnS_;='_Um@&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConditionalParser conditionalParser0 = new ConditionalParser((Set<String>) null);
      boolean boolean0 = conditionalParser0.checkCondition("CL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      ConditionalParser conditionalParser0 = new ConditionalParser(set0, true);
      boolean boolean0 = conditionalParser0.checkCondition("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      ConditionalParser conditionalParser0 = new ConditionalParser(set0, true);
      boolean boolean0 = conditionalParser0.checkCondition("?e^@szq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      ConditionalParser conditionalParser0 = new ConditionalParser(set0);
      boolean boolean0 = conditionalParser0.checkCondition((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Float float0 = new Float(540.779);
      ConditionalValueParser conditionalValueParser0 = ConditionalParser.createNumberParser("?e^@szq", float0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      ConditionalParser conditionalParser0 = new ConditionalParser(set0, true);
      ConditionalParser conditionalParser1 = conditionalParser0.setConditionalValueParser(conditionalValueParser0);
      assertSame(conditionalParser0, conditionalParser1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConditionalParser conditionalParser0 = new ConditionalParser((Set<String>) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 58, 2, 2571, 58);
      DateRangeParser dateRangeParser0 = new DateRangeParser(mockGregorianCalendar0);
      ConditionalParser conditionalParser1 = conditionalParser0.addConditionalValueParser(dateRangeParser0);
      assertSame(conditionalParser1, conditionalParser0);
  }
}
