/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:16:59 GMT 2021
 */

package com.graphhopper.apache.commons.collections;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.apache.commons.collections.IntFloatBinaryHeap;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntFloatBinaryHeap_ESTest extends IntFloatBinaryHeap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo((-1));
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.ensureCapacity((-1));
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      assertEquals(0L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      long long0 = intFloatBinaryHeap0.getCapacity();
      assertEquals(0L, long0);
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      assertEquals(0L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(641);
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(641, 641);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(641, 1242);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      int int0 = intFloatBinaryHeap0.peekElement();
      assertEquals(641, int0);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      float float0 = intFloatBinaryHeap0.peekKey();
      assertEquals(641.0F, float0, 0.01F);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      int int1 = intFloatBinaryHeap0.peekElement();
      assertEquals(641, int1);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertTrue(int1 == int0);
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(0.0, 641);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      long long0 = intFloatBinaryHeap0.getCapacity();
      assertEquals(642L, long0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      long long1 = intFloatBinaryHeap0.getCapacity();
      assertEquals(642L, long1);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertTrue(long1 == long0);
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(641, 641);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo(641);
      assertEquals(641, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.percolateUpMinHeap(46);
      assertEquals(641, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      int int2 = intFloatBinaryHeap0.getSize();
      assertEquals(641, int2);
      assertEquals(641, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      long long2 = intFloatBinaryHeap0.getCapacity();
      assertEquals(642L, long2);
      assertEquals(641, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      
      int int3 = intFloatBinaryHeap0.getSize();
      assertEquals(641, int3);
      assertEquals(641, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      // Undeclared exception!
      intFloatBinaryHeap0.ensureCapacity(2145338309);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo((-1));
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      int int0 = intFloatBinaryHeap0.peekElement();
      assertEquals(0, int0);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      int int1 = intFloatBinaryHeap0.getSize();
      assertEquals((-1), int1);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(int1 == int0);
      
      intFloatBinaryHeap0.insert((-1), (-1));
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.ensureCapacity(0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      int int0 = (-1);
      intFloatBinaryHeap0.trimTo((-1));
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      
      int int1 = 0;
      intFloatBinaryHeap0.insert(0, (-1));
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.trimTo(0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert(1.0, (-1));
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      float float0 = intFloatBinaryHeap0.peekKey();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      // Undeclared exception!
      intFloatBinaryHeap0.update((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo((-1));
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int0 = 1753;
      int int1 = intFloatBinaryHeap0.peekElement();
      assertEquals(0, int1);
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertFalse(int1 == int0);
      
      intFloatBinaryHeap0.insert(1315.755, (-1));
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      int int2 = 0;
      intFloatBinaryHeap0.trimTo(0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      // Undeclared exception!
      intFloatBinaryHeap0.insert(1.0, 1753);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.trimTo(1000);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1000, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert(317.7, (-1));
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001, intFloatBinaryHeap0.getSize());
      assertEquals(2003L, intFloatBinaryHeap0.getCapacity());
      
      int int0 = intFloatBinaryHeap0.poll();
      assertEquals(0, int0);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1000, intFloatBinaryHeap0.getSize());
      assertEquals(2003L, intFloatBinaryHeap0.getCapacity());
      
      long long0 = intFloatBinaryHeap0.getCapacity();
      assertEquals(2003L, long0);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1000, intFloatBinaryHeap0.getSize());
      assertEquals(2003L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.percolateDownMinHeap(185);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1000, intFloatBinaryHeap0.getSize());
      assertEquals(2003L, intFloatBinaryHeap0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 663;
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(663);
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(664L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo(663);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(663, intFloatBinaryHeap0.getSize());
      assertEquals(664L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo(663);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(663, intFloatBinaryHeap0.getSize());
      assertEquals(664L, intFloatBinaryHeap0.getCapacity());
      
      int int1 = 1280;
      int int2 = (-2146709353);
      intFloatBinaryHeap0.insert(1280, 637);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1329L, intFloatBinaryHeap0.getCapacity());
      assertEquals(664, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert((-998.760156), 1280);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1329L, intFloatBinaryHeap0.getCapacity());
      assertEquals(665, intFloatBinaryHeap0.getSize());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.ensureCapacity((-1261));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IntFloatBinaryHeap contains too many elements to fit in new capacity.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(775);
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(776L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(327.777447, 775);
      assertEquals(776L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.trimTo(775);
      assertEquals(776L, intFloatBinaryHeap0.getCapacity());
      assertEquals(775, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      long long0 = intFloatBinaryHeap0.getCapacity();
      assertEquals(776L, long0);
      assertEquals(776L, intFloatBinaryHeap0.getCapacity());
      assertEquals(775, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.percolateUpMinHeap(775);
      assertEquals(776L, intFloatBinaryHeap0.getCapacity());
      assertEquals(775, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int0 = intFloatBinaryHeap0.poll();
      assertEquals(775, int0);
      assertEquals(776L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(774, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.percolateUpMinHeap(775);
      assertEquals(776L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(774, intFloatBinaryHeap0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.trimTo(2);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert(317.7, (-1));
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(3, intFloatBinaryHeap0.getSize());
      
      int int0 = intFloatBinaryHeap0.poll();
      assertEquals(0, int0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(2, intFloatBinaryHeap0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(641);
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(641, 641);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(641, 1242);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      
      int int0 = intFloatBinaryHeap0.peekElement();
      assertEquals(641, int0);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      
      int int1 = intFloatBinaryHeap0.peekElement();
      assertEquals(641, int1);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertTrue(int1 == int0);
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(0.0, 641);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      long long0 = intFloatBinaryHeap0.getCapacity();
      assertEquals(642L, long0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      long long1 = intFloatBinaryHeap0.getCapacity();
      assertEquals(642L, long1);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertTrue(long1 == long0);
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(1.0, 641);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo(641);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(641, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.percolateUpMinHeap(46);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(641, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      int int2 = intFloatBinaryHeap0.poll();
      assertEquals(641, int2);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(640, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = intFloatBinaryHeap0.getSize();
      assertEquals(640, int3);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(640, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      long long2 = intFloatBinaryHeap0.getCapacity();
      assertEquals(642L, long2);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(640, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      
      int int4 = intFloatBinaryHeap0.getSize();
      assertEquals(640, int4);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(640, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      
      intFloatBinaryHeap0.percolateDownMinHeap(640);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(640, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      int int5 = intFloatBinaryHeap0.poll();
      assertEquals(0, int5);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(639, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      
      intFloatBinaryHeap0.percolateDownMinHeap(641);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(639, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.percolateDownMinHeap(641);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(639, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      int int6 = intFloatBinaryHeap0.poll();
      assertEquals(0, int6);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(638, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      
      long long3 = intFloatBinaryHeap0.getCapacity();
      assertEquals(642L, long3);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(638, intFloatBinaryHeap0.getSize());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      int int0 = 0;
      intFloatBinaryHeap0.ensureCapacity(0);
      assertEquals(1L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert((-0.33855859246062736), 0);
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      int int1 = 0;
      intFloatBinaryHeap0.insert(2772.471962, 0);
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      
      float float0 = intFloatBinaryHeap0.peekKey();
      assertEquals((-0.33855858F), float0, 0.01F);
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.percolateUpMinHeap(0);
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.update(0, 0);
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      
      boolean boolean0 = intFloatBinaryHeap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      
      float float1 = intFloatBinaryHeap0.peekKey();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertNotEquals(float1, float0, 0.01F);
      
      intFloatBinaryHeap0.clear();
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      boolean boolean1 = intFloatBinaryHeap0.isEmpty();
      assertTrue(boolean1);
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.peekElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek element.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.trimTo((-1));
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.poll();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo((-1));
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int0 = 0;
      intFloatBinaryHeap0.trimTo(0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(1.0, 1753);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.update((-1), 1753);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.peekElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek element.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.clear();
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.insert(0.0, 1585);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      int int0 = intFloatBinaryHeap0.peekElement();
      assertEquals(1585, int0);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      int int1 = intFloatBinaryHeap0.peekElement();
      assertEquals(1585, int1);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(int1 == int0);
      
      intFloatBinaryHeap0.percolateDownMinHeap(0);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      int int2 = intFloatBinaryHeap0.poll();
      assertEquals(1585, int2);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.poll();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek element.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(0.0, 2);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.update(0.0, 0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      int int0 = intFloatBinaryHeap0.poll();
      assertEquals(2, int0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.poll();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek element.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.trimTo(1);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      long long0 = intFloatBinaryHeap0.getCapacity();
      assertEquals(1001L, long0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int0 = intFloatBinaryHeap0.getSize();
      assertEquals(1, int0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int1 = intFloatBinaryHeap0.poll();
      assertEquals(0, int1);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(1254);
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1255L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.percolateDownMinHeap(0);
      assertEquals(1255L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.clear();
      assertEquals(1255L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.peekKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek key.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 636;
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(636);
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(637L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo(0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(637L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(0.0, 1);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(637L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.ensureCapacity(1);
      assertEquals(2L, intFloatBinaryHeap0.getCapacity());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.insert(0.0, 636);
      assertEquals(5L, intFloatBinaryHeap0.getCapacity());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int1 = intFloatBinaryHeap0.poll();
      assertEquals(1, int1);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(5L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertFalse(int1 == int0);
      
      int int2 = intFloatBinaryHeap0.peekElement();
      assertEquals(636, int2);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(5L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = intFloatBinaryHeap0.peekElement();
      assertEquals(636, int3);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(5L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      long long0 = intFloatBinaryHeap0.getCapacity();
      assertEquals(5L, long0);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(5L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.clear();
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(5L, intFloatBinaryHeap0.getCapacity());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.peekKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek key.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.clear();
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      int int0 = (-2014);
      intFloatBinaryHeap0.clear();
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(0.0, (-2014));
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int1 = intFloatBinaryHeap0.getSize();
      assertEquals(1, int1);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertFalse(int1 == int0);
      
      intFloatBinaryHeap0.insert((-2014), (-2014));
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      float float0 = intFloatBinaryHeap0.peekKey();
      assertEquals((-2014.0F), float0, 0.01F);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      float float1 = intFloatBinaryHeap0.peekKey();
      assertEquals((-2014.0F), float1, 0.01F);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(float1, float0, 0.01F);
      
      int int2 = intFloatBinaryHeap0.peekElement();
      assertEquals((-2014), int2);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = 1433;
      float float2 = intFloatBinaryHeap0.peekKey();
      assertEquals((-2014.0F), float2, 0.01F);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      
      intFloatBinaryHeap0.ensureCapacity(1433);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertEquals(1434L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.ensureCapacity(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IntFloatBinaryHeap contains too many elements to fit in new capacity.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.insert(0.0, 0);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert((-61.0), 0);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      int int0 = intFloatBinaryHeap0.peekElement();
      assertEquals(0, int0);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.trimTo((-1788));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1787
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.insert(0.0, (-1));
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert(0.0, 0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(2, intFloatBinaryHeap0.getSize());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.ensureCapacity(1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IntFloatBinaryHeap contains too many elements to fit in new capacity.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.ensureCapacity(2237);
      assertEquals(2238L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.trimTo(2237);
      assertEquals(2238L, intFloatBinaryHeap0.getCapacity());
      assertEquals(2237, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.ensureCapacity(2237);
      assertEquals(2238L, intFloatBinaryHeap0.getCapacity());
      assertEquals(2237, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int0 = intFloatBinaryHeap0.getSize();
      assertEquals(2237, int0);
      assertEquals(2238L, intFloatBinaryHeap0.getCapacity());
      assertEquals(2237, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.ensureCapacity(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IntFloatBinaryHeap contains too many elements to fit in new capacity.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert(422.71, (-1338));
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      float float0 = intFloatBinaryHeap0.peekKey();
      assertEquals(422.71F, float0, 0.01F);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      float float1 = intFloatBinaryHeap0.peekKey();
      assertEquals(422.71F, float1, 0.01F);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(float1, float0, 0.01F);
      
      int int0 = intFloatBinaryHeap0.poll();
      assertEquals((-1338), int0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert((-1.0), (-1582));
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      int int1 = intFloatBinaryHeap0.poll();
      assertEquals((-1582), int1);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.percolateDownMinHeap((-641));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -641
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(0);
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      long long0 = intFloatBinaryHeap0.getCapacity();
      assertEquals(1L, long0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-1);
      IntFloatBinaryHeap intFloatBinaryHeap0 = null;
      try {
        intFloatBinaryHeap0 = new IntFloatBinaryHeap((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(0);
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.clear();
      assertEquals(1L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.poll();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek element.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.peekKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek key.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.trimTo(1);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int0 = 0;
      float float0 = intFloatBinaryHeap0.peekKey();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.trimTo(0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert(1.0, 0);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int1 = intFloatBinaryHeap0.peekElement();
      assertEquals(0, int1);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertTrue(int1 == int0);
      
      intFloatBinaryHeap0.ensureCapacity(573);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(574L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo(573);
      assertEquals(573, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(574L, intFloatBinaryHeap0.getCapacity());
      
      int int2 = intFloatBinaryHeap0.getSize();
      assertEquals(573, int2);
      assertEquals(573, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(574L, intFloatBinaryHeap0.getCapacity());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = (-1215);
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.trimTo((-1215));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1214
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.clear();
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.ensureCapacity(1245);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1246L, intFloatBinaryHeap0.getCapacity());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.peekKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek key.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      int int0 = intFloatBinaryHeap0.getSize();
      assertEquals(0, int0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(0);
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.update(0, 0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.clear();
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.ensureCapacity(636);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(637L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(1275.2333614, (-1));
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(637L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int0 = intFloatBinaryHeap0.poll();
      assertEquals((-1), int0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(637L, intFloatBinaryHeap0.getCapacity());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.percolateUpMinHeap(4557);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-1322);
      IntFloatBinaryHeap intFloatBinaryHeap0 = null;
      try {
        intFloatBinaryHeap0 = new IntFloatBinaryHeap((-1322));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      int int0 = 0;
      intFloatBinaryHeap0.ensureCapacity(0);
      assertEquals(1L, intFloatBinaryHeap0.getCapacity());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      intFloatBinaryHeap0.insert(0.0, 0);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      
      int int1 = 0;
      intFloatBinaryHeap0.insert(2772.471962, 0);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      
      float float0 = intFloatBinaryHeap0.peekKey();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.percolateUpMinHeap(0);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.update(0, 0);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      
      boolean boolean0 = intFloatBinaryHeap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      
      float float1 = intFloatBinaryHeap0.peekKey();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertEquals(float1, float0, 0.01F);
      
      intFloatBinaryHeap0.clear();
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      
      boolean boolean1 = intFloatBinaryHeap0.isEmpty();
      assertTrue(boolean1);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.peekElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek element.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert(317.7, (-1));
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      
      int int0 = intFloatBinaryHeap0.poll();
      assertEquals((-1), int0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.poll();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek element.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo((-1));
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      int int0 = intFloatBinaryHeap0.peekElement();
      assertEquals(0, int0);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals((-1), intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      int int1 = 0;
      intFloatBinaryHeap0.trimTo(0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(1.0, 1753);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.update(1817.86, 1753);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.clear();
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.peekElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek element.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert(1324.295464476, (-1));
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.update(0.0, 2);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.update(0.0, 0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(0);
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(1L, intFloatBinaryHeap0.getCapacity());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(0, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.insert(4609.0, 0);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.percolateUpMinHeap(0);
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertEquals(3L, intFloatBinaryHeap0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(641);
      assertNotNull(intFloatBinaryHeap0);
      assertEquals(0, intFloatBinaryHeap0.getSize());
      assertTrue(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(641, 641);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.insert(641, 641);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      long long0 = intFloatBinaryHeap0.getCapacity();
      assertEquals(642L, long0);
      assertEquals(2, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      intFloatBinaryHeap0.trimTo(641);
      assertEquals(641, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      int int0 = intFloatBinaryHeap0.getSize();
      assertEquals(641, int0);
      assertEquals(641, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      
      int int1 = intFloatBinaryHeap0.poll();
      assertEquals(641, int1);
      assertEquals(640, intFloatBinaryHeap0.getSize());
      assertFalse(intFloatBinaryHeap0.isEmpty());
      assertEquals(642L, intFloatBinaryHeap0.getCapacity());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      int int0 = (-1);
      intFloatBinaryHeap0.insert((-1), (-1));
      intFloatBinaryHeap0.update((-1), (-1));
      intFloatBinaryHeap0.clear();
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.poll();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek element.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      intFloatBinaryHeap0.trimTo(1000);
      intFloatBinaryHeap0.insert(1000, 1000);
      assertFalse(intFloatBinaryHeap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.ensureCapacity((-405));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // IntFloatBinaryHeap contains too many elements to fit in new capacity.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      intFloatBinaryHeap0.update((-1), (-1));
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 19;
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap(19);
      intFloatBinaryHeap0.insert(420.423458251093, 19);
      intFloatBinaryHeap0.insert(19, 19);
      intFloatBinaryHeap0.clear();
      intFloatBinaryHeap0.insert(19, 19);
      intFloatBinaryHeap0.poll();
      // Undeclared exception!
      try { 
        intFloatBinaryHeap0.peekKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Heap is empty. Cannot peek key.
         //
         verifyException("com.graphhopper.apache.commons.collections.IntFloatBinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IntFloatBinaryHeap intFloatBinaryHeap0 = new IntFloatBinaryHeap();
      intFloatBinaryHeap0.insert(7, 7);
      intFloatBinaryHeap0.update(1817.86, 7);
      assertEquals(1, intFloatBinaryHeap0.getSize());
      
      intFloatBinaryHeap0.peekKey();
      intFloatBinaryHeap0.trimTo(7);
      intFloatBinaryHeap0.insert(7, 0);
      intFloatBinaryHeap0.update(7, 0);
      assertEquals(1001L, intFloatBinaryHeap0.getCapacity());
  }
}
