/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:48:16 GMT 2021
 */

package com.graphhopper.util.details;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.Path;
import com.graphhopper.routing.ev.EncodedValueLookup;
import com.graphhopper.routing.util.AllEdgesIterator;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoder;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.MMapDirectory;
import com.graphhopper.storage.RAMDirectory;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.GHUtility;
import com.graphhopper.util.details.DistanceDetails;
import com.graphhopper.util.details.PathDetail;
import com.graphhopper.util.details.PathDetailsBuilder;
import com.graphhopper.util.details.PathDetailsBuilderFactory;
import com.graphhopper.util.details.PathDetailsFromEdges;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PathDetailsFromEdges_ESTest extends PathDetailsFromEdges_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ArrayDeque<DistanceDetails> arrayDeque0 = new ArrayDeque<DistanceDetails>();
      LinkedList<PathDetailsBuilder> linkedList0 = new LinkedList<PathDetailsBuilder>(arrayDeque0);
      PathDetailsFromEdges pathDetailsFromEdges0 = new PathDetailsFromEdges(linkedList0, 0);
      // Undeclared exception!
      try { 
        pathDetailsFromEdges0.next((EdgeIteratorState) null, (-978), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.details.PathDetailsFromEdges", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Stack<PathDetailsBuilder> stack0 = new Stack<PathDetailsBuilder>();
      PathDetailsFromEdges pathDetailsFromEdges0 = new PathDetailsFromEdges(stack0, 0);
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, true, 58);
      GraphHopperStorage graphHopperStorage1 = graphHopperStorage0.create(0L);
      AllEdgesIterator allEdgesIterator0 = graphHopperStorage1.getAllEdges();
      // Undeclared exception!
      try { 
        pathDetailsFromEdges0.next(allEdgesIterator0, 0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 134217727, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PathDetailsFromEdges pathDetailsFromEdges0 = new PathDetailsFromEdges((List<PathDetailsBuilder>) null, 75);
      // Undeclared exception!
      try { 
        pathDetailsFromEdges0.finish();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.details.PathDetailsFromEdges", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      // Undeclared exception!
      try { 
        PathDetailsFromEdges.calcDetails((Path) null, (EncodedValueLookup) null, (Weighting) null, arrayList0, pathDetailsBuilderFactory0, (-8));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.details.PathDetailsFromEdges", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Stack<PathDetailsBuilder> stack0 = new Stack<PathDetailsBuilder>();
      DistanceDetails distanceDetails0 = new DistanceDetails();
      PathDetailsFromEdges pathDetailsFromEdges0 = new PathDetailsFromEdges(stack0, (-931));
      stack0.add((PathDetailsBuilder) distanceDetails0);
      pathDetailsFromEdges0.finish();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Stack<PathDetailsBuilder> stack0 = new Stack<PathDetailsBuilder>();
      DistanceDetails distanceDetails0 = new DistanceDetails();
      PathDetailsFromEdges pathDetailsFromEdges0 = new PathDetailsFromEdges(stack0, (-931));
      GHUtility.DisabledEdgeIterator gHUtility_DisabledEdgeIterator0 = new GHUtility.DisabledEdgeIterator();
      stack0.add((PathDetailsBuilder) distanceDetails0);
      // Undeclared exception!
      try { 
        pathDetailsFromEdges0.next(gHUtility_DisabledEdgeIterator0, (-931), (-931));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported. Edge is empty.
         //
         verifyException("com.graphhopper.util.GHUtility$DisabledEdgeIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("", true);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      Path path0 = new Path(graphHopperStorage0);
      path0.setFound(true);
      List<String> list0 = graphHopperStorage0.getCHGraphNames();
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      Map<String, List<PathDetail>> map0 = PathDetailsFromEdges.calcDetails(path0, encodingManager0, (Weighting) null, list0, pathDetailsBuilderFactory0, (-1255));
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RAMDirectory rAMDirectory0 = new RAMDirectory("", true);
      EncodingManager encodingManager0 = EncodingManager.create("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, false, false);
      Path path0 = new Path(graphHopperStorage0);
      List<String> list0 = graphHopperStorage0.getCHGraphNames();
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      Map<String, List<PathDetail>> map0 = PathDetailsFromEdges.calcDetails(path0, encodingManager0, (Weighting) null, list0, pathDetailsBuilderFactory0, (-1255));
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ArrayList<PathDetailsBuilder> arrayList0 = new ArrayList<PathDetailsBuilder>();
      PathDetailsFromEdges pathDetailsFromEdges0 = new PathDetailsFromEdges(arrayList0, (-1967));
      RAMDirectory rAMDirectory0 = new RAMDirectory("1T<Fu0", true);
      FlagEncoder[] flagEncoderArray0 = new FlagEncoder[0];
      EncodingManager encodingManager0 = EncodingManager.create(flagEncoderArray0);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(rAMDirectory0, encodingManager0, true);
      AllEdgesIterator allEdgesIterator0 = graphHopperStorage0.getAllEdges();
      // Undeclared exception!
      try { 
        pathDetailsFromEdges0.next(allEdgesIterator0, (-1967), 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.graphhopper.storage.RAMIntDataAccess", e);
      }
  }
}
