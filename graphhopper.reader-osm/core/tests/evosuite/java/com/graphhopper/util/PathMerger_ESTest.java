/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:21:47 GMT 2021
 */

package com.graphhopper.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.ResponsePath;
import com.graphhopper.routing.Path;
import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
import com.graphhopper.routing.util.EncodingManager;
import com.graphhopper.routing.util.FlagEncoderFactory;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.storage.Graph;
import com.graphhopper.storage.GraphHopperStorage;
import com.graphhopper.storage.MMapDirectory;
import com.graphhopper.util.DouglasPeucker;
import com.graphhopper.util.PathMerger;
import com.graphhopper.util.PointList;
import com.graphhopper.util.TranslationMap;
import com.graphhopper.util.details.PathDetailsBuilderFactory;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PathMerger_ESTest extends PathMerger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      PointList pointList0 = new PointList();
      Vector<Path> vector0 = new Vector<Path>();
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, true, (-1));
      Path path0 = new Path(graphHopperStorage0);
      Path path1 = path0.addDistance((-1799.0));
      Path path2 = path1.setFound(true);
      vector0.add(path2);
      Locale locale0 = new Locale("");
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      // Undeclared exception!
      try { 
        pathMerger0.doWork(pointList0, vector0, encodingManager0, translationMap_TranslationHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.InstructionsFromEdges", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      PointList pointList0 = new PointList();
      Vector<Path> vector0 = new Vector<Path>();
      EncodingManager encodingManager0 = EncodingManager.create("");
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      pathMerger0.setCalcPoints(false);
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, true, (-1));
      Path path0 = new Path(graphHopperStorage0);
      Path path1 = path0.setFound(true);
      vector0.add(path1);
      Locale locale0 = new Locale("");
      vector0.add(path1);
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      pathMerger0.setEnableInstructions(false);
      ResponsePath responsePath0 = pathMerger0.doWork(pointList0, vector0, encodingManager0, translationMap_TranslationHashMap0);
      assertFalse(responsePath0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      PointList pointList0 = new PointList();
      Vector<Path> vector0 = new Vector<Path>();
      EncodingManager encodingManager0 = EncodingManager.create("");
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, true, (-1));
      Path path0 = new Path(graphHopperStorage0);
      Path path1 = path0.setTime((-1));
      Path path2 = path1.setFound(true);
      vector0.add(path2);
      Locale locale0 = new Locale("");
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      // Undeclared exception!
      try { 
        pathMerger0.doWork(pointList0, vector0, encodingManager0, translationMap_TranslationHashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.routing.InstructionsFromEdges", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      PointList pointList0 = new PointList();
      Vector<Path> vector0 = new Vector<Path>();
      EncodingManager encodingManager0 = EncodingManager.create("");
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, true, (-1));
      Path path0 = new Path(graphHopperStorage0);
      vector0.add(path0);
      Locale locale0 = new Locale("");
      vector0.add(path0);
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      ResponsePath responsePath0 = pathMerger0.doWork(pointList0, vector0, encodingManager0, translationMap_TranslationHashMap0);
      assertEquals("", responsePath0.getDebugInfo());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      PointList pointList0 = new PointList();
      Vector<Path> vector0 = new Vector<Path>();
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, true, (-1));
      Path path0 = new Path(graphHopperStorage0);
      path0.addEdge((-1));
      Path path1 = path0.setFound(true);
      vector0.add(path1);
      Locale locale0 = new Locale("");
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      pathMerger0.setEnableInstructions(false);
      // Undeclared exception!
      try { 
        pathMerger0.doWork(pointList0, vector0, encodingManager0, translationMap_TranslationHashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // fromNode < 0 should not happen
         //
         verifyException("com.graphhopper.routing.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      PointList pointList0 = new PointList(2002, false);
      pathMerger0.setCalcPoints(false);
      Vector<Path> vector0 = new Vector<Path>();
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      Locale locale0 = new Locale("");
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      // Undeclared exception!
      try { 
        pathMerger0.doWork(pointList0, vector0, encodingManager0, translationMap_TranslationHashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // inconsistent instructions, total interval length: 0 vs. point list length -1
         //
         verifyException("com.graphhopper.util.PathSimplification", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PointList pointList0 = new PointList(2002, false);
      Vector<Path> vector0 = new Vector<Path>();
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      Locale locale0 = new Locale("");
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      PathMerger pathMerger1 = pathMerger0.setSimplifyResponse(false);
      ResponsePath responsePath0 = pathMerger1.doWork(pointList0, vector0, encodingManager0, translationMap_TranslationHashMap0);
      assertFalse(responsePath0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      PointList pointList0 = new PointList();
      Vector<Path> vector0 = new Vector<Path>();
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      MMapDirectory mMapDirectory0 = new MMapDirectory("");
      GraphHopperStorage graphHopperStorage0 = new GraphHopperStorage(mMapDirectory0, encodingManager0, false, true, (-1));
      Path path0 = new Path(graphHopperStorage0);
      Path path1 = path0.setFound(true);
      vector0.add(path1);
      Locale locale0 = new Locale("");
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      pathMerger0.setEnableInstructions(false);
      // Undeclared exception!
      try { 
        pathMerger0.doWork(pointList0, vector0, encodingManager0, translationMap_TranslationHashMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PointList pointList0 = new PointList(2002, false);
      Vector<Path> vector0 = new Vector<Path>();
      DefaultFlagEncoderFactory defaultFlagEncoderFactory0 = new DefaultFlagEncoderFactory();
      EncodingManager encodingManager0 = EncodingManager.create((FlagEncoderFactory) defaultFlagEncoderFactory0, "");
      Locale locale0 = new Locale("");
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      // Undeclared exception!
      try { 
        pathMerger0.doWork(pointList0, vector0, encodingManager0, translationMap_TranslationHashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // inconsistent instructions, total interval length: 0 vs. point list length -1
         //
         verifyException("com.graphhopper.util.PathSimplification", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      pathMerger0.setFavoredHeading((-1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PathDetailsBuilderFactory pathDetailsBuilderFactory0 = new PathDetailsBuilderFactory();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(arrayList0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0, locale_FilteringMode0);
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      PathMerger pathMerger1 = pathMerger0.setPathDetailsBuilders(pathDetailsBuilderFactory0, list0);
      assertSame(pathMerger1, pathMerger0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DouglasPeucker douglasPeucker0 = new DouglasPeucker();
      PathMerger pathMerger0 = new PathMerger((Graph) null, (Weighting) null);
      PathMerger pathMerger1 = pathMerger0.setDouglasPeucker(douglasPeucker0);
      assertSame(pathMerger0, pathMerger1);
  }
}
