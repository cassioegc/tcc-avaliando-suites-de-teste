/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 06:11:08 GMT 2021
 */

package com.graphhopper.util.details;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.details.DistanceDetails;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DistanceDetails_ESTest extends DistanceDetails_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DistanceDetails distanceDetails0 = new DistanceDetails();
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-6).when(edgeIteratorState0).getDistance();
      doReturn((-31), (-31)).when(edgeIteratorState0).getEdge();
      boolean boolean0 = distanceDetails0.isEdgeDifferentToLastEdge(edgeIteratorState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DistanceDetails distanceDetails0 = new DistanceDetails();
      // Undeclared exception!
      try { 
        distanceDetails0.isEdgeDifferentToLastEdge((EdgeIteratorState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.details.DistanceDetails", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DistanceDetails distanceDetails0 = new DistanceDetails();
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState0).getEdge();
      EdgeIteratorState edgeIteratorState1 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(edgeIteratorState1).getDistance();
      doReturn(0, 0).when(edgeIteratorState1).getEdge();
      boolean boolean0 = distanceDetails0.isEdgeDifferentToLastEdge(edgeIteratorState1);
      boolean boolean1 = distanceDetails0.isEdgeDifferentToLastEdge(edgeIteratorState0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DistanceDetails distanceDetails0 = new DistanceDetails();
      Object object0 = distanceDetails0.getCurrentValue();
      assertEquals(0.0, object0);
  }
}
