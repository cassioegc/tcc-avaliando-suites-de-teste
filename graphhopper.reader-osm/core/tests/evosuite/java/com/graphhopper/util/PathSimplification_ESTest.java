/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:30:42 GMT 2021
 */

package com.graphhopper.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.ResponsePath;
import com.graphhopper.util.DouglasPeucker;
import com.graphhopper.util.Instruction;
import com.graphhopper.util.InstructionList;
import com.graphhopper.util.PathSimplification;
import com.graphhopper.util.PointList;
import com.graphhopper.util.TranslationMap;
import com.graphhopper.util.shapes.GHPoint;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.PrecisionModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PathSimplification_ESTest extends PathSimplification_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PointList pointList0 = PointList.EMPTY;
      LinkedList<PathSimplification.Partition> linkedList0 = new LinkedList<PathSimplification.Partition>();
      DouglasPeucker douglasPeucker0 = new DouglasPeucker();
      PathSimplification.simplify(pointList0, (List<PathSimplification.Partition>) linkedList0, douglasPeucker0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResponsePath responsePath0 = new ResponsePath();
      Coordinate[] coordinateArray0 = new Coordinate[2];
      Coordinate coordinate0 = new Coordinate(1402.014322, 1402.014322);
      coordinateArray0[0] = coordinate0;
      coordinateArray0[1] = coordinate0;
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FLOATING;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      LineString lineString0 = new LineString(coordinateArray0, precisionModel0, 0);
      PointList pointList0 = PointList.from(lineString0);
      GHPoint gHPoint0 = new GHPoint(1402.014322, 1402.014322);
      pointList0.add(gHPoint0);
      ResponsePath responsePath1 = responsePath0.setPoints(pointList0);
      DouglasPeucker douglasPeucker0 = new DouglasPeucker();
      PathSimplification.simplify(responsePath1, douglasPeucker0, false);
      assertEquals(2, pointList0.size());
      assertEquals(2, pointList0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResponsePath responsePath0 = new ResponsePath();
      PointList pointList0 = new PointList();
      responsePath0.setPoints(pointList0);
      DouglasPeucker douglasPeucker0 = new DouglasPeucker();
      PointList pointList1 = PathSimplification.simplify(responsePath0, douglasPeucker0, false);
      assertSame(pointList1, pointList0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResponsePath responsePath0 = new ResponsePath();
      Coordinate[] coordinateArray0 = new Coordinate[2];
      Coordinate coordinate0 = new Coordinate(1402.014322, 1402.014322);
      coordinateArray0[0] = coordinate0;
      coordinateArray0[1] = coordinate0;
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FLOATING;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      LineString lineString0 = new LineString(coordinateArray0, precisionModel0, 0);
      PointList pointList0 = PointList.from(lineString0);
      ResponsePath responsePath1 = responsePath0.setPoints(pointList0);
      DouglasPeucker douglasPeucker0 = new DouglasPeucker();
      PointList pointList1 = PathSimplification.simplify(responsePath1, douglasPeucker0, false);
      assertTrue(pointList1.isImmutable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResponsePath responsePath0 = new ResponsePath();
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      responsePath0.addError(mockThrowable0);
      DouglasPeucker douglasPeucker0 = new DouglasPeucker();
      // Undeclared exception!
      try { 
        PathSimplification.simplify(responsePath0, douglasPeucker0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You cannot call getPoints if response contains errors. Check this with ghResponse.hasErrors(). Errors are: [org.evosuite.runtime.mock.java.lang.MockThrowable]
         //
         verifyException("com.graphhopper.ResponsePath", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResponsePath responsePath0 = new ResponsePath();
      Coordinate[] coordinateArray0 = new Coordinate[2];
      Coordinate coordinate0 = new Coordinate(0.0, 1402.014322);
      coordinateArray0[0] = coordinate0;
      coordinateArray0[1] = coordinateArray0[0];
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FLOATING;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      LineString lineString0 = new LineString(coordinateArray0, precisionModel0, 0);
      PointList pointList0 = PointList.from(lineString0);
      GHPoint gHPoint0 = new GHPoint();
      pointList0.add(gHPoint0);
      ResponsePath responsePath1 = responsePath0.setPoints(pointList0);
      DouglasPeucker douglasPeucker0 = new DouglasPeucker();
      // Undeclared exception!
      try { 
        PathSimplification.simplify(responsePath1, douglasPeucker0, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // maximum not found in [0,2]
         //
         verifyException("com.graphhopper.util.DouglasPeucker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResponsePath responsePath0 = new ResponsePath();
      Locale locale0 = Locale.CHINESE;
      TranslationMap.TranslationHashMap translationMap_TranslationHashMap0 = new TranslationMap.TranslationHashMap(locale0);
      InstructionList instructionList0 = new InstructionList(translationMap_TranslationHashMap0);
      PointList pointList0 = PathSimplification.simplify(responsePath0, (DouglasPeucker) null, false);
      Instruction instruction0 = new Instruction(3670, ",MwJlC~", pointList0);
      instructionList0.add(instruction0);
      responsePath0.setInstructions(instructionList0);
      // Undeclared exception!
      try { 
        PathSimplification.simplify(responsePath0, (DouglasPeucker) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // inconsistent instructions, total interval length: 0 vs. point list length -1
         //
         verifyException("com.graphhopper.util.PathSimplification", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResponsePath responsePath0 = new ResponsePath();
      Coordinate[] coordinateArray0 = new Coordinate[2];
      Coordinate coordinate0 = new Coordinate(1402.01432, 1402.01432);
      coordinateArray0[0] = coordinate0;
      coordinateArray0[1] = coordinate0;
      PrecisionModel.Type precisionModel_Type0 = PrecisionModel.FLOATING;
      PrecisionModel precisionModel0 = new PrecisionModel(precisionModel_Type0);
      LineString lineString0 = new LineString(coordinateArray0, precisionModel0, 0);
      PointList pointList0 = PointList.fromLineString(lineString0);
      GHPoint gHPoint0 = new GHPoint();
      pointList0.add(gHPoint0);
      responsePath0.setPoints(pointList0);
      // Undeclared exception!
      try { 
        PathSimplification.simplify(responsePath0, (DouglasPeucker) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.PathSimplification", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DouglasPeucker douglasPeucker0 = new DouglasPeucker();
      // Undeclared exception!
      try { 
        PathSimplification.simplify((PointList) null, (List<PathSimplification.Partition>) null, douglasPeucker0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.PathSimplification", e);
      }
  }
}
