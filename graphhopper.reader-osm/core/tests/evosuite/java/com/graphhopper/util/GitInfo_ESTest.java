/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 06:36:12 GMT 2021
 */

package com.graphhopper.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.graphhopper.util.GitInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GitInfo_ESTest extends GitInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo((String) null, (String) null, "{-y", "dirty=", false);
      boolean boolean0 = gitInfo0.isDirty();
      assertEquals("{-y", gitInfo0.getCommitMessage());
      assertFalse(boolean0);
      assertEquals("dirty=", gitInfo0.getBranch());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo((String) null, (String) null, "{-y", "dirty=", false);
      String string0 = gitInfo0.getCommitTime();
      assertFalse(gitInfo0.isDirty());
      assertNull(string0);
      assertEquals("dirty=", gitInfo0.getBranch());
      assertEquals("{-y", gitInfo0.getCommitMessage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo((String) null, "", (String) null, (String) null, false);
      String string0 = gitInfo0.getCommitTime();
      assertNotNull(string0);
      assertFalse(gitInfo0.isDirty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo((String) null, "", (String) null, (String) null, false);
      String string0 = gitInfo0.getCommitMessage();
      assertFalse(gitInfo0.isDirty());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo("p?sik@", "p?sik@", "", "p?sik@", true);
      String string0 = gitInfo0.getCommitMessage();
      assertEquals("p?sik@", gitInfo0.getBranch());
      assertEquals("", string0);
      assertEquals("p?sik@", gitInfo0.getCommitHash());
      assertEquals("p?sik@", gitInfo0.getCommitTime());
      assertTrue(gitInfo0.isDirty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo((String) null, (String) null, "Y>','", (String) null, false);
      String string0 = gitInfo0.getCommitHash();
      assertNull(string0);
      assertFalse(gitInfo0.isDirty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo("", "", "", ":", true);
      String string0 = gitInfo0.getCommitHash();
      assertEquals("", gitInfo0.getCommitMessage());
      assertEquals(":", gitInfo0.getBranch());
      assertTrue(gitInfo0.isDirty());
      assertEquals("", gitInfo0.getCommitTime());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo((String) null, (String) null, "Y>','", (String) null, false);
      String string0 = gitInfo0.getBranch();
      assertNull(string0);
      assertFalse(gitInfo0.isDirty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo("|`1y&dyj].-h~", "2)!hOexScM(y7_,03q{", "~3'(e", "", true);
      String string0 = gitInfo0.getBranch();
      assertEquals("2)!hOexScM(y7_,03q{", gitInfo0.getCommitTime());
      assertEquals("", string0);
      assertEquals("~3'(e", gitInfo0.getCommitMessage());
      assertEquals("|`1y&dyj].-h~", gitInfo0.getCommitHash());
      assertTrue(gitInfo0.isDirty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo("EKU.HTN", "EKU.HTN", "EKU.HTN", "EKU.HTN", true);
      gitInfo0.getCommitMessage();
      assertTrue(gitInfo0.isDirty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo("EKU.HTN", "EKU.HTN", "EKU.HTN", "EKU.HTN", true);
      gitInfo0.getBranch();
      assertTrue(gitInfo0.isDirty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo("EKU.HTN", "EKU.HTN", "EKU.HTN", "EKU.HTN", true);
      String string0 = gitInfo0.toString();
      assertEquals("EKU.HTN|EKU.HTN|dirty=true|EKU.HTN|EKU.HTN", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo("EKU.HTN", "EKU.HTN", "EKU.HTN", "EKU.HTN", true);
      gitInfo0.getCommitTime();
      assertTrue(gitInfo0.isDirty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo("EKU.HTN", "EKU.HTN", "EKU.HTN", "EKU.HTN", true);
      boolean boolean0 = gitInfo0.isDirty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GitInfo gitInfo0 = new GitInfo("EKU.HTN", "EKU.HTN", "EKU.HTN", "EKU.HTN", true);
      gitInfo0.getCommitHash();
      assertTrue(gitInfo0.isDirty());
  }
}
