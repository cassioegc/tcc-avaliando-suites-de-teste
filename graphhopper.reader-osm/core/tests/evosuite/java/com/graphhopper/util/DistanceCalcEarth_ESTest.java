/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 02:52:49 GMT 2021
 */

package com.graphhopper.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.util.DistanceCalc3D;
import com.graphhopper.util.DistanceCalcEarth;
import com.graphhopper.util.DistanceCalcEuclidean;
import com.graphhopper.util.DistancePlaneProjection;
import com.graphhopper.util.PointList;
import com.graphhopper.util.shapes.BBox;
import com.graphhopper.util.shapes.GHPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.locationtech.jts.geom.CoordinateSequence;
import org.locationtech.jts.geom.DefaultCoordinateSequenceFactory;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.LinearRing;
import org.locationtech.jts.geom.impl.PackedCoordinateSequence;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DistanceCalcEarth_ESTest extends DistanceCalcEarth_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = new DistancePlaneProjection();
      distancePlaneProjection0.isCrossBoundary(300.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      distanceCalc3D0.validEdgeDistance(0.0, 0.0, 0.0, 1749.500567766, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      distanceCalcEarth0.validEdgeDistance(54.41058407, (-1.0), (-1.0), (-1.0), (-1.0), (-1.0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DistanceCalcEuclidean distanceCalcEuclidean0 = new DistanceCalcEuclidean();
      distanceCalcEuclidean0.calcCrossingPointToEdge((-796.6710684671), 0.1, (-637.99), (-1452.5846579783326), (-1452.5846579783326), 2.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      // Undeclared exception!
      try { 
        distanceCalc3D0.createBBox((-240.9858955545989), (-240.9858955545989), (-240.9858955545989));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Distance must not be zero or negative! -240.9858955545989 lat,lon:-240.9858955545989,-240.9858955545989
         //
         verifyException("com.graphhopper.util.DistanceCalcEarth", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      distanceCalcEarth0.isDateLineCrossOver(0.0, (-180.0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      GHPoint gHPoint0 = distanceCalcEarth0.projectCoordinate(0.0, 0.0, 1638.2, 0.0);
      assertEquals(0.0, gHPoint0.lon, 0.01);
      assertEquals(0.014732686548160644, gHPoint0.lat, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.projectCoordinate(1475.0, (-644.0445865419955), 360.0, Double.NaN);
      assertEquals(Double.NaN, gHPoint0.lon, 0.01);
      assertEquals(Double.NaN, gHPoint0.lat, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      GHPoint gHPoint0 = distanceCalcEarth0.projectCoordinate(0.0, (-778.0), 0.0, (-1410.73014));
      assertEquals(0.0, gHPoint0.lat, 0.01);
      assertEquals((-417.99999999999994), gHPoint0.lon, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.projectCoordinate(0.0, (-2326.01096), 1.0E-4, (-2993.27183088556));
      assertEquals((-526.0109600008261), gHPoint0.lon, 0.01);
      assertEquals((-3.5531648631407414E-10), gHPoint0.lat, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      GHPoint gHPoint0 = distancePlaneProjection0.intermediatePoint(Double.NaN, (-2185.06418227473), Double.NaN, 0.01, 0.0);
      assertEquals(Double.NaN, gHPoint0.lat, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.intermediatePoint((-976.32063), 6371000.0, 4.00294702814637E7, (-1.0), (-976.32063));
      assertEquals((-148.73814679960745), gHPoint0.lon, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = (DistanceCalcEarth)DistanceCalcEarth.DIST_EARTH;
      GHPoint gHPoint0 = distanceCalcEarth0.intermediatePoint(0.0, 0.0, 0.0, (-90.0), 0.0);
      assertEquals(0.0, gHPoint0.lat, 0.01);
      assertEquals(0.0, gHPoint0.lon, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      boolean boolean0 = distanceCalc3D0.hasElevationDiff(2183.004205346, 2.0490963066057512E14);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = new DistancePlaneProjection();
      BBox bBox0 = distancePlaneProjection0.createBBox((-942.4850647041), 0.0, 2910.38);
      assertEquals((-942.5112383802543), bBox0.minLat, 0.01);
      assertEquals((-0.03549197212782889), bBox0.maxLon, 0.01);
      assertEquals((-942.4588910279456), bBox0.maxLat, 0.01);
      assertEquals(0.03549197212782889, bBox0.minLon, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DistanceCalcEuclidean distanceCalcEuclidean0 = new DistanceCalcEuclidean();
      double double0 = distanceCalcEuclidean0.calcShrinkFactor(0.0, (-2020.256));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      double double0 = distanceCalc3D0.calcShrinkFactor(0.0, (-2464.48835));
      assertEquals((-0.8849402959896443), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = (DistanceCalcEarth)DistanceCalcEarth.DIST_EARTH;
      double double0 = distanceCalcEarth0.calcNormalizedEdgeDistance3D(2.0, 0.0, 0.0, 0.0, 0.0, 1.609344, 2.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      double double0 = distanceCalc3D0.calcNormalizedEdgeDistance((-49.7724176419913), (-49.7724176419913), (-49.7724176419913), (-49.7724176419913), (-49.7724176419913), 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      double double0 = distancePlaneProjection0.calcNormalizedDist(360.0, 360.0, 360.0, 360.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      double double0 = distanceCalc3D0.calcNormalizedDist((-1.7976931348623157E308), (-1.7976931348623157E308), (-1.7976931348623157E308), (-221.95));
      assertEquals(0.04333406488258911, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = (DistanceCalcEarth)DistanceCalcEarth.DIST_EARTH;
      double double0 = distanceCalcEarth0.calcNormalizedDist(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = new DistancePlaneProjection();
      DefaultCoordinateSequenceFactory defaultCoordinateSequenceFactory0 = new DefaultCoordinateSequenceFactory();
      GeometryFactory geometryFactory0 = new GeometryFactory(defaultCoordinateSequenceFactory0);
      PackedCoordinateSequence.Float packedCoordinateSequence_Float0 = new PackedCoordinateSequence.Float(608, 608);
      LinearRing linearRing0 = geometryFactory0.createLinearRing((CoordinateSequence) packedCoordinateSequence_Float0);
      packedCoordinateSequence_Float0.setX(4, (-740.584387));
      PointList pointList0 = PointList.fromLineString(linearRing0);
      double double0 = distancePlaneProjection0.calcDistance(pointList0);
      assertEquals(1.6469845864862242E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      double double0 = distancePlaneProjection0.calcDist3D(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = (DistanceCalcEarth)DistanceCalcEarth.DIST_EARTH;
      double double0 = distanceCalcEarth0.calcDist(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      double double0 = distanceCalc3D0.calcDist((-2989.4520839), 0.0, 3519.8385637, 0.0);
      assertEquals(3256971.4112537038, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      double double0 = distanceCalc3D0.calcDenormalizedDist(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      double double0 = distancePlaneProjection0.calcDenormalizedDist(2022.0468);
      assertEquals(2.8648586997825706E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      GHPoint gHPoint0 = distanceCalc3D0.calcCrossingPointToEdge(282.760665893, 0.04333406488258911, Double.NaN, 1.0E-6, 0.0, 9.42477796076938);
      assertEquals(Double.NaN, gHPoint0.lon, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      double double0 = distanceCalcEarth0.calcCircumference(6378218.132408253);
      assertEquals((-5662716.278334481), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DistanceCalcEuclidean distanceCalcEuclidean0 = new DistanceCalcEuclidean();
      // Undeclared exception!
      try { 
        distanceCalcEuclidean0.projectCoordinate((-739.90606723), 2698.59, 2698.59, (-1503.108068));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported for the 2D Euclidean space
         //
         verifyException("com.graphhopper.util.DistanceCalcEuclidean", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DistanceCalcEuclidean distanceCalcEuclidean0 = new DistanceCalcEuclidean();
      // Undeclared exception!
      try { 
        distanceCalcEuclidean0.isDateLineCrossOver(111194.92664455873, 1.0E-4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported for the 2D Euclidean space
         //
         verifyException("com.graphhopper.util.DistanceCalcEuclidean", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DistanceCalcEuclidean distanceCalcEuclidean0 = new DistanceCalcEuclidean();
      // Undeclared exception!
      try { 
        distanceCalcEuclidean0.isCrossBoundary(0.1, 0.1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported for the 2D Euclidean space
         //
         verifyException("com.graphhopper.util.DistanceCalcEuclidean", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DistanceCalcEuclidean distanceCalcEuclidean0 = new DistanceCalcEuclidean();
      // Undeclared exception!
      try { 
        distanceCalcEuclidean0.createBBox(0.0, 0.0, 1290.778228435966);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported for the 2D Euclidean space
         //
         verifyException("com.graphhopper.util.DistanceCalcEuclidean", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DistanceCalcEuclidean distanceCalcEuclidean0 = new DistanceCalcEuclidean();
      // Undeclared exception!
      try { 
        distanceCalcEuclidean0.calcCircumference(2.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported for the 2D Euclidean space
         //
         verifyException("com.graphhopper.util.DistanceCalcEuclidean", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      double double0 = distanceCalc3D0.calcNormalizedDist(90.0);
      assertEquals(4.988957650466345E-11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      boolean boolean0 = distanceCalc3D0.hasElevationDiff((-1782.53), Double.NaN);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      double double0 = distancePlaneProjection0.calcDist3D(1075.1563563546124, 1075.1563563546124, 1747.4893843090713, (-245.69144268742525), 111194.92664455873, 1747.4893843090713);
      assertEquals(7.071590979969518E9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      boolean boolean0 = distanceCalcEarth0.isCrossBoundary(6371000.0, 111194.92664455873);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = new DistancePlaneProjection();
      boolean boolean0 = distancePlaneProjection0.isCrossBoundary(0.01, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = new DistancePlaneProjection();
      DefaultCoordinateSequenceFactory defaultCoordinateSequenceFactory0 = new DefaultCoordinateSequenceFactory();
      GeometryFactory geometryFactory0 = new GeometryFactory(defaultCoordinateSequenceFactory0);
      PackedCoordinateSequence.Float packedCoordinateSequence_Float0 = new PackedCoordinateSequence.Float(608, 608);
      LinearRing linearRing0 = geometryFactory0.createLinearRing((CoordinateSequence) packedCoordinateSequence_Float0);
      PointList pointList0 = PointList.fromLineString(linearRing0);
      pointList0.is3D = true;
      // Undeclared exception!
      try { 
        distancePlaneProjection0.calcDistance(pointList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.PointList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      PointList pointList0 = PointList.EMPTY;
      double double0 = distancePlaneProjection0.calcDistance(pointList0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      GHPoint gHPoint0 = distancePlaneProjection0.intermediatePoint(574.7505, 574.7505, 574.7505, 574.7505, 574.7505);
      assertEquals(574.7505, gHPoint0.lon, 0.01);
      assertEquals(574.7505, gHPoint0.lat, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      boolean boolean0 = distanceCalc3D0.validEdgeDistance(111194.92664455873, (-2875.0), (-751.195876), 1.609344, 0.0, (-751.195876));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      boolean boolean0 = distanceCalc3D0.validEdgeDistance(0.0, 4.003017359204114E7, 0.0, 508.882162, (-751.195876), 4.003017359204114E7);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      boolean boolean0 = distanceCalcEarth0.validEdgeDistance(623.105914629315, (-2573.76), (-3285.37457358263), (-1948.13335950202), 0.0, Double.NaN);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      GHPoint gHPoint0 = distancePlaneProjection0.calcCrossingPointToEdge(0.01, 0.01, 0.01, 0.01, 180.0, 0.01);
      assertEquals(0.01, gHPoint0.lat, 0.01);
      assertEquals(0.01, gHPoint0.lon, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = new DistancePlaneProjection();
      GHPoint gHPoint0 = distancePlaneProjection0.calcCrossingPointToEdge(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, gHPoint0.lat, 0.01);
      assertEquals(0.0, gHPoint0.lon, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      double double0 = distancePlaneProjection0.calcNormalizedEdgeDistance3D(0.01, 180.0, 1181.4332, 1181.4332, (-90.0), (-169.0), (-3887.73), (-169.0), 508.882162);
      assertEquals(25.33845446997356, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = new DistancePlaneProjection();
      double double0 = distancePlaneProjection0.calcNormalizedEdgeDistance3D(6.283185307179586, 0.3, 0.3069583206835144, Double.NaN, (-40.02551521562048), 2483.2009, 6.283185307179586, (-942.4588910279456), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      double double0 = distanceCalc3D0.calcNormalizedEdgeDistance3D(0.0, (-1477.0), 0.004576487231532356, (-1021.1045764460742), (-264.78689), Double.NaN, 0.004576487231532356, 1493.66883559569, 0.004576487231532356);
      assertEquals(0.30272207250135685, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      double double0 = distancePlaneProjection0.calcNormalizedEdgeDistance3D(0.0, 574.7505, Double.NaN, 747.3639594160026, 180.0, 180.0, 1808.149795225, (-627.0478947439734), 0.0);
      assertEquals(4.253379142555263, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      double double0 = distancePlaneProjection0.calcNormalizedEdgeDistance(6371000.0, 6371000.0, 6371000.0, 0.0, 9.7, 0.0);
      assertEquals(3.728296175340422E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      double double0 = distanceCalcEarth0.calcNormalizedEdgeDistance(4.003017359204114E7, 111194.92664455873, 6378137.0, Double.NaN, 0.0, 111137.63086504565);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DistancePlaneProjection distancePlaneProjection0 = DistancePlaneProjection.DIST_PLANE;
      // Undeclared exception!
      try { 
        distancePlaneProjection0.createBBox(Double.NaN, Double.NaN, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Distance must not be zero or negative! 0.0 lat,lon:NaN,NaN
         //
         verifyException("com.graphhopper.util.DistanceCalcEarth", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      BBox bBox0 = distanceCalcEarth0.createBBox(111194.92664455873, 6378137.0, 6371000.0);
      assertEquals(6378055.867591747, bBox0.minLon, 0.01);
      assertEquals(6378218.132408253, bBox0.maxLon, 0.01);
      assertEquals(111137.63086504565, bBox0.minLat, 0.01);
      assertEquals(111252.2224240718, bBox0.maxLat, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      boolean boolean0 = distanceCalcEarth0.isDateLineCrossOver(6331749.434894211, 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      boolean boolean0 = distanceCalcEarth0.isDateLineCrossOver(90.0, 90.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      double double0 = distanceCalcEarth0.calcDist3D(0.0, 2038.77051490652, 707.09809406428, 2637.8610848, 2637.8610848, 0.0);
      assertEquals(8463043.71798474, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      double double0 = distanceCalcEarth0.calcDist3D(520.541, 111137.63086504565, Double.NaN, 0.0, (-1731.2359377), (-4372.2298));
      assertEquals(2369839.765340815, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      double double0 = distanceCalcEarth0.calcNormalizedEdgeDistance3D(6378218.132408253, (-1948.13335950202), 0.0, 0.0, 0.0, 514.07345885235, (-633.0), Double.NaN, 3.141592653589793);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      double double0 = distanceCalcEarth0.calcCircumference(0.0);
      assertEquals(4.003017359204114E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DistanceCalcEarth distanceCalcEarth0 = new DistanceCalcEarth();
      String string0 = distanceCalcEarth0.toString();
      assertEquals("EXACT", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      double double0 = distanceCalc3D0.calcDenormalizedDist(548.7064325211602);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DistanceCalc3D distanceCalc3D0 = new DistanceCalc3D();
      PointList pointList0 = new PointList();
      pointList0.size = 602;
      // Undeclared exception!
      try { 
        distanceCalc3D0.calcDistance(pointList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
