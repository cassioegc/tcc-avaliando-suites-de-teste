/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 04:57:53 GMT 2021
 */

package com.graphhopper.util.details;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.routing.weighting.Weighting;
import com.graphhopper.util.EdgeIteratorState;
import com.graphhopper.util.details.AverageSpeedDetails;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AverageSpeedDetails_ESTest extends AverageSpeedDetails_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0L, (-9L)).when(weighting0).calcEdgeMillis(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      doReturn(0L).when(weighting0).calcTurnMillis(anyInt() , anyInt() , anyInt());
      AverageSpeedDetails averageSpeedDetails0 = new AverageSpeedDetails(weighting0, 1.2);
      assertEquals("average_speed", averageSpeedDetails0.getName());
      assertEquals("average_speed", averageSpeedDetails0.toString());
      assertNotNull(averageSpeedDetails0);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(1.2).when(edgeIteratorState0).getDistance();
      doReturn(268).when(edgeIteratorState0).getEdge();
      boolean boolean0 = averageSpeedDetails0.isEdgeDifferentToLastEdge(edgeIteratorState0);
      assertEquals("average_speed", averageSpeedDetails0.getName());
      assertEquals("average_speed", averageSpeedDetails0.toString());
      assertTrue(boolean0);
      
      EdgeIteratorState edgeIteratorState1 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn((-772)).when(edgeIteratorState1).getBaseNode();
      doReturn(826.415869769).when(edgeIteratorState1).getDistance();
      doReturn(854, 268).when(edgeIteratorState1).getEdge();
      boolean boolean1 = averageSpeedDetails0.isEdgeDifferentToLastEdge(edgeIteratorState1);
      assertTrue(boolean1 == boolean0);
      assertEquals("average_speed", averageSpeedDetails0.getName());
      assertEquals("average_speed", averageSpeedDetails0.toString());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(weighting0).calcEdgeMillis(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      AverageSpeedDetails averageSpeedDetails0 = new AverageSpeedDetails(weighting0, 0.0);
      assertEquals("average_speed", averageSpeedDetails0.toString());
      assertEquals("average_speed", averageSpeedDetails0.getName());
      assertNotNull(averageSpeedDetails0);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0.1).when(edgeIteratorState0).getDistance();
      doReturn(0).when(edgeIteratorState0).getEdge();
      boolean boolean0 = averageSpeedDetails0.isEdgeDifferentToLastEdge(edgeIteratorState0);
      assertEquals("average_speed", averageSpeedDetails0.toString());
      assertEquals("average_speed", averageSpeedDetails0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AverageSpeedDetails averageSpeedDetails0 = new AverageSpeedDetails(weighting0, 0.0);
      assertEquals("average_speed", averageSpeedDetails0.toString());
      assertEquals("average_speed", averageSpeedDetails0.getName());
      assertNotNull(averageSpeedDetails0);
      
      Object object0 = averageSpeedDetails0.getCurrentValue();
      assertEquals("average_speed", averageSpeedDetails0.toString());
      assertEquals("average_speed", averageSpeedDetails0.getName());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AverageSpeedDetails averageSpeedDetails0 = new AverageSpeedDetails(weighting0, 11);
      assertEquals("average_speed", averageSpeedDetails0.toString());
      assertEquals("average_speed", averageSpeedDetails0.getName());
      assertNotNull(averageSpeedDetails0);
      
      // Undeclared exception!
      try { 
        averageSpeedDetails0.isEdgeDifferentToLastEdge((EdgeIteratorState) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.details.AverageSpeedDetails", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(weighting0).calcEdgeMillis(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      doReturn(0L).when(weighting0).calcTurnMillis(anyInt() , anyInt() , anyInt());
      AverageSpeedDetails averageSpeedDetails0 = new AverageSpeedDetails(weighting0, 1.0E-4);
      assertEquals("average_speed", averageSpeedDetails0.toString());
      assertEquals("average_speed", averageSpeedDetails0.getName());
      assertNotNull(averageSpeedDetails0);
      
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(688.8509825887841).when(edgeIteratorState0).getDistance();
      doReturn(0).when(edgeIteratorState0).getEdge();
      boolean boolean0 = averageSpeedDetails0.isEdgeDifferentToLastEdge(edgeIteratorState0);
      assertEquals("average_speed", averageSpeedDetails0.toString());
      assertEquals("average_speed", averageSpeedDetails0.getName());
      assertTrue(boolean0);
      
      EdgeIteratorState edgeIteratorState1 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(edgeIteratorState1).getBaseNode();
      doReturn(Double.NaN).when(edgeIteratorState1).getDistance();
      doReturn(0, 0).when(edgeIteratorState1).getEdge();
      boolean boolean1 = averageSpeedDetails0.isEdgeDifferentToLastEdge(edgeIteratorState1);
      assertFalse(boolean1 == boolean0);
      assertEquals("average_speed", averageSpeedDetails0.toString());
      assertEquals("average_speed", averageSpeedDetails0.getName());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(weighting0).calcEdgeMillis(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      AverageSpeedDetails averageSpeedDetails0 = new AverageSpeedDetails(weighting0, 11);
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(1897.17859).when(edgeIteratorState0).getDistance();
      doReturn(0).when(edgeIteratorState0).getEdge();
      boolean boolean0 = averageSpeedDetails0.isEdgeDifferentToLastEdge(edgeIteratorState0);
      EdgeIteratorState edgeIteratorState1 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(edgeIteratorState1).getDistance();
      boolean boolean1 = averageSpeedDetails0.isEdgeDifferentToLastEdge(edgeIteratorState1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      AverageSpeedDetails averageSpeedDetails0 = new AverageSpeedDetails(weighting0);
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(edgeIteratorState0).getDistance();
      boolean boolean0 = averageSpeedDetails0.isEdgeDifferentToLastEdge(edgeIteratorState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Weighting weighting0 = mock(Weighting.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(weighting0).calcEdgeMillis(any(com.graphhopper.util.EdgeIteratorState.class) , anyBoolean());
      AverageSpeedDetails averageSpeedDetails0 = new AverageSpeedDetails(weighting0, 1.0E-4);
      EdgeIteratorState edgeIteratorState0 = mock(EdgeIteratorState.class, new ViolatedAssumptionAnswer());
      doReturn(688.8509825887841).when(edgeIteratorState0).getDistance();
      doReturn(0).when(edgeIteratorState0).getEdge();
      boolean boolean0 = averageSpeedDetails0.isEdgeDifferentToLastEdge(edgeIteratorState0);
      assertTrue(boolean0);
      
      Object object0 = averageSpeedDetails0.getCurrentValue();
      assertNotNull(object0);
      assertEquals(9.223372036854776E14, object0);
  }
}
