/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 03:41:54 GMT 2021
 */

package com.graphhopper.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.util.ProgressListener;
import com.graphhopper.util.Unzipper;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Unzipper_ESTest extends Unzipper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      unzipper0.unzip("com.graphhopper.util.Unzipper", false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      // Undeclared exception!
      try { 
        unzipper0.unzip((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.Helper", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      // Undeclared exception!
      try { 
        unzipper0.unzip((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ProgressListener progressListener0 = mock(ProgressListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        unzipper0.unzip((InputStream) sequenceInputStream0, (File) null, progressListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.Unzipper", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ProgressListener progressListener0 = mock(ProgressListener.class, new ViolatedAssumptionAnswer());
      try { 
        unzipper0.unzip((InputStream) pushbackInputStream0, (File) mockFile0, progressListener0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      ZipEntry zipEntry0 = new ZipEntry("j .0jH6");
      // Undeclared exception!
      try { 
        unzipper0.getVerifiedFile((File) null, zipEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.Unzipper", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Unzipper unzipper0 = new Unzipper();
      MockFile mockFile0 = new MockFile("P@l6X%h~+A'k");
      ZipEntry zipEntry0 = new ZipEntry("");
      try { 
        unzipper0.getVerifiedFile(mockFile0, zipEntry0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      boolean boolean0 = unzipper0.unzip("com.graphhopper.util.Unzipper", "com.graphhopper.util.Unzipper", true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      boolean boolean0 = unzipper0.unzip("", "", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      MockFile mockFile0 = new MockFile("///");
      ZipEntry zipEntry0 = new ZipEntry("L\"d#9{DvR{ll^!>");
      // Undeclared exception!
      try { 
        unzipper0.getVerifiedFile(mockFile0, zipEntry0);
        fail("Expecting exception: SecurityException");
      
      } catch(SecurityException e) {
         //
         // Zip Entry is outside of the target dir: L\"d#9{DvR{ll^!>
         //
         verifyException("com.graphhopper.util.Unzipper", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      MockFile mockFile0 = new MockFile("", "H>");
      ZipEntry zipEntry0 = new ZipEntry("6usbT[n)hjFrk");
      File file0 = unzipper0.getVerifiedFile(mockFile0, zipEntry0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ProgressListener progressListener0 = mock(ProgressListener.class, new ViolatedAssumptionAnswer());
      unzipper0.unzip((InputStream) sequenceInputStream0, file0, progressListener0);
      unzipper0.getVerifiedFile(mockFile0, zipEntry0);
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      MockFile mockFile0 = new MockFile("", "H>");
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ProgressListener progressListener0 = mock(ProgressListener.class, new ViolatedAssumptionAnswer());
      unzipper0.unzip((InputStream) sequenceInputStream0, (File) mockFile0, progressListener0);
      ProgressListener progressListener1 = mock(ProgressListener.class, new ViolatedAssumptionAnswer());
      unzipper0.unzip((InputStream) sequenceInputStream0, (File) mockFile0, progressListener1);
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Unzipper unzipper0 = new Unzipper();
      try { 
        unzipper0.unzip("", (String) null, false);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
