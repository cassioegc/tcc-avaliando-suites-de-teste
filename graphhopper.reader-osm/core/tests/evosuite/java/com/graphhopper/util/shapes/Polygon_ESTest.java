/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 04:53:32 GMT 2021
 */

package com.graphhopper.util.shapes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.util.PointList;
import com.graphhopper.util.shapes.BBox;
import com.graphhopper.util.shapes.Polygon;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.locationtech.jts.geom.Envelope;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.prep.PreparedPolygon;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Polygon_ESTest extends Polygon_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Envelope envelope0 = mock(Envelope.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(envelope0).covers(any(org.locationtech.jts.geom.Envelope.class));
      doReturn(0.0, 0.0).when(envelope0).getMaxY();
      Envelope envelope1 = mock(Envelope.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(envelope1).covers(any(org.locationtech.jts.geom.Envelope.class));
      doReturn(false).when(envelope1).intersects(any(org.locationtech.jts.geom.Envelope.class));
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn(envelope0, envelope0, envelope1, envelope1, envelope1).when(polygon0).getEnvelopeInternal();
      doReturn(112).when(polygon0).getNumGeometries();
      doReturn((-3775)).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      polygon1.contains((-1633.0), 0.0);
      polygon1.contains(3915.0, 0.0);
      polygon1.getMaxLat();
      org.locationtech.jts.geom.Polygon polygon2 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null).when(polygon2).getEnvelopeInternal();
      doReturn(0).when(polygon2).getNumGeometries();
      doReturn(0).when(polygon2).getNumPoints();
      doReturn(false).when(polygon2).isRectangle();
      Polygon.create(polygon2);
      polygon1.getMaxLat();
      polygon1.contains(0.0, 1.0);
      LineString lineString0 = mock(LineString.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null).when(lineString0).getEnvelopeInternal();
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn(lineString0).when(pointList0).getCachedLineString(anyBoolean());
      polygon1.intersects(pointList0);
      PointList pointList1 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn((LineString) null).when(pointList1).getCachedLineString(anyBoolean());
      // Undeclared exception!
      try { 
        polygon1.intersects(pointList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.jts.geom.prep.BasicPreparedGeometry", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 592.98;
      doubleArray0[1] = 1048.40775715783;
      doubleArray0[2] = (-1923.2832865725875);
      doubleArray0[3] = 1253.53206421016;
      doubleArray0[4] = 1673.3775447395496;
      doubleArray0[5] = 1673.3775447395496;
      doubleArray0[6] = 592.98;
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      polygon0.getMaxLat();
      polygon0.getMinLat();
      org.locationtech.jts.geom.Polygon polygon1 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn(polygon0.envelope, polygon0.envelope, polygon0.envelope, (Envelope) null, (Envelope) null).when(polygon1).getEnvelopeInternal();
      doReturn(2759).when(polygon1).getNumGeometries();
      doReturn(2759).when(polygon1).getNumPoints();
      doReturn(true).when(polygon1).isRectangle();
      Polygon polygon2 = Polygon.create(polygon1);
      polygon2.contains((-1923.2832865725875), 1253.53206421016);
      polygon2.contains(268.650681, 0.0);
      polygon0.getMinLat();
      polygon2.getMinLon();
      polygon0.getMaxLat();
      String string0 = "";
      // Undeclared exception!
      try { 
        Polygon.parsePoints("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // incorrect polygon specified: []
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1513.087516;
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(13, doubleArray0.length);
      assertNotNull(polygon0);
      
      double double0 = polygon0.getMaxLon();
      assertEquals(1513.087516, double0, 0.01);
      assertEquals(13, doubleArray0.length);
      
      boolean boolean0 = polygon0.contains(1513.087516, 0.0);
      assertFalse(boolean0);
      assertEquals(13, doubleArray0.length);
      
      LineString lineString0 = mock(LineString.class, new ViolatedAssumptionAnswer());
      doReturn(polygon0.envelope).when(lineString0).getEnvelopeInternal();
      doReturn(0).when(lineString0).getDimension();
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn(lineString0).when(pointList0).getCachedLineString(anyBoolean());
      boolean boolean1 = polygon0.intersects(pointList0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(13, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        Polygon.parsePoints("mqv'&1w16[^'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // incorrect polygon specified: [mqv'&1w16[^']
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-251.08);
      doubleArray0[1] = (-54.06429);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-2563.83731267);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3031.43);
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-251.08), (-54.06429), Double.NaN, (-2563.83731267), 0.0, 0.0, 0.0, (-3031.43)}, doubleArray0, 0.01);
      assertNotNull(polygon0);
      
      double double0 = polygon0.getMaxLon();
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-251.08), (-54.06429), Double.NaN, (-2563.83731267), 0.0, 0.0, 0.0, (-3031.43)}, doubleArray0, 0.01);
      
      double double1 = polygon0.getMinLat();
      assertEquals((-3031.43), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-251.08), (-54.06429), Double.NaN, (-2563.83731267), 0.0, 0.0, 0.0, (-3031.43)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        Polygon.parsePoints("XRA_)W,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // incorrect polygon specified: [XRA_)W]
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3112.4948852586385;
      doubleArray0[1] = 3112.4948852586385;
      doubleArray0[2] = 1.7976931348623157E308;
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3112.4948852586385, 3112.4948852586385, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertNotNull(polygon0);
      
      double double0 = polygon0.getMinLon();
      assertEquals(3112.4948852586385, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3112.4948852586385, 3112.4948852586385, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      double double1 = polygon0.getMaxLat();
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3112.4948852586385, 3112.4948852586385, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      double double2 = polygon0.getMinLat();
      assertEquals(3112.4948852586385, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3112.4948852586385, 3112.4948852586385, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      double double3 = (-57.8722016);
      boolean boolean0 = polygon0.contains(3112.4948852586385, (-57.8722016));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3112.4948852586385, 3112.4948852586385, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      double double4 = Double.NaN;
      double double5 = polygon0.getMaxLat();
      assertEquals(1.7976931348623157E308, double5, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3112.4948852586385, 3112.4948852586385, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        Polygon.parsePoints("6OS]cJl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // incorrect polygon specified: [6OS]cJl]
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Envelope envelope0 = mock(Envelope.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(envelope0).getMaxX();
      doReturn(0.0).when(envelope0).getMaxY();
      doReturn(0.0).when(envelope0).getMinX();
      doReturn(0.0).when(envelope0).getMinY();
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn(envelope0).when(polygon0).getEnvelopeInternal();
      doReturn((-1)).when(polygon0).getNumGeometries();
      doReturn((-1)).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      assertNotNull(polygon1);
      
      BBox bBox0 = polygon1.getBounds();
      assertFalse(bBox0.hasElevation());
      assertFalse(bBox0.isValid());
      assertEquals(Double.NaN, bBox0.maxEle, 0.01);
      assertEquals(Double.NaN, bBox0.minEle, 0.01);
      assertEquals(0.0, bBox0.minLon, 0.01);
      assertEquals(0.0, bBox0.maxLat, 0.01);
      assertEquals(0.0, bBox0.minLat, 0.01);
      assertEquals(0.0, bBox0.maxLon, 0.01);
      assertNotNull(bBox0);
      
      // Undeclared exception!
      try { 
        Polygon.parsePoints("com.graphhopper.util.shapes.Polygon");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // incorrect polygon specified: [com.graphhopper.util.shapes.Polygon]
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3040.09222);
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-3040.09222)}, doubleArray0, 0.01);
      assertNotNull(polygon0);
      
      org.locationtech.jts.geom.Polygon polygon1 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null).when(polygon1).getEnvelopeInternal();
      doReturn(0).when(polygon1).getNumGeometries();
      doReturn(0).when(polygon1).getNumPoints();
      doReturn(false).when(polygon1).isRectangle();
      Polygon polygon2 = Polygon.create(polygon1);
      assertFalse(polygon2.equals((Object)polygon0));
      assertNotSame(polygon2, polygon0);
      assertNotNull(polygon2);
      
      org.locationtech.jts.geom.Polygon polygon3 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn(polygon0.envelope, polygon0.envelope).when(polygon3).getEnvelopeInternal();
      doReturn((-437)).when(polygon3).getNumGeometries();
      doReturn(402).when(polygon3).getNumPoints();
      doReturn(false).when(polygon3).isRectangle();
      Polygon polygon4 = Polygon.create(polygon3);
      assertFalse(polygon0.equals((Object)polygon2));
      assertFalse(polygon4.equals((Object)polygon0));
      assertFalse(polygon4.equals((Object)polygon2));
      assertNotSame(polygon0, polygon4);
      assertNotSame(polygon0, polygon2);
      assertNotSame(polygon4, polygon0);
      assertNotSame(polygon4, polygon2);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-3040.09222)}, doubleArray0, 0.01);
      assertNotNull(polygon4);
      
      // Undeclared exception!
      polygon4.contains(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Points must not be empty
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null).when(polygon0).getEnvelopeInternal();
      doReturn(0).when(polygon0).getNumGeometries();
      doReturn(0).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      assertNotNull(polygon1);
      
      // Undeclared exception!
      try { 
        polygon1.getMinLon();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null, (Envelope) null).when(polygon0).getEnvelopeInternal();
      doReturn(0).when(polygon0).getNumGeometries();
      doReturn(0).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      assertNotNull(polygon1);
      
      double double0 = 3915.0;
      // Undeclared exception!
      try { 
        polygon1.contains((-1633.0), 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.jts.geom.prep.BasicPreparedGeometry", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null).when(polygon0).getEnvelopeInternal();
      doReturn(0, 0).when(polygon0).getNumGeometries();
      doReturn(0, 0).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      assertNotNull(polygon1);
      
      String string0 = polygon1.toString();
      assertEquals("polygon (0 points,0 geometries)", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        polygon1.getBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null).when(polygon0).getEnvelopeInternal();
      doReturn(0).when(polygon0).getNumGeometries();
      doReturn(0).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      assertNotNull(polygon1);
      
      // Undeclared exception!
      try { 
        polygon1.getMinLat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = 1000000.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), 1000000.0, 1.0, 1.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(polygon0);
      
      double double0 = polygon0.getMinLon();
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), 1000000.0, 1.0, 1.0, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null).when(polygon0).getEnvelopeInternal();
      doReturn(0).when(polygon0).getNumGeometries();
      doReturn(0).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      assertNotNull(polygon1);
      
      // Undeclared exception!
      try { 
        Polygon.parsePoints(",");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.jts.geom.impl.PackedCoordinateSequence$Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null).when(polygon0).getEnvelopeInternal();
      doReturn(0).when(polygon0).getNumGeometries();
      doReturn(0).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      assertNotNull(polygon1);
      
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        polygon1.getMaxLat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 791.2;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2292.0;
      doubleArray0[3] = (-1361.1591);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {791.2, 0.0, 2292.0, (-1361.1591), 1.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polygon0);
      
      BBox bBox0 = polygon0.getBounds();
      assertFalse(bBox0.hasElevation());
      assertTrue(bBox0.isValid());
      assertEquals(Double.NaN, bBox0.minEle, 0.01);
      assertEquals((-1361.1591), bBox0.minLat, 0.01);
      assertEquals(Double.NaN, bBox0.maxEle, 0.01);
      assertEquals((-1361.1591), bBox0.minLon, 0.01);
      assertEquals(2292.0, bBox0.maxLon, 0.01);
      assertEquals(2292.0, bBox0.maxLat, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {791.2, 0.0, 2292.0, (-1361.1591), 1.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bBox0);
      
      double double0 = polygon0.getMaxLat();
      assertEquals(2292.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {791.2, 0.0, 2292.0, (-1361.1591), 1.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = polygon0.getMaxLat();
      assertEquals(2292.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {791.2, 0.0, 2292.0, (-1361.1591), 1.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = polygon0.contains(0.0, 1599.75);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {791.2, 0.0, 2292.0, (-1361.1591), 1.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 494.1596655581351;
      doubleArray0[2] = 1.0E-6;
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 494.1596655581351, 1.0E-6}, doubleArray0, 0.01);
      assertNotNull(polygon0);
      
      double double0 = polygon0.getMaxLat();
      assertEquals(494.1596655581351, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 494.1596655581351, 1.0E-6}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null, (Envelope) null).when(polygon0).getEnvelopeInternal();
      doReturn(0).when(polygon0).getNumGeometries();
      doReturn(0).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      assertNotNull(polygon1);
      
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
      doReturn((LineString) null).when(pointList0).getCachedLineString(anyBoolean());
      // Undeclared exception!
      try { 
        polygon1.intersects(pointList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.jts.geom.prep.BasicPreparedGeometry", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      org.locationtech.jts.geom.Polygon polygon0 = null;
      // Undeclared exception!
      try { 
        Polygon.create((org.locationtech.jts.geom.Polygon) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.jts.geom.util.ComponentCoordinateExtracter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-215.344513634);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1427.0);
      doubleArray0[5] = Double.NaN;
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), (-215.344513634), 0.0, 0.0, (-1427.0), Double.NaN}, doubleArray0, 0.01);
      assertNotNull(polygon0);
      
      // Undeclared exception!
      try { 
        polygon0.intersects((PointList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Polygon.parsePoints((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = 5.48276763562216;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 849.585581882609;
      doubleArray0[4] = (-598.8832);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-439.79052824);
      doubleArray0[8] = (-598.8832);
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), 5.48276763562216, 1.7976931348623157E308, 849.585581882609, (-598.8832), 0.0, 0.0, (-439.79052824), (-598.8832)}, doubleArray0, 0.01);
      assertNotNull(polygon0);
      
      String string0 = polygon0.toString();
      assertEquals("polygon (10 points,1 geometries)", string0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), 5.48276763562216, 1.7976931348623157E308, 849.585581882609, (-598.8832), 0.0, 0.0, (-439.79052824), (-598.8832)}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      double double0 = polygon0.getMinLat();
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.7976931348623157E308), 5.48276763562216, 1.7976931348623157E308, 849.585581882609, (-598.8832), 0.0, 0.0, (-439.79052824), (-598.8832)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid number of points in LinearRing (found 2 - must be 0 or >= 4)
         //
         verifyException("org.locationtech.jts.geom.LinearRing", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null).when(polygon0).getEnvelopeInternal();
      doReturn(0).when(polygon0).getNumGeometries();
      doReturn(0).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      assertNotNull(polygon1);
      
      // Undeclared exception!
      try { 
        polygon1.getMaxLon();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Polygon.parsePoints("polygon (");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // incorrect polygon specified: [polygon (]
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon((PreparedPolygon) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Polygon.parsePoints("} 3of,xx[IZ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null).when(polygon0).getEnvelopeInternal();
      doReturn(0).when(polygon0).getNumGeometries();
      doReturn(0).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      assertNotNull(polygon1);
      
      // Undeclared exception!
      try { 
        polygon1.getBounds();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1565.847788319963;
      doubleArray0[1] = (-3323.0);
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid number of points in LinearRing (found 3 - must be 0 or >= 4)
         //
         verifyException("org.locationtech.jts.geom.LinearRing", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Envelope envelope0 = mock(Envelope.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(envelope0).covers(any(org.locationtech.jts.geom.Envelope.class));
      org.locationtech.jts.geom.Polygon polygon0 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn(envelope0, envelope0, (Envelope) null).when(polygon0).getEnvelopeInternal();
      doReturn(112).when(polygon0).getNumGeometries();
      doReturn((-3775)).when(polygon0).getNumPoints();
      doReturn(false).when(polygon0).isRectangle();
      Polygon polygon1 = Polygon.create(polygon0);
      assertNotNull(polygon1);
      
      boolean boolean0 = polygon1.contains((-1633.0), 0.0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        polygon1.contains(3915.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.jts.geom.prep.BasicPreparedGeometry", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Polygon.parsePoints(",rY7 1QVd[3C%66");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 964.166887933;
      doubleArray0[1] = 753.982453;
      doubleArray0[2] = 753.982453;
      doubleArray0[3] = 964.166887933;
      doubleArray0[4] = 964.166887933;
      doubleArray0[5] = 964.166887933;
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {964.166887933, 753.982453, 753.982453, 964.166887933, 964.166887933, 964.166887933}, doubleArray0, 0.01);
      assertNotNull(polygon0);
      
      Envelope envelope0 = polygon0.envelope;
      assertEquals(210.18443493300003, envelope0.getHeight(), 0.01);
      assertEquals(210.18443493300003, envelope0.getWidth(), 0.01);
      assertEquals(210.18443493300003, envelope0.minExtent(), 0.01);
      assertEquals(44177.496688104526, envelope0.getArea(), 0.01);
      assertEquals(210.18443493300003, envelope0.maxExtent(), 0.01);
      assertFalse(envelope0.isNull());
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {964.166887933, 753.982453, 753.982453, 964.166887933, 964.166887933, 964.166887933}, doubleArray0, 0.01);
      assertNotNull(envelope0);
      
      org.locationtech.jts.geom.Polygon polygon1 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn(envelope0).when(polygon1).getEnvelopeInternal();
      doReturn((-5957), 170).when(polygon1).getNumGeometries();
      doReturn((-5957), (-731)).when(polygon1).getNumPoints();
      doReturn(true).when(polygon1).isRectangle();
      Polygon polygon2 = Polygon.create(polygon1);
      assertEquals(210.18443493300003, envelope0.getHeight(), 0.01);
      assertEquals(210.18443493300003, envelope0.getWidth(), 0.01);
      assertEquals(210.18443493300003, envelope0.minExtent(), 0.01);
      assertEquals(44177.496688104526, envelope0.getArea(), 0.01);
      assertEquals(210.18443493300003, envelope0.maxExtent(), 0.01);
      assertFalse(envelope0.isNull());
      assertFalse(polygon2.equals((Object)polygon0));
      assertNotSame(polygon0, polygon2);
      assertNotSame(polygon2, polygon0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {964.166887933, 753.982453, 753.982453, 964.166887933, 964.166887933, 964.166887933}, doubleArray0, 0.01);
      assertNotNull(polygon2);
      
      String string0 = polygon2.toString();
      assertEquals(210.18443493300003, envelope0.getHeight(), 0.01);
      assertEquals(210.18443493300003, envelope0.getWidth(), 0.01);
      assertEquals(210.18443493300003, envelope0.minExtent(), 0.01);
      assertEquals(44177.496688104526, envelope0.getArea(), 0.01);
      assertEquals(210.18443493300003, envelope0.maxExtent(), 0.01);
      assertFalse(envelope0.isNull());
      assertEquals("polygon (-731 points,170 geometries)", string0);
      assertFalse(polygon0.equals((Object)polygon2));
      assertFalse(polygon2.equals((Object)polygon0));
      assertNotSame(polygon0, polygon2);
      assertNotSame(polygon2, polygon0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {964.166887933, 753.982453, 753.982453, 964.166887933, 964.166887933, 964.166887933}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      BBox bBox0 = polygon2.getBounds();
      assertEquals(210.18443493300003, envelope0.getHeight(), 0.01);
      assertEquals(210.18443493300003, envelope0.getWidth(), 0.01);
      assertEquals(210.18443493300003, envelope0.minExtent(), 0.01);
      assertEquals(44177.496688104526, envelope0.getArea(), 0.01);
      assertEquals(210.18443493300003, envelope0.maxExtent(), 0.01);
      assertFalse(envelope0.isNull());
      assertTrue(bBox0.isValid());
      assertFalse(bBox0.hasElevation());
      assertEquals(Double.NaN, bBox0.maxEle, 0.01);
      assertEquals(964.166887933, bBox0.maxLon, 0.01);
      assertEquals(Double.NaN, bBox0.minEle, 0.01);
      assertEquals(753.982453, bBox0.minLat, 0.01);
      assertEquals(753.982453, bBox0.minLon, 0.01);
      assertEquals(964.166887933, bBox0.maxLat, 0.01);
      assertFalse(polygon0.equals((Object)polygon2));
      assertFalse(polygon2.equals((Object)polygon0));
      assertNotSame(polygon0, polygon2);
      assertNotSame(polygon2, polygon0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {964.166887933, 753.982453, 753.982453, 964.166887933, 964.166887933, 964.166887933}, doubleArray0, 0.01);
      assertNotNull(bBox0);
      
      org.locationtech.jts.geom.Polygon polygon3 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn((Envelope) null).when(polygon3).getEnvelopeInternal();
      doReturn(0).when(polygon3).getNumGeometries();
      doReturn(0).when(polygon3).getNumPoints();
      doReturn(false).when(polygon3).isRectangle();
      Polygon polygon4 = Polygon.create(polygon3);
      assertFalse(polygon4.equals((Object)polygon0));
      assertFalse(polygon4.equals((Object)polygon2));
      assertNotSame(polygon4, polygon0);
      assertNotSame(polygon4, polygon2);
      assertNotNull(polygon4);
      
      PointList pointList0 = mock(PointList.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3112.4948852586385;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.7976931348623157E308;
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3112.4948852586385, 0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertNotNull(polygon0);
      
      double double0 = polygon0.getMinLon();
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3112.4948852586385, 0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      double double1 = polygon0.getMaxLat();
      assertEquals(1.7976931348623157E308, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3112.4948852586385, 0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      double double2 = polygon0.getMinLat();
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3112.4948852586385, 0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      double double3 = (-57.8722016);
      boolean boolean0 = polygon0.contains(3112.4948852586385, (-57.8722016));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3112.4948852586385, 0.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      String string0 = "6OS]cJl";
      // Undeclared exception!
      try { 
        Polygon.parsePoints("6OS]cJl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // incorrect polygon specified: [6OS]cJl]
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-748.62600532081);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 635.78136440441;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 635.78136440441;
      double double0 = (-2504.9467823);
      doubleArray1[1] = (-2504.9467823);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      double double1 = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-748.62600532081);
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Points must be of equal length but was 5 vs. 7
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3891.6618782149594);
      doubleArray0[1] = (-1551.39);
      doubleArray0[2] = 1494.4750930557573;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-315.8578038471298);
      doubleArray0[5] = 1172.6998916080336;
      doubleArray0[6] = (-1126.51817672);
      doubleArray0[7] = 0.0;
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3891.6618782149594), (-1551.39), 1494.4750930557573, 0.0, (-315.8578038471298), 1172.6998916080336, (-1126.51817672), 0.0}, doubleArray0, 0.01);
      assertNotNull(polygon0);
      
      Envelope envelope0 = polygon0.envelope;
      assertEquals(2.9010471473289285E7, envelope0.getArea(), 0.01);
      assertEquals(5386.1369712707165, envelope0.getWidth(), 0.01);
      assertFalse(envelope0.isNull());
      assertEquals(5386.1369712707165, envelope0.minExtent(), 0.01);
      assertEquals(5386.1369712707165, envelope0.maxExtent(), 0.01);
      assertEquals(5386.1369712707165, envelope0.getHeight(), 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3891.6618782149594), (-1551.39), 1494.4750930557573, 0.0, (-315.8578038471298), 1172.6998916080336, (-1126.51817672), 0.0}, doubleArray0, 0.01);
      assertNotNull(envelope0);
      
      org.locationtech.jts.geom.Polygon polygon1 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn(envelope0).when(polygon1).getEnvelopeInternal();
      doReturn((-803)).when(polygon1).getNumGeometries();
      doReturn((-803)).when(polygon1).getNumPoints();
      doReturn(false).when(polygon1).isRectangle();
      Polygon polygon2 = Polygon.create(polygon1);
      assertEquals(2.9010471473289285E7, envelope0.getArea(), 0.01);
      assertEquals(5386.1369712707165, envelope0.getWidth(), 0.01);
      assertFalse(envelope0.isNull());
      assertEquals(5386.1369712707165, envelope0.minExtent(), 0.01);
      assertEquals(5386.1369712707165, envelope0.maxExtent(), 0.01);
      assertEquals(5386.1369712707165, envelope0.getHeight(), 0.01);
      assertFalse(polygon2.equals((Object)polygon0));
      assertNotSame(polygon0, polygon2);
      assertNotSame(polygon2, polygon0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-3891.6618782149594), (-1551.39), 1494.4750930557573, 0.0, (-315.8578038471298), 1172.6998916080336, (-1126.51817672), 0.0}, doubleArray0, 0.01);
      assertNotNull(polygon2);
      
      // Undeclared exception!
      try { 
        Polygon.parsePoints(",");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.locationtech.jts.geom.impl.PackedCoordinateSequence$Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 592.98;
      doubleArray0[1] = 1048.40775715783;
      doubleArray0[2] = (-1923.2832865725875);
      doubleArray0[3] = 1253.53206421016;
      doubleArray0[4] = 1673.3775447395496;
      doubleArray0[5] = 1673.3775447395496;
      doubleArray0[6] = 592.98;
      Polygon polygon0 = new Polygon(doubleArray0, doubleArray0);
      polygon0.getMaxLat();
      polygon0.getMinLat();
      polygon0.getBounds();
      org.locationtech.jts.geom.Polygon polygon1 = mock(org.locationtech.jts.geom.Polygon.class, new ViolatedAssumptionAnswer());
      doReturn(polygon0.envelope, polygon0.envelope, polygon0.envelope).when(polygon1).getEnvelopeInternal();
      doReturn(2759).when(polygon1).getNumGeometries();
      doReturn(2759).when(polygon1).getNumPoints();
      doReturn(true).when(polygon1).isRectangle();
      Polygon polygon2 = Polygon.create(polygon1);
      polygon2.contains((-1923.2832865725875), 1253.53206421016);
      polygon0.getMinLat();
      polygon0.getMaxLon();
      polygon0.getMaxLat();
      String string0 = "";
      // Undeclared exception!
      try { 
        Polygon.parsePoints("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // incorrect polygon specified: []
         //
         verifyException("com.graphhopper.util.shapes.Polygon", e);
      }
  }
}
