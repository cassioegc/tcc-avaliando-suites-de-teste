/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 06:55:12 GMT 2021
 */

package com.graphhopper.coll;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.carrotsearch.hppc.HashOrderMixingStrategy;
import com.graphhopper.coll.GHLongLongHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GHLongLongHashMap_ESTest extends GHLongLongHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GHLongLongHashMap gHLongLongHashMap0 = null;
      try {
        gHLongLongHashMap0 = new GHLongLongHashMap(4, 4, (HashOrderMixingStrategy) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The load factor should be in range [0.01, 0.99]: 4.000000
         //
         verifyException("com.carrotsearch.hppc.HashContainers", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GHLongLongHashMap gHLongLongHashMap0 = new GHLongLongHashMap(1960, 0.75);
      assertTrue(gHLongLongHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GHLongLongHashMap gHLongLongHashMap0 = new GHLongLongHashMap(0);
      assertTrue(gHLongLongHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashOrderMixingStrategy hashOrderMixingStrategy0 = mock(HashOrderMixingStrategy.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(hashOrderMixingStrategy0).newKeyMixer(anyInt());
      GHLongLongHashMap gHLongLongHashMap0 = new GHLongLongHashMap(1, 0.75, hashOrderMixingStrategy0);
      assertEquals(0, gHLongLongHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashOrderMixingStrategy hashOrderMixingStrategy0 = mock(HashOrderMixingStrategy.class, new ViolatedAssumptionAnswer());
      GHLongLongHashMap gHLongLongHashMap0 = null;
      try {
        gHLongLongHashMap0 = new GHLongLongHashMap((-1020), 0.9900000095367432, hashOrderMixingStrategy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of elements must be >= 0: -1020
         //
         verifyException("com.carrotsearch.hppc.HashContainers", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      GHLongLongHashMap gHLongLongHashMap0 = null;
      try {
        gHLongLongHashMap0 = new GHLongLongHashMap(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The load factor should be in range [0.01, 0.99]: 0.000000
         //
         verifyException("com.carrotsearch.hppc.HashContainers", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GHLongLongHashMap gHLongLongHashMap0 = new GHLongLongHashMap();
      assertTrue(gHLongLongHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GHLongLongHashMap gHLongLongHashMap0 = null;
      try {
        gHLongLongHashMap0 = new GHLongLongHashMap((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of elements must be >= 0: -1
         //
         verifyException("com.carrotsearch.hppc.HashContainers", e);
      }
  }
}
