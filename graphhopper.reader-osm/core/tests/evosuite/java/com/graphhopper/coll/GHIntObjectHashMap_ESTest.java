/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 06:53:09 GMT 2021
 */

package com.graphhopper.coll;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.carrotsearch.hppc.HashOrderMixingStrategy;
import com.graphhopper.coll.GHIntObjectHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GHIntObjectHashMap_ESTest extends GHIntObjectHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashOrderMixingStrategy hashOrderMixingStrategy0 = GHIntObjectHashMap.DETERMINISTIC;
      GHIntObjectHashMap<Integer> gHIntObjectHashMap0 = null;
      try {
        gHIntObjectHashMap0 = new GHIntObjectHashMap<Integer>(0, 981, hashOrderMixingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The load factor should be in range [0.01, 0.99]: 981.000000
         //
         verifyException("com.carrotsearch.hppc.HashContainers", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashOrderMixingStrategy hashOrderMixingStrategy0 = GHIntObjectHashMap.DETERMINISTIC;
      GHIntObjectHashMap<String> gHIntObjectHashMap0 = null;
      try {
        gHIntObjectHashMap0 = new GHIntObjectHashMap<String>((-3331), 0.75, hashOrderMixingStrategy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of elements must be >= 0: -3331
         //
         verifyException("com.carrotsearch.hppc.HashContainers", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      GHIntObjectHashMap<String> gHIntObjectHashMap0 = new GHIntObjectHashMap<String>(2);
      assertTrue(gHIntObjectHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GHIntObjectHashMap<Integer> gHIntObjectHashMap0 = new GHIntObjectHashMap<Integer>(2, 0.009999999776482582);
      assertTrue(gHIntObjectHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      GHIntObjectHashMap<Object> gHIntObjectHashMap0 = null;
      try {
        gHIntObjectHashMap0 = new GHIntObjectHashMap<Object>((-1), 2464.7289424917);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The load factor should be in range [0.01, 0.99]: 2464.728942
         //
         verifyException("com.carrotsearch.hppc.HashContainers", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashOrderMixingStrategy hashOrderMixingStrategy0 = GHIntObjectHashMap.DETERMINISTIC;
      GHIntObjectHashMap<String> gHIntObjectHashMap0 = new GHIntObjectHashMap<String>(981, 0.9900000095367432, hashOrderMixingStrategy0);
      assertTrue(gHIntObjectHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      GHIntObjectHashMap<String> gHIntObjectHashMap0 = null;
      try {
        gHIntObjectHashMap0 = new GHIntObjectHashMap<String>((-913));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of elements must be >= 0: -913
         //
         verifyException("com.carrotsearch.hppc.HashContainers", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      GHIntObjectHashMap<Object> gHIntObjectHashMap0 = new GHIntObjectHashMap<Object>();
      assertTrue(gHIntObjectHashMap0.isEmpty());
  }
}
