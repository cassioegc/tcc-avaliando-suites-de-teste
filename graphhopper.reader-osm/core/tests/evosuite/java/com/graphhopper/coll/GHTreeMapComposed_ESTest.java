/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:42:57 GMT 2021
 */

package com.graphhopper.coll;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.coll.GHTreeMapComposed;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GHTreeMapComposed_ESTest extends GHTreeMapComposed_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.insert(0, 0);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      gHTreeMapComposed0.insert((-4184), 0.0F);
      assertEquals(2, gHTreeMapComposed0.getSize());
      
      gHTreeMapComposed0.insert(1297, 1297);
      assertEquals(3, gHTreeMapComposed0.getSize());
      
      String string0 = gHTreeMapComposed0.toString();
      assertEquals(3, gHTreeMapComposed0.getSize());
      assertEquals("{4294963112=-3, 0=-3, 4945550525178316049=-3}", string0);
      assertNotNull(string0);
      
      int int0 = gHTreeMapComposed0.getSize();
      assertEquals(3, gHTreeMapComposed0.getSize());
      assertEquals(3, int0);
      
      String string1 = gHTreeMapComposed0.toString();
      assertEquals(3, gHTreeMapComposed0.getSize());
      assertTrue(string1.equals((Object)string0));
      assertEquals("{4294963112=-3, 0=-3, 4945550525178316049=-3}", string1);
      assertNotNull(string1);
      
      gHTreeMapComposed0.insert(1297, 3);
      assertEquals(4, gHTreeMapComposed0.getSize());
      
      String string2 = gHTreeMapComposed0.toString();
      assertEquals(4, gHTreeMapComposed0.getSize());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{4294963112=-3, 0=-3, 4629700416936871185=-3, 4945550525178316049=-3}", string2);
      assertNotNull(string2);
      
      float float0 = gHTreeMapComposed0.peekValue();
      assertEquals(4, gHTreeMapComposed0.getSize());
      assertEquals(0.0F, float0, 0.01F);
      
      String string3 = gHTreeMapComposed0.toString();
      assertEquals(4, gHTreeMapComposed0.getSize());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("{4294963112=-3, 0=-3, 4629700416936871185=-3, 4945550525178316049=-3}", string3);
      assertNotNull(string3);
      
      int int1 = gHTreeMapComposed0.peekKey();
      assertEquals(4, gHTreeMapComposed0.getSize());
      assertFalse(int1 == int0);
      assertEquals((-4184), int1);
      
      String string4 = gHTreeMapComposed0.toString();
      assertEquals(4, gHTreeMapComposed0.getSize());
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("{4294963112=-3, 0=-3, 4629700416936871185=-3, 4945550525178316049=-3}", string4);
      assertNotNull(string4);
      
      gHTreeMapComposed0.clear();
      assertEquals(0, gHTreeMapComposed0.getSize());
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.peekKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      int int0 = 23;
      gHTreeMapComposed0.insert(23, 23);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      float float0 = gHTreeMapComposed0.peekValue();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertEquals(23.0F, float0, 0.01F);
      
      int int1 = gHTreeMapComposed0.peekKey();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertTrue(int1 == int0);
      assertEquals(23, int1);
      
      gHTreeMapComposed0.insert(23, 23);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      int int2 = gHTreeMapComposed0.pollKey();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(23, int2);
      
      boolean boolean0 = gHTreeMapComposed0.isEmpty();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.update(3106, (-3445.3F), 23);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot remove key 3106 with value -3445.3 - did you insert this key with this value before ?
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.insert(0, 0);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      String string0 = gHTreeMapComposed0.toString();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertEquals("{0=-3}", string0);
      assertNotNull(string0);
      
      float float0 = gHTreeMapComposed0.peekValue();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = gHTreeMapComposed0.pollKey();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertEquals(0, int0);
      
      int int1 = (-361);
      gHTreeMapComposed0.clear();
      assertEquals(0, gHTreeMapComposed0.getSize());
      
      gHTreeMapComposed0.clear();
      assertEquals(0, gHTreeMapComposed0.getSize());
      
      int int2 = (-1);
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.update((-1), 0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot remove key -1 with value 0.0 - did you insert this key with this value before ?
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.insert(0, 0);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      String string0 = gHTreeMapComposed0.toString();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertEquals("{0=-3}", string0);
      assertNotNull(string0);
      
      float float0 = gHTreeMapComposed0.peekValue();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = gHTreeMapComposed0.peekKey();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertEquals(0, int0);
      
      gHTreeMapComposed0.insert(0, 0.0F);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      int int1 = gHTreeMapComposed0.getSize();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.update(1, 0.0F, (-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot remove key 1 with value 0.0 - did you insert this key with this value before ?
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.clear();
      assertEquals(0, gHTreeMapComposed0.getSize());
      
      gHTreeMapComposed0.clear();
      assertEquals(0, gHTreeMapComposed0.getSize());
      
      gHTreeMapComposed0.insert(64, 64);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      float float0 = gHTreeMapComposed0.peekValue();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertEquals(64.0F, float0, 0.01F);
      
      int int0 = gHTreeMapComposed0.pollKey();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertEquals(64, int0);
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.pollKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot poll collection is empty!
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      boolean boolean0 = gHTreeMapComposed0.isEmpty();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertTrue(boolean0);
      
      gHTreeMapComposed0.insert((-1461), (-901.94F));
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      gHTreeMapComposed0.insert((-1461), (-901.94F));
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      int int0 = gHTreeMapComposed0.pollKey();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertEquals((-1461), int0);
      
      boolean boolean1 = gHTreeMapComposed0.isEmpty();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.peekValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.insert((-1652), 0.0F);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      gHTreeMapComposed0.insert((-1652), (-1652));
      assertEquals(2, gHTreeMapComposed0.getSize());
      
      String string0 = gHTreeMapComposed0.toString();
      assertEquals(2, gHTreeMapComposed0.getSize());
      assertEquals("{-4265331055289960052=-3, 4294965644=-3}", string0);
      assertNotNull(string0);
      
      boolean boolean0 = gHTreeMapComposed0.isEmpty();
      assertEquals(2, gHTreeMapComposed0.getSize());
      assertFalse(boolean0);
      
      float float0 = gHTreeMapComposed0.peekValue();
      assertEquals(2, gHTreeMapComposed0.getSize());
      assertEquals((-1652.0F), float0, 0.01F);
      
      float float1 = gHTreeMapComposed0.peekValue();
      assertEquals(2, gHTreeMapComposed0.getSize());
      assertEquals(float1, float0, 0.01F);
      assertEquals((-1652.0F), float1, 0.01F);
      
      boolean boolean1 = gHTreeMapComposed0.isEmpty();
      assertEquals(2, gHTreeMapComposed0.getSize());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.insert((-2242), 1271);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      boolean boolean0 = gHTreeMapComposed0.isEmpty();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.update(1271, 3596.8425F, 1.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot remove key 1271 with value 3596.8425 - did you insert this key with this value before ?
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.insert(0, 0);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.update((-2337), 0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot remove key -2337 with value 0.0 - did you insert this key with this value before ?
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      int int0 = (-595);
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.update((-595), 1998.6323F, (-595));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot remove key -595 with value 1998.6323 - did you insert this key with this value before ?
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      String string0 = gHTreeMapComposed0.toString();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      boolean boolean0 = gHTreeMapComposed0.isEmpty();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertTrue(boolean0);
      
      String string1 = gHTreeMapComposed0.toString();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertEquals("{}", string1);
      assertNotNull(string1);
      
      boolean boolean1 = gHTreeMapComposed0.isEmpty();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = (-2982);
      gHTreeMapComposed0.insert((-2982), (-2982));
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      gHTreeMapComposed0.remove((-2982), (-2982));
      assertEquals(0, gHTreeMapComposed0.getSize());
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.peekKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.peekValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      int int0 = gHTreeMapComposed0.getSize();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertEquals(0, int0);
      
      int int1 = gHTreeMapComposed0.getSize();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.pollKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot poll collection is empty!
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      int int0 = 3464;
      gHTreeMapComposed0.insert(3464, (-957.6924F));
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.remove(1374, 0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot remove key 1374 with value 0.0 - did you insert this key with this value before ?
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.insert(0, 0);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      int int0 = gHTreeMapComposed0.peekKey();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.clear();
      assertEquals(0, gHTreeMapComposed0.getSize());
      
      boolean boolean0 = gHTreeMapComposed0.isEmpty();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertTrue(boolean0);
      
      gHTreeMapComposed0.insert(7, 0.0F);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      gHTreeMapComposed0.update(7, 0.0F, (-1.0F));
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      gHTreeMapComposed0.clear();
      assertEquals(0, gHTreeMapComposed0.getSize());
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.pollKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot poll collection is empty!
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.pollKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot poll collection is empty!
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.insert(0, 1607.0F);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.remove(0, 0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot remove key 0 with value 0.0 - did you insert this key with this value before ?
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.insert(1297, 0.0F);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.remove(0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot remove key 0 with value 0.0 - did you insert this key with this value before ?
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.insert(2891, 0.0F);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.update(2891, 2891, 1.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot remove key 2891 with value 2891.0 - did you insert this key with this value before ?
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertNotNull(gHTreeMapComposed0);
      
      gHTreeMapComposed0.insert(23, 23);
      assertEquals(1, gHTreeMapComposed0.getSize());
      
      float float0 = gHTreeMapComposed0.peekValue();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertEquals(23.0F, float0, 0.01F);
      
      boolean boolean0 = gHTreeMapComposed0.isEmpty();
      assertEquals(1, gHTreeMapComposed0.getSize());
      assertFalse(boolean0);
      
      int int0 = gHTreeMapComposed0.pollKey();
      assertEquals(0, gHTreeMapComposed0.getSize());
      assertEquals(23, int0);
      
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.peekKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      gHTreeMapComposed0.insert(0, 0);
      gHTreeMapComposed0.toString();
      gHTreeMapComposed0.peekKey();
      gHTreeMapComposed0.insert(0, 0.0F);
      gHTreeMapComposed0.update(0, 0, 0.0F);
      gHTreeMapComposed0.getSize();
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.update(1, 0.0F, 0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // cannot remove key 1 with value 0.0 - did you insert this key with this value before ?
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GHTreeMapComposed gHTreeMapComposed0 = new GHTreeMapComposed();
      gHTreeMapComposed0.clear();
      // Undeclared exception!
      try { 
        gHTreeMapComposed0.pollKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot poll collection is empty!
         //
         verifyException("com.graphhopper.coll.GHTreeMapComposed", e);
      }
  }
}
