/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 04 05:18:04 GMT 2021
 */

package com.graphhopper.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.graphhopper.config.LMProfile;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LMProfile_ESTest extends LMProfile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      LMProfile lMProfile1 = lMProfile0.setMaximumLMWeight(0.0);
      // Undeclared exception!
      try { 
        lMProfile1.setPreparationProfile("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Using non-default maximum_lm_weight and preparation_profile at the same time is not allowed
         //
         verifyException("com.graphhopper.config.LMProfile", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      lMProfile0.setProfile("9r");
      assertEquals((-1.0), lMProfile0.getMaximumLMWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      LMProfile lMProfile1 = lMProfile0.setPreparationProfile("this");
      assertEquals((-1.0), lMProfile1.getMaximumLMWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      lMProfile0.setMaximumLMWeight((-2218.0246654778));
      assertEquals((-2218.0246654778), lMProfile0.getMaximumLMWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      lMProfile0.getProfile();
      assertEquals((-1.0), lMProfile0.getMaximumLMWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      LMProfile lMProfile1 = lMProfile0.setPreparationProfile("");
      lMProfile1.getPreparationProfile();
      assertEquals((-1.0), lMProfile1.getMaximumLMWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      LMProfile lMProfile1 = lMProfile0.setMaximumLMWeight(0.0);
      double double0 = lMProfile1.getMaximumLMWeight();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("e");
      lMProfile0.setMaximumLMWeight(830.493476326);
      double double0 = lMProfile0.getMaximumLMWeight();
      assertEquals(830.493476326, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      // Undeclared exception!
      try { 
        lMProfile0.setProfile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      // Undeclared exception!
      try { 
        lMProfile0.setProfile("Using non-default maximum_lm_weight and preparation_profile at the same time is not allowed");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: Using non-default maximum_lm_weight and preparation_profile at the same time is not allowed
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      // Undeclared exception!
      try { 
        lMProfile0.setPreparationProfile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LMProfile lMProfile0 = null;
      try {
        lMProfile0 = new LMProfile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LMProfile lMProfile0 = null;
      try {
        lMProfile0 = new LMProfile("ClOy: 4$X'A#n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Profile names may only contain lower case letters, numbers and underscores, given: ClOy: 4$X'A#n
         //
         verifyException("com.graphhopper.config.Profile", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      boolean boolean0 = lMProfile0.usesOtherPreparation();
      assertFalse(boolean0);
      assertEquals((-1.0), lMProfile0.getMaximumLMWeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("this");
      LMProfile lMProfile1 = lMProfile0.setPreparationProfile("car");
      // Undeclared exception!
      try { 
        lMProfile1.setMaximumLMWeight(5780.599410640177);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Using non-default maximum_lm_weight and preparation_profile at the same time is not allowed
         //
         verifyException("com.graphhopper.config.LMProfile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      assertEquals("this", lMProfile0.getPreparationProfile());
      
      lMProfile0.setPreparationProfile("");
      boolean boolean0 = lMProfile0.usesOtherPreparation();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      lMProfile0.setMaximumLMWeight(1.0);
      // Undeclared exception!
      try { 
        lMProfile0.setPreparationProfile("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Using non-default maximum_lm_weight and preparation_profile at the same time is not allowed
         //
         verifyException("com.graphhopper.config.LMProfile", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("4");
      String string0 = lMProfile0.toString();
      assertEquals("4|preparation_profile=this|maximum_lm_weight=-1.0", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("4");
      double double0 = lMProfile0.getMaximumLMWeight();
      assertEquals((-1.0), double0, 0.01);
      assertFalse(lMProfile0.usesOtherPreparation());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("4");
      lMProfile0.getProfile();
      assertEquals((-1.0), lMProfile0.getMaximumLMWeight(), 0.01);
      assertEquals("this", lMProfile0.getPreparationProfile());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LMProfile lMProfile0 = new LMProfile("");
      String string0 = lMProfile0.getPreparationProfile();
      assertEquals((-1.0), lMProfile0.getMaximumLMWeight(), 0.01);
      assertEquals("this", string0);
  }
}
