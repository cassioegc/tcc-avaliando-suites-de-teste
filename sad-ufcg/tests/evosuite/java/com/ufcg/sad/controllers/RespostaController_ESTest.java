/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:28:10 GMT 2021
 */

package com.ufcg.sad.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.ufcg.sad.controllers.RespostaController;
import com.ufcg.sad.models.resposta.Resposta;
import com.ufcg.sad.models.resposta.RespostaSelecao;
import com.ufcg.sad.services.resposta.RespostaService;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RespostaController_ESTest extends RespostaController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RespostaController respostaController0 = new RespostaController();
      LinkedList<Resposta> linkedList0 = new LinkedList<Resposta>();
      RespostaService respostaService0 = mock(RespostaService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, (List<Resposta>) null).when(respostaService0).addRespostas(anyString() , anyList());
      Injector.inject(respostaController0, (Class<?>) RespostaController.class, "respostaService", (Object) respostaService0);
      Injector.validateBean(respostaController0, (Class<?>) RespostaController.class);
      respostaController0.addRespostas("", linkedList0);
      respostaController0.addRespostas("com.ufcg.sad.controllers.RespostaController", linkedList0);
      ResponseEntity<Object> responseEntity0 = respostaController0.addRespostas("P?WT=U;aorl+N?B|B", linkedList0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RespostaController respostaController0 = new RespostaController();
      RespostaService respostaService0 = mock(RespostaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(respostaController0, (Class<?>) RespostaController.class, "respostaService", (Object) respostaService0);
      Injector.validateBean(respostaController0, (Class<?>) RespostaController.class);
      RespostaSelecao respostaSelecao0 = new RespostaSelecao();
      ResponseEntity<Object> responseEntity0 = respostaController0.criarResposta(respostaSelecao0);
      assertNull(responseEntity0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RespostaController respostaController0 = new RespostaController();
      RespostaService respostaService0 = mock(RespostaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(respostaController0, (Class<?>) RespostaController.class, "respostaService", (Object) respostaService0);
      Injector.validateBean(respostaController0, (Class<?>) RespostaController.class);
      Long long0 = new Long(19L);
      ResponseEntity<Object> responseEntity0 = respostaController0.getResposta(long0);
      assertNull(responseEntity0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RespostaController respostaController0 = new RespostaController();
      RespostaService respostaService0 = mock(RespostaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(respostaController0, (Class<?>) RespostaController.class, "respostaService", (Object) respostaService0);
      Injector.validateBean(respostaController0, (Class<?>) RespostaController.class);
      Long long0 = new Long(19L);
      ResponseEntity<List<Resposta>> responseEntity0 = respostaController0.getTodasAsRespostas("PZGGq!qQ", long0);
      assertNull(responseEntity0);
  }
}
