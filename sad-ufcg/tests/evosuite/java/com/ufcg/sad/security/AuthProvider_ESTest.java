/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:12:29 GMT 2021
 */

package com.ufcg.sad.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.repositories.UsuarioRepository;
import com.ufcg.sad.security.AuthProvider;
import com.ufcg.sad.security.Credenciais;
import java.util.LinkedHashSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.core.convert.support.DefaultConversionService;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AuthProvider_ESTest extends AuthProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AuthProvider authProvider0 = new AuthProvider();
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(authProvider0, (Class<?>) AuthProvider.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(authProvider0, (Class<?>) AuthProvider.class);
      Class<UsernamePasswordAuthenticationToken> class0 = UsernamePasswordAuthenticationToken.class;
      boolean boolean0 = authProvider0.supports(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AuthProvider authProvider0 = new AuthProvider();
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(authProvider0, (Class<?>) AuthProvider.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(authProvider0, (Class<?>) AuthProvider.class);
      // Undeclared exception!
      try { 
        authProvider0.supports((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.security.AuthProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AuthProvider authProvider0 = new AuthProvider();
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(authProvider0, (Class<?>) AuthProvider.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(authProvider0, (Class<?>) AuthProvider.class);
      LinkedHashSet<GrantedAuthority> linkedHashSet0 = new LinkedHashSet<GrantedAuthority>();
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = new UsernamePasswordAuthenticationToken(authProvider0, authProvider0, linkedHashSet0);
      usernamePasswordAuthenticationToken0.eraseCredentials();
      // Undeclared exception!
      try { 
        authProvider0.authenticate(usernamePasswordAuthenticationToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AuthProvider authProvider0 = new AuthProvider();
      Credenciais credenciais0 = mock(Credenciais.class, new ViolatedAssumptionAnswer());
      doReturn("com.ufcg.sad.security.AuthProvider@0000000001").when(credenciais0).getLogin();
      doReturn("com.ufcg.sad.security.AuthProvider@0000000001").when(credenciais0).getSenha();
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn(credenciais0).when(usuarioRepository0).getCredenciais(anyString());
      Injector.inject(authProvider0, (Class<?>) AuthProvider.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(authProvider0, (Class<?>) AuthProvider.class);
      LinkedHashSet<GrantedAuthority> linkedHashSet0 = new LinkedHashSet<GrantedAuthority>();
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = new UsernamePasswordAuthenticationToken(authProvider0, authProvider0, linkedHashSet0);
      Authentication authentication0 = authProvider0.authenticate(usernamePasswordAuthenticationToken0);
      assertTrue(authentication0.isAuthenticated());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AuthProvider authProvider0 = new AuthProvider();
      Credenciais credenciais0 = mock(Credenciais.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(credenciais0).getLogin();
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn(credenciais0, credenciais0, (Credenciais) null).when(usuarioRepository0).getCredenciais(anyString());
      Injector.inject(authProvider0, (Class<?>) AuthProvider.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(authProvider0, (Class<?>) AuthProvider.class);
      LinkedHashSet<GrantedAuthority> linkedHashSet0 = new LinkedHashSet<GrantedAuthority>();
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = new UsernamePasswordAuthenticationToken(authProvider0, authProvider0, linkedHashSet0);
      authProvider0.authenticate(usernamePasswordAuthenticationToken0);
      authProvider0.authenticate(usernamePasswordAuthenticationToken0);
      Authentication authentication0 = authProvider0.authenticate(usernamePasswordAuthenticationToken0);
      assertNull(authentication0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AuthProvider authProvider0 = new AuthProvider();
      UsuarioRepository usuarioRepository0 = mock(UsuarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(authProvider0, (Class<?>) AuthProvider.class, "usuarioRepository", (Object) usuarioRepository0);
      Injector.validateBean(authProvider0, (Class<?>) AuthProvider.class);
      Class<DefaultConversionService> class0 = DefaultConversionService.class;
      boolean boolean0 = authProvider0.supports(class0);
      assertFalse(boolean0);
  }
}
