/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:17:36 GMT 2021
 */

package com.ufcg.sad.security;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.security.JWTLoginFilter;
import java.io.IOException;
import javax.servlet.Servlet;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springframework.mock.web.MockFilterChain;
import org.springframework.mock.web.PassThroughFilterChain;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JWTLoginFilter_ESTest extends JWTLoginFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JWTLoginFilter jWTLoginFilter0 = new JWTLoginFilter("X\"Hwcj", (AuthenticationManager) null);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      // Undeclared exception!
      try { 
        jWTLoginFilter0.attemptAuthentication((HttpServletRequest) null, httpServletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.security.JWTLoginFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JWTLoginFilter jWTLoginFilter0 = new JWTLoginFilter("q{' 0o}#PtwAxX2EN", (AuthenticationManager) null);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((ServletInputStream) null).when(httpServletRequest0).getInputStream();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      try { 
        jWTLoginFilter0.attemptAuthentication(httpServletRequestWrapper0, httpServletResponseWrapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JWTLoginFilter jWTLoginFilter0 = null;
      try {
        jWTLoginFilter0 = new JWTLoginFilter("", (AuthenticationManager) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern cannot be null or empty
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JWTLoginFilter jWTLoginFilter0 = new JWTLoginFilter("wHw", (AuthenticationManager) null);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Servlet servlet0 = mock(Servlet.class, new ViolatedAssumptionAnswer());
      MockFilterChain mockFilterChain0 = new MockFilterChain(servlet0);
      PassThroughFilterChain passThroughFilterChain0 = new PassThroughFilterChain(jWTLoginFilter0, mockFilterChain0);
      // Undeclared exception!
      try { 
        jWTLoginFilter0.successfulAuthentication(httpServletRequestWrapper0, httpServletResponseWrapper0, passThroughFilterChain0, (Authentication) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.security.JWTLoginFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JWTLoginFilter jWTLoginFilter0 = new JWTLoginFilter("Z_V1r1WR!xsRT", (AuthenticationManager) null);
      ServletInputStream servletInputStream0 = mock(ServletInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(servletInputStream0).read(any(byte[].class) , anyInt() , anyInt());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(servletInputStream0).when(httpServletRequest0).getInputStream();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      try { 
        jWTLoginFilter0.attemptAuthentication(httpServletRequestWrapper0, httpServletResponseWrapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // InputStream.read() returned 0 characters when trying to read 8000 bytes
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }
}
