/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:02:20 GMT 2021
 */

package com.ufcg.sad.services.questao;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.models.questao.Questao;
import com.ufcg.sad.repositories.QuestaoRepository;
import com.ufcg.sad.services.professor.ProfessorService;
import com.ufcg.sad.services.questao.QuestaoServiceImpl;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestaoServiceImpl_ESTest extends QuestaoServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      // Undeclared exception!
      try { 
        questaoServiceImpl0.validaQuestao((Questao) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questao.QuestaoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Questao>) null).when(questaoRepository0).findAll();
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      // Undeclared exception!
      try { 
        questaoServiceImpl0.getTodasQuestoes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questao.QuestaoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        questaoServiceImpl0.getQuestao(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questao.QuestaoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      // Undeclared exception!
      try { 
        questaoServiceImpl0.criaQuestao((Questao) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questao.QuestaoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      // Undeclared exception!
      try { 
        questaoServiceImpl0.atualizaQuestao((Questao) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questao.QuestaoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Questao questao0 = new Questao();
      try { 
        questaoServiceImpl0.validaQuestao(questao0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Quest\u00E3o deve conter enunciado.
         //
         verifyException("com.ufcg.sad.services.questao.QuestaoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      LinkedList<Questao> linkedList0 = new LinkedList<Questao>();
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(questaoRepository0).findAll();
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      List<Questao> list0 = questaoServiceImpl0.getTodasQuestoes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(questaoRepository0).findOne(anyLong());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      try { 
        questaoServiceImpl0.getQuestao((Long) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questao.QuestaoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Questao questao0 = new Questao();
      try { 
        questaoServiceImpl0.criaQuestao(questao0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Quest\u00E3o deve conter enunciado.
         //
         verifyException("com.ufcg.sad.services.questao.QuestaoServiceImpl", e);
      }
  }
}
