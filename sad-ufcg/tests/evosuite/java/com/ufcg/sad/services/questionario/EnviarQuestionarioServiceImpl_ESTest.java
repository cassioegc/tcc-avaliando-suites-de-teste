/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:16:01 GMT 2021
 */

package com.ufcg.sad.services.questionario;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.models.aluno.Aluno;
import com.ufcg.sad.models.disciplina.Disciplina;
import com.ufcg.sad.models.questionario.QuestionarioAplicado;
import com.ufcg.sad.models.resposta.Resposta;
import com.ufcg.sad.models.token.Token;
import com.ufcg.sad.services.disciplina.DisciplinaService;
import com.ufcg.sad.services.email.EmailService;
import com.ufcg.sad.services.questionario.EnviarQuestionarioServiceImpl;
import com.ufcg.sad.services.questionario.QuestionarioAplicadoService;
import com.ufcg.sad.services.token.TokenService;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EnviarQuestionarioServiceImpl_ESTest extends EnviarQuestionarioServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EnviarQuestionarioServiceImpl enviarQuestionarioServiceImpl0 = new EnviarQuestionarioServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      EmailService emailService0 = mock(EmailService.class, new ViolatedAssumptionAnswer());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "emailService", (Object) emailService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        enviarQuestionarioServiceImpl0.enviarEmail((List<Long>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.EnviarQuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EnviarQuestionarioServiceImpl enviarQuestionarioServiceImpl0 = new EnviarQuestionarioServiceImpl();
      Disciplina disciplina0 = new Disciplina();
      Aluno aluno0 = new Aluno();
      disciplina0.adicionarAluno(aluno0);
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      doReturn(disciplina0).when(disciplinaService0).getDisciplina(anyLong());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      EmailService emailService0 = mock(EmailService.class, new ViolatedAssumptionAnswer());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "emailService", (Object) emailService0);
      Long long0 = Long.getLong(",", 1L);
      LinkedHashSet<Resposta> linkedHashSet0 = new LinkedHashSet<Resposta>();
      LinkedHashSet<Token> linkedHashSet1 = new LinkedHashSet<Token>();
      QuestionarioAplicado questionarioAplicado0 = new QuestionarioAplicado(long0, long0, long0, long0, linkedHashSet0, linkedHashSet1);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn(questionarioAplicado0).when(questionarioAplicadoService0).getQuestionarioAplicado(anyLong());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(tokenService0).criaToken(any(com.ufcg.sad.models.token.Token.class));
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class);
      // Undeclared exception!
      try { 
        enviarQuestionarioServiceImpl0.enviarEmail(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.EnviarQuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EnviarQuestionarioServiceImpl enviarQuestionarioServiceImpl0 = new EnviarQuestionarioServiceImpl();
      Disciplina disciplina0 = new Disciplina();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      doReturn(disciplina0).when(disciplinaService0).getDisciplina(anyLong());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      EmailService emailService0 = mock(EmailService.class, new ViolatedAssumptionAnswer());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "emailService", (Object) emailService0);
      Long long0 = new Long(56L);
      LinkedHashSet<Resposta> linkedHashSet0 = new LinkedHashSet<Resposta>();
      LinkedHashSet<Token> linkedHashSet1 = new LinkedHashSet<Token>();
      QuestionarioAplicado questionarioAplicado0 = new QuestionarioAplicado(long0, long0, long0, long0, linkedHashSet0, linkedHashSet1);
      LinkedList<QuestionarioAplicado> linkedList0 = new LinkedList<QuestionarioAplicado>();
      linkedList0.add(questionarioAplicado0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn(questionarioAplicado0).when(questionarioAplicadoService0).atualizaQuestionarioAplicado(any(com.ufcg.sad.models.questionario.QuestionarioAplicado.class));
      doReturn(linkedList0).when(questionarioAplicadoService0).getListaDeQuestionariosAplicados(anyList());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class);
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      enviarQuestionarioServiceImpl0.enviarEmail((List<Long>) linkedList1);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EnviarQuestionarioServiceImpl enviarQuestionarioServiceImpl0 = new EnviarQuestionarioServiceImpl();
      Disciplina disciplina0 = new Disciplina();
      Aluno aluno0 = new Aluno();
      disciplina0.adicionarAluno(aluno0);
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      doReturn(disciplina0).when(disciplinaService0).getDisciplina(anyLong());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      EmailService emailService0 = mock(EmailService.class, new ViolatedAssumptionAnswer());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "emailService", (Object) emailService0);
      Long long0 = new Long(56L);
      LinkedHashSet<Resposta> linkedHashSet0 = new LinkedHashSet<Resposta>();
      LinkedHashSet<Token> linkedHashSet1 = new LinkedHashSet<Token>();
      QuestionarioAplicado questionarioAplicado0 = new QuestionarioAplicado(long0, long0, long0, long0, linkedHashSet0, linkedHashSet1);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn(questionarioAplicado0).when(questionarioAplicadoService0).atualizaQuestionarioAplicado(any(com.ufcg.sad.models.questionario.QuestionarioAplicado.class));
      doReturn(questionarioAplicado0).when(questionarioAplicadoService0).getQuestionarioAplicado(anyLong());
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      Token token0 = new Token();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(tokenService0).criaToken(any(com.ufcg.sad.models.token.Token.class));
      Injector.inject(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(enviarQuestionarioServiceImpl0, (Class<?>) EnviarQuestionarioServiceImpl.class);
      enviarQuestionarioServiceImpl0.enviarEmail(long0);
  }
}
