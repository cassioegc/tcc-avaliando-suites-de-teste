/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:11:08 GMT 2021
 */

package com.ufcg.sad.services.token;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.models.token.Token;
import com.ufcg.sad.repositories.AlunoRepository;
import com.ufcg.sad.repositories.DisciplinaRepository;
import com.ufcg.sad.services.aluno.AlunoServiceImpl;
import com.ufcg.sad.services.disciplina.DisciplinaServiceImpl;
import com.ufcg.sad.services.professor.ProfessorService;
import com.ufcg.sad.services.token.TokenServiceImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenServiceImpl_ESTest extends TokenServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      // Undeclared exception!
      try { 
        tokenServiceImpl0.verificaSeTokenExiste("PropertyValueTransformer must not be empty!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      Long long0 = new Long(0L);
      Token token0 = new Token(long0, long0);
      // Undeclared exception!
      try { 
        tokenServiceImpl0.criaToken(token0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      Token token0 = new Token();
      try { 
        tokenServiceImpl0.validaToken(token0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Token deve conter: idQuestionarioAplicado e idAluno.
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      // Undeclared exception!
      try { 
        tokenServiceImpl0.buscarQuestionarioAplicado("H&;?c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      Long long0 = new Long((-3361L));
      Token token0 = new Token(long0);
      try { 
        tokenServiceImpl0.validaToken(token0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Token deve conter: idQuestionarioAplicado e idAluno.
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      Long long0 = new Long((-3344L));
      Token token0 = new Token(long0, long0);
      // Undeclared exception!
      try { 
        tokenServiceImpl0.validaToken(token0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      try { 
        tokenServiceImpl0.validaToken((Token) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Token deve conter: idQuestionarioAplicado e idAluno.
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      // Undeclared exception!
      try { 
        tokenServiceImpl0.deletaTodosOsTokenAtivos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      Token token0 = new Token();
      try { 
        tokenServiceImpl0.criaToken(token0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Token deve conter: idQuestionarioAplicado e idAluno.
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      // Undeclared exception!
      try { 
        tokenServiceImpl0.deletaToken(",c[8uF&h$]s['A)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      // Undeclared exception!
      try { 
        tokenServiceImpl0.buscarQuestionario("?oP!jZ?z11:#*MpY%o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      // Undeclared exception!
      try { 
        tokenServiceImpl0.buscarDisciplina("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }
}
