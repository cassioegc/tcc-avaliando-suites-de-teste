/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:18:58 GMT 2021
 */

package com.ufcg.sad.services;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.models.aluno.Aluno;
import com.ufcg.sad.repositories.MatriculaRepository;
import com.ufcg.sad.services.MatriculaServiceImpl;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MatriculaServiceImpl_ESTest extends MatriculaServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(matriculaRepository0).getAlunosMatriculados(anyLong());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Long long0 = Long.getLong("eSZp", (-1L));
      List<Aluno> list0 = matriculaServiceImpl0.getAlunosMatriculados(long0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      Vector<Aluno> vector0 = new Vector<Aluno>();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(matriculaRepository0).getAlunosMatriculados(anyLong());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Long long0 = new Long(0L);
      List<Aluno> list0 = matriculaServiceImpl0.getAlunosMatriculados(long0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      Stack<Aluno> stack0 = new Stack<Aluno>();
      Aluno aluno0 = new Aluno();
      stack0.add(aluno0);
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(matriculaRepository0).getAlunosMatriculados(anyLong());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Long long0 = new Long((-480L));
      List<Aluno> list0 = matriculaServiceImpl0.getAlunosMatriculados(long0);
      assertTrue(list0.contains(aluno0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      MatriculaRepository matriculaRepository1 = matriculaServiceImpl0.matriculaRepository;
      matriculaServiceImpl0.matriculaRepository = matriculaRepository1;
      matriculaServiceImpl0.matriculaRepository = null;
      Long long0 = new Long(1L);
      // Undeclared exception!
      try { 
        matriculaServiceImpl0.getAlunosMatriculados(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.MatriculaServiceImpl", e);
      }
  }
}
