/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:07:46 GMT 2021
 */

package com.ufcg.sad.services.disciplina;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.models.aluno.Aluno;
import com.ufcg.sad.models.disciplina.Disciplina;
import com.ufcg.sad.models.matricula.Matricula;
import com.ufcg.sad.repositories.AlunoRepository;
import com.ufcg.sad.repositories.DisciplinaRepository;
import com.ufcg.sad.repositories.ProfessorRepository;
import com.ufcg.sad.services.aluno.AlunoServiceImpl;
import com.ufcg.sad.services.disciplina.DisciplinaServiceImpl;
import com.ufcg.sad.services.professor.ProfessorServiceImpl;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DisciplinaServiceImpl_ESTest extends DisciplinaServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      Aluno aluno0 = new Aluno();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(aluno0).when(alunoRepository0).findByEmail(anyString());
      doReturn(false).when(alunoRepository0).exists(anyLong());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(disciplinaRepository0).findOne(anyLong());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Long long0 = new Long(0L);
      LinkedHashSet<Matricula> linkedHashSet0 = new LinkedHashSet<Matricula>();
      Aluno aluno1 = new Aluno(long0, (String) null, "YKR%jG*eZ", linkedHashSet0);
      try { 
        disciplinaServiceImpl0.vincularAluno(long0, aluno1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      Vector<Disciplina> vector0 = new Vector<Disciplina>();
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(disciplinaRepository0).findAll();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      List<Disciplina> list0 = disciplinaServiceImpl0.listarTodasAsDisciplinas();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      Disciplina disciplina0 = new Disciplina();
      Vector<Disciplina> vector0 = new Vector<Disciplina>();
      vector0.add(disciplina0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(disciplinaRepository0).findAll();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      List<Disciplina> list0 = disciplinaServiceImpl0.listarTodasAsDisciplinas();
      assertTrue(list0.contains(disciplina0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      Long long0 = new Long(2371L);
      HashSet<Matricula> hashSet0 = new HashSet<Matricula>();
      Aluno aluno0 = new Aluno(long0, "0.0", "0.0", hashSet0);
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(aluno0).when(alunoRepository0).findByEmail(anyString());
      doReturn(false).when(alunoRepository0).exists(anyLong());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(disciplinaRepository0).findOne(anyLong());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      try { 
        disciplinaServiceImpl0.vincularAluno((Long) null, aluno0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(disciplinaRepository0).findOne(anyLong());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Long long0 = Long.valueOf((-4659L));
      // Undeclared exception!
      try { 
        disciplinaServiceImpl0.vincularAluno(long0, (Aluno) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      // Undeclared exception!
      try { 
        disciplinaServiceImpl0.validaDisciplina((Disciplina) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      // Undeclared exception!
      try { 
        disciplinaServiceImpl0.removerDisciplina((Disciplina) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      // Undeclared exception!
      try { 
        disciplinaServiceImpl0.listarTodasAsDisciplinas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Long long0 = new Long(3274L);
      // Undeclared exception!
      try { 
        disciplinaServiceImpl0.getDisciplina(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      // Undeclared exception!
      try { 
        disciplinaServiceImpl0.atualizarDisciplina((Disciplina) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Integer integer0 = new Integer(0);
      TreeSet<Matricula> treeSet0 = new TreeSet<Matricula>();
      Disciplina disciplina0 = new Disciplina("0.0", integer0, (Long) null, "0.0", treeSet0);
      disciplinaServiceImpl0.validaDisciplina(disciplina0);
      assertEquals("0.0", disciplina0.getSemestre());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Integer integer0 = new Integer((-1));
      HashSet<Matricula> hashSet0 = new HashSet<Matricula>();
      Disciplina disciplina0 = new Disciplina((Long) null, "com.ufcg.sad.exceptions.EntidadeNotFoundException", integer0, (Long) null, "", hashSet0);
      try { 
        disciplinaServiceImpl0.validaDisciplina(disciplina0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Semestre inv\u00E1lido: 
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Disciplina disciplina0 = new Disciplina();
      Integer integer0 = new Integer(1675);
      disciplina0.setTurma(integer0);
      try { 
        disciplinaServiceImpl0.validaDisciplina(disciplina0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Semestre inv\u00E1lido: null
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      Disciplina disciplina0 = new Disciplina();
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      try { 
        disciplinaServiceImpl0.validaDisciplina(disciplina0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Turma inv\u00E1lida: null
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(professorRepository0).exists(anyLong());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Integer integer0 = new Integer(0);
      Long long0 = new Long(2766L);
      LinkedHashSet<Matricula> linkedHashSet0 = new LinkedHashSet<Matricula>();
      Disciplina disciplina0 = new Disciplina("q0X2t0*A:YQ!c", integer0, long0, "", linkedHashSet0);
      try { 
        disciplinaServiceImpl0.validaDisciplina(disciplina0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Professor com id 2766n\u00E3o existe.
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      Long long0 = new Long(2098L);
      Integer integer0 = new Integer(0);
      Disciplina disciplina0 = new Disciplina();
      Set<Matricula> set0 = disciplina0.getMatriculas();
      Disciplina disciplina1 = new Disciplina(long0, "", integer0, long0, "", set0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(disciplinaRepository0).exists(anyLong());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      disciplinaServiceImpl0.removerDisciplina(disciplina1);
      assertEquals("", disciplina1.getNome());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(disciplinaRepository0).exists(anyLong());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Disciplina disciplina0 = new Disciplina();
      try { 
        disciplinaServiceImpl0.removerDisciplina(disciplina0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // disciplina n\u00E3o encontrada
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      Long long0 = new Long(2098L);
      Disciplina disciplina0 = new Disciplina();
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(disciplina0).when(disciplinaRepository0).findOne(anyLong());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Disciplina disciplina1 = disciplinaServiceImpl0.getDisciplina(long0);
      assertNull(disciplina1.getNome());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(disciplinaRepository0).findOne(anyLong());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Long long0 = new Long(2469L);
      try { 
        disciplinaServiceImpl0.getDisciplina(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // disciplina n\u00E3o encontrada
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Long long0 = new Long(0L);
      Integer integer0 = new Integer(0);
      TreeSet<Matricula> treeSet0 = new TreeSet<Matricula>();
      Disciplina disciplina0 = new Disciplina(long0, "org.springframework.data.domain.ExampleMatcher$NullHandler", integer0, long0, "org.springframework.data.domain.ExampleMatcher$NullHandler", treeSet0);
      try { 
        disciplinaServiceImpl0.cadastrarDisciplina(disciplina0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Id deve ser nulo para a cria\u00E7\u00E3o de Disciplina.
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Integer integer0 = new Integer(0);
      TreeSet<Matricula> treeSet0 = new TreeSet<Matricula>();
      Disciplina disciplina0 = new Disciplina("0.0", integer0, (Long) null, "0.0", treeSet0);
      disciplina0.setCodigo("0.0");
      try { 
        disciplinaServiceImpl0.validaDisciplina(disciplina0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // C\u00F3digo inv\u00E1lido: 0.0
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Disciplina disciplina0 = new Disciplina();
      Integer integer0 = new Integer(1675);
      disciplina0.setTurma(integer0);
      try { 
        disciplinaServiceImpl0.atualizarDisciplina(disciplina0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Semestre inv\u00E1lido: null
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(disciplinaRepository0).findAll();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      List<Disciplina> list0 = disciplinaServiceImpl0.listarTodasAsDisciplinas();
      assertNull(list0);
  }
}
