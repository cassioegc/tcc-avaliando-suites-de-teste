/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 13:59:37 GMT 2021
 */

package com.ufcg.sad.services.questionario;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.models.disciplina.Disciplina;
import com.ufcg.sad.models.professor.Professor;
import com.ufcg.sad.models.questao.Questao;
import com.ufcg.sad.models.questionario.Questionario;
import com.ufcg.sad.models.questionario.QuestionarioAplicado;
import com.ufcg.sad.models.resposta.Resposta;
import com.ufcg.sad.models.token.Token;
import com.ufcg.sad.repositories.QuestionarioRepository;
import com.ufcg.sad.services.questao.QuestaoService;
import com.ufcg.sad.services.questionario.QuestionarioAplicadoService;
import com.ufcg.sad.services.questionario.QuestionarioServiceImpl;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionarioServiceImpl_ESTest extends QuestionarioServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoService0).getQuestionarioAplicados(anyLong() , anyString() , anyLong());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      List<QuestionarioAplicado> list0 = questionarioServiceImpl0.getQuestionariosAplicados(long0, "47dpV4LcAi?gWzo", long1);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      Stack<Questionario> stack0 = new Stack<Questionario>();
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(questionarioRepository0).findAll();
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      List<Questionario> list0 = questionarioServiceImpl0.getTodosQuestionarios();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector<QuestionarioAplicado> vector0 = new Vector<QuestionarioAplicado>();
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(questionarioAplicadoService0).getQuestionarioAplicados(anyLong() , anyString() , anyLong());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      Long long0 = new Long((-177L));
      List<QuestionarioAplicado> list0 = questionarioServiceImpl0.getQuestionariosAplicados(long0, "iv?>", long0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      Vector<QuestionarioAplicado> vector0 = new Vector<QuestionarioAplicado>();
      Long long0 = new Long(1854L);
      LinkedHashSet<Resposta> linkedHashSet0 = new LinkedHashSet<Resposta>();
      HashSet<Token> hashSet0 = new HashSet<Token>();
      QuestionarioAplicado questionarioAplicado0 = new QuestionarioAplicado(long0, long0, (Long) null, (Long) null, linkedHashSet0, hashSet0);
      vector0.add(questionarioAplicado0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(questionarioAplicadoService0).getQuestionarioAplicados(anyLong() , anyString() , anyLong());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      List<QuestionarioAplicado> list0 = questionarioServiceImpl0.getQuestionariosAplicados(long0, "eE", long0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      Stack<Disciplina> stack0 = new Stack<Disciplina>();
      Long long0 = Long.getLong("$`8C<B_v+$lb}71k>Z", 0L);
      Disciplina disciplina0 = new Disciplina();
      stack0.add(disciplina0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(questionarioAplicadoService0).getDisciplina(anyLong());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      List<Disciplina> list0 = questionarioServiceImpl0.getDisciplinas(long0, "");
      assertTrue(list0.contains(disciplina0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(1735L);
      // Undeclared exception!
      try { 
        questionarioServiceImpl0.getQuestionariosAplicados(long0, "CfNK? A|", long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      Long long0 = new Long(2622L);
      // Undeclared exception!
      try { 
        questionarioServiceImpl0.getQuestionario(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = Long.valueOf((-1L));
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      // Undeclared exception!
      try { 
        questionarioServiceImpl0.getDisciplinas(long0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      // Undeclared exception!
      try { 
        questionarioServiceImpl0.criaQuestionario((Questionario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      // Undeclared exception!
      try { 
        questionarioServiceImpl0.atualizaQuestionario((Questionario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(questionarioRepository0).findOne(anyLong());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      Long long0 = new Long(0L);
      try { 
        questionarioServiceImpl0.getQuestionario(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Question\u00E1rio com id 0 n\u00E3o existe.
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoService0).getDisciplina(anyLong());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      Long long0 = new Long((-24L));
      List<Disciplina> list0 = questionarioServiceImpl0.getDisciplinas(long0, "");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoService0).getDisciplina(anyLong());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      Long long0 = new Long(1L);
      List<Disciplina> list0 = questionarioServiceImpl0.getDisciplinas(long0, (String) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      ArrayList<Questionario> arrayList0 = new ArrayList<Questionario>();
      Questionario questionario0 = new Questionario();
      arrayList0.add(questionario0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(questionarioRepository0).findAll();
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      List<Questionario> list0 = questionarioServiceImpl0.getTodosQuestionarios();
      assertTrue(list0.contains(questionario0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioRepository0).findAll();
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      // Undeclared exception!
      try { 
        questionarioServiceImpl0.getTodosQuestionarios();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      Questionario questionario0 = new Questionario();
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      doReturn(questionario0).when(questionarioRepository0).findOne(anyLong());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      Long long0 = new Long((-177L));
      Questionario questionario1 = questionarioServiceImpl0.getQuestionario(long0);
      assertNull(questionario1.getNome());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      Long long0 = new Long((-3824L));
      Professor professor0 = new Professor();
      MockDate mockDate0 = new MockDate((-3824L));
      Questionario questionario0 = new Questionario(long0, "Questin\u00E1rio sem nome.", "Questin\u00E1rio sem nome.", (List<Questao>) null, professor0, mockDate0, mockDate0);
      try { 
        questionarioServiceImpl0.criaQuestionario(questionario0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Id deve ser nulo para a cria\u00E7\u00E3o do question\u00E1rio.
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      LinkedList<Questao> linkedList0 = new LinkedList<Questao>();
      Professor professor0 = new Professor();
      Questionario questionario0 = new Questionario((Long) null, "J", "YibCOc", linkedList0, professor0, (Date) null, (Date) null);
      questionario0.setQuestoes((List<Questao>) null);
      try { 
        questionarioServiceImpl0.criaQuestionario(questionario0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Question\u00E1rio n\u00E3o pode ser vazio.
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      LinkedList<Questao> linkedList0 = new LinkedList<Questao>();
      LinkedHashSet<Disciplina> linkedHashSet0 = new LinkedHashSet<Disciplina>();
      Professor professor0 = new Professor("Question\u00E1rio n\u00E3o pode ser vazio.", "Question\u00E1rio n\u00E3o pode ser vazio.", linkedHashSet0);
      Questionario questionario0 = new Questionario((Long) null, "Question\u00E1rio n\u00E3o pode ser vazio.", "Question\u00E1rio n\u00E3o pode ser vazio.", linkedList0, professor0, (Date) null, (Date) null);
      try { 
        questionarioServiceImpl0.criaQuestionario(questionario0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Question\u00E1rio n\u00E3o pode ser vazio.
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      Questionario questionario0 = new Questionario();
      questionario0.setNome("");
      try { 
        questionarioServiceImpl0.criaQuestionario(questionario0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Question\u00E1rio sem nome.
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      Questionario questionario0 = new Questionario();
      try { 
        questionarioServiceImpl0.atualizaQuestionario(questionario0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Question\u00E1rio sem nome.
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Long long0 = new Long((-3984L));
      LinkedList<Questao> linkedList0 = new LinkedList<Questao>();
      TreeSet<Disciplina> treeSet0 = new TreeSet<Disciplina>();
      Professor professor0 = new Professor("L&[r*]78w,a*", "L&[r*]78w,a*", treeSet0);
      MockDate mockDate0 = new MockDate(1766, 1766, 1766, 1766, 1766, 1766);
      Questionario questionario0 = new Questionario(long0, "L&[r*]78w,a*", "L&[r*]78w,a*", linkedList0, professor0, (Date) null, mockDate0);
      QuestionarioServiceImpl questionarioServiceImpl0 = new QuestionarioServiceImpl();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questaoService", (Object) questaoService0);
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      QuestionarioRepository questionarioRepository0 = mock(QuestionarioRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class, "questionarioRepository", (Object) questionarioRepository0);
      Injector.validateBean(questionarioServiceImpl0, (Class<?>) QuestionarioServiceImpl.class);
      try { 
        questionarioServiceImpl0.atualizaQuestionario(questionario0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Data n\u00E3o deve ser passada para a cria\u00E7\u00E3o de question\u00E1rio.
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioServiceImpl", e);
      }
  }
}
