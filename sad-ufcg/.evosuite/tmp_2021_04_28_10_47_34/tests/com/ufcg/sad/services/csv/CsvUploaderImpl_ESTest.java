/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:14:53 GMT 2021
 */

package com.ufcg.sad.services.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.repositories.AlunoRepository;
import com.ufcg.sad.repositories.DisciplinaRepository;
import com.ufcg.sad.repositories.ProfessorRepository;
import com.ufcg.sad.services.aluno.AlunoServiceImpl;
import com.ufcg.sad.services.csv.CsvUploaderImpl;
import com.ufcg.sad.services.disciplina.DisciplinaServiceImpl;
import com.ufcg.sad.services.professor.ProfessorServiceImpl;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.web.multipart.MultipartFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CsvUploaderImpl_ESTest extends CsvUploaderImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CsvUploaderImpl csvUploaderImpl0 = new CsvUploaderImpl();
      byte[] byteArray0 = new byte[9];
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(multipartFile0).getBytes();
      try { 
        csvUploaderImpl0.cadastrarDisciplina(multipartFile0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CsvUploaderImpl csvUploaderImpl0 = new CsvUploaderImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(csvUploaderImpl0, (Class<?>) CsvUploaderImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoServiceImpl0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(csvUploaderImpl0, (Class<?>) CsvUploaderImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      Injector.inject(csvUploaderImpl0, (Class<?>) CsvUploaderImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(csvUploaderImpl0, (Class<?>) CsvUploaderImpl.class);
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(multipartFile0).getBytes();
      try { 
        csvUploaderImpl0.cadastrarDisciplina(multipartFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CsvUploaderImpl csvUploaderImpl0 = new CsvUploaderImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(csvUploaderImpl0, (Class<?>) CsvUploaderImpl.class, "alunoService", (Object) alunoServiceImpl0);
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte)13;
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(multipartFile0).getBytes();
      try { 
        csvUploaderImpl0.cadastrarDisciplina(multipartFile0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.ufcg.sad.services.csv.CsvUploaderImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CsvUploaderImpl csvUploaderImpl0 = new CsvUploaderImpl();
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Injector.inject(csvUploaderImpl0, (Class<?>) CsvUploaderImpl.class, "alunoService", (Object) alunoServiceImpl0);
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)13;
      byteArray0[1] = (byte)13;
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(multipartFile0).getBytes();
      try { 
        csvUploaderImpl0.cadastrarDisciplina(multipartFile0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.ufcg.sad.services.csv.CsvUploaderImpl", e);
      }
  }
}
