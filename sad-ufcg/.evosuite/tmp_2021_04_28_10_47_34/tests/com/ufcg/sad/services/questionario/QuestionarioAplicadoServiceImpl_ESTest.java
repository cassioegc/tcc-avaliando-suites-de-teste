/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:05:17 GMT 2021
 */

package com.ufcg.sad.services.questionario;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.models.disciplina.Disciplina;
import com.ufcg.sad.models.professor.Professor;
import com.ufcg.sad.models.questao.Questao;
import com.ufcg.sad.models.questionario.Questionario;
import com.ufcg.sad.models.questionario.QuestionarioAplicado;
import com.ufcg.sad.models.resposta.Resposta;
import com.ufcg.sad.models.token.Token;
import com.ufcg.sad.repositories.QuestionarioAplicadoRepository;
import com.ufcg.sad.services.disciplina.DisciplinaService;
import com.ufcg.sad.services.professor.ProfessorService;
import com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl;
import com.ufcg.sad.services.questionario.QuestionarioService;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionarioAplicadoServiceImpl_ESTest extends QuestionarioAplicadoServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      doReturn((Disciplina) null).when(disciplinaService0).getDisciplina(anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1562L));
      linkedList0.addFirst(long0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(questionarioAplicadoRepository0).findDisciplinaQuestionario(anyLong() , anyString());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Long long1 = new Long(0L);
      List<Disciplina> list0 = questionarioAplicadoServiceImpl0.getDisciplina(long1, "");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      doReturn((Disciplina) null).when(disciplinaService0).getDisciplina(anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1562L));
      linkedList0.addFirst(long0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(questionarioAplicadoRepository0).findDisciplinaQuestionario(anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Long long1 = new Long(3386L);
      List<Disciplina> list0 = questionarioAplicadoServiceImpl0.getDisciplina(long1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoRepository0).findByIdQuestionarioAndIdDisciplina(anyLong() , anyLong() , anyString());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Long long0 = new Long(26L);
      Long long1 = Long.valueOf(0L);
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getQuestionarioAplicados(long0, "idQuestion\u00E1rio n\u00E3o deve ser nulo.", long1);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoRepository0).findByIdQuestionarioAndIdDisciplina(anyLong() , anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Long long0 = new Long(1507L);
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getQuestionarioAplicados((Long) null, (String) null, long0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoRepository0).findByIdQuestionario(anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Long long0 = new Long(1L);
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getQuestionarioAplicados(long0, (String) null, (Long) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      Stack<QuestionarioAplicado> stack0 = new Stack<QuestionarioAplicado>();
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(questionarioAplicadoRepository0).findByIdQuestionario(anyLong() , anyString());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Long long0 = new Long(1017L);
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getQuestionarioAplicados(long0, "f", (Long) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      Vector<QuestionarioAplicado> vector0 = new Vector<QuestionarioAplicado>();
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(questionarioAplicadoRepository0).findAll();
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getTodosQuestionariosAplicados();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      Vector<QuestionarioAplicado> vector0 = new Vector<QuestionarioAplicado>();
      Long long0 = new Long((-1562L));
      HashSet<Resposta> hashSet0 = new HashSet<Resposta>();
      Integer integer0 = new Integer(9);
      HashSet<Token> hashSet1 = new HashSet<Token>();
      QuestionarioAplicado questionarioAplicado0 = new QuestionarioAplicado(long0, long0, long0, long0, "org.hibernate.annotations.OnDeleteAction", integer0, hashSet0, hashSet1);
      vector0.add(questionarioAplicado0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(questionarioAplicadoRepository0).findAll();
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getTodosQuestionariosAplicados();
      assertTrue(list0.contains(questionarioAplicado0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      Vector<QuestionarioAplicado> vector0 = new Vector<QuestionarioAplicado>();
      Long long0 = new Long((-1562L));
      HashSet<Resposta> hashSet0 = new HashSet<Resposta>();
      Integer integer0 = new Integer(9);
      HashSet<Token> hashSet1 = new HashSet<Token>();
      QuestionarioAplicado questionarioAplicado0 = new QuestionarioAplicado(long0, long0, long0, long0, "org.hibernate.annotations.OnDeleteAction", integer0, hashSet0, hashSet1);
      vector0.add(questionarioAplicado0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(questionarioAplicadoRepository0).findByIdQuestionarioAndIdDisciplina(anyLong() , anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getQuestionarioAplicados(long0, "", long0);
      assertTrue(list0.contains(questionarioAplicado0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      ArrayList<QuestionarioAplicado> arrayList0 = new ArrayList<QuestionarioAplicado>();
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(questionarioAplicadoRepository0).findByIdIn(anyList());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Stack<Long> stack0 = new Stack<Long>();
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getListaDeQuestionariosAplicados(stack0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      Vector<QuestionarioAplicado> vector0 = new Vector<QuestionarioAplicado>(55296, 55296);
      vector0.add((QuestionarioAplicado) null);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(questionarioAplicadoRepository0).findByIdIn(anyList());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getListaDeQuestionariosAplicados(arrayList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        questionarioAplicadoServiceImpl0.getTodosQuestionariosAplicados();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      Long long0 = new Long((-1L));
      // Undeclared exception!
      try { 
        questionarioAplicadoServiceImpl0.getQuestionarioAplicados(long0, "", long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        questionarioAplicadoServiceImpl0.getQuestionarioAplicado(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      Stack<Long> stack0 = new Stack<Long>();
      // Undeclared exception!
      try { 
        questionarioAplicadoServiceImpl0.getListaDeQuestionariosAplicados(stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoRepository0).findDisciplinaQuestionario(anyLong() , anyString());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Long long0 = new Long(332L);
      // Undeclared exception!
      try { 
        questionarioAplicadoServiceImpl0.getDisciplina(long0, "}.[dtG.EO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoRepository0).findDisciplinaQuestionario(anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Long long0 = new Long((-3063L));
      // Undeclared exception!
      try { 
        questionarioAplicadoServiceImpl0.getDisciplina(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      // Undeclared exception!
      try { 
        questionarioAplicadoServiceImpl0.criaQuestionarioAplicado((QuestionarioAplicado) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      // Undeclared exception!
      try { 
        questionarioAplicadoServiceImpl0.atualizaQuestionarioAplicado((QuestionarioAplicado) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1562L));
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(questionarioAplicadoRepository0).findDisciplinaQuestionario(anyLong() , anyString());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      List<Disciplina> list0 = questionarioAplicadoServiceImpl0.getDisciplina(long0, "");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1562L));
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(questionarioAplicadoRepository0).findDisciplinaQuestionario(anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      List<Disciplina> list0 = questionarioAplicadoServiceImpl0.getDisciplina(long0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoRepository0).findByIdQuestionario(anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getQuestionarioAplicados((Long) null, "", (Long) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      Long long0 = new Long((-1562L));
      QuestionarioAplicado questionarioAplicado0 = new QuestionarioAplicado();
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(questionarioAplicado0).when(questionarioAplicadoRepository0).findOne(anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      QuestionarioAplicado questionarioAplicado1 = questionarioAplicadoServiceImpl0.getQuestionarioAplicado(long0);
      assertNull(questionarioAplicado1.getSemestre());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(questionarioAplicadoRepository0).findOne(anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Long long0 = new Long((-313L));
      try { 
        questionarioAplicadoServiceImpl0.getQuestionarioAplicado(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Long long0 = Long.getLong("V_#i#(S/onCAB.@r%", (-1L));
      QuestionarioAplicado questionarioAplicado0 = new QuestionarioAplicado(long0, long0, long0, long0, "#");
      try { 
        questionarioAplicadoServiceImpl0.criaQuestionarioAplicado(questionarioAplicado0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Id deve ser nulo para a cria\u00E7\u00E3o do question\u00E1rio aplicado.
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      LinkedList<Questao> linkedList0 = new LinkedList<Questao>();
      Professor professor0 = new Professor();
      MockDate mockDate0 = new MockDate();
      Questionario questionario0 = new Questionario((Long) null, "*c4&", "*c4&", linkedList0, professor0, mockDate0, mockDate0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn(questionario0).when(questionarioService0).getQuestionario(anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      QuestionarioAplicado questionarioAplicado0 = new QuestionarioAplicado();
      Long long0 = new Long(974);
      questionarioAplicado0.setIdQuestionario(long0);
      try { 
        questionarioAplicadoServiceImpl0.atualizaQuestionarioAplicado(questionarioAplicado0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // idDisciplina n\u00E3o deve ser nulo.
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoRepository0).findAll();
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getTodosQuestionariosAplicados();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoRepository0).findByIdIn(anyList());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      ArrayList<Long> arrayList0 = new ArrayList<Long>();
      List<QuestionarioAplicado> list0 = questionarioAplicadoServiceImpl0.getListaDeQuestionariosAplicados(arrayList0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService0);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      QuestionarioAplicado questionarioAplicado0 = new QuestionarioAplicado();
      try { 
        questionarioAplicadoServiceImpl0.atualizaQuestionarioAplicado(questionarioAplicado0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // idQuestion\u00E1rio n\u00E3o deve ser nulo.
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }
}
