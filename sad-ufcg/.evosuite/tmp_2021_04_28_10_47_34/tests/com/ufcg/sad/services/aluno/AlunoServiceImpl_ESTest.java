/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:09:40 GMT 2021
 */

package com.ufcg.sad.services.aluno;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.models.aluno.Aluno;
import com.ufcg.sad.models.matricula.Matricula;
import com.ufcg.sad.repositories.AlunoRepository;
import com.ufcg.sad.services.aluno.AlunoServiceImpl;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AlunoServiceImpl_ESTest extends AlunoServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      ArrayList<Aluno> arrayList0 = new ArrayList<Aluno>();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(alunoRepository0).findAll();
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      List<Aluno> list0 = alunoServiceImpl0.getTodosOsAlunos();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      Stack<Aluno> stack0 = new Stack<Aluno>();
      Aluno aluno0 = new Aluno();
      stack0.add(aluno0);
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(alunoRepository0).findAll();
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      List<Aluno> list0 = alunoServiceImpl0.getTodosOsAlunos();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      Long long0 = Long.valueOf(738L);
      HashSet<Matricula> hashSet0 = new HashSet<Matricula>();
      Aluno aluno0 = new Aluno(long0, "", "Aluno apresenta dados inv\u00E1lidos", hashSet0);
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(alunoRepository0).exists(anyLong());
      doReturn(aluno0).when(alunoRepository0).findOne(anyLong());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Aluno aluno1 = alunoServiceImpl0.getAluno(long0);
      assertEquals("", aluno1.getNome());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      alunoServiceImpl0.alunoRepository = null;
      Long long0 = new Long(0L);
      Aluno aluno0 = new Aluno(long0, ":H--", "]xndJxDvq[9", (Set<Matricula>) null);
      // Undeclared exception!
      try { 
        alunoServiceImpl0.removerAluno(aluno0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      alunoServiceImpl0.alunoRepository = null;
      // Undeclared exception!
      try { 
        alunoServiceImpl0.procurarPorEmail(")E\"YVe%|cb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      alunoServiceImpl0.alunoRepository = null;
      // Undeclared exception!
      try { 
        alunoServiceImpl0.getTodosOsAlunos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      alunoServiceImpl0.alunoRepository = null;
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        alunoServiceImpl0.getAluno(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      alunoServiceImpl0.alunoRepository = null;
      Aluno aluno0 = new Aluno();
      // Undeclared exception!
      try { 
        alunoServiceImpl0.atualizarAluno(aluno0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      Aluno aluno0 = new Aluno();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(aluno0).when(alunoRepository0).findByEmail(anyString());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Aluno aluno1 = alunoServiceImpl0.procurarPorEmail("");
      assertNull(aluno1.getNome());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Aluno) null).when(alunoRepository0).findByEmail(anyString());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      try { 
        alunoServiceImpl0.procurarPorEmail("HD*\"{*gG20q4p>N5wY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o existe aluno com email: HD*\"{*gG20q4p>N5wY
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(alunoRepository0).exists(anyLong());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Aluno aluno0 = new Aluno();
      try { 
        alunoServiceImpl0.removerAluno(aluno0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      Long long0 = Long.valueOf(738L);
      HashSet<Matricula> hashSet0 = new HashSet<Matricula>();
      Aluno aluno0 = new Aluno(long0, "", "Aluno apresenta dados inv\u00E1lidos", hashSet0);
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(alunoRepository0).exists(anyLong());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      try { 
        alunoServiceImpl0.removerAluno(aluno0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      try { 
        alunoServiceImpl0.removerAluno((Aluno) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(alunoRepository0).exists(anyLong());
      doReturn((Object) null).when(alunoRepository0).findOne(anyLong());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Long long0 = new Long(0L);
      Aluno aluno0 = alunoServiceImpl0.getAluno(long0);
      assertNull(aluno0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(alunoRepository0).exists(anyLong());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Long long0 = new Long(0L);
      try { 
        alunoServiceImpl0.getAluno(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      try { 
        alunoServiceImpl0.getAluno((Long) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      Aluno aluno0 = new Aluno();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(alunoRepository0).exists(anyLong());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      Long long0 = new Long(0L);
      Set<Matricula> set0 = aluno0.getMatriculas();
      Aluno aluno1 = new Aluno(long0, "", "", set0);
      try { 
        alunoServiceImpl0.atualizarAluno(aluno1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      Aluno aluno0 = new Aluno();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(alunoRepository0).exists(anyLong());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      try { 
        alunoServiceImpl0.atualizarAluno(aluno0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(alunoRepository0).findAll();
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      List<Aluno> list0 = alunoServiceImpl0.getTodosOsAlunos();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AlunoServiceImpl alunoServiceImpl0 = new AlunoServiceImpl();
      AlunoRepository alunoRepository0 = mock(AlunoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class, "alunoRepository", (Object) alunoRepository0);
      Injector.validateBean(alunoServiceImpl0, (Class<?>) AlunoServiceImpl.class);
      try { 
        alunoServiceImpl0.atualizarAluno((Aluno) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.aluno.AlunoServiceImpl", e);
      }
  }
}
