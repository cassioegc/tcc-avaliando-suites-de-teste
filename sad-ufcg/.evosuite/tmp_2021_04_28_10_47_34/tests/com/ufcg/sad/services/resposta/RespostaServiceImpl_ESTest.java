/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 13:53:18 GMT 2021
 */

package com.ufcg.sad.services.resposta;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.models.opcao.Opcao;
import com.ufcg.sad.models.questao.Questao;
import com.ufcg.sad.models.questionario.QuestionarioAplicado;
import com.ufcg.sad.models.resposta.Resposta;
import com.ufcg.sad.models.resposta.RespostaAberta;
import com.ufcg.sad.models.resposta.RespostaMultiplaEscolha;
import com.ufcg.sad.models.resposta.RespostaSelecao;
import com.ufcg.sad.models.token.Token;
import com.ufcg.sad.repositories.QuestaoRepository;
import com.ufcg.sad.repositories.QuestionarioAplicadoRepository;
import com.ufcg.sad.repositories.RespostaRepository;
import com.ufcg.sad.repositories.TokenRepository;
import com.ufcg.sad.services.aluno.AlunoService;
import com.ufcg.sad.services.disciplina.DisciplinaService;
import com.ufcg.sad.services.professor.ProfessorService;
import com.ufcg.sad.services.questao.QuestaoServiceImpl;
import com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl;
import com.ufcg.sad.services.questionario.QuestionarioService;
import com.ufcg.sad.services.resposta.RespostaServiceImpl;
import com.ufcg.sad.services.token.TokenServiceImpl;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RespostaServiceImpl_ESTest extends RespostaServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      Stack<Resposta> stack0 = new Stack<Resposta>();
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(respostaRepository0).buscarRespostasDeTipoComQuestaoId(anyString() , anyLong());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      Long long0 = new Long((-818L));
      List<Resposta> list0 = respostaServiceImpl0.getTodasAsRespostas("$VALUES", long0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      ArrayList<Resposta> arrayList0 = new ArrayList<Resposta>();
      RespostaAberta respostaAberta0 = new RespostaAberta();
      arrayList0.add((Resposta) respostaAberta0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(respostaRepository0).findAll();
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      List<Resposta> list0 = respostaServiceImpl0.getTodasAsRespostas((String) null, (Long) null);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(respostaRepository0).exists(anyLong());
      doReturn((Object) null).when(respostaRepository0).findOne(anyLong());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      Long long0 = new Long((-1168L));
      Resposta resposta0 = respostaServiceImpl0.getResposta(long0);
      assertNull(resposta0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      // Undeclared exception!
      try { 
        respostaServiceImpl0.validaResposta((Resposta) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.resposta.RespostaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      // Undeclared exception!
      try { 
        respostaServiceImpl0.criarResposta((Resposta) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.resposta.RespostaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(respostaRepository0).findAll();
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      RespostaRepository respostaRepository1 = respostaServiceImpl0.respostaRepository;
      List<Resposta> list0 = respostaRepository1.findAll();
      try { 
        respostaServiceImpl0.addRespostas(">`1)yfT|N)wy`", list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.resposta.RespostaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      RespostaAberta respostaAberta0 = new RespostaAberta();
      try { 
        respostaServiceImpl0.validaResposta(respostaAberta0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // idQuest\u00E3o n\u00E3o pode ser nulo.
         //
         verifyException("com.ufcg.sad.services.resposta.RespostaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      Token token0 = new Token((Long) null, (Long) null);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      doReturn(token0, (Token) null).when(tokenRepository0).findById(anyString());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      LinkedList<Resposta> linkedList0 = new LinkedList<Resposta>();
      try { 
        respostaServiceImpl0.addRespostas("WQf", linkedList0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Este Token n\u00E3o existe.
         //
         verifyException("com.ufcg.sad.services.token.TokenServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(respostaRepository0).buscarRespostasDeTipo(anyString());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      List<Resposta> list0 = respostaServiceImpl0.getTodasAsRespostas("COu", (Long) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(respostaRepository0).buscarRespostasComQuestaoId(anyLong());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      Long long0 = new Long((-312L));
      List<Resposta> list0 = respostaServiceImpl0.getTodasAsRespostas("", long0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      Long long0 = new Long(5);
      // Undeclared exception!
      try { 
        respostaServiceImpl0.getTodasAsRespostas("~'MbjLJ:';`rGwo?8v", long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.resposta.RespostaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(respostaRepository0).exists(anyLong());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      Long long0 = new Long(1692L);
      try { 
        respostaServiceImpl0.getResposta(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.resposta.RespostaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      Long long0 = new Long((-2148L));
      MockDate mockDate0 = new MockDate();
      RespostaAberta respostaAberta0 = new RespostaAberta(long0, mockDate0, long0, long0, "f&<[YPr1@9F");
      // Undeclared exception!
      try { 
        respostaServiceImpl0.criarResposta(respostaAberta0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Id deve ser nulo para a cria\u00E7\u00E3o de resposta.
         //
         verifyException("com.ufcg.sad.services.resposta.RespostaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      Questao questao0 = new Questao();
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      doReturn(questao0).when(questaoRepository0).findOne(anyLong());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      Long long0 = new Long(1);
      QuestionarioAplicado questionarioAplicado0 = new QuestionarioAplicado(long0, long0, long0, long0, "ABERTA");
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(questionarioAplicadoRepository0).findOne(anyLong());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      Stack<Opcao> stack0 = new Stack<Opcao>();
      RespostaSelecao respostaSelecao0 = new RespostaSelecao(long0, (Date) null, long0, long0, stack0);
      try { 
        respostaServiceImpl0.validaResposta(respostaSelecao0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questionario.QuestionarioAplicadoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      Questao questao0 = new Questao();
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(questaoRepository0).findOne(anyLong());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      RespostaAberta respostaAberta0 = new RespostaAberta();
      Long long0 = new Long(1);
      respostaAberta0.setIdQuestao(long0);
      try { 
        respostaServiceImpl0.criarResposta(respostaAberta0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.questao.QuestaoServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RespostaServiceImpl respostaServiceImpl0 = new RespostaServiceImpl();
      QuestaoServiceImpl questaoServiceImpl0 = new QuestaoServiceImpl();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "professorService", (Object) professorService0);
      QuestaoRepository questaoRepository0 = mock(QuestaoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class, "questaoRepository", (Object) questaoRepository0);
      Injector.validateBean(questaoServiceImpl0, (Class<?>) QuestaoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questaoService", (Object) questaoServiceImpl0);
      QuestionarioAplicadoServiceImpl questionarioAplicadoServiceImpl0 = new QuestionarioAplicadoServiceImpl();
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService1 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "professorService", (Object) professorService1);
      QuestionarioAplicadoRepository questionarioAplicadoRepository0 = mock(QuestionarioAplicadoRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioAplicadoRepository", (Object) questionarioAplicadoRepository0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioAplicadoServiceImpl0, (Class<?>) QuestionarioAplicadoServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      RespostaRepository respostaRepository0 = mock(RespostaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "respostaRepository", (Object) respostaRepository0);
      TokenServiceImpl tokenServiceImpl0 = new TokenServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService1 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "disciplinaService", (Object) disciplinaService1);
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioAplicadoService", (Object) questionarioAplicadoServiceImpl0);
      QuestionarioService questionarioService1 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "questionarioService", (Object) questionarioService1);
      TokenRepository tokenRepository0 = mock(TokenRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class, "tokenRepository", (Object) tokenRepository0);
      Injector.validateBean(tokenServiceImpl0, (Class<?>) TokenServiceImpl.class);
      Injector.inject(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class, "tokenService", (Object) tokenServiceImpl0);
      Injector.validateBean(respostaServiceImpl0, (Class<?>) RespostaServiceImpl.class);
      MockDate mockDate0 = new MockDate(1865L);
      Long long0 = new Long(1865L);
      Opcao opcao0 = new Opcao(long0, "READ_COMMITTED", "READ_COMMITTED");
      RespostaMultiplaEscolha respostaMultiplaEscolha0 = new RespostaMultiplaEscolha((Long) null, mockDate0, (Long) null, long0, opcao0, "READ_COMMITTED");
      // Undeclared exception!
      try { 
        respostaServiceImpl0.validaResposta(respostaMultiplaEscolha0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data n\u00E3o deve ser passada para criar Resposta.
         //
         verifyException("com.ufcg.sad.services.resposta.RespostaServiceImpl", e);
      }
  }
}
