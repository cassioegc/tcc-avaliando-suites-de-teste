/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 13:56:31 GMT 2021
 */

package com.ufcg.sad.services.professor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.models.disciplina.Disciplina;
import com.ufcg.sad.models.professor.Professor;
import com.ufcg.sad.repositories.DisciplinaRepository;
import com.ufcg.sad.repositories.ProfessorRepository;
import com.ufcg.sad.services.aluno.AlunoService;
import com.ufcg.sad.services.disciplina.DisciplinaServiceImpl;
import com.ufcg.sad.services.professor.ProfessorServiceImpl;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProfessorServiceImpl_ESTest extends ProfessorServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      HashSet<Disciplina> hashSet0 = new HashSet<Disciplina>();
      Professor professor0 = new Professor("0000000", "0000000", hashSet0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn(professor0).when(professorRepository0).findBySiape(anyString());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Professor professor1 = professorServiceImpl0.procurarProfessorPeloSiape("");
      assertEquals("0000000", professor1.getSiape());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ArrayList<Professor> arrayList0 = new ArrayList<Professor>();
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(professorRepository0).findAll();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      List<Professor> list0 = professorServiceImpl0.getTodosOsProfessores();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(professorRepository0).exists(anyLong());
      doReturn((Object) null).when(professorRepository0).findOne(anyLong());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Long long0 = new Long(2108L);
      Professor professor0 = professorServiceImpl0.getProfessor(long0);
      assertNull(professor0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      // Undeclared exception!
      try { 
        professorServiceImpl0.validaProfessor((Professor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      // Undeclared exception!
      try { 
        professorServiceImpl0.procurarProfessorPeloSiape("{\"lli[KZ'Ng_.f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      // Undeclared exception!
      try { 
        professorServiceImpl0.getTodosOsProfessores();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      Long long0 = new Long(1L);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      // Undeclared exception!
      try { 
        professorServiceImpl0.getProfessor(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      // Undeclared exception!
      try { 
        professorServiceImpl0.criarProfessor((Professor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      // Undeclared exception!
      try { 
        professorServiceImpl0.atualizarProfessor((Professor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      LinkedHashSet<Disciplina> linkedHashSet0 = new LinkedHashSet<Disciplina>();
      Professor professor0 = new Professor("0000000", "0000000", linkedHashSet0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add((Disciplina) null);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      try { 
        professorServiceImpl0.validaProfessor(professor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Disciplina n\u00E3o pode ser Null
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Professor professor0 = new Professor("0000000", "0000000", (Set<Disciplina>) null);
      professorServiceImpl0.validaProfessor(professor0);
      assertEquals("0000000", professor0.getSiape());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      HashSet<Disciplina> hashSet0 = new HashSet<Disciplina>();
      Professor professor0 = new Professor("I@*$", "org.springframework.data.domain.ExampleMatcher$MatchMode", hashSet0);
      try { 
        professorServiceImpl0.validaProfessor(professor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Siape inv\u00E1lido: I@*$
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Professor professor0 = new Professor();
      try { 
        professorServiceImpl0.validaProfessor(professor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Siape inv\u00E1lido: null
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Professor) null).when(professorRepository0).findBySiape(anyString());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      try { 
        professorServiceImpl0.procurarProfessorPeloSiape("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Professor com siape n\u00E3o existe.
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      LinkedHashSet<Disciplina> linkedHashSet0 = new LinkedHashSet<Disciplina>();
      Professor professor0 = new Professor("0000000", "0000000", linkedHashSet0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(professorRepository0).exists(anyLong());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Long long0 = new Long((-1L));
      professor0.setId(long0);
      professorServiceImpl0.removerProfessor(professor0);
      assertEquals("0000000", professor0.getSiape());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      LinkedHashSet<Disciplina> linkedHashSet0 = new LinkedHashSet<Disciplina>();
      Professor professor0 = new Professor("0000000", "0000000", linkedHashSet0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(professorRepository0).exists(anyLong());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      try { 
        professorServiceImpl0.removerProfessor(professor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Professor com id nulln\u00E3o existe.
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      // Undeclared exception!
      try { 
        professorServiceImpl0.removerProfessor((Professor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(professorRepository0).exists(anyLong());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Long long0 = new Long((-1140L));
      try { 
        professorServiceImpl0.getProfessor(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Professor com id -1140n\u00E3o existe.
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      LinkedHashSet<Disciplina> linkedHashSet0 = new LinkedHashSet<Disciplina>();
      Professor professor0 = new Professor("0000000", "0000000", linkedHashSet0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(professorRepository0).exists(anyLong());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Long long0 = new Long((-1L));
      try { 
        professorServiceImpl0.getProfessor(long0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Professor com id -1n\u00E3o existe.
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      Professor professor0 = new Professor();
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      Long long0 = new Long(1L);
      professor0.setId(long0);
      try { 
        professorServiceImpl0.criarProfessor(professor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Id deve ser nulo para cria\u00E7\u00E3o de Professor.
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Disciplina> linkedHashSet0 = new LinkedHashSet<Disciplina>();
      Professor professor0 = new Professor("0000000", "0000000", linkedHashSet0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Disciplina disciplina0 = new Disciplina();
      linkedHashSet0.add(disciplina0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      try { 
        professorServiceImpl0.validaProfessor(professor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Turma inv\u00E1lida: null
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<Disciplina> linkedHashSet0 = new LinkedHashSet<Disciplina>();
      Professor professor0 = new Professor("0000000", "0000000", linkedHashSet0);
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      professorServiceImpl0.validaProfessor(professor0);
      assertEquals("0000000", professor0.getSiape());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      Professor professor0 = new Professor();
      professor0.setSiape("0000000");
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      try { 
        professorServiceImpl0.validaProfessor(professor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nome do professor n\u00E3o pode ser Null.
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      LinkedHashSet<Disciplina> linkedHashSet0 = new LinkedHashSet<Disciplina>();
      Professor professor0 = new Professor("6", "6", linkedHashSet0);
      try { 
        professorServiceImpl0.atualizarProfessor(professor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Siape inv\u00E1lido: 6
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      Professor professor0 = new Professor("0000000", "0000000", (Set<Disciplina>) null);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(professorRepository0).exists(anyLong());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      try { 
        professorServiceImpl0.atualizarProfessor(professor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Professor com id nulln\u00E3o existe.
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(professorRepository0).findAll();
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      List<Professor> list0 = professorServiceImpl0.getTodosOsProfessores();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ProfessorServiceImpl professorServiceImpl0 = new ProfessorServiceImpl();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorServiceImpl0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class, "professorRepository", (Object) professorRepository0);
      Injector.validateBean(professorServiceImpl0, (Class<?>) ProfessorServiceImpl.class);
      try { 
        professorServiceImpl0.getProfessor((Long) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Professor com id nulln\u00E3o existe.
         //
         verifyException("com.ufcg.sad.services.professor.ProfessorServiceImpl", e);
      }
  }
}
