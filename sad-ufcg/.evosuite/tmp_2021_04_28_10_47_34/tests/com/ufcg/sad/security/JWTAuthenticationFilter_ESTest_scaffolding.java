/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Apr 28 14:27:27 GMT 2021
 */

package com.ufcg.sad.security;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class JWTAuthenticationFilter_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.ufcg.sad.security.JWTAuthenticationFilter"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/cassioegc/tcc/sad-ufcg"); 
    java.lang.System.setProperty("user.home", "/home/cassioegc"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "cassioegc"); 
    java.lang.System.setProperty("user.timezone", "America/Recife"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JWTAuthenticationFilter_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.web.context.ServletContextAware",
      "org.springframework.core.NestedRuntimeException",
      "org.springframework.core.io.ResourceLoader",
      "org.springframework.beans.factory.Aware",
      "org.springframework.beans.PropertyEditorRegistry",
      "org.springframework.beans.BeanWrapper",
      "org.springframework.beans.BeansException",
      "org.springframework.beans.factory.InitializingBean",
      "org.springframework.beans.PropertyAccessor",
      "com.ufcg.sad.security.JWTAuthenticationFilter",
      "org.springframework.core.env.PropertyResolver",
      "org.springframework.context.EnvironmentAware",
      "org.springframework.core.env.Environment",
      "org.springframework.web.util.NestedServletException",
      "org.springframework.core.env.EnvironmentCapable",
      "org.springframework.beans.factory.DisposableBean",
      "org.springframework.web.filter.GenericFilterBean",
      "com.ufcg.sad.security.TokenAuthenticationService",
      "org.springframework.beans.TypeConverter",
      "org.springframework.beans.ConfigurablePropertyAccessor",
      "org.springframework.beans.factory.BeanNameAware",
      "org.springframework.beans.PropertyValues",
      "org.springframework.security.core.Authentication"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("javax.servlet.FilterChain", false, JWTAuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.ServletRequest", false, JWTAuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.ServletResponse", false, JWTAuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JWTAuthenticationFilter_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.springframework.web.filter.GenericFilterBean",
      "com.ufcg.sad.security.JWTAuthenticationFilter",
      "org.springframework.util.StringUtils",
      "org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy",
      "org.springframework.security.core.context.SecurityContextHolder",
      "org.springframework.util.Assert",
      "org.springframework.core.env.AbstractEnvironment",
      "org.springframework.core.env.StandardEnvironment",
      "org.springframework.web.context.support.StandardServletEnvironment",
      "org.springframework.core.env.MutablePropertySources",
      "org.springframework.core.env.AbstractPropertyResolver",
      "org.springframework.core.env.PropertySourcesPropertyResolver",
      "org.springframework.core.env.PropertySource",
      "org.springframework.core.env.PropertySource$StubPropertySource",
      "org.springframework.util.ObjectUtils",
      "org.springframework.jndi.JndiAccessor",
      "org.springframework.jndi.JndiLocatorSupport",
      "org.springframework.core.SpringProperties",
      "org.springframework.jndi.JndiLocatorDelegate",
      "org.springframework.jndi.JndiPropertySource",
      "org.springframework.jndi.JndiTemplate",
      "org.springframework.core.env.EnumerablePropertySource",
      "org.springframework.core.env.MapPropertySource",
      "org.springframework.core.env.SystemEnvironmentPropertySource",
      "com.ufcg.sad.security.TokenAuthenticationService",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.util.ReflectionUtils$4",
      "org.springframework.util.ReflectionUtils$5",
      "org.springframework.util.ReflectionUtils$6",
      "org.springframework.util.ReflectionUtils",
      "org.apache.tomcat.util.res.StringManager",
      "org.apache.tomcat.util.res.StringManager$1",
      "org.apache.juli.logging.LogFactory",
      "org.apache.juli.logging.DirectJDKLog",
      "org.apache.catalina.core.ApplicationFilterConfig",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.springframework.util.ConcurrentReferenceHashMap$3",
      "org.springframework.mock.web.MockFilterConfig",
      "org.springframework.mock.web.MockServletContext",
      "org.springframework.mock.web.MockSessionCookieConfig",
      "org.springframework.core.io.DefaultResourceLoader",
      "org.springframework.util.ClassUtils",
      "org.springframework.mock.web.MockRequestDispatcher"
    );
  }
}
