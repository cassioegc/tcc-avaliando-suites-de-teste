/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:25:03 GMT 2021
 */

package com.ufcg.sad.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.ufcg.sad.controllers.ProfessorController;
import com.ufcg.sad.models.professor.Professor;
import com.ufcg.sad.services.professor.ProfessorService;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ProfessorController_ESTest extends ProfessorController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ProfessorController professorController0 = new ProfessorController();
      Professor professor0 = mock(Professor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(professor0).toString();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      doReturn(professor0).when(professorService0).procurarProfessorPeloSiape(anyString());
      Injector.inject(professorController0, (Class<?>) ProfessorController.class, "professorService", (Object) professorService0);
      Injector.validateBean(professorController0, (Class<?>) ProfessorController.class);
      ResponseEntity<Professor> responseEntity0 = professorController0.procurarProfessorPeloSiape("");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ProfessorController professorController0 = new ProfessorController();
      Professor professor0 = mock(Professor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(professor0).toString();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      doReturn(professor0).when(professorService0).getProfessor(anyLong());
      Injector.inject(professorController0, (Class<?>) ProfessorController.class, "professorService", (Object) professorService0);
      Injector.validateBean(professorController0, (Class<?>) ProfessorController.class);
      Long long0 = new Long(0L);
      ResponseEntity<Object> responseEntity0 = professorController0.getProfessor(long0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProfessorController professorController0 = new ProfessorController();
      Professor professor0 = mock(Professor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(professor0).toString();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      doReturn(professor0).when(professorService0).criarProfessor(any(com.ufcg.sad.models.professor.Professor.class));
      Injector.inject(professorController0, (Class<?>) ProfessorController.class, "professorService", (Object) professorService0);
      Injector.validateBean(professorController0, (Class<?>) ProfessorController.class);
      Professor professor1 = mock(Professor.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Object> responseEntity0 = professorController0.criarProfessor(professor1);
      assertEquals(201, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ProfessorController professorController0 = new ProfessorController();
      Professor professor0 = mock(Professor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(professor0).toString();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      doReturn(professor0).when(professorService0).atualizarProfessor(any(com.ufcg.sad.models.professor.Professor.class));
      Injector.inject(professorController0, (Class<?>) ProfessorController.class, "professorService", (Object) professorService0);
      Injector.validateBean(professorController0, (Class<?>) ProfessorController.class);
      ResponseEntity<Object> responseEntity0 = professorController0.atualizarProfessor((Professor) null);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ProfessorController professorController0 = new ProfessorController();
      Professor professor0 = mock(Professor.class, new ViolatedAssumptionAnswer());
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      doReturn((Professor) null).when(professorService0).atualizarProfessor(any(com.ufcg.sad.models.professor.Professor.class));
      Injector.inject(professorController0, (Class<?>) ProfessorController.class, "professorService", (Object) professorService0);
      Injector.validateBean(professorController0, (Class<?>) ProfessorController.class);
      ResponseEntity<Object> responseEntity0 = professorController0.atualizarProfessor(professor0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ProfessorController professorController0 = new ProfessorController();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      doReturn((Professor) null).when(professorService0).getProfessor(anyLong());
      Injector.inject(professorController0, (Class<?>) ProfessorController.class, "professorService", (Object) professorService0);
      Injector.validateBean(professorController0, (Class<?>) ProfessorController.class);
      Long long0 = new Long(16L);
      ResponseEntity<Object> responseEntity0 = professorController0.getProfessor(long0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ProfessorController professorController0 = new ProfessorController();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(professorService0).getTodosOsProfessores();
      Injector.inject(professorController0, (Class<?>) ProfessorController.class, "professorService", (Object) professorService0);
      Injector.validateBean(professorController0, (Class<?>) ProfessorController.class);
      ResponseEntity<List<Professor>> responseEntity0 = professorController0.getTodosOsProfessores();
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ProfessorController professorController0 = new ProfessorController();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      doReturn((Professor) null).when(professorService0).criarProfessor(any(com.ufcg.sad.models.professor.Professor.class));
      Injector.inject(professorController0, (Class<?>) ProfessorController.class, "professorService", (Object) professorService0);
      Injector.validateBean(professorController0, (Class<?>) ProfessorController.class);
      Professor professor0 = mock(Professor.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Object> responseEntity0 = professorController0.criarProfessor(professor0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ProfessorController professorController0 = new ProfessorController();
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      doReturn((Professor) null).when(professorService0).procurarProfessorPeloSiape(anyString());
      Injector.inject(professorController0, (Class<?>) ProfessorController.class, "professorService", (Object) professorService0);
      Injector.validateBean(professorController0, (Class<?>) ProfessorController.class);
      ResponseEntity<Professor> responseEntity0 = professorController0.procurarProfessorPeloSiape("Proxy-Authorization");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }
}
