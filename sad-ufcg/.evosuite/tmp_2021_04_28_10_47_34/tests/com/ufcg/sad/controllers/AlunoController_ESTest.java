/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:18:17 GMT 2021
 */

package com.ufcg.sad.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.controllers.AlunoController;
import com.ufcg.sad.models.aluno.Aluno;
import com.ufcg.sad.services.aluno.AlunoService;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AlunoController_ESTest extends AlunoController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AlunoController alunoController0 = new AlunoController();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      doReturn((Aluno) null).when(alunoService0).procurarPorEmail(anyString());
      Injector.inject(alunoController0, (Class<?>) AlunoController.class, "alunoService", (Object) alunoService0);
      Injector.validateBean(alunoController0, (Class<?>) AlunoController.class);
      ResponseEntity<Object> responseEntity0 = alunoController0.procurarPorEmail("#_o>");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AlunoController alunoController0 = new AlunoController();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(alunoService0).getTodosOsAlunos();
      Injector.inject(alunoController0, (Class<?>) AlunoController.class, "alunoService", (Object) alunoService0);
      Injector.validateBean(alunoController0, (Class<?>) AlunoController.class);
      ResponseEntity<List<Aluno>> responseEntity0 = alunoController0.getTodosOsAlunos();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AlunoController alunoController0 = new AlunoController();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      doReturn((Aluno) null).when(alunoService0).getAluno(anyLong());
      Injector.inject(alunoController0, (Class<?>) AlunoController.class, "alunoService", (Object) alunoService0);
      Injector.validateBean(alunoController0, (Class<?>) AlunoController.class);
      ResponseEntity<Object> responseEntity0 = alunoController0.getAluno((Long) null);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AlunoController alunoController0 = new AlunoController();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      doReturn((Aluno) null).when(alunoService0).criarAluno(any(com.ufcg.sad.models.aluno.Aluno.class));
      Injector.inject(alunoController0, (Class<?>) AlunoController.class, "alunoService", (Object) alunoService0);
      Injector.validateBean(alunoController0, (Class<?>) AlunoController.class);
      Aluno aluno0 = new Aluno();
      ResponseEntity<Object> responseEntity0 = alunoController0.criarAluno(aluno0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlunoController alunoController0 = new AlunoController();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      doReturn((Aluno) null).when(alunoService0).atualizarAluno(any(com.ufcg.sad.models.aluno.Aluno.class));
      Injector.inject(alunoController0, (Class<?>) AlunoController.class, "alunoService", (Object) alunoService0);
      Injector.validateBean(alunoController0, (Class<?>) AlunoController.class);
      Aluno aluno0 = new Aluno();
      ResponseEntity<Object> responseEntity0 = alunoController0.atualizarAluno(aluno0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      AlunoController alunoController0 = new AlunoController();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        alunoController0.atualizarAluno(aluno0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.controllers.AlunoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AlunoController alunoController0 = new AlunoController();
      Aluno aluno0 = new Aluno();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      doReturn(aluno0).when(alunoService0).procurarPorEmail(anyString());
      Injector.inject(alunoController0, (Class<?>) AlunoController.class, "alunoService", (Object) alunoService0);
      Injector.validateBean(alunoController0, (Class<?>) AlunoController.class);
      ResponseEntity<Object> responseEntity0 = alunoController0.procurarPorEmail("7");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AlunoController alunoController0 = new AlunoController();
      Aluno aluno0 = new Aluno();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      doReturn(aluno0).when(alunoService0).getAluno(anyLong());
      Injector.inject(alunoController0, (Class<?>) AlunoController.class, "alunoService", (Object) alunoService0);
      Injector.validateBean(alunoController0, (Class<?>) AlunoController.class);
      Long long0 = new Long((-43L));
      ResponseEntity<Object> responseEntity0 = alunoController0.getAluno(long0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AlunoController alunoController0 = new AlunoController();
      Aluno aluno0 = new Aluno();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      doReturn(aluno0).when(alunoService0).criarAluno(any(com.ufcg.sad.models.aluno.Aluno.class));
      Injector.inject(alunoController0, (Class<?>) AlunoController.class, "alunoService", (Object) alunoService0);
      Injector.validateBean(alunoController0, (Class<?>) AlunoController.class);
      ResponseEntity<Object> responseEntity0 = alunoController0.criarAluno(aluno0);
      assertEquals(201, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AlunoController alunoController0 = new AlunoController();
      Aluno aluno0 = new Aluno();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      doReturn(aluno0).when(alunoService0).atualizarAluno(any(com.ufcg.sad.models.aluno.Aluno.class));
      Injector.inject(alunoController0, (Class<?>) AlunoController.class, "alunoService", (Object) alunoService0);
      Injector.validateBean(alunoController0, (Class<?>) AlunoController.class);
      ResponseEntity<Object> responseEntity0 = alunoController0.atualizarAluno(aluno0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlunoController alunoController0 = new AlunoController();
      LinkedList<Aluno> linkedList0 = new LinkedList<Aluno>();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(alunoService0).getTodosOsAlunos();
      Injector.inject(alunoController0, (Class<?>) AlunoController.class, "alunoService", (Object) alunoService0);
      Injector.validateBean(alunoController0, (Class<?>) AlunoController.class);
      ResponseEntity<List<Aluno>> responseEntity0 = alunoController0.getTodosOsAlunos();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }
}
