/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:22:03 GMT 2021
 */

package com.ufcg.sad.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.controllers.QuestionarioController;
import com.ufcg.sad.models.disciplina.Disciplina;
import com.ufcg.sad.models.professor.Professor;
import com.ufcg.sad.models.questao.Questao;
import com.ufcg.sad.models.questionario.Questionario;
import com.ufcg.sad.services.questionario.QuestionarioService;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionarioController_ESTest extends QuestionarioController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      LinkedList<Questao> linkedList0 = new LinkedList<Questao>();
      LinkedHashSet<Disciplina> linkedHashSet0 = new LinkedHashSet<Disciplina>();
      Professor professor0 = new Professor("Cannot parse date value \"", "", linkedHashSet0);
      MockDate mockDate0 = new MockDate((-2759), (-1877), 0, 0, 0, 193);
      Questionario questionario0 = new Questionario((Long) null, "Cannot parse date value \"", "", linkedList0, professor0, mockDate0, mockDate0);
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn(questionario0).when(questionarioService0).atualizaQuestionario(any(com.ufcg.sad.models.questionario.Questionario.class));
      Injector.inject(questionarioController0, (Class<?>) QuestionarioController.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioController0, (Class<?>) QuestionarioController.class);
      ResponseEntity<Object> responseEntity0 = questionarioController0.atualizaQuestionario((Questionario) null);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioService0).getQuestionariosAplicados(anyLong() , anyString() , anyLong());
      Injector.inject(questionarioController0, (Class<?>) QuestionarioController.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioController0, (Class<?>) QuestionarioController.class);
      Long long0 = new Long((-1L));
      Long long1 = new Long((-1L));
      ResponseEntity<Object> responseEntity0 = questionarioController0.getQuestionariosAplicadosByIDs(long0, "", long1);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn((List<Questionario>) null).when(questionarioService0).getTodosQuestionarios();
      Injector.inject(questionarioController0, (Class<?>) QuestionarioController.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioController0, (Class<?>) QuestionarioController.class);
      ResponseEntity<List<Questionario>> responseEntity0 = questionarioController0.getTodosQuestionarios();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn((Questionario) null).when(questionarioService0).getQuestionario(anyLong());
      Injector.inject(questionarioController0, (Class<?>) QuestionarioController.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioController0, (Class<?>) QuestionarioController.class);
      ResponseEntity<Object> responseEntity0 = questionarioController0.getQuestionario((Long) null);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn((List<Disciplina>) null).when(questionarioService0).getDisciplinas(anyLong() , anyString());
      Injector.inject(questionarioController0, (Class<?>) QuestionarioController.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioController0, (Class<?>) QuestionarioController.class);
      Long long0 = new Long(0L);
      ResponseEntity<Object> responseEntity0 = questionarioController0.getDisciplinas("Access-Control-Allow-Origin", long0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn((Questionario) null).when(questionarioService0).criaQuestionario(any(com.ufcg.sad.models.questionario.Questionario.class));
      Injector.inject(questionarioController0, (Class<?>) QuestionarioController.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioController0, (Class<?>) QuestionarioController.class);
      Questionario questionario0 = new Questionario();
      ResponseEntity<Object> responseEntity0 = questionarioController0.criaQuestionario(questionario0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn((Questionario) null).when(questionarioService0).atualizaQuestionario(any(com.ufcg.sad.models.questionario.Questionario.class));
      Injector.inject(questionarioController0, (Class<?>) QuestionarioController.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioController0, (Class<?>) QuestionarioController.class);
      ResponseEntity<Object> responseEntity0 = questionarioController0.atualizaQuestionario((Questionario) null);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      // Undeclared exception!
      try { 
        questionarioController0.getTodosQuestionarios();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.controllers.QuestionarioController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      // Undeclared exception!
      try { 
        questionarioController0.getQuestionario((Long) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.controllers.QuestionarioController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      Long long0 = new Long(1504L);
      // Undeclared exception!
      try { 
        questionarioController0.getDisciplinas("Gone", long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.controllers.QuestionarioController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      Questionario questionario0 = new Questionario();
      // Undeclared exception!
      try { 
        questionarioController0.atualizaQuestionario(questionario0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.controllers.QuestionarioController", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      LinkedList<Disciplina> linkedList0 = new LinkedList<Disciplina>();
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(questionarioService0).getDisciplinas(anyLong() , anyString());
      Injector.inject(questionarioController0, (Class<?>) QuestionarioController.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioController0, (Class<?>) QuestionarioController.class);
      Long long0 = new Long(1821L);
      ResponseEntity<Object> responseEntity0 = questionarioController0.getDisciplinas("h=%*QJPv", long0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      Questionario questionario0 = new Questionario();
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn(questionario0).when(questionarioService0).criaQuestionario(any(com.ufcg.sad.models.questionario.Questionario.class));
      Injector.inject(questionarioController0, (Class<?>) QuestionarioController.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioController0, (Class<?>) QuestionarioController.class);
      ResponseEntity<Object> responseEntity0 = questionarioController0.criaQuestionario(questionario0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      LinkedList<Questionario> linkedList0 = new LinkedList<Questionario>();
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(questionarioService0).getTodosQuestionarios();
      Injector.inject(questionarioController0, (Class<?>) QuestionarioController.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioController0, (Class<?>) QuestionarioController.class);
      ResponseEntity<List<Questionario>> responseEntity0 = questionarioController0.getTodosQuestionarios();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QuestionarioController questionarioController0 = new QuestionarioController();
      Questionario questionario0 = new Questionario();
      QuestionarioService questionarioService0 = mock(QuestionarioService.class, new ViolatedAssumptionAnswer());
      doReturn(questionario0).when(questionarioService0).getQuestionario(anyLong());
      Injector.inject(questionarioController0, (Class<?>) QuestionarioController.class, "questionarioService", (Object) questionarioService0);
      Injector.validateBean(questionarioController0, (Class<?>) QuestionarioController.class);
      Long long0 = new Long(1821L);
      ResponseEntity<Object> responseEntity0 = questionarioController0.getQuestionario(long0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }
}
