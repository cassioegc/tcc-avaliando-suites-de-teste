/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:16:54 GMT 2021
 */

package com.ufcg.sad.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.ufcg.sad.controllers.CsvUploaderController;
import com.ufcg.sad.services.aluno.AlunoService;
import com.ufcg.sad.services.csv.CsvUploaderImpl;
import com.ufcg.sad.services.disciplina.DisciplinaService;
import com.ufcg.sad.services.professor.ProfessorService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CsvUploaderController_ESTest extends CsvUploaderController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CsvUploaderController csvUploaderController0 = new CsvUploaderController();
      CsvUploaderImpl csvUploaderImpl0 = new CsvUploaderImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(csvUploaderImpl0, (Class<?>) CsvUploaderImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaService disciplinaService0 = mock(DisciplinaService.class, new ViolatedAssumptionAnswer());
      Injector.inject(csvUploaderImpl0, (Class<?>) CsvUploaderImpl.class, "disciplinaService", (Object) disciplinaService0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(csvUploaderImpl0, (Class<?>) CsvUploaderImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(csvUploaderImpl0, (Class<?>) CsvUploaderImpl.class);
      Injector.inject(csvUploaderController0, (Class<?>) CsvUploaderController.class, "csvUploader", (Object) csvUploaderImpl0);
      Injector.validateBean(csvUploaderController0, (Class<?>) CsvUploaderController.class);
      MultipartFile[] multipartFileArray0 = new MultipartFile[8];
      byte[] byteArray0 = new byte[0];
      MultipartFile multipartFile0 = mock(MultipartFile.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(multipartFile0).getBytes();
      multipartFileArray0[0] = multipartFile0;
      ResponseEntity<Object> responseEntity0 = csvUploaderController0.enviarCSV(multipartFileArray0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CsvUploaderController csvUploaderController0 = new CsvUploaderController();
      MultipartFile[] multipartFileArray0 = new MultipartFile[4];
      ResponseEntity<Object> responseEntity0 = csvUploaderController0.enviarCSV(multipartFileArray0);
      assertEquals(400, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CsvUploaderController csvUploaderController0 = new CsvUploaderController();
      MultipartFile[] multipartFileArray0 = new MultipartFile[0];
      ResponseEntity<Object> responseEntity0 = csvUploaderController0.enviarCSV(multipartFileArray0);
      assertEquals(201, responseEntity0.getStatusCodeValue());
  }
}
