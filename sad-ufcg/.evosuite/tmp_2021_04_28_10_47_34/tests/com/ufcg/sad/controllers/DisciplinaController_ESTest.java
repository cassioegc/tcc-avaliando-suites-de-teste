/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:23:37 GMT 2021
 */

package com.ufcg.sad.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.controllers.DisciplinaController;
import com.ufcg.sad.models.aluno.Aluno;
import com.ufcg.sad.models.disciplina.Disciplina;
import com.ufcg.sad.models.matricula.Matricula;
import com.ufcg.sad.repositories.DisciplinaRepository;
import com.ufcg.sad.repositories.MatriculaRepository;
import com.ufcg.sad.services.MatriculaServiceImpl;
import com.ufcg.sad.services.aluno.AlunoService;
import com.ufcg.sad.services.disciplina.DisciplinaServiceImpl;
import com.ufcg.sad.services.professor.ProfessorService;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DisciplinaController_ESTest extends DisciplinaController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Aluno aluno0 = new Aluno();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      doReturn((Aluno) null).when(alunoService0).atualizarAluno(any(com.ufcg.sad.models.aluno.Aluno.class));
      doReturn(aluno0).when(alunoService0).procurarPorEmail(anyString());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      Integer integer0 = new Integer(62);
      Long long0 = new Long((-1306L));
      Disciplina disciplina0 = new Disciplina((String) null, integer0, long0, (String) null, (Set<Matricula>) null);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(disciplina0).when(disciplinaRepository0).findOne(anyLong());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "matriculaService", (Object) matriculaServiceImpl0);
      Injector.validateBean(disciplinaController0, (Class<?>) DisciplinaController.class);
      Aluno aluno1 = new Aluno(long0, "", "", (Set<Matricula>) null);
      ResponseEntity<Object> responseEntity0 = disciplinaController0.cadastrarAlunoEmDisciplina(long0, aluno1);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      Disciplina disciplina0 = new Disciplina();
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(disciplina0).when(disciplinaRepository0).findOne(anyLong());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "matriculaService", (Object) matriculaServiceImpl0);
      Injector.validateBean(disciplinaController0, (Class<?>) DisciplinaController.class);
      Long long0 = new Long(1784L);
      ResponseEntity<Object> responseEntity0 = disciplinaController0.getDisciplina(long0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(disciplinaRepository0).findOne(anyLong());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "matriculaService", (Object) matriculaServiceImpl0);
      Injector.validateBean(disciplinaController0, (Class<?>) DisciplinaController.class);
      Long long0 = new Long(38L);
      ResponseEntity<Object> responseEntity0 = disciplinaController0.getDisciplina(long0);
      assertEquals(404, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(matriculaRepository0).getAlunosMatriculados(anyLong());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "matriculaService", (Object) matriculaServiceImpl0);
      Injector.validateBean(disciplinaController0, (Class<?>) DisciplinaController.class);
      Long long0 = new Long(1417);
      ResponseEntity<List<Aluno>> responseEntity0 = disciplinaController0.getAlunosMatriculados(long0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(matriculaRepository0).getAlunosMatriculados(anyLong());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "matriculaService", (Object) matriculaServiceImpl0);
      Injector.validateBean(disciplinaController0, (Class<?>) DisciplinaController.class);
      ResponseEntity<List<Aluno>> responseEntity0 = disciplinaController0.getAlunosMatriculados((Long) null);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      LinkedList<Disciplina> linkedList0 = new LinkedList<Disciplina>();
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(disciplinaRepository0).findAll();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "matriculaService", (Object) matriculaServiceImpl0);
      Injector.validateBean(disciplinaController0, (Class<?>) DisciplinaController.class);
      ResponseEntity<List<Disciplina>> responseEntity0 = disciplinaController0.getAll();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      // Undeclared exception!
      try { 
        disciplinaController0.getAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.controllers.DisciplinaController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "matriculaService", (Object) matriculaServiceImpl0);
      Injector.validateBean(disciplinaController0, (Class<?>) DisciplinaController.class);
      // Undeclared exception!
      try { 
        disciplinaController0.cadastrarDisciplina((Disciplina) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(disciplinaRepository0).findOne(anyLong());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "matriculaService", (Object) matriculaServiceImpl0);
      Injector.validateBean(disciplinaController0, (Class<?>) DisciplinaController.class);
      // Undeclared exception!
      try { 
        disciplinaController0.cadastrarAlunoEmDisciplina((Long) null, (Aluno) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.services.disciplina.DisciplinaServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "matriculaService", (Object) matriculaServiceImpl0);
      Injector.validateBean(disciplinaController0, (Class<?>) DisciplinaController.class);
      Disciplina disciplina0 = new Disciplina();
      ResponseEntity<Object> responseEntity0 = disciplinaController0.cadastrarDisciplina(disciplina0);
      assertEquals(400, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(disciplinaRepository0).findAll();
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      Injector.validateBean(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "disciplinaService", (Object) disciplinaServiceImpl0);
      MatriculaServiceImpl matriculaServiceImpl0 = new MatriculaServiceImpl();
      MatriculaRepository matriculaRepository0 = mock(MatriculaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class, "matriculaRepository", (Object) matriculaRepository0);
      Injector.validateBean(matriculaServiceImpl0, (Class<?>) MatriculaServiceImpl.class);
      Injector.inject(disciplinaController0, (Class<?>) DisciplinaController.class, "matriculaService", (Object) matriculaServiceImpl0);
      Injector.validateBean(disciplinaController0, (Class<?>) DisciplinaController.class);
      ResponseEntity<List<Disciplina>> responseEntity0 = disciplinaController0.getAll();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      Long long0 = new Long(2960L);
      // Undeclared exception!
      try { 
        disciplinaController0.getDisciplina(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.controllers.DisciplinaController", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DisciplinaController disciplinaController0 = new DisciplinaController();
      DisciplinaServiceImpl disciplinaServiceImpl0 = new DisciplinaServiceImpl();
      Long long0 = new Long((-1L));
      AlunoService alunoService0 = mock(AlunoService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "alunoService", (Object) alunoService0);
      DisciplinaRepository disciplinaRepository0 = mock(DisciplinaRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "disciplinaRepository", (Object) disciplinaRepository0);
      ProfessorService professorService0 = mock(ProfessorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(disciplinaServiceImpl0, (Class<?>) DisciplinaServiceImpl.class, "professorService", (Object) professorService0);
      // Undeclared exception!
      try { 
        disciplinaController0.getAlunosMatriculados(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.controllers.DisciplinaController", e);
      }
  }
}
