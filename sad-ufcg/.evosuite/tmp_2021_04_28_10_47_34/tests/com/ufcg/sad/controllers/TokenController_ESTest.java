/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:25:46 GMT 2021
 */

package com.ufcg.sad.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.controllers.TokenController;
import com.ufcg.sad.models.disciplina.Disciplina;
import com.ufcg.sad.models.questionario.Questionario;
import com.ufcg.sad.models.questionario.QuestionarioAplicado;
import com.ufcg.sad.models.token.Token;
import com.ufcg.sad.services.token.TokenService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenController_ESTest extends TokenController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenController tokenController0 = new TokenController();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenController0, (Class<?>) TokenController.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(tokenController0, (Class<?>) TokenController.class);
      tokenController0.tokenService = null;
      ResponseEntity<Object> responseEntity0 = tokenController0.buscaQuestionarioAplicado("");
      assertEquals(400, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenController tokenController0 = new TokenController();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenController0, (Class<?>) TokenController.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(tokenController0, (Class<?>) TokenController.class);
      tokenController0.tokenService = null;
      ResponseEntity<Object> responseEntity0 = tokenController0.buscaQuestionario("Insufficient Space On Resource");
      assertEquals(400, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenController tokenController0 = new TokenController();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenController0, (Class<?>) TokenController.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(tokenController0, (Class<?>) TokenController.class);
      tokenController0.tokenService = null;
      ResponseEntity<Object> responseEntity0 = tokenController0.buscaDisciplina(",;FqN?Ob]v");
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenController tokenController0 = new TokenController();
      Token token0 = mock(Token.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(token0).toString();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      doReturn(token0).when(tokenService0).criaToken(any(com.ufcg.sad.models.token.Token.class));
      Injector.inject(tokenController0, (Class<?>) TokenController.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(tokenController0, (Class<?>) TokenController.class);
      Token token1 = mock(Token.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Object> responseEntity0 = tokenController0.criaToken(token1);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenController tokenController0 = new TokenController();
      QuestionarioAplicado questionarioAplicado0 = mock(QuestionarioAplicado.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionarioAplicado0).toString();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      doReturn(questionarioAplicado0).when(tokenService0).buscarQuestionarioAplicado(anyString());
      Injector.inject(tokenController0, (Class<?>) TokenController.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(tokenController0, (Class<?>) TokenController.class);
      ResponseEntity<Object> responseEntity0 = tokenController0.buscaQuestionarioAplicado("Link");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenController tokenController0 = new TokenController();
      Questionario questionario0 = mock(Questionario.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionario0).toString();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      doReturn(questionario0).when(tokenService0).buscarQuestionario(anyString());
      Injector.inject(tokenController0, (Class<?>) TokenController.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(tokenController0, (Class<?>) TokenController.class);
      ResponseEntity<Object> responseEntity0 = tokenController0.buscaQuestionario(">");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenController tokenController0 = new TokenController();
      Disciplina disciplina0 = mock(Disciplina.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(disciplina0).toString();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      doReturn(disciplina0).when(tokenService0).buscarDisciplina(anyString());
      Injector.inject(tokenController0, (Class<?>) TokenController.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(tokenController0, (Class<?>) TokenController.class);
      ResponseEntity<Object> responseEntity0 = tokenController0.buscaDisciplina("");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenController tokenController0 = new TokenController();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenController0, (Class<?>) TokenController.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(tokenController0, (Class<?>) TokenController.class);
      tokenController0.tokenService = null;
      // Undeclared exception!
      try { 
        tokenController0.deletaToken("Insufficient Storage");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.controllers.TokenController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenController tokenController0 = new TokenController();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenController0, (Class<?>) TokenController.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(tokenController0, (Class<?>) TokenController.class);
      tokenController0.tokenService = null;
      Token token0 = mock(Token.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        tokenController0.criaToken(token0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.controllers.TokenController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenController tokenController0 = new TokenController();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(tokenService0).criaToken(any(com.ufcg.sad.models.token.Token.class));
      Injector.inject(tokenController0, (Class<?>) TokenController.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(tokenController0, (Class<?>) TokenController.class);
      Token token0 = mock(Token.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Object> responseEntity0 = tokenController0.criaToken(token0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenController tokenController0 = new TokenController();
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(tokenController0, (Class<?>) TokenController.class, "tokenService", (Object) tokenService0);
      Injector.validateBean(tokenController0, (Class<?>) TokenController.class);
      ResponseEntity<Object> responseEntity0 = tokenController0.deletaToken((String) null);
      assertEquals(202, responseEntity0.getStatusCodeValue());
  }
}
