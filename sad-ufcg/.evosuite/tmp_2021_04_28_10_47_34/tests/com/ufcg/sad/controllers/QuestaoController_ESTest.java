/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:19:40 GMT 2021
 */

package com.ufcg.sad.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ufcg.sad.controllers.QuestaoController;
import com.ufcg.sad.models.questao.Questao;
import com.ufcg.sad.services.questao.QuestaoService;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestaoController_ESTest extends QuestaoController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuestaoController questaoController0 = new QuestaoController();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      doReturn((List<Questao>) null).when(questaoService0).getTodasQuestoes();
      Injector.inject(questaoController0, (Class<?>) QuestaoController.class, "questaoService", (Object) questaoService0);
      Injector.validateBean(questaoController0, (Class<?>) QuestaoController.class);
      ResponseEntity<List<Questao>> responseEntity0 = questaoController0.getTodasQuestoes();
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuestaoController questaoController0 = new QuestaoController();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      doReturn((Questao) null).when(questaoService0).getQuestao(anyLong());
      Injector.inject(questaoController0, (Class<?>) QuestaoController.class, "questaoService", (Object) questaoService0);
      Injector.validateBean(questaoController0, (Class<?>) QuestaoController.class);
      ResponseEntity<Object> responseEntity0 = questaoController0.getQuestionario((Long) null);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuestaoController questaoController0 = new QuestaoController();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      doReturn((Questao) null).when(questaoService0).criaQuestao(any(com.ufcg.sad.models.questao.Questao.class));
      Injector.inject(questaoController0, (Class<?>) QuestaoController.class, "questaoService", (Object) questaoService0);
      Injector.validateBean(questaoController0, (Class<?>) QuestaoController.class);
      Questao questao0 = new Questao();
      ResponseEntity<Object> responseEntity0 = questaoController0.criaQuestao(questao0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuestaoController questaoController0 = new QuestaoController();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      doReturn((Questao) null).when(questaoService0).atualizaQuestao(any(com.ufcg.sad.models.questao.Questao.class));
      Injector.inject(questaoController0, (Class<?>) QuestaoController.class, "questaoService", (Object) questaoService0);
      Injector.validateBean(questaoController0, (Class<?>) QuestaoController.class);
      Questao questao0 = new Questao();
      ResponseEntity<Object> responseEntity0 = questaoController0.atualizaQuestao(questao0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuestaoController questaoController0 = new QuestaoController();
      LinkedList<Questao> linkedList0 = new LinkedList<Questao>();
      Questao questao0 = new Questao();
      // Undeclared exception!
      try { 
        questaoController0.criaQuestao(questao0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ufcg.sad.controllers.QuestaoController", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuestaoController questaoController0 = new QuestaoController();
      Questao questao0 = new Questao();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      doReturn(questao0).when(questaoService0).criaQuestao(any(com.ufcg.sad.models.questao.Questao.class));
      Injector.inject(questaoController0, (Class<?>) QuestaoController.class, "questaoService", (Object) questaoService0);
      Injector.validateBean(questaoController0, (Class<?>) QuestaoController.class);
      ResponseEntity<Object> responseEntity0 = questaoController0.criaQuestao(questao0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuestaoController questaoController0 = new QuestaoController();
      LinkedList<Questao> linkedList0 = new LinkedList<Questao>();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(questaoService0).getTodasQuestoes();
      Injector.inject(questaoController0, (Class<?>) QuestaoController.class, "questaoService", (Object) questaoService0);
      Injector.validateBean(questaoController0, (Class<?>) QuestaoController.class);
      ResponseEntity<List<Questao>> responseEntity0 = questaoController0.getTodasQuestoes();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      QuestaoController questaoController0 = new QuestaoController();
      Questao questao0 = new Questao();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      doReturn(questao0).when(questaoService0).atualizaQuestao(any(com.ufcg.sad.models.questao.Questao.class));
      Injector.inject(questaoController0, (Class<?>) QuestaoController.class, "questaoService", (Object) questaoService0);
      Injector.validateBean(questaoController0, (Class<?>) QuestaoController.class);
      ResponseEntity<Object> responseEntity0 = questaoController0.atualizaQuestao(questao0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QuestaoController questaoController0 = new QuestaoController();
      Questao questao0 = new Questao();
      QuestaoService questaoService0 = mock(QuestaoService.class, new ViolatedAssumptionAnswer());
      doReturn(questao0).when(questaoService0).getQuestao(anyLong());
      Injector.inject(questaoController0, (Class<?>) QuestaoController.class, "questaoService", (Object) questaoService0);
      Injector.validateBean(questaoController0, (Class<?>) QuestaoController.class);
      Long long0 = new Long(5);
      ResponseEntity<Object> responseEntity0 = questaoController0.getQuestionario(long0);
      assertTrue(responseEntity0.hasBody());
  }
}
