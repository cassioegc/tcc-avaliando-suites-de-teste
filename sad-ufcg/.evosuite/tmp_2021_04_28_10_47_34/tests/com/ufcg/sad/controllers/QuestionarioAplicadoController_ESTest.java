/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 28 14:29:56 GMT 2021
 */

package com.ufcg.sad.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.ufcg.sad.controllers.QuestionarioAplicadoController;
import com.ufcg.sad.models.questionario.QuestionarioAplicado;
import com.ufcg.sad.services.questionario.QuestionarioAplicadoService;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuestionarioAplicadoController_ESTest extends QuestionarioAplicadoController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuestionarioAplicadoController questionarioAplicadoController0 = new QuestionarioAplicadoController();
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn((QuestionarioAplicado) null).when(questionarioAplicadoService0).getQuestionarioAplicado(anyLong());
      Injector.inject(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      Injector.validateBean(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class);
      ResponseEntity<Object> responseEntity0 = questionarioAplicadoController0.getQuestionarioAplicado((Long) null);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuestionarioAplicadoController questionarioAplicadoController0 = new QuestionarioAplicadoController();
      QuestionarioAplicado questionarioAplicado0 = mock(QuestionarioAplicado.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionarioAplicado0).toString();
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn(questionarioAplicado0).when(questionarioAplicadoService0).criaQuestionarioAplicado(any(com.ufcg.sad.models.questionario.QuestionarioAplicado.class));
      Injector.inject(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      Injector.validateBean(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class);
      QuestionarioAplicado questionarioAplicado1 = mock(QuestionarioAplicado.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Object> responseEntity0 = questionarioAplicadoController0.criaQuestionarioAplicado(questionarioAplicado1);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuestionarioAplicadoController questionarioAplicadoController0 = new QuestionarioAplicadoController();
      QuestionarioAplicado questionarioAplicado0 = mock(QuestionarioAplicado.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionarioAplicado0).toString();
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn(questionarioAplicado0).when(questionarioAplicadoService0).atualizaQuestionarioAplicado(any(com.ufcg.sad.models.questionario.QuestionarioAplicado.class));
      Injector.inject(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      Injector.validateBean(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class);
      QuestionarioAplicado questionarioAplicado1 = mock(QuestionarioAplicado.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Object> responseEntity0 = questionarioAplicadoController0.atualizaQuestionarioAplicado(questionarioAplicado1);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuestionarioAplicadoController questionarioAplicadoController0 = new QuestionarioAplicadoController();
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn((QuestionarioAplicado) null).when(questionarioAplicadoService0).atualizaQuestionarioAplicado(any(com.ufcg.sad.models.questionario.QuestionarioAplicado.class));
      Injector.inject(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      Injector.validateBean(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class);
      QuestionarioAplicado questionarioAplicado0 = mock(QuestionarioAplicado.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Object> responseEntity0 = questionarioAplicadoController0.atualizaQuestionarioAplicado(questionarioAplicado0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuestionarioAplicadoController questionarioAplicadoController0 = new QuestionarioAplicadoController();
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(questionarioAplicadoService0).getTodosQuestionariosAplicados();
      Injector.inject(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      Injector.validateBean(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class);
      ResponseEntity<List<QuestionarioAplicado>> responseEntity0 = questionarioAplicadoController0.getTodosQuestionariosAplicados();
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuestionarioAplicadoController questionarioAplicadoController0 = new QuestionarioAplicadoController();
      QuestionarioAplicado questionarioAplicado0 = mock(QuestionarioAplicado.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(questionarioAplicado0).toString();
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn(questionarioAplicado0).when(questionarioAplicadoService0).getQuestionarioAplicado(anyLong());
      Injector.inject(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      Injector.validateBean(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class);
      Long long0 = new Long(1257L);
      ResponseEntity<Object> responseEntity0 = questionarioAplicadoController0.getQuestionarioAplicado(long0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuestionarioAplicadoController questionarioAplicadoController0 = new QuestionarioAplicadoController();
      QuestionarioAplicadoService questionarioAplicadoService0 = mock(QuestionarioAplicadoService.class, new ViolatedAssumptionAnswer());
      doReturn((QuestionarioAplicado) null).when(questionarioAplicadoService0).criaQuestionarioAplicado(any(com.ufcg.sad.models.questionario.QuestionarioAplicado.class));
      Injector.inject(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class, "questionarioAplicadoService", (Object) questionarioAplicadoService0);
      Injector.validateBean(questionarioAplicadoController0, (Class<?>) QuestionarioAplicadoController.class);
      QuestionarioAplicado questionarioAplicado0 = mock(QuestionarioAplicado.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Object> responseEntity0 = questionarioAplicadoController0.criaQuestionarioAplicado(questionarioAplicado0);
      assertFalse(responseEntity0.hasBody());
  }
}
