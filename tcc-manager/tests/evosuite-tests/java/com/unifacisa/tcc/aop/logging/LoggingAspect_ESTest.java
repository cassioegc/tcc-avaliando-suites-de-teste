/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:38:15 GMT 2021
 */

package com.unifacisa.tcc.aop.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.aop.logging.LoggingAspect;
import java.lang.reflect.Method;
import org.aopalliance.intercept.MethodInvocation;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.springframework.aop.ProxyMethodInvocation;
import org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint;
import org.springframework.core.env.StandardEnvironment;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LoggingAspect_ESTest extends LoggingAspect_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      LoggingAspect loggingAspect0 = new LoggingAspect(standardEnvironment0);
      MethodInvocation methodInvocation0 = mock(MethodInvocation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(methodInvocation0).proceed();
      ProxyMethodInvocation proxyMethodInvocation0 = mock(ProxyMethodInvocation.class, new ViolatedAssumptionAnswer());
      doReturn(methodInvocation0).when(proxyMethodInvocation0).invocableClone();
      MethodInvocationProceedingJoinPoint methodInvocationProceedingJoinPoint0 = new MethodInvocationProceedingJoinPoint(proxyMethodInvocation0);
      Object object0 = loggingAspect0.logAround(methodInvocationProceedingJoinPoint0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      LoggingAspect loggingAspect0 = new LoggingAspect(standardEnvironment0);
      try { 
        loggingAspect0.logAround((ProceedingJoinPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.aop.logging.LoggingAspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      LoggingAspect loggingAspect0 = new LoggingAspect(standardEnvironment0);
      MethodInvocation methodInvocation0 = mock(MethodInvocation.class, new ViolatedAssumptionAnswer());
      ProxyMethodInvocation proxyMethodInvocation0 = mock(ProxyMethodInvocation.class, new ViolatedAssumptionAnswer());
      doReturn((MethodInvocation) null).when(proxyMethodInvocation0).invocableClone();
      MethodInvocationProceedingJoinPoint methodInvocationProceedingJoinPoint0 = new MethodInvocationProceedingJoinPoint(proxyMethodInvocation0);
      try { 
        loggingAspect0.logAround(methodInvocationProceedingJoinPoint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      LoggingAspect loggingAspect0 = new LoggingAspect(standardEnvironment0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "systemEnvironment";
      stringArray0[1] = "systemEnvironment";
      stringArray0[2] = "dev";
      stringArray0[3] = "spring.profiles.active";
      stringArray0[4] = "]: only location String and Resource object supported";
      stringArray0[5] = "systemEnvironment";
      stringArray0[6] = "systemProperties";
      stringArray0[7] = "spring.profiles.active";
      stringArray0[8] = "spring.profiles.default";
      standardEnvironment0.setActiveProfiles(stringArray0);
      // Undeclared exception!
      try { 
        loggingAspect0.logAfterThrowing((JoinPoint) null, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.aop.logging.LoggingAspect", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      LoggingAspect loggingAspect0 = new LoggingAspect(standardEnvironment0);
      ProxyMethodInvocation proxyMethodInvocation0 = mock(ProxyMethodInvocation.class, new ViolatedAssumptionAnswer());
      doReturn((Method) null).when(proxyMethodInvocation0).getMethod();
      MethodInvocationProceedingJoinPoint methodInvocationProceedingJoinPoint0 = new MethodInvocationProceedingJoinPoint(proxyMethodInvocation0);
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        loggingAspect0.logAfterThrowing(methodInvocationProceedingJoinPoint0, mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint$MethodSignatureImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      LoggingAspect loggingAspect0 = new LoggingAspect(standardEnvironment0);
      loggingAspect0.springBeanPointcut();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      LoggingAspect loggingAspect0 = new LoggingAspect(standardEnvironment0);
      loggingAspect0.applicationPackagePointcut();
  }
}
