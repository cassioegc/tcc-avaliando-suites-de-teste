/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:59:05 GMT 2021
 */

package com.unifacisa.tcc.repository;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.repository.CustomSocialUsersConnectionRepository;
import com.unifacisa.tcc.repository.SocialUserConnectionRepository;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springframework.social.connect.Connection;
import org.springframework.social.connect.ConnectionFactoryLocator;
import org.springframework.social.connect.ConnectionKey;
import org.springframework.social.connect.ConnectionRepository;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CustomSocialUsersConnectionRepository_ESTest extends CustomSocialUsersConnectionRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(socialUserConnectionRepository0).findAllByProviderIdAndProviderUserId(anyString() , anyString());
      ConnectionFactoryLocator connectionFactoryLocator0 = mock(ConnectionFactoryLocator.class, new ViolatedAssumptionAnswer());
      CustomSocialUsersConnectionRepository customSocialUsersConnectionRepository0 = new CustomSocialUsersConnectionRepository(socialUserConnectionRepository0, connectionFactoryLocator0);
      ConnectionKey connectionKey0 = mock(ConnectionKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(connectionKey0).getProviderId();
      doReturn((String) null).when(connectionKey0).getProviderUserId();
      Connection<String> connection0 = (Connection<String>) mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(connectionKey0).when(connection0).getKey();
      List<String> list0 = customSocialUsersConnectionRepository0.findUserIdsWithConnection(connection0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(socialUserConnectionRepository0).findAllByProviderIdAndProviderUserIdIn(anyString() , anySet());
      ConnectionFactoryLocator connectionFactoryLocator0 = mock(ConnectionFactoryLocator.class, new ViolatedAssumptionAnswer());
      CustomSocialUsersConnectionRepository customSocialUsersConnectionRepository0 = new CustomSocialUsersConnectionRepository(socialUserConnectionRepository0, connectionFactoryLocator0);
      Set<String> set0 = customSocialUsersConnectionRepository0.findUserIdsConnectedTo("A ConnectionFactory for provider '", (Set<String>) null);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      ConnectionFactoryLocator connectionFactoryLocator0 = mock(ConnectionFactoryLocator.class, new ViolatedAssumptionAnswer());
      CustomSocialUsersConnectionRepository customSocialUsersConnectionRepository0 = new CustomSocialUsersConnectionRepository(socialUserConnectionRepository0, connectionFactoryLocator0);
      // Undeclared exception!
      try { 
        customSocialUsersConnectionRepository0.createConnectionRepository((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // userId cannot be null
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialUsersConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      ConnectionFactoryLocator connectionFactoryLocator0 = mock(ConnectionFactoryLocator.class, new ViolatedAssumptionAnswer());
      CustomSocialUsersConnectionRepository customSocialUsersConnectionRepository0 = new CustomSocialUsersConnectionRepository(socialUserConnectionRepository0, connectionFactoryLocator0);
      ConnectionRepository connectionRepository0 = customSocialUsersConnectionRepository0.createConnectionRepository("A ConnectionFactory for provider '");
      assertNotNull(connectionRepository0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ConnectionFactoryLocator connectionFactoryLocator0 = mock(ConnectionFactoryLocator.class, new ViolatedAssumptionAnswer());
      CustomSocialUsersConnectionRepository customSocialUsersConnectionRepository0 = new CustomSocialUsersConnectionRepository((SocialUserConnectionRepository) null, connectionFactoryLocator0);
      // Undeclared exception!
      try { 
        customSocialUsersConnectionRepository0.findUserIdsConnectedTo("D]To^TS|D1KJz4]Jbzu", (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialUsersConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ConnectionFactoryLocator connectionFactoryLocator0 = mock(ConnectionFactoryLocator.class, new ViolatedAssumptionAnswer());
      CustomSocialUsersConnectionRepository customSocialUsersConnectionRepository0 = new CustomSocialUsersConnectionRepository((SocialUserConnectionRepository) null, connectionFactoryLocator0);
      Connection<String> connection0 = (Connection<String>) mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((ConnectionKey) null).when(connection0).getKey();
      // Undeclared exception!
      try { 
        customSocialUsersConnectionRepository0.findUserIdsWithConnection(connection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialUsersConnectionRepository", e);
      }
  }
}
