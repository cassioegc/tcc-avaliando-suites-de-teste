/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:40:14 GMT 2021
 */

package com.unifacisa.tcc.repository;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.config.audit.AuditEventConverter;
import com.unifacisa.tcc.domain.PersistentAuditEvent;
import com.unifacisa.tcc.repository.CustomAuditEventRepository;
import com.unifacisa.tcc.repository.PersistenceAuditEventRepository;
import java.time.Instant;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.springframework.boot.actuate.audit.AuditEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CustomAuditEventRepository_ESTest extends CustomAuditEventRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<PersistentAuditEvent> linkedList0 = new LinkedList<PersistentAuditEvent>();
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(persistenceAuditEventRepository0).findByAuditEventDateAfter(any(java.time.Instant.class));
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository(persistenceAuditEventRepository0, auditEventConverter0);
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      List<AuditEvent> list0 = customAuditEventRepository0.find(date0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<PersistentAuditEvent> linkedList0 = new LinkedList<PersistentAuditEvent>();
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(persistenceAuditEventRepository0).findByAuditEventDateAfter(any(java.time.Instant.class));
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository(persistenceAuditEventRepository0, auditEventConverter0);
      MockDate mockDate0 = new MockDate((-427), (-427), (-427));
      linkedList0.offerFirst((PersistentAuditEvent) null);
      List<AuditEvent> list0 = customAuditEventRepository0.find((Date) mockDate0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<PersistentAuditEvent> linkedList0 = new LinkedList<PersistentAuditEvent>();
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(persistenceAuditEventRepository0).findByPrincipalAndAuditEventDateAfterAndAuditEventType(anyString() , any(java.time.Instant.class) , anyString());
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository(persistenceAuditEventRepository0, auditEventConverter0);
      MockDate mockDate0 = new MockDate(1, 306, 0, 1, 1, 1);
      linkedList0.add((PersistentAuditEvent) null);
      List<AuditEvent> list0 = customAuditEventRepository0.find("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank", (Date) mockDate0, "");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<PersistentAuditEvent> linkedList0 = new LinkedList<PersistentAuditEvent>();
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(persistenceAuditEventRepository0).findByPrincipalAndAuditEventDateAfter(anyString() , any(java.time.Instant.class));
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository(persistenceAuditEventRepository0, auditEventConverter0);
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      linkedList0.offerFirst((PersistentAuditEvent) null);
      List<AuditEvent> list0 = customAuditEventRepository0.find("AUTHORIZATION_FAILURE", date0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(persistenceAuditEventRepository0).findByPrincipalAndAuditEventDateAfterAndAuditEventType(anyString() , any(java.time.Instant.class) , anyString());
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository(persistenceAuditEventRepository0, (AuditEventConverter) null);
      MockDate mockDate0 = new MockDate(280L);
      // Undeclared exception!
      try { 
        customAuditEventRepository0.find("", (Date) mockDate0, "n/y@Pf/0E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomAuditEventRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository(persistenceAuditEventRepository0, (AuditEventConverter) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      AuditEvent auditEvent0 = new AuditEvent("A'THORIZATION_FAILURE", "A'THORIZATION_FAILURE", hashMap0);
      // Undeclared exception!
      try { 
        customAuditEventRepository0.add(auditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomAuditEventRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<PersistentAuditEvent> linkedList0 = new LinkedList<PersistentAuditEvent>();
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(persistenceAuditEventRepository0).findByPrincipalAndAuditEventDateAfterAndAuditEventType(anyString() , any(java.time.Instant.class) , anyString());
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository(persistenceAuditEventRepository0, auditEventConverter0);
      MockDate mockDate0 = new MockDate(1, 306, 0, 1, 1, 1);
      List<AuditEvent> list0 = customAuditEventRepository0.find("[Assertion failed] - this String argument must have text; it must not be null, empty, or blank", (Date) mockDate0, "");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository(persistenceAuditEventRepository0, (AuditEventConverter) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      AuditEvent auditEvent0 = new AuditEvent("anonymoususer", "anonymoususer", hashMap0);
      customAuditEventRepository0.add(auditEvent0);
      assertEquals("anonymoususer", auditEvent0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository(persistenceAuditEventRepository0, auditEventConverter0);
      String[] stringArray0 = new String[0];
      AuditEvent auditEvent0 = new AuditEvent("#_BZuL|", "AUTHORIZATION_FAILURE", stringArray0);
      customAuditEventRepository0.add(auditEvent0);
      assertEquals("#_BZuL|", auditEvent0.getPrincipal());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(persistenceAuditEventRepository0).findByPrincipal(anyString());
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository(persistenceAuditEventRepository0, auditEventConverter0);
      List<AuditEvent> list0 = customAuditEventRepository0.find("matcher is null", (Date) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(persistenceAuditEventRepository0).findByPrincipalAndAuditEventDateAfter(anyString() , any(java.time.Instant.class));
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository(persistenceAuditEventRepository0, auditEventConverter0);
      MockDate mockDate0 = new MockDate((-1461), (-1461), (-779), (-779), (-1));
      List<AuditEvent> list0 = customAuditEventRepository0.find((String) null, (Date) mockDate0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository((PersistenceAuditEventRepository) null, auditEventConverter0);
      MockDate mockDate0 = new MockDate(1252, (-1068), 1, 1, 1);
      // Undeclared exception!
      try { 
        customAuditEventRepository0.find("*+yu`YrF", (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomAuditEventRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      CustomAuditEventRepository customAuditEventRepository0 = new CustomAuditEventRepository((PersistenceAuditEventRepository) null, auditEventConverter0);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        customAuditEventRepository0.find((Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomAuditEventRepository", e);
      }
  }
}
