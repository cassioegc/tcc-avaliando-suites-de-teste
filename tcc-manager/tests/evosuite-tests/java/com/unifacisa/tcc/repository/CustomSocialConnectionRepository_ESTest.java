/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:22:32 GMT 2021
 */

package com.unifacisa.tcc.repository;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.domain.SocialUserConnection;
import com.unifacisa.tcc.repository.CustomSocialConnectionRepository;
import com.unifacisa.tcc.repository.SocialUserConnectionRepository;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springframework.social.connect.ApiAdapter;
import org.springframework.social.connect.Connection;
import org.springframework.social.connect.ConnectionData;
import org.springframework.social.connect.ConnectionFactoryLocator;
import org.springframework.social.connect.ConnectionKey;
import org.springframework.social.connect.support.ConnectionFactoryRegistry;
import org.springframework.social.connect.support.OAuth1Connection;
import org.springframework.social.connect.support.OAuth1ConnectionFactory;
import org.springframework.social.oauth1.OAuth1ServiceProvider;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CustomSocialConnectionRepository_ESTest extends CustomSocialConnectionRepository_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SocialUserConnection socialUserConnection0 = new SocialUserConnection();
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      doReturn(socialUserConnection0).when(socialUserConnectionRepository0).findOneByUserIdAndProviderIdAndProviderUserId(anyString() , anyString() , anyString());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      OAuth1ServiceProvider<Object> oAuth1ServiceProvider0 = (OAuth1ServiceProvider<Object>) mock(OAuth1ServiceProvider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(oAuth1ServiceProvider0).getApi(anyString() , anyString());
      ApiAdapter<Object> apiAdapter0 = (ApiAdapter<Object>) mock(ApiAdapter.class, new ViolatedAssumptionAnswer());
      OAuth1ConnectionFactory<Object> oAuth1ConnectionFactory0 = new OAuth1ConnectionFactory<Object>((String) null, oAuth1ServiceProvider0, apiAdapter0);
      connectionFactoryRegistry0.addConnectionFactory(oAuth1ConnectionFactory0);
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("nM", socialUserConnectionRepository0, connectionFactoryRegistry0);
      Long long0 = Long.valueOf(1114L);
      ConnectionData connectionData0 = new ConnectionData("nM", "", "", (String) null, "", "", (String) null, (String) null, long0);
      Object object0 = new Object();
      OAuth1ServiceProvider<Object> oAuth1ServiceProvider1 = (OAuth1ServiceProvider<Object>) mock(OAuth1ServiceProvider.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(oAuth1ServiceProvider1).getApi(anyString() , anyString());
      ApiAdapter<Object> apiAdapter1 = (ApiAdapter<Object>) mock(ApiAdapter.class, new ViolatedAssumptionAnswer());
      OAuth1Connection<Object> oAuth1Connection0 = new OAuth1Connection<Object>(connectionData0, oAuth1ServiceProvider1, apiAdapter1);
      ConnectionKey connectionKey0 = oAuth1Connection0.getKey();
      Connection<?> connection0 = customSocialConnectionRepository0.getConnection(connectionKey0);
      assertFalse(connection0.hasExpired());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("~9oXQ4r`4O@+{_|'s", socialUserConnectionRepository0, connectionFactoryRegistry0);
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.updateConnection((Connection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("xX5b", (SocialUserConnectionRepository) null, connectionFactoryRegistry0);
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.removeConnections("com.unifacisa.tcc.repository.CustomSocialConnectionRepository");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("", (SocialUserConnectionRepository) null, (ConnectionFactoryLocator) null);
      OAuth1ServiceProvider<Object> oAuth1ServiceProvider0 = (OAuth1ServiceProvider<Object>) mock(OAuth1ServiceProvider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(oAuth1ServiceProvider0).getApi(anyString() , anyString());
      ApiAdapter<Object> apiAdapter0 = (ApiAdapter<Object>) mock(ApiAdapter.class, new ViolatedAssumptionAnswer());
      OAuth1Connection<Object> oAuth1Connection0 = new OAuth1Connection<Object>("com.codahale.metrics.Histogram", "x d]|QGVfm,e[F$9x", "x d]|QGVfm,e[F$9x", (String) null, oAuth1ServiceProvider0, apiAdapter0);
      ConnectionKey connectionKey0 = oAuth1Connection0.getKey();
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.removeConnection(connectionKey0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("", socialUserConnectionRepository0, (ConnectionFactoryLocator) null);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.getPrimaryConnection(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      doReturn((SocialUserConnection) null).when(socialUserConnectionRepository0).findOneByUserIdAndProviderIdAndProviderUserId(anyString() , anyString() , anyString());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("g1QCaho]|[t{\"", socialUserConnectionRepository0, connectionFactoryRegistry0);
      ConnectionKey connectionKey0 = new ConnectionKey("g1QCaho]|[t{\"", "g1QCaho]|[t{\"");
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.getConnection(connectionKey0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No such connection exists with key g1QCaho]|[t{\":g1QCaho]|[t{\"
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("", socialUserConnectionRepository0, connectionFactoryRegistry0);
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.getConnection((ConnectionKey) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "com.unifacisa.tcc.repository.CustomSocialConnectionRepository";
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(socialUserConnectionRepository0).findAllByUserIdAndProviderIdOrderByRankAsc(anyString() , anyString());
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", socialUserConnectionRepository0, (ConnectionFactoryLocator) null);
      Class<SocialUserConnection> class0 = SocialUserConnection.class;
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.findConnections("com.unifacisa.tcc.repository.CustomSocialConnectionRepository");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("", socialUserConnectionRepository0, connectionFactoryRegistry0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.findPrimaryConnection(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No connection factory for API [java.lang.Object] is registered
         //
         verifyException("org.springframework.social.connect.support.ConnectionFactoryRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("", (SocialUserConnectionRepository) null, (ConnectionFactoryLocator) null);
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.findAllConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<SocialUserConnection> linkedList0 = new LinkedList<SocialUserConnection>();
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(socialUserConnectionRepository0).findAllByUserIdOrderByProviderIdAscRankAsc(anyString());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      Long long0 = new Long(319L);
      SocialUserConnection socialUserConnection0 = new SocialUserConnection(")a~Pt{esfo=-z`7\"'B", "", "com.codahale.metrics.Histogram", long0, "", "Y=u", "", "", "", "", long0);
      linkedList0.push(socialUserConnection0);
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository(")a~Pt{esfo=-z`7\"'B", socialUserConnectionRepository0, connectionFactoryRegistry0);
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.findAllConnections();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No connection factory for service provider '' is registered
         //
         verifyException("org.springframework.social.connect.support.ConnectionFactoryRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository((String) null, socialUserConnectionRepository0, connectionFactoryRegistry0);
      LinkedMultiValueMap<String, String> linkedMultiValueMap0 = new LinkedMultiValueMap<String, String>(334);
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.findConnectionsToUsers(linkedMultiValueMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to execute find: no providerUsers provided
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("C,12?fnG", socialUserConnectionRepository0, connectionFactoryRegistry0);
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.findConnectionsToUsers((MultiValueMap<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unable to execute find: no providerUsers provided
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(socialUserConnectionRepository0).findAllByUserIdOrderByProviderIdAscRankAsc(anyString());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      String string0 = "com.unifacisa.tcc.repository.CustomSocialConnectionRepository";
      OAuth1ServiceProvider<String> oAuth1ServiceProvider0 = (OAuth1ServiceProvider<String>) mock(OAuth1ServiceProvider.class, new ViolatedAssumptionAnswer());
      ApiAdapter<String> apiAdapter0 = (ApiAdapter<String>) mock(ApiAdapter.class, new ViolatedAssumptionAnswer());
      OAuth1ConnectionFactory<String> oAuth1ConnectionFactory0 = new OAuth1ConnectionFactory<String>("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", oAuth1ServiceProvider0, apiAdapter0);
      connectionFactoryRegistry0.addConnectionFactory(oAuth1ConnectionFactory0);
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("location", socialUserConnectionRepository0, connectionFactoryRegistry0);
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.findAllConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(socialUserConnectionRepository0).findAllByUserIdOrderByProviderIdAscRankAsc(anyString());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository(")a~Pt{esfo=-z`7\"'B", socialUserConnectionRepository0, connectionFactoryRegistry0);
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.findAllConnections();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("Unable to execute find: no providerUsers provided", socialUserConnectionRepository0, connectionFactoryRegistry0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.getConnection(class0, "||MKw~|^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No connection factory for API [java.lang.Integer] is registered
         //
         verifyException("org.springframework.social.connect.support.ConnectionFactoryRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(socialUserConnectionRepository0).findAllByUserIdAndProviderIdAndProviderUserIdIn(anyString() , anyString() , anyList());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository(")a~Pt{esfo=-z`7\"'B", socialUserConnectionRepository0, connectionFactoryRegistry0);
      Hashtable<String, List<String>> hashtable0 = new Hashtable<String, List<String>>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>(hashtable0);
      LinkedMultiValueMap<String, String> linkedMultiValueMap0 = new LinkedMultiValueMap<String, String>(hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedMultiValueMap0.put("", (List<String>) linkedList0);
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.findConnectionsToUsers(linkedMultiValueMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("Unable to execute find: no providerUsers provided", socialUserConnectionRepository0, connectionFactoryRegistry0);
      customSocialConnectionRepository0.removeConnections("Unable to execute find: no providerUsers provided");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SocialUserConnection socialUserConnection0 = new SocialUserConnection();
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      doReturn(socialUserConnection0).when(socialUserConnectionRepository0).findOneByUserIdAndProviderIdAndProviderUserId(anyString() , anyString() , anyString());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("nM", socialUserConnectionRepository0, connectionFactoryRegistry0);
      Long long0 = Long.valueOf(1114L);
      ConnectionData connectionData0 = new ConnectionData("nM", "nM", "nM", "nM", "nM", "nM", "nM", "nM", long0);
      Object object0 = new Object();
      OAuth1ServiceProvider<Object> oAuth1ServiceProvider0 = (OAuth1ServiceProvider<Object>) mock(OAuth1ServiceProvider.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(oAuth1ServiceProvider0).getApi(anyString() , anyString());
      ApiAdapter<Object> apiAdapter0 = (ApiAdapter<Object>) mock(ApiAdapter.class, new ViolatedAssumptionAnswer());
      OAuth1Connection<Object> oAuth1Connection0 = new OAuth1Connection<Object>(connectionData0, oAuth1ServiceProvider0, apiAdapter0);
      ConnectionKey connectionKey0 = oAuth1Connection0.getKey();
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.getConnection(connectionKey0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No connection factory for service provider 'null' is registered
         //
         verifyException("org.springframework.social.connect.support.ConnectionFactoryRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("Unable to execute find: no providerUsers provided", socialUserConnectionRepository0, connectionFactoryRegistry0);
      OAuth1ServiceProvider<Object> oAuth1ServiceProvider0 = (OAuth1ServiceProvider<Object>) mock(OAuth1ServiceProvider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(oAuth1ServiceProvider0).getApi(anyString() , anyString());
      ApiAdapter<Object> apiAdapter0 = (ApiAdapter<Object>) mock(ApiAdapter.class, new ViolatedAssumptionAnswer());
      OAuth1Connection<Object> oAuth1Connection0 = new OAuth1Connection<Object>("", "Unable to execute find: no providerUsers provided", "P'", "P'", oAuth1ServiceProvider0, apiAdapter0);
      ConnectionKey connectionKey0 = oAuth1Connection0.getKey();
      customSocialConnectionRepository0.removeConnection(connectionKey0);
      assertEquals("", connectionKey0.getProviderId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository(".", socialUserConnectionRepository0, (ConnectionFactoryLocator) null);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.findConnections(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository((String) null, (SocialUserConnectionRepository) null, connectionFactoryRegistry0);
      // Undeclared exception!
      try { 
        customSocialConnectionRepository0.addConnection((Connection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.repository.CustomSocialConnectionRepository", e);
      }
  }
}
