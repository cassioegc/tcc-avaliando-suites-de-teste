/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:46:03 GMT 2021
 */

package com.unifacisa.tcc.web.rest.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.web.rest.util.PaginationUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpHeaders;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PaginationUtil_ESTest extends PaginationUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Page<Integer> page0 = (Page<Integer>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn((long)32).when(page0).getTotalElements();
      doReturn((-760), (-678)).when(page0).getTotalPages();
      doReturn((-410), (-3806)).when(page0).getNumber();
      doReturn(351, (-805)).when(page0).getSize();
      HttpHeaders httpHeaders0 = PaginationUtil.generatePaginationHttpHeaders(page0, "");
      assertFalse(httpHeaders0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Page<String> page0 = (Page<String>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn((-3379L)).when(page0).getTotalElements();
      doReturn(1, 1491, 0).when(page0).getTotalPages();
      doReturn(0, 1, 0).when(page0).getNumber();
      doReturn((-3013), 1, 0).when(page0).getSize();
      HttpHeaders httpHeaders0 = PaginationUtil.generatePaginationHttpHeaders(page0, "Accept-Charset");
      assertFalse(httpHeaders0.getAccessControlAllowCredentials());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        PaginationUtil.generatePaginationHttpHeaders((Page) null, "Cookie");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.util.PaginationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Page<String> page0 = (Page<String>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(page0).getTotalElements();
      doReturn(0, 0).when(page0).getTotalPages();
      doReturn(0, 0).when(page0).getNumber();
      doReturn(0).when(page0).getSize();
      // Undeclared exception!
      try { 
        PaginationUtil.generatePaginationHttpHeaders(page0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Page<Integer> page0 = (Page<Integer>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn(2585L).when(page0).getTotalElements();
      doReturn(1491, (-3013)).when(page0).getTotalPages();
      doReturn(726, (-5094), 0).when(page0).getNumber();
      doReturn(726, (-5094), 0).when(page0).getSize();
      HttpHeaders httpHeaders0 = PaginationUtil.generatePaginationHttpHeaders(page0, ".m");
      assertEquals((-1L), httpHeaders0.getAccessControlMaxAge());
  }
}
