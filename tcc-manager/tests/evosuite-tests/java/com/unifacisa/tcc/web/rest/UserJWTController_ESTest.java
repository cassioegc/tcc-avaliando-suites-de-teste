/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 02:00:13 GMT 2021
 */

package com.unifacisa.tcc.web.rest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.security.jwt.TokenProvider;
import com.unifacisa.tcc.web.rest.UserJWTController;
import com.unifacisa.tcc.web.rest.vm.LoginVM;
import io.github.jhipster.config.JHipsterProperties;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserJWTController_ESTest extends UserJWTController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TokenProvider tokenProvider0 = mock(TokenProvider.class, new ViolatedAssumptionAnswer());
      doReturn("\" for \"").when(tokenProvider0).createToken(any(org.springframework.security.core.Authentication.class) , anyBoolean());
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = new UsernamePasswordAuthenticationToken("\" for \"", (Object) null);
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      doReturn(usernamePasswordAuthenticationToken0).when(authenticationManager0).authenticate(any(org.springframework.security.core.Authentication.class));
      UserJWTController userJWTController0 = new UserJWTController(tokenProvider0, authenticationManager0);
      LoginVM loginVM0 = mock(LoginVM.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(loginVM0).getPassword();
      doReturn((String) null).when(loginVM0).getUsername();
      doReturn((Boolean) null).when(loginVM0).isRememberMe();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      ResponseEntity responseEntity0 = userJWTController0.authorize(loginVM0, httpServletResponse0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserJWTController.JWTToken userJWTController_JWTToken0 = new UserJWTController.JWTToken((String) null);
      Integer integer0 = Integer.valueOf((-2947));
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = new UsernamePasswordAuthenticationToken(userJWTController_JWTToken0, integer0);
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      doReturn(usernamePasswordAuthenticationToken0).when(authenticationManager0).authenticate(any(org.springframework.security.core.Authentication.class));
      LoginVM loginVM0 = new LoginVM();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      TokenProvider tokenProvider0 = new TokenProvider(jHipsterProperties0);
      Injector.executePostConstruct((Object) tokenProvider0, (Class<?>) TokenProvider.class);
      UserJWTController userJWTController0 = new UserJWTController(tokenProvider0, authenticationManager0);
      // Undeclared exception!
      try { 
        userJWTController0.authorize(loginVM0, httpServletResponse0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64-encoded secret key cannot be null or empty.
         //
         verifyException("io.jsonwebtoken.lang.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      TokenProvider tokenProvider0 = new TokenProvider(jHipsterProperties0);
      Injector.executePostConstruct((Object) tokenProvider0, (Class<?>) TokenProvider.class);
      QName qName0 = new QName((String) null);
      BeanElement beanElement0 = new BeanElement(qName0);
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
      ProviderManager providerManager0 = new ProviderManager(beanAttributeList0);
      UserJWTController userJWTController0 = new UserJWTController(tokenProvider0, providerManager0);
      LoginVM loginVM0 = new LoginVM();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      // Undeclared exception!
      try { 
        userJWTController0.authorize(loginVM0, httpServletResponseWrapper0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.dom4j.bean.BeanAttribute cannot be cast to org.springframework.security.authentication.AuthenticationProvider
         //
         verifyException("org.springframework.security.authentication.ProviderManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TokenProvider tokenProvider0 = mock(TokenProvider.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tokenProvider0).createToken(any(org.springframework.security.core.Authentication.class) , anyBoolean());
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      doReturn((Authentication) null).when(authenticationManager0).authenticate(any(org.springframework.security.core.Authentication.class));
      UserJWTController userJWTController0 = new UserJWTController(tokenProvider0, authenticationManager0);
      LoginVM loginVM0 = mock(LoginVM.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(loginVM0).getPassword();
      doReturn((String) null).when(loginVM0).getUsername();
      doReturn((Boolean) null).when(loginVM0).isRememberMe();
      // Undeclared exception!
      try { 
        userJWTController0.authorize(loginVM0, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.UserJWTController", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserJWTController.JWTToken userJWTController_JWTToken0 = new UserJWTController.JWTToken("");
      String string0 = userJWTController_JWTToken0.getIdToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UserJWTController.JWTToken userJWTController_JWTToken0 = new UserJWTController.JWTToken("");
      userJWTController_JWTToken0.setIdToken("");
  }
}
