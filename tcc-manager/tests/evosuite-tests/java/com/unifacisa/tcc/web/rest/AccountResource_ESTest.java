/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:28:49 GMT 2021
 */

package com.unifacisa.tcc.web.rest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.domain.User;
import com.unifacisa.tcc.repository.AuthorityRepository;
import com.unifacisa.tcc.repository.UserRepository;
import com.unifacisa.tcc.service.MailService;
import com.unifacisa.tcc.service.SocialService;
import com.unifacisa.tcc.service.UserService;
import com.unifacisa.tcc.service.dto.UserDTO;
import com.unifacisa.tcc.web.rest.AccountResource;
import com.unifacisa.tcc.web.rest.vm.KeyAndPasswordVM;
import com.unifacisa.tcc.web.rest.vm.ManagedUserVM;
import io.github.jhipster.config.JHipsterProperties;
import io.undertow.servlet.api.DeploymentInfo;
import java.nio.CharBuffer;
import java.time.Instant;
import java.util.Optional;
import java.util.Set;
import javax.cache.CacheManager;
import javax.servlet.http.HttpServletRequest;
import javax.swing.text.Segment;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGSimpleDataSource;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;
import org.springframework.cache.guava.GuavaCacheManager;
import org.springframework.cache.jcache.JCacheCacheManager;
import org.springframework.cache.support.SimpleCacheManager;
import org.springframework.cache.transaction.TransactionAwareCacheManagerProxy;
import org.springframework.context.MessageSource;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.context.support.StaticApplicationContext;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.security.crypto.encrypt.TextEncryptor;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;
import org.springframework.security.crypto.password.StandardPasswordEncoder;
import org.springframework.social.connect.UsersConnectionRepository;
import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;
import org.springframework.social.connect.mem.InMemoryUsersConnectionRepository;
import org.springframework.social.connect.support.ConnectionFactoryRegistry;
import org.springframework.social.security.SocialAuthenticationServiceRegistry;
import org.springframework.web.context.support.GenericWebApplicationContext;
import org.thymeleaf.spring4.SpringTemplateEngine;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AccountResource_ESTest extends AccountResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneByEmail(anyString());
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder();
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      TransactionAwareCacheManagerProxy transactionAwareCacheManagerProxy0 = new TransactionAwareCacheManagerProxy();
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, (SocialService) null, authorityRepository0, transactionAwareCacheManagerProxy0);
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      StaticApplicationContext staticApplicationContext0 = new StaticApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, staticApplicationContext0, springTemplateEngine0);
      AccountResource accountResource0 = new AccountResource(userRepository0, userService0, mailService0);
      // Undeclared exception!
      try { 
        accountResource0.requestPasswordReset("BITOR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneWithAuthoritiesByLogin(anyString());
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder();
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      CacheManager cacheManager0 = mock(CacheManager.class, new ViolatedAssumptionAnswer());
      JCacheCacheManager jCacheCacheManager0 = new JCacheCacheManager(cacheManager0);
      UserService userService0 = new UserService(userRepository0, standardPasswordEncoder0, (SocialService) null, authorityRepository0, jCacheCacheManager0);
      AccountResource accountResource0 = new AccountResource(userRepository0, userService0, (MailService) null);
      ResponseEntity<UserDTO> responseEntity0 = accountResource0.getAccount();
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneByResetKey(anyString());
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      SocialAuthenticationServiceRegistry socialAuthenticationServiceRegistry0 = new SocialAuthenticationServiceRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(socialAuthenticationServiceRegistry0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      GenericWebApplicationContext genericWebApplicationContext0 = new GenericWebApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, genericWebApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, passwordEncoder0, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      stringArray0[0] = "messageSource";
      stringArray0[1] = "smtp";
      stringArray0[2] = "th";
      ConcurrentMapCacheManager concurrentMapCacheManager0 = new ConcurrentMapCacheManager(stringArray0);
      UserService userService0 = new UserService(userRepository0, passwordEncoder0, socialService0, authorityRepository1, concurrentMapCacheManager0);
      AccountResource accountResource0 = new AccountResource(userRepository0, userService0, mailService0);
      KeyAndPasswordVM keyAndPasswordVM0 = new KeyAndPasswordVM();
      keyAndPasswordVM0.setNewPassword(">Ch>");
      ResponseEntity<String> responseEntity0 = accountResource0.finishPasswordReset(keyAndPasswordVM0);
      assertEquals(500, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneByActivationKey(anyString());
      Segment segment0 = new Segment();
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder(segment0, 1900, 0);
      SocialAuthenticationServiceRegistry socialAuthenticationServiceRegistry0 = new SocialAuthenticationServiceRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(socialAuthenticationServiceRegistry0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, (MessageSource) null, springTemplateEngine0);
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, pbkdf2PasswordEncoder0, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SimpleCacheManager simpleCacheManager0 = new SimpleCacheManager();
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, socialService0, authorityRepository1, simpleCacheManager0);
      AccountResource accountResource0 = new AccountResource(userRepository0, userService0, mailService0);
      // Undeclared exception!
      try { 
        accountResource0.activateAccount("smtp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder(stringBuffer0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(jdbcDataSource0, connectionFactoryRegistry0, textEncryptor0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, (MessageSource) null, springTemplateEngine0);
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, standardPasswordEncoder0, (UserRepository) null, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JCacheCacheManager jCacheCacheManager0 = new JCacheCacheManager();
      UserService userService0 = new UserService((UserRepository) null, standardPasswordEncoder0, socialService0, authorityRepository1, jCacheCacheManager0);
      AccountResource accountResource0 = new AccountResource((UserRepository) null, userService0, mailService0);
      UserDTO userDTO0 = new UserDTO();
      // Undeclared exception!
      try { 
        accountResource0.saveAccount(userDTO0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.AccountResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneByLogin(anyString());
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      ReloadableResourceBundleMessageSource reloadableResourceBundleMessageSource0 = new ReloadableResourceBundleMessageSource();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, reloadableResourceBundleMessageSource0, springTemplateEngine0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "smtp";
      stringArray0[1] = "org.thymeleaf.TemplateEngine.TIMER";
      stringArray0[2] = "org.thymeleaf.TemplateEngine.TIMER";
      stringArray0[3] = "smtp";
      ConcurrentMapCacheManager concurrentMapCacheManager0 = new ConcurrentMapCacheManager(stringArray0);
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder("org.thymeleaf.TemplateEngine.TIMER");
      SocialService socialService0 = new SocialService((UsersConnectionRepository) null, authorityRepository1, standardPasswordEncoder0, userRepository0, mailService0);
      UserService userService0 = new UserService(userRepository0, standardPasswordEncoder0, socialService0, authorityRepository0, concurrentMapCacheManager0);
      AccountResource accountResource0 = new AccountResource(userRepository0, userService0, mailService0);
      Long long0 = new Long(2864);
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      Set<String> set0 = deploymentInfo0.getSecurityRoles();
      ManagedUserVM managedUserVM0 = new ManagedUserVM(long0, "=R%i;gW0xD&GwbCq#Aw", "Oracle", "", "", "smtp", false, "", "smtp", "", instant0, (String) null, instant0, set0);
      // Undeclared exception!
      try { 
        accountResource0.registerAccount(managedUserVM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.AccountResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      GenericApplicationContext genericApplicationContext0 = new GenericApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, genericApplicationContext0, springTemplateEngine0);
      AccountResource accountResource0 = new AccountResource(userRepository0, (UserService) null, mailService0);
      // Undeclared exception!
      try { 
        accountResource0.changePassword("messageSource");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.AccountResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder();
      PGSimpleDataSource pGSimpleDataSource0 = new PGSimpleDataSource();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(pGSimpleDataSource0, connectionFactoryRegistry0, textEncryptor0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, pbkdf2PasswordEncoder0, userRepository0, (MailService) null);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      TransactionAwareCacheManagerProxy transactionAwareCacheManagerProxy0 = new TransactionAwareCacheManagerProxy();
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, socialService0, authorityRepository1, transactionAwareCacheManagerProxy0);
      AccountResource accountResource0 = new AccountResource(userRepository0, userService0, (MailService) null);
      KeyAndPasswordVM keyAndPasswordVM0 = new KeyAndPasswordVM();
      ResponseEntity<String> responseEntity0 = accountResource0.finishPasswordReset(keyAndPasswordVM0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, (MessageSource) null, springTemplateEngine0);
      AccountResource accountResource0 = new AccountResource(userRepository0, (UserService) null, mailService0);
      KeyAndPasswordVM keyAndPasswordVM0 = new KeyAndPasswordVM();
      keyAndPasswordVM0.setNewPassword("%STANDARD_INLINER%");
      // Undeclared exception!
      try { 
        accountResource0.finishPasswordReset(keyAndPasswordVM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.AccountResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional<User>) null).when(userRepository0).findOneByLogin(anyString());
      SocialAuthenticationServiceRegistry socialAuthenticationServiceRegistry0 = new SocialAuthenticationServiceRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(socialAuthenticationServiceRegistry0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      GenericApplicationContext genericApplicationContext0 = new GenericApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, (JavaMailSender) null, genericApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, (PasswordEncoder) null, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      GuavaCacheManager guavaCacheManager0 = new GuavaCacheManager();
      UserService userService0 = new UserService(userRepository0, (PasswordEncoder) null, socialService0, authorityRepository1, guavaCacheManager0);
      AccountResource accountResource0 = new AccountResource(userRepository0, userService0, mailService0);
      ResponseEntity responseEntity0 = accountResource0.changePassword("org.thymeleaf.TemplateEngine.TIMER");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional<User>) null).when(userRepository0).findOneByEmail(anyString());
      doReturn((Optional) null).when(userRepository0).findOneByLogin(anyString());
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder();
      PGSimpleDataSource pGSimpleDataSource0 = new PGSimpleDataSource();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(pGSimpleDataSource0, connectionFactoryRegistry0, textEncryptor0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, pbkdf2PasswordEncoder0, userRepository0, (MailService) null);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      TransactionAwareCacheManagerProxy transactionAwareCacheManagerProxy0 = new TransactionAwareCacheManagerProxy();
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, socialService0, authorityRepository1, transactionAwareCacheManagerProxy0);
      AccountResource accountResource0 = new AccountResource(userRepository0, userService0, (MailService) null);
      ManagedUserVM managedUserVM0 = new ManagedUserVM();
      ResponseEntity responseEntity0 = accountResource0.saveAccount(managedUserVM0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder();
      PGSimpleDataSource pGSimpleDataSource0 = new PGSimpleDataSource();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(pGSimpleDataSource0, connectionFactoryRegistry0, textEncryptor0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, pbkdf2PasswordEncoder0, userRepository0, (MailService) null);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      TransactionAwareCacheManagerProxy transactionAwareCacheManagerProxy0 = new TransactionAwareCacheManagerProxy();
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, socialService0, authorityRepository1, transactionAwareCacheManagerProxy0);
      AccountResource accountResource0 = new AccountResource(userRepository0, userService0, (MailService) null);
      ManagedUserVM managedUserVM0 = new ManagedUserVM();
      ResponseEntity responseEntity0 = accountResource0.registerAccount(managedUserVM0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      AccountResource accountResource0 = new AccountResource(userRepository0, (UserService) null, (MailService) null);
      // Undeclared exception!
      try { 
        accountResource0.getAccount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.AccountResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      UserRepository userRepository1 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      StringBuilder stringBuilder0 = new StringBuilder();
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder(stringBuilder0);
      SocialAuthenticationServiceRegistry socialAuthenticationServiceRegistry0 = new SocialAuthenticationServiceRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(socialAuthenticationServiceRegistry0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, pbkdf2PasswordEncoder0, userRepository0, (MailService) null);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      UserService userService0 = new UserService(userRepository1, pbkdf2PasswordEncoder0, socialService0, authorityRepository1, (org.springframework.cache.CacheManager) null);
      AccountResource accountResource0 = new AccountResource(userRepository0, userService0, (MailService) null);
      // Undeclared exception!
      try { 
        accountResource0.isAuthenticated((HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.AccountResource", e);
      }
  }
}
