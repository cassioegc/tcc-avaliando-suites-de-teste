/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 02:10:34 GMT 2021
 */

package com.unifacisa.tcc.web.rest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.config.audit.AuditEventConverter;
import com.unifacisa.tcc.domain.PersistentAuditEvent;
import com.unifacisa.tcc.repository.PersistenceAuditEventRepository;
import com.unifacisa.tcc.service.AuditEventService;
import com.unifacisa.tcc.web.rest.AuditResource;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;
import org.springframework.boot.actuate.audit.AuditEvent;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AuditResource_ESTest extends AuditResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(persistenceAuditEventRepository0).findAllByAuditEventDateBetween(any(java.time.Instant.class) , any(java.time.Instant.class) , any(org.springframework.data.domain.Pageable.class));
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService(persistenceAuditEventRepository0, auditEventConverter0);
      AuditResource auditResource0 = new AuditResource(auditEventService0);
      Period period0 = Period.of((-2636), (-2636), 2795);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2795);
      LocalDate localDate1 = MockLocalDate.now((ZoneId) zoneOffset0);
      PageRequest pageRequest0 = new PageRequest(3262, 29);
      // Undeclared exception!
      try { 
        auditResource0.getByDates(localDate0, localDate1, pageRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.AuditEventService", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Page<Object> page0 = (Page<Object>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(page0).getTotalElements();
      doReturn(0, 0).when(page0).getTotalPages();
      doReturn((List) null).when(page0).getContent();
      doReturn(0, 0).when(page0).getNumber();
      doReturn(0, 0).when(page0).getSize();
      Page<PersistentAuditEvent> page1 = (Page<PersistentAuditEvent>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(page1).map(nullable(org.springframework.core.convert.converter.Converter.class));
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(page1).when(persistenceAuditEventRepository0).findAllByAuditEventDateBetween(any(java.time.Instant.class) , any(java.time.Instant.class) , any(org.springframework.data.domain.Pageable.class));
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService(persistenceAuditEventRepository0, auditEventConverter0);
      AuditResource auditResource0 = new AuditResource(auditEventService0);
      Period period0 = Period.of((-2636), (-2636), 2795);
      period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2795);
      ZoneId zoneId0 = zoneOffset0.normalized();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      Sort.Direction sort_Direction0 = Sort.Direction.ASC;
      String[] stringArray0 = new String[2];
      ZoneId.from(zoneOffset0);
      stringArray0[0] = "oFKGRychM";
      stringArray0[1] = "lcr0 !1@d1a-6MEyAQ";
      PageRequest pageRequest0 = new PageRequest(2795, 2795, sort_Direction0, stringArray0);
      auditResource0.getByDates(localDate0, localDate0, pageRequest0);
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      // Undeclared exception!
      try { 
        auditEventConverter0.convertToAuditEvent(persistentAuditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Page<Object> page0 = (Page<Object>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn(3654L).when(page0).getTotalElements();
      doReturn(30, 30, 0).when(page0).getTotalPages();
      doReturn((List<Object>) null).when(page0).getContent();
      doReturn(0, 0, 0).when(page0).getNumber();
      doReturn(0, 0, 0).when(page0).getSize();
      Page<PersistentAuditEvent> page1 = (Page<PersistentAuditEvent>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(page1).map(nullable(org.springframework.core.convert.converter.Converter.class));
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(page1).when(persistenceAuditEventRepository0).findAll(any(org.springframework.data.domain.Pageable.class));
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService(persistenceAuditEventRepository0, auditEventConverter0);
      AuditResource auditResource0 = new AuditResource(auditEventService0);
      PageRequest pageRequest0 = new PageRequest(90, 90);
      ResponseEntity<List<AuditEvent>> responseEntity0 = auditResource0.getAll(pageRequest0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Page<PersistentAuditEvent> page0 = (Page<PersistentAuditEvent>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(page0).getTotalElements();
      doReturn(0, 0).when(page0).getTotalPages();
      doReturn((List) null).when(page0).getContent();
      doReturn(0, 0).when(page0).getNumber();
      doReturn(0, 0).when(page0).getSize();
      Page<PersistentAuditEvent> page1 = (Page<PersistentAuditEvent>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(page1).map(nullable(org.springframework.core.convert.converter.Converter.class));
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(page1).when(persistenceAuditEventRepository0).findAll(any(org.springframework.data.domain.Pageable.class));
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService(persistenceAuditEventRepository0, auditEventConverter0);
      AuditResource auditResource0 = new AuditResource(auditEventService0);
      PageRequest pageRequest0 = new PageRequest(1586, 1586);
      ResponseEntity<List<AuditEvent>> responseEntity0 = auditResource0.getAll(pageRequest0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService((PersistenceAuditEventRepository) null, auditEventConverter0);
      AuditResource auditResource0 = new AuditResource(auditEventService0);
      Long long0 = new Long(2747L);
      // Undeclared exception!
      try { 
        auditResource0.get(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.AuditEventService", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      PersistentAuditEvent persistentAuditEvent0 = mock(PersistentAuditEvent.class, new ViolatedAssumptionAnswer());
      doReturn(instant0).when(persistentAuditEvent0).getAuditEventDate();
      doReturn((String) null).when(persistentAuditEvent0).getAuditEventType();
      doReturn((Map) null).when(persistentAuditEvent0).getData();
      doReturn((String) null).when(persistentAuditEvent0).getPrincipal();
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(persistentAuditEvent0).when(persistenceAuditEventRepository0).findOne(anyLong());
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService(persistenceAuditEventRepository0, auditEventConverter0);
      AuditResource auditResource0 = new AuditResource(auditEventService0);
      Long long0 = new Long((-1L));
      // Undeclared exception!
      try { 
        auditResource0.get(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Principal must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(persistenceAuditEventRepository0).findOne(anyLong());
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService(persistenceAuditEventRepository0, auditEventConverter0);
      AuditResource auditResource0 = new AuditResource(auditEventService0);
      Long long0 = new Long((-1L));
      ResponseEntity<AuditEvent> responseEntity0 = auditResource0.get(long0);
      assertFalse(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AuditEventService auditEventService0 = mock(AuditEventService.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(auditEventService0).findAll(any(org.springframework.data.domain.Pageable.class));
      AuditResource auditResource0 = new AuditResource(auditEventService0);
      // Undeclared exception!
      try { 
        auditResource0.getAll((Pageable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.util.PaginationUtil", e);
      }
  }
}
