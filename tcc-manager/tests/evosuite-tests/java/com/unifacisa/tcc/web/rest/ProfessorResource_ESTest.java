/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:55:30 GMT 2021
 */

package com.unifacisa.tcc.web.rest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.domain.Professor;
import com.unifacisa.tcc.repository.ProfessorRepository;
import com.unifacisa.tcc.web.rest.ProfessorResource;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ProfessorResource_ESTest extends ProfessorResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Professor professor0 = new Professor();
      Long long0 = new Long(0L);
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn(professor0).when(professorRepository0).findOne(anyLong());
      ProfessorResource professorResource0 = new ProfessorResource(professorRepository0);
      ResponseEntity<Professor> responseEntity0 = professorResource0.getProfessor(long0);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Professor>) null).when(professorRepository0).findAll();
      ProfessorResource professorResource0 = new ProfessorResource(professorRepository0);
      List<Professor> list0 = professorResource0.getAllProfessors();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ProfessorResource professorResource0 = new ProfessorResource((ProfessorRepository) null);
      Professor professor0 = mock(Professor.class, new ViolatedAssumptionAnswer());
      Professor professor1 = mock(Professor.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(professor1).getId();
      // Undeclared exception!
      try {
        professorResource0.createProfessor(professor1);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.ProfessorResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ProfessorRepository professorRepository0 = mock(ProfessorRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(professorRepository0).findOne(anyLong());
      ProfessorResource professorResource0 = new ProfessorResource(professorRepository0);
      Long long0 = new Long((-1221L));
      ResponseEntity<Professor> responseEntity0 = professorResource0.getProfessor(long0);
      assertEquals(404, responseEntity0.getStatusCodeValue());
  }
}
