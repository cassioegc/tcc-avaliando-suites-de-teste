/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 02:07:18 GMT 2021
 */

package com.unifacisa.tcc.web.rest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.web.rest.LogsResource;
import com.unifacisa.tcc.web.rest.vm.LoggerVM;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class LogsResource_ESTest extends LogsResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LogsResource logsResource0 = new LogsResource();
      LoggerVM loggerVM0 = mock(LoggerVM.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(loggerVM0).getLevel();
      doReturn("|_HAG]7/J").when(loggerVM0).getName();
      logsResource0.changeLevel(loggerVM0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LogsResource logsResource0 = new LogsResource();
      // Undeclared exception!
      try {
        logsResource0.changeLevel((LoggerVM) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.LogsResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LogsResource logsResource0 = new LogsResource();
      LoggerVM loggerVM0 = mock(LoggerVM.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(loggerVM0).getName();
      // Undeclared exception!
      try {
        logsResource0.changeLevel(loggerVM0);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // name argument cannot be null
         //
         verifyException("ch.qos.logback.classic.LoggerContext", e);
      }
  }
  
}
