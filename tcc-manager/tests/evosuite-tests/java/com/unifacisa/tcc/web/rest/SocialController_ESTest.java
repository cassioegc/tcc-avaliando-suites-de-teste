/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 02:15:09 GMT 2021
 */

package com.unifacisa.tcc.web.rest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.unifacisa.tcc.service.SocialService;
import com.unifacisa.tcc.web.rest.SocialController;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springframework.social.connect.Connection;
import org.springframework.social.connect.ConnectionKey;
import org.springframework.social.connect.web.ProviderSignInUtils;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.view.RedirectView;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SocialController_ESTest extends SocialController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SocialService socialService0 = mock(SocialService.class, new ViolatedAssumptionAnswer());
      ConnectionKey connectionKey0 = mock(ConnectionKey.class, new ViolatedAssumptionAnswer());
      doReturn("").when(connectionKey0).getProviderId();
      Connection<Object> connection0 = (Connection<Object>) mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn(connectionKey0).when(connection0).getKey();
      ProviderSignInUtils providerSignInUtils0 = mock(ProviderSignInUtils.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(providerSignInUtils0).getConnectionFromSession(any(org.springframework.web.context.request.RequestAttributes.class));
      SocialController socialController0 = new SocialController(socialService0, providerSignInUtils0);
      WebRequest webRequest0 = mock(WebRequest.class, new ViolatedAssumptionAnswer());
      RedirectView redirectView0 = socialController0.signUp(webRequest0, "LENGTH_REQUIRED");
      assertEquals("/#/social-register/?success=true", redirectView0.getUrl());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SocialService socialService0 = mock(SocialService.class, new ViolatedAssumptionAnswer());
      Connection<String> connection0 = (Connection<String>) mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((ConnectionKey) null).when(connection0).getKey();
      ProviderSignInUtils providerSignInUtils0 = mock(ProviderSignInUtils.class, new ViolatedAssumptionAnswer());
      doReturn(connection0).when(providerSignInUtils0).getConnectionFromSession(any(org.springframework.web.context.request.RequestAttributes.class));
      SocialController socialController0 = new SocialController(socialService0, providerSignInUtils0);
      WebRequest webRequest0 = mock(WebRequest.class, new ViolatedAssumptionAnswer());
      RedirectView redirectView0 = socialController0.signUp(webRequest0, "Q^RO 6l5(-scYyY");
      assertEquals("/#/social-register/no-provider?success=false", redirectView0.getUrl());
  }
}
