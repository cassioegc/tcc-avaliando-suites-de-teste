/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:33:45 GMT 2021
 */

package com.unifacisa.tcc.web.rest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.domain.User;
import com.unifacisa.tcc.repository.AuthorityRepository;
import com.unifacisa.tcc.repository.UserRepository;
import com.unifacisa.tcc.service.MailService;
import com.unifacisa.tcc.service.SocialService;
import com.unifacisa.tcc.service.UserService;
import com.unifacisa.tcc.service.dto.UserDTO;
import com.unifacisa.tcc.web.rest.UserResource;
import com.unifacisa.tcc.web.rest.vm.ManagedUserVM;
import io.github.jhipster.config.JHipsterProperties;
import java.time.Instant;
import java.time.ZoneId;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import javax.servlet.Servlet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGPoolingDataSource;
import org.postgresql.ds.PGSimpleDataSource;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;
import org.springframework.cache.guava.GuavaCacheManager;
import org.springframework.cache.jcache.JCacheCacheManager;
import org.springframework.cache.support.SimpleCacheManager;
import org.springframework.context.MessageSource;
import org.springframework.context.support.GenericGroovyApplicationContext;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.expression.spel.SpelCompilerMode;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.security.crypto.encrypt.TextEncryptor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;
import org.springframework.security.crypto.password.StandardPasswordEncoder;
import org.springframework.social.connect.ConnectionFactoryLocator;
import org.springframework.social.connect.UsersConnectionRepository;
import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;
import org.springframework.social.connect.mem.InMemoryUsersConnectionRepository;
import org.springframework.social.connect.support.ConnectionFactoryRegistry;
import org.springframework.social.security.SocialAuthenticationServiceRegistry;
import org.thymeleaf.spring4.SpringTemplateEngine;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserResource_ESTest extends UserResource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneWithAuthoritiesByLogin(anyString());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, (MessageSource) null, (SpringTemplateEngine) null);
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(connectionFactoryRegistry0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, (PasswordEncoder) null, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SimpleCacheManager simpleCacheManager0 = new SimpleCacheManager();
      UserService userService0 = new UserService(userRepository0, (PasswordEncoder) null, socialService0, authorityRepository1, simpleCacheManager0);
      UserResource userResource0 = new UserResource(userRepository0, mailService0, userService0);
      // Undeclared exception!
      try { 
        userResource0.getUser("loi^XBS~!7_Z8(2w;0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.UserResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer("\"#md^mtqC$4%Hi\"Kw");
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder(stringBuffer0, (-3218), (-3218));
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SocialService socialService0 = new SocialService((UsersConnectionRepository) null, authorityRepository0, pbkdf2PasswordEncoder0, userRepository0, (MailService) null);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(authorityRepository1).findAll();
      JCacheCacheManager jCacheCacheManager0 = new JCacheCacheManager();
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, socialService0, authorityRepository1, jCacheCacheManager0);
      UserResource userResource0 = new UserResource(userRepository0, (MailService) null, userService0);
      // Undeclared exception!
      try { 
        userResource0.getAuthorities();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Page<Servlet> page0 = (Page<Servlet>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(page0).getTotalElements();
      doReturn(0, 0).when(page0).getTotalPages();
      doReturn((List) null).when(page0).getContent();
      doReturn(0, 0).when(page0).getNumber();
      doReturn(0, 0).when(page0).getSize();
      Page<User> page1 = (Page<User>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(page1).map(nullable(org.springframework.core.convert.converter.Converter.class));
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(page1).when(userRepository0).findAllByLoginNot(any(org.springframework.data.domain.Pageable.class) , anyString());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, (MessageSource) null, springTemplateEngine0);
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder();
      PGSimpleDataSource pGSimpleDataSource0 = new PGSimpleDataSource();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(pGSimpleDataSource0, (ConnectionFactoryLocator) null, textEncryptor0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, standardPasswordEncoder0, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      GuavaCacheManager guavaCacheManager0 = new GuavaCacheManager();
      UserService userService0 = new UserService(userRepository0, standardPasswordEncoder0, socialService0, authorityRepository1, guavaCacheManager0);
      UserResource userResource0 = new UserResource(userRepository0, mailService0, userService0);
      ResponseEntity<List<UserDTO>> responseEntity0 = userResource0.getAllUsers((Pageable) null);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Page<User> page0 = (Page<User>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(page0).map(nullable(org.springframework.core.convert.converter.Converter.class));
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(userRepository0).findAllByLoginNot(any(org.springframework.data.domain.Pageable.class) , anyString());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, (MessageSource) null, springTemplateEngine0);
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder();
      PGSimpleDataSource pGSimpleDataSource0 = new PGSimpleDataSource();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(pGSimpleDataSource0, (ConnectionFactoryLocator) null, textEncryptor0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, standardPasswordEncoder0, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      GuavaCacheManager guavaCacheManager0 = new GuavaCacheManager();
      UserService userService0 = new UserService(userRepository0, standardPasswordEncoder0, socialService0, authorityRepository1, guavaCacheManager0);
      UserResource userResource0 = new UserResource(userRepository0, mailService0, userService0);
      // Undeclared exception!
      try { 
        userResource0.getAllUsers((Pageable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.util.PaginationUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, (MessageSource) null, springTemplateEngine0);
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder("org.thymeleaf.TemplateEngine.TIMER");
      PGSimpleDataSource pGSimpleDataSource0 = new PGSimpleDataSource();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(pGSimpleDataSource0, (ConnectionFactoryLocator) null, textEncryptor0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, standardPasswordEncoder0, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ConcurrentMapCacheManager concurrentMapCacheManager0 = new ConcurrentMapCacheManager(stringArray0);
      UserService userService0 = new UserService(userRepository0, standardPasswordEncoder0, socialService0, authorityRepository1, concurrentMapCacheManager0);
      UserResource userResource0 = new UserResource(userRepository0, mailService0, userService0);
      ManagedUserVM managedUserVM0 = new ManagedUserVM();
      // Undeclared exception!
      try { 
        userResource0.createUser(managedUserVM0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.web.rest.UserResource", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder();
      PGPoolingDataSource pGPoolingDataSource0 = new PGPoolingDataSource();
      SocialAuthenticationServiceRegistry socialAuthenticationServiceRegistry0 = new SocialAuthenticationServiceRegistry();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      Class<SpelCompilerMode> class0 = SpelCompilerMode.class;
      String[] stringArray0 = new String[0];
      GenericGroovyApplicationContext genericGroovyApplicationContext0 = new GenericGroovyApplicationContext(class0, stringArray0);
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, genericGroovyApplicationContext0, (SpringTemplateEngine) null);
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(pGPoolingDataSource0, socialAuthenticationServiceRegistry0, (TextEncryptor) null);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      UserRepository userRepository1 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, pbkdf2PasswordEncoder0, userRepository1, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      ConcurrentMapCacheManager concurrentMapCacheManager0 = new ConcurrentMapCacheManager();
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, socialService0, authorityRepository1, concurrentMapCacheManager0);
      UserResource userResource0 = new UserResource(userRepository0, mailService0, userService0);
      Long long0 = new Long((-1));
      Instant instant0 = MockInstant.now();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      ManagedUserVM managedUserVM0 = new ManagedUserVM(long0, "wp3D\"lK!CV<OYc", "lifecycleProcessor", "smtp", "Zw^qMf'M'", "wp3D\"lK!CV<OYc", true, "U]')RU7~|+<", "wp3D\"lK!CV<OYc", "wp3D\"lK!CV<OYc", instant0, "x^*7jpeRi", instant0, set0);
      ResponseEntity responseEntity0 = userResource0.createUser(managedUserVM0);
      assertEquals(400, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneByLogin(anyString());
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService((JHipsterProperties) null, javaMailSenderImpl0, (MessageSource) null, springTemplateEngine0);
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder("smtp");
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SimpleCacheManager simpleCacheManager0 = new SimpleCacheManager();
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, (SocialService) null, authorityRepository0, simpleCacheManager0);
      UserResource userResource0 = new UserResource(userRepository0, mailService0, userService0);
      // Undeclared exception!
      try { 
        userResource0.deleteUser(" [delegateStrategies = ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }
}
