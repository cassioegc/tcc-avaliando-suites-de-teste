/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:17:45 GMT 2021
 */

package com.unifacisa.tcc.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.codahale.metrics.MetricRegistry;
import com.unifacisa.tcc.config.WebConfigurer;
import io.github.jhipster.config.JHipsterProperties;
import javax.servlet.ServletContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.javax.naming.EvoNamingContext;
import org.evosuite.runtime.testdata.EvoName;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.boot.web.servlet.ServletContextInitializer;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.Environment;
import org.springframework.core.env.StandardEnvironment;
import org.springframework.mock.web.MockServletContext;
import org.springframework.security.web.FilterChainProxy;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.filter.CorsFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WebConfigurer_ESTest extends WebConfigurer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FilterChainProxy filterChainProxy0 = new FilterChainProxy();
      Environment environment0 = filterChainProxy0.getEnvironment();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      WebConfigurer webConfigurer0 = new WebConfigurer(environment0, jHipsterProperties0);
      MockServletContext mockServletContext0 = new MockServletContext("webappMetricsFilter");
      EvoName evoName0 = new EvoName("spring.profiles.active");
      EvoNamingContext.add(evoName0, jHipsterProperties0);
      // Undeclared exception!
      try { 
        webConfigurer0.onStartup(mockServletContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No converter found capable of converting from type [io.github.jhipster.config.JHipsterProperties] to type [java.lang.String]
         //
         verifyException("org.springframework.core.convert.support.GenericConversionService", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AnnotationConfigWebApplicationContext annotationConfigWebApplicationContext0 = new AnnotationConfigWebApplicationContext();
      ConfigurableEnvironment configurableEnvironment0 = annotationConfigWebApplicationContext0.getEnvironment();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      WebConfigurer webConfigurer0 = new WebConfigurer(configurableEnvironment0, jHipsterProperties0);
      EvoName evoName0 = new EvoName("java:comp/env/spring.profiles.default");
      EvoNamingContext.add(evoName0, jHipsterProperties0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(0);
      // Undeclared exception!
      try { 
        webConfigurer0.customize(undertowEmbeddedServletContainerFactory0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No converter found capable of converting from type [io.github.jhipster.config.JHipsterProperties] to type [java.lang.String]
         //
         verifyException("org.springframework.core.convert.support.GenericConversionService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      WebConfigurer webConfigurer0 = new WebConfigurer((Environment) null, jHipsterProperties0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      // Undeclared exception!
      try { 
        webConfigurer0.customize(undertowEmbeddedServletContainerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.config.WebConfigurer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FilterChainProxy filterChainProxy0 = new FilterChainProxy();
      Environment environment0 = filterChainProxy0.getEnvironment();
      WebConfigurer webConfigurer0 = new WebConfigurer(environment0, (JHipsterProperties) null);
      // Undeclared exception!
      try { 
        webConfigurer0.corsFilter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.config.WebConfigurer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      standardEnvironment0.addActiveProfile("systemEnvironment");
      WebConfigurer webConfigurer0 = new WebConfigurer(standardEnvironment0, jHipsterProperties0);
      // Undeclared exception!
      try { 
        webConfigurer0.onStartup((ServletContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.config.WebConfigurer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AnnotationConfigWebApplicationContext annotationConfigWebApplicationContext0 = new AnnotationConfigWebApplicationContext();
      ConfigurableEnvironment configurableEnvironment0 = annotationConfigWebApplicationContext0.getEnvironment();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      WebConfigurer webConfigurer0 = new WebConfigurer(configurableEnvironment0, jHipsterProperties0);
      CorsFilter corsFilter0 = webConfigurer0.corsFilter();
      assertNotNull(corsFilter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("src/main/webapp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      WebConfigurer webConfigurer0 = new WebConfigurer(standardEnvironment0, jHipsterProperties0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory((-1492));
      webConfigurer0.customize(undertowEmbeddedServletContainerFactory0);
      assertFalse(undertowEmbeddedServletContainerFactory0.isPersistSession());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AnnotationConfigWebApplicationContext annotationConfigWebApplicationContext0 = new AnnotationConfigWebApplicationContext();
      ConfigurableEnvironment configurableEnvironment0 = annotationConfigWebApplicationContext0.getEnvironment();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      WebConfigurer webConfigurer0 = new WebConfigurer(configurableEnvironment0, jHipsterProperties0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("src/main/webapp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "spring.getenv.ignore");
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(0);
      webConfigurer0.customize(undertowEmbeddedServletContainerFactory0);
      assertNull(undertowEmbeddedServletContainerFactory0.getAccessLogPrefix());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      WebConfigurer webConfigurer0 = new WebConfigurer(standardEnvironment0, jHipsterProperties0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "prod";
      stringArray0[1] = "spring.getenv.ignore";
      stringArray0[2] = "systemProperties";
      stringArray0[3] = "systemEnvironment";
      stringArray0[4] = "spring.profiles.default";
      stringArray0[5] = "lifecycleProcessor";
      standardEnvironment0.setActiveProfiles(stringArray0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      webConfigurer0.customize(undertowEmbeddedServletContainerFactory0);
      assertEquals(1800, undertowEmbeddedServletContainerFactory0.getSessionTimeout());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AnnotationConfigWebApplicationContext annotationConfigWebApplicationContext0 = new AnnotationConfigWebApplicationContext();
      ConfigurableEnvironment configurableEnvironment0 = annotationConfigWebApplicationContext0.getEnvironment();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      WebConfigurer webConfigurer0 = new WebConfigurer(configurableEnvironment0, jHipsterProperties0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      servletContextInitializerArray0[0] = (ServletContextInitializer) webConfigurer0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      WebConfigurer webConfigurer0 = new WebConfigurer(standardEnvironment0, jHipsterProperties0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "prod";
      stringArray0[1] = "spring.getenv.ignore";
      stringArray0[2] = "systemProperties";
      stringArray0[3] = "spring.getenv.ignore";
      stringArray0[4] = "spring.profiles.default";
      stringArray0[5] = "messageSource";
      standardEnvironment0.setActiveProfiles(stringArray0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[9];
      servletContextInitializerArray0[0] = (ServletContextInitializer) webConfigurer0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AnnotationConfigWebApplicationContext annotationConfigWebApplicationContext0 = new AnnotationConfigWebApplicationContext();
      ConfigurableEnvironment configurableEnvironment0 = annotationConfigWebApplicationContext0.getEnvironment();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      WebConfigurer webConfigurer0 = new WebConfigurer(configurableEnvironment0, jHipsterProperties0);
      webConfigurer0.setMetricRegistry((MetricRegistry) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AnnotationConfigApplicationContext annotationConfigApplicationContext0 = new AnnotationConfigApplicationContext();
      ConfigurableEnvironment configurableEnvironment0 = annotationConfigApplicationContext0.getEnvironment();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      WebConfigurer webConfigurer0 = new WebConfigurer(configurableEnvironment0, jHipsterProperties0);
      MockServletContext mockServletContext0 = new MockServletContext(annotationConfigApplicationContext0);
      // Undeclared exception!
      try { 
        webConfigurer0.onStartup(mockServletContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.mock.web.MockServletContext", e);
      }
  }
}
