/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 02:01:17 GMT 2021
 */

package com.unifacisa.tcc.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.config.DatabaseConfiguration;
import javax.sql.DataSource;
import liquibase.integration.spring.SpringLiquibase;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.h2.tools.Server;
import org.junit.runner.RunWith;
import org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties;
import org.springframework.core.env.Environment;
import org.springframework.core.task.TaskExecutor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DatabaseConfiguration_ESTest extends DatabaseConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Environment environment0 = mock(Environment.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(environment0).acceptsProfiles(any(java.lang.String[].class));
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration(environment0);
      TaskExecutor taskExecutor0 = mock(TaskExecutor.class, new ViolatedAssumptionAnswer());
      LiquibaseProperties liquibaseProperties0 = mock(LiquibaseProperties.class, new ViolatedAssumptionAnswer());
      doReturn("-tcpAllowOthers").when(liquibaseProperties0).getContexts();
      doReturn("-tcpAllowOthers").when(liquibaseProperties0).getDefaultSchema();
      doReturn(true).when(liquibaseProperties0).isDropFirst();
      doReturn(true).when(liquibaseProperties0).isEnabled();
      SpringLiquibase springLiquibase0 = databaseConfiguration0.liquibase(taskExecutor0, (DataSource) null, liquibaseProperties0);
      assertEquals("classpath:config/liquibase/master.xml", springLiquibase0.getChangeLog());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Environment environment0 = mock(Environment.class, new ViolatedAssumptionAnswer());
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration(environment0);
      TaskExecutor taskExecutor0 = mock(TaskExecutor.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        databaseConfiguration0.liquibase(taskExecutor0, dataSource0, (LiquibaseProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.config.DatabaseConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Environment environment0 = mock(Environment.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(environment0).acceptsProfiles(any(java.lang.String[].class));
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration(environment0);
      TaskExecutor taskExecutor0 = mock(TaskExecutor.class, new ViolatedAssumptionAnswer());
      DataSource dataSource0 = mock(DataSource.class, new ViolatedAssumptionAnswer());
      LiquibaseProperties liquibaseProperties0 = mock(LiquibaseProperties.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(liquibaseProperties0).getContexts();
      doReturn((String) null).when(liquibaseProperties0).getDefaultSchema();
      doReturn(false).when(liquibaseProperties0).isDropFirst();
      doReturn(false).when(liquibaseProperties0).isEnabled();
      SpringLiquibase springLiquibase0 = databaseConfiguration0.liquibase(taskExecutor0, dataSource0, liquibaseProperties0);
      assertEquals("classpath:config/liquibase/master.xml", springLiquibase0.getChangeLog());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Environment environment0 = mock(Environment.class, new ViolatedAssumptionAnswer());
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration(environment0);
      Server server0 = databaseConfiguration0.h2TCPServer();
      assertEquals("tcp://192.168.1.42:9092", server0.getURL());
  }
}
