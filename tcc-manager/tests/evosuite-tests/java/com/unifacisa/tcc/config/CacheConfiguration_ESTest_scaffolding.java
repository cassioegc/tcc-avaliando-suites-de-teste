/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Mar 25 02:12:22 GMT 2021
 */

package com.unifacisa.tcc.config;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class CacheConfiguration_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.unifacisa.tcc.config.CacheConfiguration"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/cassioegc/tcc/tcc-manager"); 
    java.lang.System.setProperty("user.home", "/home/cassioegc"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "cassioegc"); 
    java.lang.System.setProperty("user.timezone", "America/Recife"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CacheConfiguration_ESTest_scaffolding.class.getClassLoader() ,
      "io.github.jhipster.config.JHipsterProperties$Async",
      "org.ehcache.core.config.ResourcePoolsImpl$1",
      "org.ehcache.config.units.EntryUnit",
      "org.ehcache.config.builders.ResourcePoolsBuilder",
      "org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer",
      "io.github.jhipster.config.JHipsterProperties$Security",
      "org.ehcache.config.ResourceType",
      "org.ehcache.core.HumanReadable",
      "io.github.jhipster.config.JHipsterProperties$Swagger",
      "org.springframework.boot.web.servlet.ServletContextInitializer",
      "io.github.jhipster.config.JHipsterProperties$Http",
      "com.ryantenney.metrics.spring.config.annotation.MetricsConfigurerAdapter",
      "org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer",
      "io.github.jhipster.config.JHipsterProperties$Cache$Hazelcast",
      "io.github.jhipster.config.JHipsterProperties$Ribbon",
      "com.unifacisa.tcc.config.MetricsConfiguration",
      "org.ehcache.config.ResourcePools",
      "org.ehcache.core.config.SizedResourcePoolImpl",
      "org.ehcache.config.ResourceUnit",
      "org.springframework.context.annotation.Configuration",
      "io.github.jhipster.config.JHipsterProperties$Gateway",
      "org.ehcache.config.ResourcePool",
      "org.ehcache.config.builders.CacheConfigurationBuilder",
      "org.springframework.beans.factory.DisposableBean",
      "io.github.jhipster.config.JHipsterProperties$Social",
      "org.ehcache.config.SizedResourcePool",
      "io.github.jhipster.config.JHipsterProperties$Cache",
      "io.github.jhipster.config.JHipsterProperties",
      "org.ehcache.core.config.ResourcePoolsImpl",
      "org.ehcache.jsr107.Eh107Configuration",
      "com.unifacisa.tcc.config.CacheConfiguration",
      "org.ehcache.spi.service.ServiceConfiguration",
      "com.unifacisa.tcc.config.DatabaseConfiguration",
      "org.ehcache.expiry.Duration",
      "org.ehcache.jsr107.Eh107Configuration$Eh107ConfigurationWrapper",
      "org.springframework.boot.context.properties.ConfigurationProperties",
      "org.ehcache.config.CacheConfiguration",
      "org.ehcache.expiry.Expirations$TimeToLiveExpiry",
      "org.ehcache.expiry.Expiry",
      "io.github.jhipster.config.JHipsterProperties$Mail",
      "io.github.jhipster.config.JHipsterProperties$Cache$Ehcache",
      "org.springframework.boot.autoconfigure.AutoConfigureAfter",
      "org.ehcache.config.units.EntryUnit$1",
      "io.github.jhipster.config.JHipsterProperties$Registry",
      "io.github.jhipster.config.JHipsterProperties$Cache$Infinispan",
      "org.ehcache.core.config.BaseCacheConfiguration",
      "com.unifacisa.tcc.config.WebConfigurer",
      "org.ehcache.expiry.Expirations$BaseExpiry",
      "org.springframework.cache.annotation.EnableCaching",
      "org.ehcache.core.config.AbstractResourcePool",
      "org.springframework.context.annotation.AdviceMode",
      "org.ehcache.expiry.Expirations",
      "org.springframework.web.cors.CorsConfiguration",
      "org.springframework.context.annotation.Import",
      "org.ehcache.config.ResourceType$Core",
      "io.github.jhipster.config.JHipsterProperties$Logging",
      "org.springframework.stereotype.Component",
      "org.ehcache.config.Builder",
      "io.github.jhipster.config.JHipsterProperties$Metrics",
      "org.springframework.boot.autoconfigure.AutoConfigureBefore",
      "com.ryantenney.metrics.spring.config.annotation.MetricsConfigurer"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("io.github.jhipster.config.JHipsterProperties", false, CacheConfiguration_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("io.github.jhipster.config.JHipsterProperties$Cache", false, CacheConfiguration_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("io.github.jhipster.config.JHipsterProperties$Cache$Ehcache", false, CacheConfiguration_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CacheConfiguration_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.unifacisa.tcc.config.CacheConfiguration",
      "org.hibernate.cache.spi.access.AccessType",
      "org.hibernate.annotations.CacheConcurrencyStrategy",
      "org.hibernate.envers.ModificationStore",
      "org.hibernate.envers.RelationTargetAuditMode",
      "org.springframework.context.annotation.AdviceMode",
      "org.springframework.beans.factory.annotation.Autowire",
      "org.ehcache.config.units.EntryUnit",
      "io.github.jhipster.config.JHipsterProperties",
      "io.github.jhipster.config.JHipsterProperties$Cache",
      "io.github.jhipster.config.JHipsterProperties$Cache$Ehcache",
      "org.ehcache.config.builders.ResourcePoolsBuilder",
      "org.ehcache.core.config.ResourcePoolsImpl",
      "org.ehcache.core.config.ResourcePoolsImpl$1",
      "org.ehcache.config.ResourceType$Core",
      "org.ehcache.core.config.AbstractResourcePool",
      "org.ehcache.core.config.SizedResourcePoolImpl",
      "org.ehcache.config.builders.CacheConfigurationBuilder",
      "org.ehcache.expiry.Duration",
      "org.ehcache.expiry.Expirations",
      "org.ehcache.expiry.Expirations$BaseExpiry",
      "org.ehcache.expiry.Expirations$TimeToLiveExpiry",
      "org.ehcache.core.config.BaseCacheConfiguration",
      "org.ehcache.jsr107.Eh107Configuration",
      "org.ehcache.jsr107.Eh107Configuration$Eh107ConfigurationWrapper"
    );
  }
}
