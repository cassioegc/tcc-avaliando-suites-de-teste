/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:49:12 GMT 2021
 */

package com.unifacisa.tcc.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.codahale.metrics.MetricRegistry;
import com.codahale.metrics.health.HealthCheckRegistry;
import com.unifacisa.tcc.config.MetricsConfiguration;
import com.zaxxer.hikari.HikariDataSource;
import io.github.jhipster.config.JHipsterProperties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MetricsConfiguration_ESTest extends MetricsConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      MetricsConfiguration metricsConfiguration0 = new MetricsConfiguration(jHipsterProperties0);
      Injector.executePostConstruct((Object) metricsConfiguration0, (Class<?>) MetricsConfiguration.class);
      // Undeclared exception!
      try { 
        metricsConfiguration0.init();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A metric named jvm.memory.heap.committed already exists
         //
         verifyException("com.codahale.metrics.MetricRegistry", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      MetricsConfiguration metricsConfiguration0 = new MetricsConfiguration(jHipsterProperties0);
      Injector.executePostConstruct((Object) metricsConfiguration0, (Class<?>) MetricsConfiguration.class);
      HealthCheckRegistry healthCheckRegistry0 = metricsConfiguration0.getHealthCheckRegistry();
      assertNotNull(healthCheckRegistry0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      MetricsConfiguration metricsConfiguration0 = new MetricsConfiguration(jHipsterProperties0);
      Injector.executePostConstruct((Object) metricsConfiguration0, (Class<?>) MetricsConfiguration.class);
      metricsConfiguration0.setHikariDataSource((HikariDataSource) null);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      MetricsConfiguration metricsConfiguration0 = new MetricsConfiguration(jHipsterProperties0);
      Injector.executePostConstruct((Object) metricsConfiguration0, (Class<?>) MetricsConfiguration.class);
      MetricRegistry metricRegistry0 = metricsConfiguration0.getMetricRegistry();
      assertNotNull(metricRegistry0);
  }
}
