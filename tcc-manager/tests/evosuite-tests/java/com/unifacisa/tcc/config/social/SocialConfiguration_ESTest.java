/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:36:11 GMT 2021
 */

package com.unifacisa.tcc.config.social;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.config.social.SocialConfiguration;
import com.unifacisa.tcc.repository.CustomSocialConnectionRepository;
import com.unifacisa.tcc.repository.SocialUserConnectionRepository;
import com.unifacisa.tcc.security.jwt.TokenProvider;
import io.github.jhipster.config.JHipsterProperties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.core.env.Environment;
import org.springframework.core.env.StandardEnvironment;
import org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl;
import org.springframework.social.config.annotation.ConnectionFactoryConfigurer;
import org.springframework.social.connect.ConnectionRepository;
import org.springframework.social.connect.UsersConnectionRepository;
import org.springframework.social.connect.mem.InMemoryUsersConnectionRepository;
import org.springframework.social.connect.support.ConnectionFactoryRegistry;
import org.springframework.social.connect.web.ProviderSignInController;
import org.springframework.social.connect.web.ProviderSignInUtils;
import org.springframework.social.connect.web.SignInAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SocialConfiguration_ESTest extends SocialConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SocialConfiguration socialConfiguration0 = new SocialConfiguration((SocialUserConnectionRepository) null, (Environment) null);
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(connectionFactoryRegistry0);
      // Undeclared exception!
      try { 
        socialConfiguration0.providerSignInController(connectionFactoryRegistry0, inMemoryUsersConnectionRepository0, (SignInAdapter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.config.social.SocialConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      SocialConfiguration socialConfiguration0 = new SocialConfiguration(socialUserConnectionRepository0, (Environment) null);
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(connectionFactoryRegistry0);
      ConnectionRepository connectionRepository0 = inMemoryUsersConnectionRepository0.createConnectionRepository("");
      // Undeclared exception!
      try { 
        socialConfiguration0.connectController(connectionFactoryRegistry0, connectionRepository0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.config.social.SocialConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      SocialConfiguration socialConfiguration0 = new SocialConfiguration(socialUserConnectionRepository0, (Environment) null);
      // Undeclared exception!
      try { 
        socialConfiguration0.addConnectionFactories((ConnectionFactoryConfigurer) null, (Environment) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.config.social.SocialConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      SocialConfiguration socialConfiguration0 = new SocialConfiguration(socialUserConnectionRepository0, standardEnvironment0);
      JdbcDaoImpl jdbcDaoImpl0 = new JdbcDaoImpl();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      socialConfiguration0.addConnectionFactories((ConnectionFactoryConfigurer) null, standardEnvironment0);
      UsersConnectionRepository usersConnectionRepository0 = socialConfiguration0.getUsersConnectionRepository(connectionFactoryRegistry0);
      ProviderSignInUtils providerSignInUtils0 = socialConfiguration0.getProviderSignInUtils(connectionFactoryRegistry0, usersConnectionRepository0);
      assertNotNull(providerSignInUtils0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      SocialConfiguration socialConfiguration0 = new SocialConfiguration(socialUserConnectionRepository0, standardEnvironment0);
      JdbcDaoImpl jdbcDaoImpl0 = new JdbcDaoImpl();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      socialConfiguration0.getUserIdSource();
      SocialUserConnectionRepository socialUserConnectionRepository1 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      CustomSocialConnectionRepository customSocialConnectionRepository0 = new CustomSocialConnectionRepository("spring.profiles.active", socialUserConnectionRepository1, connectionFactoryRegistry0);
      socialConfiguration0.connectController(connectionFactoryRegistry0, customSocialConnectionRepository0);
      socialConfiguration0.addConnectionFactories((ConnectionFactoryConfigurer) null, standardEnvironment0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SocialUserConnectionRepository socialUserConnectionRepository0 = mock(SocialUserConnectionRepository.class, new ViolatedAssumptionAnswer());
      StandardEnvironment standardEnvironment0 = new StandardEnvironment();
      SocialConfiguration socialConfiguration0 = new SocialConfiguration(socialUserConnectionRepository0, standardEnvironment0);
      JdbcDaoImpl jdbcDaoImpl0 = new JdbcDaoImpl();
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      TokenProvider tokenProvider0 = new TokenProvider(jHipsterProperties0);
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      Injector.executePostConstruct((Object) tokenProvider0, (Class<?>) TokenProvider.class);
      SignInAdapter signInAdapter0 = socialConfiguration0.signInAdapter(jdbcDaoImpl0, jHipsterProperties0, tokenProvider0);
      socialConfiguration0.addConnectionFactories((ConnectionFactoryConfigurer) null, standardEnvironment0);
      UsersConnectionRepository usersConnectionRepository0 = socialConfiguration0.getUsersConnectionRepository(connectionFactoryRegistry0);
      ProviderSignInController providerSignInController0 = socialConfiguration0.providerSignInController(connectionFactoryRegistry0, usersConnectionRepository0, signInAdapter0);
      assertNotNull(providerSignInController0);
  }
}
