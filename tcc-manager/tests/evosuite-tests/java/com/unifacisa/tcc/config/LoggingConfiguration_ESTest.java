/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:42:16 GMT 2021
 */

package com.unifacisa.tcc.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.LoggerContext;
import com.unifacisa.tcc.config.LoggingConfiguration;
import io.github.jhipster.config.JHipsterProperties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LoggingConfiguration_ESTest extends LoggingConfiguration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LoggingConfiguration loggingConfiguration0 = null;
      try {
        loggingConfiguration0 = new LoggingConfiguration("", "", (JHipsterProperties) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.config.LoggingConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      LoggingConfiguration loggingConfiguration0 = new LoggingConfiguration("ZR?OR+7Z", "ZR?OR+7Z", jHipsterProperties0, "ZR?OR+7Z");
      LoggingConfiguration.LogbackLoggerContextListener loggingConfiguration_LogbackLoggerContextListener0 = loggingConfiguration0.new LogbackLoggerContextListener();
      LoggerContext loggerContext0 = new LoggerContext();
      loggingConfiguration_LogbackLoggerContextListener0.onStop(loggerContext0);
      assertTrue(loggingConfiguration_LogbackLoggerContextListener0.isResetResistant());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      LoggingConfiguration loggingConfiguration0 = new LoggingConfiguration("ZR?OR+7Z", "ZR?OR+7Z", jHipsterProperties0, "ZR?OR+7Z");
      LoggingConfiguration.LogbackLoggerContextListener loggingConfiguration_LogbackLoggerContextListener0 = loggingConfiguration0.new LogbackLoggerContextListener();
      LoggerContext loggerContext0 = new LoggerContext();
      loggingConfiguration_LogbackLoggerContextListener0.onStart(loggerContext0);
      assertTrue(loggingConfiguration_LogbackLoggerContextListener0.isResetResistant());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      LoggingConfiguration loggingConfiguration0 = new LoggingConfiguration("ZR?OR+7Z", "ZR?OR+7Z", jHipsterProperties0, "ZR?OR+7Z");
      LoggingConfiguration.LogbackLoggerContextListener loggingConfiguration_LogbackLoggerContextListener0 = loggingConfiguration0.new LogbackLoggerContextListener();
      LoggerContext loggerContext0 = new LoggerContext();
      loggingConfiguration_LogbackLoggerContextListener0.onReset(loggerContext0);
      assertTrue(loggingConfiguration_LogbackLoggerContextListener0.isResetResistant());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      LoggingConfiguration loggingConfiguration0 = new LoggingConfiguration("I*", "I*", jHipsterProperties0, "I*");
      LoggingConfiguration.LogbackLoggerContextListener loggingConfiguration_LogbackLoggerContextListener0 = loggingConfiguration0.new LogbackLoggerContextListener();
      Level level0 = Level.valueOf("I*");
      loggingConfiguration_LogbackLoggerContextListener0.onLevelChange((Logger) null, level0);
      assertTrue(loggingConfiguration_LogbackLoggerContextListener0.isResetResistant());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      LoggingConfiguration loggingConfiguration0 = new LoggingConfiguration("ZR?OR+7Z", "ZR?OR+7Z", jHipsterProperties0, "ZR?OR+7Z");
      LoggingConfiguration.LogbackLoggerContextListener loggingConfiguration_LogbackLoggerContextListener0 = loggingConfiguration0.new LogbackLoggerContextListener();
      boolean boolean0 = loggingConfiguration_LogbackLoggerContextListener0.isResetResistant();
      assertTrue(boolean0);
  }
}
