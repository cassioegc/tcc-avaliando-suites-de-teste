/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:25:46 GMT 2021
 */

package com.unifacisa.tcc.config.audit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.config.audit.AuditEventConverter;
import com.unifacisa.tcc.domain.PersistentAuditEvent;
import java.time.Instant;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import java.util.function.BiFunction;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpSession;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.springframework.boot.actuate.audit.AuditEvent;
import org.springframework.security.web.authentication.WebAuthenticationDetails;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AuditEventConverter_ESTest extends AuditEventConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      PriorityQueue<PersistentAuditEvent> priorityQueue0 = new PriorityQueue<PersistentAuditEvent>();
      Vector<PersistentAuditEvent> vector0 = new Vector<PersistentAuditEvent>(priorityQueue0);
      vector0.setSize(4740);
      auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) vector0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      auditEventConverter0.convertDataToObjects(map0);
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      vector0.add(persistentAuditEvent0);
      auditEventConverter0.convertDataToObjects(map0);
      priorityQueue0.clear();
      vector0.remove(4740);
      auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) vector0);
      // Undeclared exception!
      auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) vector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      persistentAuditEvent0.setAuditEventType("x^76^&~gh");
      persistentAuditEvent0.setPrincipal("com.unifacisa.tcc.config.audit.AuditEventConverter");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, Object> map0 = auditEventConverter0.convertDataToObjects(hashMap0);
      Map<String, String> map1 = auditEventConverter0.convertDataToStrings(map0);
      Instant instant0 = MockInstant.now();
      persistentAuditEvent0.setAuditEventDate(instant0);
      auditEventConverter0.convertDataToObjects(map1);
      System.setCurrentTimeMillis(0L);
      Map<String, String> map2 = ZoneId.SHORT_IDS;
      auditEventConverter0.convertDataToObjects(map2);
      Map<String, Object> map3 = auditEventConverter0.convertDataToObjects(map2);
      auditEventConverter0.convertToAuditEvent(persistentAuditEvent0);
      auditEventConverter0.convertDataToStrings(map3);
      System.setCurrentTimeMillis(635L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.keySet();
      BiFunction<Object, Object, WebAuthenticationDetails> biFunction0 = (BiFunction<Object, Object, WebAuthenticationDetails>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute((String) null, biFunction0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getRemoteAddr();
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      auditEventConverter0.convertDataToStrings(hashMap0);
      WebAuthenticationDetails webAuthenticationDetails0 = new WebAuthenticationDetails(httpServletRequestWrapper0);
      hashMap0.put("&yfIsvyPxQy%X", webAuthenticationDetails0);
      auditEventConverter0.convertDataToStrings(hashMap0);
      auditEventConverter0.convertDataToStrings(hashMap0);
      auditEventConverter0.convertDataToObjects((Map<String, String>) null);
      Vector<PersistentAuditEvent> vector0 = null;
      try {
        vector0 = new Vector<PersistentAuditEvent>((-1298), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1298
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Map<String, Object> map1 = auditEventConverter0.convertDataToObjects(map0);
      assertEquals(28, map1.size());
      
      auditEventConverter0.convertDataToStrings(map1);
      auditEventConverter0.convertDataToStrings(map1);
      PersistentAuditEvent persistentAuditEvent0 = null;
      auditEventConverter0.convertToAuditEvent((PersistentAuditEvent) null);
      Map<String, Object> map2 = auditEventConverter0.convertDataToObjects(map0);
      auditEventConverter0.convertDataToObjects(map0);
      auditEventConverter0.convertDataToStrings(map2);
      auditEventConverter0.convertToAuditEvent((PersistentAuditEvent) null);
      auditEventConverter0.convertDataToStrings(map2);
      ArrayList<PersistentAuditEvent> arrayList0 = new ArrayList<PersistentAuditEvent>(0);
      LinkedHashSet<PersistentAuditEvent> linkedHashSet0 = new LinkedHashSet<PersistentAuditEvent>(arrayList0);
      arrayList0.trimToSize();
      linkedHashSet0.add((PersistentAuditEvent) null);
      arrayList0.add((PersistentAuditEvent) null);
      linkedHashSet0.add((PersistentAuditEvent) null);
      auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) linkedHashSet0);
      auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) arrayList0);
      LinkedHashSet<PersistentAuditEvent> linkedHashSet1 = null;
      try {
        linkedHashSet1 = new LinkedHashSet<PersistentAuditEvent>(0, (-293.1F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -293.1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Map<String, Object> map1 = auditEventConverter0.convertDataToObjects(map0);
      auditEventConverter0.convertDataToStrings(map1);
      AuditEvent auditEvent0 = auditEventConverter0.convertToAuditEvent((PersistentAuditEvent) null);
      assertNull(auditEvent0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("\"?#D%Ts", "\"?#D%Ts");
      Map<String, Object> map0 = auditEventConverter0.convertDataToObjects(hashMap0);
      auditEventConverter0.convertDataToStrings(map0);
      Vector<PersistentAuditEvent> vector0 = new Vector<PersistentAuditEvent>(1);
      auditEventConverter0.convertDataToStrings(map0);
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      Instant instant0 = MockInstant.ofEpochSecond((long) 1);
      Instant instant1 = MockInstant.minusSeconds(instant0, 0L);
      Instant instant2 = MockInstant.plusMillis(instant1, 1);
      persistentAuditEvent0.setAuditEventDate(instant2);
      Instant instant3 = MockInstant.now();
      persistentAuditEvent0.setAuditEventDate(instant3);
      vector0.add(persistentAuditEvent0);
      // Undeclared exception!
      try { 
        auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Principal must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "null";
      AuditEvent auditEvent0 = new AuditEvent("null", "null", stringArray0);
      Map<String, Object> map0 = auditEvent0.getData();
      auditEventConverter0.convertDataToStrings(map0);
      auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Map<String, String> map1 = auditEventConverter0.convertDataToStrings(hashMap0);
      auditEventConverter0.convertDataToObjects(map1);
      auditEventConverter0.convertToAuditEvent((PersistentAuditEvent) null);
      List<AuditEvent> list0 = auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      HashSet<PersistentAuditEvent> hashSet0 = new HashSet<PersistentAuditEvent>();
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.values();
      hashMap0.put("", "");
      persistentAuditEvent0.setAuditEventType("");
      persistentAuditEvent0.setData(hashMap0);
      hashSet0.add(persistentAuditEvent0);
      // Undeclared exception!
      try { 
        auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      LinkedHashSet<PersistentAuditEvent> linkedHashSet0 = new LinkedHashSet<PersistentAuditEvent>();
      ArrayDeque<PersistentAuditEvent> arrayDeque0 = new ArrayDeque<PersistentAuditEvent>(linkedHashSet0);
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      arrayDeque0.add(persistentAuditEvent0);
      // Undeclared exception!
      try { 
        auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      MockDate mockDate0 = new MockDate((-934), (-934), (-1847));
      Instant instant0 = mockDate0.toInstant();
      Instant instant1 = MockInstant.plusMillis(instant0, 0L);
      persistentAuditEvent0.setAuditEventDate(instant1);
      Map<String, String> map0 = persistentAuditEvent0.getData();
      AuditEventConverter auditEventConverter1 = new AuditEventConverter();
      Map<String, Object> map1 = auditEventConverter1.convertDataToObjects(map0);
      auditEventConverter0.convertDataToStrings(map1);
      Map<String, Object> map2 = auditEventConverter0.convertDataToObjects(map0);
      auditEventConverter0.convertDataToStrings(map2);
      Map<String, String> map3 = persistentAuditEvent0.getData();
      persistentAuditEvent0.setData(map3);
      persistentAuditEvent0.setPrincipal((String) null);
      // Undeclared exception!
      try { 
        auditEventConverter0.convertToAuditEvent(persistentAuditEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Principal must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      Instant instant0 = MockInstant.ofEpochMilli((-2139L));
      persistentAuditEvent0.setAuditEventDate(instant0);
      // Undeclared exception!
      try { 
        auditEventConverter0.convertToAuditEvent(persistentAuditEvent0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Principal must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Map<String, Object> map1 = auditEventConverter0.convertDataToObjects(map0);
      auditEventConverter0.convertDataToStrings(map1);
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      // Undeclared exception!
      try { 
        auditEventConverter0.convertToAuditEvent(persistentAuditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      Map<String, Object> map0 = auditEventConverter0.convertDataToObjects((Map<String, String>) null);
      auditEventConverter0.convertDataToStrings(map0);
      PriorityQueue<PersistentAuditEvent> priorityQueue0 = new PriorityQueue<PersistentAuditEvent>(1162, (Comparator<? super PersistentAuditEvent>) null);
      auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) priorityQueue0);
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      persistentAuditEvent0.setPrincipal("5c}Jkw'AuHIsM2}fN@~");
      // Undeclared exception!
      try { 
        auditEventConverter0.convertToAuditEvent(persistentAuditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Map<String, String> map0 = auditEventConverter0.convertDataToStrings(hashMap0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      Map<String, String> map0 = auditEventConverter0.convertDataToStrings((Map<String, Object>) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      // Undeclared exception!
      try { 
        auditEventConverter0.convertToAuditEvent(persistentAuditEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      PriorityQueue<PersistentAuditEvent> priorityQueue0 = new PriorityQueue<PersistentAuditEvent>();
      PriorityQueue<PersistentAuditEvent> priorityQueue1 = new PriorityQueue<PersistentAuditEvent>(priorityQueue0);
      List<AuditEvent> list0 = auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) priorityQueue1);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "null";
      AuditEvent auditEvent0 = new AuditEvent("null", "null", stringArray0);
      Map<String, Object> map0 = auditEvent0.getData();
      Map<String, String> map1 = auditEventConverter0.convertDataToStrings(map0);
      auditEventConverter0.convertToAuditEvent((PersistentAuditEvent) null);
      auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) null);
      Map<String, Object> map2 = auditEventConverter0.convertDataToObjects(map1);
      Map<String, String> map3 = auditEventConverter0.convertDataToStrings(map2);
      assertFalse(map2.equals((Object)map0));
      assertEquals(1, map3.size());
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<PersistentAuditEvent> arrayList0 = new ArrayList<PersistentAuditEvent>();
      PersistentAuditEvent persistentAuditEvent0 = new PersistentAuditEvent();
      arrayList0.add(persistentAuditEvent0);
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      // Undeclared exception!
      try { 
        auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getRemoteAddr();
      doReturn((HttpSession) null).when(httpServletRequest0).getSession(anyBoolean());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      WebAuthenticationDetails webAuthenticationDetails0 = new WebAuthenticationDetails(httpServletRequestWrapper0);
      hashMap0.put((String) null, webAuthenticationDetails0);
      auditEventConverter0.convertDataToStrings(hashMap0);
      auditEventConverter0.convertDataToObjects((Map<String, String>) null);
      auditEventConverter0.convertDataToStrings((Map<String, Object>) null);
      Stack<PersistentAuditEvent> stack0 = new Stack<PersistentAuditEvent>();
      List<AuditEvent> list0 = auditEventConverter0.convertToAuditEvent((Iterable<PersistentAuditEvent>) stack0);
      assertTrue(list0.isEmpty());
  }
}
