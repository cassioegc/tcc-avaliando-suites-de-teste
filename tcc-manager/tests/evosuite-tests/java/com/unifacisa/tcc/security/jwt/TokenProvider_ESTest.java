/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 02:04:29 GMT 2021
 */

package com.unifacisa.tcc.security.jwt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.security.jwt.TokenProvider;
import io.github.jhipster.config.JHipsterProperties;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenProvider_ESTest extends TokenProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      TokenProvider tokenProvider0 = new TokenProvider(jHipsterProperties0);
      Injector.executePostConstruct((Object) tokenProvider0, (Class<?>) TokenProvider.class);
      tokenProvider0.init();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      TokenProvider tokenProvider0 = new TokenProvider(jHipsterProperties0);
      Injector.executePostConstruct((Object) tokenProvider0, (Class<?>) TokenProvider.class);
      Boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        tokenProvider0.createToken((Authentication) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.security.jwt.TokenProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      TokenProvider tokenProvider0 = new TokenProvider(jHipsterProperties0);
      Injector.executePostConstruct((Object) tokenProvider0, (Class<?>) TokenProvider.class);
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = new UsernamePasswordAuthenticationToken(jHipsterProperties0, tokenProvider0, (Collection<? extends GrantedAuthority>) null);
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        tokenProvider0.createToken(usernamePasswordAuthenticationToken0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64-encoded secret key cannot be null or empty.
         //
         verifyException("io.jsonwebtoken.lang.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      TokenProvider tokenProvider0 = new TokenProvider(jHipsterProperties0);
      Injector.executePostConstruct((Object) tokenProvider0, (Class<?>) TokenProvider.class);
      Object object0 = new Object();
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken0 = new UsernamePasswordAuthenticationToken(object0, "- td");
      Boolean boolean0 = Boolean.valueOf("- td");
      // Undeclared exception!
      try { 
        tokenProvider0.createToken(usernamePasswordAuthenticationToken0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64-encoded secret key cannot be null or empty.
         //
         verifyException("io.jsonwebtoken.lang.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      TokenProvider tokenProvider0 = new TokenProvider(jHipsterProperties0);
      Injector.executePostConstruct((Object) tokenProvider0, (Class<?>) TokenProvider.class);
      // Undeclared exception!
      try { 
        tokenProvider0.getAuthentication("?c +#^K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // signing key cannot be null or empty.
         //
         verifyException("io.jsonwebtoken.lang.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      TokenProvider tokenProvider0 = new TokenProvider(jHipsterProperties0);
      Injector.executePostConstruct((Object) tokenProvider0, (Class<?>) TokenProvider.class);
      boolean boolean0 = tokenProvider0.validateToken("?c +#^K");
      assertFalse(boolean0);
  }
}
