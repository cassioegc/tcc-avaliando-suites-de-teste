/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Mar 25 02:05:47 GMT 2021
 */

package com.unifacisa.tcc.security.jwt;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class JWTConfigurer_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.unifacisa.tcc.security.jwt.JWTConfigurer"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/cassioegc/tcc/tcc-manager"); 
    java.lang.System.setProperty("user.home", "/home/cassioegc"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "cassioegc"); 
    java.lang.System.setProperty("user.timezone", "America/Recife"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(JWTConfigurer_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer",
      "org.springframework.beans.factory.HierarchicalBeanFactory",
      "org.springframework.web.context.ServletContextAware",
      "org.springframework.security.core.userdetails.UserDetailsService",
      "org.springframework.security.authentication.AuthenticationProvider",
      "org.springframework.security.web.DefaultSecurityFilterChain",
      "org.springframework.security.config.annotation.web.builders.HttpSecurity",
      "org.springframework.security.config.annotation.ObjectPostProcessor",
      "com.unifacisa.tcc.security.jwt.JWTConfigurer",
      "org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer",
      "org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer",
      "org.springframework.security.config.annotation.web.configurers.JeeConfigurer",
      "org.springframework.core.env.PropertyResolver",
      "org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter",
      "org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor",
      "org.springframework.web.filter.GenericFilterBean",
      "org.springframework.security.config.annotation.SecurityConfigurer",
      "org.springframework.context.ApplicationEventPublisher",
      "org.springframework.security.config.annotation.web.configurers.SecurityContextConfigurer",
      "org.springframework.core.NestedRuntimeException",
      "org.springframework.core.io.ResourceLoader",
      "org.springframework.security.config.annotation.AlreadyBuiltException",
      "org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer",
      "org.springframework.security.config.annotation.SecurityConfigurerAdapter",
      "org.springframework.security.web.util.matcher.RequestMatcher",
      "org.springframework.security.config.annotation.SecurityBuilder",
      "org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter",
      "org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer$ChannelRequestMatcherRegistry",
      "org.springframework.core.env.Environment",
      "org.springframework.beans.factory.DisposableBean",
      "org.springframework.security.config.annotation.web.HttpSecurityBuilder",
      "org.springframework.beans.PropertyValues",
      "org.springframework.beans.factory.ListableBeanFactory",
      "org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$AuthorizedUrl",
      "org.springframework.security.config.annotation.web.configurers.RememberMeConfigurer",
      "org.springframework.security.config.annotation.web.configurers.RequestCacheConfigurer",
      "org.springframework.security.config.annotation.web.AbstractRequestMatcherRegistry",
      "org.springframework.security.config.annotation.web.configurers.ServletApiConfigurer",
      "org.springframework.security.config.annotation.web.configurers.AbstractConfigAttributeRequestMatcherRegistry",
      "org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer$RequiresChannelUrl",
      "org.springframework.security.config.annotation.web.configurers.openid.OpenIDLoginConfigurer",
      "org.springframework.security.config.annotation.web.configurers.PortMapperConfigurer",
      "org.springframework.beans.factory.Aware",
      "org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer",
      "org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer",
      "org.springframework.security.config.annotation.web.configurers.HeadersConfigurer",
      "org.springframework.beans.factory.InitializingBean",
      "org.springframework.security.config.annotation.web.configurers.CsrfConfigurer",
      "org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder",
      "org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder",
      "org.springframework.web.util.NestedServletException",
      "org.springframework.core.env.EnvironmentCapable",
      "org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$ExpressionInterceptUrlRegistry",
      "org.springframework.beans.factory.BeanNameAware",
      "org.springframework.security.config.annotation.authentication.ProviderManagerBuilder",
      "org.springframework.context.MessageSource",
      "org.springframework.security.config.annotation.web.configurers.ExpressionUrlAuthorizationConfigurer$MvcMatchersAuthorizedUrl",
      "org.springframework.context.ApplicationEventPublisherAware",
      "org.springframework.security.config.annotation.web.configurers.LogoutConfigurer",
      "com.unifacisa.tcc.security.jwt.JWTFilter",
      "org.springframework.context.MessageSourceAware",
      "org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer",
      "org.springframework.beans.BeansException",
      "org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer$MvcMatchersRequiresChannelUrl",
      "org.springframework.context.ApplicationContext",
      "org.springframework.security.web.SecurityFilterChain",
      "com.unifacisa.tcc.security.jwt.TokenProvider",
      "org.springframework.security.config.annotation.web.builders.HttpSecurity$RequestMatcherConfigurer",
      "org.springframework.context.EnvironmentAware",
      "org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer",
      "org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer$AbstractInterceptUrlRegistry",
      "org.springframework.beans.factory.BeanFactory",
      "org.springframework.security.config.annotation.web.configurers.CorsConfigurer",
      "org.springframework.security.config.annotation.AbstractSecurityBuilder",
      "org.springframework.core.io.support.ResourcePatternResolver",
      "org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer",
      "org.springframework.security.config.annotation.web.configurers.X509Configurer",
      "org.springframework.security.config.annotation.web.configurers.AbstractInterceptUrlConfigurer"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.springframework.security.config.annotation.web.builders.HttpSecurity", false, JWTConfigurer_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(JWTConfigurer_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.springframework.security.config.annotation.SecurityConfigurerAdapter",
      "com.unifacisa.tcc.security.jwt.JWTConfigurer",
      "org.springframework.security.config.annotation.SecurityConfigurerAdapter$CompositeObjectPostProcessor",
      "org.springframework.security.config.annotation.AbstractSecurityBuilder",
      "org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder",
      "org.springframework.security.config.annotation.web.builders.HttpSecurity",
      "org.springframework.web.filter.GenericFilterBean",
      "com.unifacisa.tcc.security.jwt.JWTFilter",
      "com.unifacisa.tcc.security.jwt.TokenProvider",
      "org.springframework.core.OrderComparator",
      "org.springframework.core.annotation.AnnotationAwareOrderComparator",
      "org.springframework.util.ClassUtils",
      "org.springframework.util.Assert",
      "org.springframework.core.annotation.OrderUtils",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.core.annotation.AnnotationUtils",
      "org.springframework.core.annotation.AnnotationUtils$AnnotationCacheKey",
      "org.springframework.util.ConcurrentReferenceHashMap$Restructure"
    );
  }
}
