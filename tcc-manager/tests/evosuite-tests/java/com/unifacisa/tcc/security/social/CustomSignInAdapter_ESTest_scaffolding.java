/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Mar 25 02:08:02 GMT 2021
 */

package com.unifacisa.tcc.security.social;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class CustomSignInAdapter_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.unifacisa.tcc.security.social.CustomSignInAdapter"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/cassioegc/tcc/tcc-manager"); 
    java.lang.System.setProperty("user.home", "/home/cassioegc"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "cassioegc"); 
    java.lang.System.setProperty("user.timezone", "America/Recife"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CustomSignInAdapter_ESTest_scaffolding.class.getClassLoader() ,
      "io.github.jhipster.config.JHipsterProperties$Async",
      "org.springframework.security.core.userdetails.UsernameNotFoundException",
      "org.springframework.social.connect.UserProfile",
      "org.springframework.web.context.request.WebRequest",
      "org.springframework.security.core.userdetails.UserDetailsService",
      "io.github.jhipster.config.JHipsterProperties$Security",
      "org.springframework.social.connect.ConnectionKey",
      "org.springframework.web.context.request.NativeWebRequest",
      "org.springframework.web.context.request.ServletWebRequest",
      "org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy",
      "io.jsonwebtoken.SignatureException",
      "io.github.jhipster.config.JHipsterProperties$Swagger",
      "org.springframework.web.context.request.RequestAttributes",
      "org.springframework.security.core.AuthenticationException",
      "org.springframework.security.core.context.SecurityContextHolder",
      "org.springframework.social.connect.web.SignInAdapter",
      "com.unifacisa.tcc.security.social.CustomSignInAdapter",
      "io.github.jhipster.config.JHipsterProperties$Http",
      "org.springframework.social.connect.ConnectionData",
      "io.github.jhipster.config.JHipsterProperties$Ribbon",
      "io.jsonwebtoken.ClaimJwtException",
      "org.springframework.security.core.GrantedAuthority",
      "io.github.jhipster.config.JHipsterProperties$Gateway",
      "org.springframework.security.core.context.SecurityContext",
      "org.springframework.security.authentication.AbstractAuthenticationToken",
      "io.jsonwebtoken.ExpiredJwtException",
      "io.github.jhipster.config.JHipsterProperties$Social",
      "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
      "org.springframework.security.core.Authentication",
      "io.github.jhipster.config.JHipsterProperties$Cache",
      "io.github.jhipster.config.JHipsterProperties",
      "io.jsonwebtoken.UnsupportedJwtException",
      "org.springframework.boot.context.properties.ConfigurationProperties",
      "org.springframework.web.context.request.AbstractRequestAttributes",
      "io.github.jhipster.config.JHipsterProperties$Mail",
      "org.springframework.security.core.CredentialsContainer",
      "io.github.jhipster.config.JHipsterProperties$Registry",
      "org.springframework.security.core.userdetails.UserDetails",
      "org.springframework.security.core.context.SecurityContextHolderStrategy",
      "org.springframework.security.core.context.SecurityContextImpl",
      "org.springframework.web.cors.CorsConfiguration",
      "org.springframework.social.connect.Connection",
      "org.springframework.web.context.request.ServletRequestAttributes",
      "io.github.jhipster.config.JHipsterProperties$Logging",
      "com.unifacisa.tcc.security.jwt.TokenProvider",
      "org.springframework.stereotype.Component",
      "io.github.jhipster.config.JHipsterProperties$Metrics",
      "io.jsonwebtoken.MalformedJwtException",
      "io.jsonwebtoken.JwtException",
      "org.springframework.security.core.authority.AuthorityUtils",
      "org.springframework.util.StringUtils"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("com.unifacisa.tcc.security.jwt.TokenProvider", false, CustomSignInAdapter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("io.github.jhipster.config.JHipsterProperties", false, CustomSignInAdapter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.springframework.security.core.userdetails.UserDetails", false, CustomSignInAdapter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.springframework.security.core.userdetails.UserDetailsService", false, CustomSignInAdapter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.springframework.social.connect.Connection", false, CustomSignInAdapter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.springframework.web.context.request.NativeWebRequest", false, CustomSignInAdapter_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CustomSignInAdapter_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.unifacisa.tcc.security.social.CustomSignInAdapter",
      "org.springframework.util.StringUtils",
      "org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy",
      "org.springframework.security.core.context.SecurityContextHolder",
      "io.github.jhipster.config.JHipsterProperties",
      "com.unifacisa.tcc.security.jwt.TokenProvider",
      "org.springframework.security.authentication.AbstractAuthenticationToken",
      "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.Assert",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.util.ReflectionUtils$4",
      "org.springframework.util.ReflectionUtils$5",
      "org.springframework.util.ReflectionUtils$6",
      "org.springframework.util.ReflectionUtils",
      "io.github.jhipster.config.JHipsterProperties$Social",
      "org.springframework.social.connect.UserProfile",
      "org.springframework.security.core.context.SecurityContextImpl",
      "org.springframework.security.core.authority.AuthorityUtils",
      "org.springframework.social.connect.support.AbstractConnection",
      "org.springframework.social.connect.support.OAuth1Connection",
      "io.github.jhipster.config.JHipsterProperties$Mail",
      "org.springframework.security.core.AuthenticationException",
      "org.springframework.security.core.userdetails.UsernameNotFoundException",
      "org.springframework.web.context.request.AbstractRequestAttributes",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.springframework.util.ConcurrentReferenceHashMap$4",
      "io.github.jhipster.config.JHipsterProperties$Metrics",
      "io.github.jhipster.config.JHipsterProperties$Metrics$Jmx",
      "io.github.jhipster.config.JHipsterProperties$Metrics$Graphite",
      "io.github.jhipster.config.JHipsterProperties$Metrics$Prometheus",
      "io.github.jhipster.config.JHipsterProperties$Metrics$Logs",
      "org.springframework.http.HttpMethod",
      "org.springframework.web.cors.CorsConfiguration",
      "io.jsonwebtoken.JwtException",
      "io.jsonwebtoken.SignatureException",
      "org.springframework.util.ConcurrentReferenceHashMap$Entries",
      "io.github.jhipster.config.JHipsterProperties$Cache",
      "io.github.jhipster.config.JHipsterProperties$Cache$Hazelcast",
      "io.github.jhipster.config.JHipsterProperties$Cache$Ehcache",
      "io.github.jhipster.config.JHipsterProperties$Cache$Infinispan",
      "io.github.jhipster.config.JHipsterProperties$Cache$Infinispan$Local",
      "io.github.jhipster.config.JHipsterProperties$Cache$Infinispan$Distributed",
      "io.github.jhipster.config.JHipsterProperties$Cache$Infinispan$Replicated",
      "io.github.jhipster.config.JHipsterProperties$Gateway",
      "io.github.jhipster.config.JHipsterProperties$Gateway$RateLimiting"
    );
  }
}
