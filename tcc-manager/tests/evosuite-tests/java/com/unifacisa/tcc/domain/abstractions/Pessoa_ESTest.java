/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:09:39 GMT 2021
 */

package com.unifacisa.tcc.domain.abstractions;

import org.junit.Test;
import static org.junit.Assert.*;
import com.unifacisa.tcc.domain.Aluno;
import com.unifacisa.tcc.domain.Professor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Pessoa_ESTest extends Pessoa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Professor professor0 = new Professor();
      Aluno aluno0 = new Aluno();
      Long long0 = new Long(3L);
      aluno0.setNumeroContato(long0);
      Professor professor1 = professor0.addAluno(aluno0);
      assertNull(professor1.getEmail());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Long long0 = new Long((-2018L));
      aluno0.setMatricula(long0);
      Professor professor0 = new Professor();
      Professor professor1 = professor0.addAluno(aluno0);
      assertNull(professor1.isDiponibilidade());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Long long0 = new Long(33L);
      aluno0.setId(long0);
      aluno0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      aluno0.setEmail("C");
      Professor professor0 = new Professor();
      Professor professor1 = professor0.removeAluno(aluno0);
      assertSame(professor1, professor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Professor professor0 = new Professor();
      boolean boolean0 = professor0.equals(professor0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      aluno0.setSegundoNome("");
      String string0 = aluno0.getSegundoNome();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Professor professor0 = new Professor();
      Long long0 = new Long(0L);
      professor0.setNumeroContato(long0);
      Long long1 = professor0.getNumeroContato();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Professor professor0 = new Professor();
      Long long0 = new Long(1L);
      professor0.setNumeroContato(long0);
      Long long1 = professor0.getNumeroContato();
      assertEquals(1L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Long long0 = new Long(33L);
      aluno0.setId(long0);
      Long long1 = aluno0.getId();
      assertEquals(33L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Long long0 = new Long(0L);
      aluno0.setId(long0);
      Long long1 = aluno0.getId();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Long long0 = Long.getLong("", (-402L));
      aluno0.setId(long0);
      Long long1 = aluno0.getId();
      assertEquals((-402L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Long long0 = new Long((-1L));
      aluno0.setId(long0);
      Long long1 = aluno0.getId();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      aluno0.setEmail("tnS#R k\"");
      String string0 = aluno0.getEmail();
      assertEquals("tnS#R k\"", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Professor professor0 = new Professor();
      Professor professor1 = new Professor();
      assertTrue(professor1.equals((Object)professor0));
      
      professor1.setSegundoNome("WYvbR");
      boolean boolean0 = professor0.equals(professor1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Aluno aluno1 = new Aluno();
      assertTrue(aluno1.equals((Object)aluno0));
      
      Long long0 = new Long(1L);
      aluno0.setNumeroContato(long0);
      boolean boolean0 = aluno0.equals(aluno1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Aluno aluno1 = new Aluno();
      assertTrue(aluno1.equals((Object)aluno0));
      
      Long long0 = new Long((-1292L));
      aluno1.setId(long0);
      boolean boolean0 = aluno0.equals(aluno1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Professor professor0 = new Professor();
      professor0.setPrimeiroNome("READ_WRITE");
      professor0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Long long0 = Long.getLong("", 0L);
      aluno0.setNumeroContato(long0);
      aluno0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      String string0 = aluno0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Professor professor0 = new Professor();
      String string0 = professor0.getPrimeiroNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Professor professor0 = new Professor();
      Long long0 = professor0.getId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Professor professor0 = new Professor();
      Long long0 = professor0.getNumeroContato();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Long long0 = aluno0.getMatricula();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      String string0 = aluno0.getSegundoNome();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Aluno aluno1 = new Aluno();
      assertTrue(aluno1.equals((Object)aluno0));
      
      Long long0 = new Long(1L);
      aluno1.setNumeroContato(long0);
      boolean boolean0 = aluno0.equals(aluno1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      Long long0 = new Long((-1887L));
      Aluno aluno1 = new Aluno();
      assertTrue(aluno1.equals((Object)aluno0));
      
      aluno1.setMatricula(long0);
      boolean boolean0 = aluno0.equals(aluno1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      aluno0.setEmail("");
      Aluno aluno1 = new Aluno();
      boolean boolean0 = aluno1.equals(aluno0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      boolean boolean0 = aluno0.equals("Pro&fes#ortid=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Professor professor0 = new Professor();
      boolean boolean0 = professor0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Aluno aluno0 = new Aluno();
      aluno0.setEmail("");
      aluno0.hashCode();
  }
}
