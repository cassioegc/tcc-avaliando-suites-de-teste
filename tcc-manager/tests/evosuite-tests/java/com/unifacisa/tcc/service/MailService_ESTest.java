/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:58:01 GMT 2021
 */

package com.unifacisa.tcc.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.domain.User;
import com.unifacisa.tcc.service.MailService;
import io.github.jhipster.config.JHipsterProperties;
import javax.mail.internet.MimeMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springframework.context.MessageSource;
import org.springframework.mail.javamail.JavaMailSender;
import org.thymeleaf.spring4.SpringTemplateEngine;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MailService_ESTest extends MailService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JHipsterProperties.Mail jHipsterProperties_Mail0 = mock(JHipsterProperties.Mail.class, new ViolatedAssumptionAnswer());
      doReturn("'V?Q1mh%x").when(jHipsterProperties_Mail0).getFrom();
      JHipsterProperties jHipsterProperties0 = mock(JHipsterProperties.class, new ViolatedAssumptionAnswer());
      doReturn(jHipsterProperties_Mail0).when(jHipsterProperties0).getMail();
      MimeMessage mimeMessage0 = mock(MimeMessage.class, new ViolatedAssumptionAnswer());
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      doReturn(mimeMessage0).when(javaMailSender0).createMimeMessage();
      MessageSource messageSource0 = mock(MessageSource.class, new ViolatedAssumptionAnswer());
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, new ViolatedAssumptionAnswer());
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSender0, messageSource0, springTemplateEngine0);
      mailService0.sendEmail("org.thymeleaf.TemplateEngine.TIMER", "CmWb|#GlI$l\u0004U\"Z{I", "org.thymeleaf.TemplateEngine.TIMER", false, true);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JHipsterProperties.Mail jHipsterProperties_Mail0 = mock(JHipsterProperties.Mail.class, new ViolatedAssumptionAnswer());
      doReturn("").when(jHipsterProperties_Mail0).getBaseUrl();
      JHipsterProperties jHipsterProperties0 = mock(JHipsterProperties.class, new ViolatedAssumptionAnswer());
      doReturn(jHipsterProperties_Mail0, (JHipsterProperties.Mail) null, (JHipsterProperties.Mail) null).when(jHipsterProperties0).getMail();
      MimeMessage mimeMessage0 = mock(MimeMessage.class, new ViolatedAssumptionAnswer());
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      doReturn(mimeMessage0, mimeMessage0).when(javaMailSender0).createMimeMessage();
      MessageSource messageSource0 = mock(MessageSource.class, new ViolatedAssumptionAnswer());
      doReturn("|CG[c6J9?j{'BZ:").when(messageSource0).getMessage(anyString() , any(java.lang.Object[].class) , any(java.util.Locale.class));
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, new ViolatedAssumptionAnswer());
      doReturn("").when(springTemplateEngine0).process(anyString() , any(org.thymeleaf.context.IContext.class));
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSender0, messageSource0, springTemplateEngine0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("", "C)#)X))X*").when(user0).getEmail();
      doReturn("").when(user0).getLangKey();
      mailService0.sendActivationEmail(user0);
      mailService0.sendEmail("org.thymeleaf.TemplateEngine.TIMER", "", "", false, false);
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user1).getEmail();
      doReturn("bE").when(user1).getLangKey();
      // Undeclared exception!
      try { 
        mailService0.sendPasswordResetMail(user1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.MailService", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JHipsterProperties.Mail jHipsterProperties_Mail0 = mock(JHipsterProperties.Mail.class, new ViolatedAssumptionAnswer());
      doReturn("'V?Q1mh%x").when(jHipsterProperties_Mail0).getFrom();
      JHipsterProperties jHipsterProperties0 = mock(JHipsterProperties.class, new ViolatedAssumptionAnswer());
      doReturn(jHipsterProperties_Mail0).when(jHipsterProperties0).getMail();
      MimeMessage mimeMessage0 = mock(MimeMessage.class, new ViolatedAssumptionAnswer());
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      doReturn(mimeMessage0).when(javaMailSender0).createMimeMessage();
      MessageSource messageSource0 = mock(MessageSource.class, new ViolatedAssumptionAnswer());
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, new ViolatedAssumptionAnswer());
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSender0, messageSource0, springTemplateEngine0);
      mailService0.sendEmail("org.thymeleaf.TemplateEngine.TIMER", ">V@", "", false, false);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JHipsterProperties.Mail jHipsterProperties_Mail0 = mock(JHipsterProperties.Mail.class, new ViolatedAssumptionAnswer());
      doReturn("'V?Q1mh%x").when(jHipsterProperties_Mail0).getBaseUrl();
      JHipsterProperties jHipsterProperties0 = mock(JHipsterProperties.class, new ViolatedAssumptionAnswer());
      doReturn(jHipsterProperties_Mail0).when(jHipsterProperties0).getMail();
      MimeMessage mimeMessage0 = mock(MimeMessage.class, new ViolatedAssumptionAnswer());
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      doReturn(mimeMessage0).when(javaMailSender0).createMimeMessage();
      MessageSource messageSource0 = mock(MessageSource.class, new ViolatedAssumptionAnswer());
      doReturn("t%8!kafe\"oJN I&egs").when(messageSource0).getMessage(anyString() , any(java.lang.Object[].class) , any(java.util.Locale.class));
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, new ViolatedAssumptionAnswer());
      doReturn("t%8!kafe\"oJN I&egs").when(springTemplateEngine0).process(anyString() , any(org.thymeleaf.context.IContext.class));
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSender0, messageSource0, springTemplateEngine0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn(">V@", "]prnz@Y/vl(").when(user0).getEmail();
      doReturn("").when(user0).getLangKey();
      mailService0.sendCreationEmail(user0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = mock(JHipsterProperties.class, new ViolatedAssumptionAnswer());
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      MessageSource messageSource0 = mock(MessageSource.class, new ViolatedAssumptionAnswer());
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, new ViolatedAssumptionAnswer());
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSender0, messageSource0, springTemplateEngine0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getEmail();
      doReturn((String) null).when(user0).getLangKey();
      // Undeclared exception!
      try { 
        mailService0.sendSocialRegistrationValidationEmail(user0, "org.thymeleaf.TemplateEngine.TIMER");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = mock(JHipsterProperties.class, new ViolatedAssumptionAnswer());
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      MessageSource messageSource0 = mock(MessageSource.class, new ViolatedAssumptionAnswer());
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, new ViolatedAssumptionAnswer());
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSender0, messageSource0, springTemplateEngine0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getLangKey();
      // Undeclared exception!
      try { 
        mailService0.sendEmailFromTemplate(user0, "org.thymeleaf.TemplateEngine.TIMER", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = mock(JHipsterProperties.class, new ViolatedAssumptionAnswer());
      MessageSource messageSource0 = mock(MessageSource.class, new ViolatedAssumptionAnswer());
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, new ViolatedAssumptionAnswer());
      MailService mailService0 = new MailService(jHipsterProperties0, (JavaMailSender) null, messageSource0, springTemplateEngine0);
      // Undeclared exception!
      try { 
        mailService0.sendEmail("org.thymeleaf.TemplateEngine.TIMER", "org.thymeleaf.TemplateEngine.TIMER", "org.thymeleaf.TemplateEngine.TIMER", true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.MailService", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      JHipsterProperties.Mail jHipsterProperties_Mail0 = mock(JHipsterProperties.Mail.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jHipsterProperties_Mail0).getBaseUrl();
      JHipsterProperties jHipsterProperties0 = mock(JHipsterProperties.class, new ViolatedAssumptionAnswer());
      doReturn(jHipsterProperties_Mail0).when(jHipsterProperties0).getMail();
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      doReturn((MimeMessage) null).when(javaMailSender0).createMimeMessage();
      MessageSource messageSource0 = mock(MessageSource.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(messageSource0).getMessage(anyString() , any(java.lang.Object[].class) , any(java.util.Locale.class));
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(springTemplateEngine0).process(anyString() , any(org.thymeleaf.context.IContext.class));
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSender0, messageSource0, springTemplateEngine0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getEmail();
      doReturn("org.thymeleaf.TemplateEngine.TIMER").when(user0).getLangKey();
      mailService0.sendEmailFromTemplate(user0, (String) null, "2");
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = mock(JHipsterProperties.class, new ViolatedAssumptionAnswer());
      MimeMessage mimeMessage0 = mock(MimeMessage.class, new ViolatedAssumptionAnswer());
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      doReturn(mimeMessage0).when(javaMailSender0).createMimeMessage();
      MessageSource messageSource0 = mock(MessageSource.class, new ViolatedAssumptionAnswer());
      doReturn("'V?Q1mh%x").when(messageSource0).getMessage(anyString() , any(java.lang.Object[].class) , any(java.util.Locale.class));
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, new ViolatedAssumptionAnswer());
      doReturn("'V?Q1mh%x").when(springTemplateEngine0).process(anyString() , any(org.thymeleaf.context.IContext.class));
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSender0, messageSource0, springTemplateEngine0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("No available conversion for target class \"", "Email could not be sent to user '{}'").when(user0).getEmail();
      doReturn("Email could not be sent to user '{}'").when(user0).getLangKey();
      mailService0.sendSocialRegistrationValidationEmail(user0, "org.thymeleaf.TemplateEngine.TIMER");
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      JHipsterProperties jHipsterProperties0 = mock(JHipsterProperties.class, new ViolatedAssumptionAnswer());
      JavaMailSender javaMailSender0 = mock(JavaMailSender.class, new ViolatedAssumptionAnswer());
      SpringTemplateEngine springTemplateEngine0 = mock(SpringTemplateEngine.class, new ViolatedAssumptionAnswer());
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSender0, (MessageSource) null, springTemplateEngine0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getEmail();
      doReturn((String) null).when(user0).getLangKey();
      // Undeclared exception!
      try { 
        mailService0.sendCreationEmail(user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
