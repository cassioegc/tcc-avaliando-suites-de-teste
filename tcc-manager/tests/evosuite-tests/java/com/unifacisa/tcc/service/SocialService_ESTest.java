/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:13:50 GMT 2021
 */

package com.unifacisa.tcc.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.repository.AuthorityRepository;
import com.unifacisa.tcc.repository.UserRepository;
import com.unifacisa.tcc.service.MailService;
import com.unifacisa.tcc.service.SocialService;
import io.github.jhipster.config.JHipsterProperties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.h2.jdbcx.JdbcConnectionPool;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGPoolingDataSource;
import org.postgresql.ds.PGSimpleDataSource;
import org.postgresql.jdbc3.Jdbc3SimpleDataSource;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.security.crypto.encrypt.TextEncryptor;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;
import org.springframework.security.crypto.password.StandardPasswordEncoder;
import org.springframework.social.connect.ApiAdapter;
import org.springframework.social.connect.Connection;
import org.springframework.social.connect.ConnectionFactoryLocator;
import org.springframework.social.connect.UserProfile;
import org.springframework.social.connect.UsersConnectionRepository;
import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;
import org.springframework.social.connect.mem.InMemoryUsersConnectionRepository;
import org.springframework.social.connect.support.OAuth1Connection;
import org.springframework.social.oauth1.OAuth1ServiceProvider;
import org.springframework.social.security.SocialAuthenticationServiceRegistry;
import org.springframework.web.context.support.StaticWebApplicationContext;
import org.thymeleaf.spring4.SpringTemplateEngine;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SocialService_ESTest extends SocialService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PGPoolingDataSource pGPoolingDataSource0 = new PGPoolingDataSource();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(pGPoolingDataSource0, (ConnectionFactoryLocator) null, textEncryptor0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder(stringBuilder0, 0, 0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      GenericXmlApplicationContext genericXmlApplicationContext0 = new GenericXmlApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService((JHipsterProperties) null, javaMailSenderImpl0, genericXmlApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, (AuthorityRepository) null, pbkdf2PasswordEncoder0, userRepository0, mailService0);
      OAuth1ServiceProvider<SocialService> oAuth1ServiceProvider0 = (OAuth1ServiceProvider<SocialService>) mock(OAuth1ServiceProvider.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(oAuth1ServiceProvider0).getApi(anyString() , anyString());
      ApiAdapter<SocialService> apiAdapter0 = (ApiAdapter<SocialService>) mock(ApiAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((UserProfile) null).when(apiAdapter0).fetchUserProfile(any(com.unifacisa.tcc.service.SocialService.class));
      OAuth1Connection<SocialService> oAuth1Connection0 = new OAuth1Connection<SocialService>(",dwqj]t6", "applicationEventMulticaster", "org.thymeleaf.TemplateEngine.TIMER", ",dwqj]t6", oAuth1ServiceProvider0, apiAdapter0);
      // Undeclared exception!
      try { 
        socialService0.createSocialUser(oAuth1Connection0, "'NO*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.SocialService", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository((ConnectionFactoryLocator) null);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      MailService mailService0 = new MailService(jHipsterProperties0, (JavaMailSender) null, (MessageSource) null, (SpringTemplateEngine) null);
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, (PasswordEncoder) null, (UserRepository) null, mailService0);
      socialService0.deleteUserSocialConnection("z}+GoRpb");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          PGSimpleDataSource pGSimpleDataSource0 = new PGSimpleDataSource();
          SocialAuthenticationServiceRegistry socialAuthenticationServiceRegistry0 = new SocialAuthenticationServiceRegistry();
          TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
          JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(pGSimpleDataSource0, socialAuthenticationServiceRegistry0, textEncryptor0);
          AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
          StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder();
          UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
          SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, standardPasswordEncoder0, userRepository0, (MailService) null);
          // Undeclared exception!
          try { 
            socialService0.deleteUserSocialConnection("Vqjc[R6&^PNd'R");
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // Could not get JDBC Connection; nested exception is org.postgresql.util.PSQLException: Something unusual has occurred to cause the driver to fail. Please report this exception.
             //
             verifyException("org.springframework.jdbc.datasource.DataSourceUtils", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("*1,4cs", (String) null, "Ngd=SDfK2x#c");
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(jdbcConnectionPool0, (ConnectionFactoryLocator) null, textEncryptor0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, (MessageSource) null, springTemplateEngine0);
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, passwordEncoder0, userRepository0, mailService0);
      // Undeclared exception!
      try { 
        socialService0.deleteUserSocialConnection("Ngd=SDfK2x#c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Jdbc3SimpleDataSource jdbc3SimpleDataSource0 = new Jdbc3SimpleDataSource();
      SocialAuthenticationServiceRegistry socialAuthenticationServiceRegistry0 = new SocialAuthenticationServiceRegistry();
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(jdbc3SimpleDataSource0, socialAuthenticationServiceRegistry0, (TextEncryptor) null);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      AnnotationConfigApplicationContext annotationConfigApplicationContext0 = new AnnotationConfigApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService((JHipsterProperties) null, javaMailSenderImpl0, annotationConfigApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, standardPasswordEncoder0, userRepository0, mailService0);
      // Undeclared exception!
      try { 
        socialService0.deleteUserSocialConnection((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // userId cannot be null
         //
         verifyException("org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      StaticWebApplicationContext staticWebApplicationContext0 = new StaticWebApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, staticWebApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService((UsersConnectionRepository) null, authorityRepository0, passwordEncoder0, userRepository0, mailService0);
      // Undeclared exception!
      try { 
        socialService0.createSocialUser((Connection<?>) null, "\"7->ZcHq5q}A1b&`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Connection cannot be null
         //
         verifyException("com.unifacisa.tcc.service.SocialService", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      AnnotationConfigApplicationContext annotationConfigApplicationContext0 = new AnnotationConfigApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, annotationConfigApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService((UsersConnectionRepository) null, authorityRepository0, (PasswordEncoder) null, userRepository0, mailService0);
      // Undeclared exception!
      try { 
        socialService0.deleteUserSocialConnection("lifecycleProcessor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.SocialService", e);
      }
  }
}
