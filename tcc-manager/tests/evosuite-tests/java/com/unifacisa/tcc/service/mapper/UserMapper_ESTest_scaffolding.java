/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Thu Mar 25 01:52:09 GMT 2021
 */

package com.unifacisa.tcc.service.mapper;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class UserMapper_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.unifacisa.tcc.service.mapper.UserMapper"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/cassioegc/tcc/tcc-manager"); 
    java.lang.System.setProperty("user.home", "/home/cassioegc"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "cassioegc"); 
    java.lang.System.setProperty("user.timezone", "America/Recife"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(UserMapper_ESTest_scaffolding.class.getClassLoader() ,
      "org.aspectj.lang.reflect.SourceLocation",
      "org.springframework.util.ConcurrentReferenceHashMap$Reference",
      "org.aspectj.runtime.reflect.UnlockSignatureImpl",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.apache.commons.lang3.StringUtils",
      "org.aspectj.runtime.reflect.LockSignatureImpl",
      "org.aspectj.lang.reflect.AdviceSignature",
      "org.hibernate.envers.RelationTargetAuditMode",
      "org.hibernate.envers.Audited",
      "org.aspectj.lang.annotation.Aspect",
      "org.aspectj.runtime.reflect.SignatureImpl",
      "org.springframework.core.MethodParameter",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment$1",
      "org.hibernate.cache.spi.access.AccessType",
      "org.springframework.data.jpa.domain.support.AuditingEntityListener",
      "org.springframework.core.ResolvableType",
      "org.springframework.core.NestedExceptionUtils",
      "org.springframework.beans.factory.aspectj.ConfigurableObject",
      "org.springframework.core.NestedRuntimeException",
      "org.aspectj.lang.reflect.UnlockSignature",
      "com.unifacisa.tcc.service.dto.UserDTO",
      "com.unifacisa.tcc.domain.Authority",
      "org.hibernate.cache.spi.access.UnknownAccessTypeException",
      "org.aspectj.lang.reflect.FieldSignature",
      "org.aspectj.lang.Signature",
      "org.springframework.beans.factory.annotation.Autowire",
      "org.aspectj.runtime.reflect.MethodSignatureImpl",
      "org.springframework.core.SerializableTypeWrapper$TypeProvider",
      "org.springframework.beans.factory.DisposableBean",
      "org.aspectj.lang.reflect.ConstructorSignature",
      "org.springframework.core.ResolvableType$VariableResolver",
      "org.hibernate.HibernateException",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.aspectj.runtime.reflect.InitializerSignatureImpl",
      "com.unifacisa.tcc.service.mapper.UserMapper",
      "org.aspectj.lang.reflect.MemberSignature",
      "org.aspectj.lang.reflect.CatchClauseSignature",
      "org.springframework.beans.factory.wiring.BeanConfigurerSupport",
      "com.unifacisa.tcc.domain.User",
      "org.aspectj.runtime.reflect.CodeSignatureImpl",
      "org.aspectj.runtime.reflect.AdviceSignatureImpl",
      "org.springframework.beans.factory.wiring.BeanWiringInfoResolver",
      "org.aspectj.runtime.reflect.Factory",
      "org.aspectj.runtime.reflect.SourceLocationImpl",
      "org.springframework.beans.factory.annotation.Configurable",
      "org.aspectj.lang.reflect.LockSignature",
      "org.springframework.beans.factory.Aware",
      "com.unifacisa.tcc.domain.AbstractAuditingEntity",
      "org.springframework.beans.factory.InitializingBean",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.aspectj.runtime.reflect.MemberSignatureImpl",
      "org.aspectj.runtime.reflect.SignatureImpl$Cache",
      "org.springframework.beans.factory.BeanCreationException",
      "org.springframework.stereotype.Service",
      "org.springframework.beans.factory.BeanFactoryAware",
      "org.aspectj.runtime.reflect.ConstructorSignatureImpl",
      "org.aspectj.lang.JoinPoint$StaticPart",
      "org.aspectj.runtime.reflect.CatchClauseSignatureImpl",
      "org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect",
      "org.aspectj.lang.reflect.CodeSignature",
      "org.springframework.beans.factory.aspectj.AbstractInterfaceDrivenDependencyInjectionAspect",
      "org.aspectj.lang.JoinPoint",
      "org.springframework.beans.factory.aspectj.AbstractDependencyInjectionAspect",
      "org.springframework.util.ConcurrentReferenceHashMap$1",
      "org.springframework.util.ConcurrentReferenceHashMap$2",
      "org.aspectj.runtime.reflect.JoinPointImpl$StaticPartImpl",
      "org.springframework.util.ConcurrentReferenceHashMap$3",
      "org.aspectj.runtime.reflect.FieldSignatureImpl",
      "org.springframework.util.ConcurrentReferenceHashMap$4",
      "org.springframework.beans.FatalBeanException",
      "org.aspectj.lang.JoinPoint$EnclosingStaticPart",
      "org.hibernate.annotations.CacheConcurrencyStrategy",
      "org.springframework.util.ConcurrentReferenceHashMap$Entries",
      "org.hibernate.envers.ModificationStore",
      "org.springframework.beans.BeansException",
      "org.springframework.beans.factory.wiring.BeanWiringInfo",
      "org.aspectj.lang.reflect.InitializerSignature",
      "org.aspectj.runtime.reflect.StringMaker",
      "org.hibernate.annotations.Cache",
      "org.aspectj.lang.NoAspectBoundException",
      "org.springframework.beans.factory.ObjectFactory",
      "org.springframework.stereotype.Component",
      "org.springframework.core.ResolvableType$1",
      "org.springframework.beans.factory.BeanFactory",
      "org.springframework.beans.factory.NoSuchBeanDefinitionException",
      "org.springframework.beans.factory.aspectj.AbstractInterfaceDrivenDependencyInjectionAspect$ConfigurableDeserializationSupport",
      "org.aspectj.lang.reflect.MethodSignature",
      "org.springframework.util.ConcurrentReferenceHashMap$5",
      "org.springframework.util.Assert"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(UserMapper_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.unifacisa.tcc.service.mapper.UserMapper",
      "org.hibernate.cache.spi.access.AccessType",
      "org.hibernate.annotations.CacheConcurrencyStrategy",
      "org.hibernate.envers.ModificationStore",
      "org.hibernate.envers.RelationTargetAuditMode",
      "com.unifacisa.tcc.domain.AbstractAuditingEntity",
      "com.unifacisa.tcc.domain.User",
      "com.unifacisa.tcc.service.dto.UserDTO",
      "org.apache.commons.lang3.StringUtils",
      "com.unifacisa.tcc.domain.Authority"
    );
  }
}
