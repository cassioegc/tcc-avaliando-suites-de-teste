/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 02:05:22 GMT 2021
 */

package com.unifacisa.tcc.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.config.audit.AuditEventConverter;
import com.unifacisa.tcc.domain.PersistentAuditEvent;
import com.unifacisa.tcc.repository.PersistenceAuditEventRepository;
import com.unifacisa.tcc.service.AuditEventService;
import java.time.Instant;
import java.util.Map;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;
import org.springframework.boot.actuate.audit.AuditEvent;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AuditEventService_ESTest extends AuditEventService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(persistenceAuditEventRepository0).findAllByAuditEventDateBetween(any(java.time.Instant.class) , any(java.time.Instant.class) , any(org.springframework.data.domain.Pageable.class));
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService(persistenceAuditEventRepository0, auditEventConverter0);
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Instant instant1 = MockInstant.minusNanos(instant0, (-847L));
      PageRequest pageRequest0 = new PageRequest(1, 1915);
      // Undeclared exception!
      try { 
        auditEventService0.findByDates(instant1, instant0, pageRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.AuditEventService", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Page<PersistentAuditEvent> page0 = (Page<PersistentAuditEvent>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(page0).map(nullable(org.springframework.core.convert.converter.Converter.class));
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(persistenceAuditEventRepository0).findAllByAuditEventDateBetween(any(java.time.Instant.class) , any(java.time.Instant.class) , any(org.springframework.data.domain.Pageable.class));
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService(persistenceAuditEventRepository0, auditEventConverter0);
      Instant instant0 = MockInstant.ofEpochSecond((-505L), (-2549L));
      Sort.Order sort_Order0 = new Sort.Order("MHn'B_");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "MHn'B_";
      stringArray0[1] = "MHn'B_";
      stringArray0[2] = "MHn'B_";
      stringArray0[3] = "MHn'B_";
      stringArray0[4] = "MHn'B_";
      stringArray0[5] = "MHn'B_";
      stringArray0[6] = "MHn'B_";
      stringArray0[7] = "MHn'B_";
      stringArray0[8] = "rV$5bt5nUb71n:Ry*O";
      Sort sort0 = sort_Order0.withProperties(stringArray0);
      PageRequest pageRequest0 = new PageRequest(0, 963, sort0);
      Page<AuditEvent> page1 = auditEventService0.findByDates(instant0, instant0, pageRequest0);
      assertNull(page1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Page<PersistentAuditEvent> page0 = (Page<PersistentAuditEvent>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(page0).map(nullable(org.springframework.core.convert.converter.Converter.class));
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(persistenceAuditEventRepository0).findAll(any(org.springframework.data.domain.Pageable.class));
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService(persistenceAuditEventRepository0, auditEventConverter0);
      PageRequest pageRequest0 = new PageRequest(2824, 2824);
      Page<AuditEvent> page1 = auditEventService0.findAll(pageRequest0);
      assertNull(page1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService((PersistenceAuditEventRepository) null, auditEventConverter0);
      PageRequest pageRequest0 = new PageRequest(0, 956);
      // Undeclared exception!
      try { 
        auditEventService0.findAll(pageRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.AuditEventService", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService((PersistenceAuditEventRepository) null, auditEventConverter0);
      Long long0 = new Long(470L);
      // Undeclared exception!
      try { 
        auditEventService0.find(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.AuditEventService", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1719L);
      PersistentAuditEvent persistentAuditEvent0 = mock(PersistentAuditEvent.class, new ViolatedAssumptionAnswer());
      doReturn(instant0).when(persistentAuditEvent0).getAuditEventDate();
      doReturn((String) null).when(persistentAuditEvent0).getAuditEventType();
      doReturn((Map) null).when(persistentAuditEvent0).getData();
      doReturn((String) null).when(persistentAuditEvent0).getPrincipal();
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn(persistentAuditEvent0).when(persistenceAuditEventRepository0).findOne(anyLong());
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService(persistenceAuditEventRepository0, auditEventConverter0);
      Long long0 = new Long((-2944L));
      // Undeclared exception!
      try { 
        auditEventService0.find(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Principal must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PersistenceAuditEventRepository persistenceAuditEventRepository0 = mock(PersistenceAuditEventRepository.class, new ViolatedAssumptionAnswer());
      doReturn((PersistentAuditEvent) null).when(persistenceAuditEventRepository0).findOne(anyLong());
      AuditEventConverter auditEventConverter0 = new AuditEventConverter();
      AuditEventService auditEventService0 = new AuditEventService(persistenceAuditEventRepository0, auditEventConverter0);
      Optional<AuditEvent> optional0 = auditEventService0.find((Long) null);
      assertNotNull(optional0);
  }
}
