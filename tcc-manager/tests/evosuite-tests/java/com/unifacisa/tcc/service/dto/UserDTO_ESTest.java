/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 02:09:49 GMT 2021
 */

package com.unifacisa.tcc.service.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.domain.Authority;
import com.unifacisa.tcc.domain.User;
import com.unifacisa.tcc.service.dto.UserDTO;
import java.time.Clock;
import java.time.Instant;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserDTO_ESTest extends UserDTO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = new Long((-1747L));
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, (String) null, (String) null, (String) null, "", true, "", "", (String) null, (Instant) null, "", (Instant) null, set0);
      userDTO1.isActivated();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      userDTO0.setLogin("org.apache.commons.io.IOCase");
      userDTO0.getLogin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      User user0 = new User();
      Instant instant0 = user0.getLastModifiedDate();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO((Long) null, "", "com.unifacisa.tcc.service.dto.UserDTO", "", "", true, "x0<*!bCID3Mo2%n@~", "com.unifacisa.tcc.service.dto.UserDTO", "x0<*!bCID3Mo2%n@~", instant0, "", instant0, set0);
      userDTO1.getLogin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = new Long(1L);
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, "", "H>VVsGp&", "RZvyG", "The size must be non-negative", false, ", activated=", "", "", (Instant) null, "", (Instant) null, set0);
      String string0 = userDTO1.getLastName();
      assertEquals("", userDTO1.getLangKey());
      assertEquals("", userDTO1.getLogin());
      assertEquals("The size must be non-negative", userDTO1.getEmail());
      assertEquals("", userDTO1.getCreatedBy());
      assertEquals("H>VVsGp&", userDTO1.getFirstName());
      assertEquals(", activated=", userDTO1.getImageUrl());
      assertEquals("", userDTO1.getLastModifiedBy());
      assertFalse(userDTO1.isActivated());
      assertEquals("RZvyG", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long((-1095L));
      User user0 = new User();
      Instant instant0 = user0.getCreatedDate();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, "", "", "", "", true, "$7eZXba](DnrCI", "", "", instant0, "DEYcWYy=Pt_k-ba0IwG", instant0, set0);
      String string0 = userDTO1.getLastName();
      assertEquals("$7eZXba](DnrCI", userDTO1.getImageUrl());
      assertTrue(userDTO1.isActivated());
      assertEquals("", userDTO1.getEmail());
      assertEquals("DEYcWYy=Pt_k-ba0IwG", userDTO1.getLastModifiedBy());
      assertEquals("", string0);
      assertEquals("", userDTO1.getFirstName());
      assertEquals("", userDTO1.getLangKey());
      assertEquals("", userDTO1.getCreatedBy());
      assertEquals("", userDTO1.getLogin());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      userDTO0.getLastModifiedDate();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long((-1747L));
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, "&vOm, g ", "", ".eer8Ofdh=}yb$I%", ".eer8Ofdh=}yb$I%", true, "W~", ", lastModifiedDate=", "", (Instant) null, ".eer8Ofdh=}yb$I%", (Instant) null, set0);
      String string0 = userDTO1.getLastModifiedBy();
      assertTrue(userDTO1.isActivated());
      assertEquals("W~", userDTO1.getImageUrl());
      assertEquals(", lastModifiedDate=", userDTO1.getLangKey());
      assertEquals("", userDTO1.getCreatedBy());
      assertEquals(".eer8Ofdh=}yb$I%", string0);
      assertEquals(".eer8Ofdh=}yb$I%", userDTO1.getLastName());
      assertEquals("&vOm, g ", userDTO1.getLogin());
      assertEquals(".eer8Ofdh=}yb$I%", userDTO1.getEmail());
      assertEquals("", userDTO1.getFirstName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long(413L);
      Instant instant0 = MockInstant.ofEpochMilli(413L);
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, "P@yiZsuChT#9eRC1P", "B`\")x0L,$X3lQ", "P@yiZsuChT#9eRC1P", "P@yiZsuChT#9eRC1P", true, "B`\")x0L,$X3lQ", "P@yiZsuChT#9eRC1P", "", instant0, "", instant0, set0);
      String string0 = userDTO1.getLastModifiedBy();
      assertEquals("B`\")x0L,$X3lQ", userDTO1.getFirstName());
      assertEquals("P@yiZsuChT#9eRC1P", userDTO1.getLogin());
      assertEquals("B`\")x0L,$X3lQ", userDTO1.getImageUrl());
      assertEquals("", string0);
      assertEquals("", userDTO1.getCreatedBy());
      assertEquals("P@yiZsuChT#9eRC1P", userDTO1.getLastName());
      assertEquals("P@yiZsuChT#9eRC1P", userDTO1.getLangKey());
      assertEquals("P@yiZsuChT#9eRC1P", userDTO1.getEmail());
      assertTrue(userDTO1.isActivated());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long(487L);
      Instant instant0 = MockInstant.ofEpochMilli(2348L);
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, "o4$y5hV\"(_", "", "o4$y5hV\"(_", "B;h328OC3X/dr>Fc", true, "", "nXCS&i", "qlj{E#N8OkZqNTVYk81", instant0, "%X-*tndeN?&", instant0, set0);
      String string0 = userDTO1.getLangKey();
      assertEquals("", userDTO1.getFirstName());
      assertEquals("%X-*tndeN?&", userDTO1.getLastModifiedBy());
      assertEquals("o4$y5hV\"(_", userDTO1.getLastName());
      assertEquals("o4$y5hV\"(_", userDTO1.getLogin());
      assertEquals("", userDTO1.getImageUrl());
      assertEquals("B;h328OC3X/dr>Fc", userDTO1.getEmail());
      assertEquals("qlj{E#N8OkZqNTVYk81", userDTO1.getCreatedBy());
      assertEquals("nXCS&i", string0);
      assertTrue(userDTO1.isActivated());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long((-1747L));
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, (String) null, (String) null, (String) null, "", true, "", "", (String) null, (Instant) null, "", (Instant) null, set0);
      String string0 = userDTO1.getLangKey();
      assertTrue(userDTO1.isActivated());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long(0L);
      User user0 = new User();
      Instant instant0 = user0.getLastModifiedDate();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, "4&]L", (String) null, "Q&&zd?y{r)m$p^:I6W", "T!_wD|&", true, ", lastModifiedBy='", "", "{OIeQ*vj^!", instant0, ", lastModifiedBy='", instant0, set0);
      String string0 = userDTO1.getImageUrl();
      assertEquals("T!_wD|&", userDTO1.getEmail());
      assertEquals("{OIeQ*vj^!", userDTO1.getCreatedBy());
      assertEquals(", lastModifiedBy='", userDTO1.getLastModifiedBy());
      assertEquals(", lastModifiedBy='", string0);
      assertTrue(userDTO1.isActivated());
      assertEquals("4&]L", userDTO1.getLogin());
      assertEquals("Q&&zd?y{r)m$p^:I6W", userDTO1.getLastName());
      assertEquals("", userDTO1.getLangKey());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(0L);
      User user0 = new User();
      Instant instant0 = user0.getCreatedDate();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, "", "", "", ", lastName='", true, "", "#0BCmhZ", "", instant0, "dluh\"", instant0, set0);
      String string0 = userDTO1.getImageUrl();
      assertEquals("", userDTO1.getLogin());
      assertTrue(userDTO1.isActivated());
      assertEquals("", userDTO1.getFirstName());
      assertEquals("", userDTO1.getLastName());
      assertEquals("dluh\"", userDTO1.getLastModifiedBy());
      assertEquals(", lastName='", userDTO1.getEmail());
      assertEquals("#0BCmhZ", userDTO1.getLangKey());
      assertEquals("", string0);
      assertEquals("", userDTO1.getCreatedBy());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      Long long0 = new Long(0L);
      userDTO0.setId(long0);
      userDTO0.getId();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      Long long0 = new Long((-171L));
      userDTO0.setId(long0);
      userDTO0.getId();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(1208L);
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      UserDTO userDTO0 = new UserDTO(long0, (String) null, "", "", "c`*,", true, "", "c`*,", "c`*,", instant0, "The FilenameFilter must not be null", instant0, (Set<String>) null);
      userDTO0.getId();
      assertEquals("c`*,", userDTO0.getCreatedBy());
      assertEquals("", userDTO0.getImageUrl());
      assertEquals("", userDTO0.getFirstName());
      assertEquals("", userDTO0.getLastName());
      assertEquals("c`*,", userDTO0.getLangKey());
      assertEquals("c`*,", userDTO0.getEmail());
      assertTrue(userDTO0.isActivated());
      assertEquals("The FilenameFilter must not be null", userDTO0.getLastModifiedBy());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Long long0 = new Long(1L);
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, "", "H>VVsGp&", "RZvyG", "The size must be non-negative", false, ", activated=", "", "", (Instant) null, "", (Instant) null, set0);
      String string0 = userDTO1.getFirstName();
      assertEquals("", userDTO1.getLastModifiedBy());
      assertEquals("RZvyG", userDTO1.getLastName());
      assertEquals(", activated=", userDTO1.getImageUrl());
      assertEquals("", userDTO1.getLangKey());
      assertFalse(userDTO1.isActivated());
      assertEquals("H>VVsGp&", string0);
      assertEquals("", userDTO1.getLogin());
      assertEquals("The size must be non-negative", userDTO1.getEmail());
      assertEquals("", userDTO1.getCreatedBy());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long(0L);
      User user0 = new User();
      Instant instant0 = user0.getLastModifiedDate();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, "4&]L", (String) null, "Q&&zd?y{r)m$p^:I6W", "T!_wD|&", true, ", lastModifiedBy='", "", "{OIeQ*vj^!", instant0, ", lastModifiedBy='", instant0, set0);
      String string0 = userDTO1.getEmail();
      assertEquals("{OIeQ*vj^!", userDTO1.getCreatedBy());
      assertEquals(", lastModifiedBy='", userDTO1.getImageUrl());
      assertEquals("4&]L", userDTO1.getLogin());
      assertEquals("Q&&zd?y{r)m$p^:I6W", userDTO1.getLastName());
      assertEquals("T!_wD|&", string0);
      assertEquals("", userDTO1.getLangKey());
      assertTrue(userDTO1.isActivated());
      assertNotNull(string0);
      assertEquals(", lastModifiedBy='", userDTO1.getLastModifiedBy());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      User user0 = new User();
      Instant instant0 = user0.getLastModifiedDate();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO((Long) null, "", "com.unifacisa.tcc.service.dto.UserDTO", "", "", true, "x0<*!bCID3Mo2%n@~", "com.unifacisa.tcc.service.dto.UserDTO", "x0<*!bCID3Mo2%n@~", instant0, "", instant0, set0);
      String string0 = userDTO1.getEmail();
      assertEquals("com.unifacisa.tcc.service.dto.UserDTO", userDTO1.getFirstName());
      assertEquals("x0<*!bCID3Mo2%n@~", userDTO1.getImageUrl());
      assertTrue(userDTO1.isActivated());
      assertEquals("", userDTO1.getLastName());
      assertEquals("x0<*!bCID3Mo2%n@~", userDTO1.getCreatedBy());
      assertEquals("", string0);
      assertEquals("com.unifacisa.tcc.service.dto.UserDTO", userDTO1.getLangKey());
      assertEquals("", userDTO1.getLogin());
      assertEquals("", userDTO1.getLastModifiedBy());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      userDTO0.getCreatedDate();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Long long0 = new Long(1208L);
      Clock clock0 = MockClock.systemDefaultZone();
      Instant instant0 = MockInstant.now(clock0);
      UserDTO userDTO0 = new UserDTO(long0, (String) null, "", "", "c`*,", true, "", "c`*,", "c`*,", instant0, "The FilenameFilter must not be null", instant0, (Set<String>) null);
      String string0 = userDTO0.getCreatedBy();
      assertEquals("c`*,", string0);
      assertTrue(userDTO0.isActivated());
      assertEquals("c`*,", userDTO0.getEmail());
      assertEquals("", userDTO0.getFirstName());
      assertEquals("c`*,", userDTO0.getLangKey());
      assertEquals("", userDTO0.getImageUrl());
      assertEquals("", userDTO0.getLastName());
      assertNotNull(string0);
      assertEquals("The FilenameFilter must not be null", userDTO0.getLastModifiedBy());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      User user0 = new User();
      user0.setCreatedBy("");
      UserDTO userDTO0 = new UserDTO(user0);
      String string0 = userDTO0.getCreatedBy();
      assertFalse(userDTO0.isActivated());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      userDTO0.getAuthorities();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      User user0 = new User();
      LinkedHashSet<Authority> linkedHashSet0 = new LinkedHashSet<Authority>();
      Authority authority0 = mock(Authority.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(authority0).getName();
      linkedHashSet0.add(authority0);
      user0.setAuthorities(linkedHashSet0);
      UserDTO userDTO0 = new UserDTO(user0);
      userDTO0.getAuthorities();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UserDTO userDTO0 = null;
      try {
        userDTO0 = new UserDTO((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.dto.UserDTO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Long long0 = new Long(487L);
      Instant instant0 = MockInstant.ofEpochMilli(2348L);
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO(long0, "o4$y5hV\"(_", "", "o4$y5hV\"(_", "B;h328OC3X/dr>Fc", true, "", "nXCS&i", "qlj{E#N8OkZqNTVYk81", instant0, "%X-*tndeN?&", instant0, set0);
      String string0 = userDTO1.getFirstName();
      assertEquals("o4$y5hV\"(_", userDTO1.getLastName());
      assertTrue(userDTO1.isActivated());
      assertEquals("qlj{E#N8OkZqNTVYk81", userDTO1.getCreatedBy());
      assertEquals("nXCS&i", userDTO1.getLangKey());
      assertEquals("", userDTO1.getImageUrl());
      assertEquals("B;h328OC3X/dr>Fc", userDTO1.getEmail());
      assertEquals("", string0);
      assertEquals("%X-*tndeN?&", userDTO1.getLastModifiedBy());
      assertEquals("o4$y5hV\"(_", userDTO1.getLogin());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      String string0 = userDTO0.toString();
      assertEquals("UserDTO{login='null', firstName='null', lastName='null', email='null', imageUrl='null', activated=false, langKey='null', createdBy=null, createdDate=null, lastModifiedBy='null', lastModifiedDate=null, authorities=null}", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      userDTO0.getLastModifiedDate();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      userDTO0.getLastModifiedBy();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      userDTO0.getLogin();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      userDTO0.getCreatedDate();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      userDTO0.getFirstName();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      userDTO0.getCreatedBy();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      userDTO0.getEmail();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      userDTO0.setLastModifiedDate((Instant) null);
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      userDTO0.getLastName();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      userDTO0.getId();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      userDTO0.getLangKey();
      assertFalse(userDTO0.isActivated());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      boolean boolean0 = userDTO0.isActivated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UserDTO userDTO0 = new UserDTO();
      userDTO0.getImageUrl();
      assertFalse(userDTO0.isActivated());
  }
}
