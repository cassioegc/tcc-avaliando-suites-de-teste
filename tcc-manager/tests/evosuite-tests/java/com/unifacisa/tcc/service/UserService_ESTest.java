/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 25 01:54:05 GMT 2021
 */

package com.unifacisa.tcc.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.unifacisa.tcc.domain.Authority;
import com.unifacisa.tcc.domain.User;
import com.unifacisa.tcc.repository.AuthorityRepository;
import com.unifacisa.tcc.repository.UserRepository;
import com.unifacisa.tcc.service.MailService;
import com.unifacisa.tcc.service.SocialService;
import com.unifacisa.tcc.service.UserService;
import com.unifacisa.tcc.service.dto.UserDTO;
import com.zaxxer.hikari.HikariDataSource;
import io.github.jhipster.config.JHipsterProperties;
import java.nio.CharBuffer;
import java.time.Instant;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import javax.servlet.ServletContext;
import javax.sql.ConnectionPoolDataSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.h2.jdbcx.JdbcConnectionPool;
import org.junit.runner.RunWith;
import org.postgresql.core.NativeQuery;
import org.postgresql.ds.PGConnectionPoolDataSource;
import org.postgresql.ds.PGSimpleDataSource;
import org.postgresql.jdbc3.Jdbc3PoolingDataSource;
import org.postgresql.jdbc3.Jdbc3SimpleDataSource;
import org.springframework.cache.CacheManager;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;
import org.springframework.cache.guava.GuavaCacheManager;
import org.springframework.cache.jcache.JCacheCacheManager;
import org.springframework.cache.support.CompositeCacheManager;
import org.springframework.cache.support.NoOpCacheManager;
import org.springframework.cache.support.SimpleCacheManager;
import org.springframework.cache.transaction.TransactionAwareCacheManagerProxy;
import org.springframework.context.MessageSource;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.support.DelegatingMessageSource;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.context.support.GenericGroovyApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;
import org.springframework.context.support.StaticMessageSource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.security.crypto.encrypt.TextEncryptor;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;
import org.springframework.security.crypto.password.StandardPasswordEncoder;
import org.springframework.social.connect.ConnectionFactoryLocator;
import org.springframework.social.connect.UsersConnectionRepository;
import org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository;
import org.springframework.social.connect.mem.InMemoryUsersConnectionRepository;
import org.springframework.social.connect.support.ConnectionFactoryRegistry;
import org.springframework.social.security.SocialAuthenticationServiceRegistry;
import org.springframework.web.context.support.GenericWebApplicationContext;
import org.thymeleaf.spring4.SpringTemplateEngine;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserService_ESTest extends UserService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneByLogin(anyString());
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(connectionFactoryRegistry0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      ClassPathXmlApplicationContext classPathXmlApplicationContext0 = new ClassPathXmlApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, classPathXmlApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, passwordEncoder0, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      UserService userService0 = new UserService(userRepository0, passwordEncoder0, socialService0, authorityRepository1, (CacheManager) null);
      userService0.updateUser("applicationEventMulticaster", "", "", "TYPE_NAME", "XbzF`%Q'W$CM~");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder();
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(authorityRepository0).findOne(anyString());
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, (SocialService) null, authorityRepository0, (CacheManager) null);
      // Undeclared exception!
      userService0.createUser("Invalid scope class", "", "Invalid scope class", "Invalid scope class", "en", ".i@vAf K5U", "");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository((ConnectionFactoryLocator) null);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, passwordEncoder0, userRepository0, (MailService) null);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(authorityRepository1).findOne(anyString());
      ConcurrentMapCacheManager concurrentMapCacheManager0 = new ConcurrentMapCacheManager();
      UserService userService0 = new UserService(userRepository0, passwordEncoder0, socialService0, authorityRepository1, concurrentMapCacheManager0);
      // Undeclared exception!
      userService0.createUser((String) null, "", (String) null, "S/x", "Bean name must not be null", "", "V#x/&o");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(userRepository0).findAllByActivatedIsFalseAndCreatedDateBefore(any(java.time.Instant.class));
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      StaticMessageSource staticMessageSource0 = new StaticMessageSource();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, staticMessageSource0, springTemplateEngine0);
      SocialService socialService0 = new SocialService((UsersConnectionRepository) null, authorityRepository0, passwordEncoder0, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      javax.cache.CacheManager cacheManager0 = mock(javax.cache.CacheManager.class, new ViolatedAssumptionAnswer());
      JCacheCacheManager jCacheCacheManager0 = new JCacheCacheManager(cacheManager0);
      UserService userService0 = new UserService(userRepository0, passwordEncoder0, socialService0, authorityRepository1, jCacheCacheManager0);
      // Undeclared exception!
      try { 
        userService0.removeNotActivatedUsers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneByResetKey(anyString());
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder();
      PGSimpleDataSource pGSimpleDataSource0 = new PGSimpleDataSource();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(pGSimpleDataSource0, connectionFactoryRegistry0, textEncryptor0);
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, (AuthorityRepository) null, pbkdf2PasswordEncoder0, userRepository0, (MailService) null);
      SimpleCacheManager simpleCacheManager0 = new SimpleCacheManager();
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, socialService0, (AuthorityRepository) null, simpleCacheManager0);
      // Undeclared exception!
      try { 
        userService0.completePasswordReset("Deleting not activated user {}", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Jdbc3PoolingDataSource jdbc3PoolingDataSource0 = new Jdbc3PoolingDataSource();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(jdbc3PoolingDataSource0, connectionFactoryRegistry0, textEncryptor0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      FileSystemXmlApplicationContext fileSystemXmlApplicationContext0 = new FileSystemXmlApplicationContext("9Ps8=Qy8=8s?+xjG");
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, fileSystemXmlApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, (PasswordEncoder) null, (UserRepository) null, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      CompositeCacheManager compositeCacheManager0 = new CompositeCacheManager();
      UserService userService0 = new UserService((UserRepository) null, (PasswordEncoder) null, socialService0, authorityRepository1, compositeCacheManager0);
      // Undeclared exception!
      try { 
        userService0.updateUser("", "smtp", "oq`1=\",n:qs C", "=p=2SCDL", "=p=2SCDL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      SocialAuthenticationServiceRegistry socialAuthenticationServiceRegistry0 = new SocialAuthenticationServiceRegistry();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(jdbcConnectionPool0, socialAuthenticationServiceRegistry0, textEncryptor0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      GenericWebApplicationContext genericWebApplicationContext0 = new GenericWebApplicationContext((ServletContext) null);
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, genericWebApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, pbkdf2PasswordEncoder0, (UserRepository) null, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      javax.cache.CacheManager cacheManager0 = mock(javax.cache.CacheManager.class, new ViolatedAssumptionAnswer());
      JCacheCacheManager jCacheCacheManager0 = new JCacheCacheManager(cacheManager0);
      UserService userService0 = new UserService((UserRepository) null, pbkdf2PasswordEncoder0, socialService0, authorityRepository1, jCacheCacheManager0);
      // Undeclared exception!
      try { 
        userService0.getUserWithAuthoritiesByLogin("org.springframework.cache.ehcache.EhCacheCacheManager");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder(charBuffer0);
      HikariDataSource hikariDataSource0 = new HikariDataSource();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(hikariDataSource0, connectionFactoryRegistry0, textEncryptor0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      GenericApplicationContext genericApplicationContext0 = new GenericApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, genericApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, pbkdf2PasswordEncoder0, (UserRepository) null, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JCacheCacheManager jCacheCacheManager0 = new JCacheCacheManager();
      UserService userService0 = new UserService((UserRepository) null, pbkdf2PasswordEncoder0, socialService0, authorityRepository1, jCacheCacheManager0);
      Long long0 = new Long((-1));
      // Undeclared exception!
      try { 
        userService0.getUserWithAuthorities(long0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder();
      Jdbc3SimpleDataSource jdbc3SimpleDataSource0 = new Jdbc3SimpleDataSource();
      SocialAuthenticationServiceRegistry socialAuthenticationServiceRegistry0 = new SocialAuthenticationServiceRegistry();
      TextEncryptor textEncryptor0 = mock(TextEncryptor.class, new ViolatedAssumptionAnswer());
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(jdbc3SimpleDataSource0, socialAuthenticationServiceRegistry0, textEncryptor0);
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      DelegatingMessageSource delegatingMessageSource0 = new DelegatingMessageSource();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, delegatingMessageSource0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, (AuthorityRepository) null, standardPasswordEncoder0, (UserRepository) null, mailService0);
      NoOpCacheManager noOpCacheManager0 = new NoOpCacheManager();
      UserService userService0 = new UserService((UserRepository) null, standardPasswordEncoder0, socialService0, (AuthorityRepository) null, noOpCacheManager0);
      // Undeclared exception!
      try { 
        userService0.getUserWithAuthorities();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(userRepository0).findAllByLoginNot(any(org.springframework.data.domain.Pageable.class) , anyString());
      SocialAuthenticationServiceRegistry socialAuthenticationServiceRegistry0 = new SocialAuthenticationServiceRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(socialAuthenticationServiceRegistry0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      String[] stringArray0 = new String[0];
      ClassPathXmlApplicationContext classPathXmlApplicationContext0 = new ClassPathXmlApplicationContext(stringArray0);
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, classPathXmlApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, (PasswordEncoder) null, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      GuavaCacheManager guavaCacheManager0 = new GuavaCacheManager(stringArray0);
      UserService userService0 = new UserService(userRepository0, (PasswordEncoder) null, socialService0, authorityRepository1, guavaCacheManager0);
      PageRequest pageRequest0 = new PageRequest(549, 549);
      // Undeclared exception!
      try { 
        userService0.getAllManagedUsers(pageRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(connectionFactoryRegistry0);
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, (MessageSource) null, springTemplateEngine0);
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, (AuthorityRepository) null, passwordEncoder0, userRepository0, mailService0);
      CacheManager[] cacheManagerArray0 = new CacheManager[0];
      CompositeCacheManager compositeCacheManager0 = new CompositeCacheManager(cacheManagerArray0);
      UserService userService0 = new UserService(userRepository0, passwordEncoder0, socialService0, (AuthorityRepository) null, compositeCacheManager0);
      // Undeclared exception!
      try { 
        userService0.createUser("r&g`wd[kAS", "r&g`wd[kAS", "D)", "org.thymeleaf.TemplateEngine.TIMER", "r&g`wd[kAS", "smtp", "D)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer();
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder(stringBuffer0, 0, 0);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create(")R$mrZF", "+U_", "com.google.common.cache.LocalCache$Strength");
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      JdbcUsersConnectionRepository jdbcUsersConnectionRepository0 = new JdbcUsersConnectionRepository(jdbcConnectionPool0, connectionFactoryRegistry0, (TextEncryptor) null);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      ClassPathXmlApplicationContext classPathXmlApplicationContext0 = new ClassPathXmlApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, classPathXmlApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(jdbcUsersConnectionRepository0, authorityRepository0, pbkdf2PasswordEncoder0, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(authorityRepository1).findOne(anyString());
      String[] stringArray0 = new String[7];
      stringArray0[0] = "com.google.common.cache.LocalCache$Strength";
      stringArray0[1] = "applicationEventMulticaster";
      stringArray0[2] = "lifecycleProcessor";
      stringArray0[3] = "org.thymeleaf.TemplateEngine.TIMER";
      stringArray0[4] = "+U_";
      stringArray0[5] = "lifecycleProcessor";
      stringArray0[6] = ")R$mrZF";
      GuavaCacheManager guavaCacheManager0 = new GuavaCacheManager(stringArray0);
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, socialService0, authorityRepository1, guavaCacheManager0);
      // Undeclared exception!
      try { 
        userService0.createUser("org.thymeleaf.TemplateEngine.TIMER", "nD*)q[jH0H0s)~94", "nD*)q[jH0H0s)~94", ")R$mrZF", "lifecycleProcessor", "nD*)q[jH0H0s)~94", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid iterationCount value
         //
         verifyException("javax.crypto.spec.PBEKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder(charBuffer0);
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository((ConnectionFactoryLocator) null);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      GenericXmlApplicationContext genericXmlApplicationContext0 = new GenericXmlApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "messageSource";
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder(charBuffer0, 0, 0);
      stringArray0[1] = "messageSource";
      stringArray0[2] = "lifecycleProcessor";
      GuavaCacheManager guavaCacheManager0 = new GuavaCacheManager(stringArray0);
      MailService mailService0 = new MailService(jHipsterProperties0, (JavaMailSender) null, genericXmlApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, pbkdf2PasswordEncoder0, userRepository0, mailService0);
      UserService userService0 = new UserService(userRepository0, standardPasswordEncoder0, socialService0, (AuthorityRepository) null, guavaCacheManager0);
      // Undeclared exception!
      try { 
        userService0.createUser((UserDTO) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional<User>) null).when(userRepository0).findOneByActivationKey(anyString());
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder();
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, (SocialService) null, authorityRepository0, (CacheManager) null);
      // Undeclared exception!
      try { 
        userService0.activateRegistration("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^@M=";
      GuavaCacheManager guavaCacheManager0 = new GuavaCacheManager(stringArray0);
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder();
      UserService userService0 = new UserService(userRepository0, standardPasswordEncoder0, (SocialService) null, authorityRepository0, guavaCacheManager0);
      UserDTO userDTO0 = new UserDTO();
      // Undeclared exception!
      userService0.createUser(userDTO0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder();
      ConnectionFactoryRegistry connectionFactoryRegistry0 = new ConnectionFactoryRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(connectionFactoryRegistry0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      GenericGroovyApplicationContext genericGroovyApplicationContext0 = new GenericGroovyApplicationContext();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, genericGroovyApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, pbkdf2PasswordEncoder0, userRepository0, mailService0);
      NoOpCacheManager noOpCacheManager0 = new NoOpCacheManager();
      UserRepository userRepository1 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      UserService userService0 = new UserService(userRepository1, pbkdf2PasswordEncoder0, socialService0, authorityRepository1, noOpCacheManager0);
      Instant instant0 = MockInstant.ofEpochMilli(967L);
      User user0 = new User();
      UserDTO userDTO0 = new UserDTO(user0);
      Set<String> set0 = userDTO0.getAuthorities();
      UserDTO userDTO1 = new UserDTO((Long) null, "org.thymeleaf.TemplateEngine.TIMER", "06];O|cn2Fn)", "Activated user: {}", "%", false, "%", "smtp", "en", instant0, "lifecycleProcessor", instant0, set0);
      // Undeclared exception!
      userService0.createUser(userDTO1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      Authority authority0 = new Authority();
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      doReturn(authority0).when(authorityRepository0).findOne(anyString());
      javax.cache.CacheManager cacheManager0 = mock(javax.cache.CacheManager.class, new ViolatedAssumptionAnswer());
      JCacheCacheManager jCacheCacheManager0 = new JCacheCacheManager(cacheManager0);
      UserService userService0 = new UserService(userRepository0, passwordEncoder0, (SocialService) null, authorityRepository0, jCacheCacheManager0);
      // Undeclared exception!
      userService0.createUser("XK", "XK", "B", "79]r??z", (String) null, "w%WkdpsvI.E0WA6", "");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneByLogin(anyString());
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      javax.cache.CacheManager cacheManager0 = mock(javax.cache.CacheManager.class, new ViolatedAssumptionAnswer());
      JCacheCacheManager jCacheCacheManager0 = new JCacheCacheManager(cacheManager0);
      UserService userService0 = new UserService(userRepository0, passwordEncoder0, (SocialService) null, authorityRepository0, jCacheCacheManager0);
      userService0.updateUser("~o+C{tSQ", ",/F3sg", "B", "~o+C{tSQ", (String) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Random.setNextRandom(808);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = NativeQuery.appendBindName(stringBuilder0, 1884);
      stringBuilder1.append((-609L));
      StringBuilder stringBuilder2 = stringBuilder1.append(1424);
      stringBuilder1.append(0);
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder(stringBuilder2);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(authorityRepository0).findAll();
      CompositeCacheManager compositeCacheManager0 = new CompositeCacheManager();
      UserService userService0 = new UserService(userRepository0, standardPasswordEncoder0, (SocialService) null, authorityRepository0, compositeCacheManager0);
      // Undeclared exception!
      try { 
        userService0.getAuthorities();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(userRepository0).findAllByActivatedIsFalseAndCreatedDateBefore(any(java.time.Instant.class));
      CharBuffer charBuffer0 = CharBuffer.allocate(718);
      Pbkdf2PasswordEncoder pbkdf2PasswordEncoder0 = new Pbkdf2PasswordEncoder(charBuffer0, 230, (-3105));
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      UserService userService0 = new UserService(userRepository0, pbkdf2PasswordEncoder0, (SocialService) null, authorityRepository0, (CacheManager) null);
      // Undeclared exception!
      try { 
        userService0.removeNotActivatedUsers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneWithAuthoritiesByLogin(anyString());
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      javax.cache.CacheManager cacheManager0 = mock(javax.cache.CacheManager.class, new ViolatedAssumptionAnswer());
      JCacheCacheManager jCacheCacheManager0 = new JCacheCacheManager(cacheManager0);
      UserService userService0 = new UserService(userRepository0, passwordEncoder0, (SocialService) null, authorityRepository0, jCacheCacheManager0);
      Optional<User> optional0 = userService0.getUserWithAuthoritiesByLogin("");
      assertNull(optional0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Page<User> page0 = (Page<User>) mock(Page.class, new ViolatedAssumptionAnswer());
      doReturn((Page) null).when(page0).map(nullable(org.springframework.core.convert.converter.Converter.class));
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(page0).when(userRepository0).findAllByLoginNot(any(org.springframework.data.domain.Pageable.class) , anyString());
      SocialAuthenticationServiceRegistry socialAuthenticationServiceRegistry0 = new SocialAuthenticationServiceRegistry();
      InMemoryUsersConnectionRepository inMemoryUsersConnectionRepository0 = new InMemoryUsersConnectionRepository(socialAuthenticationServiceRegistry0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JHipsterProperties jHipsterProperties0 = new JHipsterProperties();
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      String[] stringArray0 = new String[0];
      ClassPathXmlApplicationContext classPathXmlApplicationContext0 = new ClassPathXmlApplicationContext(stringArray0);
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService(jHipsterProperties0, javaMailSenderImpl0, classPathXmlApplicationContext0, springTemplateEngine0);
      SocialService socialService0 = new SocialService(inMemoryUsersConnectionRepository0, authorityRepository0, (PasswordEncoder) null, userRepository0, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      GuavaCacheManager guavaCacheManager0 = new GuavaCacheManager(stringArray0);
      UserService userService0 = new UserService(userRepository0, (PasswordEncoder) null, socialService0, authorityRepository1, guavaCacheManager0);
      PageRequest pageRequest0 = new PageRequest(549, 549);
      Page<UserDTO> page1 = userService0.getAllManagedUsers(pageRequest0);
      assertNull(page1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneByEmail(anyString());
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StandardPasswordEncoder standardPasswordEncoder0 = new StandardPasswordEncoder(stringBuilder0);
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      CompositeCacheManager compositeCacheManager0 = new CompositeCacheManager();
      UserService userService0 = new UserService(userRepository0, standardPasswordEncoder0, (SocialService) null, authorityRepository0, compositeCacheManager0);
      // Undeclared exception!
      try { 
        userService0.requestPasswordReset("g%tM,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      JavaMailSenderImpl javaMailSenderImpl0 = new JavaMailSenderImpl();
      SpringTemplateEngine springTemplateEngine0 = new SpringTemplateEngine();
      MailService mailService0 = new MailService((JHipsterProperties) null, javaMailSenderImpl0, (MessageSource) null, springTemplateEngine0);
      SocialService socialService0 = new SocialService((UsersConnectionRepository) null, authorityRepository0, passwordEncoder0, (UserRepository) null, mailService0);
      AuthorityRepository authorityRepository1 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      TransactionAwareCacheManagerProxy transactionAwareCacheManagerProxy0 = new TransactionAwareCacheManagerProxy();
      UserService userService0 = new UserService((UserRepository) null, passwordEncoder0, socialService0, authorityRepository1, transactionAwareCacheManagerProxy0);
      // Undeclared exception!
      try { 
        userService0.deleteUser("smtp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.unifacisa.tcc.service.UserService", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(userRepository0).findOneByLogin(anyString());
      PasswordEncoder passwordEncoder0 = NoOpPasswordEncoder.getInstance();
      AuthorityRepository authorityRepository0 = mock(AuthorityRepository.class, new ViolatedAssumptionAnswer());
      javax.cache.CacheManager cacheManager0 = mock(javax.cache.CacheManager.class, new ViolatedAssumptionAnswer());
      JCacheCacheManager jCacheCacheManager0 = new JCacheCacheManager(cacheManager0);
      UserService userService0 = new UserService(userRepository0, passwordEncoder0, (SocialService) null, authorityRepository0, jCacheCacheManager0);
      userService0.changePassword("");
  }
}
