/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 23 17:50:44 GMT 2021
 */

package lp2.projetofinal.enums;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import lp2.projetofinal.enums.ClassificacaoBluRay;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassificacaoBluRay_ESTest extends ClassificacaoBluRay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassificacaoBluRay[] classificacaoBluRayArray0 = ClassificacaoBluRay.values();
      assertEquals(6, classificacaoBluRayArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassificacaoBluRay classificacaoBluRay0 = ClassificacaoBluRay.valueOf("LIVRE");
      assertEquals(ClassificacaoBluRay.LIVRE, classificacaoBluRay0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassificacaoBluRay.indentificaClassificacao((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lp2.projetofinal.enums.ClassificacaoBluRay", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassificacaoBluRay.indentificaClassificacao("LAv]_# |Ix,lcc");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassificacaoBluRay classificacaoBluRay0 = ClassificacaoBluRay.indentificaClassificacao("DEZ_ANOS");
      assertEquals(ClassificacaoBluRay.DEZ_ANOS, classificacaoBluRay0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassificacaoBluRay classificacaoBluRay0 = ClassificacaoBluRay.indentificaClassificacao("DEZOITO_ANOS");
      assertEquals(ClassificacaoBluRay.DEZOITO_ANOS, classificacaoBluRay0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassificacaoBluRay classificacaoBluRay0 = ClassificacaoBluRay.indentificaClassificacao("DEZESSEIS_ANOS");
      assertEquals(ClassificacaoBluRay.DEZESSEIS_ANOS, classificacaoBluRay0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassificacaoBluRay classificacaoBluRay0 = ClassificacaoBluRay.indentificaClassificacao("LIVRE");
      assertEquals(ClassificacaoBluRay.LIVRE, classificacaoBluRay0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassificacaoBluRay classificacaoBluRay0 = ClassificacaoBluRay.indentificaClassificacao("QUATORZE_ANOS");
      assertEquals(ClassificacaoBluRay.QUATORZE_ANOS, classificacaoBluRay0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassificacaoBluRay classificacaoBluRay0 = ClassificacaoBluRay.indentificaClassificacao("DOZE_ANOS");
      assertEquals(ClassificacaoBluRay.DOZE_ANOS, classificacaoBluRay0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassificacaoBluRay classificacaoBluRay0 = ClassificacaoBluRay.DEZOITO_ANOS;
      String string0 = classificacaoBluRay0.getClassificacao();
      assertEquals("DEZOITO_ANOS", string0);
  }
}
