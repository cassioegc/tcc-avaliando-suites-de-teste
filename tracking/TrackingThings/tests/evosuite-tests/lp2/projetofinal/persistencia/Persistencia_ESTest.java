/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 23 18:02:43 GMT 2021
 */

package lp2.projetofinal.persistencia;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import lp2.projetofinal.entidades.ChaveNomeTelefone;
import lp2.projetofinal.entidades.Emprestimo;
import lp2.projetofinal.entidades.Usuario;
import lp2.projetofinal.persistencia.Persistencia;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Persistencia_ESTest extends Persistencia_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<ChaveNomeTelefone, Usuario> hashMap0 = new HashMap<ChaveNomeTelefone, Usuario>();
      ChaveNomeTelefone chaveNomeTelefone0 = new ChaveNomeTelefone("09@Y&^p]F7EX", "09@Y&^p]F7EX");
      Usuario usuario0 = new Usuario("", "", "");
      hashMap0.put(chaveNomeTelefone0, usuario0);
      Persistencia.salvarUsuarios(hashMap0);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Emprestimo> linkedList0 = new LinkedList<Emprestimo>();
      Persistencia.salvarEmprestimos(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<ChaveNomeTelefone, Usuario> hashMap0 = new HashMap<ChaveNomeTelefone, Usuario>();
      Persistencia.salvarUsuarios(hashMap0);
      Map<ChaveNomeTelefone, Usuario> map0 = Persistencia.carregaUsuarios();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<ChaveNomeTelefone, Usuario> hashMap0 = new HashMap<ChaveNomeTelefone, Usuario>();
      hashMap0.put((ChaveNomeTelefone) null, (Usuario) null);
      Persistencia.salvarUsuarios(hashMap0);
      Map<ChaveNomeTelefone, Usuario> map0 = Persistencia.carregaUsuarios();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Persistencia.carregaUsuarios();
      Map<ChaveNomeTelefone, Usuario> map0 = Persistencia.carregaUsuarios();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Persistencia.carregaEmprestimos();
      List<Emprestimo> list0 = Persistencia.carregaEmprestimos();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Persistencia persistencia0 = new Persistencia();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Persistencia.salvarEmprestimos((List<Emprestimo>) null);
      List<Emprestimo> list0 = Persistencia.carregaEmprestimos();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Persistencia.resetar();
  }
}
