/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 23 17:59:31 GMT 2021
 */

package lp2.projetofinal.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Set;
import lp2.projetofinal.controllers.ControllerUsuario;
import lp2.projetofinal.entidades.Item;
import lp2.projetofinal.entidades.Usuario;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ControllerUsuario_ESTest extends ControllerUsuario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      // Undeclared exception!
      try { 
        controllerUsuario0.atualizaReputacao("", "bIb[iXG?H(`u", 0.0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Usuario invalido
         //
         verifyException("lp2.projetofinal.util.Exceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario(":d\"-", ":d\"-", ":d\"-");
      // Undeclared exception!
      try { 
        controllerUsuario0.atualizarUsuario(":d\"-", ":d\"-", (String) null, ":d\"-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("Nome", "Nome", "Nome");
      // Undeclared exception!
      try { 
        controllerUsuario0.getInfoUsuario("Nome", "Nome", ">vs|moZo%_j>r}[.H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Atributo invalido
         //
         verifyException("lp2.projetofinal.util.Exceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("SUSPENSE", "SUSPENSE", "SUSPENSE");
      controllerUsuario0.removerUsuario("SUSPENSE", "SUSPENSE");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("ULUk", "ULUk", "SYUSPENSE");
      controllerUsuario0.atualizaReputacao("ULUk", "ULUk", 1.0, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("oKr{a||^X!NCn{cu?", "oKr{a||^X!NCn{cu?", (String) null);
      Set<Item> set0 = controllerUsuario0.retornaUsuarioItens("oKr{a||^X!NCn{cu?", "oKr{a||^X!NCn{cu?");
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      String string0 = controllerUsuario0.listarTop10PioresUsuarios();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      String string0 = controllerUsuario0.listarTop10MelhoresUsuarios();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario(": ", ": ", ": ");
      Usuario usuario0 = controllerUsuario0.identificaUsuario(": ", ": ");
      assertEquals(": ", usuario0.getTelefone());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      // Undeclared exception!
      try { 
        controllerUsuario0.verificaFidelidadeUsuario("Nome", "*<Qr[gsM_VAhi$? h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Usuario invalido
         //
         verifyException("lp2.projetofinal.util.Exceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("L{3dzZL5WBi7", "L{3dzZL5WBi7", ":l-.n*,Xasf0T,*5El");
      // Undeclared exception!
      try { 
        controllerUsuario0.cadastrarUsuario((String) null, "lp2.projetofinal.entidades.CartaoNoob", "COMEDIA");
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("lp2.projetofinal.entidades.ChaveNomeTelefone", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      // Undeclared exception!
      try { 
        controllerUsuario0.identificaUsuario("", "PS4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Usuario invalido
         //
         verifyException("lp2.projetofinal.util.Exceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("ROMANCE", "ROMANCE", "ROMANCE");
      String string0 = controllerUsuario0.listarTop10PioresUsuarios();
      assertEquals("1: ROMANCE - Reputacao: 0.00|", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("ROMANCE", "ROMANCE", "ROMANCE");
      String string0 = controllerUsuario0.listarTop10MelhoresUsuarios();
      assertEquals("1: ROMANCE - Reputacao: 0.00|", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("ROMANCE", "ROMANCE", "ROMANCE");
      String string0 = controllerUsuario0.listarCaloteiros();
      assertEquals("Lista de usuarios com reputacao negativa: ", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("Nome", "Nome", "Nome");
      // Undeclared exception!
      try { 
        controllerUsuario0.verificadisponibilidadeUsuario("Nome", "Nome", 552);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Usuario impossiblitado de pegar emprestado por esse periodo
         //
         verifyException("lp2.projetofinal.util.Exceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("Nome", "Nome", "Nome");
      controllerUsuario0.verificadisponibilidadeUsuario("Nome", "Nome", 4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("Email", "Email", "Email");
      controllerUsuario0.verificaFidelidadeUsuario("Email", "Email");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("Email", "Email", "Email");
      controllerUsuario0.atualizarUsuario("Email", "Email", "Email", "Email");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("3R8f8|H)#", "3R8f8|H)#", "3R8f8|H)#");
      // Undeclared exception!
      try { 
        controllerUsuario0.atualizarUsuario("3R8f8|H)#", "3R8f8|H)#", "3R8f8|H)#", "3R8f8|H)#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Atributo invalido
         //
         verifyException("lp2.projetofinal.util.Exceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("Telefone", "Telefone", "Telefone");
      String string0 = controllerUsuario0.getInfoUsuario("Telefone", "Telefone", "Telefone");
      assertEquals("Telefone", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("Email", "Email", "Email");
      String string0 = controllerUsuario0.getInfoUsuario("Email", "Email", "Email");
      assertEquals("Email", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("Cartao", "Cartao", "Cartao");
      String string0 = controllerUsuario0.getInfoUsuario("Cartao", "Cartao", "Cartao");
      assertEquals("FreeRyder", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("Nome", "Nome", "Nome");
      // Undeclared exception!
      try { 
        controllerUsuario0.cadastrarUsuario("Nome", "Nome", "Nome");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Usuario ja cadastrado
         //
         verifyException("lp2.projetofinal.util.Exceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.cadastrarUsuario("ROMANCE", "ROMANCE", "ROMANCE");
      Set<Item> set0 = controllerUsuario0.todosUsuariosItens();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.carregaMapaUsuarios();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      controllerUsuario0.salvarMapaUsuarios();
      controllerUsuario0.carregaMapaUsuarios();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      // Undeclared exception!
      try { 
        controllerUsuario0.retornaUsuarioItens((String) null, "oKr{a||^X!NCn{cu?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Usuario invalido
         //
         verifyException("lp2.projetofinal.util.Exceptions", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ControllerUsuario controllerUsuario0 = new ControllerUsuario();
      // Undeclared exception!
      try { 
        controllerUsuario0.removerUsuario((String) null, "8c8CvjH+0JqU{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Usuario invalido
         //
         verifyException("lp2.projetofinal.util.Exceptions", e);
      }
  }
}
