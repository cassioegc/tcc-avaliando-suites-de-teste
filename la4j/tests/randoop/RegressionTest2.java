import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        java.util.Spliterator<java.lang.Double> doubleSpliterator39 = basic2DMatrix37.spliterator();
        org.la4j.Vector vector40 = basic2DMatrix37.toRowVector();
        org.la4j.Matrix matrix41 = vector40.toColumnMatrix();
        org.la4j.vector.SparseVector sparseVector42 = vector40.toSparseVector();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleSpliterator39);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(sparseVector42);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.DenseVector denseVector12 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        java.lang.String str16 = denseVector15.toString();
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) denseVector12, (org.la4j.Vector) denseVector15);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray24 = cCSMatrix22.foldRows(vectorAccumulator23);
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray24);
        org.la4j.vector.dense.BasicVector basicVector26 = new org.la4j.vector.dense.BasicVector(doubleArray24);
        double[] doubleArray27 = basicVector26.toArray();
        org.la4j.vector.sparse.CompressedVector compressedVector29 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double30 = compressedVector29.euclideanNorm();
        org.la4j.Vector vector32 = compressedVector29.blankOfLength(52);
        boolean boolean34 = basicVector26.equals((org.la4j.Vector) compressedVector29, 7.211102550927978d);
        double double35 = compressedVector29.norm();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix40 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator41 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray42 = cCSMatrix40.foldRows(vectorAccumulator41);
        org.la4j.matrix.DenseMatrix denseMatrix43 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray42);
        org.la4j.vector.dense.BasicVector basicVector44 = new org.la4j.vector.dense.BasicVector(doubleArray42);
        double[] doubleArray45 = basicVector44.toArray();
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double48 = compressedVector47.euclideanNorm();
        org.la4j.Vector vector50 = compressedVector47.blankOfLength(52);
        boolean boolean52 = basicVector44.equals((org.la4j.Vector) compressedVector47, 7.211102550927978d);
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) compressedVector29, (org.la4j.Vector) basicVector44);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseVector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(vector32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(cCSMatrix40);
        org.junit.Assert.assertNotNull(vectorAccumulator41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(vector50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor3 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix4 = qRDecompositor3.self();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        boolean boolean33 = qRDecompositor3.applicableTo(matrix32);
        org.la4j.Matrix[] matrixArray34 = qRDecompositor3.decompose();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(matrixArray34);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Vector vector10 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str11 = vector10.toCSV();
        org.la4j.vector.SparseVector sparseVector12 = vector10.toSparseVector();
        boolean boolean14 = sparseVector12.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator15 = sparseVector12.iterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct16 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator22 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray23 = cCSMatrix21.foldRows(vectorAccumulator22);
        org.la4j.matrix.DenseMatrix denseMatrix24 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray23);
        org.la4j.vector.dense.BasicVector basicVector25 = new org.la4j.vector.dense.BasicVector(doubleArray23);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix30 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator31 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray32 = cCSMatrix30.foldRows(vectorAccumulator31);
        org.la4j.matrix.DenseMatrix denseMatrix33 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray32);
        org.la4j.vector.dense.BasicVector basicVector34 = new org.la4j.vector.dense.BasicVector(doubleArray32);
        ooPlaceOuterProduct16.ensureApplicableTo((org.la4j.Vector) basicVector25, (org.la4j.Vector) basicVector34);
        org.la4j.vector.sparse.CompressedVector compressedVector37 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix38 = compressedVector37.toColumnMatrix();
        org.la4j.Matrix matrix39 = sparseVector12.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct16, (org.la4j.Vector) compressedVector37);
        org.la4j.Vector vector40 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3, sparseVector12);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix43 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double44 = cRSMatrix43.min();
        java.util.Random random46 = null;
        org.la4j.vector.DenseVector denseVector47 = org.la4j.vector.DenseVector.random(0, random46);
        java.lang.String str48 = denseVector47.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector49 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix43, denseVector47);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str11, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(vectorIterator15);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertNotNull(vectorAccumulator22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix24);
        org.junit.Assert.assertNotNull(cCSMatrix30);
        org.junit.Assert.assertNotNull(vectorAccumulator31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix33);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertNotNull(cRSMatrix43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(denseVector47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor4 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix5 = choleskyDecompositor4.self();
        org.la4j.Matrix matrix6 = choleskyDecompositor4.self();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.Vector vector39 = cRSMatrix36.getColumn((-1));
        org.la4j.inversion.GaussJordanInverter gaussJordanInverter40 = new org.la4j.inversion.GaussJordanInverter((org.la4j.Matrix) cRSMatrix36);
        org.la4j.Vector vector43 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str44 = vector43.toCSV();
        org.la4j.vector.SparseVector sparseVector45 = vector43.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix48 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator49 = columnMajorSparseMatrix48.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix54 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double58 = rowMajorSparseMatrix54.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix59 = rowMajorSparseMatrix54.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate60 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean61 = sparseMatrix59.is(advancedMatrixPredicate60);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator63 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double64 = sparseMatrix59.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator63);
        org.la4j.vector.functor.VectorProcedure vectorProcedure65 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator63);
        columnMajorSparseMatrix48.eachNonZeroInRow((-1), vectorProcedure65);
        sparseVector45.eachNonZero(vectorProcedure65);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix36.eachInRow((int) ' ', vectorProcedure65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(vector43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str44, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector45);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrixIterator49);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix59);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure65);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor5 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double6 = cRSMatrix2.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix9 = cRSMatrix2.kroneckerProduct((org.la4j.Matrix) basic2DMatrix8);
        org.la4j.linear.LeastSquaresSolver leastSquaresSolver10 = new org.la4j.linear.LeastSquaresSolver((org.la4j.Matrix) basic2DMatrix8);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix13.shuffle();
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix13.shuffle();
        boolean boolean16 = leastSquaresSolver10.applicableTo((org.la4j.Matrix) rowMajorSparseMatrix13);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix19 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double20 = cRSMatrix19.min();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = cRSMatrix19.toColumnMajorSparseMatrix();
        org.la4j.Matrix matrix22 = columnMajorSparseMatrix21.rotate();
        boolean boolean23 = leastSquaresSolver10.applicableTo((org.la4j.Matrix) columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(cRSMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        double[][] doubleArray40 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray40);
        double[] doubleArray48 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray55 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray62 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray69 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray76 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray77 = new double[][] { doubleArray48, doubleArray55, doubleArray62, doubleArray69, doubleArray76 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix78 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray77);
        basic2DMatrix78.setAll((double) 100);
        org.la4j.Matrix matrix81 = matrixMatrixMatrixOperation1.apply(denseMatrix41, (org.la4j.matrix.DenseMatrix) basic2DMatrix78);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory82 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix83 = basic2DMatrix78.to(basic1DMatrixMatrixFactory82);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix88 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator89 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray90 = cCSMatrix88.foldRows(vectorAccumulator89);
        org.la4j.matrix.DenseMatrix denseMatrix91 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray90);
        org.la4j.vector.dense.BasicVector basicVector92 = new org.la4j.vector.dense.BasicVector(doubleArray90);
        double[] doubleArray93 = basicVector92.toArray();
        org.la4j.Vector vector94 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix83, (org.la4j.vector.DenseVector) basicVector92);
        org.la4j.Matrix matrix96 = basic1DMatrix83.blankOfColumns((int) (short) 100);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(basic2DMatrix78);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory82);
        org.junit.Assert.assertNotNull(basic1DMatrix83);
        org.junit.Assert.assertNotNull(cCSMatrix88);
        org.junit.Assert.assertNotNull(vectorAccumulator89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix91);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector94);
        org.junit.Assert.assertNotNull(matrix96);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double44 = cCSMatrix41.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction46 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix47 = cCSMatrix41.transformRow(10, vectorFunction46);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix50 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator51 = cRSMatrix50.nonZeroIterator();
        org.la4j.Vector vector53 = cRSMatrix50.getColumn(100);
        boolean boolean56 = cRSMatrix50.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor57 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix50);
        org.la4j.Matrix matrix58 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix41, (org.la4j.matrix.SparseMatrix) cRSMatrix50);
        org.la4j.decomposition.LUDecompositor lUDecompositor59 = new org.la4j.decomposition.LUDecompositor((org.la4j.Matrix) cCSMatrix41);
        org.la4j.matrix.DenseMatrix denseMatrix62 = org.la4j.matrix.DenseMatrix.zero((int) '4', (int) '#');
        boolean boolean63 = lUDecompositor59.applicableTo((org.la4j.Matrix) denseMatrix62);
        org.la4j.Matrix[] matrixArray64 = lUDecompositor59.decompose();
        org.la4j.Matrix[] matrixArray65 = lUDecompositor59.decompose();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(cRSMatrix50);
        org.junit.Assert.assertNotNull(matrixIterator51);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(denseMatrix62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(matrixArray64);
        org.junit.Assert.assertNotNull(matrixArray65);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = ooPlaceOuterProduct0.apply(denseVector3, denseVector6);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct8 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.matrix.DenseMatrix denseMatrix16 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray15);
        org.la4j.vector.dense.BasicVector basicVector17 = new org.la4j.vector.dense.BasicVector(doubleArray15);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray24 = cCSMatrix22.foldRows(vectorAccumulator23);
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray24);
        org.la4j.vector.dense.BasicVector basicVector26 = new org.la4j.vector.dense.BasicVector(doubleArray24);
        ooPlaceOuterProduct8.ensureApplicableTo((org.la4j.Vector) basicVector17, (org.la4j.Vector) basicVector26);
        org.la4j.vector.sparse.CompressedVector compressedVector29 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector29.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector34 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix35 = ooPlaceOuterProduct8.apply((org.la4j.vector.SparseVector) compressedVector29, (org.la4j.vector.SparseVector) compressedVector34);
        org.la4j.Matrix matrix36 = compressedVector34.toDiagonalMatrix();
        org.la4j.Vector vector38 = compressedVector34.copyOfLength((int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct39 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.matrix.DenseMatrix denseMatrix47 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray46);
        org.la4j.vector.dense.BasicVector basicVector48 = new org.la4j.vector.dense.BasicVector(doubleArray46);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator54 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray55 = cCSMatrix53.foldRows(vectorAccumulator54);
        org.la4j.matrix.DenseMatrix denseMatrix56 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray55);
        org.la4j.vector.dense.BasicVector basicVector57 = new org.la4j.vector.dense.BasicVector(doubleArray55);
        ooPlaceOuterProduct39.ensureApplicableTo((org.la4j.Vector) basicVector48, (org.la4j.Vector) basicVector57);
        org.la4j.vector.sparse.CompressedVector compressedVector60 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector60.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector65 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix66 = ooPlaceOuterProduct39.apply((org.la4j.vector.SparseVector) compressedVector60, (org.la4j.vector.SparseVector) compressedVector65);
        double double67 = compressedVector65.min();
        org.la4j.Matrix matrix68 = compressedVector65.toColumnMatrix();
        org.la4j.Matrix matrix69 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector34, (org.la4j.vector.SparseVector) compressedVector65);
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation70 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct71 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random73 = null;
        org.la4j.vector.DenseVector denseVector74 = org.la4j.vector.DenseVector.random(0, random73);
        java.util.Random random76 = null;
        org.la4j.vector.DenseVector denseVector77 = org.la4j.vector.DenseVector.random(0, random76);
        org.la4j.Matrix matrix78 = ooPlaceOuterProduct71.apply(denseVector74, denseVector77);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation79 = vectorVectorVectorOperation70.partiallyApply(denseVector74);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector80 = compressedVector34.apply(vectorVectorOperation79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 0 does not equal to 32.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix16);
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(vector38);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix47);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertNotNull(vectorAccumulator54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix56);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation70);
        org.junit.Assert.assertNotNull(denseVector74);
        org.junit.Assert.assertNotNull(denseVector77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(vectorVectorOperation79);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        boolean boolean29 = compressedVector26.isZeroAt((int) (short) 1);
        org.la4j.Vector vector30 = compressedVector26.blank();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(vector30);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = new org.la4j.matrix.dense.Basic1DMatrix((int) (byte) 0, 0);
        byte[] byteArray3 = basic1DMatrix2.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector4 = org.la4j.vector.sparse.CompressedVector.fromBinary(byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CompressedVector from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str5 = basic2DMatrix4.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition6 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix9 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double10 = cRSMatrix9.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition6.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix9, rowMajorSparseMatrix14);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix21 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix22 = ooPlaceMatricesAddition6.apply(columnMajorSparseMatrix19, denseMatrix21);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray26 = columnMajorSparseMatrix25.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation27 = ooPlaceMatricesAddition6.partiallyApply(columnMajorSparseMatrix25);
        org.la4j.Matrix matrix28 = ooPlaceMatrixHadamardProduct1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, columnMajorSparseMatrix25);
        org.la4j.Vector vector30 = columnMajorSparseMatrix25.getRow((int) (short) 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation31 = ooPlaceMatrixHadamardProduct0.partiallyApply(columnMajorSparseMatrix25);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix34 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double35 = columnMajorSparseMatrix34.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory36 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix37 = columnMajorSparseMatrix34.to(basic1DMatrixMatrixFactory36);
        org.la4j.Matrix matrix40 = basic1DMatrix37.copyOfShape((int) (byte) 0, (int) (short) 1);
        basic1DMatrix37.swapRows((int) ' ', (int) (byte) 1);
        org.la4j.Matrix matrix44 = matrixMatrixOperation31.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix37);
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str5, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(denseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(vector30);
        org.junit.Assert.assertNotNull(matrixMatrixOperation31);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory36);
        org.junit.Assert.assertNotNull(basic1DMatrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix44);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor4 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix5 = choleskyDecompositor4.self();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator11 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray12 = cCSMatrix10.foldRows(vectorAccumulator11);
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray12);
        boolean boolean14 = choleskyDecompositor4.applicableTo((org.la4j.Matrix) denseMatrix13);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix15 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction16 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix19 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction20 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean24 = cCSMatrix23.isRowMajor();
        org.la4j.Matrix matrix27 = cCSMatrix23.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator28 = cCSMatrix23.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix32.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix38 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double42 = rowMajorSparseMatrix38.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix43 = rowMajorSparseMatrix38.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct44 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean45 = sparseMatrix43.equals((java.lang.Object) ooPlaceOuterProduct44);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix32.hadamardProduct((org.la4j.Matrix) sparseMatrix43);
        org.la4j.Matrix matrix47 = ooPlaceMatricesSubtraction20.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix23, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix32);
        org.la4j.Matrix matrix48 = ooPlaceMatricesSubtraction16.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix19, rowMajorSparseMatrix32);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor49 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix32);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix51 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix52 = inPlaceCopyMatrixToMatrix15.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix32, (org.la4j.matrix.SparseMatrix) cRSMatrix51);
        org.la4j.matrix.DenseMatrix denseMatrix54 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix59 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator60 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray61 = cCSMatrix59.foldRows(vectorAccumulator60);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix62 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray61);
        double[][] doubleArray63 = basic1DMatrix62.toArray();
        org.la4j.Matrix matrix64 = inPlaceCopyMatrixToMatrix15.apply(denseMatrix54, (org.la4j.matrix.DenseMatrix) basic1DMatrix62);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct65 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix69 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix70 = rowMajorSparseMatrix69.removeLastRow();
        double double74 = rowMajorSparseMatrix69.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int75 = rowMajorSparseMatrix69.cardinality();
        org.la4j.Vector vector77 = rowMajorSparseMatrix69.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix80 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix81 = ooPlaceMatrixHadamardProduct65.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix69, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix80);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition82 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix85 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double86 = cRSMatrix85.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix90 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix91 = rowMajorSparseMatrix90.removeLastRow();
        org.la4j.Matrix matrix92 = ooPlaceMatricesAddition82.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix85, rowMajorSparseMatrix90);
        org.la4j.Matrix matrix93 = inPlaceCopyMatrixToMatrix15.applySimple((org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix80, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix90);
        org.la4j.Matrix matrix95 = rowMajorSparseMatrix90.blankOfRows(52);
        boolean boolean96 = choleskyDecompositor4.applicableTo(matrix95);
        org.la4j.Matrix[] matrixArray97 = choleskyDecompositor4.decompose();
        org.la4j.Matrix[] matrixArray98 = choleskyDecompositor4.decompose();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertNotNull(vectorAccumulator11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(basic2DMatrix19);
        org.junit.Assert.assertNotNull(cCSMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix38);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(cRSMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(denseMatrix54);
        org.junit.Assert.assertNotNull(cCSMatrix59);
        org.junit.Assert.assertNotNull(vectorAccumulator60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 10.0d + "'", double74 == 10.0d);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(vector77);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(cRSMatrix85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(matrixArray97);
        org.junit.Assert.assertNotNull(matrixArray98);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean4 = advancedMatrixPredicate0.test((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.vector.functor.VectorFunction vectorFunction6 = null;
        org.la4j.Matrix matrix7 = columnMajorSparseMatrix3.transformRow(0, vectorFunction6);
        org.la4j.iterator.VectorIterator vectorIterator9 = columnMajorSparseMatrix3.nonZeroIteratorOfRow((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            vectorIterator9.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: This will be supported in 0.6.0.");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vectorIterator9);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix2 = org.la4j.Matrix.randomSymmetric(30, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        boolean boolean5 = sparseVector3.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator6 = sparseVector3.iterator();
        org.la4j.iterator.VectorIterator vectorIterator7 = sparseVector3.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix10 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator11 = cRSMatrix10.nonZeroIterator();
        org.la4j.Vector vector13 = cRSMatrix10.getColumn(100);
        boolean boolean16 = cRSMatrix10.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator18 = cRSMatrix10.nonZeroIteratorOfColumn((-1));
        int int19 = vectorIterator18.index();
        org.la4j.iterator.VectorIterator vectorIterator20 = null;
        org.la4j.iterator.VectorIterator vectorIterator21 = vectorIterator18.andAlsoDivide(vectorIterator20);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix24 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator25 = cRSMatrix24.nonZeroIterator();
        org.la4j.Vector vector27 = cRSMatrix24.getColumn(100);
        boolean boolean30 = cRSMatrix24.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator32 = cRSMatrix24.nonZeroIteratorOfColumn((-1));
        int int33 = vectorIterator32.index();
        org.la4j.iterator.VectorIterator vectorIterator34 = null;
        org.la4j.iterator.VectorIterator vectorIterator35 = vectorIterator32.andAlsoDivide(vectorIterator34);
        org.la4j.iterator.VectorIterator vectorIterator36 = vectorIterator18.andAlsoMultiply(vectorIterator34);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator37 = vectorIterator7.andAlsoDivide(vectorIterator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(vectorIterator6);
        org.junit.Assert.assertNotNull(vectorIterator7);
        org.junit.Assert.assertNotNull(cRSMatrix10);
        org.junit.Assert.assertNotNull(matrixIterator11);
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorIterator18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(vectorIterator21);
        org.junit.Assert.assertNotNull(cRSMatrix24);
        org.junit.Assert.assertNotNull(matrixIterator25);
        org.junit.Assert.assertNotNull(vector27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(vectorIterator32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(vectorIterator35);
        org.junit.Assert.assertNotNull(vectorIterator36);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.vector.dense.BasicVector basicVector25 = new org.la4j.vector.dense.BasicVector((int) (byte) 0);
        org.la4j.Matrix matrix26 = compressedVector2.outerProduct((org.la4j.Vector) basicVector25);
        org.la4j.operation.VectorMatrixOperation<org.la4j.Vector> vectorVectorMatrixOperation27 = org.la4j.LinearAlgebra.OO_PLACE_VECTOR_BY_MATRIX_MULTIPLICATION;
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix30 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator31 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray32 = cCSMatrix30.foldRows(vectorAccumulator31);
        org.la4j.vector.dense.BasicVector basicVector33 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray32);
        org.la4j.Matrix matrix34 = basicVector33.toDiagonalMatrix();
        org.la4j.operation.MatrixOperation<org.la4j.Vector> vectorMatrixOperation35 = vectorVectorMatrixOperation27.partiallyApply((org.la4j.vector.DenseVector) basicVector33);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = basicVector25.cosineSimilarity((org.la4j.Vector) basicVector33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 0 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(vectorVectorMatrixOperation27);
        org.junit.Assert.assertNotNull(cCSMatrix30);
        org.junit.Assert.assertNotNull(vectorAccumulator31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(vectorMatrixOperation35);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate9 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean10 = sparseMatrix8.is(advancedMatrixPredicate9);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator12 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double13 = sparseMatrix8.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator12);
        org.la4j.vector.functor.VectorProcedure vectorProcedure14 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator12);
        vectorProcedure14.apply((int) (byte) 100, (double) (-1.0f));
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure14);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray31 = cCSMatrix29.foldRows(vectorAccumulator30);
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray31);
        org.la4j.vector.dense.BasicVector basicVector33 = new org.la4j.vector.dense.BasicVector(doubleArray31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator39 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray40 = cCSMatrix38.foldRows(vectorAccumulator39);
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray40);
        org.la4j.vector.dense.BasicVector basicVector42 = new org.la4j.vector.dense.BasicVector(doubleArray40);
        ooPlaceOuterProduct24.ensureApplicableTo((org.la4j.Vector) basicVector33, (org.la4j.Vector) basicVector42);
        org.la4j.vector.sparse.CompressedVector compressedVector45 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector45.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector50 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix51 = ooPlaceOuterProduct24.apply((org.la4j.vector.SparseVector) compressedVector45, (org.la4j.vector.SparseVector) compressedVector50);
        boolean boolean53 = compressedVector50.isZeroAt((int) (short) 1);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.Vector vector58 = cRSMatrix56.getColumn(30);
        org.la4j.Vector vector59 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector50, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56);
        org.la4j.Matrix matrix60 = compressedVector50.toDiagonalMatrix();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator61 = matrix60.rowMajorIterator();
        java.text.NumberFormat numberFormat62 = null;
        java.lang.String str63 = matrix60.toMatrixMarket(numberFormat62);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertNotNull(vectorAccumulator39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "%%MatrixMarket matrix coordinate real general row-major\n32 32 0\n" + "'", str63, "%%MatrixMarket matrix coordinate real general row-major\n32 32 0\n");
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct31 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix36 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator37 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray38 = cCSMatrix36.foldRows(vectorAccumulator37);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray38);
        org.la4j.vector.dense.BasicVector basicVector40 = new org.la4j.vector.dense.BasicVector(doubleArray38);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator46 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray47 = cCSMatrix45.foldRows(vectorAccumulator46);
        org.la4j.matrix.DenseMatrix denseMatrix48 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray47);
        org.la4j.vector.dense.BasicVector basicVector49 = new org.la4j.vector.dense.BasicVector(doubleArray47);
        ooPlaceOuterProduct31.ensureApplicableTo((org.la4j.Vector) basicVector40, (org.la4j.Vector) basicVector49);
        org.la4j.vector.sparse.CompressedVector compressedVector52 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector52.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector57 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix58 = ooPlaceOuterProduct31.apply((org.la4j.vector.SparseVector) compressedVector52, (org.la4j.vector.SparseVector) compressedVector57);
        double double59 = compressedVector57.min();
        org.la4j.iterator.VectorIterator vectorIterator60 = compressedVector57.iterator();
        org.la4j.Matrix matrix61 = basicVector9.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct29, (org.la4j.Vector) compressedVector57);
        boolean boolean63 = compressedVector57.nonZeroAt(1);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cCSMatrix36);
        org.junit.Assert.assertNotNull(vectorAccumulator37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertNotNull(vectorAccumulator46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix48);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(vectorIterator60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double16 = denseMatrix15.min();
        double double17 = denseMatrix15.sum();
        org.la4j.Matrix matrix18 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix11, denseMatrix15);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator22 = cRSMatrix21.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation23 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate24 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix27 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean28 = advancedMatrixPredicate24.test((org.la4j.Matrix) columnMajorSparseMatrix27);
        org.la4j.vector.functor.VectorFunction vectorFunction30 = null;
        org.la4j.Matrix matrix31 = columnMajorSparseMatrix27.transformRow(0, vectorFunction30);
        org.la4j.iterator.VectorIterator vectorIterator33 = columnMajorSparseMatrix27.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.Matrix matrix34 = matrixMatrixOperation23.apply(columnMajorSparseMatrix27);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator35 = org.la4j.Vectors.mkMinAccumulator();
        double[] doubleArray36 = matrix34.foldColumns(vectorAccumulator35);
        org.la4j.Vector vector37 = org.la4j.Vector.fromArray(doubleArray36);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertNotNull(matrixIterator22);
        org.junit.Assert.assertNotNull(matrixMatrixOperation23);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate24);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(vectorIterator33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(vectorAccumulator35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(vector37);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory4 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix5 = columnMajorSparseMatrix2.to(basic1DMatrixMatrixFactory4);
        org.la4j.Matrix matrix8 = basic1DMatrix5.copyOfShape((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.sparse.CompressedVector compressedVector10 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat11 = null;
        java.lang.String str12 = compressedVector10.toMatrixMarket(numberFormat11);
        org.la4j.Vector vector14 = compressedVector10.add((double) 52);
        compressedVector10.swapElements((int) (short) 1, (int) (byte) 1);
        org.la4j.Matrix matrix18 = compressedVector10.toColumnMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector19 = basic1DMatrix5.multiply((org.la4j.Vector) compressedVector10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 32 does not equal to 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory4);
        org.junit.Assert.assertNotNull(basic1DMatrix5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str12, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector14);
        org.junit.Assert.assertNotNull(matrix18);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.DenseVector denseVector12 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        java.lang.String str16 = denseVector15.toString();
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) denseVector12, (org.la4j.Vector) denseVector15);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray24 = cCSMatrix22.foldRows(vectorAccumulator23);
        int[] intArray27 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector28 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray24, intArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector29 = denseVector12.select(intArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseVector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10, 100]");
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double33 = denseMatrix32.min();
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix29, denseMatrix32);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct35 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix41 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator42 = cRSMatrix41.nonZeroIterator();
        org.la4j.Vector vector44 = cRSMatrix41.getColumn(100);
        boolean boolean47 = cRSMatrix41.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator49 = cRSMatrix41.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = cRSMatrix41.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix51 = ooPlaceMatrixHadamardProduct35.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix38, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix50);
        double double54 = basic2DMatrix38.get((int) (byte) 10, 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix57 = org.la4j.matrix.sparse.CRSMatrix.zero((int) '4', (int) ' ');
        org.la4j.Matrix matrix58 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic2DMatrix38, (org.la4j.matrix.SparseMatrix) cRSMatrix57);
        basic2DMatrix38.setAll((double) 10.0f);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(cRSMatrix41);
        org.junit.Assert.assertNotNull(matrixIterator42);
        org.junit.Assert.assertNotNull(vector44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(vectorIterator49);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(cRSMatrix57);
        org.junit.Assert.assertNotNull(matrix58);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.zero(30, (int) '4');
        org.junit.Assert.assertNotNull(cRSMatrix2);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor4 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix5 = choleskyDecompositor4.self();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator11 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray12 = cCSMatrix10.foldRows(vectorAccumulator11);
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray12);
        boolean boolean14 = choleskyDecompositor4.applicableTo((org.la4j.Matrix) denseMatrix13);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix15 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction16 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix19 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction20 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean24 = cCSMatrix23.isRowMajor();
        org.la4j.Matrix matrix27 = cCSMatrix23.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator28 = cCSMatrix23.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix32.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix38 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double42 = rowMajorSparseMatrix38.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix43 = rowMajorSparseMatrix38.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct44 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean45 = sparseMatrix43.equals((java.lang.Object) ooPlaceOuterProduct44);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix32.hadamardProduct((org.la4j.Matrix) sparseMatrix43);
        org.la4j.Matrix matrix47 = ooPlaceMatricesSubtraction20.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix23, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix32);
        org.la4j.Matrix matrix48 = ooPlaceMatricesSubtraction16.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix19, rowMajorSparseMatrix32);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor49 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix32);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix51 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix52 = inPlaceCopyMatrixToMatrix15.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix32, (org.la4j.matrix.SparseMatrix) cRSMatrix51);
        org.la4j.matrix.DenseMatrix denseMatrix54 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix59 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator60 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray61 = cCSMatrix59.foldRows(vectorAccumulator60);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix62 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray61);
        double[][] doubleArray63 = basic1DMatrix62.toArray();
        org.la4j.Matrix matrix64 = inPlaceCopyMatrixToMatrix15.apply(denseMatrix54, (org.la4j.matrix.DenseMatrix) basic1DMatrix62);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct65 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix69 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix70 = rowMajorSparseMatrix69.removeLastRow();
        double double74 = rowMajorSparseMatrix69.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int75 = rowMajorSparseMatrix69.cardinality();
        org.la4j.Vector vector77 = rowMajorSparseMatrix69.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix80 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix81 = ooPlaceMatrixHadamardProduct65.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix69, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix80);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition82 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix85 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double86 = cRSMatrix85.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix90 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix91 = rowMajorSparseMatrix90.removeLastRow();
        org.la4j.Matrix matrix92 = ooPlaceMatricesAddition82.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix85, rowMajorSparseMatrix90);
        org.la4j.Matrix matrix93 = inPlaceCopyMatrixToMatrix15.applySimple((org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix80, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix90);
        org.la4j.Matrix matrix95 = rowMajorSparseMatrix90.blankOfRows(52);
        boolean boolean96 = choleskyDecompositor4.applicableTo(matrix95);
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate97 = org.la4j.Matrices.POSITIVE_MATRIX;
        boolean boolean98 = matrix95.non(matrixPredicate97);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertNotNull(vectorAccumulator11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(basic2DMatrix19);
        org.junit.Assert.assertNotNull(cCSMatrix23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix38);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(cRSMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(denseMatrix54);
        org.junit.Assert.assertNotNull(cCSMatrix59);
        org.junit.Assert.assertNotNull(vectorAccumulator60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 10.0d + "'", double74 == 10.0d);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(vector77);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(cRSMatrix85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(matrix93);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(matrixPredicate97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat6 = null;
        java.lang.String str7 = compressedVector5.toMatrixMarket(numberFormat6);
        org.la4j.Vector vector9 = compressedVector5.add((double) 52);
        org.la4j.Vector vector11 = compressedVector5.sliceRight((int) (byte) 10);
        org.la4j.Vector vector12 = ooPlaceVectorHadamardProduct0.apply(denseVector3, (org.la4j.vector.SparseVector) compressedVector5);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        double double16 = denseVector15.product();
        double[] doubleArray17 = denseVector15.toArray();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double25 = rowMajorSparseMatrix21.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix26 = rowMajorSparseMatrix21.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct27 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean28 = sparseMatrix26.equals((java.lang.Object) ooPlaceOuterProduct27);
        org.la4j.vector.DenseVector denseVector30 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random32 = null;
        org.la4j.vector.DenseVector denseVector33 = org.la4j.vector.DenseVector.random(0, random32);
        java.lang.String str34 = denseVector33.toString();
        ooPlaceOuterProduct27.ensureApplicableTo((org.la4j.Vector) denseVector30, (org.la4j.Vector) denseVector33);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct36 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator42 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray43 = cCSMatrix41.foldRows(vectorAccumulator42);
        org.la4j.matrix.DenseMatrix denseMatrix44 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray43);
        org.la4j.vector.dense.BasicVector basicVector45 = new org.la4j.vector.dense.BasicVector(doubleArray43);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix50 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator51 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray52 = cCSMatrix50.foldRows(vectorAccumulator51);
        org.la4j.matrix.DenseMatrix denseMatrix53 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray52);
        org.la4j.vector.dense.BasicVector basicVector54 = new org.la4j.vector.dense.BasicVector(doubleArray52);
        ooPlaceOuterProduct36.ensureApplicableTo((org.la4j.Vector) basicVector45, (org.la4j.Vector) basicVector54);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random58 = null;
        org.la4j.vector.DenseVector denseVector59 = org.la4j.vector.DenseVector.random(0, random58);
        java.util.Random random61 = null;
        org.la4j.vector.DenseVector denseVector62 = org.la4j.vector.DenseVector.random(0, random61);
        org.la4j.Matrix matrix63 = ooPlaceOuterProduct56.apply(denseVector59, denseVector62);
        org.la4j.vector.sparse.CompressedVector compressedVector65 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix66 = ooPlaceOuterProduct36.apply(denseVector59, (org.la4j.vector.SparseVector) compressedVector65);
        java.text.NumberFormat numberFormat67 = null;
        java.lang.String str69 = denseVector59.mkString(numberFormat67, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector71 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double72 = compressedVector71.euclideanNorm();
        org.la4j.Matrix matrix73 = ooPlaceOuterProduct27.apply(denseVector59, (org.la4j.vector.SparseVector) compressedVector71);
        org.la4j.Vector vector74 = ooPlaceVectorHadamardProduct0.apply(denseVector15, (org.la4j.vector.SparseVector) compressedVector71);
        org.la4j.vector.dense.BasicVector basicVector76 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector77 = basicVector76.copy();
        org.la4j.Matrix matrix78 = basicVector76.toDiagonalMatrix();
        org.la4j.Vector vector79 = null;
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceVectorHadamardProduct0.ensureApplicableTo((org.la4j.Vector) basicVector76, vector79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str7, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(denseVector30);
        org.junit.Assert.assertNotNull(denseVector33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertNotNull(vectorAccumulator42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix44);
        org.junit.Assert.assertNotNull(cCSMatrix50);
        org.junit.Assert.assertNotNull(vectorAccumulator51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix53);
        org.junit.Assert.assertNotNull(denseVector59);
        org.junit.Assert.assertNotNull(denseVector62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertNotNull(vector77);
        org.junit.Assert.assertNotNull(matrix78);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.identity((int) 'a');
        org.la4j.inversion.GaussJordanInverter gaussJordanInverter2 = new org.la4j.inversion.GaussJordanInverter((org.la4j.Matrix) basic2DMatrix1);
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication3 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator9 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray10 = cCSMatrix8.foldRows(vectorAccumulator9);
        org.la4j.matrix.DenseMatrix denseMatrix11 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray10);
        org.la4j.vector.dense.BasicVector basicVector13 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector14 = ooPlaceMatrixByVectorMultiplication3.apply(denseMatrix11, (org.la4j.vector.DenseVector) basicVector13);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation15 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray43 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray50 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray51 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43, doubleArray50 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix52 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray51);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation53 = matrixMatrixMatrixOperation15.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix52);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation54 = ooPlaceMatrixByVectorMultiplication3.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix52);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix57 = org.la4j.matrix.sparse.CRSMatrix.diagonal(0, (double) (short) 100);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation58 = ooPlaceMatrixByVectorMultiplication3.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix57);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix61 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator62 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray63 = cCSMatrix61.foldRows(vectorAccumulator62);
        org.la4j.vector.dense.BasicVector basicVector64 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray63);
        org.la4j.Matrix matrix65 = basicVector64.toDiagonalMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector66 = basic2DMatrix1.apply((org.la4j.operation.MatrixVectorOperation<org.la4j.Vector>) ooPlaceMatrixByVectorMultiplication3, (org.la4j.Vector) basicVector64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 52 does not equal to 97.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix1);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertNotNull(vectorAccumulator9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix11);
        org.junit.Assert.assertNotNull(vector14);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(basic2DMatrix52);
        org.junit.Assert.assertNotNull(matrixMatrixOperation53);
        org.junit.Assert.assertNotNull(vectorVectorOperation54);
        org.junit.Assert.assertNotNull(cRSMatrix57);
        org.junit.Assert.assertNotNull(vectorVectorOperation58);
        org.junit.Assert.assertNotNull(cCSMatrix61);
        org.junit.Assert.assertNotNull(vectorAccumulator62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector64);
        org.junit.Assert.assertNotNull(matrix65);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.la4j.vector.dense.BasicVector basicVector2 = org.la4j.vector.dense.BasicVector.constant(0, Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(basicVector2);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        double[] doubleArray2 = null;
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.from1DArray(0, (int) (short) 0, doubleArray2);
        org.junit.Assert.assertNotNull(cRSMatrix3);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector1 = org.la4j.vector.sparse.CompressedVector.fromCSV("%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication41 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.Matrix matrix47 = ooPlaceMatrixByItsTransposeMultiplication41.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation48 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.matrix.functor.MatrixFunction matrixFunction52 = org.la4j.Matrices.asMulFunction((double) 52);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix44.updateAt((int) (short) 0, (int) (short) -1, matrixFunction52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixMatrixOperation48);
        org.junit.Assert.assertNotNull(matrixFunction52);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.la4j.Matrix matrix4 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray7 = matrix4.foldColumns(vectorAccumulator6);
        org.la4j.vector.dense.BasicVector basicVector8 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.vector.DenseVector denseVector9 = org.la4j.vector.DenseVector.fromArray(doubleArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.from1DArray((int) ' ', (int) ' ', doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(denseVector9);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure22 = null;
        rowMajorSparseMatrix20.eachNonZero(matrixProcedure22);
        double[][] doubleArray24 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray24);
        org.la4j.Matrix matrix26 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix20, denseMatrix25);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix27 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction28 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix31 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction32 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean36 = cCSMatrix35.isRowMajor();
        org.la4j.Matrix matrix39 = cCSMatrix35.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator40 = cCSMatrix35.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix44.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double54 = rowMajorSparseMatrix50.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix55 = rowMajorSparseMatrix50.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean57 = sparseMatrix55.equals((java.lang.Object) ooPlaceOuterProduct56);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix44.hadamardProduct((org.la4j.Matrix) sparseMatrix55);
        org.la4j.Matrix matrix59 = ooPlaceMatricesSubtraction32.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix35, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44);
        org.la4j.Matrix matrix60 = ooPlaceMatricesSubtraction28.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix31, rowMajorSparseMatrix44);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor61 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix63 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix64 = inPlaceCopyMatrixToMatrix27.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44, (org.la4j.matrix.SparseMatrix) cRSMatrix63);
        org.la4j.matrix.DenseMatrix denseMatrix66 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix71 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator72 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray73 = cCSMatrix71.foldRows(vectorAccumulator72);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix74 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray73);
        double[][] doubleArray75 = basic1DMatrix74.toArray();
        org.la4j.Matrix matrix76 = inPlaceCopyMatrixToMatrix27.apply(denseMatrix66, (org.la4j.matrix.DenseMatrix) basic1DMatrix74);
        boolean boolean78 = denseMatrix25.equals((org.la4j.Matrix) basic1DMatrix74, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray79 = basic1DMatrix74.toBinary();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(basic2DMatrix31);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(cRSMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(denseMatrix66);
        org.junit.Assert.assertNotNull(cCSMatrix71);
        org.junit.Assert.assertNotNull(vectorAccumulator72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.la4j.matrix.SparseMatrix sparseMatrix1 = org.la4j.matrix.SparseMatrix.identity((int) (short) 0);
        org.junit.Assert.assertNotNull(sparseMatrix1);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure22 = null;
        rowMajorSparseMatrix20.eachNonZero(matrixProcedure22);
        double[][] doubleArray24 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray24);
        org.la4j.Matrix matrix26 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix20, denseMatrix25);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate27 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix30 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean31 = advancedMatrixPredicate27.test((org.la4j.Matrix) columnMajorSparseMatrix30);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter32 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix30);
        org.la4j.Matrix matrix33 = denseMatrix25.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix30);
        denseMatrix25.setRow((int) (byte) 1, (double) 1.0f);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate27);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(matrix33);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.random((int) (byte) 0, (int) '4', (double) 0, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction7 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix8 = cCSMatrix2.transformRow(10, vectorFunction7);
        double double10 = cCSMatrix2.maxInColumn((int) '#');
        org.la4j.Matrix matrix12 = cCSMatrix2.add((double) 10L);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(matrix12);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator4 = columnMajorSparseMatrix3.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate15 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean16 = sparseMatrix14.is(advancedMatrixPredicate15);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double19 = sparseMatrix14.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure20 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        columnMajorSparseMatrix3.eachNonZeroInRow((-1), vectorProcedure20);
        boolean boolean22 = columnMajorSparseMatrix3.isRowMajor();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication23 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix26 = ooPlaceMatrixByItsTransposeMultiplication23.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix25);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation27 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray48 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray55 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray62 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray63 = new double[][] { doubleArray34, doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix64 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray63);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation65 = matrixMatrixMatrixOperation27.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        java.util.Spliterator<java.lang.Double> doubleSpliterator66 = basic2DMatrix64.spliterator();
        basic2DMatrix64.setAll((double) (byte) 10);
        ooPlaceMatrixByItsTransposeMultiplication23.ensureApplicableTo((org.la4j.Matrix) basic2DMatrix64);
        org.la4j.Matrix matrix70 = ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        org.la4j.matrix.DenseMatrix denseMatrix72 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix75 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean76 = cCSMatrix75.isRowMajor();
        org.la4j.Matrix matrix79 = cCSMatrix75.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.Matrix matrix80 = ooPlaceKroneckerProduct0.applyCommon((org.la4j.Matrix) denseMatrix72, matrix79);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator81 = matrix80.columnMajorIterator();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(basic2DMatrix64);
        org.junit.Assert.assertNotNull(matrixMatrixOperation65);
        org.junit.Assert.assertNotNull(doubleSpliterator66);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(denseMatrix72);
        org.junit.Assert.assertNotNull(cCSMatrix75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator81);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        double double28 = compressedVector26.min();
        org.la4j.Matrix matrix29 = compressedVector26.toColumnMatrix();
        compressedVector26.set((int) (byte) 1, 1.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double35 = compressedVector26.getOrElse((int) '4', 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(matrix29);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = cCSMatrix2.toRowMajorSparseMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator9 = cCSMatrix8.iterator();
        org.la4j.Vector vector12 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction14 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector15 = vector12.transform(vectorFunction14);
        org.la4j.Matrix matrix16 = cCSMatrix8.transformRow(0, vectorFunction14);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix17 = cCSMatrix2.transformColumn((int) 'a', vectorFunction14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(vectorFunction14);
        org.junit.Assert.assertNotNull(vector15);
        org.junit.Assert.assertNotNull(matrix16);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.DenseMatrix denseMatrix18 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix21 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix18, denseMatrix20);
        org.la4j.Matrix matrix22 = denseMatrix18.shuffle();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(denseMatrix18);
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix6 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator7 = columnMajorSparseMatrix6.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double16 = rowMajorSparseMatrix12.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix17 = rowMajorSparseMatrix12.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate18 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean19 = sparseMatrix17.is(advancedMatrixPredicate18);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double22 = sparseMatrix17.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator21);
        org.la4j.vector.functor.VectorProcedure vectorProcedure23 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator21);
        columnMajorSparseMatrix6.eachNonZeroInRow((-1), vectorProcedure23);
        sparseVector3.each(vectorProcedure23);
        java.lang.Object obj26 = new java.lang.Object();
        boolean boolean27 = sparseVector3.equals(obj26);
        org.la4j.operation.VectorMatrixOperation<org.la4j.Vector> vectorVectorMatrixOperation28 = null;
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random31 = null;
        org.la4j.vector.DenseVector denseVector32 = org.la4j.vector.DenseVector.random(0, random31);
        java.util.Random random34 = null;
        org.la4j.vector.DenseVector denseVector35 = org.la4j.vector.DenseVector.random(0, random34);
        org.la4j.Matrix matrix36 = ooPlaceOuterProduct29.apply(denseVector32, denseVector35);
        org.la4j.vector.sparse.CompressedVector compressedVector38 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat39 = null;
        java.lang.String str40 = compressedVector38.toMatrixMarket(numberFormat39);
        org.la4j.Vector vector42 = compressedVector38.add((double) 52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator46 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray47 = cCSMatrix45.foldRows(vectorAccumulator46);
        org.la4j.vector.dense.BasicVector basicVector48 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray47);
        org.la4j.Matrix matrix49 = basicVector48.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate50 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean51 = basicVector48.non(vectorPredicate50);
        org.la4j.Vector vector53 = basicVector48.blankOfLength((int) 'a');
        org.la4j.Matrix matrix54 = ooPlaceOuterProduct29.apply((org.la4j.vector.SparseVector) compressedVector38, (org.la4j.vector.DenseVector) basicVector48);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector55 = sparseVector3.apply(vectorVectorMatrixOperation28, matrix54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix6);
        org.junit.Assert.assertNotNull(matrixIterator7);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix17);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(denseVector32);
        org.junit.Assert.assertNotNull(denseVector35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str40, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector42);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertNotNull(vectorAccumulator46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(vectorPredicate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertNotNull(matrix54);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asPlusFunction((double) (short) 0);
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.DenseMatrix denseMatrix18 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix21 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix18, denseMatrix20);
        double double23 = matrix21.maxInRow((int) '4');
        java.util.Random random27 = null;
        org.la4j.vector.sparse.CompressedVector compressedVector28 = org.la4j.vector.sparse.CompressedVector.random((int) (byte) 10, (double) (short) 0, random27);
        org.la4j.vector.SparseVector sparseVector30 = org.la4j.vector.SparseVector.zero(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix33 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator34 = columnMajorSparseMatrix33.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix39 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double43 = rowMajorSparseMatrix39.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix44 = rowMajorSparseMatrix39.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate45 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean46 = sparseMatrix44.is(advancedMatrixPredicate45);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator48 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double49 = sparseMatrix44.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator48);
        org.la4j.vector.functor.VectorProcedure vectorProcedure50 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator48);
        columnMajorSparseMatrix33.eachNonZeroInRow((-1), vectorProcedure50);
        vectorProcedure50.apply(10, (double) (byte) 100);
        sparseVector30.eachNonZero(vectorProcedure50);
        compressedVector28.eachNonZero(vectorProcedure50);
        // The following exception was thrown during execution in test generation
        try {
            matrix21.eachInRow(100, vectorProcedure50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(denseMatrix18);
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(compressedVector28);
        org.junit.Assert.assertNotNull(sparseVector30);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrixIterator34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix44);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure50);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double8 = rowMajorSparseMatrix3.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.EigenDecompositor eigenDecompositor9 = new org.la4j.decomposition.EigenDecompositor((org.la4j.Matrix) rowMajorSparseMatrix3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrix can not be used with this decompositor.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random26 = null;
        org.la4j.vector.DenseVector denseVector27 = org.la4j.vector.DenseVector.random(0, random26);
        java.util.Random random29 = null;
        org.la4j.vector.DenseVector denseVector30 = org.la4j.vector.DenseVector.random(0, random29);
        org.la4j.Matrix matrix31 = ooPlaceOuterProduct24.apply(denseVector27, denseVector30);
        org.la4j.Vector vector33 = denseVector27.copyOfLength((int) 'a');
        org.la4j.Matrix matrix34 = vector33.toDiagonalMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix37 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator38 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray39 = cCSMatrix37.foldRows(vectorAccumulator38);
        org.la4j.vector.dense.BasicVector basicVector40 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray39);
        org.la4j.Matrix matrix41 = basicVector40.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate42 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean43 = basicVector40.non(vectorPredicate42);
        boolean boolean44 = vector33.is(vectorPredicate42);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct45 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix50 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator51 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray52 = cCSMatrix50.foldRows(vectorAccumulator51);
        org.la4j.matrix.DenseMatrix denseMatrix53 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray52);
        org.la4j.vector.dense.BasicVector basicVector54 = new org.la4j.vector.dense.BasicVector(doubleArray52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix59 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator60 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray61 = cCSMatrix59.foldRows(vectorAccumulator60);
        org.la4j.matrix.DenseMatrix denseMatrix62 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray61);
        org.la4j.vector.dense.BasicVector basicVector63 = new org.la4j.vector.dense.BasicVector(doubleArray61);
        ooPlaceOuterProduct45.ensureApplicableTo((org.la4j.Vector) basicVector54, (org.la4j.Vector) basicVector63);
        org.la4j.vector.sparse.CompressedVector compressedVector66 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector66.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector71 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix72 = ooPlaceOuterProduct45.apply((org.la4j.vector.SparseVector) compressedVector66, (org.la4j.vector.SparseVector) compressedVector71);
        boolean boolean74 = compressedVector71.isZeroAt((int) (short) 1);
        org.la4j.Vector vector76 = compressedVector71.blankOfLength((int) (byte) 100);
        boolean boolean77 = vector33.equals((java.lang.Object) compressedVector71);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition78 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double82 = cRSMatrix81.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix86 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix87 = rowMajorSparseMatrix86.removeLastRow();
        org.la4j.Matrix matrix88 = ooPlaceMatricesAddition78.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81, rowMajorSparseMatrix86);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix91 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix93 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix94 = ooPlaceMatricesAddition78.apply(columnMajorSparseMatrix91, denseMatrix93);
        java.lang.String str97 = columnMajorSparseMatrix91.mkString("0.5.5", "hi!");
        org.la4j.Vector vector98 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector71, columnMajorSparseMatrix91);
        org.la4j.Matrix matrix99 = vector98.toDiagonalMatrix();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(denseVector27);
        org.junit.Assert.assertNotNull(denseVector30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(vector33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(cCSMatrix37);
        org.junit.Assert.assertNotNull(vectorAccumulator38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(vectorPredicate42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(cCSMatrix50);
        org.junit.Assert.assertNotNull(vectorAccumulator51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix53);
        org.junit.Assert.assertNotNull(cCSMatrix59);
        org.junit.Assert.assertNotNull(vectorAccumulator60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix62);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(vector76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix91);
        org.junit.Assert.assertNotNull(denseMatrix93);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(vector98);
        org.junit.Assert.assertNotNull(matrix99);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.la4j.vector.dense.BasicVector basicVector2 = org.la4j.vector.dense.BasicVector.constant(0, (-1.0d));
        org.junit.Assert.assertNotNull(basicVector2);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator0 = org.la4j.Matrices.mkMaxAccumulator();
        double double1 = matrixAccumulator0.accumulate();
        org.junit.Assert.assertNotNull(matrixAccumulator0);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.NEGATIVE_INFINITY + "'", double1 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition2 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix5 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double6 = cRSMatrix5.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.Matrix matrix12 = ooPlaceMatricesAddition2.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix5, rowMajorSparseMatrix10);
        boolean boolean13 = basicVector1.equals((java.lang.Object) rowMajorSparseMatrix10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction23 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator24 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction23);
        double double25 = matrix21.fold(matrixAccumulator24);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure26 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator24);
        cCSMatrix16.eachNonZero(matrixProcedure26);
        rowMajorSparseMatrix10.eachNonZero(matrixProcedure26);
        // The following exception was thrown during execution in test generation
        try {
            matrixProcedure26.apply((-1), 1, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basicVector1);
        org.junit.Assert.assertNotNull(cRSMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrixAccumulator24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure26);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double2 = compressedVector1.euclideanNorm();
        org.la4j.Vector vector4 = compressedVector1.blankOfLength(52);
        double double6 = vector4.get(1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.zero((int) (short) 10);
        org.la4j.vector.DenseVector denseVector2 = denseVector1.toDenseVector();
        org.junit.Assert.assertNotNull(denseVector1);
        org.junit.Assert.assertNotNull(denseVector2);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix11 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator12 = cRSMatrix11.nonZeroIterator();
        org.la4j.Vector vector14 = cRSMatrix11.getColumn(100);
        boolean boolean17 = cRSMatrix11.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator19 = cRSMatrix11.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = cRSMatrix11.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory21 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix22 = cRSMatrix11.to(basic1DMatrixMatrixFactory21);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix23 = cRSMatrix2.to(basic1DMatrixMatrixFactory21);
        org.la4j.Matrix matrix26 = basic1DMatrix23.copyOfShape(0, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            basic1DMatrix23.set((int) (byte) 0, (int) 'a', Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '97' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cRSMatrix11);
        org.junit.Assert.assertNotNull(matrixIterator12);
        org.junit.Assert.assertNotNull(vector14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(vectorIterator19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory21);
        org.junit.Assert.assertNotNull(basic1DMatrix22);
        org.junit.Assert.assertNotNull(basic1DMatrix23);
        org.junit.Assert.assertNotNull(matrix26);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat6 = null;
        java.lang.String str7 = compressedVector5.toMatrixMarket(numberFormat6);
        org.la4j.Vector vector9 = compressedVector5.add((double) 52);
        org.la4j.Vector vector11 = compressedVector5.sliceRight((int) (byte) 10);
        org.la4j.Vector vector12 = ooPlaceVectorHadamardProduct0.apply(denseVector3, (org.la4j.vector.SparseVector) compressedVector5);
        org.la4j.Vector vector14 = compressedVector5.blankOfLength((int) (short) 1);
        org.la4j.Matrix matrix15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector16 = compressedVector5.multiply(matrix15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str7, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(vector14);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray6);
        org.la4j.vector.dense.BasicVector basicVector8 = new org.la4j.vector.dense.BasicVector(doubleArray6);
        org.la4j.Vector vector9 = org.la4j.Vector.fromArray(doubleArray6);
        org.la4j.vector.dense.BasicVector basicVector10 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray6);
        org.la4j.Vector vector11 = org.la4j.Vector.fromArray(doubleArray6);
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(basicVector10);
        org.junit.Assert.assertNotNull(vector11);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double6 = cCSMatrix3.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction8 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix9 = cCSMatrix3.transformRow(10, vectorFunction8);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.functor.VectorAccumulator vectorAccumulator10 = org.la4j.Vectors.asProductFunctionAccumulator(Double.NaN, vectorFunction8);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: null");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction8);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.la4j.vector.SparseVector sparseVector1 = org.la4j.vector.SparseVector.zero(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator5 = columnMajorSparseMatrix4.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double14 = rowMajorSparseMatrix10.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix15 = rowMajorSparseMatrix10.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate16 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean17 = sparseMatrix15.is(advancedMatrixPredicate16);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator19 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double20 = sparseMatrix15.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator19);
        org.la4j.vector.functor.VectorProcedure vectorProcedure21 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator19);
        columnMajorSparseMatrix4.eachNonZeroInRow((-1), vectorProcedure21);
        vectorProcedure21.apply(10, (double) (byte) 100);
        sparseVector1.eachNonZero(vectorProcedure21);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector28 = sparseVector1.sliceLeft((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '0' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(sparseVector1);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixIterator5);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix15);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure21);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix47 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray46);
        double[][] doubleArray48 = basic1DMatrix47.toArray();
        org.la4j.Matrix matrix49 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix39, (org.la4j.matrix.DenseMatrix) basic1DMatrix47);
        basic1DMatrix47.setAll(Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(basic1DMatrix47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix49);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.la4j.matrix.SparseMatrix sparseMatrix2 = org.la4j.matrix.SparseMatrix.diagonal(0, (-2.0d));
        org.junit.Assert.assertNotNull(sparseMatrix2);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat2 = null;
        java.lang.String str3 = compressedVector1.toMatrixMarket(numberFormat2);
        org.la4j.iterator.VectorIterator vectorIterator4 = compressedVector1.iterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double17 = rowMajorSparseMatrix13.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix18 = rowMajorSparseMatrix13.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate19 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean20 = sparseMatrix18.is(advancedMatrixPredicate19);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator22 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double23 = sparseMatrix18.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator22);
        org.la4j.vector.functor.VectorProcedure vectorProcedure24 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator22);
        cCSMatrix7.eachInRow((int) (short) 1, vectorProcedure24);
        org.la4j.iterator.VectorIterator vectorIterator27 = cCSMatrix7.iteratorOfColumn((int) (short) 0);
        org.la4j.Vector vector29 = cCSMatrix7.getColumn((int) (short) 10);
        org.la4j.iterator.VectorIterator vectorIterator31 = cCSMatrix7.iteratorOfColumn((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator32 = vectorIterator4.andAlsoMultiply(vectorIterator31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str3, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vectorIterator4);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix18);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure24);
        org.junit.Assert.assertNotNull(vectorIterator27);
        org.junit.Assert.assertNotNull(vector29);
        org.junit.Assert.assertNotNull(vectorIterator31);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix14 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double15 = columnMajorSparseMatrix14.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory16 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix17 = columnMajorSparseMatrix14.to(basic1DMatrixMatrixFactory16);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition18 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double22 = cRSMatrix21.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix26 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix26.removeLastRow();
        org.la4j.Matrix matrix28 = ooPlaceMatricesAddition18.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21, rowMajorSparseMatrix26);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition29 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix32 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double33 = cRSMatrix32.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix37 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix37.removeLastRow();
        org.la4j.Matrix matrix39 = ooPlaceMatricesAddition29.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix32, rowMajorSparseMatrix37);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix42 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix44 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix45 = ooPlaceMatricesAddition29.apply(columnMajorSparseMatrix42, denseMatrix44);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix49 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix49.removeLastRow();
        double double54 = rowMajorSparseMatrix49.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector55 = rowMajorSparseMatrix49.toRowVector();
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition18.apply(denseMatrix44, rowMajorSparseMatrix49);
        org.la4j.matrix.SparseMatrix sparseMatrix57 = denseMatrix44.toSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix58 = denseMatrix44.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix59 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix14, rowMajorSparseMatrix58);
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct60 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix63 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix66 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double67 = cRSMatrix66.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator68 = cRSMatrix66.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor69 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix66);
        org.la4j.Matrix matrix70 = ooPlaceKroneckerProduct60.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix63, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix66);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix72 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("");
        org.la4j.Matrix matrix73 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix63, rowMajorSparseMatrix72);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix75 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate76 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix79 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean80 = advancedMatrixPredicate76.test((org.la4j.Matrix) columnMajorSparseMatrix79);
        org.la4j.vector.functor.VectorFunction vectorFunction82 = null;
        org.la4j.Matrix matrix83 = columnMajorSparseMatrix79.transformRow(0, vectorFunction82);
        org.la4j.Matrix matrix84 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix75, columnMajorSparseMatrix79);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix87 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray88 = cRSMatrix87.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation89 = ooPlaceMatricesMultiplication0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix87);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory16);
        org.junit.Assert.assertNotNull(basic1DMatrix17);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(cRSMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(denseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(vector55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(sparseMatrix57);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(basic1DMatrix63);
        org.junit.Assert.assertNotNull(cRSMatrix66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator68);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix75);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate76);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(cRSMatrix87);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation89);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor4 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.LinearAlgebra.InverterFactory inverterFactory5 = org.la4j.LinearAlgebra.INVERTER;
        org.la4j.inversion.MatrixInverter matrixInverter6 = columnMajorSparseMatrix2.withInverter(inverterFactory5);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix8 = org.la4j.matrix.sparse.CRSMatrix.identity(100);
        org.la4j.inversion.MatrixInverter matrixInverter9 = inverterFactory5.create((org.la4j.Matrix) cRSMatrix8);
        org.la4j.Matrix matrix10 = matrixInverter9.self();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(inverterFactory5);
        org.junit.Assert.assertNotNull(matrixInverter6);
        org.junit.Assert.assertNotNull(cRSMatrix8);
        org.junit.Assert.assertNotNull(matrixInverter9);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix36.divide((double) (-1));
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor42 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix41);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix36, (org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver44 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix43);
        int int45 = forwardBackSubstitutionSolver44.equations();
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct46 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random48 = null;
        org.la4j.vector.DenseVector denseVector49 = org.la4j.vector.DenseVector.random(0, random48);
        org.la4j.vector.sparse.CompressedVector compressedVector51 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat52 = null;
        java.lang.String str53 = compressedVector51.toMatrixMarket(numberFormat52);
        org.la4j.Vector vector55 = compressedVector51.add((double) 52);
        org.la4j.Vector vector57 = compressedVector51.sliceRight((int) (byte) 10);
        org.la4j.Vector vector58 = ooPlaceVectorHadamardProduct46.apply(denseVector49, (org.la4j.vector.SparseVector) compressedVector51);
        org.la4j.Vector vector60 = compressedVector51.blankOfLength((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector61 = forwardBackSubstitutionSolver44.solve((org.la4j.Vector) compressedVector51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong length of RHS vector: 32.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(denseVector49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str53, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector55);
        org.junit.Assert.assertNotNull(vector57);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(vector60);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix14 = cRSMatrix3.copyOfShape((int) 'a', 10);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix14);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray20 = columnMajorSparseMatrix19.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation21 = ooPlaceMatricesAddition0.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator25 = cCSMatrix24.iterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix28 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double31 = cCSMatrix28.get((int) (byte) 0, (int) (short) 1);
        double double32 = cCSMatrix28.min();
        org.la4j.Matrix matrix33 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix24, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix28);
        org.la4j.Matrix matrix34 = cCSMatrix28.rotate();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator25);
        org.junit.Assert.assertNotNull(cCSMatrix28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor33 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix16);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator37 = cRSMatrix36.nonZeroIterator();
        org.la4j.Vector vector39 = cRSMatrix36.getColumn(100);
        boolean boolean42 = cRSMatrix36.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor43 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix36);
        double double44 = cRSMatrix36.infinityNorm();
        boolean boolean45 = singularValueDecompositor33.applicableTo((org.la4j.Matrix) cRSMatrix36);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix48 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator49 = cRSMatrix48.nonZeroIterator();
        org.la4j.Vector vector51 = cRSMatrix48.getColumn(100);
        boolean boolean54 = cRSMatrix48.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator56 = cRSMatrix48.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix57 = cRSMatrix48.toRowMajorSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double65 = rowMajorSparseMatrix61.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix66 = rowMajorSparseMatrix61.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate67 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean68 = sparseMatrix66.is(advancedMatrixPredicate67);
        boolean boolean69 = rowMajorSparseMatrix57.non(advancedMatrixPredicate67);
        boolean boolean70 = singularValueDecompositor33.applicableTo((org.la4j.Matrix) rowMajorSparseMatrix57);
        org.la4j.iterator.VectorIterator vectorIterator72 = rowMajorSparseMatrix57.iteratorOfRow(0);
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrixIterator37);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(cRSMatrix48);
        org.junit.Assert.assertNotNull(matrixIterator49);
        org.junit.Assert.assertNotNull(vector51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(vectorIterator56);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix57);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix66);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(vectorIterator72);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector2 = org.la4j.Vector.constant((int) (short) -1, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication41 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.Matrix matrix47 = ooPlaceMatrixByItsTransposeMultiplication41.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation48 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication49 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix52 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator53 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray54 = cCSMatrix52.foldRows(vectorAccumulator53);
        org.la4j.Matrix matrix55 = ooPlaceMatrixByItsTransposeMultiplication49.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix52);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix58 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double59 = cRSMatrix58.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator60 = cRSMatrix58.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor61 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix58);
        double double62 = cRSMatrix58.max();
        org.la4j.Matrix matrix63 = ooPlaceMatrixByItsTransposeMultiplication49.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix58);
        org.la4j.Matrix matrix65 = cRSMatrix58.multiply((double) (byte) 100);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix69 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix58, rowMajorSparseMatrix68);
        double double70 = cRSMatrix58.infinityNorm();
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixMatrixOperation48);
        org.junit.Assert.assertNotNull(cCSMatrix52);
        org.junit.Assert.assertNotNull(vectorAccumulator53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cRSMatrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator60);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray3 = cRSMatrix2.toBinary();
        org.la4j.Matrix matrix5 = cRSMatrix2.blankOfRows((int) (short) 1);
        org.la4j.Matrix matrix6 = matrix5.removeLastColumn();
        org.la4j.Matrix matrix7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix12 = matrix6.insert(matrix7, (int) (byte) 100, 52, (int) '4', (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination position out of bounds: 100, 52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        java.util.Random random12 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix13 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random12);
        org.la4j.Matrix matrix14 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix13);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix17 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator18 = cRSMatrix17.nonZeroIterator();
        org.la4j.Vector vector20 = cRSMatrix17.getColumn(100);
        boolean boolean23 = cRSMatrix17.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor24 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix17);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition25 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix28 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double29 = cRSMatrix28.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix33.removeLastRow();
        org.la4j.Matrix matrix35 = ooPlaceMatricesAddition25.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix28, rowMajorSparseMatrix33);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition36 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix39 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double40 = cRSMatrix39.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        org.la4j.Matrix matrix46 = ooPlaceMatricesAddition36.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix39, rowMajorSparseMatrix44);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix49 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix51 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix52 = ooPlaceMatricesAddition36.apply(columnMajorSparseMatrix49, denseMatrix51);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix56.removeLastRow();
        double double61 = rowMajorSparseMatrix56.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector62 = rowMajorSparseMatrix56.toRowVector();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition25.apply(denseMatrix51, rowMajorSparseMatrix56);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix66 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double69 = cCSMatrix66.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction71 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix72 = cCSMatrix66.transformRow(10, vectorFunction71);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix75 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator76 = cRSMatrix75.nonZeroIterator();
        org.la4j.Vector vector78 = cRSMatrix75.getColumn(100);
        boolean boolean81 = cRSMatrix75.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor82 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix75);
        org.la4j.Matrix matrix83 = ooPlaceMatricesAddition25.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix66, (org.la4j.matrix.SparseMatrix) cRSMatrix75);
        org.la4j.Matrix matrix85 = cCSMatrix66.copyOfRows(0);
        org.la4j.Matrix matrix86 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix17, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix66);
        org.la4j.Matrix matrix87 = cRSMatrix17.transpose();
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix17.set((int) (byte) 100, (int) (short) 1, 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(cRSMatrix17);
        org.junit.Assert.assertNotNull(matrixIterator18);
        org.junit.Assert.assertNotNull(vector20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cRSMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(cRSMatrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(denseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cCSMatrix66);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(cRSMatrix75);
        org.junit.Assert.assertNotNull(matrixIterator76);
        org.junit.Assert.assertNotNull(vector78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.DenseVector denseVector1 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation2 = vectorVectorVectorOperation0.partiallyApply(denseVector1);
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication3 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator7 = cCSMatrix6.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix8 = cCSMatrix6.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix11 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean12 = cCSMatrix11.isRowMajor();
        org.la4j.Matrix matrix13 = cCSMatrix11.transpose();
        ooPlaceMatricesMultiplication3.ensureApplicableTo((org.la4j.Matrix) cCSMatrix6, matrix13);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix17 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double18 = columnMajorSparseMatrix17.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory19 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix20 = columnMajorSparseMatrix17.to(basic1DMatrixMatrixFactory19);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition21 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix24 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double25 = cRSMatrix24.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix29 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix29.removeLastRow();
        org.la4j.Matrix matrix31 = ooPlaceMatricesAddition21.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix24, rowMajorSparseMatrix29);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition32 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix35 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double36 = cRSMatrix35.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix40 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix41 = rowMajorSparseMatrix40.removeLastRow();
        org.la4j.Matrix matrix42 = ooPlaceMatricesAddition32.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix35, rowMajorSparseMatrix40);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix45 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix47 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix48 = ooPlaceMatricesAddition32.apply(columnMajorSparseMatrix45, denseMatrix47);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix52.removeLastRow();
        double double57 = rowMajorSparseMatrix52.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector58 = rowMajorSparseMatrix52.toRowVector();
        org.la4j.Matrix matrix59 = ooPlaceMatricesAddition21.apply(denseMatrix47, rowMajorSparseMatrix52);
        org.la4j.matrix.SparseMatrix sparseMatrix60 = denseMatrix47.toSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = denseMatrix47.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix62 = ooPlaceMatricesMultiplication3.apply(columnMajorSparseMatrix17, rowMajorSparseMatrix61);
        org.la4j.vector.dense.BasicVector basicVector65 = new org.la4j.vector.dense.BasicVector((int) (byte) 0);
        columnMajorSparseMatrix17.setColumn((int) '4', (org.la4j.Vector) basicVector65);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation67 = vectorVectorVectorOperation0.partiallyApply((org.la4j.vector.DenseVector) basicVector65);
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation0);
        org.junit.Assert.assertNotNull(vectorVectorOperation2);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(cCSMatrix11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory19);
        org.junit.Assert.assertNotNull(basic1DMatrix20);
        org.junit.Assert.assertNotNull(cRSMatrix24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix29);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(cRSMatrix35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(denseMatrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(sparseMatrix60);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(vectorVectorOperation67);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, 0.0d);
        org.la4j.Vector vector4 = cRSMatrix2.getColumn((int) '4');
        org.la4j.matrix.SparseMatrix sparseMatrix5 = cRSMatrix2.toSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator7 = sparseMatrix5.nonZeroIteratorOfRow((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(sparseMatrix5);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.DenseMatrix denseMatrix2 = org.la4j.matrix.DenseMatrix.randomSymmetric(10, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double2 = compressedVector1.euclideanNorm();
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory3 = org.la4j.Vectors.DENSE;
        java.lang.Class<org.la4j.vector.dense.BasicVector> basicVectorClass4 = basicVectorVectorFactory3.outputClass;
        org.la4j.vector.dense.BasicVector basicVector5 = compressedVector1.to(basicVectorVectorFactory3);
        org.la4j.Vector vector7 = basicVector5.divide((double) 0.0f);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector9 = basicVector5.sliceLeft((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory3);
        org.junit.Assert.assertNotNull(basicVectorClass4);
        org.junit.Assert.assertNotNull(basicVector5);
        org.junit.Assert.assertNotNull(vector7);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.DenseVector denseVector20 = basicVector9.toDenseVector();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(denseVector20);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate0 = org.la4j.Matrices.ZERO_MATRIX;
        java.lang.Class<?> wildcardClass1 = matrixPredicate0.getClass();
        org.junit.Assert.assertNotNull(matrixPredicate0);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        double[] doubleArray11 = basicVector10.toArray();
        int[] intArray17 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector18 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray11, intArray17);
        org.la4j.vector.sparse.CompressedVector compressedVector19 = org.la4j.vector.sparse.CompressedVector.fromArray(doubleArray11);
        org.la4j.Matrix matrix20 = compressedVector19.toRowMatrix();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = compressedVector19.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertNotNull(compressedVector19);
        org.junit.Assert.assertNotNull(matrix20);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.vector.dense.BasicVector basicVector25 = new org.la4j.vector.dense.BasicVector((int) (byte) 0);
        org.la4j.Matrix matrix26 = compressedVector2.outerProduct((org.la4j.Vector) basicVector25);
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory27 = org.la4j.Vectors.DENSE;
        java.lang.Class<org.la4j.vector.dense.BasicVector> basicVectorClass28 = basicVectorVectorFactory27.outputClass;
        org.la4j.vector.dense.BasicVector basicVector29 = basicVector25.to(basicVectorVectorFactory27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory27);
        org.junit.Assert.assertNotNull(basicVectorClass28);
        org.junit.Assert.assertNotNull(basicVector29);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector2 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random4 = null;
        org.la4j.vector.DenseVector denseVector5 = org.la4j.vector.DenseVector.random(0, random4);
        org.la4j.Matrix matrix6 = matrixVectorVectorOperation0.apply(sparseVector2, denseVector5);
        double double7 = sparseVector2.max();
        org.la4j.Matrix matrix8 = sparseVector2.toDiagonalMatrix();
        int int9 = sparseVector2.cardinality();
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation0);
        org.junit.Assert.assertNotNull(sparseVector2);
        org.junit.Assert.assertNotNull(denseVector5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector11 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix8, (org.la4j.vector.DenseVector) basicVector10);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation12 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray19 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray26 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray33 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray40 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray48 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray48);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation50 = matrixMatrixMatrixOperation12.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix49);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation51 = ooPlaceMatrixByVectorMultiplication0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix49);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix54 = org.la4j.matrix.sparse.CRSMatrix.diagonal(0, (double) (short) 100);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation55 = ooPlaceMatrixByVectorMultiplication0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix54);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix61 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator62 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray63 = cCSMatrix61.foldRows(vectorAccumulator62);
        org.la4j.matrix.DenseMatrix denseMatrix64 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray63);
        org.la4j.vector.dense.BasicVector basicVector65 = new org.la4j.vector.dense.BasicVector(doubleArray63);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix70 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator71 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray72 = cCSMatrix70.foldRows(vectorAccumulator71);
        org.la4j.matrix.DenseMatrix denseMatrix73 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray72);
        org.la4j.vector.dense.BasicVector basicVector74 = new org.la4j.vector.dense.BasicVector(doubleArray72);
        ooPlaceOuterProduct56.ensureApplicableTo((org.la4j.Vector) basicVector65, (org.la4j.Vector) basicVector74);
        org.la4j.vector.sparse.CompressedVector compressedVector77 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector77.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector82 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix83 = ooPlaceOuterProduct56.apply((org.la4j.vector.SparseVector) compressedVector77, (org.la4j.vector.SparseVector) compressedVector82);
        double double84 = compressedVector82.min();
        org.la4j.Matrix matrix85 = compressedVector82.toColumnMatrix();
        org.la4j.Vector vector86 = vectorVectorOperation55.apply((org.la4j.vector.SparseVector) compressedVector82);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(matrixMatrixOperation50);
        org.junit.Assert.assertNotNull(vectorVectorOperation51);
        org.junit.Assert.assertNotNull(cRSMatrix54);
        org.junit.Assert.assertNotNull(vectorVectorOperation55);
        org.junit.Assert.assertNotNull(cCSMatrix61);
        org.junit.Assert.assertNotNull(vectorAccumulator62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix64);
        org.junit.Assert.assertNotNull(cCSMatrix70);
        org.junit.Assert.assertNotNull(vectorAccumulator71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix73);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(vector86);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.zero(0, (int) (short) 0);
        org.la4j.linear.GaussianSolver gaussianSolver3 = new org.la4j.linear.GaussianSolver((org.la4j.Matrix) cRSMatrix2);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation4 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray11 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray18 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray25 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray32 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray39 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray40 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32, doubleArray39 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray40);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation42 = matrixMatrixMatrixOperation4.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        double[][] doubleArray43 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix44 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray43);
        double[] doubleArray51 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray58 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray65 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray72 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray79 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray80 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix81 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray80);
        basic2DMatrix81.setAll((double) 100);
        org.la4j.Matrix matrix84 = matrixMatrixMatrixOperation4.apply(denseMatrix44, (org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        double double85 = denseMatrix44.max();
        org.la4j.Matrix matrix86 = denseMatrix44.multiplyByItsTranspose();
        boolean boolean87 = gaussianSolver3.applicableTo((org.la4j.Matrix) denseMatrix44);
        double double88 = denseMatrix44.diagonalProduct();
        org.la4j.Vector vector89 = denseMatrix44.toColumnVector();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrixMatrixOperation42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(denseMatrix44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(basic2DMatrix81);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + Double.NEGATIVE_INFINITY + "'", double85 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 1.0d + "'", double88 == 1.0d);
        org.junit.Assert.assertNotNull(vector89);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double16 = denseMatrix15.min();
        double double17 = denseMatrix15.sum();
        org.la4j.Matrix matrix18 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix11, denseMatrix15);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator22 = cRSMatrix21.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation23 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate24 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix27 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean28 = advancedMatrixPredicate24.test((org.la4j.Matrix) columnMajorSparseMatrix27);
        org.la4j.vector.functor.VectorFunction vectorFunction30 = null;
        org.la4j.Matrix matrix31 = columnMajorSparseMatrix27.transformRow(0, vectorFunction30);
        org.la4j.iterator.VectorIterator vectorIterator33 = columnMajorSparseMatrix27.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.Matrix matrix34 = matrixMatrixOperation23.apply(columnMajorSparseMatrix27);
        org.la4j.Matrix matrix35 = columnMajorSparseMatrix27.blank();
        matrix35.setRow((int) 'a', (double) 10L);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertNotNull(matrixIterator22);
        org.junit.Assert.assertNotNull(matrixMatrixOperation23);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate24);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(vectorIterator33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 10, (int) (byte) 1);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix7 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double11 = rowMajorSparseMatrix7.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix12 = rowMajorSparseMatrix7.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate13 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean14 = sparseMatrix12.is(advancedMatrixPredicate13);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator16 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double17 = sparseMatrix12.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator16);
        org.la4j.vector.functor.VectorProcedure vectorProcedure18 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator16);
        cCSMatrix2.eachNonZeroInRow((int) '#', vectorProcedure18);
        org.la4j.Vector vector21 = cCSMatrix2.getRow(10);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix12);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure18);
        org.junit.Assert.assertNotNull(vector21);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.SparseVector sparseVector12 = org.la4j.vector.SparseVector.zero(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator16 = columnMajorSparseMatrix15.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double25 = rowMajorSparseMatrix21.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix26 = rowMajorSparseMatrix21.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate27 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean28 = sparseMatrix26.is(advancedMatrixPredicate27);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double31 = sparseMatrix26.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator30);
        org.la4j.vector.functor.VectorProcedure vectorProcedure32 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator30);
        columnMajorSparseMatrix15.eachNonZeroInRow((-1), vectorProcedure32);
        vectorProcedure32.apply(10, (double) (byte) 100);
        sparseVector12.eachNonZero(vectorProcedure32);
        org.la4j.Matrix matrix38 = sparseVector12.toRowMatrix();
        org.la4j.vector.SparseVector sparseVector39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix40 = ooPlaceOuterProduct9.apply(sparseVector12, sparseVector39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(sparseVector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrixIterator16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix26);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure32);
        org.junit.Assert.assertNotNull(matrix38);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor3 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix2);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix6 = basic2DMatrix2.copyOfShape((-1), (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x35");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix2);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) '4', 0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean6 = cCSMatrix5.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double15 = rowMajorSparseMatrix11.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix16 = rowMajorSparseMatrix11.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate17 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean18 = sparseMatrix16.is(advancedMatrixPredicate17);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator20 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double21 = sparseMatrix16.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator20);
        org.la4j.vector.functor.VectorProcedure vectorProcedure22 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator20);
        cCSMatrix5.eachInRow((int) (short) 1, vectorProcedure22);
        compressedVector2.each(vectorProcedure22);
        org.la4j.Vector vector26 = compressedVector2.subtract((-0.0d));
        org.la4j.Vector vector28 = compressedVector2.add(1.0E100d);
        org.la4j.vector.SparseVector sparseVector30 = org.la4j.vector.SparseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector31 = vector28.subtract((org.la4j.Vector) sparseVector30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 52 does not equal to 104.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix16);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure22);
        org.junit.Assert.assertNotNull(vector26);
        org.junit.Assert.assertNotNull(vector28);
        org.junit.Assert.assertNotNull(sparseVector30);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.zero(0, (int) (short) 0);
        org.la4j.linear.GaussianSolver gaussianSolver3 = new org.la4j.linear.GaussianSolver((org.la4j.Matrix) cRSMatrix2);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation4 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray11 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray18 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray25 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray32 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray39 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray40 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32, doubleArray39 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray40);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation42 = matrixMatrixMatrixOperation4.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        double[][] doubleArray43 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix44 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray43);
        double[] doubleArray51 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray58 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray65 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray72 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray79 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray80 = new double[][] { doubleArray51, doubleArray58, doubleArray65, doubleArray72, doubleArray79 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix81 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray80);
        basic2DMatrix81.setAll((double) 100);
        org.la4j.Matrix matrix84 = matrixMatrixMatrixOperation4.apply(denseMatrix44, (org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        double double85 = denseMatrix44.max();
        org.la4j.Matrix matrix86 = denseMatrix44.multiplyByItsTranspose();
        boolean boolean87 = gaussianSolver3.applicableTo((org.la4j.Matrix) denseMatrix44);
        denseMatrix44.setRow((int) '4', (double) (byte) -1);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrixMatrixOperation42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(denseMatrix44);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(basic2DMatrix81);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + Double.NEGATIVE_INFINITY + "'", double85 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.la4j.Matrix matrix1 = org.la4j.Matrix.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.constant((int) (short) 1, (int) (byte) -1, (-48.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction12 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix15 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction16 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean20 = cCSMatrix19.isRowMajor();
        org.la4j.Matrix matrix23 = cCSMatrix19.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator24 = cCSMatrix19.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix28 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix28.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix34 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double38 = rowMajorSparseMatrix34.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix39 = rowMajorSparseMatrix34.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct40 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean41 = sparseMatrix39.equals((java.lang.Object) ooPlaceOuterProduct40);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix28.hadamardProduct((org.la4j.Matrix) sparseMatrix39);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction16.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix19, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix28);
        org.la4j.Matrix matrix44 = ooPlaceMatricesSubtraction12.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix15, rowMajorSparseMatrix28);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition45 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix48 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double49 = cRSMatrix48.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix53 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix54 = rowMajorSparseMatrix53.removeLastRow();
        org.la4j.Matrix matrix55 = ooPlaceMatricesAddition45.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix48, rowMajorSparseMatrix53);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix58 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator59 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray60 = cCSMatrix58.foldRows(vectorAccumulator59);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix63 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix64 = ooPlaceMatricesAddition45.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix58, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix63);
        double double65 = rowMajorSparseMatrix63.norm();
        org.la4j.Matrix matrix66 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix15, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix63);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix69 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix72 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean73 = cCSMatrix72.isRowMajor();
        org.la4j.Matrix matrix76 = cCSMatrix72.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator77 = cCSMatrix72.nonZeroColumnMajorIterator();
        double double80 = cCSMatrix72.get(0, (int) (byte) 1);
        org.la4j.Matrix matrix81 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix69, (org.la4j.matrix.SparseMatrix) cCSMatrix72);
        org.la4j.operation.MatrixVectorOperation<org.la4j.Vector> vectorMatrixVectorOperation82 = org.la4j.LinearAlgebra.OO_PLACE_MATRIX_BY_VECTOR_MULTIPLICATION;
        org.la4j.Vector vector83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector84 = basic2DMatrix69.apply(vectorMatrixVectorOperation82, vector83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(basic2DMatrix15);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator24);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(cRSMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cCSMatrix58);
        org.junit.Assert.assertNotNull(vectorAccumulator59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(basic2DMatrix69);
        org.junit.Assert.assertNotNull(cCSMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator77);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(vectorMatrixVectorOperation82);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator28 = cCSMatrix3.iterator();
        org.la4j.Matrix matrix31 = cCSMatrix3.blankOfShape(10, (int) '4');
        int int32 = cCSMatrix3.rank();
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator28);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        boolean boolean29 = compressedVector26.isZeroAt((int) (short) 1);
        org.la4j.Vector vector31 = compressedVector26.blankOfLength((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector33 = vector31.sliceLeft((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong slice range: [0..-1].");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(vector31);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.la4j.vector.dense.BasicVector basicVector2 = org.la4j.vector.dense.BasicVector.constant((int) 'a', (double) (byte) 10);
        java.text.NumberFormat numberFormat3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = basicVector2.toMatrixMarket(numberFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basicVector2);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        boolean boolean25 = compressedVector2.isZeroAt((int) ' ');
        boolean boolean27 = compressedVector2.isZeroAt((int) '4');
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory28 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector29 = compressedVector2.to(basicVectorVectorFactory28);
        byte[] byteArray30 = compressedVector2.toBinary();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory28);
        org.junit.Assert.assertNotNull(basicVector29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[16, 0, 0, 0, 32, 0, 0, 0, 0]");
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asPlusFunction((double) 0L);
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix41 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double42 = columnMajorSparseMatrix41.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory43 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix44 = columnMajorSparseMatrix41.to(basic1DMatrixMatrixFactory43);
        matrixMatrixOperation38.ensureApplicableTo((org.la4j.Matrix) basic1DMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix48 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator49 = cRSMatrix48.nonZeroIterator();
        org.la4j.Vector vector51 = cRSMatrix48.getColumn(100);
        boolean boolean54 = cRSMatrix48.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator56 = cRSMatrix48.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix57 = cRSMatrix48.toRowMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix58 = matrixMatrixOperation38.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory43);
        org.junit.Assert.assertNotNull(basic1DMatrix44);
        org.junit.Assert.assertNotNull(cRSMatrix48);
        org.junit.Assert.assertNotNull(matrixIterator49);
        org.junit.Assert.assertNotNull(vector51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(vectorIterator56);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix57);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.diagonal(100, 10.0d);
        org.la4j.iterator.VectorIterator vectorIterator4 = rowMajorSparseMatrix2.nonZeroIteratorOfRow(30);
        boolean boolean5 = vectorIterator4.hasNext();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(vectorIterator4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction51 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator52 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction51);
        double double53 = matrix49.fold(matrixAccumulator52);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure54 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator52);
        cCSMatrix44.eachNonZero(matrixProcedure54);
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix41, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix57 = new org.la4j.matrix.dense.Basic1DMatrix();
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix58 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction59 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix62 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction63 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix66 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean67 = cCSMatrix66.isRowMajor();
        org.la4j.Matrix matrix70 = cCSMatrix66.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator71 = cCSMatrix66.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix75 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix77 = rowMajorSparseMatrix75.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix81 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double85 = rowMajorSparseMatrix81.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix86 = rowMajorSparseMatrix81.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct87 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean88 = sparseMatrix86.equals((java.lang.Object) ooPlaceOuterProduct87);
        org.la4j.Matrix matrix89 = rowMajorSparseMatrix75.hadamardProduct((org.la4j.Matrix) sparseMatrix86);
        org.la4j.Matrix matrix90 = ooPlaceMatricesSubtraction63.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix66, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix75);
        org.la4j.Matrix matrix91 = ooPlaceMatricesSubtraction59.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix62, rowMajorSparseMatrix75);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor92 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix75);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix94 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix95 = inPlaceCopyMatrixToMatrix58.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix75, (org.la4j.matrix.SparseMatrix) cRSMatrix94);
        org.la4j.Vector vector97 = cRSMatrix94.getColumn((-1));
        org.la4j.Matrix matrix98 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix57, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix94);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator99 = cRSMatrix94.columnMajorIterator();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixAccumulator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure54);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(basic2DMatrix62);
        org.junit.Assert.assertNotNull(cCSMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator71);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix81);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 1.0d + "'", double85 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
        org.junit.Assert.assertNotNull(cRSMatrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(vector97);
        org.junit.Assert.assertNotNull(matrix98);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator99);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.la4j.matrix.DenseMatrix denseMatrix2 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double3 = denseMatrix2.min();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct4 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix7 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str8 = basic2DMatrix7.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition9 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix12 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double13 = cRSMatrix12.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix17.removeLastRow();
        org.la4j.Matrix matrix19 = ooPlaceMatricesAddition9.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix12, rowMajorSparseMatrix17);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix22 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix24 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix25 = ooPlaceMatricesAddition9.apply(columnMajorSparseMatrix22, denseMatrix24);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix28 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray29 = columnMajorSparseMatrix28.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation30 = ooPlaceMatricesAddition9.partiallyApply(columnMajorSparseMatrix28);
        org.la4j.Matrix matrix31 = ooPlaceMatrixHadamardProduct4.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix7, columnMajorSparseMatrix28);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix34 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double35 = columnMajorSparseMatrix34.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor36 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix34);
        org.la4j.LinearAlgebra.InverterFactory inverterFactory37 = org.la4j.LinearAlgebra.INVERTER;
        org.la4j.inversion.MatrixInverter matrixInverter38 = columnMajorSparseMatrix34.withInverter(inverterFactory37);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix40 = org.la4j.matrix.sparse.CRSMatrix.identity(100);
        org.la4j.inversion.MatrixInverter matrixInverter41 = inverterFactory37.create((org.la4j.Matrix) cRSMatrix40);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix46 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator47 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray48 = cCSMatrix46.foldRows(vectorAccumulator47);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix49 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray48);
        double[][] doubleArray50 = basic1DMatrix49.toArray();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix51 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray50);
        org.la4j.Matrix matrix54 = basic2DMatrix51.blankOfShape((int) '#', (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix55 = org.la4j.matrix.sparse.CRSMatrix.block((org.la4j.Matrix) denseMatrix2, (org.la4j.Matrix) basic2DMatrix7, (org.la4j.Matrix) cRSMatrix40, (org.la4j.Matrix) basic2DMatrix51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(basic2DMatrix7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str8, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix22);
        org.junit.Assert.assertNotNull(denseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(inverterFactory37);
        org.junit.Assert.assertNotNull(matrixInverter38);
        org.junit.Assert.assertNotNull(cRSMatrix40);
        org.junit.Assert.assertNotNull(matrixInverter41);
        org.junit.Assert.assertNotNull(cCSMatrix46);
        org.junit.Assert.assertNotNull(vectorAccumulator47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(matrix54);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor5 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double6 = cRSMatrix2.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix9 = cRSMatrix2.kroneckerProduct((org.la4j.Matrix) basic2DMatrix8);
        org.la4j.Matrix matrix10 = cRSMatrix2.copy();
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator11 = cRSMatrix2.columnMajorIterator();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator11);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector11 = ooPlaceMatrixByVectorMultiplication0.apply(denseMatrix8, (org.la4j.vector.DenseVector) basicVector10);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation12 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray19 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray26 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray33 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray40 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray48 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray48);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation50 = matrixMatrixMatrixOperation12.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix49);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation51 = ooPlaceMatrixByVectorMultiplication0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix49);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction52 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix53 = new org.la4j.matrix.dense.Basic1DMatrix();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix56 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double57 = columnMajorSparseMatrix56.determinant();
        boolean boolean58 = columnMajorSparseMatrix56.isRowMajor();
        org.la4j.Matrix matrix59 = ooPlaceMatricesSubtraction52.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix53, columnMajorSparseMatrix56);
        org.la4j.Vector vector61 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str62 = vector61.toCSV();
        org.la4j.vector.SparseVector sparseVector63 = vector61.toSparseVector();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix66 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator67 = columnMajorSparseMatrix66.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix72 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double76 = rowMajorSparseMatrix72.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix77 = rowMajorSparseMatrix72.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate78 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean79 = sparseMatrix77.is(advancedMatrixPredicate78);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator81 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double82 = sparseMatrix77.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator81);
        org.la4j.vector.functor.VectorProcedure vectorProcedure83 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator81);
        columnMajorSparseMatrix66.eachNonZeroInRow((-1), vectorProcedure83);
        sparseVector63.each(vectorProcedure83);
        java.lang.Object obj86 = new java.lang.Object();
        boolean boolean87 = sparseVector63.equals(obj86);
        boolean boolean89 = sparseVector63.nonZeroAt((int) (short) -1);
        org.la4j.Vector vector90 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix53, sparseVector63);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(matrixMatrixOperation50);
        org.junit.Assert.assertNotNull(vectorVectorOperation51);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(vector61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str62, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector63);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix66);
        org.junit.Assert.assertNotNull(matrixIterator67);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix72);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 1.0d + "'", double76 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix77);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator81);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(vector90);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.la4j.operation.ooplace.OoPlaceInnerProduct ooPlaceInnerProduct0 = new org.la4j.operation.ooplace.OoPlaceInnerProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double8 = rowMajorSparseMatrix4.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix9 = rowMajorSparseMatrix4.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct10 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean11 = sparseMatrix9.equals((java.lang.Object) ooPlaceOuterProduct10);
        org.la4j.vector.DenseVector denseVector13 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random15 = null;
        org.la4j.vector.DenseVector denseVector16 = org.la4j.vector.DenseVector.random(0, random15);
        java.lang.String str17 = denseVector16.toString();
        ooPlaceOuterProduct10.ensureApplicableTo((org.la4j.Vector) denseVector13, (org.la4j.Vector) denseVector16);
        org.la4j.operation.VectorOperation<java.lang.Double> doubleVectorOperation19 = ooPlaceInnerProduct0.partiallyApply(denseVector16);
        org.la4j.Vector vector20 = denseVector16.blank();
        org.la4j.Matrix matrix21 = denseVector16.toRowMatrix();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(denseVector13);
        org.junit.Assert.assertNotNull(denseVector16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(doubleVectorOperation19);
        org.junit.Assert.assertNotNull(vector20);
        org.junit.Assert.assertNotNull(matrix21);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double33 = denseMatrix32.min();
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix29, denseMatrix32);
        java.util.Random random36 = null;
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.randomSymmetric(0, random36);
        double[][] doubleArray38 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray38);
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray38);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = denseMatrix40.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix42 = ooPlaceMatricesSubtraction0.apply(denseMatrix37, denseMatrix40);
        org.la4j.linear.JacobiSolver jacobiSolver43 = new org.la4j.linear.JacobiSolver(matrix42);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix46 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double47 = cRSMatrix46.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator48 = cRSMatrix46.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor49 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix46);
        double double50 = cRSMatrix46.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix52 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix53 = cRSMatrix46.kroneckerProduct((org.la4j.Matrix) basic2DMatrix52);
        org.la4j.Matrix matrix54 = cRSMatrix46.copy();
        boolean boolean55 = jacobiSolver43.applicableTo((org.la4j.Matrix) cRSMatrix46);
        int int56 = jacobiSolver43.equations();
        int int57 = jacobiSolver43.unknowns();
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(cRSMatrix46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix7 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double8 = cRSMatrix7.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator9 = cRSMatrix7.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator13 = columnMajorSparseMatrix12.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator14 = rowMajorMatrixIterator9.orElseSubtract(matrixIterator13);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator18 = cCSMatrix17.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean22 = cCSMatrix21.isRowMajor();
        org.la4j.Matrix matrix25 = cCSMatrix21.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator26 = cCSMatrix21.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator27 = columnMajorMatrixIterator18.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator26);
        org.la4j.iterator.MatrixIterator matrixIterator28 = matrixIterator14.andAlsoMultiply(matrixIterator27);
        org.la4j.iterator.MatrixIterator matrixIterator29 = rowMajorMatrixIterator4.andAlsoDivide(matrixIterator14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator33 = cCSMatrix32.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix36 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean37 = cCSMatrix36.isRowMajor();
        org.la4j.Matrix matrix40 = cCSMatrix36.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator41 = cCSMatrix36.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator42 = columnMajorMatrixIterator33.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator41);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean46 = cCSMatrix45.isRowMajor();
        org.la4j.Matrix matrix49 = cCSMatrix45.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator50 = cCSMatrix45.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix53 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double54 = cRSMatrix53.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator55 = cRSMatrix53.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix58 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator59 = columnMajorSparseMatrix58.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator60 = rowMajorMatrixIterator55.orElseSubtract(matrixIterator59);
        org.la4j.iterator.MatrixIterator matrixIterator61 = columnMajorMatrixIterator50.orElseAdd(matrixIterator59);
        org.la4j.iterator.MatrixIterator matrixIterator62 = columnMajorMatrixIterator33.andAlsoDivide(matrixIterator59);
        org.la4j.iterator.MatrixIterator matrixIterator63 = rowMajorMatrixIterator4.orElseAdd(matrixIterator62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix66 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator67 = cRSMatrix66.nonZeroIterator();
        org.la4j.Vector vector69 = cRSMatrix66.getColumn(100);
        boolean boolean72 = cRSMatrix66.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor73 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix66);
        org.la4j.Matrix matrix74 = rawLUDecompositor73.self();
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator75 = matrix74.columnMajorIterator();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication76 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix79 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator80 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray81 = cCSMatrix79.foldRows(vectorAccumulator80);
        org.la4j.Matrix matrix82 = ooPlaceMatrixByItsTransposeMultiplication76.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix79);
        double double84 = cCSMatrix79.minInColumn(0);
        double double86 = cCSMatrix79.minInColumn((int) (short) 1);
        org.la4j.iterator.MatrixIterator matrixIterator87 = cCSMatrix79.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator88 = columnMajorMatrixIterator75.orElseSubtract(matrixIterator87);
        org.la4j.iterator.MatrixIterator matrixIterator89 = rowMajorMatrixIterator4.orElseAdd(matrixIterator87);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(cRSMatrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(matrixIterator14);
        org.junit.Assert.assertNotNull(cCSMatrix17);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(matrixIterator28);
        org.junit.Assert.assertNotNull(matrixIterator29);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator33);
        org.junit.Assert.assertNotNull(cCSMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator41);
        org.junit.Assert.assertNotNull(matrixIterator42);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator50);
        org.junit.Assert.assertNotNull(cRSMatrix53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator55);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(matrixIterator59);
        org.junit.Assert.assertNotNull(matrixIterator60);
        org.junit.Assert.assertNotNull(matrixIterator61);
        org.junit.Assert.assertNotNull(matrixIterator62);
        org.junit.Assert.assertNotNull(matrixIterator63);
        org.junit.Assert.assertNotNull(cRSMatrix66);
        org.junit.Assert.assertNotNull(matrixIterator67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator75);
        org.junit.Assert.assertNotNull(cCSMatrix79);
        org.junit.Assert.assertNotNull(vectorAccumulator80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + (-1.0d) + "'", double84 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-1.0d) + "'", double86 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator87);
        org.junit.Assert.assertNotNull(matrixIterator88);
        org.junit.Assert.assertNotNull(matrixIterator89);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.identity((int) ' ');
        org.junit.Assert.assertNotNull(basic2DMatrix1);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.OO_PLACE_MATRICES_MULTIPLICATION;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor4 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = matrixMatrixMatrixOperation0.partiallyApply(columnMajorSparseMatrix3);
        java.text.NumberFormat numberFormat6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = columnMajorSparseMatrix3.toMatrixMarket(numberFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str4 = basic2DMatrix3.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition5 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix8 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double9 = cRSMatrix8.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix13.removeLastRow();
        org.la4j.Matrix matrix15 = ooPlaceMatricesAddition5.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix8, rowMajorSparseMatrix13);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix18 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition5.apply(columnMajorSparseMatrix18, denseMatrix20);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray25 = columnMajorSparseMatrix24.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation26 = ooPlaceMatricesAddition5.partiallyApply(columnMajorSparseMatrix24);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, columnMajorSparseMatrix24);
        byte[] byteArray28 = columnMajorSparseMatrix24.toBinary();
        org.la4j.matrix.functor.MatrixFunction matrixFunction29 = null;
        columnMajorSparseMatrix24.update(matrixFunction29);
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str4, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix6 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator7 = cRSMatrix6.nonZeroIterator();
        org.la4j.Vector vector9 = cRSMatrix6.getColumn(100);
        boolean boolean12 = cRSMatrix6.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator14 = cRSMatrix6.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix15 = cRSMatrix6.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix15);
        org.la4j.Matrix matrix17 = rowMajorSparseMatrix15.removeFirstColumn();
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix15.removeFirstRow();
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication20 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector22 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector22.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct26 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix30 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix30.removeLastRow();
        double double35 = rowMajorSparseMatrix30.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int36 = rowMajorSparseMatrix30.cardinality();
        org.la4j.Vector vector38 = rowMajorSparseMatrix30.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix41 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix42 = ooPlaceMatrixHadamardProduct26.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix30, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix41);
        org.la4j.Vector vector43 = ooPlaceVectorByMatrixMultiplication20.apply((org.la4j.vector.SparseVector) compressedVector22, columnMajorSparseMatrix41);
        org.la4j.vector.SparseVector sparseVector45 = org.la4j.vector.SparseVector.zero(0);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix51 = rowMajorSparseMatrix50.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix53 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix54 = ooPlaceMatricesSubtraction46.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix50, denseMatrix53);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix57 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double58 = columnMajorSparseMatrix57.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix61 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double62 = denseMatrix61.min();
        double double63 = denseMatrix61.sum();
        org.la4j.Matrix matrix64 = ooPlaceMatricesSubtraction46.apply(columnMajorSparseMatrix57, denseMatrix61);
        org.la4j.Vector vector65 = ooPlaceVectorByMatrixMultiplication20.apply(sparseVector45, columnMajorSparseMatrix57);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix66 = rowMajorSparseMatrix15.insertRow((int) (byte) 0, vector65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: 0. Should be: 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cRSMatrix6);
        org.junit.Assert.assertNotNull(matrixIterator7);
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(vectorIterator14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(vector38);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(vector43);
        org.junit.Assert.assertNotNull(sparseVector45);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(denseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + Double.POSITIVE_INFINITY + "'", double62 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(vector65);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double8 = rowMajorSparseMatrix3.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int9 = rowMajorSparseMatrix3.cardinality();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation11 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation12 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray19 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray26 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray33 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray40 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray48 = new double[][] { doubleArray19, doubleArray26, doubleArray33, doubleArray40, doubleArray47 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray48);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation50 = matrixMatrixMatrixOperation12.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix49);
        org.la4j.Matrix matrix52 = basic2DMatrix49.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix56.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction59 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator60 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction59);
        double double61 = matrix57.fold(matrixAccumulator60);
        double double62 = matrix57.manhattanNorm();
        matrixMatrixMatrixOperation11.ensureApplicableTo(matrix52, matrix57);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix67 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double71 = rowMajorSparseMatrix67.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix72 = rowMajorSparseMatrix67.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate73 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean74 = sparseMatrix72.is(advancedMatrixPredicate73);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator76 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double77 = sparseMatrix72.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator76);
        org.la4j.vector.functor.VectorProcedure vectorProcedure78 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator76);
        double[] doubleArray79 = matrix52.foldRows(vectorAccumulator76);
        double double80 = rowMajorSparseMatrix3.foldNonZeroInColumn((int) (short) 100, vectorAccumulator76);
        org.la4j.Matrix matrix81 = rowMajorSparseMatrix3.blank();
        org.la4j.Matrix matrix83 = rowMajorSparseMatrix3.removeColumn(0);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation11);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(matrixMatrixOperation50);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrixAccumulator60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + (-1.0d) + "'", double61 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix67);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.0d + "'", double71 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix72);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix83);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        boolean boolean29 = compressedVector26.isZeroAt((int) (short) 1);
        org.la4j.Vector vector31 = compressedVector26.blankOfLength((int) (byte) 100);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix36 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator37 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray38 = cCSMatrix36.foldRows(vectorAccumulator37);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray38);
        org.la4j.vector.dense.BasicVector basicVector40 = new org.la4j.vector.dense.BasicVector(doubleArray38);
        org.la4j.Vector vector41 = org.la4j.Vector.fromArray(doubleArray38);
        org.la4j.vector.dense.BasicVector basicVector42 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector43 = compressedVector26.subtract((org.la4j.Vector) basicVector42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 32 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(vector31);
        org.junit.Assert.assertNotNull(cCSMatrix36);
        org.junit.Assert.assertNotNull(vectorAccumulator37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(vector41);
        org.junit.Assert.assertNotNull(basicVector42);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        double double4 = cRSMatrix2.max();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray6);
        org.la4j.vector.dense.BasicVector basicVector8 = new org.la4j.vector.dense.BasicVector(doubleArray6);
        double[] doubleArray9 = basicVector8.toArray();
        org.la4j.vector.sparse.CompressedVector compressedVector11 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double12 = compressedVector11.euclideanNorm();
        org.la4j.Vector vector14 = compressedVector11.blankOfLength(52);
        boolean boolean16 = basicVector8.equals((org.la4j.Vector) compressedVector11, 7.211102550927978d);
        int int17 = compressedVector11.cardinality();
        // The following exception was thrown during execution in test generation
        try {
            compressedVector11.set(52, 7.211102550927978d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(vector14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean4 = advancedMatrixPredicate0.test((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.vector.functor.VectorFunction vectorFunction6 = null;
        org.la4j.Matrix matrix7 = columnMajorSparseMatrix3.transformRow(0, vectorFunction6);
        org.la4j.iterator.VectorIterator vectorIterator9 = columnMajorSparseMatrix3.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double17 = rowMajorSparseMatrix13.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.iterator.VectorIterator vectorIterator19 = rowMajorSparseMatrix13.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.iterator.VectorIterator vectorIterator20 = vectorIterator9.andAlsoMultiply(vectorIterator19);
        org.la4j.iterator.VectorIterator vectorIterator21 = null;
        org.la4j.iterator.VectorIterator vectorIterator22 = vectorIterator19.orElseSubtract(vectorIterator21);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vectorIterator9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(vectorIterator19);
        org.junit.Assert.assertNotNull(vectorIterator20);
        org.junit.Assert.assertNotNull(vectorIterator22);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate9 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean10 = sparseMatrix8.is(advancedMatrixPredicate9);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator12 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double13 = sparseMatrix8.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator12);
        org.la4j.vector.functor.VectorProcedure vectorProcedure14 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator12);
        vectorAccumulator12.update((int) (byte) 10, (-11.0d));
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure14);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asMulFunction(1.0E100d);
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        org.la4j.Matrix[] matrixArray10 = rawLUDecompositor9.decompose();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction11 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix15 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix16 = rowMajorSparseMatrix15.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix18 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix19 = ooPlaceMatricesSubtraction11.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix15, denseMatrix18);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix22 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double23 = columnMajorSparseMatrix22.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double27 = denseMatrix26.min();
        double double28 = denseMatrix26.sum();
        org.la4j.Matrix matrix29 = ooPlaceMatricesSubtraction11.apply(columnMajorSparseMatrix22, denseMatrix26);
        boolean boolean30 = rawLUDecompositor9.applicableTo((org.la4j.Matrix) columnMajorSparseMatrix22);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrixArray10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(denseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix1 = org.la4j.Matrix.fromCSV("%%MatrixMarket matrix array real general\n10 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator3 = columnMajorSparseMatrix2.nonZeroIterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct5 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator11 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray12 = cCSMatrix10.foldRows(vectorAccumulator11);
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray12);
        org.la4j.vector.dense.BasicVector basicVector14 = new org.la4j.vector.dense.BasicVector(doubleArray12);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator20 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray21 = cCSMatrix19.foldRows(vectorAccumulator20);
        org.la4j.matrix.DenseMatrix denseMatrix22 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray21);
        org.la4j.vector.dense.BasicVector basicVector23 = new org.la4j.vector.dense.BasicVector(doubleArray21);
        ooPlaceOuterProduct5.ensureApplicableTo((org.la4j.Vector) basicVector14, (org.la4j.Vector) basicVector23);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector26.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector31 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix32 = ooPlaceOuterProduct5.apply((org.la4j.vector.SparseVector) compressedVector26, (org.la4j.vector.SparseVector) compressedVector31);
        org.la4j.vector.functor.VectorFunction vectorFunction34 = org.la4j.Vectors.INC_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator35 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) 100, vectorFunction34);
        double double36 = compressedVector26.fold(vectorAccumulator35);
        double double37 = columnMajorSparseMatrix2.foldNonZeroInRow((int) '4', vectorAccumulator35);
        double double38 = columnMajorSparseMatrix2.density();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertNotNull(vectorAccumulator11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertNotNull(vectorAccumulator20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix22);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(vectorFunction34);
        org.junit.Assert.assertNotNull(vectorAccumulator35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix41 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double42 = columnMajorSparseMatrix41.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory43 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix44 = columnMajorSparseMatrix41.to(basic1DMatrixMatrixFactory43);
        matrixMatrixOperation38.ensureApplicableTo((org.la4j.Matrix) basic1DMatrix44);
        basic1DMatrix44.setAll((double) (-1L));
        int int48 = basic1DMatrix44.columns();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory43);
        org.junit.Assert.assertNotNull(basic1DMatrix44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor5 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double6 = cRSMatrix2.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix9 = cRSMatrix2.kroneckerProduct((org.la4j.Matrix) basic2DMatrix8);
        org.la4j.linear.LeastSquaresSolver leastSquaresSolver10 = new org.la4j.linear.LeastSquaresSolver((org.la4j.Matrix) basic2DMatrix8);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix13.shuffle();
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix13.shuffle();
        boolean boolean16 = leastSquaresSolver10.applicableTo((org.la4j.Matrix) rowMajorSparseMatrix13);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix19 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator20 = cRSMatrix19.nonZeroIterator();
        org.la4j.matrix.functor.MatrixFunction matrixFunction24 = org.la4j.Matrices.asMulFunction((double) 1);
        cRSMatrix19.updateAt((int) (short) 1, (int) (byte) 100, matrixFunction24);
        boolean boolean26 = leastSquaresSolver10.applicableTo((org.la4j.Matrix) cRSMatrix19);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(cRSMatrix19);
        org.junit.Assert.assertNotNull(matrixIterator20);
        org.junit.Assert.assertNotNull(matrixFunction24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.la4j.matrix.SparseMatrix sparseMatrix2 = org.la4j.matrix.SparseMatrix.zero((int) '4', (int) (short) 1);
        org.junit.Assert.assertNotNull(sparseMatrix2);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.la4j.Matrix matrix4 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray7 = matrix4.foldColumns(vectorAccumulator6);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix8 = org.la4j.matrix.SparseMatrix.from1DArray((int) (short) -1, (-1), doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction2 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean6 = cCSMatrix5.isRowMajor();
        org.la4j.Matrix matrix9 = cCSMatrix5.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator10 = cCSMatrix5.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix16 = rowMajorSparseMatrix14.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double24 = rowMajorSparseMatrix20.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix25 = rowMajorSparseMatrix20.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct26 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean27 = sparseMatrix25.equals((java.lang.Object) ooPlaceOuterProduct26);
        org.la4j.Matrix matrix28 = rowMajorSparseMatrix14.hadamardProduct((org.la4j.Matrix) sparseMatrix25);
        org.la4j.Matrix matrix29 = ooPlaceMatricesSubtraction2.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix5, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix14);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix31 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix34 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double35 = denseMatrix34.min();
        org.la4j.Matrix matrix36 = ooPlaceMatricesSubtraction2.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix31, denseMatrix34);
        java.util.Random random38 = null;
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.randomSymmetric(0, random38);
        double[][] doubleArray40 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray40);
        org.la4j.matrix.DenseMatrix denseMatrix42 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray40);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix43 = denseMatrix42.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix44 = ooPlaceMatricesSubtraction2.apply(denseMatrix39, denseMatrix42);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition45 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix48 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double49 = cRSMatrix48.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix53 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix54 = rowMajorSparseMatrix53.removeLastRow();
        org.la4j.Matrix matrix55 = ooPlaceMatricesAddition45.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix48, rowMajorSparseMatrix53);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix58 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix60 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix61 = ooPlaceMatricesAddition45.apply(columnMajorSparseMatrix58, denseMatrix60);
        org.la4j.Matrix matrix62 = denseMatrix60.rotate();
        org.la4j.matrix.DenseMatrix denseMatrix63 = matrix62.toDenseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix64 = rowMajorSparseMatrix1.apply((org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix>) ooPlaceMatricesSubtraction2, (org.la4j.Matrix) denseMatrix63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 5x10 does not equal to 100x100.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix1);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(cRSMatrix31);
        org.junit.Assert.assertNotNull(denseMatrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(denseMatrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(cRSMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(denseMatrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(denseMatrix63);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = new org.la4j.matrix.dense.Basic2DMatrix(10, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            basic2DMatrix2.swapRows((int) (byte) -1, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.OO_PLACE_MATRICES_MULTIPLICATION;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor5 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix4);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation6 = matrixMatrixMatrixOperation1.partiallyApply(columnMajorSparseMatrix4);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix7 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction8 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix11 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction12 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix15 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean16 = cCSMatrix15.isRowMajor();
        org.la4j.Matrix matrix19 = cCSMatrix15.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator20 = cCSMatrix15.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix24.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix30 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double34 = rowMajorSparseMatrix30.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix35 = rowMajorSparseMatrix30.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct36 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean37 = sparseMatrix35.equals((java.lang.Object) ooPlaceOuterProduct36);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix24.hadamardProduct((org.la4j.Matrix) sparseMatrix35);
        org.la4j.Matrix matrix39 = ooPlaceMatricesSubtraction12.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix15, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix24);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction8.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix11, rowMajorSparseMatrix24);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor41 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix24);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix43 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix44 = inPlaceCopyMatrixToMatrix7.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix24, (org.la4j.matrix.SparseMatrix) cRSMatrix43);
        org.la4j.matrix.DenseMatrix denseMatrix46 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix51 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator52 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray53 = cCSMatrix51.foldRows(vectorAccumulator52);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix54 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray53);
        double[][] doubleArray55 = basic1DMatrix54.toArray();
        org.la4j.Matrix matrix56 = inPlaceCopyMatrixToMatrix7.apply(denseMatrix46, (org.la4j.matrix.DenseMatrix) basic1DMatrix54);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct57 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix61.removeLastRow();
        double double66 = rowMajorSparseMatrix61.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int67 = rowMajorSparseMatrix61.cardinality();
        org.la4j.Vector vector69 = rowMajorSparseMatrix61.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix72 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix73 = ooPlaceMatrixHadamardProduct57.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix61, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix72);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition74 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix77 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double78 = cRSMatrix77.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix82 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix83 = rowMajorSparseMatrix82.removeLastRow();
        org.la4j.Matrix matrix84 = ooPlaceMatricesAddition74.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix77, rowMajorSparseMatrix82);
        org.la4j.Matrix matrix85 = inPlaceCopyMatrixToMatrix7.applySimple((org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix72, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix82);
        org.la4j.Matrix matrix87 = rowMajorSparseMatrix82.blankOfRows(52);
        org.la4j.Matrix matrix88 = ooPlaceMatrixHadamardProduct0.apply(columnMajorSparseMatrix4, rowMajorSparseMatrix82);
        double double90 = matrix88.maxInColumn((int) (byte) 1);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation6);
        org.junit.Assert.assertNotNull(basic2DMatrix11);
        org.junit.Assert.assertNotNull(cCSMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(cRSMatrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(denseMatrix46);
        org.junit.Assert.assertNotNull(cCSMatrix51);
        org.junit.Assert.assertNotNull(vectorAccumulator52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(cRSMatrix77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.unit(0);
        java.text.NumberFormat numberFormat2 = null;
        java.lang.String str3 = denseVector1.toMatrixMarket(numberFormat2);
        org.la4j.iterator.VectorIterator vectorIterator4 = denseVector1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            vectorIterator4.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: This will be supported in 0.6.0.");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "%%MatrixMarket vector array real\n0\n" + "'", str3, "%%MatrixMarket vector array real\n0\n");
        org.junit.Assert.assertNotNull(vectorIterator4);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.DenseMatrix denseMatrix6 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix7 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3, denseMatrix6);
        double[][] doubleArray8 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray8);
        org.la4j.matrix.DenseMatrix denseMatrix10 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray8);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct11 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix15 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix16 = rowMajorSparseMatrix15.removeLastRow();
        double double20 = rowMajorSparseMatrix15.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int21 = rowMajorSparseMatrix15.cardinality();
        org.la4j.Vector vector23 = rowMajorSparseMatrix15.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix26 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct11.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix15, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix26);
        org.la4j.matrix.DenseMatrix denseMatrix29 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.matrix.DenseMatrix denseMatrix31 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix32 = ooPlaceMatrixHadamardProduct11.apply(denseMatrix29, denseMatrix31);
        org.la4j.Matrix matrix34 = matrix32.divide((double) 10);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatricesSubtraction0.ensureApplicableTo((org.la4j.Matrix) denseMatrix10, matrix34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 0x0 does not equal to 100x100.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(denseMatrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(denseMatrix10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(denseMatrix29);
        org.junit.Assert.assertNotNull(denseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.la4j.vector.SparseVector sparseVector2 = org.la4j.vector.SparseVector.zero(0, 52);
        org.la4j.Matrix matrix3 = sparseVector2.toColumnMatrix();
        org.la4j.Vector vector5 = matrix3.getRow((int) (short) -1);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct15 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean16 = sparseMatrix14.equals((java.lang.Object) ooPlaceOuterProduct15);
        org.la4j.vector.DenseVector denseVector18 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random20 = null;
        org.la4j.vector.DenseVector denseVector21 = org.la4j.vector.DenseVector.random(0, random20);
        java.lang.String str22 = denseVector21.toString();
        ooPlaceOuterProduct15.ensureApplicableTo((org.la4j.Vector) denseVector18, (org.la4j.Vector) denseVector21);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray31 = cCSMatrix29.foldRows(vectorAccumulator30);
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray31);
        org.la4j.vector.dense.BasicVector basicVector33 = new org.la4j.vector.dense.BasicVector(doubleArray31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator39 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray40 = cCSMatrix38.foldRows(vectorAccumulator39);
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray40);
        org.la4j.vector.dense.BasicVector basicVector42 = new org.la4j.vector.dense.BasicVector(doubleArray40);
        ooPlaceOuterProduct24.ensureApplicableTo((org.la4j.Vector) basicVector33, (org.la4j.Vector) basicVector42);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct44 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random46 = null;
        org.la4j.vector.DenseVector denseVector47 = org.la4j.vector.DenseVector.random(0, random46);
        java.util.Random random49 = null;
        org.la4j.vector.DenseVector denseVector50 = org.la4j.vector.DenseVector.random(0, random49);
        org.la4j.Matrix matrix51 = ooPlaceOuterProduct44.apply(denseVector47, denseVector50);
        org.la4j.vector.sparse.CompressedVector compressedVector53 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix54 = ooPlaceOuterProduct24.apply(denseVector47, (org.la4j.vector.SparseVector) compressedVector53);
        java.text.NumberFormat numberFormat55 = null;
        java.lang.String str57 = denseVector47.mkString(numberFormat55, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector59 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double60 = compressedVector59.euclideanNorm();
        org.la4j.Matrix matrix61 = ooPlaceOuterProduct15.apply(denseVector47, (org.la4j.vector.SparseVector) compressedVector59);
        org.la4j.Matrix matrix62 = vector5.outerProduct((org.la4j.Vector) denseVector47);
        org.junit.Assert.assertNotNull(sparseVector2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(denseVector18);
        org.junit.Assert.assertNotNull(denseVector21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertNotNull(vectorAccumulator39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(denseVector47);
        org.junit.Assert.assertNotNull(denseVector50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator4 = columnMajorSparseMatrix3.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate15 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean16 = sparseMatrix14.is(advancedMatrixPredicate15);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double19 = sparseMatrix14.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure20 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        columnMajorSparseMatrix3.eachNonZeroInRow((-1), vectorProcedure20);
        boolean boolean22 = columnMajorSparseMatrix3.isRowMajor();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication23 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix26 = ooPlaceMatrixByItsTransposeMultiplication23.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix25);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation27 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray48 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray55 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray62 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray63 = new double[][] { doubleArray34, doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix64 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray63);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation65 = matrixMatrixMatrixOperation27.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        java.util.Spliterator<java.lang.Double> doubleSpliterator66 = basic2DMatrix64.spliterator();
        basic2DMatrix64.setAll((double) (byte) 10);
        ooPlaceMatrixByItsTransposeMultiplication23.ensureApplicableTo((org.la4j.Matrix) basic2DMatrix64);
        org.la4j.Matrix matrix70 = ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix73 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double76 = cCSMatrix73.get((int) (byte) 0, (int) (short) 1);
        double double77 = cCSMatrix73.min();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication78 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix81 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.Matrix matrix82 = ooPlaceMatrixByItsTransposeMultiplication78.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        org.la4j.Matrix matrix83 = ooPlaceKroneckerProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix73, (org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        org.la4j.vector.functor.VectorFunction vectorFunction86 = org.la4j.Vectors.asPlusFunction((double) (short) 0);
        double double89 = vectorFunction86.evaluate((int) '4', 0.0d);
        org.la4j.Matrix matrix90 = matrix83.transformColumn((int) (short) 10, vectorFunction86);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(basic2DMatrix64);
        org.junit.Assert.assertNotNull(matrixMatrixOperation65);
        org.junit.Assert.assertNotNull(doubleSpliterator66);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(cCSMatrix73);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertNotNull(basic2DMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(vectorFunction86);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(matrix90);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.DenseVector denseVector2 = org.la4j.vector.DenseVector.constant((int) (byte) -1, (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double33 = denseMatrix32.min();
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix29, denseMatrix32);
        java.util.Random random36 = null;
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.randomSymmetric(0, random36);
        double[][] doubleArray38 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray38);
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray38);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = denseMatrix40.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix42 = ooPlaceMatricesSubtraction0.apply(denseMatrix37, denseMatrix40);
        org.la4j.linear.JacobiSolver jacobiSolver43 = new org.la4j.linear.JacobiSolver(matrix42);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix46 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double47 = cRSMatrix46.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator48 = cRSMatrix46.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor49 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix46);
        double double50 = cRSMatrix46.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix52 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix53 = cRSMatrix46.kroneckerProduct((org.la4j.Matrix) basic2DMatrix52);
        org.la4j.Matrix matrix54 = cRSMatrix46.copy();
        boolean boolean55 = jacobiSolver43.applicableTo((org.la4j.Matrix) cRSMatrix46);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix60 = rowMajorSparseMatrix59.removeLastRow();
        double double64 = rowMajorSparseMatrix59.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int65 = rowMajorSparseMatrix59.cardinality();
        boolean boolean66 = jacobiSolver43.applicableTo((org.la4j.Matrix) rowMajorSparseMatrix59);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(cRSMatrix46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = null;
        rowMajorSparseMatrix14.eachNonZero(matrixProcedure16);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double24 = cCSMatrix21.get((int) (byte) 0, (int) (short) 1);
        double double25 = cCSMatrix21.min();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction26 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean30 = cCSMatrix29.isRowMajor();
        org.la4j.Matrix matrix33 = cCSMatrix29.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator34 = cCSMatrix29.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix38 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix40 = rowMajorSparseMatrix38.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double48 = rowMajorSparseMatrix44.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix49 = rowMajorSparseMatrix44.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct50 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean51 = sparseMatrix49.equals((java.lang.Object) ooPlaceOuterProduct50);
        org.la4j.Matrix matrix52 = rowMajorSparseMatrix38.hadamardProduct((org.la4j.Matrix) sparseMatrix49);
        org.la4j.Matrix matrix53 = ooPlaceMatricesSubtraction26.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix29, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix38);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator54 = cCSMatrix29.iterator();
        org.la4j.Matrix matrix55 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix21, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix29);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double63 = rowMajorSparseMatrix59.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.iterator.VectorIterator vectorIterator65 = rowMajorSparseMatrix59.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition66 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix71 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator72 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray73 = cCSMatrix71.foldRows(vectorAccumulator72);
        org.la4j.matrix.DenseMatrix denseMatrix74 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray73);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct75 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix78 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double79 = cRSMatrix78.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate80 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix83 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean84 = advancedMatrixPredicate80.test((org.la4j.Matrix) columnMajorSparseMatrix83);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter85 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix86 = ooPlaceMatrixHadamardProduct75.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix78, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix87 = ooPlaceMatricesAddition66.applySymmetric(denseMatrix74, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix88 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix59, denseMatrix74);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator89 = org.la4j.Matrices.mkInfinityNormAccumulator();
        double double90 = matrixAccumulator89.accumulate();
        double double91 = matrixAccumulator89.accumulate();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure92 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator89);
        rowMajorSparseMatrix59.each(matrixProcedure92);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(vectorIterator65);
        org.junit.Assert.assertNotNull(cCSMatrix71);
        org.junit.Assert.assertNotNull(vectorAccumulator72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix74);
        org.junit.Assert.assertNotNull(cRSMatrix78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate80);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrixAccumulator89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + Double.NEGATIVE_INFINITY + "'", double90 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + Double.NEGATIVE_INFINITY + "'", double91 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrixProcedure92);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.unit((int) ' ');
        org.junit.Assert.assertNotNull(denseVector1);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double44 = cCSMatrix41.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction46 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix47 = cCSMatrix41.transformRow(10, vectorFunction46);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix50 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator51 = cRSMatrix50.nonZeroIterator();
        org.la4j.Vector vector53 = cRSMatrix50.getColumn(100);
        boolean boolean56 = cRSMatrix50.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor57 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix50);
        org.la4j.Matrix matrix58 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix41, (org.la4j.matrix.SparseMatrix) cRSMatrix50);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix67 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix72 = rowMajorSparseMatrix71.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction74 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator75 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction74);
        double double76 = matrix72.fold(matrixAccumulator75);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure77 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator75);
        cCSMatrix67.eachNonZero(matrixProcedure77);
        org.la4j.Matrix matrix79 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix62, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix67);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix80 = null;
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix83 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray84 = cRSMatrix83.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix85 = ooPlaceMatricesAddition0.apply(rowMajorSparseMatrix80, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(cRSMatrix50);
        org.junit.Assert.assertNotNull(matrixIterator51);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrixAccumulator75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(cRSMatrix83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.DenseVector denseVector21 = org.la4j.vector.DenseVector.unit(0);
        double double22 = denseVector21.min();
        org.la4j.operation.VectorOperation<org.la4j.Matrix> matrixVectorOperation23 = ooPlaceOuterProduct0.partiallyApply(denseVector21);
        org.la4j.vector.DenseVector denseVector24 = null;
        org.la4j.vector.SparseVector sparseVector26 = org.la4j.vector.SparseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply(denseVector24, sparseVector26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(denseVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrixVectorOperation23);
        org.junit.Assert.assertNotNull(sparseVector26);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = org.la4j.vector.sparse.CompressedVector.zero((int) 'a');
        org.la4j.Matrix matrix2 = compressedVector1.toColumnMatrix();
        org.junit.Assert.assertNotNull(compressedVector1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.identity((int) (short) 1);
        org.junit.Assert.assertNotNull(basic2DMatrix1);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.la4j.matrix.SparseMatrix sparseMatrix1 = org.la4j.matrix.SparseMatrix.identity((int) 'a');
        org.junit.Assert.assertNotNull(sparseMatrix1);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor5 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double6 = cRSMatrix2.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix9 = cRSMatrix2.kroneckerProduct((org.la4j.Matrix) basic2DMatrix8);
        org.la4j.Matrix matrix10 = cRSMatrix2.copy();
        java.lang.String str11 = matrix10.toString();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000\n" + "'", str11, "10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000  0,000\n 0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000  0,000 10,000\n");
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        boolean boolean25 = compressedVector2.isZeroAt((int) ' ');
        boolean boolean27 = compressedVector2.isZeroAt((int) '4');
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory28 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector29 = compressedVector2.to(basicVectorVectorFactory28);
        double double30 = compressedVector2.infinityNorm();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory28);
        org.junit.Assert.assertNotNull(basicVector29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat6 = null;
        java.lang.String str7 = compressedVector5.toMatrixMarket(numberFormat6);
        org.la4j.Vector vector9 = compressedVector5.add((double) 52);
        org.la4j.Vector vector11 = compressedVector5.sliceRight((int) (byte) 10);
        org.la4j.Vector vector12 = ooPlaceVectorHadamardProduct0.apply(denseVector3, (org.la4j.vector.SparseVector) compressedVector5);
        org.la4j.Vector vector14 = compressedVector5.blankOfLength((int) (short) 1);
        compressedVector5.setAll(1.0d);
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str7, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(vector14);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = new org.la4j.matrix.dense.Basic2DMatrix(0, 10);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray35);
        org.la4j.matrix.SparseMatrix sparseMatrix38 = org.la4j.matrix.SparseMatrix.from2DArray(doubleArray35);
        int int39 = sparseMatrix38.cardinality();
        java.text.NumberFormat numberFormat40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = sparseMatrix38.toMatrixMarket(numberFormat40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(sparseMatrix38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 30 + "'", int39 == 30);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str4 = basic2DMatrix3.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition5 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix8 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double9 = cRSMatrix8.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix13.removeLastRow();
        org.la4j.Matrix matrix15 = ooPlaceMatricesAddition5.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix8, rowMajorSparseMatrix13);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix18 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition5.apply(columnMajorSparseMatrix18, denseMatrix20);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray25 = columnMajorSparseMatrix24.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation26 = ooPlaceMatricesAddition5.partiallyApply(columnMajorSparseMatrix24);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, columnMajorSparseMatrix24);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication38 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator42 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray43 = cCSMatrix41.foldRows(vectorAccumulator42);
        org.la4j.Matrix matrix44 = ooPlaceMatrixByItsTransposeMultiplication38.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix41);
        double double46 = cCSMatrix41.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator47 = cCSMatrix41.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix50 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator51 = cRSMatrix50.nonZeroIterator();
        org.la4j.Vector vector53 = cRSMatrix50.getColumn(100);
        boolean boolean56 = cRSMatrix50.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator58 = cRSMatrix50.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = cRSMatrix50.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory60 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix61 = cRSMatrix50.to(basic1DMatrixMatrixFactory60);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix62 = cCSMatrix41.to(basic1DMatrixMatrixFactory60);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix63 = rowMajorSparseMatrix31.to(basic1DMatrixMatrixFactory60);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix66 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean67 = cCSMatrix66.isRowMajor();
        org.la4j.Matrix matrix70 = cCSMatrix66.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator71 = cCSMatrix66.nonZeroColumnMajorIterator();
        double double74 = cCSMatrix66.get(0, (int) (byte) 1);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator75 = org.la4j.Matrices.mkInfinityNormAccumulator();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure76 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator75);
        cCSMatrix66.eachNonZero(matrixProcedure76);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix78 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix63, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix66);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str4, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertNotNull(vectorAccumulator42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator47);
        org.junit.Assert.assertNotNull(cRSMatrix50);
        org.junit.Assert.assertNotNull(matrixIterator51);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(vectorIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory60);
        org.junit.Assert.assertNotNull(basic1DMatrix61);
        org.junit.Assert.assertNotNull(basic1DMatrix62);
        org.junit.Assert.assertNotNull(basic1DMatrix63);
        org.junit.Assert.assertNotNull(cCSMatrix66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator71);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(matrixAccumulator75);
        org.junit.Assert.assertNotNull(matrixProcedure76);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.la4j.matrix.SparseMatrix sparseMatrix2 = org.la4j.matrix.SparseMatrix.zero((int) '#', 10);
        org.la4j.Matrix matrix3 = sparseMatrix2.transpose();
        double double4 = sparseMatrix2.density();
        org.junit.Assert.assertNotNull(sparseMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.zero((int) (byte) 1, (int) (short) 0);
        org.la4j.vector.functor.VectorFunction vectorFunction4 = org.la4j.Vectors.INV_FUNCTION;
        double double7 = vectorFunction4.evaluate((int) (byte) -1, (double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix8 = matrix2.transformColumn(0, vectorFunction4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(vectorFunction4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.0d) + "'", double7 == (-0.0d));
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor3 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix4 = qRDecompositor3.self();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        boolean boolean33 = qRDecompositor3.applicableTo(matrix32);
        org.la4j.Matrix matrix34 = qRDecompositor3.self();
        // The following exception was thrown during execution in test generation
        try {
            matrix34.swapRows(52, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(matrix34);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix8 = rowMajorSparseMatrix3.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct9 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean10 = sparseMatrix8.equals((java.lang.Object) ooPlaceOuterProduct9);
        org.la4j.vector.DenseVector denseVector12 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random14 = null;
        org.la4j.vector.DenseVector denseVector15 = org.la4j.vector.DenseVector.random(0, random14);
        java.lang.String str16 = denseVector15.toString();
        ooPlaceOuterProduct9.ensureApplicableTo((org.la4j.Vector) denseVector12, (org.la4j.Vector) denseVector15);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct18 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator24 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray25 = cCSMatrix23.foldRows(vectorAccumulator24);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray25);
        org.la4j.vector.dense.BasicVector basicVector27 = new org.la4j.vector.dense.BasicVector(doubleArray25);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator33 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray34 = cCSMatrix32.foldRows(vectorAccumulator33);
        org.la4j.matrix.DenseMatrix denseMatrix35 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray34);
        org.la4j.vector.dense.BasicVector basicVector36 = new org.la4j.vector.dense.BasicVector(doubleArray34);
        ooPlaceOuterProduct18.ensureApplicableTo((org.la4j.Vector) basicVector27, (org.la4j.Vector) basicVector36);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct38 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random40 = null;
        org.la4j.vector.DenseVector denseVector41 = org.la4j.vector.DenseVector.random(0, random40);
        java.util.Random random43 = null;
        org.la4j.vector.DenseVector denseVector44 = org.la4j.vector.DenseVector.random(0, random43);
        org.la4j.Matrix matrix45 = ooPlaceOuterProduct38.apply(denseVector41, denseVector44);
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix48 = ooPlaceOuterProduct18.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector47);
        java.text.NumberFormat numberFormat49 = null;
        java.lang.String str51 = denseVector41.mkString(numberFormat49, "hi!");
        org.la4j.vector.sparse.CompressedVector compressedVector53 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double54 = compressedVector53.euclideanNorm();
        org.la4j.Matrix matrix55 = ooPlaceOuterProduct9.apply(denseVector41, (org.la4j.vector.SparseVector) compressedVector53);
        org.la4j.iterator.VectorIterator vectorIterator56 = compressedVector53.nonZeroIterator();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(denseVector12);
        org.junit.Assert.assertNotNull(denseVector15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(cCSMatrix23);
        org.junit.Assert.assertNotNull(vectorAccumulator24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertNotNull(vectorAccumulator33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix35);
        org.junit.Assert.assertNotNull(denseVector41);
        org.junit.Assert.assertNotNull(denseVector44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(vectorIterator56);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction12 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix15 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction16 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean20 = cCSMatrix19.isRowMajor();
        org.la4j.Matrix matrix23 = cCSMatrix19.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator24 = cCSMatrix19.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix28 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix28.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix34 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double38 = rowMajorSparseMatrix34.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix39 = rowMajorSparseMatrix34.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct40 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean41 = sparseMatrix39.equals((java.lang.Object) ooPlaceOuterProduct40);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix28.hadamardProduct((org.la4j.Matrix) sparseMatrix39);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction16.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix19, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix28);
        org.la4j.Matrix matrix44 = ooPlaceMatricesSubtraction12.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix15, rowMajorSparseMatrix28);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition45 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix48 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double49 = cRSMatrix48.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix53 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix54 = rowMajorSparseMatrix53.removeLastRow();
        org.la4j.Matrix matrix55 = ooPlaceMatricesAddition45.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix48, rowMajorSparseMatrix53);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix58 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator59 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray60 = cCSMatrix58.foldRows(vectorAccumulator59);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix63 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix64 = ooPlaceMatricesAddition45.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix58, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix63);
        double double65 = rowMajorSparseMatrix63.norm();
        org.la4j.Matrix matrix66 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix15, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix63);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix69 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix72 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean73 = cCSMatrix72.isRowMajor();
        org.la4j.Matrix matrix76 = cCSMatrix72.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator77 = cCSMatrix72.nonZeroColumnMajorIterator();
        double double80 = cCSMatrix72.get(0, (int) (byte) 1);
        org.la4j.Matrix matrix81 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix69, (org.la4j.matrix.SparseMatrix) cCSMatrix72);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix84 = basic2DMatrix69.blankOfShape((int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(basic2DMatrix15);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator24);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(cRSMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cCSMatrix58);
        org.junit.Assert.assertNotNull(vectorAccumulator59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(basic2DMatrix69);
        org.junit.Assert.assertNotNull(cCSMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator77);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(matrix81);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator3 = cRSMatrix2.nonZeroRowMajorIterator();
        boolean boolean4 = cRSMatrix2.isRowMajor();
        org.la4j.iterator.VectorIterator vectorIterator6 = cRSMatrix2.nonZeroIteratorOfColumn((int) (byte) 0);
        org.la4j.matrix.functor.MatrixFunction matrixFunction10 = org.la4j.Matrices.asPlusFunction(7.211102550927978d);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix2.updateAt((int) (byte) 10, (int) '#', matrixFunction10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(vectorIterator6);
        org.junit.Assert.assertNotNull(matrixFunction10);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Vector vector10 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str11 = vector10.toCSV();
        org.la4j.vector.SparseVector sparseVector12 = vector10.toSparseVector();
        boolean boolean14 = sparseVector12.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator15 = sparseVector12.iterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct16 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator22 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray23 = cCSMatrix21.foldRows(vectorAccumulator22);
        org.la4j.matrix.DenseMatrix denseMatrix24 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray23);
        org.la4j.vector.dense.BasicVector basicVector25 = new org.la4j.vector.dense.BasicVector(doubleArray23);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix30 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator31 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray32 = cCSMatrix30.foldRows(vectorAccumulator31);
        org.la4j.matrix.DenseMatrix denseMatrix33 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray32);
        org.la4j.vector.dense.BasicVector basicVector34 = new org.la4j.vector.dense.BasicVector(doubleArray32);
        ooPlaceOuterProduct16.ensureApplicableTo((org.la4j.Vector) basicVector25, (org.la4j.Vector) basicVector34);
        org.la4j.vector.sparse.CompressedVector compressedVector37 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix38 = compressedVector37.toColumnMatrix();
        org.la4j.Matrix matrix39 = sparseVector12.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct16, (org.la4j.Vector) compressedVector37);
        org.la4j.Vector vector40 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3, sparseVector12);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication41 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.Matrix matrix47 = ooPlaceMatrixByItsTransposeMultiplication41.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        double double49 = cCSMatrix44.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator50 = cCSMatrix44.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix53 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator54 = cRSMatrix53.nonZeroIterator();
        org.la4j.Vector vector56 = cRSMatrix53.getColumn(100);
        boolean boolean59 = cRSMatrix53.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator61 = cRSMatrix53.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = cRSMatrix53.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory63 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix64 = cRSMatrix53.to(basic1DMatrixMatrixFactory63);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix65 = cCSMatrix44.to(basic1DMatrixMatrixFactory63);
        java.util.Random random67 = null;
        org.la4j.vector.DenseVector denseVector68 = org.la4j.vector.DenseVector.random(0, random67);
        java.text.NumberFormat numberFormat69 = null;
        java.lang.String str71 = denseVector68.mkString(numberFormat69, "100,000 100,000 100,000 100,000 100,000 100,000\n100,000   1,000 100,000 100,000 100,000 100,000\n100,000 100,000 100,000 100,000 100,000 100,000\n100,000 100,000 100,000 100,000 100,000 100,000\n100,000 100,000 100,000 100,000 100,000 100,000\n");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector72 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44, denseVector68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str11, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(vectorIterator15);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertNotNull(vectorAccumulator22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix24);
        org.junit.Assert.assertNotNull(cCSMatrix30);
        org.junit.Assert.assertNotNull(vectorAccumulator31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix33);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-1.0d) + "'", double49 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator50);
        org.junit.Assert.assertNotNull(cRSMatrix53);
        org.junit.Assert.assertNotNull(matrixIterator54);
        org.junit.Assert.assertNotNull(vector56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(vectorIterator61);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory63);
        org.junit.Assert.assertNotNull(basic1DMatrix64);
        org.junit.Assert.assertNotNull(basic1DMatrix65);
        org.junit.Assert.assertNotNull(denseVector68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.fromCSV("");
        org.la4j.Matrix matrix16 = cCSMatrix13.blankOfShape((int) (byte) 100, (int) '#');
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix19 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray20 = cRSMatrix19.toBinary();
        org.la4j.Matrix matrix21 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix13, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix19);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = cRSMatrix19.minInRow((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(cRSMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(matrix21);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        ooPlaceOuterProduct28.ensureApplicableTo((org.la4j.Vector) basicVector37, (org.la4j.Vector) basicVector46);
        org.la4j.vector.sparse.CompressedVector compressedVector49 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix50 = compressedVector49.toColumnMatrix();
        org.la4j.vector.dense.BasicVector basicVector52 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition53 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double57 = cRSMatrix56.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix61.removeLastRow();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition53.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56, rowMajorSparseMatrix61);
        boolean boolean64 = basicVector52.equals((java.lang.Object) rowMajorSparseMatrix61);
        org.la4j.Matrix matrix65 = ooPlaceOuterProduct28.apply((org.la4j.vector.SparseVector) compressedVector49, (org.la4j.vector.DenseVector) basicVector52);
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation66 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector68 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random70 = null;
        org.la4j.vector.DenseVector denseVector71 = org.la4j.vector.DenseVector.random(0, random70);
        org.la4j.Matrix matrix72 = matrixVectorVectorOperation66.apply(sparseVector68, denseVector71);
        org.la4j.Matrix matrix73 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector49, sparseVector68);
        byte[] byteArray74 = compressedVector49.toBinary();
        double double75 = compressedVector49.manhattanNorm();
        org.la4j.iterator.VectorIterator vectorIterator76 = compressedVector49.nonZeroIterator();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(basicVector52);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation66);
        org.junit.Assert.assertNotNull(sparseVector68);
        org.junit.Assert.assertNotNull(denseVector71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[16, 0, 0, 0, 32, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(vectorIterator76);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        double double28 = compressedVector26.density();
        // The following exception was thrown during execution in test generation
        try {
            double double31 = compressedVector26.getOrElse((int) (byte) 100, Double.NEGATIVE_INFINITY);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector2 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random4 = null;
        org.la4j.vector.DenseVector denseVector5 = org.la4j.vector.DenseVector.random(0, random4);
        org.la4j.Matrix matrix6 = matrixVectorVectorOperation0.apply(sparseVector2, denseVector5);
        double double7 = denseVector5.sum();
        double double8 = denseVector5.infinityNorm();
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation0);
        org.junit.Assert.assertNotNull(sparseVector2);
        org.junit.Assert.assertNotNull(denseVector5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.NEGATIVE_INFINITY + "'", double8 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix19 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix13, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.decomposition.LUDecompositor lUDecompositor20 = new org.la4j.decomposition.LUDecompositor(matrix19);
        org.la4j.Matrix matrix22 = matrix19.power((int) (byte) 10);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat2 = null;
        java.lang.String str3 = compressedVector1.toMatrixMarket(numberFormat2);
        org.la4j.Vector vector5 = compressedVector1.add((double) 52);
        compressedVector1.swapElements((int) (short) 1, (int) (byte) 1);
        org.la4j.Matrix matrix9 = compressedVector1.toColumnMatrix();
        org.la4j.Vector vector11 = compressedVector1.multiply((-2.0d));
        double double12 = compressedVector1.min();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str3, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray20 = columnMajorSparseMatrix19.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation21 = ooPlaceMatricesAddition0.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator25 = cCSMatrix24.iterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix28 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double31 = cCSMatrix28.get((int) (byte) 0, (int) (short) 1);
        double double32 = cCSMatrix28.min();
        org.la4j.Matrix matrix33 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix24, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix28);
        org.la4j.Matrix matrix35 = cCSMatrix24.add((double) 30);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator25);
        org.junit.Assert.assertNotNull(cCSMatrix28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix35);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.la4j.vector.SparseVector sparseVector2 = org.la4j.vector.SparseVector.zero(0, 52);
        org.la4j.vector.dense.BasicVector basicVector4 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector5 = basicVector4.copy();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double18 = rowMajorSparseMatrix14.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix19 = rowMajorSparseMatrix14.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate20 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean21 = sparseMatrix19.is(advancedMatrixPredicate20);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double24 = sparseMatrix19.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator23);
        org.la4j.vector.functor.VectorProcedure vectorProcedure25 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator23);
        cCSMatrix8.eachInRow((int) (short) 1, vectorProcedure25);
        basicVector4.each(vectorProcedure25);
        sparseVector2.eachNonZero(vectorProcedure25);
        org.junit.Assert.assertNotNull(sparseVector2);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix19);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure25);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.Matrix matrix39 = matrix38.copy();
        org.la4j.Matrix matrix40 = matrix39.shuffle();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) ' ');
        org.junit.Assert.assertNotNull(vector1);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct20 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random22 = null;
        org.la4j.vector.DenseVector denseVector23 = org.la4j.vector.DenseVector.random(0, random22);
        java.util.Random random25 = null;
        org.la4j.vector.DenseVector denseVector26 = org.la4j.vector.DenseVector.random(0, random25);
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct20.apply(denseVector23, denseVector26);
        org.la4j.vector.sparse.CompressedVector compressedVector29 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix30 = ooPlaceOuterProduct0.apply(denseVector23, (org.la4j.vector.SparseVector) compressedVector29);
        org.la4j.Vector vector33 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction35 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector36 = vector33.transform(vectorFunction35);
        compressedVector29.updateAt(52, vectorFunction35);
        java.lang.Class<?> wildcardClass38 = compressedVector29.getClass();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(denseVector23);
        org.junit.Assert.assertNotNull(denseVector26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(vector33);
        org.junit.Assert.assertNotNull(vectorFunction35);
        org.junit.Assert.assertNotNull(vector36);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver23 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix22);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) '4', 0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean30 = cCSMatrix29.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double39 = rowMajorSparseMatrix35.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix40 = rowMajorSparseMatrix35.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate41 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean42 = sparseMatrix40.is(advancedMatrixPredicate41);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator44 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double45 = sparseMatrix40.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator44);
        org.la4j.vector.functor.VectorProcedure vectorProcedure46 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator44);
        cCSMatrix29.eachInRow((int) (short) 1, vectorProcedure46);
        compressedVector26.each(vectorProcedure46);
        org.la4j.Vector vector50 = compressedVector26.subtract((-0.0d));
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector51 = forwardBackSubstitutionSolver23.solve((org.la4j.Vector) compressedVector26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong length of RHS vector: 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix40);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure46);
        org.junit.Assert.assertNotNull(vector50);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator4 = columnMajorSparseMatrix3.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate15 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean16 = sparseMatrix14.is(advancedMatrixPredicate15);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double19 = sparseMatrix14.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure20 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        columnMajorSparseMatrix3.eachNonZeroInRow((-1), vectorProcedure20);
        boolean boolean22 = columnMajorSparseMatrix3.isRowMajor();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication23 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix26 = ooPlaceMatrixByItsTransposeMultiplication23.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix25);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation27 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray48 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray55 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray62 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray63 = new double[][] { doubleArray34, doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix64 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray63);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation65 = matrixMatrixMatrixOperation27.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        java.util.Spliterator<java.lang.Double> doubleSpliterator66 = basic2DMatrix64.spliterator();
        basic2DMatrix64.setAll((double) (byte) 10);
        ooPlaceMatrixByItsTransposeMultiplication23.ensureApplicableTo((org.la4j.Matrix) basic2DMatrix64);
        org.la4j.Matrix matrix70 = ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix73 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double76 = cCSMatrix73.get((int) (byte) 0, (int) (short) 1);
        double double77 = cCSMatrix73.min();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication78 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix81 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.Matrix matrix82 = ooPlaceMatrixByItsTransposeMultiplication78.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        org.la4j.Matrix matrix83 = ooPlaceKroneckerProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix73, (org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        java.util.Iterator<java.lang.Integer> intItor84 = cCSMatrix73.iteratorOrNonZeroColumns();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(basic2DMatrix64);
        org.junit.Assert.assertNotNull(matrixMatrixOperation65);
        org.junit.Assert.assertNotNull(doubleSpliterator66);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(cCSMatrix73);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertNotNull(basic2DMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(intItor84);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate17 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix20 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean21 = advancedMatrixPredicate17.test((org.la4j.Matrix) columnMajorSparseMatrix20);
        org.la4j.vector.functor.VectorFunction vectorFunction23 = null;
        org.la4j.Matrix matrix24 = columnMajorSparseMatrix20.transformRow(0, vectorFunction23);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix25 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction26 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix29 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction30 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean34 = cCSMatrix33.isRowMajor();
        org.la4j.Matrix matrix37 = cCSMatrix33.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator38 = cCSMatrix33.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix44 = rowMajorSparseMatrix42.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double52 = rowMajorSparseMatrix48.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix53 = rowMajorSparseMatrix48.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct54 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean55 = sparseMatrix53.equals((java.lang.Object) ooPlaceOuterProduct54);
        org.la4j.Matrix matrix56 = rowMajorSparseMatrix42.hadamardProduct((org.la4j.Matrix) sparseMatrix53);
        org.la4j.Matrix matrix57 = ooPlaceMatricesSubtraction30.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix33, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix42);
        org.la4j.Matrix matrix58 = ooPlaceMatricesSubtraction26.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix29, rowMajorSparseMatrix42);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor59 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix42);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix61 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix62 = inPlaceCopyMatrixToMatrix25.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix42, (org.la4j.matrix.SparseMatrix) cRSMatrix61);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix66 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix67 = rowMajorSparseMatrix66.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix73 = rowMajorSparseMatrix71.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory74 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix75 = matrix73.to(basic1DMatrixMatrixFactory74);
        org.la4j.Matrix matrix76 = inPlaceCopyMatrixToMatrix25.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix66, (org.la4j.matrix.DenseMatrix) basic1DMatrix75);
        org.la4j.Matrix matrix77 = ooPlaceMatrixHadamardProduct0.apply(columnMajorSparseMatrix20, (org.la4j.matrix.DenseMatrix) basic1DMatrix75);
        org.la4j.inversion.GaussJordanInverter gaussJordanInverter78 = new org.la4j.inversion.GaussJordanInverter(matrix77);
        org.la4j.Matrix matrix79 = gaussJordanInverter78.inverse();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate17);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(basic2DMatrix29);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(cRSMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory74);
        org.junit.Assert.assertNotNull(basic1DMatrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix79);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("%%MatrixMarket vector array real\n0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        java.util.Random random12 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix13 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random12);
        org.la4j.Matrix matrix14 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix13);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix17 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator18 = cRSMatrix17.nonZeroIterator();
        org.la4j.Vector vector20 = cRSMatrix17.getColumn(100);
        boolean boolean23 = cRSMatrix17.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor24 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix17);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition25 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix28 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double29 = cRSMatrix28.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix33.removeLastRow();
        org.la4j.Matrix matrix35 = ooPlaceMatricesAddition25.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix28, rowMajorSparseMatrix33);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition36 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix39 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double40 = cRSMatrix39.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        org.la4j.Matrix matrix46 = ooPlaceMatricesAddition36.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix39, rowMajorSparseMatrix44);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix49 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix51 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix52 = ooPlaceMatricesAddition36.apply(columnMajorSparseMatrix49, denseMatrix51);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix56.removeLastRow();
        double double61 = rowMajorSparseMatrix56.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector62 = rowMajorSparseMatrix56.toRowVector();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition25.apply(denseMatrix51, rowMajorSparseMatrix56);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix66 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double69 = cCSMatrix66.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction71 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix72 = cCSMatrix66.transformRow(10, vectorFunction71);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix75 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator76 = cRSMatrix75.nonZeroIterator();
        org.la4j.Vector vector78 = cRSMatrix75.getColumn(100);
        boolean boolean81 = cRSMatrix75.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor82 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix75);
        org.la4j.Matrix matrix83 = ooPlaceMatricesAddition25.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix66, (org.la4j.matrix.SparseMatrix) cRSMatrix75);
        org.la4j.Matrix matrix85 = cCSMatrix66.copyOfRows(0);
        org.la4j.Matrix matrix86 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix17, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix66);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix89 = cCSMatrix66.blankOfShape(100, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 100x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(cRSMatrix17);
        org.junit.Assert.assertNotNull(matrixIterator18);
        org.junit.Assert.assertNotNull(vector20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cRSMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(cRSMatrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(denseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cCSMatrix66);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(cRSMatrix75);
        org.junit.Assert.assertNotNull(matrixIterator76);
        org.junit.Assert.assertNotNull(vector78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix5 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix6 = rowMajorSparseMatrix5.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix9 = ooPlaceMatricesSubtraction1.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix5, denseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double13 = columnMajorSparseMatrix12.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory14 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix15 = columnMajorSparseMatrix12.to(basic1DMatrixMatrixFactory14);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure21 = null;
        rowMajorSparseMatrix19.eachNonZero(matrixProcedure21);
        org.la4j.Matrix matrix23 = ooPlaceMatricesSubtraction1.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix15, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix19);
        org.la4j.Matrix matrix24 = basic1DMatrix15.shuffle();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix27 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator28 = cRSMatrix27.nonZeroIterator();
        org.la4j.Vector vector30 = cRSMatrix27.getColumn(100);
        boolean boolean33 = cRSMatrix27.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator35 = cRSMatrix27.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = cRSMatrix27.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory37 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix38 = cRSMatrix27.to(basic1DMatrixMatrixFactory37);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix39 = matrix24.to(basic1DMatrixMatrixFactory37);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation40 = org.la4j.LinearAlgebra.OO_PLACE_MATRICES_MULTIPLICATION;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix43 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor44 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix43);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation45 = matrixMatrixMatrixOperation40.partiallyApply(columnMajorSparseMatrix43);
        org.la4j.matrix.functor.MatrixFunction matrixFunction47 = org.la4j.Matrices.DEC_FUNCTION;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator48 = org.la4j.Matrices.asSumFunctionAccumulator((double) (short) -1, matrixFunction47);
        double double49 = columnMajorSparseMatrix43.foldNonZero(matrixAccumulator48);
        org.la4j.Matrix matrix50 = ooPlaceKroneckerProduct0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix39, columnMajorSparseMatrix43);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition51 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix54 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double55 = cRSMatrix54.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix60 = rowMajorSparseMatrix59.removeLastRow();
        org.la4j.Matrix matrix61 = ooPlaceMatricesAddition51.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix54, rowMajorSparseMatrix59);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix64 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix66 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix67 = ooPlaceMatricesAddition51.apply(columnMajorSparseMatrix64, denseMatrix66);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix70 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator71 = cRSMatrix70.nonZeroIterator();
        org.la4j.Vector vector73 = cRSMatrix70.getColumn(100);
        boolean boolean76 = cRSMatrix70.nonZeroAt(1, (int) (short) 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix79 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator80 = cRSMatrix79.nonZeroIterator();
        org.la4j.Vector vector82 = cRSMatrix79.getColumn(100);
        boolean boolean85 = cRSMatrix79.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator87 = cRSMatrix79.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix88 = cRSMatrix79.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory89 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix90 = cRSMatrix79.to(basic1DMatrixMatrixFactory89);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix91 = cRSMatrix70.to(basic1DMatrixMatrixFactory89);
        org.la4j.Matrix matrix94 = basic1DMatrix91.copyOfShape(0, (int) (short) 10);
        org.la4j.Matrix matrix95 = ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix64, (org.la4j.matrix.DenseMatrix) basic1DMatrix91);
        org.la4j.Matrix matrix98 = basic1DMatrix91.blankOfShape((int) ' ', (int) (byte) 100);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory14);
        org.junit.Assert.assertNotNull(basic1DMatrix15);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(cRSMatrix27);
        org.junit.Assert.assertNotNull(matrixIterator28);
        org.junit.Assert.assertNotNull(vector30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(vectorIterator35);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory37);
        org.junit.Assert.assertNotNull(basic1DMatrix38);
        org.junit.Assert.assertNotNull(basic1DMatrix39);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation40);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation45);
        org.junit.Assert.assertNotNull(matrixFunction47);
        org.junit.Assert.assertNotNull(matrixAccumulator48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-11.0d) + "'", double49 == (-11.0d));
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(cRSMatrix54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix64);
        org.junit.Assert.assertNotNull(denseMatrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(cRSMatrix70);
        org.junit.Assert.assertNotNull(matrixIterator71);
        org.junit.Assert.assertNotNull(vector73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(cRSMatrix79);
        org.junit.Assert.assertNotNull(matrixIterator80);
        org.junit.Assert.assertNotNull(vector82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(vectorIterator87);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix88);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory89);
        org.junit.Assert.assertNotNull(basic1DMatrix90);
        org.junit.Assert.assertNotNull(basic1DMatrix91);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(matrix98);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix8.rotate();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("%%MatrixMarket matrix coordinate real general column-major\n0 1 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = cRSMatrix2.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory12 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix13 = cRSMatrix2.to(basic1DMatrixMatrixFactory12);
        // The following exception was thrown during execution in test generation
        try {
            basic1DMatrix13.set((int) 'a', (int) (short) 100, (double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '97' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory12);
        org.junit.Assert.assertNotNull(basic1DMatrix13);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication1 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.Matrix matrix7 = ooPlaceMatrixByItsTransposeMultiplication1.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix4);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation8 = ooPlaceMatrixByVectorMultiplication0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix4);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate9 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean13 = advancedMatrixPredicate9.test((org.la4j.Matrix) columnMajorSparseMatrix12);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.Vector vector19 = org.la4j.Vector.fromArray(doubleArray18);
        org.la4j.vector.dense.BasicVector basicVector20 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray18);
        org.la4j.Vector vector21 = ooPlaceMatrixByVectorMultiplication0.apply(columnMajorSparseMatrix12, (org.la4j.vector.DenseVector) basicVector20);
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vectorVectorOperation8);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector19);
        org.junit.Assert.assertNotNull(basicVector20);
        org.junit.Assert.assertNotNull(vector21);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix7 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator8 = columnMajorSparseMatrix7.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator9 = rowMajorMatrixIterator4.orElseSubtract(matrixIterator8);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = matrixIterator8.rowIndex();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix7);
        org.junit.Assert.assertNotNull(matrixIterator8);
        org.junit.Assert.assertNotNull(matrixIterator9);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix4 = org.la4j.matrix.SparseMatrix.random((int) (short) -1, 0, 35.0d, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator1 = org.la4j.Vectors.asProductAccumulator((-11.0d));
        org.junit.Assert.assertNotNull(vectorAccumulator1);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator30 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray31 = cCSMatrix29.foldRows(vectorAccumulator30);
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray31);
        org.la4j.vector.dense.BasicVector basicVector33 = new org.la4j.vector.dense.BasicVector(doubleArray31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator39 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray40 = cCSMatrix38.foldRows(vectorAccumulator39);
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray40);
        org.la4j.vector.dense.BasicVector basicVector42 = new org.la4j.vector.dense.BasicVector(doubleArray40);
        ooPlaceOuterProduct24.ensureApplicableTo((org.la4j.Vector) basicVector33, (org.la4j.Vector) basicVector42);
        org.la4j.vector.sparse.CompressedVector compressedVector45 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector45.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector50 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix51 = ooPlaceOuterProduct24.apply((org.la4j.vector.SparseVector) compressedVector45, (org.la4j.vector.SparseVector) compressedVector50);
        boolean boolean53 = compressedVector50.isZeroAt((int) (short) 1);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.Vector vector58 = cRSMatrix56.getColumn(30);
        org.la4j.Vector vector59 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector50, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56);
        boolean boolean61 = compressedVector50.nonZeroAt((int) 'a');
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertNotNull(vectorAccumulator30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertNotNull(vectorAccumulator39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.la4j.operation.ooplace.OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new org.la4j.operation.ooplace.OoPlaceVectorsAddition();
        org.la4j.Vector vector2 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction4 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector5 = vector2.transform(vectorFunction4);
        double double6 = vector2.product();
        org.la4j.vector.DenseVector denseVector7 = vector2.toDenseVector();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct8 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random10 = null;
        org.la4j.vector.DenseVector denseVector11 = org.la4j.vector.DenseVector.random(0, random10);
        java.util.Random random13 = null;
        org.la4j.vector.DenseVector denseVector14 = org.la4j.vector.DenseVector.random(0, random13);
        org.la4j.Matrix matrix15 = ooPlaceOuterProduct8.apply(denseVector11, denseVector14);
        org.la4j.vector.sparse.CompressedVector compressedVector17 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat18 = null;
        java.lang.String str19 = compressedVector17.toMatrixMarket(numberFormat18);
        org.la4j.Vector vector21 = compressedVector17.add((double) 52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator25 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray26 = cCSMatrix24.foldRows(vectorAccumulator25);
        org.la4j.vector.dense.BasicVector basicVector27 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray26);
        org.la4j.Matrix matrix28 = basicVector27.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate29 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean30 = basicVector27.non(vectorPredicate29);
        org.la4j.Vector vector32 = basicVector27.blankOfLength((int) 'a');
        org.la4j.Matrix matrix33 = ooPlaceOuterProduct8.apply((org.la4j.vector.SparseVector) compressedVector17, (org.la4j.vector.DenseVector) basicVector27);
        org.la4j.Vector vector34 = ooPlaceVectorsAddition0.apply(denseVector7, (org.la4j.vector.DenseVector) basicVector27);
        org.la4j.vector.dense.BasicVector basicVector36 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector37 = basicVector36.copy();
        org.la4j.Matrix matrix38 = basicVector36.toDiagonalMatrix();
        org.la4j.Vector vector40 = basicVector36.copyOfLength(10);
        org.la4j.vector.SparseVector sparseVector43 = org.la4j.vector.SparseVector.zero((int) (short) 100, (int) (byte) 0);
        org.la4j.Vector vector44 = ooPlaceVectorsAddition0.apply((org.la4j.vector.DenseVector) basicVector36, sparseVector43);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector((int) (short) 1);
        org.la4j.vector.sparse.CompressedVector compressedVector48 = new org.la4j.vector.sparse.CompressedVector((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceVectorsAddition0.ensureApplicableTo((org.la4j.Vector) basicVector46, (org.la4j.Vector) compressedVector48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 1 does not equal to 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2);
        org.junit.Assert.assertNotNull(vectorFunction4);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(denseVector7);
        org.junit.Assert.assertNotNull(denseVector11);
        org.junit.Assert.assertNotNull(denseVector14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str19, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertNotNull(vectorAccumulator25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(vectorPredicate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(vector32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(vector34);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertNotNull(sparseVector43);
        org.junit.Assert.assertNotNull(vector44);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.la4j.vector.DenseVector denseVector2 = org.la4j.vector.DenseVector.constant((int) (byte) 0, 52.0d);
        org.junit.Assert.assertNotNull(denseVector2);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.random(10, (int) (byte) -1, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.la4j.operation.ooplace.OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new org.la4j.operation.ooplace.OoPlaceVectorsAddition();
        org.la4j.vector.SparseVector sparseVector1 = null;
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct2 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray9 = cCSMatrix7.foldRows(vectorAccumulator8);
        org.la4j.matrix.DenseMatrix denseMatrix10 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray9);
        org.la4j.vector.dense.BasicVector basicVector11 = new org.la4j.vector.dense.BasicVector(doubleArray9);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.matrix.DenseMatrix denseMatrix19 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray18);
        org.la4j.vector.dense.BasicVector basicVector20 = new org.la4j.vector.dense.BasicVector(doubleArray18);
        ooPlaceOuterProduct2.ensureApplicableTo((org.la4j.Vector) basicVector11, (org.la4j.Vector) basicVector20);
        org.la4j.vector.sparse.CompressedVector compressedVector23 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector23.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector28 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix29 = ooPlaceOuterProduct2.apply((org.la4j.vector.SparseVector) compressedVector23, (org.la4j.vector.SparseVector) compressedVector28);
        double double30 = compressedVector28.density();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector31 = ooPlaceVectorsAddition0.apply(sparseVector1, (org.la4j.vector.SparseVector) compressedVector28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix10);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix19);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        java.util.Spliterator<java.lang.Double> doubleSpliterator39 = basic2DMatrix37.spliterator();
        org.la4j.Vector vector40 = basic2DMatrix37.toRowVector();
        double[][] doubleArray41 = basic2DMatrix37.toArray();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.from2DArray(doubleArray41);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleSpliterator39);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        basic2DMatrix36.setAll((double) 100);
        org.la4j.matrix.functor.MatrixFunction matrixFunction39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix40 = basic2DMatrix36.transform(matrixFunction39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator7 = cCSMatrix2.nonZeroColumnMajorIterator();
        double double10 = cCSMatrix2.get(0, (int) (byte) 1);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator11 = org.la4j.Matrices.mkInfinityNormAccumulator();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure12 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator11);
        cCSMatrix2.eachNonZero(matrixProcedure12);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction15 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix18 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean19 = cCSMatrix18.isRowMajor();
        org.la4j.Matrix matrix22 = cCSMatrix18.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator23 = cCSMatrix18.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix27 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix29 = rowMajorSparseMatrix27.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double37 = rowMajorSparseMatrix33.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix38 = rowMajorSparseMatrix33.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct39 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean40 = sparseMatrix38.equals((java.lang.Object) ooPlaceOuterProduct39);
        org.la4j.Matrix matrix41 = rowMajorSparseMatrix27.hadamardProduct((org.la4j.Matrix) sparseMatrix38);
        org.la4j.Matrix matrix42 = ooPlaceMatricesSubtraction15.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix18, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix27);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator44 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double45 = cCSMatrix18.foldNonZeroInRow((int) (short) 0, vectorAccumulator44);
        org.la4j.vector.functor.VectorProcedure vectorProcedure46 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator44);
        cCSMatrix2.eachInColumn(0, vectorProcedure46);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix51 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        cRSMatrix51.setRow(0, (double) '4');
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix61 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator62 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray63 = cCSMatrix61.foldRows(vectorAccumulator62);
        org.la4j.matrix.DenseMatrix denseMatrix64 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray63);
        org.la4j.vector.dense.BasicVector basicVector65 = new org.la4j.vector.dense.BasicVector(doubleArray63);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix70 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator71 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray72 = cCSMatrix70.foldRows(vectorAccumulator71);
        org.la4j.matrix.DenseMatrix denseMatrix73 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray72);
        org.la4j.vector.dense.BasicVector basicVector74 = new org.la4j.vector.dense.BasicVector(doubleArray72);
        ooPlaceOuterProduct56.ensureApplicableTo((org.la4j.Vector) basicVector65, (org.la4j.Vector) basicVector74);
        org.la4j.vector.sparse.CompressedVector compressedVector77 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector77.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector82 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix83 = ooPlaceOuterProduct56.apply((org.la4j.vector.SparseVector) compressedVector77, (org.la4j.vector.SparseVector) compressedVector82);
        org.la4j.vector.functor.VectorFunction vectorFunction85 = org.la4j.Vectors.INC_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator86 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) 100, vectorFunction85);
        double double87 = compressedVector77.fold(vectorAccumulator86);
        org.la4j.vector.functor.VectorProcedure vectorProcedure88 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator86);
        cRSMatrix51.eachNonZeroInColumn(10, vectorProcedure88);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.eachNonZeroInColumn(52, vectorProcedure88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(matrixAccumulator11);
        org.junit.Assert.assertNotNull(matrixProcedure12);
        org.junit.Assert.assertNotNull(cCSMatrix18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator23);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertNotNull(vectorProcedure46);
        org.junit.Assert.assertNotNull(cRSMatrix51);
        org.junit.Assert.assertNotNull(cCSMatrix61);
        org.junit.Assert.assertNotNull(vectorAccumulator62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix64);
        org.junit.Assert.assertNotNull(cCSMatrix70);
        org.junit.Assert.assertNotNull(vectorAccumulator71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix73);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(vectorFunction85);
        org.junit.Assert.assertNotNull(vectorAccumulator86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 100.0d + "'", double87 == 100.0d);
        org.junit.Assert.assertNotNull(vectorProcedure88);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory81 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix82 = basic2DMatrix77.to(basic1DMatrixMatrixFactory81);
        org.la4j.Matrix matrix85 = basic1DMatrix82.blankOfShape((int) 'a', 1);
        org.la4j.Matrix matrix86 = matrix85.shuffle();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory81);
        org.junit.Assert.assertNotNull(basic1DMatrix82);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric(10, (double) (byte) 1, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        denseVector1.setAll((double) 1L);
        org.junit.Assert.assertNotNull(denseVector1);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        boolean boolean4 = columnMajorSparseMatrix2.isRowMajor();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = noPivotGaussInverter10.inverse();
        org.la4j.Matrix matrix12 = noPivotGaussInverter10.inverse();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix15 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double16 = cRSMatrix15.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator17 = cRSMatrix15.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor18 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix15);
        double double19 = cRSMatrix15.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix21 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix22 = cRSMatrix15.kroneckerProduct((org.la4j.Matrix) basic2DMatrix21);
        org.la4j.vector.functor.VectorFunction vectorFunction26 = org.la4j.Vectors.asModFunction((double) (byte) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator27 = org.la4j.Vectors.asProductFunctionAccumulator((double) (-1), vectorFunction26);
        matrix22.updateColumn((int) (short) 1, vectorFunction26);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate29 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix32 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean33 = advancedMatrixPredicate29.test((org.la4j.Matrix) columnMajorSparseMatrix32);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter34 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix32);
        org.la4j.Matrix matrix35 = noPivotGaussInverter34.inverse();
        org.la4j.Matrix matrix36 = noPivotGaussInverter34.self();
        org.la4j.Matrix matrix37 = noPivotGaussInverter34.self();
        org.la4j.Matrix matrix38 = noPivotGaussInverter34.self();
        org.la4j.Matrix matrix39 = noPivotGaussInverter34.self();
        org.la4j.matrix.SparseMatrix sparseMatrix40 = org.la4j.matrix.SparseMatrix.block((org.la4j.Matrix) columnMajorSparseMatrix2, matrix12, matrix22, matrix39);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(cRSMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vectorFunction26);
        org.junit.Assert.assertNotNull(vectorAccumulator27);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate29);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(sparseMatrix40);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.randomSymmetric((int) '4', random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix42.removeLastRow();
        double double47 = rowMajorSparseMatrix42.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector48 = rowMajorSparseMatrix42.toRowVector();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix52.removeLastRow();
        double double57 = rowMajorSparseMatrix52.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector58 = rowMajorSparseMatrix52.toRowVector();
        org.la4j.Matrix matrix59 = matrixMatrixMatrixOperation0.apply(rowMajorSparseMatrix42, rowMajorSparseMatrix52);
        org.la4j.Matrix matrix60 = rowMajorSparseMatrix42.rotate();
        org.la4j.Matrix matrix62 = matrix60.add((double) 1.0f);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(vector48);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertNotNull(matrix62);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        java.lang.String str84 = cRSMatrix81.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = cRSMatrix81.nonZeroAt((int) 'a', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix5 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix6 = rowMajorSparseMatrix5.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix9 = ooPlaceMatricesSubtraction1.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix5, denseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double13 = columnMajorSparseMatrix12.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory14 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix15 = columnMajorSparseMatrix12.to(basic1DMatrixMatrixFactory14);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure21 = null;
        rowMajorSparseMatrix19.eachNonZero(matrixProcedure21);
        org.la4j.Matrix matrix23 = ooPlaceMatricesSubtraction1.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix15, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix19);
        org.la4j.Matrix matrix24 = basic1DMatrix15.shuffle();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix27 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator28 = cRSMatrix27.nonZeroIterator();
        org.la4j.Vector vector30 = cRSMatrix27.getColumn(100);
        boolean boolean33 = cRSMatrix27.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator35 = cRSMatrix27.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = cRSMatrix27.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory37 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix38 = cRSMatrix27.to(basic1DMatrixMatrixFactory37);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix39 = matrix24.to(basic1DMatrixMatrixFactory37);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation40 = org.la4j.LinearAlgebra.OO_PLACE_MATRICES_MULTIPLICATION;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix43 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor44 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix43);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation45 = matrixMatrixMatrixOperation40.partiallyApply(columnMajorSparseMatrix43);
        org.la4j.matrix.functor.MatrixFunction matrixFunction47 = org.la4j.Matrices.DEC_FUNCTION;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator48 = org.la4j.Matrices.asSumFunctionAccumulator((double) (short) -1, matrixFunction47);
        double double49 = columnMajorSparseMatrix43.foldNonZero(matrixAccumulator48);
        org.la4j.Matrix matrix50 = ooPlaceKroneckerProduct0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix39, columnMajorSparseMatrix43);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct51 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix54 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str55 = basic2DMatrix54.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition56 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix59 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double60 = cRSMatrix59.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix64 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix65 = rowMajorSparseMatrix64.removeLastRow();
        org.la4j.Matrix matrix66 = ooPlaceMatricesAddition56.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix59, rowMajorSparseMatrix64);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix69 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix71 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix72 = ooPlaceMatricesAddition56.apply(columnMajorSparseMatrix69, denseMatrix71);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix75 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray76 = columnMajorSparseMatrix75.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation77 = ooPlaceMatricesAddition56.partiallyApply(columnMajorSparseMatrix75);
        org.la4j.Matrix matrix78 = ooPlaceMatrixHadamardProduct51.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix54, columnMajorSparseMatrix75);
        org.la4j.Matrix matrix80 = basic2DMatrix54.add(1.0E100d);
        org.la4j.Matrix matrix83 = basic2DMatrix54.copyOfShape((int) (byte) 0, (int) (byte) 10);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix86 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator87 = cRSMatrix86.nonZeroIterator();
        org.la4j.matrix.functor.MatrixFunction matrixFunction91 = org.la4j.Matrices.asMulFunction((double) 1);
        cRSMatrix86.updateAt((int) (short) 1, (int) (byte) 100, matrixFunction91);
        basic2DMatrix54.update(matrixFunction91);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix96 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) 'a');
        org.la4j.Matrix matrix97 = ooPlaceKroneckerProduct0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix54, (org.la4j.matrix.DenseMatrix) basic1DMatrix96);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory14);
        org.junit.Assert.assertNotNull(basic1DMatrix15);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(cRSMatrix27);
        org.junit.Assert.assertNotNull(matrixIterator28);
        org.junit.Assert.assertNotNull(vector30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(vectorIterator35);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory37);
        org.junit.Assert.assertNotNull(basic1DMatrix38);
        org.junit.Assert.assertNotNull(basic1DMatrix39);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation40);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation45);
        org.junit.Assert.assertNotNull(matrixFunction47);
        org.junit.Assert.assertNotNull(matrixAccumulator48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + (-11.0d) + "'", double49 == (-11.0d));
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(basic2DMatrix54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str55, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix69);
        org.junit.Assert.assertNotNull(denseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(cRSMatrix86);
        org.junit.Assert.assertNotNull(matrixIterator87);
        org.junit.Assert.assertNotNull(matrixFunction91);
        org.junit.Assert.assertNotNull(basic1DMatrix96);
        org.junit.Assert.assertNotNull(matrix97);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication1 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.Matrix matrix7 = ooPlaceMatrixByItsTransposeMultiplication1.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix4);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation8 = ooPlaceMatrixByVectorMultiplication0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix4);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix11 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double14 = cCSMatrix11.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction16 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix17 = cCSMatrix11.transformRow(10, vectorFunction16);
        boolean boolean20 = cCSMatrix11.nonZeroAt(10, (int) (byte) 1);
        double double21 = cCSMatrix11.min();
        org.la4j.Vector vector23 = cCSMatrix11.getColumn((int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix30 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator31 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray32 = cCSMatrix30.foldRows(vectorAccumulator31);
        org.la4j.matrix.DenseMatrix denseMatrix33 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray32);
        org.la4j.vector.dense.BasicVector basicVector34 = new org.la4j.vector.dense.BasicVector(doubleArray32);
        double[] doubleArray35 = basicVector34.toArray();
        int[] intArray41 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector42 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray35, intArray41);
        int int43 = compressedVector42.cardinality();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector44 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix11, (org.la4j.vector.SparseVector) compressedVector42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vectorVectorOperation8);
        org.junit.Assert.assertNotNull(cCSMatrix11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(cCSMatrix30);
        org.junit.Assert.assertNotNull(vectorAccumulator31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.la4j.operation.VectorMatrixOperation<org.la4j.Vector> vectorVectorMatrixOperation0 = org.la4j.LinearAlgebra.OO_PLACE_VECTOR_BY_MATRIX_MULTIPLICATION;
        org.la4j.vector.DenseVector denseVector2 = org.la4j.vector.DenseVector.unit(0);
        double double3 = denseVector2.min();
        org.la4j.operation.MatrixOperation<org.la4j.Vector> vectorMatrixOperation4 = vectorVectorMatrixOperation0.partiallyApply(denseVector2);
        org.la4j.operation.ooplace.OoPlaceVectorsAddition ooPlaceVectorsAddition5 = new org.la4j.operation.ooplace.OoPlaceVectorsAddition();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct6 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix11 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator12 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray13 = cCSMatrix11.foldRows(vectorAccumulator12);
        org.la4j.matrix.DenseMatrix denseMatrix14 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray13);
        org.la4j.vector.dense.BasicVector basicVector15 = new org.la4j.vector.dense.BasicVector(doubleArray13);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix20 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator21 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray22 = cCSMatrix20.foldRows(vectorAccumulator21);
        org.la4j.matrix.DenseMatrix denseMatrix23 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray22);
        org.la4j.vector.dense.BasicVector basicVector24 = new org.la4j.vector.dense.BasicVector(doubleArray22);
        ooPlaceOuterProduct6.ensureApplicableTo((org.la4j.Vector) basicVector15, (org.la4j.Vector) basicVector24);
        org.la4j.vector.sparse.CompressedVector compressedVector27 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector27.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector32 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix33 = ooPlaceOuterProduct6.apply((org.la4j.vector.SparseVector) compressedVector27, (org.la4j.vector.SparseVector) compressedVector32);
        double double34 = compressedVector32.min();
        org.la4j.Matrix matrix35 = compressedVector32.toColumnMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix40 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator41 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray42 = cCSMatrix40.foldRows(vectorAccumulator41);
        org.la4j.matrix.DenseMatrix denseMatrix43 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray42);
        org.la4j.vector.dense.BasicVector basicVector44 = new org.la4j.vector.dense.BasicVector(doubleArray42);
        double[] doubleArray45 = basicVector44.toArray();
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double48 = compressedVector47.euclideanNorm();
        org.la4j.Vector vector50 = compressedVector47.blankOfLength(52);
        boolean boolean52 = basicVector44.equals((org.la4j.Vector) compressedVector47, 7.211102550927978d);
        ooPlaceVectorsAddition5.ensureApplicableTo((org.la4j.Vector) compressedVector32, (org.la4j.Vector) compressedVector47);
        org.la4j.operation.MatrixOperation<org.la4j.Vector> vectorMatrixOperation54 = vectorVectorMatrixOperation0.partiallyApply((org.la4j.vector.SparseVector) compressedVector47);
        org.junit.Assert.assertNotNull(vectorVectorMatrixOperation0);
        org.junit.Assert.assertNotNull(denseVector2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vectorMatrixOperation4);
        org.junit.Assert.assertNotNull(cCSMatrix11);
        org.junit.Assert.assertNotNull(vectorAccumulator12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix14);
        org.junit.Assert.assertNotNull(cCSMatrix20);
        org.junit.Assert.assertNotNull(vectorAccumulator21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix23);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(cCSMatrix40);
        org.junit.Assert.assertNotNull(vectorAccumulator41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(vector50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(vectorMatrixOperation54);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 10, (int) (byte) 1);
        cCSMatrix19.setAll((double) (-1L));
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator22 = cCSMatrix19.nonZeroColumnMajorIterator();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix25 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str26 = basic2DMatrix25.toCSV();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix19, (org.la4j.matrix.DenseMatrix) basic2DMatrix25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator22);
        org.junit.Assert.assertNotNull(basic2DMatrix25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str26, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.DenseMatrix denseMatrix6 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix7 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3, denseMatrix6);
        org.la4j.Matrix matrix8 = matrix7.rotate();
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(denseMatrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.diagonal(100, 10.0d);
        java.text.NumberFormat numberFormat3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = rowMajorSparseMatrix2.toMatrixMarket(numberFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication41 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.Matrix matrix47 = ooPlaceMatrixByItsTransposeMultiplication41.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation48 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication49 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix52 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator53 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray54 = cCSMatrix52.foldRows(vectorAccumulator53);
        org.la4j.Matrix matrix55 = ooPlaceMatrixByItsTransposeMultiplication49.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix52);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix58 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double59 = cRSMatrix58.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator60 = cRSMatrix58.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor61 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix58);
        double double62 = cRSMatrix58.max();
        org.la4j.Matrix matrix63 = ooPlaceMatrixByItsTransposeMultiplication49.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix58);
        org.la4j.Matrix matrix65 = cRSMatrix58.multiply((double) (byte) 100);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix69 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix58, rowMajorSparseMatrix68);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix72 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator73 = columnMajorSparseMatrix72.nonZeroIterator();
        double double74 = columnMajorSparseMatrix72.density();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix77 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean78 = cCSMatrix77.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix79 = cCSMatrix77.toRowMajorSparseMatrix();
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix80 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix84 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation85 = inPlaceCopyMatrixToMatrix80.partiallyApply(rowMajorSparseMatrix84);
        org.la4j.Matrix matrix86 = rowMajorSparseMatrix79.apply(matrixMatrixOperation85);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix87 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix72, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixMatrixOperation48);
        org.junit.Assert.assertNotNull(cCSMatrix52);
        org.junit.Assert.assertNotNull(vectorAccumulator53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cRSMatrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator60);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix72);
        org.junit.Assert.assertNotNull(matrixIterator73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(cCSMatrix77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix79);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix84);
        org.junit.Assert.assertNotNull(matrixMatrixOperation85);
        org.junit.Assert.assertNotNull(matrix86);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix13 = org.la4j.matrix.dense.Basic1DMatrix.zero((int) (byte) 0, (int) (short) 100);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix16 = org.la4j.matrix.dense.Basic2DMatrix.diagonal(0, 1.0d);
        org.la4j.Matrix matrix17 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix13, (org.la4j.matrix.DenseMatrix) basic2DMatrix16);
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication18 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector20 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector20.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct24 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix28 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix29 = rowMajorSparseMatrix28.removeLastRow();
        double double33 = rowMajorSparseMatrix28.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int34 = rowMajorSparseMatrix28.cardinality();
        org.la4j.Vector vector36 = rowMajorSparseMatrix28.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix39 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix40 = ooPlaceMatrixHadamardProduct24.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix28, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix39);
        org.la4j.Vector vector41 = ooPlaceVectorByMatrixMultiplication18.apply((org.la4j.vector.SparseVector) compressedVector20, columnMajorSparseMatrix39);
        org.la4j.vector.SparseVector sparseVector43 = org.la4j.vector.SparseVector.zero(0);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction44 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix51 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix52 = ooPlaceMatricesSubtraction44.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix48, denseMatrix51);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix55 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double56 = columnMajorSparseMatrix55.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix59 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double60 = denseMatrix59.min();
        double double61 = denseMatrix59.sum();
        org.la4j.Matrix matrix62 = ooPlaceMatricesSubtraction44.apply(columnMajorSparseMatrix55, denseMatrix59);
        org.la4j.Vector vector63 = ooPlaceVectorByMatrixMultiplication18.apply(sparseVector43, columnMajorSparseMatrix55);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition64 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double68 = cRSMatrix67.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix72 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix73 = rowMajorSparseMatrix72.removeLastRow();
        org.la4j.Matrix matrix74 = ooPlaceMatricesAddition64.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix67, rowMajorSparseMatrix72);
        org.la4j.Matrix matrix75 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix55, rowMajorSparseMatrix72);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(basic1DMatrix13);
        org.junit.Assert.assertNotNull(basic2DMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(vector36);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(vector41);
        org.junit.Assert.assertNotNull(sparseVector43);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(denseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(vector63);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix75);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double2 = compressedVector1.euclideanNorm();
        org.la4j.Vector vector4 = compressedVector1.blankOfLength(52);
        org.la4j.iterator.VectorIterator vectorIterator5 = vector4.iterator();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate6 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix9 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean10 = advancedMatrixPredicate6.test((org.la4j.Matrix) columnMajorSparseMatrix9);
        org.la4j.vector.functor.VectorFunction vectorFunction12 = null;
        org.la4j.Matrix matrix13 = columnMajorSparseMatrix9.transformRow(0, vectorFunction12);
        org.la4j.iterator.VectorIterator vectorIterator15 = columnMajorSparseMatrix9.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double23 = rowMajorSparseMatrix19.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.iterator.VectorIterator vectorIterator25 = rowMajorSparseMatrix19.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.iterator.VectorIterator vectorIterator26 = vectorIterator15.andAlsoMultiply(vectorIterator25);
        org.la4j.iterator.VectorIterator vectorIterator27 = vectorIterator5.andAlsoMultiply(vectorIterator15);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(vectorIterator5);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate6);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertNotNull(vectorIterator15);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(vectorIterator25);
        org.junit.Assert.assertNotNull(vectorIterator26);
        org.junit.Assert.assertNotNull(vectorIterator27);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix0 = new org.la4j.matrix.sparse.CCSMatrix();
        java.lang.String str1 = cCSMatrix0.toMatrixMarket();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator5 = cRSMatrix4.nonZeroIterator();
        org.la4j.Vector vector7 = cRSMatrix4.getColumn(100);
        boolean boolean10 = cRSMatrix4.nonZeroAt(1, (int) (short) 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix13 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator14 = cRSMatrix13.nonZeroIterator();
        org.la4j.Vector vector16 = cRSMatrix13.getColumn(100);
        boolean boolean19 = cRSMatrix13.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator21 = cRSMatrix13.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = cRSMatrix13.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory23 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix24 = cRSMatrix13.to(basic1DMatrixMatrixFactory23);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix25 = cRSMatrix4.to(basic1DMatrixMatrixFactory23);
        java.lang.Class<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixClass26 = basic1DMatrixMatrixFactory23.outputClass;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix27 = cCSMatrix0.to(basic1DMatrixMatrixFactory23);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "%%MatrixMarket matrix coordinate real general column-major\n0 0 0\n" + "'", str1, "%%MatrixMarket matrix coordinate real general column-major\n0 0 0\n");
        org.junit.Assert.assertNotNull(cRSMatrix4);
        org.junit.Assert.assertNotNull(matrixIterator5);
        org.junit.Assert.assertNotNull(vector7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cRSMatrix13);
        org.junit.Assert.assertNotNull(matrixIterator14);
        org.junit.Assert.assertNotNull(vector16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(vectorIterator21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory23);
        org.junit.Assert.assertNotNull(basic1DMatrix24);
        org.junit.Assert.assertNotNull(basic1DMatrix25);
        org.junit.Assert.assertNotNull(basic1DMatrixClass26);
        org.junit.Assert.assertNotNull(basic1DMatrix27);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asMinusFunction(0.0d);
        double double5 = matrixFunction1.evaluate((int) '#', 52, (double) 100L);
        org.junit.Assert.assertNotNull(matrixFunction1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 100.0d + "'", double5 == 100.0d);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.identity(0);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix1);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix6 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double7 = cRSMatrix6.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator8 = cRSMatrix6.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix6);
        org.la4j.Matrix matrix10 = ooPlaceKroneckerProduct0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix3, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix6);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct11 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix15 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix16 = rowMajorSparseMatrix15.removeLastRow();
        double double20 = rowMajorSparseMatrix15.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int21 = rowMajorSparseMatrix15.cardinality();
        org.la4j.Vector vector23 = rowMajorSparseMatrix15.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix26 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct11.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix15, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix26);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct28 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix33 = rowMajorSparseMatrix32.removeLastRow();
        double double37 = rowMajorSparseMatrix32.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int38 = rowMajorSparseMatrix32.cardinality();
        org.la4j.Vector vector40 = rowMajorSparseMatrix32.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix43 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix44 = ooPlaceMatrixHadamardProduct28.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix32, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix43);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure50 = null;
        rowMajorSparseMatrix48.eachNonZero(matrixProcedure50);
        double[][] doubleArray52 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix53 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray52);
        org.la4j.Matrix matrix54 = ooPlaceMatrixHadamardProduct28.apply(rowMajorSparseMatrix48, denseMatrix53);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate55 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix58 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean59 = advancedMatrixPredicate55.test((org.la4j.Matrix) columnMajorSparseMatrix58);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter60 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix58);
        org.la4j.Matrix matrix61 = denseMatrix53.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix58);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition62 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix65 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double66 = cRSMatrix65.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix70 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix71 = rowMajorSparseMatrix70.removeLastRow();
        org.la4j.Matrix matrix72 = ooPlaceMatricesAddition62.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix65, rowMajorSparseMatrix70);
        org.la4j.Matrix matrix73 = ooPlaceMatrixHadamardProduct11.applySymmetric(denseMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix70);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation74 = ooPlaceKroneckerProduct0.partiallyApply(rowMajorSparseMatrix70);
        org.junit.Assert.assertNotNull(basic1DMatrix3);
        org.junit.Assert.assertNotNull(cRSMatrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(denseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate55);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(cRSMatrix65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(matrixMatrixOperation74);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(0, (double) (short) 100);
        double double3 = cRSMatrix2.product();
        double double4 = cRSMatrix2.min();
        byte[] byteArray5 = cRSMatrix2.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix6 = org.la4j.matrix.dense.Basic2DMatrix.fromBinary(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode Basic2DMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure22 = null;
        rowMajorSparseMatrix20.eachNonZero(matrixProcedure22);
        double[][] doubleArray24 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray24);
        org.la4j.Matrix matrix26 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix20, denseMatrix25);
        org.la4j.Matrix matrix28 = rowMajorSparseMatrix20.copyOfColumns((int) (short) 1);
        double double29 = rowMajorSparseMatrix20.norm();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory81 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix82 = basic2DMatrix77.to(basic1DMatrixMatrixFactory81);
        // The following exception was thrown during execution in test generation
        try {
            basic1DMatrix82.swapColumns((int) (short) -1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory81);
        org.junit.Assert.assertNotNull(basic1DMatrix82);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator1 = org.la4j.Vectors.asSumAccumulator((-2.0d));
        org.junit.Assert.assertNotNull(vectorAccumulator1);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix19 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix13, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct20 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator26 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray27 = cCSMatrix25.foldRows(vectorAccumulator26);
        org.la4j.matrix.DenseMatrix denseMatrix28 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray27);
        org.la4j.vector.dense.BasicVector basicVector29 = new org.la4j.vector.dense.BasicVector(doubleArray27);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix34 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator35 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray36 = cCSMatrix34.foldRows(vectorAccumulator35);
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray36);
        org.la4j.vector.dense.BasicVector basicVector38 = new org.la4j.vector.dense.BasicVector(doubleArray36);
        ooPlaceOuterProduct20.ensureApplicableTo((org.la4j.Vector) basicVector29, (org.la4j.Vector) basicVector38);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct40 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random42 = null;
        org.la4j.vector.DenseVector denseVector43 = org.la4j.vector.DenseVector.random(0, random42);
        java.util.Random random45 = null;
        org.la4j.vector.DenseVector denseVector46 = org.la4j.vector.DenseVector.random(0, random45);
        org.la4j.Matrix matrix47 = ooPlaceOuterProduct40.apply(denseVector43, denseVector46);
        org.la4j.vector.sparse.CompressedVector compressedVector49 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix50 = ooPlaceOuterProduct20.apply(denseVector43, (org.la4j.vector.SparseVector) compressedVector49);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector51 = rowMajorSparseMatrix18.multiply((org.la4j.Vector) compressedVector49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 32 does not equal to 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertNotNull(vectorAccumulator26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix28);
        org.junit.Assert.assertNotNull(cCSMatrix34);
        org.junit.Assert.assertNotNull(vectorAccumulator35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(denseVector43);
        org.junit.Assert.assertNotNull(denseVector46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrix50);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.vector.SparseVector sparseVector25 = org.la4j.vector.SparseVector.zero(0);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction26 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix30 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix30.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix33 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction26.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix30, denseMatrix33);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix37 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double38 = columnMajorSparseMatrix37.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double42 = denseMatrix41.min();
        double double43 = denseMatrix41.sum();
        org.la4j.Matrix matrix44 = ooPlaceMatricesSubtraction26.apply(columnMajorSparseMatrix37, denseMatrix41);
        org.la4j.Vector vector45 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector25, columnMajorSparseMatrix37);
        double double46 = sparseVector25.manhattanNorm();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix51 = rowMajorSparseMatrix50.removeLastRow();
        org.la4j.vector.functor.VectorFunction vectorFunction53 = org.la4j.Vectors.INV_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator54 = org.la4j.Vectors.asProductFunctionAccumulator((double) 1.0f, vectorFunction53);
        boolean boolean55 = matrix51.equals((java.lang.Object) vectorAccumulator54);
        double double56 = sparseVector25.foldNonZero(vectorAccumulator54);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(sparseVector25);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(denseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(vector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(vectorFunction53);
        org.junit.Assert.assertNotNull(vectorAccumulator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator1 = org.la4j.Vectors.asSumAccumulator((double) (short) 1);
        org.junit.Assert.assertNotNull(vectorAccumulator1);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor5 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double6 = cRSMatrix2.max();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator7 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.linear.JacobiSolver jacobiSolver8 = new org.la4j.linear.JacobiSolver((org.la4j.Matrix) cRSMatrix2);
        org.la4j.Vector vector10 = cRSMatrix2.getColumn(0);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator7);
        org.junit.Assert.assertNotNull(vector10);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.la4j.operation.ooplace.OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new org.la4j.operation.ooplace.OoPlaceVectorsAddition();
        org.la4j.Vector vector2 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction4 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector5 = vector2.transform(vectorFunction4);
        double double6 = vector2.product();
        org.la4j.vector.DenseVector denseVector7 = vector2.toDenseVector();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct8 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random10 = null;
        org.la4j.vector.DenseVector denseVector11 = org.la4j.vector.DenseVector.random(0, random10);
        java.util.Random random13 = null;
        org.la4j.vector.DenseVector denseVector14 = org.la4j.vector.DenseVector.random(0, random13);
        org.la4j.Matrix matrix15 = ooPlaceOuterProduct8.apply(denseVector11, denseVector14);
        org.la4j.vector.sparse.CompressedVector compressedVector17 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat18 = null;
        java.lang.String str19 = compressedVector17.toMatrixMarket(numberFormat18);
        org.la4j.Vector vector21 = compressedVector17.add((double) 52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator25 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray26 = cCSMatrix24.foldRows(vectorAccumulator25);
        org.la4j.vector.dense.BasicVector basicVector27 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray26);
        org.la4j.Matrix matrix28 = basicVector27.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate29 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean30 = basicVector27.non(vectorPredicate29);
        org.la4j.Vector vector32 = basicVector27.blankOfLength((int) 'a');
        org.la4j.Matrix matrix33 = ooPlaceOuterProduct8.apply((org.la4j.vector.SparseVector) compressedVector17, (org.la4j.vector.DenseVector) basicVector27);
        org.la4j.Vector vector34 = ooPlaceVectorsAddition0.apply(denseVector7, (org.la4j.vector.DenseVector) basicVector27);
        org.la4j.vector.dense.BasicVector basicVector36 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector37 = basicVector36.copy();
        org.la4j.Matrix matrix38 = basicVector36.toDiagonalMatrix();
        org.la4j.Vector vector40 = basicVector36.copyOfLength(10);
        org.la4j.vector.SparseVector sparseVector43 = org.la4j.vector.SparseVector.zero((int) (short) 100, (int) (byte) 0);
        org.la4j.Vector vector44 = ooPlaceVectorsAddition0.apply((org.la4j.vector.DenseVector) basicVector36, sparseVector43);
        org.la4j.Matrix matrix49 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator51 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray52 = matrix49.foldColumns(vectorAccumulator51);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix53 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) 'a', (int) (byte) 0, doubleArray52);
        org.la4j.vector.DenseVector denseVector54 = org.la4j.vector.DenseVector.fromArray(doubleArray52);
        org.la4j.Vector vector56 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction58 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector59 = vector56.transform(vectorFunction58);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix63 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double67 = rowMajorSparseMatrix63.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix68 = rowMajorSparseMatrix63.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct69 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean70 = sparseMatrix68.equals((java.lang.Object) ooPlaceOuterProduct69);
        org.la4j.vector.DenseVector denseVector72 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        java.util.Random random74 = null;
        org.la4j.vector.DenseVector denseVector75 = org.la4j.vector.DenseVector.random(0, random74);
        java.lang.String str76 = denseVector75.toString();
        ooPlaceOuterProduct69.ensureApplicableTo((org.la4j.Vector) denseVector72, (org.la4j.Vector) denseVector75);
        boolean boolean79 = vector56.equals((org.la4j.Vector) denseVector72, 0.0d);
        org.la4j.Vector vector80 = ooPlaceVectorsAddition0.apply(denseVector54, denseVector72);
        org.la4j.vector.dense.BasicVector basicVector82 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        int int83 = basicVector82.length();
        org.la4j.vector.sparse.CompressedVector compressedVector85 = org.la4j.vector.sparse.CompressedVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector86 = ooPlaceVectorsAddition0.applySymmetric((org.la4j.vector.DenseVector) basicVector82, (org.la4j.vector.SparseVector) compressedVector85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2);
        org.junit.Assert.assertNotNull(vectorFunction4);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(denseVector7);
        org.junit.Assert.assertNotNull(denseVector11);
        org.junit.Assert.assertNotNull(denseVector14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str19, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertNotNull(vectorAccumulator25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(vectorPredicate29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(vector32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(vector34);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertNotNull(sparseVector43);
        org.junit.Assert.assertNotNull(vector44);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(vectorAccumulator51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(basic2DMatrix53);
        org.junit.Assert.assertNotNull(denseVector54);
        org.junit.Assert.assertNotNull(vector56);
        org.junit.Assert.assertNotNull(vectorFunction58);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix63);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(denseVector72);
        org.junit.Assert.assertNotNull(denseVector75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(vector80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(compressedVector85);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("%%MatrixMarket matrix coordinate real general row-major\n32 32 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"%%MatrixMarket\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.OO_PLACE_MATRIX_HADAMARD_PRODUCT;
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition1 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double5 = cRSMatrix4.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix10 = rowMajorSparseMatrix9.removeLastRow();
        org.la4j.Matrix matrix11 = ooPlaceMatricesAddition1.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix4, rowMajorSparseMatrix9);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition12 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix15 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double16 = cRSMatrix15.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.Matrix matrix22 = ooPlaceMatricesAddition12.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix15, rowMajorSparseMatrix20);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix27 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix28 = ooPlaceMatricesAddition12.apply(columnMajorSparseMatrix25, denseMatrix27);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix33 = rowMajorSparseMatrix32.removeLastRow();
        double double37 = rowMajorSparseMatrix32.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector38 = rowMajorSparseMatrix32.toRowVector();
        org.la4j.Matrix matrix39 = ooPlaceMatricesAddition1.apply(denseMatrix27, rowMajorSparseMatrix32);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double45 = cCSMatrix42.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction47 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix48 = cCSMatrix42.transformRow(10, vectorFunction47);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix51 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator52 = cRSMatrix51.nonZeroIterator();
        org.la4j.Vector vector54 = cRSMatrix51.getColumn(100);
        boolean boolean57 = cRSMatrix51.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor58 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix51);
        org.la4j.Matrix matrix59 = ooPlaceMatricesAddition1.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix42, (org.la4j.matrix.SparseMatrix) cRSMatrix51);
        org.la4j.decomposition.LUDecompositor lUDecompositor60 = new org.la4j.decomposition.LUDecompositor((org.la4j.Matrix) cCSMatrix42);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix63 = org.la4j.matrix.ColumnMajorSparseMatrix.zero((int) (short) 100, (int) '#');
        org.la4j.Matrix matrix64 = matrixMatrixMatrixOperation0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix42, columnMajorSparseMatrix63);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(cRSMatrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(cRSMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(denseMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(vector38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(cRSMatrix51);
        org.junit.Assert.assertNotNull(matrixIterator52);
        org.junit.Assert.assertNotNull(vector54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix85 = org.la4j.matrix.sparse.CCSMatrix.fromCSV("");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix88 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double89 = cRSMatrix88.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator90 = cRSMatrix88.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor91 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix88);
        org.la4j.Matrix matrix92 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix85, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix88);
        byte[] byteArray93 = cRSMatrix88.toBinary();
        org.la4j.Matrix matrix94 = cRSMatrix88.transpose();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(cCSMatrix85);
        org.junit.Assert.assertNotNull(cRSMatrix88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator90);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(matrix94);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        double double8 = cCSMatrix3.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator9 = cCSMatrix3.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix12 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator13 = cRSMatrix12.nonZeroIterator();
        org.la4j.Vector vector15 = cRSMatrix12.getColumn(100);
        boolean boolean18 = cRSMatrix12.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator20 = cRSMatrix12.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = cRSMatrix12.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory22 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix23 = cRSMatrix12.to(basic1DMatrixMatrixFactory22);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix24 = cCSMatrix3.to(basic1DMatrixMatrixFactory22);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix27 = basic1DMatrixMatrixFactory22.apply((-1), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator9);
        org.junit.Assert.assertNotNull(cRSMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(vector15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(vectorIterator20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory22);
        org.junit.Assert.assertNotNull(basic1DMatrix23);
        org.junit.Assert.assertNotNull(basic1DMatrix24);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector3 = org.la4j.vector.SparseVector.zero(0, 52);
        org.la4j.Matrix matrix4 = sparseVector3.toColumnMatrix();
        org.la4j.vector.sparse.CompressedVector compressedVector6 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat7 = null;
        java.lang.String str8 = compressedVector6.toMatrixMarket(numberFormat7);
        org.la4j.Vector vector10 = compressedVector6.add((double) 52);
        org.la4j.Matrix matrix11 = matrixVectorVectorOperation0.apply(sparseVector3, (org.la4j.vector.SparseVector) compressedVector6);
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation0);
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str8, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.la4j.Vector vector2 = org.la4j.Vector.constant((int) (short) 100, 7.211102550927978d);
        org.junit.Assert.assertNotNull(vector2);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric(10, 72.11102550927978d, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cardinality should be less then or equal to capacity: 100.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.INV_FUNCTION;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator2 = org.la4j.Matrices.asProductFunctionAccumulator((double) 0L, matrixFunction1);
        double double6 = matrixFunction1.evaluate((int) (byte) -1, (int) (byte) 100, (-48.0d));
        org.junit.Assert.assertNotNull(matrixFunction1);
        org.junit.Assert.assertNotNull(matrixAccumulator2);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 48.0d + "'", double6 == 48.0d);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        ooPlaceOuterProduct28.ensureApplicableTo((org.la4j.Vector) basicVector37, (org.la4j.Vector) basicVector46);
        org.la4j.vector.sparse.CompressedVector compressedVector49 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix50 = compressedVector49.toColumnMatrix();
        org.la4j.vector.dense.BasicVector basicVector52 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition53 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double57 = cRSMatrix56.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix61.removeLastRow();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition53.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56, rowMajorSparseMatrix61);
        boolean boolean64 = basicVector52.equals((java.lang.Object) rowMajorSparseMatrix61);
        org.la4j.Matrix matrix65 = ooPlaceOuterProduct28.apply((org.la4j.vector.SparseVector) compressedVector49, (org.la4j.vector.DenseVector) basicVector52);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct66 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix71 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator72 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray73 = cCSMatrix71.foldRows(vectorAccumulator72);
        org.la4j.matrix.DenseMatrix denseMatrix74 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray73);
        org.la4j.vector.dense.BasicVector basicVector75 = new org.la4j.vector.dense.BasicVector(doubleArray73);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix80 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator81 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray82 = cCSMatrix80.foldRows(vectorAccumulator81);
        org.la4j.matrix.DenseMatrix denseMatrix83 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray82);
        org.la4j.vector.dense.BasicVector basicVector84 = new org.la4j.vector.dense.BasicVector(doubleArray82);
        ooPlaceOuterProduct66.ensureApplicableTo((org.la4j.Vector) basicVector75, (org.la4j.Vector) basicVector84);
        java.lang.String str86 = basicVector75.toMatrixMarket();
        byte[] byteArray87 = basicVector75.toBinary();
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) compressedVector49, (org.la4j.Vector) basicVector75);
        org.la4j.Matrix matrix89 = compressedVector49.toRowMatrix();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(basicVector52);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(cCSMatrix71);
        org.junit.Assert.assertNotNull(vectorAccumulator72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix74);
        org.junit.Assert.assertNotNull(cCSMatrix80);
        org.junit.Assert.assertNotNull(vectorAccumulator81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str86, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertNotNull(matrix89);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.GaussianSolver gaussianSolver37 = new org.la4j.linear.GaussianSolver((org.la4j.Matrix) basic2DMatrix36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.OO_PLACE_KRONECKER_PRODUCT;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix1 = null;
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation2 = matrixMatrixMatrixOperation0.partiallyApply(columnMajorSparseMatrix1);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct5 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix10 = rowMajorSparseMatrix9.removeLastRow();
        double double14 = rowMajorSparseMatrix9.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int15 = rowMajorSparseMatrix9.cardinality();
        org.la4j.Vector vector17 = rowMajorSparseMatrix9.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix20 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix21 = ooPlaceMatrixHadamardProduct5.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix9, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix20);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate22 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean26 = advancedMatrixPredicate22.test((org.la4j.Matrix) columnMajorSparseMatrix25);
        org.la4j.vector.functor.VectorFunction vectorFunction28 = null;
        org.la4j.Matrix matrix29 = columnMajorSparseMatrix25.transformRow(0, vectorFunction28);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix30 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction31 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix34 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction35 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix38 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean39 = cCSMatrix38.isRowMajor();
        org.la4j.Matrix matrix42 = cCSMatrix38.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator43 = cCSMatrix38.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix47 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix47.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix53 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double57 = rowMajorSparseMatrix53.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix58 = rowMajorSparseMatrix53.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct59 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean60 = sparseMatrix58.equals((java.lang.Object) ooPlaceOuterProduct59);
        org.la4j.Matrix matrix61 = rowMajorSparseMatrix47.hadamardProduct((org.la4j.Matrix) sparseMatrix58);
        org.la4j.Matrix matrix62 = ooPlaceMatricesSubtraction35.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix38, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix47);
        org.la4j.Matrix matrix63 = ooPlaceMatricesSubtraction31.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix34, rowMajorSparseMatrix47);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor64 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix47);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix66 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix67 = inPlaceCopyMatrixToMatrix30.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix47, (org.la4j.matrix.SparseMatrix) cRSMatrix66);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix72 = rowMajorSparseMatrix71.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix76 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix78 = rowMajorSparseMatrix76.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory79 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix80 = matrix78.to(basic1DMatrixMatrixFactory79);
        org.la4j.Matrix matrix81 = inPlaceCopyMatrixToMatrix30.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix71, (org.la4j.matrix.DenseMatrix) basic1DMatrix80);
        org.la4j.Matrix matrix82 = ooPlaceMatrixHadamardProduct5.apply(columnMajorSparseMatrix25, (org.la4j.matrix.DenseMatrix) basic1DMatrix80);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator83 = null;
        double[] doubleArray84 = columnMajorSparseMatrix25.foldNonZeroInRows(vectorAccumulator83);
        org.la4j.matrix.DenseMatrix denseMatrix85 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray84);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix86 = matrixMatrixOperation2.apply(denseMatrix85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixOperation2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(vector17);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(basic2DMatrix34);
        org.junit.Assert.assertNotNull(cCSMatrix38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator43);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix47);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0d + "'", double57 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cRSMatrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix76);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory79);
        org.junit.Assert.assertNotNull(basic1DMatrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertNotNull(denseMatrix85);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.Matrix matrix28 = compressedVector26.toDiagonalMatrix();
        org.la4j.decomposition.LUDecompositor lUDecompositor29 = new org.la4j.decomposition.LUDecompositor(matrix28);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure22 = null;
        rowMajorSparseMatrix20.eachNonZero(matrixProcedure22);
        double[][] doubleArray24 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray24);
        org.la4j.Matrix matrix26 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix20, denseMatrix25);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix20.shuffle();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix2 = denseMatrix1.removeFirstColumn();
        org.junit.Assert.assertNotNull(denseMatrix1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.functor.MatrixFunction matrixFunction3 = org.la4j.Matrices.DEC_FUNCTION;
        double double7 = matrixFunction3.evaluate((int) (byte) 10, (int) (byte) -1, (double) 100L);
        columnMajorSparseMatrix2.update(matrixFunction3);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrixFunction3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 99.0d + "'", double7 == 99.0d);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        java.util.Random random14 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix15 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random14);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition16 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix19 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double20 = cRSMatrix19.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix25 = rowMajorSparseMatrix24.removeLastRow();
        org.la4j.Matrix matrix26 = ooPlaceMatricesAddition16.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix19, rowMajorSparseMatrix24);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition27 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix30 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double31 = cRSMatrix30.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix36 = rowMajorSparseMatrix35.removeLastRow();
        org.la4j.Matrix matrix37 = ooPlaceMatricesAddition27.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix30, rowMajorSparseMatrix35);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix40 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix42 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix43 = ooPlaceMatricesAddition27.apply(columnMajorSparseMatrix40, denseMatrix42);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix47 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix47.removeLastRow();
        double double52 = rowMajorSparseMatrix47.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector53 = rowMajorSparseMatrix47.toRowVector();
        org.la4j.Matrix matrix54 = ooPlaceMatricesAddition16.apply(denseMatrix42, rowMajorSparseMatrix47);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix57 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double60 = cCSMatrix57.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction62 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix63 = cCSMatrix57.transformRow(10, vectorFunction62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix66 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator67 = cRSMatrix66.nonZeroIterator();
        org.la4j.Vector vector69 = cRSMatrix66.getColumn(100);
        boolean boolean72 = cRSMatrix66.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor73 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix66);
        org.la4j.Matrix matrix74 = ooPlaceMatricesAddition16.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix57, (org.la4j.matrix.SparseMatrix) cRSMatrix66);
        org.la4j.Matrix matrix75 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix15, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix57);
        basic2DMatrix15.setAll((double) '4');
        org.la4j.Matrix matrix80 = basic2DMatrix15.copyOfShape((int) (short) 100, (int) (short) 10);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(basic2DMatrix15);
        org.junit.Assert.assertNotNull(cRSMatrix19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(cRSMatrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(denseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix47);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(cCSMatrix57);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cRSMatrix66);
        org.junit.Assert.assertNotNull(matrixIterator67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix80);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat2 = null;
        java.lang.String str3 = compressedVector1.toMatrixMarket(numberFormat2);
        org.la4j.Vector vector5 = compressedVector1.add((double) 52);
        org.la4j.vector.SparseVector sparseVector6 = vector5.toSparseVector();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str3, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertNotNull(sparseVector6);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        org.la4j.Vector vector85 = basic2DMatrix43.getRow((int) (byte) 1);
        int int86 = basic2DMatrix43.columns();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(vector85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 6 + "'", int86 == 6);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray3 = cRSMatrix2.toBinary();
        org.la4j.vector.functor.VectorFunction vectorFunction5 = org.la4j.Vectors.DEC_FUNCTION;
        cRSMatrix2.updateColumn(0, vectorFunction5);
        org.la4j.Matrix matrix8 = cRSMatrix2.removeRow(0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double16 = rowMajorSparseMatrix12.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix17 = rowMajorSparseMatrix12.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate18 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean19 = sparseMatrix17.is(advancedMatrixPredicate18);
        boolean boolean20 = cRSMatrix2.is(advancedMatrixPredicate18);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(vectorFunction5);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix17);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix3 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix2);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix6 = org.la4j.matrix.sparse.CRSMatrix.diagonal(0, (double) (short) 100);
        double double7 = cRSMatrix6.product();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator8 = cRSMatrix6.rowMajorIterator();
        org.la4j.Matrix matrix9 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix6);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean13 = cCSMatrix12.isRowMajor();
        org.la4j.Matrix matrix16 = cCSMatrix12.blankOfShape((int) '#', (int) (short) 100);
        ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix12);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix20 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double21 = columnMajorSparseMatrix20.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory22 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix23 = columnMajorSparseMatrix20.to(basic1DMatrixMatrixFactory22);
        org.la4j.Matrix matrix24 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix23);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix27 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.Matrix matrix28 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix27);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(cRSMatrix6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory22);
        org.junit.Assert.assertNotNull(basic1DMatrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(basic2DMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.vector.SparseVector sparseVector25 = org.la4j.vector.SparseVector.zero(0);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction26 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix30 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix30.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix33 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction26.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix30, denseMatrix33);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix37 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double38 = columnMajorSparseMatrix37.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double42 = denseMatrix41.min();
        double double43 = denseMatrix41.sum();
        org.la4j.Matrix matrix44 = ooPlaceMatricesSubtraction26.apply(columnMajorSparseMatrix37, denseMatrix41);
        org.la4j.Vector vector45 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector25, columnMajorSparseMatrix37);
        byte[] byteArray46 = sparseVector25.toBinary();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix47 = org.la4j.matrix.dense.Basic2DMatrix.fromBinary(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix48 = org.la4j.matrix.sparse.CCSMatrix.fromBinary(byteArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CCSMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(sparseVector25);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(denseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(vector45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[16, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(basic2DMatrix47);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray4 = cRSMatrix3.toBinary();
        org.la4j.vector.functor.VectorFunction vectorFunction6 = org.la4j.Vectors.DEC_FUNCTION;
        cRSMatrix3.updateColumn(0, vectorFunction6);
        org.la4j.Matrix matrix9 = cRSMatrix3.removeRow(0);
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication10 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector12 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector12.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct16 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        double double25 = rowMajorSparseMatrix20.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int26 = rowMajorSparseMatrix20.cardinality();
        org.la4j.Vector vector28 = rowMajorSparseMatrix20.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix31 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix32 = ooPlaceMatrixHadamardProduct16.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix20, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix31);
        org.la4j.Vector vector33 = ooPlaceVectorByMatrixMultiplication10.apply((org.la4j.vector.SparseVector) compressedVector12, columnMajorSparseMatrix31);
        boolean boolean35 = compressedVector12.isZeroAt((int) ' ');
        boolean boolean37 = compressedVector12.isZeroAt((int) '4');
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory38 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector39 = compressedVector12.to(basicVectorVectorFactory38);
        java.util.Spliterator<java.lang.Double> doubleSpliterator40 = compressedVector12.spliterator();
        org.la4j.Vector vector41 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, (org.la4j.vector.SparseVector) compressedVector12);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = cRSMatrix3.isZeroAt((int) (short) 10, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(vectorFunction6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(vector28);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(vector33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory38);
        org.junit.Assert.assertNotNull(basicVector39);
        org.junit.Assert.assertNotNull(doubleSpliterator40);
        org.junit.Assert.assertNotNull(vector41);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.la4j.Matrix matrix1 = org.la4j.Matrix.identity(6);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix78 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray76);
        org.la4j.Matrix matrix79 = matrixMatrixOperation40.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix78);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix82 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double83 = columnMajorSparseMatrix82.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor84 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix82);
        org.la4j.LinearAlgebra.InverterFactory inverterFactory85 = org.la4j.LinearAlgebra.INVERTER;
        org.la4j.inversion.MatrixInverter matrixInverter86 = columnMajorSparseMatrix82.withInverter(inverterFactory85);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix90 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double94 = rowMajorSparseMatrix90.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix95 = rowMajorSparseMatrix90.toSparseMatrix();
        org.la4j.inversion.MatrixInverter matrixInverter96 = inverterFactory85.create((org.la4j.Matrix) rowMajorSparseMatrix90);
        org.la4j.inversion.MatrixInverter matrixInverter97 = matrix79.withInverter(inverterFactory85);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(inverterFactory85);
        org.junit.Assert.assertNotNull(matrixInverter86);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix90);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 1.0d + "'", double94 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix95);
        org.junit.Assert.assertNotNull(matrixInverter96);
        org.junit.Assert.assertNotNull(matrixInverter97);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.iterator();
        org.la4j.Vector vector7 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction9 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector10 = vector7.transform(vectorFunction9);
        org.la4j.Matrix matrix11 = cCSMatrix3.transformRow(0, vectorFunction9);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction12 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix17 = rowMajorSparseMatrix16.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix19 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix20 = ooPlaceMatricesSubtraction12.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16, denseMatrix19);
        org.la4j.Matrix matrix21 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3, denseMatrix19);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate22 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean26 = advancedMatrixPredicate22.test((org.la4j.Matrix) columnMajorSparseMatrix25);
        org.la4j.Matrix matrix27 = columnMajorSparseMatrix25.rotate();
        boolean boolean28 = columnMajorSparseMatrix25.isRowMajor();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct29 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix32 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str33 = basic2DMatrix32.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition34 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix37 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double38 = cRSMatrix37.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix42.removeLastRow();
        org.la4j.Matrix matrix44 = ooPlaceMatricesAddition34.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix37, rowMajorSparseMatrix42);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix47 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix49 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix50 = ooPlaceMatricesAddition34.apply(columnMajorSparseMatrix47, denseMatrix49);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix53 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray54 = columnMajorSparseMatrix53.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation55 = ooPlaceMatricesAddition34.partiallyApply(columnMajorSparseMatrix53);
        org.la4j.Matrix matrix56 = ooPlaceMatrixHadamardProduct29.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix32, columnMajorSparseMatrix53);
        basic2DMatrix32.setAll((double) (byte) 1);
        org.la4j.Matrix matrix59 = ooPlaceMatrixHadamardProduct0.apply(columnMajorSparseMatrix25, (org.la4j.matrix.DenseMatrix) basic2DMatrix32);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(vector7);
        org.junit.Assert.assertNotNull(vectorFunction9);
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(denseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str33, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix47);
        org.junit.Assert.assertNotNull(denseMatrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix59);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix5 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix6 = rowMajorSparseMatrix5.removeLastRow();
        double double10 = rowMajorSparseMatrix5.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int11 = rowMajorSparseMatrix5.cardinality();
        org.la4j.Vector vector13 = rowMajorSparseMatrix5.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix16 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix17 = ooPlaceMatrixHadamardProduct1.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix5, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix21.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure23 = null;
        rowMajorSparseMatrix21.eachNonZero(matrixProcedure23);
        double[][] doubleArray25 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray25);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct1.apply(rowMajorSparseMatrix21, denseMatrix26);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate28 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix31 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean32 = advancedMatrixPredicate28.test((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter33 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.Matrix matrix34 = denseMatrix26.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        org.la4j.Matrix matrix38 = ooPlaceMatrixHadamardProduct0.apply(columnMajorSparseMatrix31, denseMatrix37);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix39 = denseMatrix37.removeFirstRow();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal row number, must be 0..-1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate28);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix3 = rowMajorSparseMatrix2.shuffle();
        org.la4j.Matrix matrix4 = matrix3.copy();
        org.la4j.Matrix matrix5 = matrix4.removeFirstRow();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double33 = denseMatrix32.min();
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix29, denseMatrix32);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct35 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix41 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator42 = cRSMatrix41.nonZeroIterator();
        org.la4j.Vector vector44 = cRSMatrix41.getColumn(100);
        boolean boolean47 = cRSMatrix41.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator49 = cRSMatrix41.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = cRSMatrix41.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix51 = ooPlaceMatrixHadamardProduct35.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix38, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix50);
        double double54 = basic2DMatrix38.get((int) (byte) 10, 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix57 = org.la4j.matrix.sparse.CRSMatrix.zero((int) '4', (int) ' ');
        org.la4j.Matrix matrix58 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic2DMatrix38, (org.la4j.matrix.SparseMatrix) cRSMatrix57);
        double[][] doubleArray59 = basic2DMatrix38.toArray();
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(cRSMatrix41);
        org.junit.Assert.assertNotNull(matrixIterator42);
        org.junit.Assert.assertNotNull(vector44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(vectorIterator49);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(cRSMatrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(doubleArray59);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        ooPlaceOuterProduct28.ensureApplicableTo((org.la4j.Vector) basicVector37, (org.la4j.Vector) basicVector46);
        org.la4j.vector.sparse.CompressedVector compressedVector49 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix50 = compressedVector49.toColumnMatrix();
        org.la4j.vector.dense.BasicVector basicVector52 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition53 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double57 = cRSMatrix56.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix61.removeLastRow();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition53.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56, rowMajorSparseMatrix61);
        boolean boolean64 = basicVector52.equals((java.lang.Object) rowMajorSparseMatrix61);
        org.la4j.Matrix matrix65 = ooPlaceOuterProduct28.apply((org.la4j.vector.SparseVector) compressedVector49, (org.la4j.vector.DenseVector) basicVector52);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct66 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix71 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator72 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray73 = cCSMatrix71.foldRows(vectorAccumulator72);
        org.la4j.matrix.DenseMatrix denseMatrix74 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray73);
        org.la4j.vector.dense.BasicVector basicVector75 = new org.la4j.vector.dense.BasicVector(doubleArray73);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix80 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator81 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray82 = cCSMatrix80.foldRows(vectorAccumulator81);
        org.la4j.matrix.DenseMatrix denseMatrix83 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray82);
        org.la4j.vector.dense.BasicVector basicVector84 = new org.la4j.vector.dense.BasicVector(doubleArray82);
        ooPlaceOuterProduct66.ensureApplicableTo((org.la4j.Vector) basicVector75, (org.la4j.Vector) basicVector84);
        java.lang.String str86 = basicVector75.toMatrixMarket();
        byte[] byteArray87 = basicVector75.toBinary();
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) compressedVector49, (org.la4j.Vector) basicVector75);
        double double89 = compressedVector49.max();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(basicVector52);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(cCSMatrix71);
        org.junit.Assert.assertNotNull(vectorAccumulator72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix74);
        org.junit.Assert.assertNotNull(cCSMatrix80);
        org.junit.Assert.assertNotNull(vectorAccumulator81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n" + "'", str86, "%%MatrixMarket vector array real\n52\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n1,000\n");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix5 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix6 = rowMajorSparseMatrix5.removeLastRow();
        double double10 = rowMajorSparseMatrix5.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int11 = rowMajorSparseMatrix5.cardinality();
        org.la4j.Vector vector13 = rowMajorSparseMatrix5.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix16 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix17 = ooPlaceMatrixHadamardProduct1.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix5, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix21.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure23 = null;
        rowMajorSparseMatrix21.eachNonZero(matrixProcedure23);
        double[][] doubleArray25 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray25);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct1.apply(rowMajorSparseMatrix21, denseMatrix26);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate28 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix31 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean32 = advancedMatrixPredicate28.test((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter33 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.Matrix matrix34 = denseMatrix26.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        org.la4j.Matrix matrix38 = ooPlaceMatrixHadamardProduct0.apply(columnMajorSparseMatrix31, denseMatrix37);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix39 = null;
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction40 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix43 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean44 = cCSMatrix43.isRowMajor();
        org.la4j.Matrix matrix47 = cCSMatrix43.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator48 = cCSMatrix43.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix54 = rowMajorSparseMatrix52.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix58 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double62 = rowMajorSparseMatrix58.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix63 = rowMajorSparseMatrix58.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct64 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean65 = sparseMatrix63.equals((java.lang.Object) ooPlaceOuterProduct64);
        org.la4j.Matrix matrix66 = rowMajorSparseMatrix52.hadamardProduct((org.la4j.Matrix) sparseMatrix63);
        org.la4j.Matrix matrix67 = ooPlaceMatricesSubtraction40.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix43, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix52);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix68 = ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix39, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate28);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator48);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix58);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix7 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double8 = cRSMatrix7.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator9 = cRSMatrix7.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator13 = columnMajorSparseMatrix12.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator14 = rowMajorMatrixIterator9.orElseSubtract(matrixIterator13);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator18 = cCSMatrix17.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean22 = cCSMatrix21.isRowMajor();
        org.la4j.Matrix matrix25 = cCSMatrix21.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator26 = cCSMatrix21.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator27 = columnMajorMatrixIterator18.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator26);
        org.la4j.iterator.MatrixIterator matrixIterator28 = matrixIterator14.andAlsoMultiply(matrixIterator27);
        org.la4j.iterator.MatrixIterator matrixIterator29 = rowMajorMatrixIterator4.andAlsoDivide(matrixIterator14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean33 = cCSMatrix32.isRowMajor();
        org.la4j.Matrix matrix36 = cCSMatrix32.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator37 = cCSMatrix32.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator38 = rowMajorMatrixIterator4.orElseSubtract((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator37);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix41 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator42 = columnMajorSparseMatrix41.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator43 = columnMajorSparseMatrix41.nonZeroIterator();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition44 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix47 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double48 = cRSMatrix47.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix52.removeLastRow();
        org.la4j.Matrix matrix54 = ooPlaceMatricesAddition44.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix47, rowMajorSparseMatrix52);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition55 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix58 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double59 = cRSMatrix58.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix63 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix63.removeLastRow();
        org.la4j.Matrix matrix65 = ooPlaceMatricesAddition55.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix58, rowMajorSparseMatrix63);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix68 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix70 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix71 = ooPlaceMatricesAddition55.apply(columnMajorSparseMatrix68, denseMatrix70);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix75 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix75.removeLastRow();
        double double80 = rowMajorSparseMatrix75.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector81 = rowMajorSparseMatrix75.toRowVector();
        org.la4j.Matrix matrix82 = ooPlaceMatricesAddition44.apply(denseMatrix70, rowMajorSparseMatrix75);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator83 = denseMatrix70.columnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator84 = matrixIterator43.orElseSubtract((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator83);
        org.la4j.iterator.MatrixIterator matrixIterator85 = columnMajorMatrixIterator37.andAlsoDivide(matrixIterator43);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(cRSMatrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(matrixIterator14);
        org.junit.Assert.assertNotNull(cCSMatrix17);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(matrixIterator28);
        org.junit.Assert.assertNotNull(matrixIterator29);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator37);
        org.junit.Assert.assertNotNull(matrixIterator38);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrixIterator42);
        org.junit.Assert.assertNotNull(matrixIterator43);
        org.junit.Assert.assertNotNull(cRSMatrix47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(cRSMatrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix68);
        org.junit.Assert.assertNotNull(denseMatrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
        org.junit.Assert.assertNotNull(vector81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator83);
        org.junit.Assert.assertNotNull(matrixIterator84);
        org.junit.Assert.assertNotNull(matrixIterator85);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.util.Random random1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.DenseMatrix denseMatrix2 = org.la4j.matrix.DenseMatrix.randomSymmetric(1, random1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction51 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator52 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction51);
        double double53 = matrix49.fold(matrixAccumulator52);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure54 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator52);
        cCSMatrix44.eachNonZero(matrixProcedure54);
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix41, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.VectorIterator vectorIterator58 = cCSMatrix44.iteratorOfColumn((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixAccumulator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure54);
        org.junit.Assert.assertNotNull(matrix56);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = ooPlaceOuterProduct0.apply(denseVector3, denseVector6);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct8 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.matrix.DenseMatrix denseMatrix16 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray15);
        org.la4j.vector.dense.BasicVector basicVector17 = new org.la4j.vector.dense.BasicVector(doubleArray15);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray24 = cCSMatrix22.foldRows(vectorAccumulator23);
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray24);
        org.la4j.vector.dense.BasicVector basicVector26 = new org.la4j.vector.dense.BasicVector(doubleArray24);
        ooPlaceOuterProduct8.ensureApplicableTo((org.la4j.Vector) basicVector17, (org.la4j.Vector) basicVector26);
        org.la4j.vector.sparse.CompressedVector compressedVector29 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector29.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector34 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix35 = ooPlaceOuterProduct8.apply((org.la4j.vector.SparseVector) compressedVector29, (org.la4j.vector.SparseVector) compressedVector34);
        org.la4j.Matrix matrix36 = compressedVector34.toDiagonalMatrix();
        org.la4j.Vector vector38 = compressedVector34.copyOfLength((int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct39 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.matrix.DenseMatrix denseMatrix47 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray46);
        org.la4j.vector.dense.BasicVector basicVector48 = new org.la4j.vector.dense.BasicVector(doubleArray46);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator54 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray55 = cCSMatrix53.foldRows(vectorAccumulator54);
        org.la4j.matrix.DenseMatrix denseMatrix56 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray55);
        org.la4j.vector.dense.BasicVector basicVector57 = new org.la4j.vector.dense.BasicVector(doubleArray55);
        ooPlaceOuterProduct39.ensureApplicableTo((org.la4j.Vector) basicVector48, (org.la4j.Vector) basicVector57);
        org.la4j.vector.sparse.CompressedVector compressedVector60 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector60.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector65 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix66 = ooPlaceOuterProduct39.apply((org.la4j.vector.SparseVector) compressedVector60, (org.la4j.vector.SparseVector) compressedVector65);
        double double67 = compressedVector65.min();
        org.la4j.Matrix matrix68 = compressedVector65.toColumnMatrix();
        org.la4j.Matrix matrix69 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector34, (org.la4j.vector.SparseVector) compressedVector65);
        // The following exception was thrown during execution in test generation
        try {
            compressedVector65.set(100, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix16);
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(vector38);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix47);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertNotNull(vectorAccumulator54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix56);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double7 = rowMajorSparseMatrix3.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.Matrix matrix8 = rowMajorSparseMatrix3.multiplyByItsTranspose();
        org.la4j.Matrix matrix9 = matrix8.multiplyByItsTranspose();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix12 = org.la4j.matrix.dense.Basic1DMatrix.diagonal(10, (-100.0d));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix15 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) '#');
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication16 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator20 = cCSMatrix19.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix21 = cCSMatrix19.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean25 = cCSMatrix24.isRowMajor();
        org.la4j.Matrix matrix26 = cCSMatrix24.transpose();
        ooPlaceMatricesMultiplication16.ensureApplicableTo((org.la4j.Matrix) cCSMatrix19, matrix26);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix30 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double31 = columnMajorSparseMatrix30.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory32 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix33 = columnMajorSparseMatrix30.to(basic1DMatrixMatrixFactory32);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition34 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix37 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double38 = cRSMatrix37.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix42.removeLastRow();
        org.la4j.Matrix matrix44 = ooPlaceMatricesAddition34.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix37, rowMajorSparseMatrix42);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition45 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix48 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double49 = cRSMatrix48.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix53 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix54 = rowMajorSparseMatrix53.removeLastRow();
        org.la4j.Matrix matrix55 = ooPlaceMatricesAddition45.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix48, rowMajorSparseMatrix53);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix58 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix60 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix61 = ooPlaceMatricesAddition45.apply(columnMajorSparseMatrix58, denseMatrix60);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix65 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix66 = rowMajorSparseMatrix65.removeLastRow();
        double double70 = rowMajorSparseMatrix65.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector71 = rowMajorSparseMatrix65.toRowVector();
        org.la4j.Matrix matrix72 = ooPlaceMatricesAddition34.apply(denseMatrix60, rowMajorSparseMatrix65);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = denseMatrix60.toSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix74 = denseMatrix60.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix75 = ooPlaceMatricesMultiplication16.apply(columnMajorSparseMatrix30, rowMajorSparseMatrix74);
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct76 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix79 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix82 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double83 = cRSMatrix82.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator84 = cRSMatrix82.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor85 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix82);
        org.la4j.Matrix matrix86 = ooPlaceKroneckerProduct76.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix79, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix82);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix88 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("");
        org.la4j.Matrix matrix89 = ooPlaceMatricesMultiplication16.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix79, rowMajorSparseMatrix88);
        org.la4j.Matrix matrix90 = rowMajorSparseMatrix88.rotate();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix91 = org.la4j.matrix.SparseMatrix.block(matrix9, (org.la4j.Matrix) basic1DMatrix12, (org.la4j.Matrix) rowMajorSparseMatrix15, matrix90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(basic1DMatrix12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory32);
        org.junit.Assert.assertNotNull(basic1DMatrix33);
        org.junit.Assert.assertNotNull(cRSMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(cRSMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(denseMatrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(vector71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(basic1DMatrix79);
        org.junit.Assert.assertNotNull(cRSMatrix82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator84);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix88);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation39 = org.la4j.LinearAlgebra.OO_PLACE_MATRIX_ADDITION;
        double[][] doubleArray40 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray40);
        org.la4j.matrix.DenseMatrix denseMatrix42 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix43 = basic2DMatrix37.apply(matrixMatrixMatrixOperation39, (org.la4j.Matrix) denseMatrix42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 5x6 does not equal to 0x0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(denseMatrix42);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix41.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix46.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory49 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix50 = matrix48.to(basic1DMatrixMatrixFactory49);
        org.la4j.Matrix matrix51 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix41, (org.la4j.matrix.DenseMatrix) basic1DMatrix50);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix41.blankOfRows((int) ' ');
        double double54 = rowMajorSparseMatrix41.density();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double63 = rowMajorSparseMatrix59.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix64 = rowMajorSparseMatrix59.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate65 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean66 = sparseMatrix64.is(advancedMatrixPredicate65);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator68 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double69 = sparseMatrix64.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator68);
        org.la4j.vector.functor.VectorProcedure vectorProcedure70 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator68);
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix41.eachInColumn(52, vectorProcedure70);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory49);
        org.junit.Assert.assertNotNull(basic1DMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix64);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure70);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication41 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.Matrix matrix47 = ooPlaceMatrixByItsTransposeMultiplication41.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation48 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication49 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix52 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator53 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray54 = cCSMatrix52.foldRows(vectorAccumulator53);
        org.la4j.Matrix matrix55 = ooPlaceMatrixByItsTransposeMultiplication49.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix52);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix58 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double59 = cRSMatrix58.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator60 = cRSMatrix58.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor61 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix58);
        double double62 = cRSMatrix58.max();
        org.la4j.Matrix matrix63 = ooPlaceMatrixByItsTransposeMultiplication49.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix58);
        org.la4j.Matrix matrix65 = cRSMatrix58.multiply((double) (byte) 100);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix69 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix58, rowMajorSparseMatrix68);
        java.text.NumberFormat numberFormat70 = null;
        java.lang.String str71 = rowMajorSparseMatrix68.mkString(numberFormat70);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixMatrixOperation48);
        org.junit.Assert.assertNotNull(cCSMatrix52);
        org.junit.Assert.assertNotNull(vectorAccumulator53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cRSMatrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator60);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\n" + "'", str71, "\n");
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double2 = compressedVector1.euclideanNorm();
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory3 = org.la4j.Vectors.DENSE;
        java.lang.Class<org.la4j.vector.dense.BasicVector> basicVectorClass4 = basicVectorVectorFactory3.outputClass;
        org.la4j.vector.dense.BasicVector basicVector5 = compressedVector1.to(basicVectorVectorFactory3);
        double double7 = basicVector5.get(0);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory3);
        org.junit.Assert.assertNotNull(basicVectorClass4);
        org.junit.Assert.assertNotNull(basicVector5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.la4j.vector.functor.VectorFunction vectorFunction0 = org.la4j.Vectors.DEC_FUNCTION;
        double double3 = vectorFunction0.evaluate((int) (short) -1, (double) 10);
        org.junit.Assert.assertNotNull(vectorFunction0);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 9.0d + "'", double3 == 9.0d);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.fromArray(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix3 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix2);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix7 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction8 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix11 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean12 = cCSMatrix11.isRowMajor();
        org.la4j.Matrix matrix15 = cCSMatrix11.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator16 = cCSMatrix11.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix20.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix26 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double30 = rowMajorSparseMatrix26.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix31 = rowMajorSparseMatrix26.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct32 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean33 = sparseMatrix31.equals((java.lang.Object) ooPlaceOuterProduct32);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix20.hadamardProduct((org.la4j.Matrix) sparseMatrix31);
        org.la4j.Matrix matrix35 = ooPlaceMatricesSubtraction8.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix11, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix20);
        org.la4j.Matrix matrix36 = ooPlaceMatricesSubtraction4.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix7, rowMajorSparseMatrix20);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor37 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix20);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix40 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator41 = cRSMatrix40.nonZeroIterator();
        org.la4j.Vector vector43 = cRSMatrix40.getColumn(100);
        boolean boolean46 = cRSMatrix40.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor47 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix40);
        double double48 = cRSMatrix40.infinityNorm();
        boolean boolean49 = singularValueDecompositor37.applicableTo((org.la4j.Matrix) cRSMatrix40);
        org.la4j.Matrix matrix50 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix40);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix51 = cRSMatrix40.toColumnMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            columnMajorSparseMatrix51.set((int) (byte) -1, (int) '#', 48.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '-1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(basic2DMatrix7);
        org.junit.Assert.assertNotNull(cCSMatrix11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix26);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(cRSMatrix40);
        org.junit.Assert.assertNotNull(matrixIterator41);
        org.junit.Assert.assertNotNull(vector43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix51);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor4 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.LinearAlgebra.InverterFactory inverterFactory5 = org.la4j.LinearAlgebra.INVERTER;
        org.la4j.inversion.MatrixInverter matrixInverter6 = columnMajorSparseMatrix2.withInverter(inverterFactory5);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication7 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator11 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray12 = cCSMatrix10.foldRows(vectorAccumulator11);
        org.la4j.Matrix matrix13 = ooPlaceMatrixByItsTransposeMultiplication7.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix10);
        double double15 = cCSMatrix10.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator16 = cCSMatrix10.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix19 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator20 = cRSMatrix19.nonZeroIterator();
        org.la4j.Vector vector22 = cRSMatrix19.getColumn(100);
        boolean boolean25 = cRSMatrix19.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator27 = cRSMatrix19.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix28 = cRSMatrix19.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory29 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix30 = cRSMatrix19.to(basic1DMatrixMatrixFactory29);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix31 = cCSMatrix10.to(basic1DMatrixMatrixFactory29);
        org.la4j.inversion.MatrixInverter matrixInverter32 = inverterFactory5.create((org.la4j.Matrix) cCSMatrix10);
        org.la4j.Matrix matrix34 = cCSMatrix10.subtract((double) '#');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = cCSMatrix10.nonZeroAt((int) (byte) 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(inverterFactory5);
        org.junit.Assert.assertNotNull(matrixInverter6);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertNotNull(vectorAccumulator11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator16);
        org.junit.Assert.assertNotNull(cRSMatrix19);
        org.junit.Assert.assertNotNull(matrixIterator20);
        org.junit.Assert.assertNotNull(vector22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(vectorIterator27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix28);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory29);
        org.junit.Assert.assertNotNull(basic1DMatrix30);
        org.junit.Assert.assertNotNull(basic1DMatrix31);
        org.junit.Assert.assertNotNull(matrixInverter32);
        org.junit.Assert.assertNotNull(matrix34);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal(1, (double) (short) -1);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation3 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation4 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray11 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray18 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray25 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray32 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray39 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray40 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32, doubleArray39 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray40);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation42 = matrixMatrixMatrixOperation4.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        org.la4j.Matrix matrix44 = basic2DMatrix41.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix49 = rowMajorSparseMatrix48.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction51 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator52 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction51);
        double double53 = matrix49.fold(matrixAccumulator52);
        double double54 = matrix49.manhattanNorm();
        matrixMatrixMatrixOperation3.ensureApplicableTo(matrix44, matrix49);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double63 = rowMajorSparseMatrix59.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix64 = rowMajorSparseMatrix59.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate65 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean66 = sparseMatrix64.is(advancedMatrixPredicate65);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator68 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double69 = sparseMatrix64.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator68);
        org.la4j.vector.functor.VectorProcedure vectorProcedure70 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator68);
        double[] doubleArray71 = matrix44.foldRows(vectorAccumulator68);
        org.la4j.Matrix matrix72 = matrix44.multiplyByItsTranspose();
        org.la4j.decomposition.LUDecompositor lUDecompositor73 = new org.la4j.decomposition.LUDecompositor(matrix72);
        java.lang.String str74 = matrix72.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix81 = columnMajorSparseMatrix2.insert(matrix72, 0, 52, (int) (byte) 10, (int) (short) 10, 1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Destination position out of bounds: 10, 10");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation3);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrixMatrixOperation42);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(matrixAccumulator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-1.0d) + "'", double53 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix64);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n" + "'", str74, "0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n0,000 0,000 0,000 0,000 0,000\n");
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        java.text.NumberFormat numberFormat2 = null;
        java.lang.String str3 = basicVector1.mkString(numberFormat2);
        org.junit.Assert.assertNotNull(basicVector1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct20 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random22 = null;
        org.la4j.vector.DenseVector denseVector23 = org.la4j.vector.DenseVector.random(0, random22);
        java.util.Random random25 = null;
        org.la4j.vector.DenseVector denseVector26 = org.la4j.vector.DenseVector.random(0, random25);
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct20.apply(denseVector23, denseVector26);
        org.la4j.vector.sparse.CompressedVector compressedVector29 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix30 = ooPlaceOuterProduct0.apply(denseVector23, (org.la4j.vector.SparseVector) compressedVector29);
        org.la4j.Vector vector33 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction35 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector36 = vector33.transform(vectorFunction35);
        compressedVector29.updateAt(52, vectorFunction35);
        double double38 = compressedVector29.product();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(denseVector23);
        org.junit.Assert.assertNotNull(denseVector26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(vector33);
        org.junit.Assert.assertNotNull(vectorFunction35);
        org.junit.Assert.assertNotNull(vector36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.random((int) 'a', 6, (-100.0d), random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.diagonal(100, 10.0d);
        org.la4j.iterator.VectorIterator vectorIterator5 = rowMajorSparseMatrix3.nonZeroIteratorOfRow(30);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction6 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix13 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix14 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, denseMatrix13);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix17 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double18 = columnMajorSparseMatrix17.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory19 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix20 = columnMajorSparseMatrix17.to(basic1DMatrixMatrixFactory19);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix25 = rowMajorSparseMatrix24.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure26 = null;
        rowMajorSparseMatrix24.eachNonZero(matrixProcedure26);
        org.la4j.Matrix matrix28 = ooPlaceMatricesSubtraction6.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix20, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix24);
        org.la4j.Matrix matrix29 = basic1DMatrix20.shuffle();
        basic1DMatrix20.swapColumns(10, (int) (short) 100);
        org.la4j.Matrix matrix35 = basic1DMatrix20.copyOfShape(30, (int) (short) 100);
        org.la4j.Matrix matrix36 = ooPlaceKroneckerProduct0.apply(rowMajorSparseMatrix3, (org.la4j.matrix.DenseMatrix) basic1DMatrix20);
        java.util.Random random39 = null;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix40 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric((int) (short) 100, Double.NaN, random39);
        org.la4j.matrix.DenseMatrix denseMatrix43 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) 10);
        org.la4j.Matrix matrix44 = ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix40, denseMatrix43);
        java.util.Random random47 = null;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix48 = org.la4j.matrix.dense.Basic1DMatrix.random((int) 'a', 0, random47);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix50 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix51 = ooPlaceKroneckerProduct0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix48, (org.la4j.matrix.DenseMatrix) basic2DMatrix50);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(vectorIterator5);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(denseMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory19);
        org.junit.Assert.assertNotNull(basic1DMatrix20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(denseMatrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(basic1DMatrix48);
        org.junit.Assert.assertNotNull(basic2DMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix7 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double8 = cRSMatrix7.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator9 = cRSMatrix7.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator13 = columnMajorSparseMatrix12.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator14 = rowMajorMatrixIterator9.orElseSubtract(matrixIterator13);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator18 = cCSMatrix17.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean22 = cCSMatrix21.isRowMajor();
        org.la4j.Matrix matrix25 = cCSMatrix21.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator26 = cCSMatrix21.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator27 = columnMajorMatrixIterator18.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator26);
        org.la4j.iterator.MatrixIterator matrixIterator28 = matrixIterator14.andAlsoMultiply(matrixIterator27);
        org.la4j.iterator.MatrixIterator matrixIterator29 = rowMajorMatrixIterator4.andAlsoDivide(matrixIterator14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator33 = cCSMatrix32.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix36 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean37 = cCSMatrix36.isRowMajor();
        org.la4j.Matrix matrix40 = cCSMatrix36.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator41 = cCSMatrix36.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator42 = columnMajorMatrixIterator33.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator41);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean46 = cCSMatrix45.isRowMajor();
        org.la4j.Matrix matrix49 = cCSMatrix45.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator50 = cCSMatrix45.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix53 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double54 = cRSMatrix53.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator55 = cRSMatrix53.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix58 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator59 = columnMajorSparseMatrix58.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator60 = rowMajorMatrixIterator55.orElseSubtract(matrixIterator59);
        org.la4j.iterator.MatrixIterator matrixIterator61 = columnMajorMatrixIterator50.orElseAdd(matrixIterator59);
        org.la4j.iterator.MatrixIterator matrixIterator62 = columnMajorMatrixIterator33.andAlsoDivide(matrixIterator59);
        org.la4j.iterator.MatrixIterator matrixIterator63 = rowMajorMatrixIterator4.orElseAdd(matrixIterator62);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix66 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 10, (int) (byte) 1);
        cCSMatrix66.setAll((double) (-1L));
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator69 = cCSMatrix66.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator70 = cCSMatrix66.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator71 = rowMajorMatrixIterator4.orElseSubtract(matrixIterator70);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(cRSMatrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(matrixIterator14);
        org.junit.Assert.assertNotNull(cCSMatrix17);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(matrixIterator28);
        org.junit.Assert.assertNotNull(matrixIterator29);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator33);
        org.junit.Assert.assertNotNull(cCSMatrix36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator41);
        org.junit.Assert.assertNotNull(matrixIterator42);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator50);
        org.junit.Assert.assertNotNull(cRSMatrix53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator55);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(matrixIterator59);
        org.junit.Assert.assertNotNull(matrixIterator60);
        org.junit.Assert.assertNotNull(matrixIterator61);
        org.junit.Assert.assertNotNull(matrixIterator62);
        org.junit.Assert.assertNotNull(matrixIterator63);
        org.junit.Assert.assertNotNull(cCSMatrix66);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator69);
        org.junit.Assert.assertNotNull(matrixIterator70);
        org.junit.Assert.assertNotNull(matrixIterator71);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double3 = columnMajorSparseMatrix2.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor4 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.LinearAlgebra.InverterFactory inverterFactory5 = org.la4j.LinearAlgebra.INVERTER;
        org.la4j.inversion.MatrixInverter matrixInverter6 = columnMajorSparseMatrix2.withInverter(inverterFactory5);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication7 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator11 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray12 = cCSMatrix10.foldRows(vectorAccumulator11);
        org.la4j.Matrix matrix13 = ooPlaceMatrixByItsTransposeMultiplication7.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix10);
        double double15 = cCSMatrix10.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator16 = cCSMatrix10.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix19 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator20 = cRSMatrix19.nonZeroIterator();
        org.la4j.Vector vector22 = cRSMatrix19.getColumn(100);
        boolean boolean25 = cRSMatrix19.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator27 = cRSMatrix19.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix28 = cRSMatrix19.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory29 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix30 = cRSMatrix19.to(basic1DMatrixMatrixFactory29);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix31 = cCSMatrix10.to(basic1DMatrixMatrixFactory29);
        org.la4j.inversion.MatrixInverter matrixInverter32 = inverterFactory5.create((org.la4j.Matrix) cCSMatrix10);
        org.la4j.Matrix matrix34 = cCSMatrix10.subtract((double) '#');
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix37 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double38 = columnMajorSparseMatrix37.determinant();
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor39 = new org.la4j.decomposition.CholeskyDecompositor((org.la4j.Matrix) columnMajorSparseMatrix37);
        org.la4j.LinearAlgebra.InverterFactory inverterFactory40 = org.la4j.LinearAlgebra.INVERTER;
        org.la4j.inversion.MatrixInverter matrixInverter41 = columnMajorSparseMatrix37.withInverter(inverterFactory40);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication42 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator46 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray47 = cCSMatrix45.foldRows(vectorAccumulator46);
        org.la4j.Matrix matrix48 = ooPlaceMatrixByItsTransposeMultiplication42.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix45);
        double double50 = cCSMatrix45.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator51 = cCSMatrix45.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix54 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator55 = cRSMatrix54.nonZeroIterator();
        org.la4j.Vector vector57 = cRSMatrix54.getColumn(100);
        boolean boolean60 = cRSMatrix54.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator62 = cRSMatrix54.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix63 = cRSMatrix54.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory64 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix65 = cRSMatrix54.to(basic1DMatrixMatrixFactory64);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix66 = cCSMatrix45.to(basic1DMatrixMatrixFactory64);
        org.la4j.inversion.MatrixInverter matrixInverter67 = inverterFactory40.create((org.la4j.Matrix) cCSMatrix45);
        org.la4j.inversion.MatrixInverter matrixInverter68 = matrix34.withInverter(inverterFactory40);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(inverterFactory5);
        org.junit.Assert.assertNotNull(matrixInverter6);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertNotNull(vectorAccumulator11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator16);
        org.junit.Assert.assertNotNull(cRSMatrix19);
        org.junit.Assert.assertNotNull(matrixIterator20);
        org.junit.Assert.assertNotNull(vector22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(vectorIterator27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix28);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory29);
        org.junit.Assert.assertNotNull(basic1DMatrix30);
        org.junit.Assert.assertNotNull(basic1DMatrix31);
        org.junit.Assert.assertNotNull(matrixInverter32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(inverterFactory40);
        org.junit.Assert.assertNotNull(matrixInverter41);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertNotNull(vectorAccumulator46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator51);
        org.junit.Assert.assertNotNull(cRSMatrix54);
        org.junit.Assert.assertNotNull(matrixIterator55);
        org.junit.Assert.assertNotNull(vector57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(vectorIterator62);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix63);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory64);
        org.junit.Assert.assertNotNull(basic1DMatrix65);
        org.junit.Assert.assertNotNull(basic1DMatrix66);
        org.junit.Assert.assertNotNull(matrixInverter67);
        org.junit.Assert.assertNotNull(matrixInverter68);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) 'a', (int) (byte) 10);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.diagonal((int) (short) 10, (double) (byte) 100);
        org.junit.Assert.assertNotNull(basic1DMatrix2);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix41.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix48 = rowMajorSparseMatrix46.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory49 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix50 = matrix48.to(basic1DMatrixMatrixFactory49);
        org.la4j.Matrix matrix51 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix41, (org.la4j.matrix.DenseMatrix) basic1DMatrix50);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix54 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double57 = cCSMatrix54.get((int) (byte) 0, (int) (short) 1);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix59 = org.la4j.matrix.dense.Basic2DMatrix.identity((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix60 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix54, (org.la4j.matrix.DenseMatrix) basic2DMatrix59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory49);
        org.junit.Assert.assertNotNull(basic1DMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(cCSMatrix54);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix59);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver23 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix22);
        int int24 = forwardBackSubstitutionSolver23.unknowns();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation25 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray32 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray39 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray46 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray53 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray60 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray61 = new double[][] { doubleArray32, doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix62 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray61);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation63 = matrixMatrixMatrixOperation25.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix62);
        org.la4j.iterator.MatrixIterator matrixIterator64 = basic2DMatrix62.iterator();
        org.la4j.Matrix matrix67 = basic2DMatrix62.copyOfShape((int) ' ', 10);
        boolean boolean68 = forwardBackSubstitutionSolver23.applicableTo((org.la4j.Matrix) basic2DMatrix62);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory69 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix70 = basic2DMatrix62.to(basic1DMatrixMatrixFactory69);
        int int71 = basic2DMatrix62.rows();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(basic2DMatrix62);
        org.junit.Assert.assertNotNull(matrixMatrixOperation63);
        org.junit.Assert.assertNotNull(matrixIterator64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory69);
        org.junit.Assert.assertNotNull(basic1DMatrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asDivFunction(1.1102230246251565E-14d);
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.zero(10, (int) (byte) 1);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.Vector vector8 = cCSMatrix6.getRow((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix9 = rowMajorSparseMatrix2.insertRow(52, vector8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal row number, must be 0..10");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(vector8);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.identity((int) 'a');
        org.junit.Assert.assertNotNull(cRSMatrix1);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.SparseMatrix sparseMatrix39 = denseMatrix26.toSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix40 = denseMatrix26.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix42 = denseMatrix26.blankOfRows((int) (short) 0);
        double double43 = denseMatrix26.manhattanNorm();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(sparseMatrix39);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero((int) '#', 100, 52);
        java.text.NumberFormat numberFormat4 = null;
        java.lang.String str5 = columnMajorSparseMatrix3.toMatrixMarket(numberFormat4);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "%%MatrixMarket matrix coordinate real general column-major\n35 100 0\n" + "'", str5, "%%MatrixMarket matrix coordinate real general column-major\n35 100 0\n");
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure22 = null;
        rowMajorSparseMatrix20.eachNonZero(matrixProcedure22);
        double[][] doubleArray24 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray24);
        org.la4j.Matrix matrix26 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix20, denseMatrix25);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.zero(100, (int) (short) 100);
        org.la4j.Matrix matrix31 = cRSMatrix29.multiply((double) 100);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction32 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix37 = rowMajorSparseMatrix36.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction32.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix36, denseMatrix39);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix43 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double44 = columnMajorSparseMatrix43.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory45 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix46 = columnMajorSparseMatrix43.to(basic1DMatrixMatrixFactory45);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix51 = rowMajorSparseMatrix50.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure52 = null;
        rowMajorSparseMatrix50.eachNonZero(matrixProcedure52);
        org.la4j.Matrix matrix54 = ooPlaceMatricesSubtraction32.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix46, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix50);
        org.la4j.Matrix matrix55 = basic1DMatrix46.shuffle();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix58 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator59 = cRSMatrix58.nonZeroIterator();
        org.la4j.Vector vector61 = cRSMatrix58.getColumn(100);
        boolean boolean64 = cRSMatrix58.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator66 = cRSMatrix58.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix67 = cRSMatrix58.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory68 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix69 = cRSMatrix58.to(basic1DMatrixMatrixFactory68);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix70 = matrix55.to(basic1DMatrixMatrixFactory68);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix71 = cRSMatrix29.to(basic1DMatrixMatrixFactory68);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix75 = org.la4j.matrix.sparse.CCSMatrix.zero(10, (int) (short) 10, (int) '4');
        org.la4j.decomposition.QRDecompositor qRDecompositor76 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) cCSMatrix75);
        org.la4j.Matrix matrix77 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix29, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix75);
        org.la4j.matrix.DenseMatrix denseMatrix78 = null;
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix81 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix82 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix78, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory45);
        org.junit.Assert.assertNotNull(basic1DMatrix46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cRSMatrix58);
        org.junit.Assert.assertNotNull(matrixIterator59);
        org.junit.Assert.assertNotNull(vector61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(vectorIterator66);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix67);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory68);
        org.junit.Assert.assertNotNull(basic1DMatrix69);
        org.junit.Assert.assertNotNull(basic1DMatrix70);
        org.junit.Assert.assertNotNull(basic1DMatrix71);
        org.junit.Assert.assertNotNull(cCSMatrix75);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(cCSMatrix81);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.diagonal((int) (short) 100, 35.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.sparse.CompressedVector compressedVector1 = org.la4j.vector.sparse.CompressedVector.fromCSV("la4j-0.5.5 (March 2015)");
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"la4j-0.5.5\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.identity((int) 'a');
        org.junit.Assert.assertNotNull(denseMatrix1);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct1 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix15 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator16 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray17 = cCSMatrix15.foldRows(vectorAccumulator16);
        org.la4j.matrix.DenseMatrix denseMatrix18 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray17);
        org.la4j.vector.dense.BasicVector basicVector19 = new org.la4j.vector.dense.BasicVector(doubleArray17);
        ooPlaceOuterProduct1.ensureApplicableTo((org.la4j.Vector) basicVector10, (org.la4j.Vector) basicVector19);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct21 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix26 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator27 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray28 = cCSMatrix26.foldRows(vectorAccumulator27);
        org.la4j.matrix.DenseMatrix denseMatrix29 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray28);
        org.la4j.vector.dense.BasicVector basicVector30 = new org.la4j.vector.dense.BasicVector(doubleArray28);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator36 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray37 = cCSMatrix35.foldRows(vectorAccumulator36);
        org.la4j.matrix.DenseMatrix denseMatrix38 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray37);
        org.la4j.vector.dense.BasicVector basicVector39 = new org.la4j.vector.dense.BasicVector(doubleArray37);
        ooPlaceOuterProduct21.ensureApplicableTo((org.la4j.Vector) basicVector30, (org.la4j.Vector) basicVector39);
        org.la4j.vector.sparse.CompressedVector compressedVector42 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector42.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector47 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix48 = ooPlaceOuterProduct21.apply((org.la4j.vector.SparseVector) compressedVector42, (org.la4j.vector.SparseVector) compressedVector47);
        double double49 = compressedVector47.min();
        org.la4j.Matrix matrix50 = compressedVector47.toColumnMatrix();
        compressedVector47.set((int) (byte) 1, 1.0d);
        org.la4j.Matrix matrix54 = ooPlaceOuterProduct0.apply((org.la4j.vector.DenseVector) basicVector19, (org.la4j.vector.SparseVector) compressedVector47);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(cCSMatrix15);
        org.junit.Assert.assertNotNull(vectorAccumulator16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix18);
        org.junit.Assert.assertNotNull(cCSMatrix26);
        org.junit.Assert.assertNotNull(vectorAccumulator27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix29);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertNotNull(vectorAccumulator36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix38);
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix54);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor5 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double6 = cRSMatrix2.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix9 = cRSMatrix2.kroneckerProduct((org.la4j.Matrix) basic2DMatrix8);
        org.la4j.linear.LeastSquaresSolver leastSquaresSolver10 = new org.la4j.linear.LeastSquaresSolver((org.la4j.Matrix) basic2DMatrix8);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix13 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator14 = cRSMatrix13.nonZeroIterator();
        boolean boolean15 = leastSquaresSolver10.applicableTo((org.la4j.Matrix) cRSMatrix13);
        org.la4j.Vector vector17 = cRSMatrix13.getColumn((int) (short) 1);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(cRSMatrix13);
        org.junit.Assert.assertNotNull(matrixIterator14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(vector17);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        double double39 = rowMajorSparseMatrix31.max();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = new org.la4j.matrix.dense.Basic1DMatrix((int) (byte) 0, 0);
        byte[] byteArray3 = basic1DMatrix2.toBinary();
        org.la4j.iterator.VectorIterator vectorIterator5 = basic1DMatrix2.iteratorOfColumn((int) (short) 1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(vectorIterator5);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        double double13 = cRSMatrix3.minInRow(6);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector1 = org.la4j.Vector.zero((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct31 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix36 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator37 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray38 = cCSMatrix36.foldRows(vectorAccumulator37);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray38);
        org.la4j.vector.dense.BasicVector basicVector40 = new org.la4j.vector.dense.BasicVector(doubleArray38);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator46 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray47 = cCSMatrix45.foldRows(vectorAccumulator46);
        org.la4j.matrix.DenseMatrix denseMatrix48 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray47);
        org.la4j.vector.dense.BasicVector basicVector49 = new org.la4j.vector.dense.BasicVector(doubleArray47);
        ooPlaceOuterProduct31.ensureApplicableTo((org.la4j.Vector) basicVector40, (org.la4j.Vector) basicVector49);
        org.la4j.vector.sparse.CompressedVector compressedVector52 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector52.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector57 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix58 = ooPlaceOuterProduct31.apply((org.la4j.vector.SparseVector) compressedVector52, (org.la4j.vector.SparseVector) compressedVector57);
        double double59 = compressedVector57.min();
        org.la4j.iterator.VectorIterator vectorIterator60 = compressedVector57.iterator();
        org.la4j.Matrix matrix61 = basicVector9.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct29, (org.la4j.Vector) compressedVector57);
        org.la4j.Vector vector63 = org.la4j.Vector.unit((int) (short) 10);
        double double64 = vector63.min();
        org.la4j.Matrix matrix65 = basicVector9.outerProduct(vector63);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cCSMatrix36);
        org.junit.Assert.assertNotNull(vectorAccumulator37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertNotNull(vectorAccumulator46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix48);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(vectorIterator60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(vector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.0d + "'", double64 == 1.0d);
        org.junit.Assert.assertNotNull(matrix65);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = null;
        rowMajorSparseMatrix14.eachNonZero(matrixProcedure16);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix14);
        org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor19 = new org.la4j.decomposition.CholeskyDecompositor(matrix18);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = null;
        rowMajorSparseMatrix14.eachNonZero(matrixProcedure16);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double24 = cCSMatrix21.get((int) (byte) 0, (int) (short) 1);
        double double25 = cCSMatrix21.min();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction26 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean30 = cCSMatrix29.isRowMajor();
        org.la4j.Matrix matrix33 = cCSMatrix29.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator34 = cCSMatrix29.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix38 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix40 = rowMajorSparseMatrix38.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double48 = rowMajorSparseMatrix44.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix49 = rowMajorSparseMatrix44.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct50 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean51 = sparseMatrix49.equals((java.lang.Object) ooPlaceOuterProduct50);
        org.la4j.Matrix matrix52 = rowMajorSparseMatrix38.hadamardProduct((org.la4j.Matrix) sparseMatrix49);
        org.la4j.Matrix matrix53 = ooPlaceMatricesSubtraction26.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix29, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix38);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator54 = cCSMatrix29.iterator();
        org.la4j.Matrix matrix55 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix21, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix29);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double63 = rowMajorSparseMatrix59.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.iterator.VectorIterator vectorIterator65 = rowMajorSparseMatrix59.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition66 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix71 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator72 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray73 = cCSMatrix71.foldRows(vectorAccumulator72);
        org.la4j.matrix.DenseMatrix denseMatrix74 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray73);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct75 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix78 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double79 = cRSMatrix78.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate80 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix83 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean84 = advancedMatrixPredicate80.test((org.la4j.Matrix) columnMajorSparseMatrix83);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter85 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix86 = ooPlaceMatrixHadamardProduct75.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix78, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix87 = ooPlaceMatricesAddition66.applySymmetric(denseMatrix74, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix88 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix59, denseMatrix74);
        org.la4j.matrix.functor.MatrixFunction matrixFunction92 = org.la4j.Matrices.INV_FUNCTION;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator93 = org.la4j.Matrices.asProductFunctionAccumulator((double) 0L, matrixFunction92);
        double double97 = matrixFunction92.evaluate(0, 0, 1.0E10d);
        // The following exception was thrown during execution in test generation
        try {
            matrix88.updateAt((int) (short) 1, (-1), matrixFunction92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(vectorIterator65);
        org.junit.Assert.assertNotNull(cCSMatrix71);
        org.junit.Assert.assertNotNull(vectorAccumulator72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix74);
        org.junit.Assert.assertNotNull(cRSMatrix78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate80);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrixFunction92);
        org.junit.Assert.assertNotNull(matrixAccumulator93);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + (-1.0E10d) + "'", double97 == (-1.0E10d));
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        java.util.Spliterator<java.lang.Double> doubleSpliterator39 = basic2DMatrix37.spliterator();
        org.la4j.Matrix matrix42 = basic2DMatrix37.copyOfShape(0, (int) (byte) 100);
        double[][] doubleArray43 = basic2DMatrix37.toArray();
        org.la4j.matrix.SparseMatrix sparseMatrix44 = org.la4j.matrix.SparseMatrix.from2DArray(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix46 = sparseMatrix44.removeRow(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal row number, must be 0..4");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleSpliterator39);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(sparseMatrix44);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.la4j.Vector vector1 = org.la4j.Vector.unit(5);
        org.junit.Assert.assertNotNull(vector1);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.identity((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.iterator();
        org.la4j.Vector vector7 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction9 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector10 = vector7.transform(vectorFunction9);
        org.la4j.Matrix matrix11 = cCSMatrix3.transformRow(0, vectorFunction9);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction12 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix17 = rowMajorSparseMatrix16.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix19 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix20 = ooPlaceMatricesSubtraction12.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16, denseMatrix19);
        org.la4j.Matrix matrix21 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3, denseMatrix19);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = null;
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition23 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix26 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double27 = cRSMatrix26.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        org.la4j.Matrix matrix33 = ooPlaceMatricesAddition23.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix26, rowMajorSparseMatrix31);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition34 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix37 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double38 = cRSMatrix37.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix42.removeLastRow();
        org.la4j.Matrix matrix44 = ooPlaceMatricesAddition34.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix37, rowMajorSparseMatrix42);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix47 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix49 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix50 = ooPlaceMatricesAddition34.apply(columnMajorSparseMatrix47, denseMatrix49);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix54 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix55 = rowMajorSparseMatrix54.removeLastRow();
        double double59 = rowMajorSparseMatrix54.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector60 = rowMajorSparseMatrix54.toRowVector();
        org.la4j.Matrix matrix61 = ooPlaceMatricesAddition23.apply(denseMatrix49, rowMajorSparseMatrix54);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix64 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double67 = cCSMatrix64.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction69 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix70 = cCSMatrix64.transformRow(10, vectorFunction69);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix73 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator74 = cRSMatrix73.nonZeroIterator();
        org.la4j.Vector vector76 = cRSMatrix73.getColumn(100);
        boolean boolean79 = cRSMatrix73.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor80 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix73);
        org.la4j.Matrix matrix81 = ooPlaceMatricesAddition23.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix64, (org.la4j.matrix.SparseMatrix) cRSMatrix73);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix82 = ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix22, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(vector7);
        org.junit.Assert.assertNotNull(vectorFunction9);
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(denseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(cRSMatrix26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix47);
        org.junit.Assert.assertNotNull(denseMatrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(vector60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(cCSMatrix64);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(cRSMatrix73);
        org.junit.Assert.assertNotNull(matrixIterator74);
        org.junit.Assert.assertNotNull(vector76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(matrix81);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double10 = cRSMatrix2.max();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct11 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.matrix.DenseMatrix denseMatrix19 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray18);
        org.la4j.vector.dense.BasicVector basicVector20 = new org.la4j.vector.dense.BasicVector(doubleArray18);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator26 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray27 = cCSMatrix25.foldRows(vectorAccumulator26);
        org.la4j.matrix.DenseMatrix denseMatrix28 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray27);
        org.la4j.vector.dense.BasicVector basicVector29 = new org.la4j.vector.dense.BasicVector(doubleArray27);
        ooPlaceOuterProduct11.ensureApplicableTo((org.la4j.Vector) basicVector20, (org.la4j.Vector) basicVector29);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector31 = cRSMatrix2.multiply((org.la4j.Vector) basicVector20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 52 does not equal to 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix19);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertNotNull(vectorAccumulator26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix28);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        double double8 = cCSMatrix3.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator9 = cCSMatrix3.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix12 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator13 = cRSMatrix12.nonZeroIterator();
        org.la4j.Vector vector15 = cRSMatrix12.getColumn(100);
        boolean boolean18 = cRSMatrix12.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator20 = cRSMatrix12.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = cRSMatrix12.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory22 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix23 = cRSMatrix12.to(basic1DMatrixMatrixFactory22);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix24 = cCSMatrix3.to(basic1DMatrixMatrixFactory22);
        org.la4j.Vector vector26 = cCSMatrix3.getRow((int) (short) -1);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix33.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction36 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator37 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction36);
        double double38 = matrix34.fold(matrixAccumulator37);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure39 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator37);
        cCSMatrix29.eachNonZero(matrixProcedure39);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix3.each(matrixProcedure39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator9);
        org.junit.Assert.assertNotNull(cRSMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(vector15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(vectorIterator20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory22);
        org.junit.Assert.assertNotNull(basic1DMatrix23);
        org.junit.Assert.assertNotNull(basic1DMatrix24);
        org.junit.Assert.assertNotNull(vector26);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrixAccumulator37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-1.0d) + "'", double38 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure39);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = ooPlaceOuterProduct0.apply(denseVector3, denseVector6);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct8 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix13 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator14 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray15 = cCSMatrix13.foldRows(vectorAccumulator14);
        org.la4j.matrix.DenseMatrix denseMatrix16 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray15);
        org.la4j.vector.dense.BasicVector basicVector17 = new org.la4j.vector.dense.BasicVector(doubleArray15);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray24 = cCSMatrix22.foldRows(vectorAccumulator23);
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray24);
        org.la4j.vector.dense.BasicVector basicVector26 = new org.la4j.vector.dense.BasicVector(doubleArray24);
        ooPlaceOuterProduct8.ensureApplicableTo((org.la4j.Vector) basicVector17, (org.la4j.Vector) basicVector26);
        org.la4j.vector.sparse.CompressedVector compressedVector29 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector29.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector34 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix35 = ooPlaceOuterProduct8.apply((org.la4j.vector.SparseVector) compressedVector29, (org.la4j.vector.SparseVector) compressedVector34);
        org.la4j.Matrix matrix36 = compressedVector34.toDiagonalMatrix();
        org.la4j.Vector vector38 = compressedVector34.copyOfLength((int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct39 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.matrix.DenseMatrix denseMatrix47 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray46);
        org.la4j.vector.dense.BasicVector basicVector48 = new org.la4j.vector.dense.BasicVector(doubleArray46);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator54 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray55 = cCSMatrix53.foldRows(vectorAccumulator54);
        org.la4j.matrix.DenseMatrix denseMatrix56 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray55);
        org.la4j.vector.dense.BasicVector basicVector57 = new org.la4j.vector.dense.BasicVector(doubleArray55);
        ooPlaceOuterProduct39.ensureApplicableTo((org.la4j.Vector) basicVector48, (org.la4j.Vector) basicVector57);
        org.la4j.vector.sparse.CompressedVector compressedVector60 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector60.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector65 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix66 = ooPlaceOuterProduct39.apply((org.la4j.vector.SparseVector) compressedVector60, (org.la4j.vector.SparseVector) compressedVector65);
        double double67 = compressedVector65.min();
        org.la4j.Matrix matrix68 = compressedVector65.toColumnMatrix();
        org.la4j.Matrix matrix69 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector34, (org.la4j.vector.SparseVector) compressedVector65);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = compressedVector34.getOrElse((int) (short) -1, (-2.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index '-1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(cCSMatrix13);
        org.junit.Assert.assertNotNull(vectorAccumulator14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix16);
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(vector38);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix47);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertNotNull(vectorAccumulator54);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix56);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(matrix69);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.la4j.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.SweepSolver sweepSolver1 = new org.la4j.linear.SweepSolver(matrix0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.la4j.Matrix matrix4 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray7 = matrix4.foldColumns(vectorAccumulator6);
        int[] intArray9 = new int[] { 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector10 = new org.la4j.vector.sparse.CompressedVector(30, 1, doubleArray7, intArray9);
        org.la4j.Matrix matrix11 = compressedVector10.toDiagonalMatrix();
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0]");
        org.junit.Assert.assertNotNull(matrix11);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix6 = org.la4j.matrix.RowMajorSparseMatrix.zero(10, (int) (byte) 1);
        java.text.NumberFormat numberFormat7 = null;
        java.lang.String str8 = rowMajorSparseMatrix6.toMatrixMarket(numberFormat7);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix13 = rowMajorSparseMatrix12.removeLastRow();
        double double17 = rowMajorSparseMatrix12.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int18 = rowMajorSparseMatrix12.cardinality();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation20 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation21 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray42 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray49 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray56 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray57 = new double[][] { doubleArray28, doubleArray35, doubleArray42, doubleArray49, doubleArray56 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix58 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray57);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation59 = matrixMatrixMatrixOperation21.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix58);
        org.la4j.Matrix matrix61 = basic2DMatrix58.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix65 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix66 = rowMajorSparseMatrix65.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction68 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator69 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction68);
        double double70 = matrix66.fold(matrixAccumulator69);
        double double71 = matrix66.manhattanNorm();
        matrixMatrixMatrixOperation20.ensureApplicableTo(matrix61, matrix66);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix76 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double80 = rowMajorSparseMatrix76.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix81 = rowMajorSparseMatrix76.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate82 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean83 = sparseMatrix81.is(advancedMatrixPredicate82);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator85 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double86 = sparseMatrix81.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator85);
        org.la4j.vector.functor.VectorProcedure vectorProcedure87 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator85);
        double[] doubleArray88 = matrix61.foldRows(vectorAccumulator85);
        double double89 = rowMajorSparseMatrix12.foldNonZeroInColumn((int) (short) 100, vectorAccumulator85);
        double[] doubleArray90 = rowMajorSparseMatrix6.foldRows(vectorAccumulator85);
        org.la4j.matrix.DenseMatrix denseMatrix91 = org.la4j.matrix.DenseMatrix.from1DArray((int) (short) 0, (int) 'a', doubleArray90);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix98 = rowMajorSparseMatrix1.insert((org.la4j.Matrix) denseMatrix91, 100, (int) (short) 100, (int) (short) -1, 5, 1, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Cannot have negative destination position: -1, 5");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix1);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "%%MatrixMarket matrix coordinate real general row-major\n10 1 0\n" + "'", str8, "%%MatrixMarket matrix coordinate real general row-major\n10 1 0\n");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix13);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation20);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation21);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(basic2DMatrix58);
        org.junit.Assert.assertNotNull(matrixMatrixOperation59);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrixAccumulator69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix76);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 1.0d + "'", double80 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix81);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(denseMatrix91);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction12 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix15 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction16 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean20 = cCSMatrix19.isRowMajor();
        org.la4j.Matrix matrix23 = cCSMatrix19.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator24 = cCSMatrix19.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix28 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix28.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix34 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double38 = rowMajorSparseMatrix34.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix39 = rowMajorSparseMatrix34.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct40 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean41 = sparseMatrix39.equals((java.lang.Object) ooPlaceOuterProduct40);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix28.hadamardProduct((org.la4j.Matrix) sparseMatrix39);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction16.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix19, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix28);
        org.la4j.Matrix matrix44 = ooPlaceMatricesSubtraction12.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix15, rowMajorSparseMatrix28);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition45 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix48 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double49 = cRSMatrix48.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix53 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix54 = rowMajorSparseMatrix53.removeLastRow();
        org.la4j.Matrix matrix55 = ooPlaceMatricesAddition45.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix48, rowMajorSparseMatrix53);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix58 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator59 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray60 = cCSMatrix58.foldRows(vectorAccumulator59);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix63 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.Matrix matrix64 = ooPlaceMatricesAddition45.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix58, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix63);
        double double65 = rowMajorSparseMatrix63.norm();
        org.la4j.Matrix matrix66 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix15, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix63);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix69 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix72 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean73 = cCSMatrix72.isRowMajor();
        org.la4j.Matrix matrix76 = cCSMatrix72.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator77 = cCSMatrix72.nonZeroColumnMajorIterator();
        double double80 = cCSMatrix72.get(0, (int) (byte) 1);
        org.la4j.Matrix matrix81 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix69, (org.la4j.matrix.SparseMatrix) cCSMatrix72);
        basic2DMatrix69.swapRows((int) (byte) 10, 5);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(basic2DMatrix15);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(matrix23);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator24);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix28);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix34);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.0d + "'", double38 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(cRSMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cCSMatrix58);
        org.junit.Assert.assertNotNull(vectorAccumulator59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(basic2DMatrix69);
        org.junit.Assert.assertNotNull(cCSMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator77);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(matrix81);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor(matrix8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor9 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        org.la4j.Matrix matrix10 = rawLUDecompositor9.self();
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator11 = matrix10.columnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator15 = cCSMatrix14.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix18 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean19 = cCSMatrix18.isRowMajor();
        org.la4j.Matrix matrix22 = cCSMatrix18.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator23 = cCSMatrix18.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator24 = columnMajorMatrixIterator15.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator23);
        org.la4j.iterator.MatrixIterator matrixIterator25 = columnMajorMatrixIterator11.orElseSubtract((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator23);
        org.la4j.iterator.MatrixIterator matrixIterator26 = null;
        org.la4j.iterator.MatrixIterator matrixIterator27 = columnMajorMatrixIterator23.orElseAdd(matrixIterator26);
        // The following exception was thrown during execution in test generation
        try {
            columnMajorMatrixIterator23.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: This will be supported in 0.6.0.");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator11);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator15);
        org.junit.Assert.assertNotNull(cCSMatrix18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator23);
        org.junit.Assert.assertNotNull(matrixIterator24);
        org.junit.Assert.assertNotNull(matrixIterator25);
        org.junit.Assert.assertNotNull(matrixIterator27);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.zero((int) (byte) 0, (int) (short) 1);
        java.text.NumberFormat numberFormat3 = null;
        java.lang.String str4 = cRSMatrix2.toMatrixMarket(numberFormat3);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "%%MatrixMarket matrix coordinate real general row-major\n0 1 0\n" + "'", str4, "%%MatrixMarket matrix coordinate real general row-major\n0 1 0\n");
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        double double9 = cCSMatrix2.getOrElse(10, (int) ' ', (double) 10);
        boolean boolean12 = cCSMatrix2.nonZeroAt(100, (int) (short) 1);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction3 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector4 = vector1.transform(vectorFunction3);
        org.la4j.Matrix matrix5 = vector1.toColumnMatrix();
        double double6 = matrix5.norm();
        org.la4j.Matrix matrix8 = matrix5.multiply((double) 52);
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertNotNull(vectorFunction3);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.1622776601683795d + "'", double6 == 3.1622776601683795d);
        org.junit.Assert.assertNotNull(matrix8);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.la4j.vector.SparseVector sparseVector2 = org.la4j.vector.SparseVector.zero(0, 52);
        org.la4j.Matrix matrix3 = sparseVector2.toColumnMatrix();
        org.la4j.Vector vector5 = matrix3.getRow((int) (short) -1);
        org.la4j.Vector vector6 = vector5.blank();
        org.la4j.Vector vector8 = vector5.add((double) 1);
        org.junit.Assert.assertNotNull(sparseVector2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertNotNull(vector8);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate5 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix8 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean9 = advancedMatrixPredicate5.test((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter10 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix11 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix3, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix8);
        org.la4j.Matrix matrix12 = cRSMatrix3.removeLastRow();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate5);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = null;
        rowMajorSparseMatrix14.eachNonZero(matrixProcedure16);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double24 = cCSMatrix21.get((int) (byte) 0, (int) (short) 1);
        double double25 = cCSMatrix21.min();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction26 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix29 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean30 = cCSMatrix29.isRowMajor();
        org.la4j.Matrix matrix33 = cCSMatrix29.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator34 = cCSMatrix29.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix38 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix40 = rowMajorSparseMatrix38.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double48 = rowMajorSparseMatrix44.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix49 = rowMajorSparseMatrix44.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct50 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean51 = sparseMatrix49.equals((java.lang.Object) ooPlaceOuterProduct50);
        org.la4j.Matrix matrix52 = rowMajorSparseMatrix38.hadamardProduct((org.la4j.Matrix) sparseMatrix49);
        org.la4j.Matrix matrix53 = ooPlaceMatricesSubtraction26.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix29, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix38);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator54 = cCSMatrix29.iterator();
        org.la4j.Matrix matrix55 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix21, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix29);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double63 = rowMajorSparseMatrix59.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.iterator.VectorIterator vectorIterator65 = rowMajorSparseMatrix59.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition66 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix71 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator72 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray73 = cCSMatrix71.foldRows(vectorAccumulator72);
        org.la4j.matrix.DenseMatrix denseMatrix74 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray73);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct75 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix78 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double79 = cRSMatrix78.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate80 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix83 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean84 = advancedMatrixPredicate80.test((org.la4j.Matrix) columnMajorSparseMatrix83);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter85 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix86 = ooPlaceMatrixHadamardProduct75.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix78, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix87 = ooPlaceMatricesAddition66.applySymmetric(denseMatrix74, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix83);
        org.la4j.Matrix matrix88 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix59, denseMatrix74);
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate89 = org.la4j.Matrices.NEGATIVE_MATRIX;
        boolean boolean90 = denseMatrix74.is(matrixPredicate89);
        org.la4j.linear.GaussianSolver gaussianSolver91 = new org.la4j.linear.GaussianSolver((org.la4j.Matrix) denseMatrix74);
        int int92 = gaussianSolver91.equations();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertNotNull(cCSMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator34);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix38);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.0d + "'", double63 == 1.0d);
        org.junit.Assert.assertNotNull(vectorIterator65);
        org.junit.Assert.assertNotNull(cCSMatrix71);
        org.junit.Assert.assertNotNull(vectorAccumulator72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix74);
        org.junit.Assert.assertNotNull(cRSMatrix78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate80);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(matrixPredicate89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        int int3 = cCSMatrix2.cardinality();
        org.la4j.Matrix matrix5 = cCSMatrix2.subtract((double) 0.0f);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix3 = org.la4j.Matrix.random((int) '4', (int) (short) -1, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct0 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator4 = columnMajorSparseMatrix3.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double13 = rowMajorSparseMatrix9.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix14 = rowMajorSparseMatrix9.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate15 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean16 = sparseMatrix14.is(advancedMatrixPredicate15);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double19 = sparseMatrix14.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator18);
        org.la4j.vector.functor.VectorProcedure vectorProcedure20 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator18);
        columnMajorSparseMatrix3.eachNonZeroInRow((-1), vectorProcedure20);
        boolean boolean22 = columnMajorSparseMatrix3.isRowMajor();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication23 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix26 = ooPlaceMatrixByItsTransposeMultiplication23.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix25);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation27 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray48 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray55 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray62 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray63 = new double[][] { doubleArray34, doubleArray41, doubleArray48, doubleArray55, doubleArray62 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix64 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray63);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation65 = matrixMatrixMatrixOperation27.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        java.util.Spliterator<java.lang.Double> doubleSpliterator66 = basic2DMatrix64.spliterator();
        basic2DMatrix64.setAll((double) (byte) 10);
        ooPlaceMatrixByItsTransposeMultiplication23.ensureApplicableTo((org.la4j.Matrix) basic2DMatrix64);
        org.la4j.Matrix matrix70 = ooPlaceKroneckerProduct0.apply(columnMajorSparseMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix64);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix73 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double76 = cCSMatrix73.get((int) (byte) 0, (int) (short) 1);
        double double77 = cCSMatrix73.min();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication78 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix81 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.Matrix matrix82 = ooPlaceMatrixByItsTransposeMultiplication78.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        org.la4j.Matrix matrix83 = ooPlaceKroneckerProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix73, (org.la4j.matrix.DenseMatrix) basic2DMatrix81);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix88 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator89 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray90 = cCSMatrix88.foldRows(vectorAccumulator89);
        int[] intArray93 = new int[] { (short) 10, (short) 100 };
        org.la4j.vector.sparse.CompressedVector compressedVector94 = new org.la4j.vector.sparse.CompressedVector((int) (short) 1, 1, doubleArray90, intArray93);
        int[] intArray97 = new int[] { 6, 5 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix98 = cCSMatrix73.select(intArray93, intArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix14);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation27);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(basic2DMatrix64);
        org.junit.Assert.assertNotNull(matrixMatrixOperation65);
        org.junit.Assert.assertNotNull(doubleSpliterator66);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(cCSMatrix73);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.0d + "'", double76 == 0.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + (-1.0d) + "'", double77 == (-1.0d));
        org.junit.Assert.assertNotNull(basic2DMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(cCSMatrix88);
        org.junit.Assert.assertNotNull(vectorAccumulator89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10, 100]");
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[6, 5]");
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.unit(0, (int) (byte) 100);
        org.junit.Assert.assertNotNull(basic1DMatrix2);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double33 = denseMatrix32.min();
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix29, denseMatrix32);
        java.util.Random random36 = null;
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.randomSymmetric(0, random36);
        double[][] doubleArray38 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray38);
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray38);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = denseMatrix40.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix42 = ooPlaceMatricesSubtraction0.apply(denseMatrix37, denseMatrix40);
        org.la4j.linear.JacobiSolver jacobiSolver43 = new org.la4j.linear.JacobiSolver(matrix42);
        double[][] doubleArray44 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray44);
        org.la4j.matrix.DenseMatrix denseMatrix46 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray44);
        org.la4j.Matrix matrix47 = org.la4j.Matrix.from2DArray(doubleArray44);
        boolean boolean48 = jacobiSolver43.applicableTo(matrix47);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(denseMatrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct31 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix36 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator37 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray38 = cCSMatrix36.foldRows(vectorAccumulator37);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray38);
        org.la4j.vector.dense.BasicVector basicVector40 = new org.la4j.vector.dense.BasicVector(doubleArray38);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator46 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray47 = cCSMatrix45.foldRows(vectorAccumulator46);
        org.la4j.matrix.DenseMatrix denseMatrix48 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray47);
        org.la4j.vector.dense.BasicVector basicVector49 = new org.la4j.vector.dense.BasicVector(doubleArray47);
        ooPlaceOuterProduct31.ensureApplicableTo((org.la4j.Vector) basicVector40, (org.la4j.Vector) basicVector49);
        org.la4j.vector.sparse.CompressedVector compressedVector52 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector52.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector57 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix58 = ooPlaceOuterProduct31.apply((org.la4j.vector.SparseVector) compressedVector52, (org.la4j.vector.SparseVector) compressedVector57);
        double double59 = compressedVector57.min();
        org.la4j.iterator.VectorIterator vectorIterator60 = compressedVector57.iterator();
        org.la4j.Matrix matrix61 = basicVector9.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct29, (org.la4j.Vector) compressedVector57);
        org.la4j.Vector vector63 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction65 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector66 = vector63.transform(vectorFunction65);
        double double67 = vector63.product();
        org.la4j.vector.DenseVector denseVector68 = vector63.toDenseVector();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct69 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix74 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator75 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray76 = cCSMatrix74.foldRows(vectorAccumulator75);
        org.la4j.matrix.DenseMatrix denseMatrix77 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray76);
        org.la4j.vector.dense.BasicVector basicVector78 = new org.la4j.vector.dense.BasicVector(doubleArray76);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix83 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator84 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray85 = cCSMatrix83.foldRows(vectorAccumulator84);
        org.la4j.matrix.DenseMatrix denseMatrix86 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray85);
        org.la4j.vector.dense.BasicVector basicVector87 = new org.la4j.vector.dense.BasicVector(doubleArray85);
        ooPlaceOuterProduct69.ensureApplicableTo((org.la4j.Vector) basicVector78, (org.la4j.Vector) basicVector87);
        org.la4j.vector.sparse.CompressedVector compressedVector90 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector90.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector95 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix96 = ooPlaceOuterProduct69.apply((org.la4j.vector.SparseVector) compressedVector90, (org.la4j.vector.SparseVector) compressedVector95);
        double double97 = compressedVector95.min();
        org.la4j.Matrix matrix98 = compressedVector95.toColumnMatrix();
        org.la4j.Matrix matrix99 = ooPlaceOuterProduct29.apply(denseVector68, (org.la4j.vector.SparseVector) compressedVector95);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cCSMatrix36);
        org.junit.Assert.assertNotNull(vectorAccumulator37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertNotNull(vectorAccumulator46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix48);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(vectorIterator60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(vector63);
        org.junit.Assert.assertNotNull(vectorFunction65);
        org.junit.Assert.assertNotNull(vector66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0d + "'", double67 == 1.0d);
        org.junit.Assert.assertNotNull(denseVector68);
        org.junit.Assert.assertNotNull(cCSMatrix74);
        org.junit.Assert.assertNotNull(vectorAccumulator75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix77);
        org.junit.Assert.assertNotNull(cCSMatrix83);
        org.junit.Assert.assertNotNull(vectorAccumulator84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix86);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d);
        org.junit.Assert.assertNotNull(matrix98);
        org.junit.Assert.assertNotNull(matrix99);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.util.Random random2 = null;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric((int) (byte) 0, (double) (-1), random2);
        byte[] byteArray4 = columnMajorSparseMatrix3.toBinary();
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.la4j.vector.sparse.CompressedVector compressedVector1 = new org.la4j.vector.sparse.CompressedVector(0);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double3 = cCSMatrix2.max();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication4 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix7 = ooPlaceMatrixByItsTransposeMultiplication4.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix6);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction8 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix11 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction12 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix15 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean16 = cCSMatrix15.isRowMajor();
        org.la4j.Matrix matrix19 = cCSMatrix15.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator20 = cCSMatrix15.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix24.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix30 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double34 = rowMajorSparseMatrix30.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix35 = rowMajorSparseMatrix30.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct36 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean37 = sparseMatrix35.equals((java.lang.Object) ooPlaceOuterProduct36);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix24.hadamardProduct((org.la4j.Matrix) sparseMatrix35);
        org.la4j.Matrix matrix39 = ooPlaceMatricesSubtraction12.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix15, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix24);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction8.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix11, rowMajorSparseMatrix24);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor41 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix24);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix44 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator45 = cRSMatrix44.nonZeroIterator();
        org.la4j.Vector vector47 = cRSMatrix44.getColumn(100);
        boolean boolean50 = cRSMatrix44.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor51 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix44);
        double double52 = cRSMatrix44.infinityNorm();
        boolean boolean53 = singularValueDecompositor41.applicableTo((org.la4j.Matrix) cRSMatrix44);
        org.la4j.Matrix matrix54 = ooPlaceMatrixByItsTransposeMultiplication4.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix44);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct55 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix58 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator59 = cCSMatrix58.iterator();
        org.la4j.Vector vector62 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction64 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector65 = vector62.transform(vectorFunction64);
        org.la4j.Matrix matrix66 = cCSMatrix58.transformRow(0, vectorFunction64);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction67 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix72 = rowMajorSparseMatrix71.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix74 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix75 = ooPlaceMatricesSubtraction67.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix71, denseMatrix74);
        org.la4j.Matrix matrix76 = ooPlaceMatrixHadamardProduct55.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix58, denseMatrix74);
        org.la4j.Matrix matrix77 = ooPlaceMatrixByItsTransposeMultiplication4.apply(denseMatrix74);
        org.la4j.Matrix matrix78 = cCSMatrix2.apply((org.la4j.operation.MatrixOperation<org.la4j.Matrix>) ooPlaceMatrixByItsTransposeMultiplication4);
        org.la4j.matrix.DenseMatrix denseMatrix81 = org.la4j.matrix.DenseMatrix.zero((int) '4', (int) '#');
        org.la4j.Matrix matrix82 = ooPlaceMatrixByItsTransposeMultiplication4.apply(denseMatrix81);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(basic2DMatrix11);
        org.junit.Assert.assertNotNull(cCSMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(cRSMatrix44);
        org.junit.Assert.assertNotNull(matrixIterator45);
        org.junit.Assert.assertNotNull(vector47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(cCSMatrix58);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator59);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(vectorFunction64);
        org.junit.Assert.assertNotNull(vector65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(denseMatrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(denseMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (short) 1, 10.0d);
        org.la4j.Matrix matrix5 = basic2DMatrix2.copyOfShape(0, (int) (byte) 100);
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(matrix5);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix6 = null;
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct7 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix10 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str11 = basic2DMatrix10.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition12 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix15 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double16 = cRSMatrix15.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.Matrix matrix22 = ooPlaceMatricesAddition12.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix15, rowMajorSparseMatrix20);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix27 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix28 = ooPlaceMatricesAddition12.apply(columnMajorSparseMatrix25, denseMatrix27);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix31 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray32 = columnMajorSparseMatrix31.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation33 = ooPlaceMatricesAddition12.partiallyApply(columnMajorSparseMatrix31);
        org.la4j.Matrix matrix34 = ooPlaceMatrixHadamardProduct7.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix10, columnMajorSparseMatrix31);
        org.la4j.Matrix matrix36 = basic2DMatrix10.add(1.0E100d);
        org.la4j.Matrix matrix39 = basic2DMatrix10.copyOfShape((int) (byte) 0, (int) (byte) 10);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix42 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator43 = cRSMatrix42.nonZeroIterator();
        org.la4j.matrix.functor.MatrixFunction matrixFunction47 = org.la4j.Matrices.asMulFunction((double) 1);
        cRSMatrix42.updateAt((int) (short) 1, (int) (byte) 100, matrixFunction47);
        basic2DMatrix10.update(matrixFunction47);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix50 = inPlaceCopyMatrixToMatrix0.apply(rowMajorSparseMatrix6, (org.la4j.matrix.DenseMatrix) basic2DMatrix10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(basic2DMatrix10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str11, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(denseMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(cRSMatrix42);
        org.junit.Assert.assertNotNull(matrixIterator43);
        org.junit.Assert.assertNotNull(matrixFunction47);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.constant((int) (short) -1, (int) '#', (double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        java.util.Random random2 = null;
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.randomSymmetric((int) (byte) 0, (double) (byte) 10, random2);
        org.junit.Assert.assertNotNull(cCSMatrix3);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator3 = cCSMatrix2.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean7 = cCSMatrix6.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix6.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator11 = cCSMatrix6.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator12 = columnMajorMatrixIterator3.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator11);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator16 = columnMajorSparseMatrix15.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator17 = columnMajorMatrixIterator3.andAlsoMultiply(matrixIterator16);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix20 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double21 = cRSMatrix20.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator22 = cRSMatrix20.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator26 = columnMajorSparseMatrix25.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator27 = rowMajorMatrixIterator22.orElseSubtract(matrixIterator26);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix30 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator31 = cCSMatrix30.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix34 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean35 = cCSMatrix34.isRowMajor();
        org.la4j.Matrix matrix38 = cCSMatrix34.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator39 = cCSMatrix34.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator40 = columnMajorMatrixIterator31.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator39);
        org.la4j.iterator.MatrixIterator matrixIterator41 = matrixIterator27.andAlsoMultiply(matrixIterator40);
        int int42 = matrixIterator27.columnIndex();
        org.la4j.iterator.MatrixIterator matrixIterator43 = columnMajorMatrixIterator3.orElseSubtract(matrixIterator27);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator3);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator11);
        org.junit.Assert.assertNotNull(matrixIterator12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrixIterator16);
        org.junit.Assert.assertNotNull(matrixIterator17);
        org.junit.Assert.assertNotNull(cRSMatrix20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrixIterator26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(cCSMatrix30);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator31);
        org.junit.Assert.assertNotNull(cCSMatrix34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator39);
        org.junit.Assert.assertNotNull(matrixIterator40);
        org.junit.Assert.assertNotNull(matrixIterator41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(matrixIterator43);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        java.util.Random random12 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix13 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random12);
        org.la4j.Matrix matrix14 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix13);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix17 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator18 = cRSMatrix17.nonZeroIterator();
        org.la4j.Vector vector20 = cRSMatrix17.getColumn(100);
        boolean boolean23 = cRSMatrix17.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor24 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix17);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition25 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix28 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double29 = cRSMatrix28.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix33.removeLastRow();
        org.la4j.Matrix matrix35 = ooPlaceMatricesAddition25.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix28, rowMajorSparseMatrix33);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition36 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix39 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double40 = cRSMatrix39.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        org.la4j.Matrix matrix46 = ooPlaceMatricesAddition36.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix39, rowMajorSparseMatrix44);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix49 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix51 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix52 = ooPlaceMatricesAddition36.apply(columnMajorSparseMatrix49, denseMatrix51);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix56.removeLastRow();
        double double61 = rowMajorSparseMatrix56.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector62 = rowMajorSparseMatrix56.toRowVector();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition25.apply(denseMatrix51, rowMajorSparseMatrix56);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix66 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double69 = cCSMatrix66.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction71 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix72 = cCSMatrix66.transformRow(10, vectorFunction71);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix75 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator76 = cRSMatrix75.nonZeroIterator();
        org.la4j.Vector vector78 = cRSMatrix75.getColumn(100);
        boolean boolean81 = cRSMatrix75.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor82 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix75);
        org.la4j.Matrix matrix83 = ooPlaceMatricesAddition25.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix66, (org.la4j.matrix.SparseMatrix) cRSMatrix75);
        org.la4j.Matrix matrix85 = cCSMatrix66.copyOfRows(0);
        org.la4j.Matrix matrix86 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix17, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix66);
        org.la4j.Matrix matrix87 = cRSMatrix17.transpose();
        // The following exception was thrown during execution in test generation
        try {
            double double89 = cRSMatrix17.minInRow((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(cRSMatrix17);
        org.junit.Assert.assertNotNull(matrixIterator18);
        org.junit.Assert.assertNotNull(vector20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cRSMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(cRSMatrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(denseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cCSMatrix66);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(cRSMatrix75);
        org.junit.Assert.assertNotNull(matrixIterator76);
        org.junit.Assert.assertNotNull(vector78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
        org.junit.Assert.assertNotNull(matrix87);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor33 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix16);
        org.la4j.Matrix[] matrixArray34 = singularValueDecompositor33.decompose();
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrixArray34);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        java.util.Random random12 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix13 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random12);
        org.la4j.Matrix matrix14 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix13);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix17 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator18 = cRSMatrix17.nonZeroIterator();
        org.la4j.Vector vector20 = cRSMatrix17.getColumn(100);
        boolean boolean23 = cRSMatrix17.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor24 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix17);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition25 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix28 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double29 = cRSMatrix28.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix34 = rowMajorSparseMatrix33.removeLastRow();
        org.la4j.Matrix matrix35 = ooPlaceMatricesAddition25.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix28, rowMajorSparseMatrix33);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition36 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix39 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double40 = cRSMatrix39.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        org.la4j.Matrix matrix46 = ooPlaceMatricesAddition36.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix39, rowMajorSparseMatrix44);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix49 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix51 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix52 = ooPlaceMatricesAddition36.apply(columnMajorSparseMatrix49, denseMatrix51);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix56.removeLastRow();
        double double61 = rowMajorSparseMatrix56.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector62 = rowMajorSparseMatrix56.toRowVector();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition25.apply(denseMatrix51, rowMajorSparseMatrix56);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix66 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double69 = cCSMatrix66.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction71 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix72 = cCSMatrix66.transformRow(10, vectorFunction71);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix75 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator76 = cRSMatrix75.nonZeroIterator();
        org.la4j.Vector vector78 = cRSMatrix75.getColumn(100);
        boolean boolean81 = cRSMatrix75.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor82 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix75);
        org.la4j.Matrix matrix83 = ooPlaceMatricesAddition25.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix66, (org.la4j.matrix.SparseMatrix) cRSMatrix75);
        org.la4j.Matrix matrix85 = cCSMatrix66.copyOfRows(0);
        org.la4j.Matrix matrix86 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix17, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix66);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector88 = cRSMatrix17.getRow((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 98");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(cRSMatrix17);
        org.junit.Assert.assertNotNull(matrixIterator18);
        org.junit.Assert.assertNotNull(vector20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cRSMatrix28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(cRSMatrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(denseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 10.0d + "'", double61 == 10.0d);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(cCSMatrix66);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(cRSMatrix75);
        org.junit.Assert.assertNotNull(matrixIterator76);
        org.junit.Assert.assertNotNull(vector78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix85);
        org.junit.Assert.assertNotNull(matrix86);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str5 = basic2DMatrix4.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition6 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix9 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double10 = cRSMatrix9.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition6.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix9, rowMajorSparseMatrix14);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix21 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix22 = ooPlaceMatricesAddition6.apply(columnMajorSparseMatrix19, denseMatrix21);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray26 = columnMajorSparseMatrix25.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation27 = ooPlaceMatricesAddition6.partiallyApply(columnMajorSparseMatrix25);
        org.la4j.Matrix matrix28 = ooPlaceMatrixHadamardProduct1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, columnMajorSparseMatrix25);
        org.la4j.Vector vector30 = columnMajorSparseMatrix25.getRow((int) (short) 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation31 = ooPlaceMatrixHadamardProduct0.partiallyApply(columnMajorSparseMatrix25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix35 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix36 = rowMajorSparseMatrix35.removeLastRow();
        double double40 = rowMajorSparseMatrix35.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int41 = rowMajorSparseMatrix35.cardinality();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation42 = ooPlaceMatrixHadamardProduct0.partiallyApply(rowMajorSparseMatrix35);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct43 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix46 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator47 = cRSMatrix46.nonZeroIterator();
        org.la4j.Vector vector49 = cRSMatrix46.getColumn(100);
        boolean boolean52 = cRSMatrix46.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor53 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix46);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix57 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix57.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure59 = null;
        rowMajorSparseMatrix57.eachNonZero(matrixProcedure59);
        org.la4j.Matrix matrix61 = ooPlaceMatrixHadamardProduct43.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix46, rowMajorSparseMatrix57);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix64 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double67 = cCSMatrix64.get((int) (byte) 0, (int) (short) 1);
        double double68 = cCSMatrix64.min();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction69 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix72 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean73 = cCSMatrix72.isRowMajor();
        org.la4j.Matrix matrix76 = cCSMatrix72.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator77 = cCSMatrix72.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix81 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix83 = rowMajorSparseMatrix81.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix87 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double91 = rowMajorSparseMatrix87.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix92 = rowMajorSparseMatrix87.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct93 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean94 = sparseMatrix92.equals((java.lang.Object) ooPlaceOuterProduct93);
        org.la4j.Matrix matrix95 = rowMajorSparseMatrix81.hadamardProduct((org.la4j.Matrix) sparseMatrix92);
        org.la4j.Matrix matrix96 = ooPlaceMatricesSubtraction69.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix72, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix81);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator97 = cCSMatrix72.iterator();
        org.la4j.Matrix matrix98 = ooPlaceMatrixHadamardProduct43.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix64, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix72);
        org.la4j.Matrix matrix99 = matrixMatrixOperation42.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix64);
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str5, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(denseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(vector30);
        org.junit.Assert.assertNotNull(matrixMatrixOperation31);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(matrixMatrixOperation42);
        org.junit.Assert.assertNotNull(cRSMatrix46);
        org.junit.Assert.assertNotNull(matrixIterator47);
        org.junit.Assert.assertNotNull(vector49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix57);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(cCSMatrix64);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.0d) + "'", double68 == (-1.0d));
        org.junit.Assert.assertNotNull(cCSMatrix72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator77);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix81);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix87);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 1.0d + "'", double91 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(matrix95);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator97);
        org.junit.Assert.assertNotNull(matrix98);
        org.junit.Assert.assertNotNull(matrix99);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray35);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix38 = org.la4j.matrix.dense.Basic1DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.linear.LeastSquaresSolver leastSquaresSolver40 = new org.la4j.linear.LeastSquaresSolver((org.la4j.Matrix) denseMatrix39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given coefficient matrix can not be used with this solver.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(basic1DMatrix38);
        org.junit.Assert.assertNotNull(denseMatrix39);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.identity((int) 'a');
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication2 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray9 = cCSMatrix7.foldRows(vectorAccumulator8);
        org.la4j.matrix.DenseMatrix denseMatrix10 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray9);
        org.la4j.vector.dense.BasicVector basicVector12 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector13 = ooPlaceMatrixByVectorMultiplication2.apply(denseMatrix10, (org.la4j.vector.DenseVector) basicVector12);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation14 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray42 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray49 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray50 = new double[][] { doubleArray21, doubleArray28, doubleArray35, doubleArray42, doubleArray49 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix51 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray50);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation52 = matrixMatrixMatrixOperation14.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix51);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation53 = ooPlaceMatrixByVectorMultiplication2.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix51);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.zero((int) (byte) 0, (int) (short) 1);
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator57 = cRSMatrix56.nonZeroRowMajorIterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct58 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random60 = null;
        org.la4j.vector.DenseVector denseVector61 = org.la4j.vector.DenseVector.random(0, random60);
        java.util.Random random63 = null;
        org.la4j.vector.DenseVector denseVector64 = org.la4j.vector.DenseVector.random(0, random63);
        org.la4j.Matrix matrix65 = ooPlaceOuterProduct58.apply(denseVector61, denseVector64);
        java.text.NumberFormat numberFormat66 = null;
        java.lang.String str67 = denseVector64.toCSV(numberFormat66);
        org.la4j.Vector vector68 = ooPlaceMatrixByVectorMultiplication2.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56, denseVector64);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix72 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix73 = rowMajorSparseMatrix72.removeLastRow();
        double double77 = rowMajorSparseMatrix72.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector78 = rowMajorSparseMatrix72.toRowVector();
        org.la4j.Vector vector80 = vector78.copyOfLength((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector81 = rowMajorSparseMatrix1.apply((org.la4j.operation.MatrixVectorOperation<org.la4j.Vector>) ooPlaceMatrixByVectorMultiplication2, vector80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 10 does not equal to 97.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix1);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix10);
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(basic2DMatrix51);
        org.junit.Assert.assertNotNull(matrixMatrixOperation52);
        org.junit.Assert.assertNotNull(vectorVectorOperation53);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator57);
        org.junit.Assert.assertNotNull(denseVector61);
        org.junit.Assert.assertNotNull(denseVector64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(vector68);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10.0d + "'", double77 == 10.0d);
        org.junit.Assert.assertNotNull(vector78);
        org.junit.Assert.assertNotNull(vector80);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.la4j.matrix.SparseMatrix sparseMatrix2 = org.la4j.matrix.SparseMatrix.zero(0, (int) (short) 1);
        org.junit.Assert.assertNotNull(sparseMatrix2);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = null;
        rowMajorSparseMatrix14.eachNonZero(matrixProcedure16);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix14);
        double double19 = cRSMatrix3.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator20 = cRSMatrix3.nonZeroRowMajorIterator();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator20);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double44 = cCSMatrix41.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction46 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix47 = cCSMatrix41.transformRow(10, vectorFunction46);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix50 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator51 = cRSMatrix50.nonZeroIterator();
        org.la4j.Vector vector53 = cRSMatrix50.getColumn(100);
        boolean boolean56 = cRSMatrix50.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor57 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix50);
        org.la4j.Matrix matrix58 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix41, (org.la4j.matrix.SparseMatrix) cRSMatrix50);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix67 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix72 = rowMajorSparseMatrix71.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction74 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator75 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction74);
        double double76 = matrix72.fold(matrixAccumulator75);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure77 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator75);
        cCSMatrix67.eachNonZero(matrixProcedure77);
        org.la4j.Matrix matrix79 = ooPlaceMatricesAddition0.applySymmetric(rowMajorSparseMatrix62, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix67);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector81 = cCSMatrix67.getColumn((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(cRSMatrix50);
        org.junit.Assert.assertNotNull(matrixIterator51);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrixAccumulator75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure77);
        org.junit.Assert.assertNotNull(matrix79);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        org.la4j.vector.DenseVector denseVector2 = org.la4j.vector.DenseVector.unit((int) 'a');
        org.la4j.vector.SparseVector sparseVector4 = org.la4j.vector.SparseVector.zero((int) '4');
        org.la4j.Vector vector6 = sparseVector4.multiply((double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceVectorHadamardProduct0.ensureApplicableTo((org.la4j.Vector) denseVector2, (org.la4j.Vector) sparseVector4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vectors should have the same length: 97 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(denseVector2);
        org.junit.Assert.assertNotNull(sparseVector4);
        org.junit.Assert.assertNotNull(vector6);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.unit(0);
        java.text.NumberFormat numberFormat2 = null;
        java.lang.String str3 = denseVector1.toMatrixMarket(numberFormat2);
        org.la4j.iterator.VectorIterator vectorIterator4 = denseVector1.iterator();
        double[] doubleArray5 = denseVector1.toArray();
        org.junit.Assert.assertNotNull(denseVector1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "%%MatrixMarket vector array real\n0\n" + "'", str3, "%%MatrixMarket vector array real\n0\n");
        org.junit.Assert.assertNotNull(vectorIterator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction3 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector4 = vector1.transform(vectorFunction3);
        org.la4j.Matrix matrix5 = vector1.toColumnMatrix();
        double double6 = matrix5.norm();
        org.la4j.Matrix matrix7 = matrix5.rotate();
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertNotNull(vectorFunction3);
        org.junit.Assert.assertNotNull(vector4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.1622776601683795d + "'", double6 == 3.1622776601683795d);
        org.junit.Assert.assertNotNull(matrix7);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double16 = denseMatrix15.min();
        double double17 = denseMatrix15.sum();
        org.la4j.Matrix matrix18 = ooPlaceMatricesSubtraction0.apply(columnMajorSparseMatrix11, denseMatrix15);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator22 = cRSMatrix21.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation23 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate24 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix27 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean28 = advancedMatrixPredicate24.test((org.la4j.Matrix) columnMajorSparseMatrix27);
        org.la4j.vector.functor.VectorFunction vectorFunction30 = null;
        org.la4j.Matrix matrix31 = columnMajorSparseMatrix27.transformRow(0, vectorFunction30);
        org.la4j.iterator.VectorIterator vectorIterator33 = columnMajorSparseMatrix27.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.Matrix matrix34 = matrixMatrixOperation23.apply(columnMajorSparseMatrix27);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix39 = matrix34.slice((-1), (int) (short) 1, (int) (byte) -1, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad row argument -1; out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertNotNull(matrixIterator22);
        org.junit.Assert.assertNotNull(matrixMatrixOperation23);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate24);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(vectorIterator33);
        org.junit.Assert.assertNotNull(matrix34);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        org.la4j.Matrix matrix7 = matrix6.removeFirstColumn();
        org.la4j.Matrix matrix9 = matrix7.add(9.0d);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(matrix9);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        double[] doubleArray10 = basicVector9.toArray();
        org.la4j.Vector vector12 = basicVector9.blankOfLength((int) 'a');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction13 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean17 = cCSMatrix16.isRowMajor();
        org.la4j.Matrix matrix20 = cCSMatrix16.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator21 = cCSMatrix16.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix25.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double35 = rowMajorSparseMatrix31.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix36 = rowMajorSparseMatrix31.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean38 = sparseMatrix36.equals((java.lang.Object) ooPlaceOuterProduct37);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix25.hadamardProduct((org.la4j.Matrix) sparseMatrix36);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction13.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix16, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        double double49 = rowMajorSparseMatrix44.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int50 = rowMajorSparseMatrix44.cardinality();
        org.la4j.Vector vector52 = rowMajorSparseMatrix44.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation53 = ooPlaceMatricesSubtraction13.partiallyApply(rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator57 = cRSMatrix56.nonZeroIterator();
        org.la4j.Vector vector59 = cRSMatrix56.getColumn(100);
        boolean boolean62 = cRSMatrix56.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor63 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix56);
        org.la4j.Matrix matrix64 = rawLUDecompositor63.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction13.ensureApplicableTo(matrix64, (org.la4j.Matrix) cRSMatrix67);
        org.la4j.Vector vector69 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector9, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix67);
        org.la4j.vector.sparse.CompressedVector compressedVector71 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double72 = compressedVector71.euclideanNorm();
        org.la4j.Vector vector74 = compressedVector71.blankOfLength(52);
        org.la4j.iterator.VectorIterator vectorIterator75 = vector74.iterator();
        org.la4j.vector.functor.VectorPredicate vectorPredicate76 = org.la4j.Vectors.NEGATIVE_VECTOR;
        boolean boolean77 = vector74.is(vectorPredicate76);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix80 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double81 = cRSMatrix80.min();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix82 = cRSMatrix80.toColumnMajorSparseMatrix();
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceVectorByMatrixMultiplication0.ensureApplicableTo(vector74, (org.la4j.Matrix) columnMajorSparseMatrix82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of rows in the given matrix: 52 does not equal to 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(matrixMatrixOperation53);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(matrixIterator57);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 0.0d + "'", double72 == 0.0d);
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertNotNull(vectorIterator75);
        org.junit.Assert.assertNotNull(vectorPredicate76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(cRSMatrix80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix82);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        double[] doubleArray11 = basicVector10.toArray();
        int[] intArray17 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector18 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray11, intArray17);
        org.la4j.vector.sparse.CompressedVector compressedVector19 = org.la4j.vector.sparse.CompressedVector.fromArray(doubleArray11);
        org.la4j.Matrix matrix20 = compressedVector19.toRowMatrix();
        org.la4j.Matrix matrix21 = compressedVector19.toRowMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean27 = cCSMatrix24.nonZeroAt((int) ' ', (int) '#');
        org.la4j.Vector vector29 = cCSMatrix24.getRow(1);
        org.la4j.Vector vector30 = vector29.copy();
        org.la4j.Vector vector31 = compressedVector19.add(vector29);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertNotNull(compressedVector19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(vector29);
        org.junit.Assert.assertNotNull(vector30);
        org.junit.Assert.assertNotNull(vector31);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory81 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix82 = basic2DMatrix77.to(basic1DMatrixMatrixFactory81);
        java.lang.Class<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixClass83 = basic1DMatrixMatrixFactory81.outputClass;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix86 = basic1DMatrixMatrixFactory81.apply((int) (byte) 0, 10);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory81);
        org.junit.Assert.assertNotNull(basic1DMatrix82);
        org.junit.Assert.assertNotNull(basic1DMatrixClass83);
        org.junit.Assert.assertNotNull(basic1DMatrix86);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 100, 100, (int) (byte) 10);
        java.util.Iterator<java.lang.Integer> intItor4 = cCSMatrix3.iteratorOrNonZeroColumns();
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(intItor4);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        double double8 = cCSMatrix3.minInColumn(0);
        double double10 = cCSMatrix3.minInColumn((int) (short) 1);
        cCSMatrix3.setAll(Double.POSITIVE_INFINITY);
        org.la4j.iterator.VectorIterator vectorIterator14 = cCSMatrix3.nonZeroIteratorOfColumn((int) ' ');
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-1.0d) + "'", double10 == (-1.0d));
        org.junit.Assert.assertNotNull(vectorIterator14);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix43 = rowMajorSparseMatrix42.removeLastRow();
        double double47 = rowMajorSparseMatrix42.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector48 = rowMajorSparseMatrix42.toRowVector();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix52 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix52.removeLastRow();
        double double57 = rowMajorSparseMatrix52.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector58 = rowMajorSparseMatrix52.toRowVector();
        org.la4j.Matrix matrix59 = matrixMatrixMatrixOperation0.apply(rowMajorSparseMatrix42, rowMajorSparseMatrix52);
        java.text.NumberFormat numberFormat60 = null;
        java.lang.String str61 = rowMajorSparseMatrix42.toMatrixMarket(numberFormat60);
        boolean boolean62 = rowMajorSparseMatrix42.isRowMajor();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(vector48);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(vector58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n" + "'", str61, "%%MatrixMarket matrix coordinate real general row-major\n1 35 0\n");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray35);
        org.la4j.matrix.SparseMatrix sparseMatrix38 = org.la4j.matrix.SparseMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix39 = org.la4j.matrix.sparse.CCSMatrix.from2DArray(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector41 = cCSMatrix39.getColumn(6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(sparseMatrix38);
        org.junit.Assert.assertNotNull(cCSMatrix39);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix5 = rowMajorSparseMatrix2.sliceBottomRight((int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad row argument 32; out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = cRSMatrix2.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory12 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix13 = cRSMatrix2.to(basic1DMatrixMatrixFactory12);
        org.la4j.linear.SquareRootSolver squareRootSolver14 = new org.la4j.linear.SquareRootSolver((org.la4j.Matrix) basic1DMatrix13);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition15 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix18 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double19 = cRSMatrix18.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix24 = rowMajorSparseMatrix23.removeLastRow();
        org.la4j.Matrix matrix25 = ooPlaceMatricesAddition15.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix18, rowMajorSparseMatrix23);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition26 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double30 = cRSMatrix29.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix34 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix35 = rowMajorSparseMatrix34.removeLastRow();
        org.la4j.Matrix matrix36 = ooPlaceMatricesAddition26.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix29, rowMajorSparseMatrix34);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix39 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix42 = ooPlaceMatricesAddition26.apply(columnMajorSparseMatrix39, denseMatrix41);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix47 = rowMajorSparseMatrix46.removeLastRow();
        double double51 = rowMajorSparseMatrix46.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector52 = rowMajorSparseMatrix46.toRowVector();
        org.la4j.Matrix matrix53 = ooPlaceMatricesAddition15.apply(denseMatrix41, rowMajorSparseMatrix46);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix59 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix63 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix63.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction66 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator67 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction66);
        double double68 = matrix64.fold(matrixAccumulator67);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure69 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator67);
        cCSMatrix59.eachNonZero(matrixProcedure69);
        org.la4j.Matrix matrix71 = ooPlaceMatricesAddition15.applySymmetric(rowMajorSparseMatrix56, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix59);
        boolean boolean72 = squareRootSolver14.applicableTo((org.la4j.Matrix) cCSMatrix59);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor73 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) cCSMatrix59);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator74 = cCSMatrix59.columnMajorIterator();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory12);
        org.junit.Assert.assertNotNull(basic1DMatrix13);
        org.junit.Assert.assertNotNull(cRSMatrix18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix39);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrixAccumulator67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-1.0d) + "'", double68 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure69);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator74);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator1 = org.la4j.Matrices.asProductAccumulator(0.0d);
        org.junit.Assert.assertNotNull(matrixAccumulator1);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        double[] doubleArray10 = basicVector9.toArray();
        org.la4j.Vector vector12 = basicVector9.blankOfLength((int) 'a');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction13 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean17 = cCSMatrix16.isRowMajor();
        org.la4j.Matrix matrix20 = cCSMatrix16.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator21 = cCSMatrix16.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix25.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double35 = rowMajorSparseMatrix31.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix36 = rowMajorSparseMatrix31.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean38 = sparseMatrix36.equals((java.lang.Object) ooPlaceOuterProduct37);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix25.hadamardProduct((org.la4j.Matrix) sparseMatrix36);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction13.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix16, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        double double49 = rowMajorSparseMatrix44.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int50 = rowMajorSparseMatrix44.cardinality();
        org.la4j.Vector vector52 = rowMajorSparseMatrix44.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation53 = ooPlaceMatricesSubtraction13.partiallyApply(rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator57 = cRSMatrix56.nonZeroIterator();
        org.la4j.Vector vector59 = cRSMatrix56.getColumn(100);
        boolean boolean62 = cRSMatrix56.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor63 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix56);
        org.la4j.Matrix matrix64 = rawLUDecompositor63.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction13.ensureApplicableTo(matrix64, (org.la4j.Matrix) cRSMatrix67);
        org.la4j.Vector vector69 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector9, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix67);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct70 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random72 = null;
        org.la4j.vector.DenseVector denseVector73 = org.la4j.vector.DenseVector.random(0, random72);
        java.util.Random random75 = null;
        org.la4j.vector.DenseVector denseVector76 = org.la4j.vector.DenseVector.random(0, random75);
        org.la4j.Matrix matrix77 = ooPlaceOuterProduct70.apply(denseVector73, denseVector76);
        org.la4j.Vector vector79 = denseVector73.copyOfLength((int) 'a');
        org.la4j.operation.MatrixOperation<org.la4j.Vector> vectorMatrixOperation80 = ooPlaceVectorByMatrixMultiplication0.partiallyApply(denseVector73);
        org.la4j.vector.DenseVector denseVector81 = null;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector83 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector81, columnMajorSparseMatrix82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(matrixMatrixOperation53);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(matrixIterator57);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertNotNull(denseVector73);
        org.junit.Assert.assertNotNull(denseVector76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(vector79);
        org.junit.Assert.assertNotNull(vectorMatrixOperation80);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix55 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator56 = columnMajorSparseMatrix55.nonZeroIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double65 = rowMajorSparseMatrix61.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix66 = rowMajorSparseMatrix61.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate67 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean68 = sparseMatrix66.is(advancedMatrixPredicate67);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator70 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double71 = sparseMatrix66.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator70);
        org.la4j.vector.functor.VectorProcedure vectorProcedure72 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator70);
        columnMajorSparseMatrix55.eachNonZeroInRow((-1), vectorProcedure72);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix76 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator77 = cRSMatrix76.nonZeroIterator();
        org.la4j.Vector vector79 = cRSMatrix76.getColumn(100);
        boolean boolean82 = cRSMatrix76.nonZeroAt(1, (int) (short) 0);
        org.la4j.Matrix matrix83 = matrixMatrixMatrixOperation0.apply(columnMajorSparseMatrix55, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix76);
        org.la4j.Vector vector84 = cRSMatrix76.toColumnVector();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix55);
        org.junit.Assert.assertNotNull(matrixIterator56);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix66);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure72);
        org.junit.Assert.assertNotNull(cRSMatrix76);
        org.junit.Assert.assertNotNull(matrixIterator77);
        org.junit.Assert.assertNotNull(vector79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(vector84);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix2 = org.la4j.Matrix.zero(1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.la4j.Matrix matrix3 = org.la4j.Matrix.constant(0, 0, (double) (-1L));
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        double[][] doubleArray39 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray39);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        basic2DMatrix77.setAll((double) 100);
        org.la4j.Matrix matrix80 = matrixMatrixMatrixOperation0.apply(denseMatrix40, (org.la4j.matrix.DenseMatrix) basic2DMatrix77);
        double double81 = denseMatrix40.max();
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver82 = new org.la4j.linear.ForwardBackSubstitutionSolver((org.la4j.Matrix) denseMatrix40);
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication83 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication84 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix89 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator90 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray91 = cCSMatrix89.foldRows(vectorAccumulator90);
        org.la4j.matrix.DenseMatrix denseMatrix92 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray91);
        org.la4j.vector.dense.BasicVector basicVector94 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector95 = ooPlaceMatrixByVectorMultiplication84.apply(denseMatrix92, (org.la4j.vector.DenseVector) basicVector94);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector96 = denseMatrix40.apply((org.la4j.operation.MatrixVectorOperation<org.la4j.Vector>) ooPlaceMatrixByVectorMultiplication83, (org.la4j.Vector) basicVector94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 10 does not equal to 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + Double.NEGATIVE_INFINITY + "'", double81 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(cCSMatrix89);
        org.junit.Assert.assertNotNull(vectorAccumulator90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix92);
        org.junit.Assert.assertNotNull(vector95);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.random((int) (short) 100, (int) (short) -1, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean5 = cCSMatrix2.nonZeroAt((int) ' ', (int) '#');
        org.la4j.Vector vector7 = cCSMatrix2.getRow(1);
        org.la4j.Vector vector8 = vector7.copy();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = org.la4j.matrix.RowMajorSparseMatrix.zero(10, (int) (byte) 1);
        boolean boolean12 = vector7.equals((java.lang.Object) rowMajorSparseMatrix11);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(vector7);
        org.junit.Assert.assertNotNull(vector8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.la4j.vector.functor.VectorFunction vectorFunction2 = org.la4j.Vectors.asPlusFunction((double) (short) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator3 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) -1, vectorFunction2);
        org.junit.Assert.assertNotNull(vectorFunction2);
        org.junit.Assert.assertNotNull(vectorAccumulator3);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix36.divide((double) (-1));
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor42 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix41);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix36, (org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver44 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix43);
        int int45 = forwardBackSubstitutionSolver44.equations();
        org.la4j.Matrix matrix46 = forwardBackSubstitutionSolver44.self();
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertNotNull(matrix46);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        java.util.Spliterator<java.lang.Double> doubleSpliterator39 = basic2DMatrix37.spliterator();
        org.la4j.Matrix matrix42 = basic2DMatrix37.copyOfShape(0, (int) (byte) 100);
        double[][] doubleArray43 = basic2DMatrix37.toArray();
        org.la4j.Matrix matrix44 = basic2DMatrix37.blank();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertNotNull(doubleSpliterator39);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(matrix44);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix2 = org.la4j.Matrix.zero((-1), (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray20 = columnMajorSparseMatrix19.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation21 = ooPlaceMatricesAddition0.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator25 = cCSMatrix24.iterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix28 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double31 = cCSMatrix28.get((int) (byte) 0, (int) (short) 1);
        double double32 = cCSMatrix28.min();
        org.la4j.Matrix matrix33 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix24, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix28);
        org.la4j.Matrix matrix34 = cCSMatrix24.transpose();
        boolean boolean37 = cCSMatrix24.nonZeroAt((int) (byte) -1, (int) (short) 10);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator25);
        org.junit.Assert.assertNotNull(cCSMatrix28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asPlusFunction((double) 1L);
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double8 = rowMajorSparseMatrix3.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector9 = rowMajorSparseMatrix3.toRowVector();
        org.la4j.Matrix matrix10 = rowMajorSparseMatrix3.transpose();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(matrix10);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix11 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix19 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray18);
        double[][] doubleArray20 = basic1DMatrix19.toArray();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix21 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray20);
        org.la4j.Matrix matrix24 = basic2DMatrix21.blankOfShape((int) '#', (int) ' ');
        org.la4j.vector.functor.VectorFunction vectorFunction27 = org.la4j.Vectors.asDivFunction((double) 10.0f);
        basic2DMatrix21.updateColumn((-1), vectorFunction27);
        org.la4j.Matrix matrix29 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix11, (org.la4j.matrix.DenseMatrix) basic2DMatrix21);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix32 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix39 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix40 = rowMajorSparseMatrix39.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction42 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator43 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction42);
        double double44 = matrix40.fold(matrixAccumulator43);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure45 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator43);
        cCSMatrix35.eachNonZero(matrixProcedure45);
        org.la4j.Matrix matrix47 = basic2DMatrix32.kroneckerProduct((org.la4j.Matrix) cCSMatrix35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix51 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 1, (int) '4', (int) (short) 1);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix52 = cCSMatrix51.toColumnMajorSparseMatrix();
        double double54 = columnMajorSparseMatrix52.maxInColumn((int) (short) 10);
        org.la4j.Matrix matrix55 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix35, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix52);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication56 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix58 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix59 = ooPlaceMatrixByItsTransposeMultiplication56.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix58);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix62 = org.la4j.matrix.sparse.CCSMatrix.zero(0, 30);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator63 = cCSMatrix62.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix64 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix58, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix62);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(vectorFunction27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(basic2DMatrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrixAccumulator43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + (-1.0d) + "'", double44 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure45);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(cCSMatrix51);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(cCSMatrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(cCSMatrix62);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator63);
        org.junit.Assert.assertNotNull(matrix64);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.diagonal(0, 1.0d);
        org.la4j.Vector vector4 = basic2DMatrix2.getColumn(0);
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(vector4);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator3 = cCSMatrix2.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '4', (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double double9 = matrix6.get(100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '100' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator3);
        org.junit.Assert.assertNotNull(matrix6);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory5 = org.la4j.LinearAlgebra.DecompositorFactory.CHOLESKY;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.MatrixDecompositor matrixDecompositor6 = rowMajorSparseMatrix3.withDecompositor(decompositorFactory5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrix can not be used with this decompositor.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(decompositorFactory5);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.la4j.Matrix matrix0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.CholeskyDecompositor choleskyDecompositor1 = new org.la4j.decomposition.CholeskyDecompositor(matrix0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double12 = rowMajorSparseMatrix8.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix13 = rowMajorSparseMatrix8.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate14 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean15 = sparseMatrix13.is(advancedMatrixPredicate14);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double18 = sparseMatrix13.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator17);
        org.la4j.vector.functor.VectorProcedure vectorProcedure19 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator17);
        cCSMatrix2.eachInRow((int) (short) 1, vectorProcedure19);
        double double21 = cCSMatrix2.max();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix26 = cCSMatrix2.slice((int) (byte) 10, 1, (int) (byte) 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad row argument -1; out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix13);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = cRSMatrix2.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory12 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix13 = cRSMatrix2.to(basic1DMatrixMatrixFactory12);
        org.la4j.linear.SquareRootSolver squareRootSolver14 = new org.la4j.linear.SquareRootSolver((org.la4j.Matrix) basic1DMatrix13);
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.MatrixDecompositor matrixDecompositor16 = basic1DMatrix13.withDecompositor(decompositorFactory15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory12);
        org.junit.Assert.assertNotNull(basic1DMatrix13);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation1 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray8 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray15 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray37 = new double[][] { doubleArray8, doubleArray15, doubleArray22, doubleArray29, doubleArray36 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray37);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation39 = matrixMatrixMatrixOperation1.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix38);
        org.la4j.Matrix matrix41 = basic2DMatrix38.blankOfColumns(52);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix45 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix45.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction48 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator49 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction48);
        double double50 = matrix46.fold(matrixAccumulator49);
        double double51 = matrix46.manhattanNorm();
        matrixMatrixMatrixOperation0.ensureApplicableTo(matrix41, matrix46);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix56 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double60 = rowMajorSparseMatrix56.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix61 = rowMajorSparseMatrix56.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate62 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean63 = sparseMatrix61.is(advancedMatrixPredicate62);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator65 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double66 = sparseMatrix61.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator65);
        org.la4j.vector.functor.VectorProcedure vectorProcedure67 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator65);
        double[] doubleArray68 = matrix41.foldRows(vectorAccumulator65);
        org.la4j.Matrix matrix69 = matrix41.multiplyByItsTranspose();
        org.la4j.decomposition.LUDecompositor lUDecompositor70 = new org.la4j.decomposition.LUDecompositor(matrix69);
        int int71 = matrix69.columns();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(matrixMatrixOperation39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(matrixAccumulator49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix56);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix61);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix0 = new org.la4j.matrix.sparse.CCSMatrix();
        java.lang.String str1 = cCSMatrix0.toMatrixMarket();
        org.la4j.vector.sparse.CompressedVector compressedVector4 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat5 = null;
        java.lang.String str6 = compressedVector4.toMatrixMarket(numberFormat5);
        java.text.NumberFormat numberFormat7 = null;
        java.lang.String str8 = compressedVector4.toMatrixMarket(numberFormat7);
        org.la4j.Matrix matrix9 = compressedVector4.toColumnMatrix();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix12 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        cRSMatrix12.setRow(0, (double) '4');
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct17 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray24 = cCSMatrix22.foldRows(vectorAccumulator23);
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray24);
        org.la4j.vector.dense.BasicVector basicVector26 = new org.la4j.vector.dense.BasicVector(doubleArray24);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix31 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator32 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray33 = cCSMatrix31.foldRows(vectorAccumulator32);
        org.la4j.matrix.DenseMatrix denseMatrix34 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray33);
        org.la4j.vector.dense.BasicVector basicVector35 = new org.la4j.vector.dense.BasicVector(doubleArray33);
        ooPlaceOuterProduct17.ensureApplicableTo((org.la4j.Vector) basicVector26, (org.la4j.Vector) basicVector35);
        org.la4j.vector.sparse.CompressedVector compressedVector38 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector38.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector43 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix44 = ooPlaceOuterProduct17.apply((org.la4j.vector.SparseVector) compressedVector38, (org.la4j.vector.SparseVector) compressedVector43);
        org.la4j.vector.functor.VectorFunction vectorFunction46 = org.la4j.Vectors.INC_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator47 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) 100, vectorFunction46);
        double double48 = compressedVector38.fold(vectorAccumulator47);
        org.la4j.vector.functor.VectorProcedure vectorProcedure49 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator47);
        cRSMatrix12.eachNonZeroInColumn(10, vectorProcedure49);
        compressedVector4.eachNonZero(vectorProcedure49);
        cCSMatrix0.eachNonZeroInRow(1, vectorProcedure49);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "%%MatrixMarket matrix coordinate real general column-major\n0 0 0\n" + "'", str1, "%%MatrixMarket matrix coordinate real general column-major\n0 0 0\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str6, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str8, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(cRSMatrix12);
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(cCSMatrix31);
        org.junit.Assert.assertNotNull(vectorAccumulator32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix34);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(vectorFunction46);
        org.junit.Assert.assertNotNull(vectorAccumulator47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(vectorProcedure49);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        java.util.Random random5 = null;
        org.la4j.vector.DenseVector denseVector6 = org.la4j.vector.DenseVector.random(0, random5);
        org.la4j.Matrix matrix7 = ooPlaceOuterProduct0.apply(denseVector3, denseVector6);
        org.la4j.vector.sparse.CompressedVector compressedVector9 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat10 = null;
        java.lang.String str11 = compressedVector9.toMatrixMarket(numberFormat10);
        org.la4j.Vector vector13 = compressedVector9.add((double) 52);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.vector.dense.BasicVector basicVector19 = org.la4j.vector.dense.BasicVector.fromArray(doubleArray18);
        org.la4j.Matrix matrix20 = basicVector19.toRowMatrix();
        org.la4j.vector.functor.VectorPredicate vectorPredicate21 = org.la4j.Vectors.ZERO_VECTOR;
        boolean boolean22 = basicVector19.non(vectorPredicate21);
        org.la4j.Vector vector24 = basicVector19.blankOfLength((int) 'a');
        org.la4j.Matrix matrix25 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector9, (org.la4j.vector.DenseVector) basicVector19);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct26 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix29 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str30 = basic2DMatrix29.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition31 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix34 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double35 = cRSMatrix34.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix39 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix40 = rowMajorSparseMatrix39.removeLastRow();
        org.la4j.Matrix matrix41 = ooPlaceMatricesAddition31.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix34, rowMajorSparseMatrix39);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix44 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix46 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix47 = ooPlaceMatricesAddition31.apply(columnMajorSparseMatrix44, denseMatrix46);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix50 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray51 = columnMajorSparseMatrix50.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation52 = ooPlaceMatricesAddition31.partiallyApply(columnMajorSparseMatrix50);
        org.la4j.Matrix matrix53 = ooPlaceMatrixHadamardProduct26.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix29, columnMajorSparseMatrix50);
        org.la4j.Vector vector55 = columnMajorSparseMatrix50.getRow((int) (short) 10);
        boolean boolean57 = basicVector19.equals(vector55, (-100.0d));
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertNotNull(denseVector6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str11, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basicVector19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(vectorPredicate21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(vector24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(basic2DMatrix29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str30, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(denseMatrix46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation52);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(vector55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation0 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray7 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray14 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray21 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray28 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray35 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray36 = new double[][] { doubleArray7, doubleArray14, doubleArray21, doubleArray28, doubleArray35 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray36);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation38 = matrixMatrixMatrixOperation0.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix37);
        basic2DMatrix37.setAll(1.0d);
        double double41 = basic2DMatrix37.sum();
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(basic2DMatrix37);
        org.junit.Assert.assertNotNull(matrixMatrixOperation38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 30.0d + "'", double41 == 30.0d);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate0 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix3 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean4 = advancedMatrixPredicate0.test((org.la4j.Matrix) columnMajorSparseMatrix3);
        org.la4j.vector.functor.VectorFunction vectorFunction6 = null;
        org.la4j.Matrix matrix7 = columnMajorSparseMatrix3.transformRow(0, vectorFunction6);
        org.la4j.iterator.VectorIterator vectorIterator9 = columnMajorSparseMatrix3.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate10 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean14 = advancedMatrixPredicate10.test((org.la4j.Matrix) columnMajorSparseMatrix13);
        org.la4j.vector.functor.VectorFunction vectorFunction16 = null;
        org.la4j.Matrix matrix17 = columnMajorSparseMatrix13.transformRow(0, vectorFunction16);
        org.la4j.iterator.VectorIterator vectorIterator19 = columnMajorSparseMatrix13.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.iterator.VectorIterator vectorIterator29 = rowMajorSparseMatrix23.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.iterator.VectorIterator vectorIterator30 = vectorIterator19.andAlsoMultiply(vectorIterator29);
        org.la4j.iterator.VectorIterator vectorIterator31 = vectorIterator9.orElseSubtract(vectorIterator29);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = vectorIterator29.index();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(advancedMatrixPredicate0);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vectorIterator9);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(vectorIterator19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(vectorIterator29);
        org.junit.Assert.assertNotNull(vectorIterator30);
        org.junit.Assert.assertNotNull(vectorIterator31);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix14 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double15 = columnMajorSparseMatrix14.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory16 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix17 = columnMajorSparseMatrix14.to(basic1DMatrixMatrixFactory16);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition18 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double22 = cRSMatrix21.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix26 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix26.removeLastRow();
        org.la4j.Matrix matrix28 = ooPlaceMatricesAddition18.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21, rowMajorSparseMatrix26);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition29 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix32 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double33 = cRSMatrix32.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix37 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix37.removeLastRow();
        org.la4j.Matrix matrix39 = ooPlaceMatricesAddition29.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix32, rowMajorSparseMatrix37);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix42 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix44 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix45 = ooPlaceMatricesAddition29.apply(columnMajorSparseMatrix42, denseMatrix44);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix49 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix49.removeLastRow();
        double double54 = rowMajorSparseMatrix49.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector55 = rowMajorSparseMatrix49.toRowVector();
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition18.apply(denseMatrix44, rowMajorSparseMatrix49);
        org.la4j.matrix.SparseMatrix sparseMatrix57 = denseMatrix44.toSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix58 = denseMatrix44.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix59 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix14, rowMajorSparseMatrix58);
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct60 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix63 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix66 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double67 = cRSMatrix66.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator68 = cRSMatrix66.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor69 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix66);
        org.la4j.Matrix matrix70 = ooPlaceKroneckerProduct60.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix63, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix66);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix72 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("");
        org.la4j.Matrix matrix73 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix63, rowMajorSparseMatrix72);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix75 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate76 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix79 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean80 = advancedMatrixPredicate76.test((org.la4j.Matrix) columnMajorSparseMatrix79);
        org.la4j.vector.functor.VectorFunction vectorFunction82 = null;
        org.la4j.Matrix matrix83 = columnMajorSparseMatrix79.transformRow(0, vectorFunction82);
        org.la4j.Matrix matrix84 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix75, columnMajorSparseMatrix79);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver85 = new org.la4j.linear.ForwardBackSubstitutionSolver((org.la4j.Matrix) rowMajorSparseMatrix75);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory16);
        org.junit.Assert.assertNotNull(basic1DMatrix17);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(cRSMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(denseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(vector55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(sparseMatrix57);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(basic1DMatrix63);
        org.junit.Assert.assertNotNull(cRSMatrix66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator68);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix75);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate76);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix84);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.random(6, (int) ' ', Double.NaN, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double5 = cCSMatrix2.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction7 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix8 = cCSMatrix2.transformRow(10, vectorFunction7);
        boolean boolean11 = cCSMatrix2.nonZeroAt(10, (int) (byte) 1);
        boolean boolean12 = cCSMatrix2.isColumnMajor();
        org.la4j.Matrix matrix15 = cCSMatrix2.blankOfShape((int) (short) 0, 0);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(matrix15);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) -1, (int) ' ', (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x32");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Vector vector10 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str11 = vector10.toCSV();
        org.la4j.vector.SparseVector sparseVector12 = vector10.toSparseVector();
        boolean boolean14 = sparseVector12.isZeroAt(52);
        org.la4j.iterator.VectorIterator vectorIterator15 = sparseVector12.iterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct16 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator22 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray23 = cCSMatrix21.foldRows(vectorAccumulator22);
        org.la4j.matrix.DenseMatrix denseMatrix24 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray23);
        org.la4j.vector.dense.BasicVector basicVector25 = new org.la4j.vector.dense.BasicVector(doubleArray23);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix30 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator31 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray32 = cCSMatrix30.foldRows(vectorAccumulator31);
        org.la4j.matrix.DenseMatrix denseMatrix33 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray32);
        org.la4j.vector.dense.BasicVector basicVector34 = new org.la4j.vector.dense.BasicVector(doubleArray32);
        ooPlaceOuterProduct16.ensureApplicableTo((org.la4j.Vector) basicVector25, (org.la4j.Vector) basicVector34);
        org.la4j.vector.sparse.CompressedVector compressedVector37 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix38 = compressedVector37.toColumnMatrix();
        org.la4j.Matrix matrix39 = sparseVector12.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct16, (org.la4j.Vector) compressedVector37);
        org.la4j.Vector vector40 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3, sparseVector12);
        double double41 = sparseVector12.max();
        boolean boolean43 = sparseVector12.nonZeroAt(0);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(vector10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str11, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(vectorIterator15);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertNotNull(vectorAccumulator22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix24);
        org.junit.Assert.assertNotNull(cCSMatrix30);
        org.junit.Assert.assertNotNull(vectorAccumulator31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix33);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.random((int) (short) 100, (int) (short) 0, 0.0d, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: / by zero");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator0 = org.la4j.Matrices.mkEuclideanNormAccumulator();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure1 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator0);
        org.junit.Assert.assertNotNull(matrixAccumulator0);
        org.junit.Assert.assertNotNull(matrixProcedure1);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory84 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix85 = basic2DMatrix43.to(basic1DMatrixMatrixFactory84);
        org.la4j.Matrix matrix88 = basic2DMatrix43.blankOfShape((int) (byte) 100, (int) (short) 10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory84);
        org.junit.Assert.assertNotNull(basic1DMatrix85);
        org.junit.Assert.assertNotNull(matrix88);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix3.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory6 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix7 = matrix5.to(basic1DMatrixMatrixFactory6);
        org.la4j.vector.SparseVector sparseVector11 = org.la4j.vector.SparseVector.zero((int) (byte) 10, (int) (byte) -1);
        org.la4j.Vector vector13 = sparseVector11.multiply((double) (byte) 1);
        double double14 = sparseVector11.min();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix15 = basic1DMatrix7.insertColumn((int) (short) 10, (org.la4j.Vector) sparseVector11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: 10. Should be: 1.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory6);
        org.junit.Assert.assertNotNull(basic1DMatrix7);
        org.junit.Assert.assertNotNull(sparseVector11);
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix3.blankOfRows(0);
        boolean boolean6 = rowMajorSparseMatrix3.isRowMajor();
        boolean boolean9 = rowMajorSparseMatrix3.nonZeroAt(0, (int) 'a');
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double18 = rowMajorSparseMatrix14.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix19 = rowMajorSparseMatrix14.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate20 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean21 = sparseMatrix19.is(advancedMatrixPredicate20);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double24 = sparseMatrix19.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator23);
        org.la4j.vector.functor.VectorProcedure vectorProcedure25 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator23);
        org.la4j.vector.functor.VectorProcedure vectorProcedure26 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator23);
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix3.eachInColumn((int) (short) -1, vectorProcedure26);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '-1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix19);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure25);
        org.junit.Assert.assertNotNull(vectorProcedure26);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct5 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        java.lang.String str9 = basic2DMatrix8.toCSV();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition10 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix13 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double14 = cRSMatrix13.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.Matrix matrix20 = ooPlaceMatricesAddition10.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix13, rowMajorSparseMatrix18);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix23 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix26 = ooPlaceMatricesAddition10.apply(columnMajorSparseMatrix23, denseMatrix25);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix29 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray30 = columnMajorSparseMatrix29.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation31 = ooPlaceMatricesAddition10.partiallyApply(columnMajorSparseMatrix29);
        org.la4j.Matrix matrix32 = ooPlaceMatrixHadamardProduct5.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix8, columnMajorSparseMatrix29);
        org.la4j.Matrix matrix34 = basic2DMatrix8.add(1.0E100d);
        org.la4j.Matrix matrix37 = basic2DMatrix8.copyOfShape((int) (byte) 0, (int) (byte) 10);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix40 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator41 = cRSMatrix40.nonZeroIterator();
        org.la4j.matrix.functor.MatrixFunction matrixFunction45 = org.la4j.Matrices.asMulFunction((double) 1);
        cRSMatrix40.updateAt((int) (short) 1, (int) (byte) 100, matrixFunction45);
        basic2DMatrix8.update(matrixFunction45);
        cRSMatrix2.updateAt(6, (int) (byte) 100, matrixFunction45);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(basic2DMatrix8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n" + "'", str9, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000\n");
        org.junit.Assert.assertNotNull(cRSMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix23);
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(cRSMatrix40);
        org.junit.Assert.assertNotNull(matrixIterator41);
        org.junit.Assert.assertNotNull(matrixFunction45);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix7 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator8 = columnMajorSparseMatrix7.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator9 = rowMajorMatrixIterator4.orElseSubtract(matrixIterator8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean13 = cCSMatrix12.isRowMajor();
        org.la4j.Matrix matrix16 = cCSMatrix12.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator17 = cCSMatrix12.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator18 = matrixIterator9.orElseSubtract((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator17);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean22 = cCSMatrix21.isRowMajor();
        org.la4j.Matrix matrix25 = cCSMatrix21.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator26 = cCSMatrix21.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator27 = columnMajorMatrixIterator17.orElseAdd((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator26);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix30 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator31 = cCSMatrix30.iterator();
        org.la4j.iterator.MatrixIterator matrixIterator32 = columnMajorMatrixIterator17.orElseAdd((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator31);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction33 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix37 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix37.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix41 = ooPlaceMatricesSubtraction33.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix37, denseMatrix40);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix44 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double45 = columnMajorSparseMatrix44.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix48 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double49 = denseMatrix48.min();
        double double50 = denseMatrix48.sum();
        org.la4j.Matrix matrix51 = ooPlaceMatricesSubtraction33.apply(columnMajorSparseMatrix44, denseMatrix48);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix54 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator55 = cRSMatrix54.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation56 = ooPlaceMatricesSubtraction33.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix54);
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator57 = cRSMatrix54.nonZeroRowMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator58 = columnMajorMatrixIterator31.orElseSubtract((org.la4j.iterator.MatrixIterator) rowMajorMatrixIterator57);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix7);
        org.junit.Assert.assertNotNull(matrixIterator8);
        org.junit.Assert.assertNotNull(matrixIterator9);
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator17);
        org.junit.Assert.assertNotNull(matrixIterator18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(cCSMatrix30);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator31);
        org.junit.Assert.assertNotNull(matrixIterator32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(cRSMatrix54);
        org.junit.Assert.assertNotNull(matrixIterator55);
        org.junit.Assert.assertNotNull(matrixMatrixOperation56);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator57);
        org.junit.Assert.assertNotNull(matrixIterator58);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix85 = org.la4j.matrix.sparse.CCSMatrix.fromCSV("");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix88 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double89 = cRSMatrix88.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator90 = cRSMatrix88.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor91 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix88);
        org.la4j.Matrix matrix92 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix85, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix88);
        byte[] byteArray93 = cRSMatrix88.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix94 = org.la4j.matrix.sparse.CCSMatrix.fromBinary(byteArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode CCSMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(cCSMatrix85);
        org.junit.Assert.assertNotNull(cRSMatrix88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator90);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor5 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double6 = cRSMatrix2.max();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator7 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.linear.JacobiSolver jacobiSolver8 = new org.la4j.linear.JacobiSolver((org.la4j.Matrix) cRSMatrix2);
        org.la4j.vector.dense.BasicVector basicVector10 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        boolean boolean22 = basicVector10.equals((java.lang.Object) rowMajorSparseMatrix19);
        org.la4j.Matrix matrix23 = basicVector10.toDiagonalMatrix();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector24 = jacobiSolver8.solve((org.la4j.Vector) basicVector10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong length of RHS vector: 0.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator7);
        org.junit.Assert.assertNotNull(basicVector10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix23);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector2 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector2.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.Vector vector23 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.SparseVector) compressedVector2, columnMajorSparseMatrix21);
        org.la4j.vector.SparseVector sparseVector25 = org.la4j.vector.SparseVector.zero(0);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction26 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix30 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix30.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix33 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction26.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix30, denseMatrix33);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix37 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double38 = columnMajorSparseMatrix37.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix41 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double42 = denseMatrix41.min();
        double double43 = denseMatrix41.sum();
        org.la4j.Matrix matrix44 = ooPlaceMatricesSubtraction26.apply(columnMajorSparseMatrix37, denseMatrix41);
        org.la4j.Vector vector45 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector25, columnMajorSparseMatrix37);
        byte[] byteArray46 = sparseVector25.toBinary();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix47 = org.la4j.matrix.dense.Basic2DMatrix.fromBinary(byteArray46);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix48 = org.la4j.matrix.dense.Basic2DMatrix.fromBinary(byteArray46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(vector23);
        org.junit.Assert.assertNotNull(sparseVector25);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(denseMatrix33);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(vector45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[16, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(basic2DMatrix47);
        org.junit.Assert.assertNotNull(basic2DMatrix48);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray35);
        org.la4j.matrix.SparseMatrix sparseMatrix38 = org.la4j.matrix.SparseMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix39 = org.la4j.matrix.sparse.CCSMatrix.from2DArray(doubleArray35);
        double double40 = cCSMatrix39.max();
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(sparseMatrix38);
        org.junit.Assert.assertNotNull(cCSMatrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator3 = cCSMatrix2.nonZeroColumnMajorIterator();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix6 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory7 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix8 = basic1DMatrix6.to(basic1DMatrixMatrixFactory7);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix9 = cCSMatrix2.to(basic1DMatrixMatrixFactory7);
        cCSMatrix2.set((int) (short) 1, 10, Double.NaN);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator3);
        org.junit.Assert.assertNotNull(basic1DMatrix6);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory7);
        org.junit.Assert.assertNotNull(basic1DMatrix8);
        org.junit.Assert.assertNotNull(basic1DMatrix9);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.Matrix matrix28 = compressedVector26.toDiagonalMatrix();
        org.la4j.Vector vector30 = compressedVector26.copyOfLength((int) (byte) 100);
        org.la4j.Vector vector32 = compressedVector26.add((double) 30);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(vector30);
        org.junit.Assert.assertNotNull(vector32);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.la4j.Matrix matrix1 = org.la4j.Matrix.identity((int) (byte) 1);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition2 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix5 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double6 = cRSMatrix5.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        org.la4j.Matrix matrix12 = ooPlaceMatricesAddition2.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix5, rowMajorSparseMatrix10);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix18 = ooPlaceMatricesAddition2.apply(columnMajorSparseMatrix15, denseMatrix17);
        org.la4j.Matrix matrix19 = denseMatrix17.rotate();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication20 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix23 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator24 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray25 = cCSMatrix23.foldRows(vectorAccumulator24);
        org.la4j.Matrix matrix26 = ooPlaceMatrixByItsTransposeMultiplication20.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix23);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double30 = cRSMatrix29.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator31 = cRSMatrix29.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor32 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix29);
        double double33 = cRSMatrix29.max();
        org.la4j.Matrix matrix34 = ooPlaceMatrixByItsTransposeMultiplication20.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix29);
        org.la4j.Matrix matrix35 = matrix19.apply((org.la4j.operation.MatrixOperation<org.la4j.Matrix>) ooPlaceMatrixByItsTransposeMultiplication20);
        org.la4j.Matrix matrix36 = matrix1.apply((org.la4j.operation.MatrixOperation<org.la4j.Matrix>) ooPlaceMatrixByItsTransposeMultiplication20);
        double double37 = matrix1.max();
        org.junit.Assert.assertNotNull(matrix1);
        org.junit.Assert.assertNotNull(cRSMatrix5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(cCSMatrix23);
        org.junit.Assert.assertNotNull(vectorAccumulator24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(matrix35);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 1.0d + "'", double37 == 1.0d);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.util.Random random1 = null;
        org.la4j.Vector vector2 = org.la4j.Vector.random(0, random1);
        java.text.NumberFormat numberFormat3 = null;
        java.lang.String str4 = vector2.toMatrixMarket(numberFormat3);
        org.junit.Assert.assertNotNull(vector2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "%%MatrixMarket vector array real\n0\n" + "'", str4, "%%MatrixMarket vector array real\n0\n");
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix14 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double15 = columnMajorSparseMatrix14.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory16 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix17 = columnMajorSparseMatrix14.to(basic1DMatrixMatrixFactory16);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition18 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double22 = cRSMatrix21.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix26 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix26.removeLastRow();
        org.la4j.Matrix matrix28 = ooPlaceMatricesAddition18.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21, rowMajorSparseMatrix26);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition29 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix32 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double33 = cRSMatrix32.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix37 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix37.removeLastRow();
        org.la4j.Matrix matrix39 = ooPlaceMatricesAddition29.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix32, rowMajorSparseMatrix37);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix42 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix44 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix45 = ooPlaceMatricesAddition29.apply(columnMajorSparseMatrix42, denseMatrix44);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix49 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix49.removeLastRow();
        double double54 = rowMajorSparseMatrix49.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector55 = rowMajorSparseMatrix49.toRowVector();
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition18.apply(denseMatrix44, rowMajorSparseMatrix49);
        org.la4j.matrix.SparseMatrix sparseMatrix57 = denseMatrix44.toSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix58 = denseMatrix44.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix59 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix14, rowMajorSparseMatrix58);
        org.la4j.operation.ooplace.OoPlaceKroneckerProduct ooPlaceKroneckerProduct60 = new org.la4j.operation.ooplace.OoPlaceKroneckerProduct();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix63 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix66 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double67 = cRSMatrix66.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator68 = cRSMatrix66.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor69 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix66);
        org.la4j.Matrix matrix70 = ooPlaceKroneckerProduct60.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix63, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix66);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix72 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("");
        org.la4j.Matrix matrix73 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix63, rowMajorSparseMatrix72);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix75 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("");
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate76 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix79 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean80 = advancedMatrixPredicate76.test((org.la4j.Matrix) columnMajorSparseMatrix79);
        org.la4j.vector.functor.VectorFunction vectorFunction82 = null;
        org.la4j.Matrix matrix83 = columnMajorSparseMatrix79.transformRow(0, vectorFunction82);
        org.la4j.Matrix matrix84 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix75, columnMajorSparseMatrix79);
        org.la4j.linear.SeidelSolver seidelSolver85 = new org.la4j.linear.SeidelSolver((org.la4j.Matrix) columnMajorSparseMatrix79);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory16);
        org.junit.Assert.assertNotNull(basic1DMatrix17);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(cRSMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(denseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(vector55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(sparseMatrix57);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(basic1DMatrix63);
        org.junit.Assert.assertNotNull(cRSMatrix66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator68);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix75);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate76);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix84);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix2 = org.la4j.matrix.RowMajorSparseMatrix.diagonal(52, (double) 1.0f);
        org.la4j.vector.functor.VectorFunction vectorFunction4 = org.la4j.Vectors.INC_FUNCTION;
        // The following exception was thrown during execution in test generation
        try {
            rowMajorSparseMatrix2.updateRow((int) (byte) 100, vectorFunction4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(vectorFunction4);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.la4j.LinearAlgebra.SolverFactory solverFactory0 = org.la4j.LinearAlgebra.SolverFactory.SEIDEL;
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean5 = cCSMatrix4.isRowMajor();
        org.la4j.Matrix matrix8 = cCSMatrix4.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator9 = cCSMatrix4.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix13 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix13.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double23 = rowMajorSparseMatrix19.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix24 = rowMajorSparseMatrix19.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct25 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean26 = sparseMatrix24.equals((java.lang.Object) ooPlaceOuterProduct25);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix13.hadamardProduct((org.la4j.Matrix) sparseMatrix24);
        org.la4j.Matrix matrix28 = ooPlaceMatricesSubtraction1.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix4, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix33 = rowMajorSparseMatrix32.removeLastRow();
        double double37 = rowMajorSparseMatrix32.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int38 = rowMajorSparseMatrix32.cardinality();
        org.la4j.Vector vector40 = rowMajorSparseMatrix32.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation41 = ooPlaceMatricesSubtraction1.partiallyApply(rowMajorSparseMatrix32);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication42 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator46 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray47 = cCSMatrix45.foldRows(vectorAccumulator46);
        org.la4j.Matrix matrix48 = ooPlaceMatrixByItsTransposeMultiplication42.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix45);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation49 = ooPlaceMatricesSubtraction1.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix45);
        org.la4j.linear.LinearSystemSolver linearSystemSolver50 = solverFactory0.create((org.la4j.Matrix) cCSMatrix45);
        cCSMatrix45.setRow(5, (double) 5);
        org.junit.Assert.assertNotNull(solverFactory0);
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0d + "'", double23 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(vector40);
        org.junit.Assert.assertNotNull(matrixMatrixOperation41);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertNotNull(vectorAccumulator46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix48);
        org.junit.Assert.assertNotNull(matrixMatrixOperation49);
        org.junit.Assert.assertNotNull(linearSystemSolver50);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.zero((int) 'a', (int) (byte) 10);
        java.text.NumberFormat numberFormat3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = basic1DMatrix2.toMatrixMarket(numberFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic1DMatrix2);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix1 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        byte[] byteArray2 = cRSMatrix1.toBinary();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.fromBinary(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            double double5 = cRSMatrix3.minInRow((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(cRSMatrix3);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.unit(1);
        org.junit.Assert.assertNotNull(basicVector1);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        // The following exception was thrown during execution in test generation
        try {
            basic2DMatrix1.set(1, 0, (-2.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic2DMatrix1);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        double double11 = cRSMatrix3.infinityNorm();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct12 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix17 = rowMajorSparseMatrix16.removeLastRow();
        double double21 = rowMajorSparseMatrix16.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int22 = rowMajorSparseMatrix16.cardinality();
        org.la4j.Vector vector24 = rowMajorSparseMatrix16.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix27 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix28 = ooPlaceMatrixHadamardProduct12.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix27);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction32 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix35 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean36 = cCSMatrix35.isRowMajor();
        org.la4j.Matrix matrix39 = cCSMatrix35.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator40 = cCSMatrix35.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix46 = rowMajorSparseMatrix44.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix50 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double54 = rowMajorSparseMatrix50.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix55 = rowMajorSparseMatrix50.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct56 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean57 = sparseMatrix55.equals((java.lang.Object) ooPlaceOuterProduct56);
        org.la4j.Matrix matrix58 = rowMajorSparseMatrix44.hadamardProduct((org.la4j.Matrix) sparseMatrix55);
        org.la4j.Matrix matrix59 = ooPlaceMatricesSubtraction32.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix35, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix44);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator60 = cCSMatrix35.iterator();
        org.la4j.Matrix matrix63 = cCSMatrix35.blankOfShape(10, (int) '4');
        org.la4j.Matrix matrix64 = ooPlaceMatrixHadamardProduct12.applySymmetric(rowMajorSparseMatrix31, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix35);
        org.la4j.Matrix matrix65 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix31);
        double double66 = rowMajorSparseMatrix31.diagonalProduct();
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator67 = org.la4j.Matrices.mkInfinityNormAccumulator();
        double double68 = matrixAccumulator67.accumulate();
        double double69 = matrixAccumulator67.accumulate();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure70 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator67);
        double double71 = rowMajorSparseMatrix31.fold(matrixAccumulator67);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(vector24);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(cCSMatrix35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.0d + "'", double54 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator60);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.0d + "'", double66 == 1.0d);
        org.junit.Assert.assertNotNull(matrixAccumulator67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + Double.NEGATIVE_INFINITY + "'", double68 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + Double.NEGATIVE_INFINITY + "'", double69 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrixProcedure70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + Double.NEGATIVE_INFINITY + "'", double71 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        int int3 = cCSMatrix2.cardinality();
        byte[] byteArray4 = cCSMatrix2.toBinary();
        org.la4j.vector.sparse.CompressedVector compressedVector7 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        double double8 = compressedVector7.euclideanNorm();
        java.text.NumberFormat numberFormat9 = null;
        java.lang.String str10 = compressedVector7.toMatrixMarket(numberFormat9);
        java.lang.String str11 = compressedVector7.toString();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct12 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray19 = cCSMatrix17.foldRows(vectorAccumulator18);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray19);
        org.la4j.vector.dense.BasicVector basicVector21 = new org.la4j.vector.dense.BasicVector(doubleArray19);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix26 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator27 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray28 = cCSMatrix26.foldRows(vectorAccumulator27);
        org.la4j.matrix.DenseMatrix denseMatrix29 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray28);
        org.la4j.vector.dense.BasicVector basicVector30 = new org.la4j.vector.dense.BasicVector(doubleArray28);
        ooPlaceOuterProduct12.ensureApplicableTo((org.la4j.Vector) basicVector21, (org.la4j.Vector) basicVector30);
        org.la4j.vector.sparse.CompressedVector compressedVector33 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector33.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector38 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix39 = ooPlaceOuterProduct12.apply((org.la4j.vector.SparseVector) compressedVector33, (org.la4j.vector.SparseVector) compressedVector38);
        org.la4j.vector.functor.VectorFunction vectorFunction41 = org.la4j.Vectors.INC_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator42 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) 100, vectorFunction41);
        double double43 = compressedVector33.fold(vectorAccumulator42);
        org.la4j.vector.functor.VectorProcedure vectorProcedure44 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator42);
        compressedVector7.eachNonZero(vectorProcedure44);
        vectorProcedure44.apply((int) (short) 10, (-11.0d));
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix2.eachNonZeroInColumn(0, vectorProcedure44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[48, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str10, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000" + "'", str11, "0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000 0,000");
        org.junit.Assert.assertNotNull(cCSMatrix17);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(cCSMatrix26);
        org.junit.Assert.assertNotNull(vectorAccumulator27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix29);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(vectorFunction41);
        org.junit.Assert.assertNotNull(vectorAccumulator42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertNotNull(vectorProcedure44);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.DenseMatrix denseMatrix18 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix21 = ooPlaceMatrixHadamardProduct0.apply(denseMatrix18, denseMatrix20);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double27 = cCSMatrix24.get((int) (byte) 0, (int) (short) 1);
        double double31 = cCSMatrix24.getOrElse(10, (int) ' ', (double) 10);
        org.la4j.matrix.functor.MatrixFunction matrixFunction36 = org.la4j.Matrices.asModFunction(0.0d);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator37 = org.la4j.Matrices.asSumFunctionAccumulator((double) '4', matrixFunction36);
        cCSMatrix24.updateAt((int) (short) -1, 0, matrixFunction36);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix40 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("");
        org.la4j.Matrix matrix41 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix24, rowMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(denseMatrix18);
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(matrixFunction36);
        org.junit.Assert.assertNotNull(matrixAccumulator37);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(matrix41);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator1 = org.la4j.Matrices.asSumAccumulator((double) 52);
        matrixAccumulator1.update(1, (int) (short) 1, 0.0d);
        org.junit.Assert.assertNotNull(matrixAccumulator1);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        double double4 = vectorFunction1.evaluate((int) (byte) -1, (double) 0.0f);
        org.junit.Assert.assertNotNull(vectorFunction1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-100.0d) + "'", double4 == (-100.0d));
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.random(0, (int) (byte) -1, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: 0x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct1 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix5 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix6 = rowMajorSparseMatrix5.removeLastRow();
        double double10 = rowMajorSparseMatrix5.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int11 = rowMajorSparseMatrix5.cardinality();
        org.la4j.Vector vector13 = rowMajorSparseMatrix5.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix16 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix17 = ooPlaceMatrixHadamardProduct1.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix5, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix21 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix22 = rowMajorSparseMatrix21.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure23 = null;
        rowMajorSparseMatrix21.eachNonZero(matrixProcedure23);
        double[][] doubleArray25 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray25);
        org.la4j.Matrix matrix27 = ooPlaceMatrixHadamardProduct1.apply(rowMajorSparseMatrix21, denseMatrix26);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate28 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix31 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean32 = advancedMatrixPredicate28.test((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter33 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.Matrix matrix34 = denseMatrix26.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix31);
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        org.la4j.Matrix matrix38 = ooPlaceMatrixHadamardProduct0.apply(columnMajorSparseMatrix31, denseMatrix37);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix43 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator44 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray45 = cCSMatrix43.foldRows(vectorAccumulator44);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix46 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray45);
        double[][] doubleArray47 = basic1DMatrix46.toArray();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix48 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray47);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix52 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 1, (int) '4', (int) (short) 1);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix53 = cCSMatrix52.toColumnMajorSparseMatrix();
        org.la4j.Matrix matrix54 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.DenseMatrix) basic2DMatrix48, (org.la4j.matrix.SparseMatrix) cCSMatrix52);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(vector13);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate28);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix43);
        org.junit.Assert.assertNotNull(vectorAccumulator44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(cCSMatrix52);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor10 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix3);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure16 = null;
        rowMajorSparseMatrix14.eachNonZero(matrixProcedure16);
        org.la4j.Matrix matrix18 = ooPlaceMatrixHadamardProduct0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix14);
        org.la4j.Matrix matrix21 = org.la4j.Matrix.zero((int) (byte) 1, (int) (short) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = matrix21.toRowMajorSparseMatrix();
        org.la4j.matrix.DenseMatrix denseMatrix24 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix25 = ooPlaceMatrixHadamardProduct0.apply(rowMajorSparseMatrix22, denseMatrix24);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix28 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean29 = cCSMatrix28.isRowMajor();
        cCSMatrix28.set((int) (short) 1, 0, (double) 100L);
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication35 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix40 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator41 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray42 = cCSMatrix40.foldRows(vectorAccumulator41);
        org.la4j.matrix.DenseMatrix denseMatrix43 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray42);
        org.la4j.vector.dense.BasicVector basicVector45 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector46 = ooPlaceMatrixByVectorMultiplication35.apply(denseMatrix43, (org.la4j.vector.DenseVector) basicVector45);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction47 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix51 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix52 = rowMajorSparseMatrix51.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix54 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix55 = ooPlaceMatricesSubtraction47.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix51, denseMatrix54);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix58 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double59 = columnMajorSparseMatrix58.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix62 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double63 = denseMatrix62.min();
        double double64 = denseMatrix62.sum();
        org.la4j.Matrix matrix65 = ooPlaceMatricesSubtraction47.apply(columnMajorSparseMatrix58, denseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix68 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator69 = cRSMatrix68.nonZeroIterator();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation70 = ooPlaceMatricesSubtraction47.partiallyApply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix68);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate71 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix74 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean75 = advancedMatrixPredicate71.test((org.la4j.Matrix) columnMajorSparseMatrix74);
        org.la4j.vector.functor.VectorFunction vectorFunction77 = null;
        org.la4j.Matrix matrix78 = columnMajorSparseMatrix74.transformRow(0, vectorFunction77);
        org.la4j.iterator.VectorIterator vectorIterator80 = columnMajorSparseMatrix74.nonZeroIteratorOfRow((int) (byte) 0);
        org.la4j.Matrix matrix81 = matrixMatrixOperation70.apply(columnMajorSparseMatrix74);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator82 = org.la4j.Vectors.mkMinAccumulator();
        double[] doubleArray83 = matrix81.foldColumns(vectorAccumulator82);
        double double84 = vector46.fold(vectorAccumulator82);
        double double85 = cCSMatrix28.foldColumn(5, vectorAccumulator82);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix86 = rowMajorSparseMatrix22.add((org.la4j.Matrix) cCSMatrix28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 1x0 does not equal to 52x52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertNotNull(denseMatrix24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(cCSMatrix28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cCSMatrix40);
        org.junit.Assert.assertNotNull(vectorAccumulator41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix43);
        org.junit.Assert.assertNotNull(vector46);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(denseMatrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + Double.POSITIVE_INFINITY + "'", double63 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(cRSMatrix68);
        org.junit.Assert.assertNotNull(matrixIterator69);
        org.junit.Assert.assertNotNull(matrixMatrixOperation70);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate71);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(vectorIterator80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(vectorAccumulator82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + Double.POSITIVE_INFINITY + "'", double84 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + (-1.0d) + "'", double85 == (-1.0d));
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.la4j.vector.functor.VectorFunction vectorFunction1 = org.la4j.Vectors.asDivFunction(9.0d);
        org.junit.Assert.assertNotNull(vectorFunction1);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix13 = org.la4j.matrix.dense.Basic1DMatrix.zero((int) (byte) 0, (int) (short) 100);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix16 = org.la4j.matrix.dense.Basic2DMatrix.diagonal(0, 1.0d);
        org.la4j.Matrix matrix17 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix13, (org.la4j.matrix.DenseMatrix) basic2DMatrix16);
        org.la4j.Matrix matrix20 = basic2DMatrix16.blankOfShape(0, 6);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(basic1DMatrix13);
        org.junit.Assert.assertNotNull(basic2DMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertNotNull(matrix20);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) (byte) 1, (-1.0d));
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator3 = cCSMatrix2.nonZeroRowMajorIterator();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = cCSMatrix2.minInColumn((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator3);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        double[][] doubleArray2 = denseMatrix1.toArray();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.from2DArray(doubleArray2);
        org.junit.Assert.assertNotNull(denseMatrix1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(cCSMatrix3);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        double double8 = cCSMatrix3.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator9 = cCSMatrix3.nonZeroIterator();
        int int10 = cCSMatrix3.rank();
        double double12 = cCSMatrix3.maxInColumn((int) (short) 10);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.MatrixIterator matrixIterator15 = columnMajorMatrixIterator13.andAlsoMultiply(matrixIterator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix11 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator17 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray18 = cCSMatrix16.foldRows(vectorAccumulator17);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix19 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray18);
        double[][] doubleArray20 = basic1DMatrix19.toArray();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix21 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray20);
        org.la4j.Matrix matrix24 = basic2DMatrix21.blankOfShape((int) '#', (int) ' ');
        org.la4j.vector.functor.VectorFunction vectorFunction27 = org.la4j.Vectors.asDivFunction((double) 10.0f);
        basic2DMatrix21.updateColumn((-1), vectorFunction27);
        org.la4j.Matrix matrix29 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix11, (org.la4j.matrix.DenseMatrix) basic2DMatrix21);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix32 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        cRSMatrix32.setRow(0, (double) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition36 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix39 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double40 = cRSMatrix39.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        org.la4j.Matrix matrix46 = ooPlaceMatricesAddition36.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix39, rowMajorSparseMatrix44);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition47 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix50 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double51 = cRSMatrix50.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix55 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix56 = rowMajorSparseMatrix55.removeLastRow();
        org.la4j.Matrix matrix57 = ooPlaceMatricesAddition47.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix50, rowMajorSparseMatrix55);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix60 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix62 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition47.apply(columnMajorSparseMatrix60, denseMatrix62);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix67 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix68 = rowMajorSparseMatrix67.removeLastRow();
        double double72 = rowMajorSparseMatrix67.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector73 = rowMajorSparseMatrix67.toRowVector();
        org.la4j.Matrix matrix74 = ooPlaceMatricesAddition36.apply(denseMatrix62, rowMajorSparseMatrix67);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix77 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double80 = cCSMatrix77.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction82 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix83 = cCSMatrix77.transformRow(10, vectorFunction82);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix86 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator87 = cRSMatrix86.nonZeroIterator();
        org.la4j.Vector vector89 = cRSMatrix86.getColumn(100);
        boolean boolean92 = cRSMatrix86.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor93 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix86);
        org.la4j.Matrix matrix94 = ooPlaceMatricesAddition36.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix77, (org.la4j.matrix.SparseMatrix) cRSMatrix86);
        double double95 = cRSMatrix86.manhattanNorm();
        org.la4j.Matrix matrix96 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix32, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix86);
        int int97 = cRSMatrix32.cardinality();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertNotNull(vectorAccumulator17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(vectorFunction27);
        org.junit.Assert.assertNotNull(matrix29);
        org.junit.Assert.assertNotNull(cRSMatrix32);
        org.junit.Assert.assertNotNull(cRSMatrix39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(cRSMatrix50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix60);
        org.junit.Assert.assertNotNull(denseMatrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertNotNull(vector73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(cCSMatrix77);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(cRSMatrix86);
        org.junit.Assert.assertNotNull(matrixIterator87);
        org.junit.Assert.assertNotNull(vector89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(matrix94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 100.0d + "'", double95 == 100.0d);
        org.junit.Assert.assertNotNull(matrix96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 19 + "'", int97 == 19);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix14 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double15 = columnMajorSparseMatrix14.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory16 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix17 = columnMajorSparseMatrix14.to(basic1DMatrixMatrixFactory16);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition18 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix21 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double22 = cRSMatrix21.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix26 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix26.removeLastRow();
        org.la4j.Matrix matrix28 = ooPlaceMatricesAddition18.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix21, rowMajorSparseMatrix26);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition29 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix32 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double33 = cRSMatrix32.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix37 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix37.removeLastRow();
        org.la4j.Matrix matrix39 = ooPlaceMatricesAddition29.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix32, rowMajorSparseMatrix37);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix42 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix44 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix45 = ooPlaceMatricesAddition29.apply(columnMajorSparseMatrix42, denseMatrix44);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix49 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix49.removeLastRow();
        double double54 = rowMajorSparseMatrix49.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector55 = rowMajorSparseMatrix49.toRowVector();
        org.la4j.Matrix matrix56 = ooPlaceMatricesAddition18.apply(denseMatrix44, rowMajorSparseMatrix49);
        org.la4j.matrix.SparseMatrix sparseMatrix57 = denseMatrix44.toSparseMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix58 = denseMatrix44.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix59 = ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix14, rowMajorSparseMatrix58);
        org.la4j.Matrix matrix60 = rowMajorSparseMatrix58.rotate();
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory16);
        org.junit.Assert.assertNotNull(basic1DMatrix17);
        org.junit.Assert.assertNotNull(cRSMatrix21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(cRSMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(denseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(vector55);
        org.junit.Assert.assertNotNull(matrix56);
        org.junit.Assert.assertNotNull(sparseMatrix57);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix58);
        org.junit.Assert.assertNotNull(matrix59);
        org.junit.Assert.assertNotNull(matrix60);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix1 = org.la4j.matrix.dense.Basic2DMatrix.fromCSV("1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000");
        org.junit.Assert.assertNotNull(basic2DMatrix1);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix3 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction4 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix7 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean8 = cCSMatrix7.isRowMajor();
        org.la4j.Matrix matrix11 = cCSMatrix7.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator12 = cCSMatrix7.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix18 = rowMajorSparseMatrix16.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix22 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double26 = rowMajorSparseMatrix22.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix27 = rowMajorSparseMatrix22.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean29 = sparseMatrix27.equals((java.lang.Object) ooPlaceOuterProduct28);
        org.la4j.Matrix matrix30 = rowMajorSparseMatrix16.hadamardProduct((org.la4j.Matrix) sparseMatrix27);
        org.la4j.Matrix matrix31 = ooPlaceMatricesSubtraction4.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix7, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix3, rowMajorSparseMatrix16);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix36 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix36.divide((double) (-1));
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor42 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix41);
        org.la4j.Matrix matrix43 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix36, (org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver44 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix43);
        int int45 = forwardBackSubstitutionSolver44.equations();
        int int46 = forwardBackSubstitutionSolver44.unknowns();
        org.junit.Assert.assertNotNull(basic2DMatrix3);
        org.junit.Assert.assertNotNull(cCSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix18);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix22);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0d + "'", double26 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix36);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.la4j.vector.SparseVector sparseVector1 = org.la4j.vector.SparseVector.zero((int) '4');
        org.la4j.Vector vector3 = sparseVector1.multiply((double) 10.0f);
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.vector.dense.BasicVector basicVector5 = vector3.to(basicVectorVectorFactory4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(sparseVector1);
        org.junit.Assert.assertNotNull(vector3);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator9 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray10 = cCSMatrix8.foldRows(vectorAccumulator9);
        org.la4j.matrix.DenseMatrix denseMatrix11 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray10);
        org.la4j.vector.dense.BasicVector basicVector12 = new org.la4j.vector.dense.BasicVector(doubleArray10);
        org.la4j.matrix.SparseMatrix sparseMatrix13 = org.la4j.matrix.SparseMatrix.from1DArray((int) (byte) 0, (int) '4', doubleArray10);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.from1DArray(0, 52, doubleArray10);
        org.la4j.vector.sparse.CompressedVector compressedVector15 = org.la4j.vector.sparse.CompressedVector.fromArray(doubleArray10);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertNotNull(vectorAccumulator9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix11);
        org.junit.Assert.assertNotNull(sparseMatrix13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(compressedVector15);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean3 = cCSMatrix2.isRowMajor();
        org.la4j.Matrix matrix6 = cCSMatrix2.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator7 = cCSMatrix2.nonZeroColumnMajorIterator();
        double double10 = cCSMatrix2.get(0, (int) (byte) 1);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator11 = org.la4j.Matrices.mkInfinityNormAccumulator();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure12 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator11);
        cCSMatrix2.eachNonZero(matrixProcedure12);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory14 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix15 = cCSMatrix2.to(basic1DMatrixMatrixFactory14);
        basic1DMatrix15.setAll(Double.POSITIVE_INFINITY);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter18 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) basic1DMatrix15);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator7);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(matrixAccumulator11);
        org.junit.Assert.assertNotNull(matrixProcedure12);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory14);
        org.junit.Assert.assertNotNull(basic1DMatrix15);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double3 = cCSMatrix2.max();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication4 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix7 = ooPlaceMatrixByItsTransposeMultiplication4.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix6);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction8 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix11 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction12 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix15 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean16 = cCSMatrix15.isRowMajor();
        org.la4j.Matrix matrix19 = cCSMatrix15.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator20 = cCSMatrix15.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix24 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix24.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix30 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double34 = rowMajorSparseMatrix30.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix35 = rowMajorSparseMatrix30.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct36 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean37 = sparseMatrix35.equals((java.lang.Object) ooPlaceOuterProduct36);
        org.la4j.Matrix matrix38 = rowMajorSparseMatrix24.hadamardProduct((org.la4j.Matrix) sparseMatrix35);
        org.la4j.Matrix matrix39 = ooPlaceMatricesSubtraction12.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix15, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix24);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction8.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix11, rowMajorSparseMatrix24);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor41 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix24);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix44 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator45 = cRSMatrix44.nonZeroIterator();
        org.la4j.Vector vector47 = cRSMatrix44.getColumn(100);
        boolean boolean50 = cRSMatrix44.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor51 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix44);
        double double52 = cRSMatrix44.infinityNorm();
        boolean boolean53 = singularValueDecompositor41.applicableTo((org.la4j.Matrix) cRSMatrix44);
        org.la4j.Matrix matrix54 = ooPlaceMatrixByItsTransposeMultiplication4.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix44);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct55 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix58 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator59 = cCSMatrix58.iterator();
        org.la4j.Vector vector62 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction64 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector65 = vector62.transform(vectorFunction64);
        org.la4j.Matrix matrix66 = cCSMatrix58.transformRow(0, vectorFunction64);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction67 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix71 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix72 = rowMajorSparseMatrix71.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix74 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix75 = ooPlaceMatricesSubtraction67.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix71, denseMatrix74);
        org.la4j.Matrix matrix76 = ooPlaceMatrixHadamardProduct55.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix58, denseMatrix74);
        org.la4j.Matrix matrix77 = ooPlaceMatrixByItsTransposeMultiplication4.apply(denseMatrix74);
        org.la4j.Matrix matrix78 = cCSMatrix2.apply((org.la4j.operation.MatrixOperation<org.la4j.Matrix>) ooPlaceMatrixByItsTransposeMultiplication4);
        cCSMatrix2.setAll((double) (short) -1);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(basic2DMatrix11);
        org.junit.Assert.assertNotNull(cCSMatrix15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator20);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix30);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(cRSMatrix44);
        org.junit.Assert.assertNotNull(matrixIterator45);
        org.junit.Assert.assertNotNull(vector47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(cCSMatrix58);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator59);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(vectorFunction64);
        org.junit.Assert.assertNotNull(vector65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(denseMatrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.la4j.matrix.SparseMatrix sparseMatrix2 = org.la4j.matrix.SparseMatrix.zero((int) (short) 1, (int) (short) 1);
        org.junit.Assert.assertNotNull(sparseMatrix2);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator4 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray5 = cCSMatrix3.foldRows(vectorAccumulator4);
        org.la4j.Matrix matrix6 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix3);
        double double8 = cCSMatrix3.minInColumn(0);
        double double10 = cCSMatrix3.maxInColumn((int) (short) 0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator18 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray19 = cCSMatrix17.foldRows(vectorAccumulator18);
        org.la4j.matrix.DenseMatrix denseMatrix20 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray19);
        org.la4j.vector.dense.BasicVector basicVector21 = new org.la4j.vector.dense.BasicVector(doubleArray19);
        double[] doubleArray22 = basicVector21.toArray();
        int[] intArray28 = new int[] { 52, (byte) -1, ' ', (byte) 100, 0 };
        org.la4j.vector.sparse.CompressedVector compressedVector29 = new org.la4j.vector.sparse.CompressedVector((int) (byte) 0, (int) (short) 1, doubleArray22, intArray28);
        int[] intArray36 = new int[] { (short) 1, ' ', (byte) 1, '#', (byte) -1, (short) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix37 = cCSMatrix3.select(intArray28, intArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(vectorAccumulator4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.0d) + "'", double8 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(cCSMatrix17);
        org.junit.Assert.assertNotNull(vectorAccumulator18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[52, -1, 32, 100, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1, 32, 1, 35, -1, 0]");
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver23 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix22);
        int int24 = forwardBackSubstitutionSolver23.unknowns();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation25 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray32 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray39 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray46 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray53 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray60 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray61 = new double[][] { doubleArray32, doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix62 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray61);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation63 = matrixMatrixMatrixOperation25.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix62);
        org.la4j.iterator.MatrixIterator matrixIterator64 = basic2DMatrix62.iterator();
        org.la4j.Matrix matrix67 = basic2DMatrix62.copyOfShape((int) ' ', 10);
        boolean boolean68 = forwardBackSubstitutionSolver23.applicableTo((org.la4j.Matrix) basic2DMatrix62);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory69 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix70 = basic2DMatrix62.to(basic1DMatrixMatrixFactory69);
        // The following exception was thrown during execution in test generation
        try {
            basic2DMatrix62.set((int) (short) 100, 30, (-2.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(basic2DMatrix62);
        org.junit.Assert.assertNotNull(matrixMatrixOperation63);
        org.junit.Assert.assertNotNull(matrixIterator64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory69);
        org.junit.Assert.assertNotNull(basic1DMatrix70);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.la4j.vector.sparse.CompressedVector compressedVector2 = org.la4j.vector.sparse.CompressedVector.zero((int) (byte) 100, (int) '4');
        org.la4j.vector.sparse.CompressedVector compressedVector4 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat5 = null;
        java.lang.String str6 = compressedVector4.toMatrixMarket(numberFormat5);
        java.text.NumberFormat numberFormat7 = null;
        java.lang.String str8 = compressedVector4.toMatrixMarket(numberFormat7);
        org.la4j.Matrix matrix9 = compressedVector4.toColumnMatrix();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix12 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        cRSMatrix12.setRow(0, (double) '4');
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct17 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix22 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator23 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray24 = cCSMatrix22.foldRows(vectorAccumulator23);
        org.la4j.matrix.DenseMatrix denseMatrix25 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray24);
        org.la4j.vector.dense.BasicVector basicVector26 = new org.la4j.vector.dense.BasicVector(doubleArray24);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix31 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator32 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray33 = cCSMatrix31.foldRows(vectorAccumulator32);
        org.la4j.matrix.DenseMatrix denseMatrix34 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray33);
        org.la4j.vector.dense.BasicVector basicVector35 = new org.la4j.vector.dense.BasicVector(doubleArray33);
        ooPlaceOuterProduct17.ensureApplicableTo((org.la4j.Vector) basicVector26, (org.la4j.Vector) basicVector35);
        org.la4j.vector.sparse.CompressedVector compressedVector38 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector38.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector43 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix44 = ooPlaceOuterProduct17.apply((org.la4j.vector.SparseVector) compressedVector38, (org.la4j.vector.SparseVector) compressedVector43);
        org.la4j.vector.functor.VectorFunction vectorFunction46 = org.la4j.Vectors.INC_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator47 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) 100, vectorFunction46);
        double double48 = compressedVector38.fold(vectorAccumulator47);
        org.la4j.vector.functor.VectorProcedure vectorProcedure49 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator47);
        cRSMatrix12.eachNonZeroInColumn(10, vectorProcedure49);
        compressedVector4.eachNonZero(vectorProcedure49);
        compressedVector2.eachNonZero(vectorProcedure49);
        org.junit.Assert.assertNotNull(compressedVector2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str6, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str8, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(cRSMatrix12);
        org.junit.Assert.assertNotNull(cCSMatrix22);
        org.junit.Assert.assertNotNull(vectorAccumulator23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix25);
        org.junit.Assert.assertNotNull(cCSMatrix31);
        org.junit.Assert.assertNotNull(vectorAccumulator32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix34);
        org.junit.Assert.assertNotNull(matrix44);
        org.junit.Assert.assertNotNull(vectorFunction46);
        org.junit.Assert.assertNotNull(vectorAccumulator47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(vectorProcedure49);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix1 = org.la4j.matrix.RowMajorSparseMatrix.fromCSV("1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000");
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix1);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.zero((int) (byte) 1);
        org.la4j.operation.VectorMatrixOperation<org.la4j.Vector> vectorVectorMatrixOperation2 = org.la4j.LinearAlgebra.OO_PLACE_VECTOR_BY_MATRIX_MULTIPLICATION;
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication3 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator9 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray10 = cCSMatrix8.foldRows(vectorAccumulator9);
        org.la4j.matrix.DenseMatrix denseMatrix11 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray10);
        org.la4j.vector.dense.BasicVector basicVector13 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector14 = ooPlaceMatrixByVectorMultiplication3.apply(denseMatrix11, (org.la4j.vector.DenseVector) basicVector13);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation15 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray22 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray29 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray36 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray43 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray50 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray51 = new double[][] { doubleArray22, doubleArray29, doubleArray36, doubleArray43, doubleArray50 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix52 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray51);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation53 = matrixMatrixMatrixOperation15.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix52);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation54 = ooPlaceMatrixByVectorMultiplication3.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix52);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix57 = org.la4j.matrix.sparse.CRSMatrix.zero((int) (byte) 0, (int) (short) 1);
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator58 = cRSMatrix57.nonZeroRowMajorIterator();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct59 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random61 = null;
        org.la4j.vector.DenseVector denseVector62 = org.la4j.vector.DenseVector.random(0, random61);
        java.util.Random random64 = null;
        org.la4j.vector.DenseVector denseVector65 = org.la4j.vector.DenseVector.random(0, random64);
        org.la4j.Matrix matrix66 = ooPlaceOuterProduct59.apply(denseVector62, denseVector65);
        java.text.NumberFormat numberFormat67 = null;
        java.lang.String str68 = denseVector65.toCSV(numberFormat67);
        org.la4j.Vector vector69 = ooPlaceMatrixByVectorMultiplication3.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix57, denseVector65);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix72 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (short) 1, 0);
        org.la4j.Matrix matrix73 = rowMajorSparseMatrix72.shuffle();
        org.la4j.Vector vector74 = vectorVectorMatrixOperation2.apply(denseVector65, rowMajorSparseMatrix72);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix77 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator78 = cRSMatrix77.nonZeroIterator();
        org.la4j.Vector vector80 = cRSMatrix77.getColumn(100);
        boolean boolean83 = cRSMatrix77.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor84 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix77);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector85 = basicVector1.apply(vectorVectorMatrixOperation2, (org.la4j.Matrix) cRSMatrix77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of rows in the given matrix: 1 does not equal to 10.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basicVector1);
        org.junit.Assert.assertNotNull(vectorVectorMatrixOperation2);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertNotNull(vectorAccumulator9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix11);
        org.junit.Assert.assertNotNull(vector14);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation15);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(basic2DMatrix52);
        org.junit.Assert.assertNotNull(matrixMatrixOperation53);
        org.junit.Assert.assertNotNull(vectorVectorOperation54);
        org.junit.Assert.assertNotNull(cRSMatrix57);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(denseVector62);
        org.junit.Assert.assertNotNull(denseVector65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(vector74);
        org.junit.Assert.assertNotNull(cRSMatrix77);
        org.junit.Assert.assertNotNull(matrixIterator78);
        org.junit.Assert.assertNotNull(vector80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.la4j.Matrix matrix1 = org.la4j.Matrix.identity(0);
        org.junit.Assert.assertNotNull(matrix1);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double33 = denseMatrix32.min();
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix29, denseMatrix32);
        java.util.Random random36 = null;
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.randomSymmetric(0, random36);
        double[][] doubleArray38 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray38);
        org.la4j.matrix.DenseMatrix denseMatrix40 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray38);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = denseMatrix40.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix42 = ooPlaceMatricesSubtraction0.apply(denseMatrix37, denseMatrix40);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction43 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix46 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean47 = cCSMatrix46.isRowMajor();
        org.la4j.Matrix matrix50 = cCSMatrix46.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator51 = cCSMatrix46.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix55 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix57 = rowMajorSparseMatrix55.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double65 = rowMajorSparseMatrix61.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix66 = rowMajorSparseMatrix61.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct67 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean68 = sparseMatrix66.equals((java.lang.Object) ooPlaceOuterProduct67);
        org.la4j.Matrix matrix69 = rowMajorSparseMatrix55.hadamardProduct((org.la4j.Matrix) sparseMatrix66);
        org.la4j.Matrix matrix70 = ooPlaceMatricesSubtraction43.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix46, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix55);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct71 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix74 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double75 = cRSMatrix74.min();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate76 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix79 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean80 = advancedMatrixPredicate76.test((org.la4j.Matrix) columnMajorSparseMatrix79);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter81 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix79);
        org.la4j.Matrix matrix82 = ooPlaceMatrixHadamardProduct71.applySymmetric((org.la4j.matrix.SparseMatrix) cRSMatrix74, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix79);
        org.la4j.Matrix matrix83 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix46, columnMajorSparseMatrix79);
        org.la4j.Matrix matrix85 = columnMajorSparseMatrix79.power((int) (byte) 10);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(denseMatrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(cCSMatrix46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator51);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.0d + "'", double65 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertNotNull(cRSMatrix74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 0.0d + "'", double75 == 0.0d);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate76);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(matrix85);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        double[] doubleArray6 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray35 = new double[][] { doubleArray6, doubleArray13, doubleArray20, doubleArray27, doubleArray34 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix36 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix37 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray35);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix38 = org.la4j.matrix.dense.Basic1DMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray35);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix42 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator43 = cRSMatrix42.nonZeroIterator();
        org.la4j.Vector vector45 = cRSMatrix42.getColumn(100);
        boolean boolean48 = cRSMatrix42.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator50 = cRSMatrix42.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix51 = cRSMatrix42.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory52 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix53 = cRSMatrix42.to(basic1DMatrixMatrixFactory52);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix54 = denseMatrix39.to(basic1DMatrixMatrixFactory52);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.decomposition.RawQRDecompositor rawQRDecompositor55 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic1DMatrix54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrix can not be used with this decompositor.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(basic2DMatrix36);
        org.junit.Assert.assertNotNull(basic1DMatrix38);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cRSMatrix42);
        org.junit.Assert.assertNotNull(matrixIterator43);
        org.junit.Assert.assertNotNull(vector45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(vectorIterator50);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix51);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory52);
        org.junit.Assert.assertNotNull(basic1DMatrix53);
        org.junit.Assert.assertNotNull(basic1DMatrix54);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor5 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double6 = cRSMatrix2.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix9 = cRSMatrix2.kroneckerProduct((org.la4j.Matrix) basic2DMatrix8);
        org.la4j.Matrix matrix10 = cRSMatrix2.copy();
        java.util.Iterator<java.lang.Integer> intItor11 = cRSMatrix2.iteratorOfNonZeroRows();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix15 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix16 = rowMajorSparseMatrix15.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction18 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator19 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction18);
        double double20 = matrix16.fold(matrixAccumulator19);
        double double21 = matrixAccumulator19.accumulate();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure22 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator19);
        // The following exception was thrown during execution in test generation
        try {
            cRSMatrix2.each(matrixProcedure22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(intItor11);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(matrixAccumulator19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-1.0d) + "'", double20 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-1.0d) + "'", double21 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure22);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct6 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix10 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix11 = rowMajorSparseMatrix10.removeLastRow();
        double double15 = rowMajorSparseMatrix10.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int16 = rowMajorSparseMatrix10.cardinality();
        org.la4j.Vector vector18 = rowMajorSparseMatrix10.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct6.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix10, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix21);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate23 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix26 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean27 = advancedMatrixPredicate23.test((org.la4j.Matrix) columnMajorSparseMatrix26);
        org.la4j.vector.functor.VectorFunction vectorFunction29 = null;
        org.la4j.Matrix matrix30 = columnMajorSparseMatrix26.transformRow(0, vectorFunction29);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix31 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction32 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix35 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction36 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix39 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean40 = cCSMatrix39.isRowMajor();
        org.la4j.Matrix matrix43 = cCSMatrix39.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator44 = cCSMatrix39.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix48 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix48.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix54 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double58 = rowMajorSparseMatrix54.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix59 = rowMajorSparseMatrix54.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct60 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean61 = sparseMatrix59.equals((java.lang.Object) ooPlaceOuterProduct60);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix48.hadamardProduct((org.la4j.Matrix) sparseMatrix59);
        org.la4j.Matrix matrix63 = ooPlaceMatricesSubtraction36.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix39, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix48);
        org.la4j.Matrix matrix64 = ooPlaceMatricesSubtraction32.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix35, rowMajorSparseMatrix48);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor65 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix48);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix68 = inPlaceCopyMatrixToMatrix31.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix48, (org.la4j.matrix.SparseMatrix) cRSMatrix67);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix72 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix73 = rowMajorSparseMatrix72.removeLastRow();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix77 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix79 = rowMajorSparseMatrix77.divide((double) (-1));
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory80 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix81 = matrix79.to(basic1DMatrixMatrixFactory80);
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix31.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix72, (org.la4j.matrix.DenseMatrix) basic1DMatrix81);
        org.la4j.Matrix matrix83 = ooPlaceMatrixHadamardProduct6.apply(columnMajorSparseMatrix26, (org.la4j.matrix.DenseMatrix) basic1DMatrix81);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator84 = null;
        double[] doubleArray85 = columnMajorSparseMatrix26.foldNonZeroInRows(vectorAccumulator84);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix86 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 1, 0, doubleArray85);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix87 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (short) 10, 1, doubleArray85);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CRSMatrix cRSMatrix88 = org.la4j.matrix.sparse.CRSMatrix.from1DArray((int) (short) -1, 52, doubleArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x52");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(vector18);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate23);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(matrix30);
        org.junit.Assert.assertNotNull(basic2DMatrix35);
        org.junit.Assert.assertNotNull(cCSMatrix39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator44);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix48);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix54);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0d + "'", double58 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix77);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory80);
        org.junit.Assert.assertNotNull(basic1DMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]");
        org.junit.Assert.assertNotNull(basic1DMatrix86);
        org.junit.Assert.assertNotNull(basic1DMatrix87);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor5 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix2);
        double double6 = cRSMatrix2.max();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix8 = org.la4j.matrix.dense.Basic2DMatrix.identity(0);
        org.la4j.Matrix matrix9 = cRSMatrix2.kroneckerProduct((org.la4j.Matrix) basic2DMatrix8);
        org.la4j.linear.LeastSquaresSolver leastSquaresSolver10 = new org.la4j.linear.LeastSquaresSolver((org.la4j.Matrix) basic2DMatrix8);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix13 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator14 = cRSMatrix13.nonZeroIterator();
        boolean boolean15 = leastSquaresSolver10.applicableTo((org.la4j.Matrix) cRSMatrix13);
        org.la4j.Matrix matrix16 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = leastSquaresSolver10.applicableTo(matrix16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(basic2DMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(cRSMatrix13);
        org.junit.Assert.assertNotNull(matrixIterator14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.la4j.matrix.functor.MatrixFunction matrixFunction2 = org.la4j.Matrices.DEC_FUNCTION;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator3 = org.la4j.Matrices.asSumFunctionAccumulator((double) (short) -1, matrixFunction2);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator4 = org.la4j.Matrices.asSumFunctionAccumulator((double) (byte) 10, matrixFunction2);
        org.junit.Assert.assertNotNull(matrixFunction2);
        org.junit.Assert.assertNotNull(matrixAccumulator3);
        org.junit.Assert.assertNotNull(matrixAccumulator4);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.la4j.Vector vector1 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str2 = vector1.toCSV();
        org.la4j.vector.SparseVector sparseVector3 = vector1.toSparseVector();
        boolean boolean5 = sparseVector3.isZeroAt(52);
        double double6 = sparseVector3.manhattanNorm();
        org.junit.Assert.assertNotNull(vector1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str2, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.la4j.Matrix matrix6 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray9 = matrix6.foldColumns(vectorAccumulator8);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix10 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) 'a', (int) (byte) 0, doubleArray9);
        org.la4j.vector.DenseVector denseVector11 = org.la4j.vector.DenseVector.fromArray(doubleArray9);
        org.la4j.matrix.SparseMatrix sparseMatrix12 = org.la4j.matrix.SparseMatrix.from1DArray((int) (byte) 1, (int) (byte) 0, doubleArray9);
        org.la4j.vector.sparse.CompressedVector compressedVector13 = org.la4j.vector.sparse.CompressedVector.fromArray(doubleArray9);
        org.la4j.vector.functor.VectorFunction vectorFunction16 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        double double19 = vectorFunction16.evaluate((int) (short) -1, (double) 100L);
        compressedVector13.updateAt(0, vectorFunction16);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(basic2DMatrix10);
        org.junit.Assert.assertNotNull(denseVector11);
        org.junit.Assert.assertNotNull(sparseMatrix12);
        org.junit.Assert.assertNotNull(compressedVector13);
        org.junit.Assert.assertNotNull(vectorFunction16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.la4j.Matrix matrix2 = org.la4j.Matrix.zero((int) (byte) 1, (int) (short) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = matrix2.toRowMajorSparseMatrix();
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        org.junit.Assert.assertNotNull(matrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.unit((int) ' ');
        org.la4j.Matrix matrix2 = basicVector1.toRowMatrix();
        org.junit.Assert.assertNotNull(basicVector1);
        org.junit.Assert.assertNotNull(matrix2);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray20 = columnMajorSparseMatrix19.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation21 = ooPlaceMatricesAddition0.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix24 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator25 = cCSMatrix24.iterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix28 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double31 = cCSMatrix28.get((int) (byte) 0, (int) (short) 1);
        double double32 = cCSMatrix28.min();
        org.la4j.Matrix matrix33 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix24, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix28);
        double double35 = cCSMatrix24.maxInColumn((int) (byte) 1);
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation21);
        org.junit.Assert.assertNotNull(cCSMatrix24);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator25);
        org.junit.Assert.assertNotNull(cCSMatrix28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.0d) + "'", double32 == (-1.0d));
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asConstFunction((double) (byte) 1);
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        double double28 = compressedVector26.min();
        org.la4j.iterator.VectorIterator vectorIterator29 = compressedVector26.iterator();
        org.la4j.vector.functor.VectorFunction vectorFunction32 = org.la4j.Vectors.asMinusFunction((double) 100);
        compressedVector26.updateAt(0, vectorFunction32);
        int int34 = compressedVector26.length();
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(vectorIterator29);
        org.junit.Assert.assertNotNull(vectorFunction32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 32 + "'", int34 == 32);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.la4j.vector.dense.BasicVector basicVector1 = org.la4j.vector.dense.BasicVector.unit((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector3 = basicVector1.copyOfLength((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong vector length: -1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basicVector1);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = cRSMatrix2.toRowMajorSparseMatrix();
        java.util.Iterator<java.lang.Integer> intItor12 = cRSMatrix2.iteratorOfNonZeroRows();
        boolean boolean13 = cRSMatrix2.isRowMajor();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
        org.junit.Assert.assertNotNull(intItor12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.la4j.matrix.SparseMatrix sparseMatrix2 = org.la4j.matrix.SparseMatrix.diagonal((int) '4', (double) 19);
        org.junit.Assert.assertNotNull(sparseMatrix2);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix4 = rowMajorSparseMatrix3.removeLastRow();
        double double6 = matrix4.maxInColumn((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix7 = matrix4.removeFirstRow();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal row number, must be 0..-1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.NEGATIVE_INFINITY + "'", double6 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.DEC_FUNCTION;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator2 = org.la4j.Matrices.asSumFunctionAccumulator((double) (short) -1, matrixFunction1);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure3 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator2);
        org.junit.Assert.assertNotNull(matrixFunction1);
        org.junit.Assert.assertNotNull(matrixAccumulator2);
        org.junit.Assert.assertNotNull(matrixProcedure3);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.la4j.matrix.functor.MatrixFunction matrixFunction1 = org.la4j.Matrices.asPlusFunction((double) (short) 1);
        org.junit.Assert.assertNotNull(matrixFunction1);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator4 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.Matrix matrix5 = cCSMatrix3.transpose();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix10 = cCSMatrix8.transpose();
        ooPlaceMatricesMultiplication0.ensureApplicableTo((org.la4j.Matrix) cCSMatrix3, matrix10);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct12 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix16 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix17 = rowMajorSparseMatrix16.removeLastRow();
        double double21 = rowMajorSparseMatrix16.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int22 = rowMajorSparseMatrix16.cardinality();
        org.la4j.Vector vector24 = rowMajorSparseMatrix16.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix27 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix28 = ooPlaceMatrixHadamardProduct12.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix16, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix27);
        org.la4j.matrix.DenseMatrix denseMatrix30 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.identity((int) (short) 100);
        org.la4j.Matrix matrix33 = ooPlaceMatrixHadamardProduct12.apply(denseMatrix30, denseMatrix32);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix34 = new org.la4j.matrix.sparse.CRSMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix37 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix41 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix41.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction44 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator45 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction44);
        double double46 = matrix42.fold(matrixAccumulator45);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure47 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator45);
        cCSMatrix37.eachNonZero(matrixProcedure47);
        cRSMatrix34.eachNonZero(matrixProcedure47);
        java.util.Random random52 = null;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix53 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric((int) (short) 100, Double.NaN, random52);
        org.la4j.Matrix matrix54 = ooPlaceMatrixHadamardProduct12.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix34, columnMajorSparseMatrix53);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct55 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix59 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix60 = rowMajorSparseMatrix59.removeLastRow();
        double double64 = rowMajorSparseMatrix59.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int65 = rowMajorSparseMatrix59.cardinality();
        org.la4j.Vector vector67 = rowMajorSparseMatrix59.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix70 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix71 = ooPlaceMatrixHadamardProduct55.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix59, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix70);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix75 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix75.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure77 = null;
        rowMajorSparseMatrix75.eachNonZero(matrixProcedure77);
        double[][] doubleArray79 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix80 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray79);
        org.la4j.Matrix matrix81 = ooPlaceMatrixHadamardProduct55.apply(rowMajorSparseMatrix75, denseMatrix80);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate82 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix85 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean86 = advancedMatrixPredicate82.test((org.la4j.Matrix) columnMajorSparseMatrix85);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter87 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix85);
        org.la4j.Matrix matrix88 = denseMatrix80.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix85);
        java.util.Iterator<java.lang.Integer> intItor89 = columnMajorSparseMatrix85.iteratorOrNonZeroColumns();
        org.la4j.Matrix matrix90 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix34, columnMajorSparseMatrix85);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix16);
        org.junit.Assert.assertNotNull(matrix17);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(vector24);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(denseMatrix30);
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrixAccumulator45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-1.0d) + "'", double46 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure47);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix53);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix59);
        org.junit.Assert.assertNotNull(matrix60);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(vector67);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(denseMatrix80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate82);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(matrix88);
        org.junit.Assert.assertNotNull(intItor89);
        org.junit.Assert.assertNotNull(matrix90);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        double[] doubleArray10 = basicVector9.toArray();
        org.la4j.Vector vector12 = basicVector9.blankOfLength((int) 'a');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction13 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix16 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean17 = cCSMatrix16.isRowMajor();
        org.la4j.Matrix matrix20 = cCSMatrix16.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator21 = cCSMatrix16.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix25 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix27 = rowMajorSparseMatrix25.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double35 = rowMajorSparseMatrix31.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix36 = rowMajorSparseMatrix31.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct37 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean38 = sparseMatrix36.equals((java.lang.Object) ooPlaceOuterProduct37);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix25.hadamardProduct((org.la4j.Matrix) sparseMatrix36);
        org.la4j.Matrix matrix40 = ooPlaceMatricesSubtraction13.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix16, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix44 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix44.removeLastRow();
        double double49 = rowMajorSparseMatrix44.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int50 = rowMajorSparseMatrix44.cardinality();
        org.la4j.Vector vector52 = rowMajorSparseMatrix44.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation53 = ooPlaceMatricesSubtraction13.partiallyApply(rowMajorSparseMatrix44);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator57 = cRSMatrix56.nonZeroIterator();
        org.la4j.Vector vector59 = cRSMatrix56.getColumn(100);
        boolean boolean62 = cRSMatrix56.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor63 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix56);
        org.la4j.Matrix matrix64 = rawLUDecompositor63.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix67 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        ooPlaceMatricesSubtraction13.ensureApplicableTo(matrix64, (org.la4j.Matrix) cRSMatrix67);
        org.la4j.Vector vector69 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector9, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix67);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct70 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        java.util.Random random72 = null;
        org.la4j.vector.DenseVector denseVector73 = org.la4j.vector.DenseVector.random(0, random72);
        java.util.Random random75 = null;
        org.la4j.vector.DenseVector denseVector76 = org.la4j.vector.DenseVector.random(0, random75);
        org.la4j.Matrix matrix77 = ooPlaceOuterProduct70.apply(denseVector73, denseVector76);
        org.la4j.Vector vector79 = denseVector73.copyOfLength((int) 'a');
        org.la4j.operation.MatrixOperation<org.la4j.Vector> vectorMatrixOperation80 = ooPlaceVectorByMatrixMultiplication0.partiallyApply(denseVector73);
        org.la4j.vector.DenseVector denseVector82 = org.la4j.vector.DenseVector.unit((int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix87 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator88 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray89 = cCSMatrix87.foldRows(vectorAccumulator88);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix90 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray89);
        org.la4j.Vector vector91 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector82, (org.la4j.matrix.DenseMatrix) basic1DMatrix90);
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(cCSMatrix16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator21);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix44);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(vector52);
        org.junit.Assert.assertNotNull(matrixMatrixOperation53);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertNotNull(matrixIterator57);
        org.junit.Assert.assertNotNull(vector59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(cRSMatrix67);
        org.junit.Assert.assertNotNull(vector69);
        org.junit.Assert.assertNotNull(denseVector73);
        org.junit.Assert.assertNotNull(denseVector76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(vector79);
        org.junit.Assert.assertNotNull(vectorMatrixOperation80);
        org.junit.Assert.assertNotNull(denseVector82);
        org.junit.Assert.assertNotNull(cCSMatrix87);
        org.junit.Assert.assertNotNull(vectorAccumulator88);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix90);
        org.junit.Assert.assertNotNull(vector91);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.zero((int) '#', (int) 'a');
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory3 = org.la4j.LinearAlgebra.DecompositorFactory.SVD;
        org.la4j.decomposition.MatrixDecompositor matrixDecompositor4 = basic1DMatrix2.withDecompositor(decompositorFactory3);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix7 = org.la4j.matrix.sparse.CRSMatrix.diagonal(0, (double) (short) 100);
        boolean boolean8 = matrixDecompositor4.applicableTo((org.la4j.Matrix) cRSMatrix7);
        org.junit.Assert.assertNotNull(basic1DMatrix2);
        org.junit.Assert.assertNotNull(decompositorFactory3);
        org.junit.Assert.assertNotNull(matrixDecompositor4);
        org.junit.Assert.assertNotNull(cRSMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        java.util.Iterator<java.lang.Integer> intItor38 = cRSMatrix36.iteratorOfNonZeroRows();
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(intItor38);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 10, (int) (byte) 1);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix7 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double11 = rowMajorSparseMatrix7.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix12 = rowMajorSparseMatrix7.toSparseMatrix();
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate13 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean14 = sparseMatrix12.is(advancedMatrixPredicate13);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator16 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double17 = sparseMatrix12.foldNonZeroInColumn((int) (byte) 0, vectorAccumulator16);
        org.la4j.vector.functor.VectorProcedure vectorProcedure18 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator16);
        cCSMatrix2.eachNonZeroInRow((int) '#', vectorProcedure18);
        org.la4j.Vector vector21 = cCSMatrix2.getRow((int) (short) 1);
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix12);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(vectorAccumulator16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(vectorProcedure18);
        org.junit.Assert.assertNotNull(vector21);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double8 = rowMajorSparseMatrix4.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix9 = rowMajorSparseMatrix4.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct10 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean11 = sparseMatrix9.equals((java.lang.Object) ooPlaceOuterProduct10);
        org.la4j.vector.dense.BasicVector basicVector13 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector14 = basicVector13.copy();
        org.la4j.Matrix matrix15 = basicVector13.toDiagonalMatrix();
        org.la4j.Vector vector17 = basicVector13.blankOfLength(52);
        org.la4j.vector.SparseVector sparseVector19 = org.la4j.vector.SparseVector.fromCSV("1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct20 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator26 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray27 = cCSMatrix25.foldRows(vectorAccumulator26);
        org.la4j.matrix.DenseMatrix denseMatrix28 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray27);
        org.la4j.vector.dense.BasicVector basicVector29 = new org.la4j.vector.dense.BasicVector(doubleArray27);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix34 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator35 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray36 = cCSMatrix34.foldRows(vectorAccumulator35);
        org.la4j.matrix.DenseMatrix denseMatrix37 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray36);
        org.la4j.vector.dense.BasicVector basicVector38 = new org.la4j.vector.dense.BasicVector(doubleArray36);
        ooPlaceOuterProduct20.ensureApplicableTo((org.la4j.Vector) basicVector29, (org.la4j.Vector) basicVector38);
        org.la4j.Matrix matrix40 = basicVector38.toColumnMatrix();
        org.la4j.Matrix matrix41 = sparseVector19.outerProduct((org.la4j.Vector) basicVector38);
        org.la4j.Matrix matrix42 = basicVector38.toRowMatrix();
        org.la4j.Matrix matrix43 = ooPlaceOuterProduct10.apply((org.la4j.vector.DenseVector) basicVector13, (org.la4j.vector.DenseVector) basicVector38);
        ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo(matrix43);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct45 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix49 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix49.removeLastRow();
        double double54 = rowMajorSparseMatrix49.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int55 = rowMajorSparseMatrix49.cardinality();
        org.la4j.Vector vector57 = rowMajorSparseMatrix49.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix60 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix61 = ooPlaceMatrixHadamardProduct45.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix49, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix60);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix65 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix66 = rowMajorSparseMatrix65.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure67 = null;
        rowMajorSparseMatrix65.eachNonZero(matrixProcedure67);
        double[][] doubleArray69 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix70 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray69);
        org.la4j.Matrix matrix71 = ooPlaceMatrixHadamardProduct45.apply(rowMajorSparseMatrix65, denseMatrix70);
        org.la4j.Matrix matrix72 = ooPlaceMatrixByItsTransposeMultiplication0.apply(rowMajorSparseMatrix65);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(vector14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(vector17);
        org.junit.Assert.assertNotNull(sparseVector19);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertNotNull(vectorAccumulator26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix28);
        org.junit.Assert.assertNotNull(cCSMatrix34);
        org.junit.Assert.assertNotNull(vectorAccumulator35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix37);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(matrix43);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(vector57);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix60);
        org.junit.Assert.assertNotNull(matrix61);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(denseMatrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(matrix72);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.la4j.matrix.SparseMatrix sparseMatrix1 = org.la4j.matrix.SparseMatrix.identity((int) (byte) 1);
        org.junit.Assert.assertNotNull(sparseMatrix1);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.matrix.DenseMatrix denseMatrix32 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double33 = denseMatrix32.min();
        org.la4j.Matrix matrix34 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cRSMatrix29, denseMatrix32);
        double double35 = cRSMatrix29.determinant();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix37 = cRSMatrix29.removeRow((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Illegal row number, must be 0..-1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(denseMatrix32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double3 = cRSMatrix2.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator4 = cRSMatrix2.nonZeroRowMajorIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix7 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double8 = cRSMatrix7.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator9 = cRSMatrix7.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix12 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator13 = columnMajorSparseMatrix12.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator14 = rowMajorMatrixIterator9.orElseSubtract(matrixIterator13);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator18 = cCSMatrix17.nonZeroColumnMajorIterator();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean22 = cCSMatrix21.isRowMajor();
        org.la4j.Matrix matrix25 = cCSMatrix21.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator26 = cCSMatrix21.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator27 = columnMajorMatrixIterator18.andAlsoDivide((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator26);
        org.la4j.iterator.MatrixIterator matrixIterator28 = matrixIterator14.andAlsoMultiply(matrixIterator27);
        org.la4j.iterator.MatrixIterator matrixIterator29 = rowMajorMatrixIterator4.andAlsoDivide(matrixIterator14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix32 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean33 = cCSMatrix32.isRowMajor();
        org.la4j.Matrix matrix36 = cCSMatrix32.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator37 = cCSMatrix32.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator38 = rowMajorMatrixIterator4.orElseSubtract((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator37);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix41 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double42 = cRSMatrix41.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator43 = cRSMatrix41.nonZeroRowMajorIterator();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix46 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.iterator.MatrixIterator matrixIterator47 = columnMajorSparseMatrix46.nonZeroIterator();
        org.la4j.iterator.MatrixIterator matrixIterator48 = rowMajorMatrixIterator43.orElseSubtract(matrixIterator47);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix51 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean52 = cCSMatrix51.isRowMajor();
        org.la4j.Matrix matrix55 = cCSMatrix51.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator56 = cCSMatrix51.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator57 = matrixIterator48.orElseSubtract((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator56);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix60 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean61 = cCSMatrix60.isRowMajor();
        org.la4j.Matrix matrix64 = cCSMatrix60.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator65 = cCSMatrix60.nonZeroColumnMajorIterator();
        org.la4j.iterator.MatrixIterator matrixIterator66 = columnMajorMatrixIterator56.orElseAdd((org.la4j.iterator.MatrixIterator) columnMajorMatrixIterator65);
        org.la4j.iterator.MatrixIterator matrixIterator67 = null;
        org.la4j.iterator.MatrixIterator matrixIterator68 = columnMajorMatrixIterator65.orElseSubtract(matrixIterator67);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.iterator.MatrixIterator matrixIterator69 = rowMajorMatrixIterator4.andAlsoDivide(matrixIterator68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator4);
        org.junit.Assert.assertNotNull(cRSMatrix7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator9);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrixIterator13);
        org.junit.Assert.assertNotNull(matrixIterator14);
        org.junit.Assert.assertNotNull(cCSMatrix17);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator18);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator26);
        org.junit.Assert.assertNotNull(matrixIterator27);
        org.junit.Assert.assertNotNull(matrixIterator28);
        org.junit.Assert.assertNotNull(matrixIterator29);
        org.junit.Assert.assertNotNull(cCSMatrix32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(matrix36);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator37);
        org.junit.Assert.assertNotNull(matrixIterator38);
        org.junit.Assert.assertNotNull(cRSMatrix41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator43);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix46);
        org.junit.Assert.assertNotNull(matrixIterator47);
        org.junit.Assert.assertNotNull(matrixIterator48);
        org.junit.Assert.assertNotNull(cCSMatrix51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator56);
        org.junit.Assert.assertNotNull(matrixIterator57);
        org.junit.Assert.assertNotNull(cCSMatrix60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator65);
        org.junit.Assert.assertNotNull(matrixIterator66);
        org.junit.Assert.assertNotNull(matrixIterator68);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.la4j.matrix.DenseMatrix denseMatrix1 = org.la4j.matrix.DenseMatrix.identity(10);
        org.junit.Assert.assertNotNull(denseMatrix1);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct28 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix33 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator34 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray35 = cCSMatrix33.foldRows(vectorAccumulator34);
        org.la4j.matrix.DenseMatrix denseMatrix36 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray35);
        org.la4j.vector.dense.BasicVector basicVector37 = new org.la4j.vector.dense.BasicVector(doubleArray35);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray44 = cCSMatrix42.foldRows(vectorAccumulator43);
        org.la4j.matrix.DenseMatrix denseMatrix45 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray44);
        org.la4j.vector.dense.BasicVector basicVector46 = new org.la4j.vector.dense.BasicVector(doubleArray44);
        ooPlaceOuterProduct28.ensureApplicableTo((org.la4j.Vector) basicVector37, (org.la4j.Vector) basicVector46);
        org.la4j.vector.sparse.CompressedVector compressedVector49 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix50 = compressedVector49.toColumnMatrix();
        org.la4j.vector.dense.BasicVector basicVector52 = org.la4j.vector.dense.BasicVector.unit((int) (short) 0);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition53 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix56 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double57 = cRSMatrix56.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix61.removeLastRow();
        org.la4j.Matrix matrix63 = ooPlaceMatricesAddition53.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix56, rowMajorSparseMatrix61);
        boolean boolean64 = basicVector52.equals((java.lang.Object) rowMajorSparseMatrix61);
        org.la4j.Matrix matrix65 = ooPlaceOuterProduct28.apply((org.la4j.vector.SparseVector) compressedVector49, (org.la4j.vector.DenseVector) basicVector52);
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation66 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector68 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random70 = null;
        org.la4j.vector.DenseVector denseVector71 = org.la4j.vector.DenseVector.random(0, random70);
        org.la4j.Matrix matrix72 = matrixVectorVectorOperation66.apply(sparseVector68, denseVector71);
        org.la4j.Matrix matrix73 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector49, sparseVector68);
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory74 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector75 = sparseVector68.to(basicVectorVectorFactory74);
        java.lang.Class<org.la4j.vector.dense.BasicVector> basicVectorClass76 = basicVectorVectorFactory74.outputClass;
        java.lang.Class<org.la4j.vector.dense.BasicVector> basicVectorClass77 = basicVectorVectorFactory74.outputClass;
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cCSMatrix33);
        org.junit.Assert.assertNotNull(vectorAccumulator34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix36);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix45);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(basicVector52);
        org.junit.Assert.assertNotNull(cRSMatrix56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation66);
        org.junit.Assert.assertNotNull(sparseVector68);
        org.junit.Assert.assertNotNull(denseVector71);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix73);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory74);
        org.junit.Assert.assertNotNull(basicVector75);
        org.junit.Assert.assertNotNull(basicVectorClass76);
        org.junit.Assert.assertNotNull(basicVectorClass77);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix3 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix2);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation4 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray11 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray18 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray25 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray32 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray39 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray40 = new double[][] { doubleArray11, doubleArray18, doubleArray25, doubleArray32, doubleArray39 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix41 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray40);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation42 = matrixMatrixMatrixOperation4.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix41);
        java.util.Spliterator<java.lang.Double> doubleSpliterator43 = basic2DMatrix41.spliterator();
        basic2DMatrix41.setAll((double) (byte) 10);
        ooPlaceMatrixByItsTransposeMultiplication0.ensureApplicableTo((org.la4j.Matrix) basic2DMatrix41);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix49 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double50 = cRSMatrix49.min();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix51 = cRSMatrix49.toColumnMajorSparseMatrix();
        org.la4j.Matrix matrix52 = ooPlaceMatrixByItsTransposeMultiplication0.apply(columnMajorSparseMatrix51);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter53 = new org.la4j.inversion.NoPivotGaussInverter(matrix52);
        org.la4j.Matrix matrix54 = noPivotGaussInverter53.self();
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 10.0, 10.0, 10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(basic2DMatrix41);
        org.junit.Assert.assertNotNull(matrixMatrixOperation42);
        org.junit.Assert.assertNotNull(doubleSpliterator43);
        org.junit.Assert.assertNotNull(cRSMatrix49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix51);
        org.junit.Assert.assertNotNull(matrix52);
        org.junit.Assert.assertNotNull(matrix54);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        double[] doubleArray47 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray54 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray61 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray68 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray75 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray76 = new double[][] { doubleArray47, doubleArray54, doubleArray61, doubleArray68, doubleArray75 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix77 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray76);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix78 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray76);
        org.la4j.Matrix matrix79 = matrixMatrixOperation40.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix78);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Vector vector81 = basic2DMatrix78.getRow((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(basic2DMatrix77);
        org.junit.Assert.assertNotNull(matrix79);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.identity(0);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix47 = org.la4j.matrix.dense.Basic1DMatrix.from1DArray((int) (byte) 0, (int) (byte) 10, doubleArray46);
        double[][] doubleArray48 = basic1DMatrix47.toArray();
        org.la4j.Matrix matrix49 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix39, (org.la4j.matrix.DenseMatrix) basic1DMatrix47);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct50 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix54 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix55 = rowMajorSparseMatrix54.removeLastRow();
        double double59 = rowMajorSparseMatrix54.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int60 = rowMajorSparseMatrix54.cardinality();
        org.la4j.Vector vector62 = rowMajorSparseMatrix54.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix65 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix66 = ooPlaceMatrixHadamardProduct50.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix54, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix65);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix70 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix71 = rowMajorSparseMatrix70.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure72 = null;
        rowMajorSparseMatrix70.eachNonZero(matrixProcedure72);
        double[][] doubleArray74 = new double[][] {};
        org.la4j.matrix.DenseMatrix denseMatrix75 = org.la4j.matrix.DenseMatrix.from2DArray(doubleArray74);
        org.la4j.Matrix matrix76 = ooPlaceMatrixHadamardProduct50.apply(rowMajorSparseMatrix70, denseMatrix75);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate77 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix80 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean81 = advancedMatrixPredicate77.test((org.la4j.Matrix) columnMajorSparseMatrix80);
        org.la4j.inversion.NoPivotGaussInverter noPivotGaussInverter82 = new org.la4j.inversion.NoPivotGaussInverter((org.la4j.Matrix) columnMajorSparseMatrix80);
        org.la4j.Matrix matrix83 = denseMatrix75.hadamardProduct((org.la4j.Matrix) columnMajorSparseMatrix80);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix86 = org.la4j.matrix.sparse.CRSMatrix.diagonal(0, (double) (short) 100);
        double double87 = cRSMatrix86.product();
        double double88 = cRSMatrix86.min();
        byte[] byteArray89 = cRSMatrix86.toBinary();
        org.la4j.Matrix matrix90 = inPlaceCopyMatrixToMatrix0.apply(denseMatrix75, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix86);
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(basic1DMatrix47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(matrix49);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix54);
        org.junit.Assert.assertNotNull(matrix55);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(vector62);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix70);
        org.junit.Assert.assertNotNull(matrix71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(denseMatrix75);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate77);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(cRSMatrix86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.0d + "'", double88 == 0.0d);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrix90);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.vector.sparse.CompressedVector compressedVector21 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector21.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector26 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix27 = ooPlaceOuterProduct0.apply((org.la4j.vector.SparseVector) compressedVector21, (org.la4j.vector.SparseVector) compressedVector26);
        double double28 = compressedVector26.min();
        org.la4j.Vector vector29 = compressedVector26.blank();
        java.text.NumberFormat numberFormat30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = compressedVector26.mkString(numberFormat30, "%%MatrixMarket matrix array real general\n10 0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(vector29);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        byte[] byteArray4 = cRSMatrix3.toBinary();
        org.la4j.vector.functor.VectorFunction vectorFunction6 = org.la4j.Vectors.DEC_FUNCTION;
        cRSMatrix3.updateColumn(0, vectorFunction6);
        org.la4j.Matrix matrix9 = cRSMatrix3.removeRow(0);
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication10 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.vector.sparse.CompressedVector compressedVector12 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector12.swapElements(10, (int) (byte) 100);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct16 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        double double25 = rowMajorSparseMatrix20.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int26 = rowMajorSparseMatrix20.cardinality();
        org.la4j.Vector vector28 = rowMajorSparseMatrix20.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix31 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix32 = ooPlaceMatrixHadamardProduct16.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix20, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix31);
        org.la4j.Vector vector33 = ooPlaceVectorByMatrixMultiplication10.apply((org.la4j.vector.SparseVector) compressedVector12, columnMajorSparseMatrix31);
        boolean boolean35 = compressedVector12.isZeroAt((int) ' ');
        boolean boolean37 = compressedVector12.isZeroAt((int) '4');
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory38 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector39 = compressedVector12.to(basicVectorVectorFactory38);
        java.util.Spliterator<java.lang.Double> doubleSpliterator40 = compressedVector12.spliterator();
        org.la4j.Vector vector41 = ooPlaceMatrixByVectorMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, (org.la4j.vector.SparseVector) compressedVector12);
        org.la4j.iterator.VectorIterator vectorIterator42 = compressedVector12.iterator();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[32, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 0, 0, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 64, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(vectorFunction6);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(vector28);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(vector33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory38);
        org.junit.Assert.assertNotNull(basicVector39);
        org.junit.Assert.assertNotNull(doubleSpliterator40);
        org.junit.Assert.assertNotNull(vector41);
        org.junit.Assert.assertNotNull(vectorIterator42);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix41 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double44 = cCSMatrix41.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction46 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix47 = cCSMatrix41.transformRow(10, vectorFunction46);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix50 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator51 = cRSMatrix50.nonZeroIterator();
        org.la4j.Vector vector53 = cRSMatrix50.getColumn(100);
        boolean boolean56 = cRSMatrix50.nonZeroAt(1, (int) (short) 0);
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor57 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix50);
        org.la4j.Matrix matrix58 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) cCSMatrix41, (org.la4j.matrix.SparseMatrix) cRSMatrix50);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix60 = org.la4j.matrix.RowMajorSparseMatrix.identity((int) 'a');
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation61 = ooPlaceMatricesAddition0.partiallyApply(rowMajorSparseMatrix60);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix65 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix67 = rowMajorSparseMatrix65.blankOfRows(0);
        org.la4j.Matrix matrix69 = matrix67.removeColumn((int) (byte) 1);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct70 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix73 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator74 = cCSMatrix73.iterator();
        org.la4j.Vector vector77 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction79 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector80 = vector77.transform(vectorFunction79);
        org.la4j.Matrix matrix81 = cCSMatrix73.transformRow(0, vectorFunction79);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction82 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix86 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix87 = rowMajorSparseMatrix86.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix89 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix90 = ooPlaceMatricesSubtraction82.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix86, denseMatrix89);
        org.la4j.Matrix matrix91 = ooPlaceMatrixHadamardProduct70.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix73, denseMatrix89);
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatricesAddition0.ensureApplicableTo(matrix69, matrix91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given matrices should have the same shape: 0x34 does not equal to 52x52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(cCSMatrix41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction46);
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(cRSMatrix50);
        org.junit.Assert.assertNotNull(matrixIterator51);
        org.junit.Assert.assertNotNull(vector53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix60);
        org.junit.Assert.assertNotNull(matrixMatrixOperation61);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix65);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(cCSMatrix73);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator74);
        org.junit.Assert.assertNotNull(vector77);
        org.junit.Assert.assertNotNull(vectorFunction79);
        org.junit.Assert.assertNotNull(vector80);
        org.junit.Assert.assertNotNull(matrix81);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix86);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(denseMatrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertNotNull(matrix91);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        double double9 = rowMajorSparseMatrix4.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int10 = rowMajorSparseMatrix4.cardinality();
        org.la4j.Vector vector12 = rowMajorSparseMatrix4.getRow(0);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix15 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.Matrix matrix16 = ooPlaceMatrixHadamardProduct0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, (org.la4j.matrix.SparseMatrix) columnMajorSparseMatrix15);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = null;
        java.util.Random random20 = null;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix21 = org.la4j.matrix.ColumnMajorSparseMatrix.randomSymmetric((int) (byte) 0, (double) (-1), random20);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix22 = ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix17, columnMajorSparseMatrix21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix21);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.la4j.operation.VectorVectorOperation<org.la4j.Vector> vectorVectorVectorOperation0 = org.la4j.LinearAlgebra.OO_PLACE_VECTORS_ADDITION;
        org.la4j.vector.SparseVector sparseVector1 = null;
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation2 = vectorVectorVectorOperation0.partiallyApply(sparseVector1);
        org.la4j.vector.SparseVector sparseVector4 = org.la4j.vector.SparseVector.zero((int) '4');
        org.la4j.Vector vector6 = sparseVector4.multiply((double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            vectorVectorOperation2.ensureApplicableTo((org.la4j.Vector) sparseVector4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vectorVectorVectorOperation0);
        org.junit.Assert.assertNotNull(vectorVectorOperation2);
        org.junit.Assert.assertNotNull(sparseVector4);
        org.junit.Assert.assertNotNull(vector6);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix3 = org.la4j.matrix.dense.Basic1DMatrix.constant((int) ' ', (int) ' ', 0.0d);
        double double4 = basic1DMatrix3.euclideanNorm();
        // The following exception was thrown during execution in test generation
        try {
            basic1DMatrix3.swapColumns(30, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(basic1DMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        int int3 = cCSMatrix2.cardinality();
        byte[] byteArray4 = cCSMatrix2.toBinary();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix5 = org.la4j.matrix.dense.Basic1DMatrix.fromBinary(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can not decode Basic1DMatrix from the given byte array.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[48, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        org.la4j.matrix.SparseMatrix sparseMatrix11 = org.la4j.matrix.SparseMatrix.from1DArray((int) (byte) 0, (int) '4', doubleArray8);
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator12 = sparseMatrix11.nonZeroRowMajorIterator();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction14 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix17 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean18 = cCSMatrix17.isRowMajor();
        org.la4j.Matrix matrix21 = cCSMatrix17.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator22 = cCSMatrix17.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix26 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix28 = rowMajorSparseMatrix26.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double36 = rowMajorSparseMatrix32.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix37 = rowMajorSparseMatrix32.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct38 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean39 = sparseMatrix37.equals((java.lang.Object) ooPlaceOuterProduct38);
        org.la4j.Matrix matrix40 = rowMajorSparseMatrix26.hadamardProduct((org.la4j.Matrix) sparseMatrix37);
        org.la4j.Matrix matrix41 = ooPlaceMatricesSubtraction14.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix17, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix26);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator43 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double double44 = cCSMatrix17.foldNonZeroInRow((int) (short) 0, vectorAccumulator43);
        org.la4j.vector.functor.VectorProcedure vectorProcedure45 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator43);
        double double46 = sparseMatrix11.foldNonZeroInColumn((int) (short) 1, vectorAccumulator43);
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(sparseMatrix11);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator12);
        org.junit.Assert.assertNotNull(cCSMatrix17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator22);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix26);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(vectorAccumulator43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertNotNull(vectorProcedure45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct();
        java.util.Random random2 = null;
        org.la4j.vector.DenseVector denseVector3 = org.la4j.vector.DenseVector.random(0, random2);
        org.la4j.vector.sparse.CompressedVector compressedVector5 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        java.text.NumberFormat numberFormat6 = null;
        java.lang.String str7 = compressedVector5.toMatrixMarket(numberFormat6);
        org.la4j.Vector vector9 = compressedVector5.add((double) 52);
        org.la4j.Vector vector11 = compressedVector5.sliceRight((int) (byte) 10);
        org.la4j.Vector vector12 = ooPlaceVectorHadamardProduct0.apply(denseVector3, (org.la4j.vector.SparseVector) compressedVector5);
        org.la4j.vector.VectorFactory<org.la4j.vector.dense.BasicVector> basicVectorVectorFactory13 = org.la4j.Vectors.DENSE;
        org.la4j.vector.dense.BasicVector basicVector14 = compressedVector5.to(basicVectorVectorFactory13);
        org.la4j.Vector vector16 = basicVector14.blankOfLength(52);
        org.junit.Assert.assertNotNull(denseVector3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "%%MatrixMarket vector coordinate real\n32 0\n" + "'", str7, "%%MatrixMarket vector coordinate real\n32 0\n");
        org.junit.Assert.assertNotNull(vector9);
        org.junit.Assert.assertNotNull(vector11);
        org.junit.Assert.assertNotNull(vector12);
        org.junit.Assert.assertNotNull(basicVectorVectorFactory13);
        org.junit.Assert.assertNotNull(basicVector14);
        org.junit.Assert.assertNotNull(vector16);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator4 = cRSMatrix3.nonZeroIterator();
        org.la4j.Vector vector6 = cRSMatrix3.getColumn(100);
        boolean boolean9 = cRSMatrix3.nonZeroAt(1, (int) (short) 0);
        java.util.Random random12 = null;
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix13 = org.la4j.matrix.dense.Basic2DMatrix.random((int) (short) 0, 1, random12);
        org.la4j.Matrix matrix14 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, (org.la4j.matrix.DenseMatrix) basic2DMatrix13);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix17 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double18 = columnMajorSparseMatrix17.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory19 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix20 = columnMajorSparseMatrix17.to(basic1DMatrixMatrixFactory19);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix23 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, 0.0d);
        org.la4j.Vector vector25 = cRSMatrix23.getColumn((int) '4');
        org.la4j.matrix.SparseMatrix sparseMatrix26 = cRSMatrix23.toSparseMatrix();
        org.la4j.Matrix matrix27 = ooPlaceMatricesMultiplication0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix20, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix23);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix29 = org.la4j.matrix.sparse.CRSMatrix.identity((int) (byte) 1);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition30 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix33 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double34 = cRSMatrix33.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix38 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix39 = rowMajorSparseMatrix38.removeLastRow();
        org.la4j.Matrix matrix40 = ooPlaceMatricesAddition30.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix33, rowMajorSparseMatrix38);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition41 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix44 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double45 = cRSMatrix44.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix49 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix49.removeLastRow();
        org.la4j.Matrix matrix51 = ooPlaceMatricesAddition41.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix44, rowMajorSparseMatrix49);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix54 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix56 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix57 = ooPlaceMatricesAddition41.apply(columnMajorSparseMatrix54, denseMatrix56);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix61 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix62 = rowMajorSparseMatrix61.removeLastRow();
        double double66 = rowMajorSparseMatrix61.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector67 = rowMajorSparseMatrix61.toRowVector();
        org.la4j.Matrix matrix68 = ooPlaceMatricesAddition30.apply(denseMatrix56, rowMajorSparseMatrix61);
        org.la4j.matrix.SparseMatrix sparseMatrix69 = denseMatrix56.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication70 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix73 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator74 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray75 = cCSMatrix73.foldRows(vectorAccumulator74);
        org.la4j.Matrix matrix76 = ooPlaceMatrixByItsTransposeMultiplication70.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix73);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix79 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double80 = cRSMatrix79.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator81 = cRSMatrix79.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor82 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix79);
        double double83 = cRSMatrix79.max();
        org.la4j.Matrix matrix84 = ooPlaceMatrixByItsTransposeMultiplication70.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix79);
        org.la4j.Matrix matrix85 = matrix84.rotate();
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.SparseMatrix sparseMatrix86 = org.la4j.matrix.SparseMatrix.block((org.la4j.Matrix) basic1DMatrix20, (org.la4j.Matrix) cRSMatrix29, (org.la4j.Matrix) denseMatrix56, matrix84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertNotNull(matrixIterator4);
        org.junit.Assert.assertNotNull(vector6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(basic2DMatrix13);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory19);
        org.junit.Assert.assertNotNull(basic1DMatrix20);
        org.junit.Assert.assertNotNull(cRSMatrix23);
        org.junit.Assert.assertNotNull(vector25);
        org.junit.Assert.assertNotNull(sparseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(cRSMatrix29);
        org.junit.Assert.assertNotNull(cRSMatrix33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(matrix40);
        org.junit.Assert.assertNotNull(cRSMatrix44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrix51);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix54);
        org.junit.Assert.assertNotNull(denseMatrix56);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix61);
        org.junit.Assert.assertNotNull(matrix62);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertNotNull(vector67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(sparseMatrix69);
        org.junit.Assert.assertNotNull(cCSMatrix73);
        org.junit.Assert.assertNotNull(vectorAccumulator74);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(cRSMatrix79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 0.0d + "'", double80 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator81);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 10.0d + "'", double83 == 10.0d);
        org.junit.Assert.assertNotNull(matrix84);
        org.junit.Assert.assertNotNull(matrix85);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.util.Random random2 = null;
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.randomSymmetric(0, (double) 0.0f, random2);
        org.la4j.matrix.functor.MatrixFunction matrixFunction7 = org.la4j.Matrices.asModFunction(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            cCSMatrix3.updateAt((int) (byte) 0, (int) (short) 1, matrixFunction7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(matrixFunction7);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication41 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix44 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator45 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray46 = cCSMatrix44.foldRows(vectorAccumulator45);
        org.la4j.Matrix matrix47 = ooPlaceMatrixByItsTransposeMultiplication41.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation48 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix44);
        double double50 = cCSMatrix44.minInColumn(30);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = cCSMatrix44.getOrElse((int) '4', 30, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Row '52' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(cCSMatrix44);
        org.junit.Assert.assertNotNull(vectorAccumulator45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix47);
        org.junit.Assert.assertNotNull(matrixMatrixOperation48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        java.util.Random random3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.random((int) 'a', (int) '#', 1365.0d, random3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The density value should be between 0 and 1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.la4j.Vector vector2 = org.la4j.Vector.constant((int) (short) 10, (-48.0d));
        org.junit.Assert.assertNotNull(vector2);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (byte) 100, (double) (short) 10);
        org.la4j.decomposition.RawQRDecompositor rawQRDecompositor3 = new org.la4j.decomposition.RawQRDecompositor((org.la4j.Matrix) basic2DMatrix2);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate4 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix7 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean8 = advancedMatrixPredicate4.test((org.la4j.Matrix) columnMajorSparseMatrix7);
        org.la4j.Matrix matrix9 = columnMajorSparseMatrix7.rotate();
        boolean boolean10 = rawQRDecompositor3.applicableTo(matrix9);
        double double11 = matrix9.determinant();
        org.junit.Assert.assertNotNull(basic2DMatrix2);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate4);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix2 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        double[][] doubleArray3 = basic1DMatrix2.toArray();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = new org.la4j.matrix.dense.Basic2DMatrix(doubleArray3);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix5 = org.la4j.matrix.dense.Basic1DMatrix.from2DArray(doubleArray3);
        org.la4j.decomposition.QRDecompositor qRDecompositor6 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) basic1DMatrix5);
        org.junit.Assert.assertNotNull(basic1DMatrix2);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(basic1DMatrix5);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition11 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix14 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double15 = cRSMatrix14.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix19 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix20 = rowMajorSparseMatrix19.removeLastRow();
        org.la4j.Matrix matrix21 = ooPlaceMatricesAddition11.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix14, rowMajorSparseMatrix19);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix26 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix27 = ooPlaceMatricesAddition11.apply(columnMajorSparseMatrix24, denseMatrix26);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector37 = rowMajorSparseMatrix31.toRowVector();
        org.la4j.Matrix matrix38 = ooPlaceMatricesAddition0.apply(denseMatrix26, rowMajorSparseMatrix31);
        org.la4j.matrix.SparseMatrix sparseMatrix39 = denseMatrix26.toSparseMatrix();
        java.lang.Class<?> wildcardClass40 = denseMatrix26.getClass();
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(cRSMatrix14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(matrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertNotNull(denseMatrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertNotNull(matrix38);
        org.junit.Assert.assertNotNull(sparseMatrix39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix11 = cRSMatrix2.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory12 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix13 = cRSMatrix2.to(basic1DMatrixMatrixFactory12);
        org.la4j.linear.SquareRootSolver squareRootSolver14 = new org.la4j.linear.SquareRootSolver((org.la4j.Matrix) basic1DMatrix13);
        org.la4j.Vector vector16 = org.la4j.Vector.unit((int) (short) 10);
        java.lang.String str17 = vector16.toCSV();
        org.la4j.vector.SparseVector sparseVector18 = vector16.toSparseVector();
        double double19 = sparseVector18.euclideanNorm();
        org.la4j.Vector vector20 = squareRootSolver14.solve((org.la4j.Vector) sparseVector18);
        org.la4j.Vector vector22 = sparseVector18.add((double) (-1.0f));
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix11);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory12);
        org.junit.Assert.assertNotNull(basic1DMatrix13);
        org.junit.Assert.assertNotNull(vector16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000" + "'", str17, "1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000, 1,000");
        org.junit.Assert.assertNotNull(sparseVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 3.1622776601683795d + "'", double19 == 3.1622776601683795d);
        org.junit.Assert.assertNotNull(vector20);
        org.junit.Assert.assertNotNull(vector22);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.identity((int) (byte) 0);
        org.la4j.Matrix matrix3 = ooPlaceMatrixByItsTransposeMultiplication0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix2);
        double double4 = cCSMatrix2.max();
        org.la4j.LinearAlgebra.DecompositorFactory decompositorFactory5 = org.la4j.LinearAlgebra.CHOLESKY;
        org.la4j.decomposition.MatrixDecompositor matrixDecompositor6 = cCSMatrix2.withDecompositor(decompositorFactory5);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix9 = cCSMatrix2.sliceBottomRight((int) (short) 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad row argument 0; out of bounds");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertNotNull(matrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(decompositorFactory5);
        org.junit.Assert.assertNotNull(matrixDecompositor6);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.la4j.vector.DenseVector denseVector1 = org.la4j.vector.DenseVector.unit(1);
        org.junit.Assert.assertNotNull(denseVector1);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix2 = org.la4j.matrix.ColumnMajorSparseMatrix.diagonal((int) (byte) 10, (double) 0L);
        org.la4j.decomposition.QRDecompositor qRDecompositor3 = new org.la4j.decomposition.QRDecompositor((org.la4j.Matrix) columnMajorSparseMatrix2);
        org.la4j.Matrix matrix4 = qRDecompositor3.self();
        org.la4j.Matrix[] matrixArray5 = qRDecompositor3.decompose();
        org.la4j.Matrix matrix6 = qRDecompositor3.self();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix7 = new org.la4j.matrix.sparse.CRSMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix14 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix15 = rowMajorSparseMatrix14.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction17 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator18 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction17);
        double double19 = matrix15.fold(matrixAccumulator18);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator18);
        cCSMatrix10.eachNonZero(matrixProcedure20);
        cRSMatrix7.eachNonZero(matrixProcedure20);
        // The following exception was thrown during execution in test generation
        try {
            matrix6.each(matrixProcedure20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix2);
        org.junit.Assert.assertNotNull(matrix4);
        org.junit.Assert.assertNotNull(matrixArray5);
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix14);
        org.junit.Assert.assertNotNull(matrix15);
        org.junit.Assert.assertNotNull(matrixAccumulator18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0d) + "'", double19 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure20);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.la4j.Matrix matrix6 = org.la4j.Matrix.diagonal((int) (short) 10, (double) 0);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator8 = org.la4j.Vectors.asSumAccumulator(100.0d);
        double[] doubleArray9 = matrix6.foldColumns(vectorAccumulator8);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix10 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) 'a', (int) (byte) 0, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix11 = org.la4j.matrix.dense.Basic2DMatrix.from1DArray((int) (byte) 100, 1, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(matrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0]");
        org.junit.Assert.assertNotNull(basic2DMatrix10);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction1 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix4 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction5 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix8 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean9 = cCSMatrix8.isRowMajor();
        org.la4j.Matrix matrix12 = cCSMatrix8.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator13 = cCSMatrix8.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix17 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix17.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.Matrix matrix31 = rowMajorSparseMatrix17.hadamardProduct((org.la4j.Matrix) sparseMatrix28);
        org.la4j.Matrix matrix32 = ooPlaceMatricesSubtraction5.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix8, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17);
        org.la4j.Matrix matrix33 = ooPlaceMatricesSubtraction1.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix4, rowMajorSparseMatrix17);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor34 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix17);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix36 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix37 = inPlaceCopyMatrixToMatrix0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix17, (org.la4j.matrix.SparseMatrix) cRSMatrix36);
        org.la4j.Vector vector39 = cRSMatrix36.getColumn((-1));
        org.la4j.inversion.GaussJordanInverter gaussJordanInverter40 = new org.la4j.inversion.GaussJordanInverter((org.la4j.Matrix) cRSMatrix36);
        org.la4j.Matrix matrix41 = gaussJordanInverter40.self();
        org.la4j.Matrix matrix42 = gaussJordanInverter40.self();
        org.junit.Assert.assertNotNull(basic2DMatrix4);
        org.junit.Assert.assertNotNull(cCSMatrix8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(matrix12);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator13);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix17);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(matrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(cRSMatrix36);
        org.junit.Assert.assertNotNull(matrix37);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrix41);
        org.junit.Assert.assertNotNull(matrix42);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation5 = inPlaceCopyMatrixToMatrix0.partiallyApply(rowMajorSparseMatrix4);
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation6 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray13 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray20 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray27 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray34 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray41 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray42 = new double[][] { doubleArray13, doubleArray20, doubleArray27, doubleArray34, doubleArray41 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix43 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray42);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation44 = matrixMatrixMatrixOperation6.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix43);
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix45 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction46 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix49 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction50 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix53 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean54 = cCSMatrix53.isRowMajor();
        org.la4j.Matrix matrix57 = cCSMatrix53.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator58 = cCSMatrix53.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix64 = rowMajorSparseMatrix62.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix68 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double72 = rowMajorSparseMatrix68.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix73 = rowMajorSparseMatrix68.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct74 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean75 = sparseMatrix73.equals((java.lang.Object) ooPlaceOuterProduct74);
        org.la4j.Matrix matrix76 = rowMajorSparseMatrix62.hadamardProduct((org.la4j.Matrix) sparseMatrix73);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction50.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix53, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction46.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix49, rowMajorSparseMatrix62);
        org.la4j.decomposition.SingularValueDecompositor singularValueDecompositor79 = new org.la4j.decomposition.SingularValueDecompositor((org.la4j.Matrix) rowMajorSparseMatrix62);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix81 = org.la4j.matrix.sparse.CRSMatrix.fromCSV("");
        org.la4j.Matrix matrix82 = inPlaceCopyMatrixToMatrix45.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix62, (org.la4j.matrix.SparseMatrix) cRSMatrix81);
        org.la4j.Matrix matrix83 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix43, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix81);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix85 = org.la4j.matrix.sparse.CCSMatrix.fromCSV("");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix88 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double89 = cRSMatrix88.min();
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator90 = cRSMatrix88.nonZeroRowMajorIterator();
        org.la4j.decomposition.RawLUDecompositor rawLUDecompositor91 = new org.la4j.decomposition.RawLUDecompositor((org.la4j.Matrix) cRSMatrix88);
        org.la4j.Matrix matrix92 = inPlaceCopyMatrixToMatrix0.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix85, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix88);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix95 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 100);
        org.la4j.matrix.SparseMatrix sparseMatrix96 = columnMajorSparseMatrix95.toSparseMatrix();
        org.la4j.matrix.SparseMatrix sparseMatrix97 = null;
        org.la4j.Matrix matrix98 = inPlaceCopyMatrixToMatrix0.applySimple(sparseMatrix96, sparseMatrix97);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrixMatrixOperation5);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation6);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(basic2DMatrix43);
        org.junit.Assert.assertNotNull(matrixMatrixOperation44);
        org.junit.Assert.assertNotNull(basic2DMatrix49);
        org.junit.Assert.assertNotNull(cCSMatrix53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator58);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix68);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 1.0d + "'", double72 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(matrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(cRSMatrix81);
        org.junit.Assert.assertNotNull(matrix82);
        org.junit.Assert.assertNotNull(matrix83);
        org.junit.Assert.assertNotNull(cCSMatrix85);
        org.junit.Assert.assertNotNull(cRSMatrix88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator90);
        org.junit.Assert.assertNotNull(matrix92);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix95);
        org.junit.Assert.assertNotNull(sparseMatrix96);
        org.junit.Assert.assertNull(matrix98);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        org.la4j.operation.ooplace.OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatricesMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition1 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double5 = cRSMatrix4.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix9 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix10 = rowMajorSparseMatrix9.removeLastRow();
        org.la4j.Matrix matrix11 = ooPlaceMatricesAddition1.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix4, rowMajorSparseMatrix9);
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition12 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix15 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double16 = cRSMatrix15.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix20 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix21 = rowMajorSparseMatrix20.removeLastRow();
        org.la4j.Matrix matrix22 = ooPlaceMatricesAddition12.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix15, rowMajorSparseMatrix20);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix25 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix27 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix28 = ooPlaceMatricesAddition12.apply(columnMajorSparseMatrix25, denseMatrix27);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix32 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix33 = rowMajorSparseMatrix32.removeLastRow();
        double double37 = rowMajorSparseMatrix32.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        org.la4j.Vector vector38 = rowMajorSparseMatrix32.toRowVector();
        org.la4j.Matrix matrix39 = ooPlaceMatricesAddition1.apply(denseMatrix27, rowMajorSparseMatrix32);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix42 = org.la4j.matrix.RowMajorSparseMatrix.zero(0, (int) (short) 10);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = new org.la4j.matrix.sparse.CCSMatrix((int) (byte) 1, (int) (byte) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix49 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix50 = rowMajorSparseMatrix49.removeLastRow();
        org.la4j.matrix.functor.MatrixFunction matrixFunction52 = null;
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator53 = org.la4j.Matrices.asSumFunctionAccumulator((double) (-1), matrixFunction52);
        double double54 = matrix50.fold(matrixAccumulator53);
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure55 = org.la4j.Matrices.asAccumulatorProcedure(matrixAccumulator53);
        cCSMatrix45.eachNonZero(matrixProcedure55);
        org.la4j.Matrix matrix57 = ooPlaceMatricesAddition1.applySymmetric(rowMajorSparseMatrix42, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix45);
        org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct58 = new org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix61 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator62 = cCSMatrix61.iterator();
        org.la4j.Vector vector65 = org.la4j.Vector.unit((int) (short) 10);
        org.la4j.vector.functor.VectorFunction vectorFunction67 = org.la4j.Vectors.asMinusFunction((double) (byte) 100);
        org.la4j.Vector vector68 = vector65.transform(vectorFunction67);
        org.la4j.Matrix matrix69 = cCSMatrix61.transformRow(0, vectorFunction67);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction70 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix74 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix75 = rowMajorSparseMatrix74.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix77 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix78 = ooPlaceMatricesSubtraction70.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix74, denseMatrix77);
        org.la4j.Matrix matrix79 = ooPlaceMatrixHadamardProduct58.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix61, denseMatrix77);
        org.la4j.Matrix matrix80 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix42, (org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix61);
        org.junit.Assert.assertNotNull(cRSMatrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(matrix11);
        org.junit.Assert.assertNotNull(cRSMatrix15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix20);
        org.junit.Assert.assertNotNull(matrix21);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix25);
        org.junit.Assert.assertNotNull(denseMatrix27);
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix32);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(vector38);
        org.junit.Assert.assertNotNull(matrix39);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix49);
        org.junit.Assert.assertNotNull(matrix50);
        org.junit.Assert.assertNotNull(matrixAccumulator53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixProcedure55);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(cCSMatrix61);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator62);
        org.junit.Assert.assertNotNull(vector65);
        org.junit.Assert.assertNotNull(vectorFunction67);
        org.junit.Assert.assertNotNull(vector68);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix74);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(denseMatrix77);
        org.junit.Assert.assertNotNull(matrix78);
        org.junit.Assert.assertNotNull(matrix79);
        org.junit.Assert.assertNotNull(matrix80);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix2 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double3 = cCSMatrix2.max();
        cCSMatrix2.setAll((double) 100L);
        int[] intArray7 = new int[] { 1 };
        int[] intArray10 = new int[] { 10, (-1) };
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix11 = cCSMatrix2.select(intArray7, intArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Column '-1' is invalid.");
        } catch (java.lang.IndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[10, -1]");
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        cRSMatrix2.setRow(0, (double) '4');
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct7 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix12 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator13 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray14 = cCSMatrix12.foldRows(vectorAccumulator13);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray14);
        org.la4j.vector.dense.BasicVector basicVector16 = new org.la4j.vector.dense.BasicVector(doubleArray14);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix21 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator22 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray23 = cCSMatrix21.foldRows(vectorAccumulator22);
        org.la4j.matrix.DenseMatrix denseMatrix24 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray23);
        org.la4j.vector.dense.BasicVector basicVector25 = new org.la4j.vector.dense.BasicVector(doubleArray23);
        ooPlaceOuterProduct7.ensureApplicableTo((org.la4j.Vector) basicVector16, (org.la4j.Vector) basicVector25);
        org.la4j.vector.sparse.CompressedVector compressedVector28 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector28.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector33 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix34 = ooPlaceOuterProduct7.apply((org.la4j.vector.SparseVector) compressedVector28, (org.la4j.vector.SparseVector) compressedVector33);
        org.la4j.vector.functor.VectorFunction vectorFunction36 = org.la4j.Vectors.INC_FUNCTION;
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator37 = org.la4j.Vectors.asProductFunctionAccumulator((double) (byte) 100, vectorFunction36);
        double double38 = compressedVector28.fold(vectorAccumulator37);
        org.la4j.vector.functor.VectorProcedure vectorProcedure39 = org.la4j.Vectors.asAccumulatorProcedure(vectorAccumulator37);
        cRSMatrix2.eachNonZeroInColumn(10, vectorProcedure39);
        org.la4j.iterator.RowMajorMatrixIterator rowMajorMatrixIterator41 = cRSMatrix2.nonZeroRowMajorIterator();
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(cCSMatrix12);
        org.junit.Assert.assertNotNull(vectorAccumulator13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(cCSMatrix21);
        org.junit.Assert.assertNotNull(vectorAccumulator22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix24);
        org.junit.Assert.assertNotNull(matrix34);
        org.junit.Assert.assertNotNull(vectorFunction36);
        org.junit.Assert.assertNotNull(vectorAccumulator37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(vectorProcedure39);
        org.junit.Assert.assertNotNull(rowMajorMatrixIterator41);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix3 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double4 = cRSMatrix3.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix8 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix9 = rowMajorSparseMatrix8.removeLastRow();
        org.la4j.Matrix matrix10 = ooPlaceMatricesAddition0.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix3, rowMajorSparseMatrix8);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix15 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix16 = ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix13, denseMatrix15);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix19 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        byte[] byteArray20 = columnMajorSparseMatrix19.toBinary();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation21 = ooPlaceMatricesAddition0.partiallyApply(columnMajorSparseMatrix19);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix24 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator25 = cRSMatrix24.nonZeroIterator();
        org.la4j.Vector vector27 = cRSMatrix24.getColumn(100);
        boolean boolean30 = cRSMatrix24.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator32 = cRSMatrix24.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix33 = cRSMatrix24.toRowMajorSparseMatrix();
        double double34 = rowMajorSparseMatrix33.determinant();
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction35 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix38 = org.la4j.matrix.dense.Basic2DMatrix.unit((int) (byte) 1, (int) '4');
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction39 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix42 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean43 = cCSMatrix42.isRowMajor();
        org.la4j.Matrix matrix46 = cCSMatrix42.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator47 = cCSMatrix42.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix51 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix53 = rowMajorSparseMatrix51.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix57 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double61 = rowMajorSparseMatrix57.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix62 = rowMajorSparseMatrix57.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct63 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean64 = sparseMatrix62.equals((java.lang.Object) ooPlaceOuterProduct63);
        org.la4j.Matrix matrix65 = rowMajorSparseMatrix51.hadamardProduct((org.la4j.Matrix) sparseMatrix62);
        org.la4j.Matrix matrix66 = ooPlaceMatricesSubtraction39.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix42, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix51);
        org.la4j.Matrix matrix67 = ooPlaceMatricesSubtraction35.apply((org.la4j.matrix.DenseMatrix) basic2DMatrix38, rowMajorSparseMatrix51);
        org.la4j.Matrix matrix68 = ooPlaceMatricesAddition0.applySymmetric((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix33, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix51);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction69 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix73 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix74 = rowMajorSparseMatrix73.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix76 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix77 = ooPlaceMatricesSubtraction69.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix73, denseMatrix76);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix80 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double81 = columnMajorSparseMatrix80.determinant();
        org.la4j.matrix.DenseMatrix denseMatrix84 = org.la4j.matrix.DenseMatrix.diagonal(0, (double) (byte) 10);
        double double85 = denseMatrix84.min();
        double double86 = denseMatrix84.sum();
        org.la4j.Matrix matrix87 = ooPlaceMatricesSubtraction69.apply(columnMajorSparseMatrix80, denseMatrix84);
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix90 = org.la4j.matrix.sparse.CRSMatrix.diagonal((int) '#', (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix91 = ooPlaceMatricesAddition0.apply(denseMatrix84, (org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix8);
        org.junit.Assert.assertNotNull(matrix9);
        org.junit.Assert.assertNotNull(matrix10);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertNotNull(denseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(matrixMatrixOperation21);
        org.junit.Assert.assertNotNull(cRSMatrix24);
        org.junit.Assert.assertNotNull(matrixIterator25);
        org.junit.Assert.assertNotNull(vector27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(vectorIterator32);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E10d + "'", double34 == 1.0E10d);
        org.junit.Assert.assertNotNull(basic2DMatrix38);
        org.junit.Assert.assertNotNull(cCSMatrix42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(matrix46);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator47);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix51);
        org.junit.Assert.assertNotNull(matrix53);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix57);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.0d + "'", double61 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(matrix65);
        org.junit.Assert.assertNotNull(matrix66);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix73);
        org.junit.Assert.assertNotNull(matrix74);
        org.junit.Assert.assertNotNull(denseMatrix76);
        org.junit.Assert.assertNotNull(matrix77);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d);
        org.junit.Assert.assertNotNull(denseMatrix84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + Double.POSITIVE_INFINITY + "'", double85 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d);
        org.junit.Assert.assertNotNull(matrix87);
        org.junit.Assert.assertNotNull(cRSMatrix90);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.util.Random random2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.randomSymmetric((int) (byte) -1, (-1.0d), random2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Wrong matrix dimensions: -1x-1");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.diagonal((int) (short) 0, (double) (-1.0f));
        org.junit.Assert.assertNotNull(basic2DMatrix2);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct1 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix6 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator7 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray8 = cCSMatrix6.foldRows(vectorAccumulator7);
        org.la4j.matrix.DenseMatrix denseMatrix9 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray8);
        org.la4j.vector.dense.BasicVector basicVector10 = new org.la4j.vector.dense.BasicVector(doubleArray8);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix15 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator16 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray17 = cCSMatrix15.foldRows(vectorAccumulator16);
        org.la4j.matrix.DenseMatrix denseMatrix18 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray17);
        org.la4j.vector.dense.BasicVector basicVector19 = new org.la4j.vector.dense.BasicVector(doubleArray17);
        ooPlaceOuterProduct1.ensureApplicableTo((org.la4j.Vector) basicVector10, (org.la4j.Vector) basicVector19);
        java.lang.String str21 = basicVector19.toString();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix24 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double25 = columnMajorSparseMatrix24.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory26 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix27 = columnMajorSparseMatrix24.to(basic1DMatrixMatrixFactory26);
        org.la4j.Vector vector28 = ooPlaceVectorByMatrixMultiplication0.apply((org.la4j.vector.DenseVector) basicVector19, columnMajorSparseMatrix24);
        java.text.NumberFormat numberFormat29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = basicVector19.toMatrixMarket(numberFormat29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix6);
        org.junit.Assert.assertNotNull(vectorAccumulator7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix9);
        org.junit.Assert.assertNotNull(cCSMatrix15);
        org.junit.Assert.assertNotNull(vectorAccumulator16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000" + "'", str21, "1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000 1,000");
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory26);
        org.junit.Assert.assertNotNull(basic1DMatrix27);
        org.junit.Assert.assertNotNull(vector28);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix3 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix3.divide((double) (-1));
        org.la4j.iterator.MatrixIterator matrixIterator6 = matrix5.iterator();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix3);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(matrixIterator6);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.la4j.Matrix matrix3 = org.la4j.Matrix.constant((int) (short) 100, 30, 0.0d);
        org.junit.Assert.assertNotNull(matrix3);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix4 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix5 = rowMajorSparseMatrix4.removeLastRow();
        org.la4j.matrix.DenseMatrix denseMatrix7 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix8 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix4, denseMatrix7);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix11 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double12 = columnMajorSparseMatrix11.determinant();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory13 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix14 = columnMajorSparseMatrix11.to(basic1DMatrixMatrixFactory13);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix19 = rowMajorSparseMatrix18.removeLastRow();
        org.la4j.matrix.functor.MatrixProcedure matrixProcedure20 = null;
        rowMajorSparseMatrix18.eachNonZero(matrixProcedure20);
        org.la4j.Matrix matrix22 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.DenseMatrix) basic1DMatrix14, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix18);
        org.la4j.linear.ForwardBackSubstitutionSolver forwardBackSubstitutionSolver23 = new org.la4j.linear.ForwardBackSubstitutionSolver(matrix22);
        int int24 = forwardBackSubstitutionSolver23.unknowns();
        org.la4j.operation.MatrixMatrixOperation<org.la4j.Matrix> matrixMatrixMatrixOperation25 = org.la4j.LinearAlgebra.IN_PLACE_COPY_MATRIX_TO_MATRIX;
        double[] doubleArray32 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray39 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray46 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray53 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[] doubleArray60 = new double[] { '#', 100.0f, '4', '#', (byte) -1, '4' };
        double[][] doubleArray61 = new double[][] { doubleArray32, doubleArray39, doubleArray46, doubleArray53, doubleArray60 };
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix62 = org.la4j.matrix.dense.Basic2DMatrix.from2DArray(doubleArray61);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation63 = matrixMatrixMatrixOperation25.partiallyApply((org.la4j.matrix.DenseMatrix) basic2DMatrix62);
        org.la4j.iterator.MatrixIterator matrixIterator64 = basic2DMatrix62.iterator();
        org.la4j.Matrix matrix67 = basic2DMatrix62.copyOfShape((int) ' ', 10);
        boolean boolean68 = forwardBackSubstitutionSolver23.applicableTo((org.la4j.Matrix) basic2DMatrix62);
        org.la4j.Matrix matrix69 = forwardBackSubstitutionSolver23.self();
        int int70 = forwardBackSubstitutionSolver23.unknowns();
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix4);
        org.junit.Assert.assertNotNull(matrix5);
        org.junit.Assert.assertNotNull(denseMatrix7);
        org.junit.Assert.assertNotNull(matrix8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory13);
        org.junit.Assert.assertNotNull(basic1DMatrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertNotNull(matrix19);
        org.junit.Assert.assertNotNull(matrix22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(matrixMatrixMatrixOperation25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[35.0, 100.0, 52.0, 35.0, -1.0, 52.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(basic2DMatrix62);
        org.junit.Assert.assertNotNull(matrixMatrixOperation63);
        org.junit.Assert.assertNotNull(matrixIterator64);
        org.junit.Assert.assertNotNull(matrix67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(matrix69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.la4j.vector.dense.BasicVector basicVector1 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        double double2 = basicVector1.norm();
        double[] doubleArray3 = basicVector1.toArray();
        // The following exception was thrown during execution in test generation
        try {
            basicVector1.swapElements((int) ' ', (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.zero((int) (byte) 1, (int) '4', (int) (short) 1);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = cCSMatrix3.toColumnMajorSparseMatrix();
        double double6 = columnMajorSparseMatrix4.maxInColumn((int) (short) 10);
        org.la4j.matrix.functor.MatrixPredicate matrixPredicate7 = org.la4j.Matrices.TRIDIAGONAL_MATRIX;
        boolean boolean10 = matrixPredicate7.test(0, (int) (short) 100);
        boolean boolean13 = matrixPredicate7.test((int) (byte) 0, 100);
        boolean boolean14 = columnMajorSparseMatrix4.is(matrixPredicate7);
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertNotNull(matrixPredicate7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication1 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix4 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator5 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray6 = cCSMatrix4.foldRows(vectorAccumulator5);
        org.la4j.Matrix matrix7 = ooPlaceMatrixByItsTransposeMultiplication1.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix4);
        org.la4j.operation.VectorOperation<org.la4j.Vector> vectorVectorOperation8 = ooPlaceMatrixByVectorMultiplication0.partiallyApply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix4);
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction9 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix10 = new org.la4j.matrix.dense.Basic1DMatrix();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix13 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double14 = columnMajorSparseMatrix13.determinant();
        boolean boolean15 = columnMajorSparseMatrix13.isRowMajor();
        org.la4j.Matrix matrix16 = ooPlaceMatricesSubtraction9.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix10, columnMajorSparseMatrix13);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix19 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double22 = cCSMatrix19.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction24 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix25 = cCSMatrix19.transformRow(10, vectorFunction24);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate26 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix29 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean30 = advancedMatrixPredicate26.test((org.la4j.Matrix) columnMajorSparseMatrix29);
        org.la4j.vector.functor.VectorFunction vectorFunction32 = null;
        org.la4j.Matrix matrix33 = columnMajorSparseMatrix29.transformRow(0, vectorFunction32);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate34 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean35 = matrix33.is(advancedMatrixPredicate34);
        boolean boolean36 = cCSMatrix19.non(advancedMatrixPredicate34);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix40 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix42 = rowMajorSparseMatrix40.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double50 = rowMajorSparseMatrix46.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix51 = rowMajorSparseMatrix46.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct52 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean53 = sparseMatrix51.equals((java.lang.Object) ooPlaceOuterProduct52);
        org.la4j.Matrix matrix54 = rowMajorSparseMatrix40.hadamardProduct((org.la4j.Matrix) sparseMatrix51);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator55 = org.la4j.Matrices.mkInfinityNormAccumulator();
        double double56 = sparseMatrix51.foldNonZero(matrixAccumulator55);
        org.la4j.Matrix matrix57 = ooPlaceMatricesSubtraction9.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix19, sparseMatrix51);
        org.la4j.operation.VectorVectorOperation<org.la4j.Matrix> matrixVectorVectorOperation58 = org.la4j.LinearAlgebra.OO_PLACE_OUTER_PRODUCT;
        org.la4j.vector.SparseVector sparseVector60 = org.la4j.vector.SparseVector.zero(0);
        java.util.Random random62 = null;
        org.la4j.vector.DenseVector denseVector63 = org.la4j.vector.DenseVector.random(0, random62);
        org.la4j.Matrix matrix64 = matrixVectorVectorOperation58.apply(sparseVector60, denseVector63);
        org.la4j.vector.dense.BasicVector basicVector66 = new org.la4j.vector.dense.BasicVector((int) (byte) 10);
        org.la4j.Vector vector67 = basicVector66.copy();
        org.la4j.Matrix matrix68 = basicVector66.toDiagonalMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct69 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix74 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator75 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray76 = cCSMatrix74.foldRows(vectorAccumulator75);
        org.la4j.matrix.DenseMatrix denseMatrix77 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray76);
        org.la4j.vector.dense.BasicVector basicVector78 = new org.la4j.vector.dense.BasicVector(doubleArray76);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix83 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator84 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray85 = cCSMatrix83.foldRows(vectorAccumulator84);
        org.la4j.matrix.DenseMatrix denseMatrix86 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray85);
        org.la4j.vector.dense.BasicVector basicVector87 = new org.la4j.vector.dense.BasicVector(doubleArray85);
        ooPlaceOuterProduct69.ensureApplicableTo((org.la4j.Vector) basicVector78, (org.la4j.Vector) basicVector87);
        org.la4j.Matrix matrix89 = basicVector87.toColumnMatrix();
        org.la4j.Matrix matrix90 = matrixVectorVectorOperation58.apply((org.la4j.vector.DenseVector) basicVector66, (org.la4j.vector.DenseVector) basicVector87);
        double double91 = basicVector66.product();
        // The following exception was thrown during execution in test generation
        try {
            ooPlaceMatrixByVectorMultiplication0.ensureApplicableTo(matrix57, (org.la4j.Vector) basicVector66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Given vector should have the same length as number of columns in the given matrix: 10 does not equal to 52.");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix4);
        org.junit.Assert.assertNotNull(vectorAccumulator5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(vectorVectorOperation8);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(cCSMatrix19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction24);
        org.junit.Assert.assertNotNull(matrix25);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate26);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix40);
        org.junit.Assert.assertNotNull(matrix42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(matrix54);
        org.junit.Assert.assertNotNull(matrixAccumulator55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + Double.NEGATIVE_INFINITY + "'", double56 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix57);
        org.junit.Assert.assertNotNull(matrixVectorVectorOperation58);
        org.junit.Assert.assertNotNull(sparseVector60);
        org.junit.Assert.assertNotNull(denseVector63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(vector67);
        org.junit.Assert.assertNotNull(matrix68);
        org.junit.Assert.assertNotNull(cCSMatrix74);
        org.junit.Assert.assertNotNull(vectorAccumulator75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix77);
        org.junit.Assert.assertNotNull(cCSMatrix83);
        org.junit.Assert.assertNotNull(vectorAccumulator84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix86);
        org.junit.Assert.assertNotNull(matrix89);
        org.junit.Assert.assertNotNull(matrix90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix2 = org.la4j.matrix.dense.Basic2DMatrix.zero(100, 6);
        org.junit.Assert.assertNotNull(basic2DMatrix2);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix2 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator3 = cRSMatrix2.nonZeroIterator();
        org.la4j.Vector vector5 = cRSMatrix2.getColumn(100);
        boolean boolean8 = cRSMatrix2.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator10 = cRSMatrix2.nonZeroIteratorOfColumn((-1));
        double double11 = cRSMatrix2.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix15 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix16 = rowMajorSparseMatrix15.removeLastRow();
        double double20 = rowMajorSparseMatrix15.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int21 = rowMajorSparseMatrix15.cardinality();
        org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication22 = new org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix25 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator26 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray27 = cCSMatrix25.foldRows(vectorAccumulator26);
        org.la4j.Matrix matrix28 = ooPlaceMatrixByItsTransposeMultiplication22.apply((org.la4j.matrix.ColumnMajorSparseMatrix) cCSMatrix25);
        double double30 = cCSMatrix25.minInColumn(0);
        org.la4j.iterator.MatrixIterator matrixIterator31 = cCSMatrix25.nonZeroIterator();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix34 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        org.la4j.iterator.MatrixIterator matrixIterator35 = cRSMatrix34.nonZeroIterator();
        org.la4j.Vector vector37 = cRSMatrix34.getColumn(100);
        boolean boolean40 = cRSMatrix34.nonZeroAt(1, (int) (short) 0);
        org.la4j.iterator.VectorIterator vectorIterator42 = cRSMatrix34.nonZeroIteratorOfColumn((-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix43 = cRSMatrix34.toRowMajorSparseMatrix();
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory44 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix45 = cRSMatrix34.to(basic1DMatrixMatrixFactory44);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix46 = cCSMatrix25.to(basic1DMatrixMatrixFactory44);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix47 = rowMajorSparseMatrix15.to(basic1DMatrixMatrixFactory44);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix48 = cRSMatrix2.to(basic1DMatrixMatrixFactory44);
        org.junit.Assert.assertNotNull(cRSMatrix2);
        org.junit.Assert.assertNotNull(matrixIterator3);
        org.junit.Assert.assertNotNull(vector5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(vectorIterator10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(cCSMatrix25);
        org.junit.Assert.assertNotNull(vectorAccumulator26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(matrix28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(matrixIterator31);
        org.junit.Assert.assertNotNull(cRSMatrix34);
        org.junit.Assert.assertNotNull(matrixIterator35);
        org.junit.Assert.assertNotNull(vector37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(vectorIterator42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix43);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory44);
        org.junit.Assert.assertNotNull(basic1DMatrix45);
        org.junit.Assert.assertNotNull(basic1DMatrix46);
        org.junit.Assert.assertNotNull(basic1DMatrix47);
        org.junit.Assert.assertNotNull(basic1DMatrix48);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        boolean boolean4 = cCSMatrix3.isRowMajor();
        org.la4j.Matrix matrix7 = cCSMatrix3.blankOfShape((int) '#', (int) (short) 100);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator8 = cCSMatrix3.nonZeroColumnMajorIterator();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix12 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix14 = rowMajorSparseMatrix12.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix18 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double22 = rowMajorSparseMatrix18.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix23 = rowMajorSparseMatrix18.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct24 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean25 = sparseMatrix23.equals((java.lang.Object) ooPlaceOuterProduct24);
        org.la4j.Matrix matrix26 = rowMajorSparseMatrix12.hadamardProduct((org.la4j.Matrix) sparseMatrix23);
        org.la4j.Matrix matrix27 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix3, (org.la4j.matrix.SparseMatrix) rowMajorSparseMatrix12);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix32 = rowMajorSparseMatrix31.removeLastRow();
        double double36 = rowMajorSparseMatrix31.getOrElse(0, (int) (short) 10, (double) (byte) 10);
        int int37 = rowMajorSparseMatrix31.cardinality();
        org.la4j.Vector vector39 = rowMajorSparseMatrix31.getRow(0);
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation40 = ooPlaceMatricesSubtraction0.partiallyApply(rowMajorSparseMatrix31);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix41 = new org.la4j.matrix.dense.Basic1DMatrix();
        org.la4j.operation.MatrixOperation<org.la4j.Matrix> matrixMatrixOperation42 = ooPlaceMatricesSubtraction0.partiallyApply((org.la4j.matrix.DenseMatrix) basic1DMatrix41);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix46 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double50 = rowMajorSparseMatrix46.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.iterator.VectorIterator vectorIterator52 = rowMajorSparseMatrix46.nonZeroIteratorOfRow((int) (byte) 0);
        double double53 = rowMajorSparseMatrix46.norm();
        org.la4j.operation.ooplace.OoPlaceMatricesAddition ooPlaceMatricesAddition54 = new org.la4j.operation.ooplace.OoPlaceMatricesAddition();
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix57 = org.la4j.matrix.sparse.CRSMatrix.diagonal(10, (double) 10);
        double double58 = cRSMatrix57.min();
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix62 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix63 = rowMajorSparseMatrix62.removeLastRow();
        org.la4j.Matrix matrix64 = ooPlaceMatricesAddition54.apply((org.la4j.matrix.RowMajorSparseMatrix) cRSMatrix57, rowMajorSparseMatrix62);
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix67 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        org.la4j.matrix.DenseMatrix denseMatrix69 = org.la4j.matrix.DenseMatrix.identity(100);
        org.la4j.Matrix matrix70 = ooPlaceMatricesAddition54.apply(columnMajorSparseMatrix67, denseMatrix69);
        int int71 = columnMajorSparseMatrix67.columns();
        org.la4j.Matrix matrix72 = ooPlaceMatricesSubtraction0.apply(rowMajorSparseMatrix46, columnMajorSparseMatrix67);
        org.la4j.Matrix matrix75 = org.la4j.Matrix.zero((int) (byte) 1, (int) (short) 0);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix76 = matrix75.toRowMajorSparseMatrix();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix79 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.iterator.ColumnMajorMatrixIterator columnMajorMatrixIterator80 = cCSMatrix79.nonZeroColumnMajorIterator();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix83 = org.la4j.matrix.dense.Basic1DMatrix.unit((int) (byte) 10, (int) (byte) 0);
        org.la4j.matrix.MatrixFactory<org.la4j.matrix.dense.Basic1DMatrix> basic1DMatrixMatrixFactory84 = org.la4j.Matrices.BASIC_1D;
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix85 = basic1DMatrix83.to(basic1DMatrixMatrixFactory84);
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix86 = cCSMatrix79.to(basic1DMatrixMatrixFactory84);
        org.la4j.matrix.dense.Basic2DMatrix basic2DMatrix88 = org.la4j.matrix.dense.Basic2DMatrix.identity((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix89 = org.la4j.matrix.RowMajorSparseMatrix.block(matrix72, matrix75, (org.la4j.Matrix) cCSMatrix79, (org.la4j.Matrix) basic2DMatrix88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Sides of blocks are incompatible!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator8);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix12);
        org.junit.Assert.assertNotNull(matrix14);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(matrix26);
        org.junit.Assert.assertNotNull(matrix27);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix32);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(vector39);
        org.junit.Assert.assertNotNull(matrixMatrixOperation40);
        org.junit.Assert.assertNotNull(matrixMatrixOperation42);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix46);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.0d + "'", double50 == 1.0d);
        org.junit.Assert.assertNotNull(vectorIterator52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertNotNull(cRSMatrix57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix62);
        org.junit.Assert.assertNotNull(matrix63);
        org.junit.Assert.assertNotNull(matrix64);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix67);
        org.junit.Assert.assertNotNull(denseMatrix69);
        org.junit.Assert.assertNotNull(matrix70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(matrix72);
        org.junit.Assert.assertNotNull(matrix75);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix76);
        org.junit.Assert.assertNotNull(cCSMatrix79);
        org.junit.Assert.assertNotNull(columnMajorMatrixIterator80);
        org.junit.Assert.assertNotNull(basic1DMatrix83);
        org.junit.Assert.assertNotNull(basic1DMatrixMatrixFactory84);
        org.junit.Assert.assertNotNull(basic1DMatrix85);
        org.junit.Assert.assertNotNull(basic1DMatrix86);
        org.junit.Assert.assertNotNull(basic2DMatrix88);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct0 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix5 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator6 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray7 = cCSMatrix5.foldRows(vectorAccumulator6);
        org.la4j.matrix.DenseMatrix denseMatrix8 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray7);
        org.la4j.vector.dense.BasicVector basicVector9 = new org.la4j.vector.dense.BasicVector(doubleArray7);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix14 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator15 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray16 = cCSMatrix14.foldRows(vectorAccumulator15);
        org.la4j.matrix.DenseMatrix denseMatrix17 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray16);
        org.la4j.vector.dense.BasicVector basicVector18 = new org.la4j.vector.dense.BasicVector(doubleArray16);
        ooPlaceOuterProduct0.ensureApplicableTo((org.la4j.Vector) basicVector9, (org.la4j.Vector) basicVector18);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix23 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double27 = rowMajorSparseMatrix23.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix28 = rowMajorSparseMatrix23.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct29 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean30 = sparseMatrix28.equals((java.lang.Object) ooPlaceOuterProduct29);
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct31 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix36 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator37 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray38 = cCSMatrix36.foldRows(vectorAccumulator37);
        org.la4j.matrix.DenseMatrix denseMatrix39 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray38);
        org.la4j.vector.dense.BasicVector basicVector40 = new org.la4j.vector.dense.BasicVector(doubleArray38);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix45 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        org.la4j.vector.functor.VectorAccumulator vectorAccumulator46 = org.la4j.Vectors.mkEuclideanNormAccumulator();
        double[] doubleArray47 = cCSMatrix45.foldRows(vectorAccumulator46);
        org.la4j.matrix.DenseMatrix denseMatrix48 = org.la4j.matrix.DenseMatrix.from1DArray(0, (int) (byte) 0, doubleArray47);
        org.la4j.vector.dense.BasicVector basicVector49 = new org.la4j.vector.dense.BasicVector(doubleArray47);
        ooPlaceOuterProduct31.ensureApplicableTo((org.la4j.Vector) basicVector40, (org.la4j.Vector) basicVector49);
        org.la4j.vector.sparse.CompressedVector compressedVector52 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        compressedVector52.swapElements(10, (int) (byte) 100);
        org.la4j.vector.sparse.CompressedVector compressedVector57 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.Matrix matrix58 = ooPlaceOuterProduct31.apply((org.la4j.vector.SparseVector) compressedVector52, (org.la4j.vector.SparseVector) compressedVector57);
        double double59 = compressedVector57.min();
        org.la4j.iterator.VectorIterator vectorIterator60 = compressedVector57.iterator();
        org.la4j.Matrix matrix61 = basicVector9.apply((org.la4j.operation.VectorVectorOperation<org.la4j.Matrix>) ooPlaceOuterProduct29, (org.la4j.Vector) compressedVector57);
        org.la4j.vector.sparse.CompressedVector compressedVector63 = new org.la4j.vector.sparse.CompressedVector((int) ' ');
        org.la4j.vector.DenseVector denseVector64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix65 = ooPlaceOuterProduct29.apply((org.la4j.vector.SparseVector) compressedVector63, denseVector64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cCSMatrix5);
        org.junit.Assert.assertNotNull(vectorAccumulator6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix8);
        org.junit.Assert.assertNotNull(cCSMatrix14);
        org.junit.Assert.assertNotNull(vectorAccumulator15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix17);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix23);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(cCSMatrix36);
        org.junit.Assert.assertNotNull(vectorAccumulator37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix39);
        org.junit.Assert.assertNotNull(cCSMatrix45);
        org.junit.Assert.assertNotNull(vectorAccumulator46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]");
        org.junit.Assert.assertNotNull(denseMatrix48);
        org.junit.Assert.assertNotNull(matrix58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(vectorIterator60);
        org.junit.Assert.assertNotNull(matrix61);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix3 = new org.la4j.matrix.sparse.CCSMatrix((int) 'a', (int) ' ', (int) (byte) 0);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.la4j.operation.ooplace.OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new org.la4j.operation.ooplace.OoPlaceMatricesSubtraction();
        org.la4j.matrix.dense.Basic1DMatrix basic1DMatrix1 = new org.la4j.matrix.dense.Basic1DMatrix();
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix4 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        double double5 = columnMajorSparseMatrix4.determinant();
        boolean boolean6 = columnMajorSparseMatrix4.isRowMajor();
        org.la4j.Matrix matrix7 = ooPlaceMatricesSubtraction0.apply((org.la4j.matrix.DenseMatrix) basic1DMatrix1, columnMajorSparseMatrix4);
        org.la4j.matrix.sparse.CCSMatrix cCSMatrix10 = org.la4j.matrix.sparse.CCSMatrix.diagonal((int) '4', (double) (byte) -1);
        double double13 = cCSMatrix10.get((int) (byte) 0, (int) (short) 1);
        org.la4j.vector.functor.VectorFunction vectorFunction15 = org.la4j.Vectors.DEC_FUNCTION;
        org.la4j.Matrix matrix16 = cCSMatrix10.transformRow(10, vectorFunction15);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate17 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        org.la4j.matrix.ColumnMajorSparseMatrix columnMajorSparseMatrix20 = org.la4j.matrix.ColumnMajorSparseMatrix.zero(0, (int) (short) 0);
        boolean boolean21 = advancedMatrixPredicate17.test((org.la4j.Matrix) columnMajorSparseMatrix20);
        org.la4j.vector.functor.VectorFunction vectorFunction23 = null;
        org.la4j.Matrix matrix24 = columnMajorSparseMatrix20.transformRow(0, vectorFunction23);
        org.la4j.matrix.functor.AdvancedMatrixPredicate advancedMatrixPredicate25 = org.la4j.Matrices.SYMMETRIC_MATRIX;
        boolean boolean26 = matrix24.is(advancedMatrixPredicate25);
        boolean boolean27 = cCSMatrix10.non(advancedMatrixPredicate25);
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix31 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        org.la4j.Matrix matrix33 = rowMajorSparseMatrix31.divide((double) (-1));
        org.la4j.matrix.RowMajorSparseMatrix rowMajorSparseMatrix37 = org.la4j.matrix.RowMajorSparseMatrix.zero((int) (byte) 1, (int) '#', 10);
        double double41 = rowMajorSparseMatrix37.getOrElse((int) (short) 0, (int) (byte) 1, (double) 1.0f);
        org.la4j.matrix.SparseMatrix sparseMatrix42 = rowMajorSparseMatrix37.toSparseMatrix();
        org.la4j.operation.ooplace.OoPlaceOuterProduct ooPlaceOuterProduct43 = new org.la4j.operation.ooplace.OoPlaceOuterProduct();
        boolean boolean44 = sparseMatrix42.equals((java.lang.Object) ooPlaceOuterProduct43);
        org.la4j.Matrix matrix45 = rowMajorSparseMatrix31.hadamardProduct((org.la4j.Matrix) sparseMatrix42);
        org.la4j.matrix.functor.MatrixAccumulator matrixAccumulator46 = org.la4j.Matrices.mkInfinityNormAccumulator();
        double double47 = sparseMatrix42.foldNonZero(matrixAccumulator46);
        org.la4j.Matrix matrix48 = ooPlaceMatricesSubtraction0.applySimple((org.la4j.matrix.SparseMatrix) cCSMatrix10, sparseMatrix42);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = sparseMatrix42.isZeroAt(5, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(matrix7);
        org.junit.Assert.assertNotNull(cCSMatrix10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertNotNull(vectorFunction15);
        org.junit.Assert.assertNotNull(matrix16);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate17);
        org.junit.Assert.assertNotNull(columnMajorSparseMatrix20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(matrix24);
        org.junit.Assert.assertNotNull(advancedMatrixPredicate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix31);
        org.junit.Assert.assertNotNull(matrix33);
        org.junit.Assert.assertNotNull(rowMajorSparseMatrix37);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(sparseMatrix42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(matrix45);
        org.junit.Assert.assertNotNull(matrixAccumulator46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.NEGATIVE_INFINITY + "'", double47 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(matrix48);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix();
        org.la4j.matrix.DenseMatrix denseMatrix1 = null;
        org.la4j.matrix.sparse.CRSMatrix cRSMatrix4 = org.la4j.matrix.sparse.CRSMatrix.zero(100, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.la4j.Matrix matrix5 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix1, (org.la4j.matrix.SparseMatrix) cRSMatrix4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(cRSMatrix4);
    }
}

